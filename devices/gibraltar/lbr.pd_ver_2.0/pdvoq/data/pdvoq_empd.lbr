$block{pdvoq_empd} = {
  Defines_db => "..\\verilog\\pdvoq_defines.v,..\\..\\defines\\pd_fd_defines.v,..\\..\\defines\\control_common_defines.v,..\\..\\voq_cgm\\verilog\\voq_cgm_defines.v,..\\..\\pdvoq\\verilog\\pdvoq_int_pd_defines.v",
  ProjectName => "Gibraltar",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "1",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt test register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "9",
    Type => "Config",
    fbmmemEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "fbmmemEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pdmEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pdmEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    WriteFailFifoEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "WriteFailFifoEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "9",
    Type => "Config",
    fbmmemEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "fbmmemEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pdmEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pdmEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    WriteFailFifoEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "WriteFailFifoEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "9",
    Type => "Config",
    fbmmemEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "fbmmemEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pdmEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pdmEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    WriteFailFifoEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "WriteFailFifoEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "9",
    Type => "Config",
    fbmmemEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "fbmmemEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pdmEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pdmEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    WriteFailFifoEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "WriteFailFifoEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "9",
    Type => "ReadOnly",
    fbmmemErrInt => { #Structure Type: RegField;
      Name => "fbmmemErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    pdmErrInt => { #Structure Type: RegField;
      Name => "pdmErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    WriteFailFifoErrInt => { #Structure Type: RegField;
      Name => "WriteFailFifoErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier0ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier1ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier2ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier3ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier4ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier5ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "16",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "14",
      Position => "13:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "15:14",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "5",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "4",
      Position => "3:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  TcamScanPeriodCfg => { #Structure Type: Reg; Skip Register;
    Name => "TcamScanPeriodCfg",
    RegMem => "Reg",
    Address => "3B",
    Description => "Configures period of TCAM scan for SER, set 0 to disable",
    Width => "32",
    Type => "Config",
    TcamScanPeriod => { #Structure Type: RegField;
      Name => "TcamScanPeriod",
      RegMem => "RegField",
      Description => "Configures period of TCAM scan for SER, set 0 to disable",
      Width => "32",
      Position => "31:0",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d120000000",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "73", # Excel Formula: =calc_reg_width(E25:E53,F53)
    Type => "Config",
    SACR1P_RME => { #Structure Type: RegField;
      Name => "SACR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACR1P_RM => { #Structure Type: RegField;
      Name => "SACR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RME => { #Structure Type: RegField;
      Name => "SACU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RM => { #Structure Type: RegField;
      Name => "SACU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "9:6", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RME => { #Structure Type: RegField;
      Name => "SADC1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RM => { #Structure Type: RegField;
      Name => "SADC1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "14:11", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEA => { #Structure Type: RegField;
      Name => "SADR2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "15", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMA => { #Structure Type: RegField;
      Name => "SADR2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "19:16", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEB => { #Structure Type: RegField;
      Name => "SADR2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMB => { #Structure Type: RegField;
      Name => "SADR2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "24:21", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEA => { #Structure Type: RegField;
      Name => "SADS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "25", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMA => { #Structure Type: RegField;
      Name => "SADS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "29:26", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEB => { #Structure Type: RegField;
      Name => "SADS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMB => { #Structure Type: RegField;
      Name => "SADS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "34:31", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RME => { #Structure Type: RegField;
      Name => "SASR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "35", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RM => { #Structure Type: RegField;
      Name => "SASR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "39:36", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RME => { #Structure Type: RegField;
      Name => "SASS1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RM => { #Structure Type: RegField;
      Name => "SASS1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "44:41", # Excel Formula: =calc_position(F41,E42)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEA => { #Structure Type: RegField;
      Name => "SASS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "45", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMA => { #Structure Type: RegField;
      Name => "SASS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "49:46", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEB => { #Structure Type: RegField;
      Name => "SASS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMB => { #Structure Type: RegField;
      Name => "SASS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "54:51", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RME => { #Structure Type: RegField;
      Name => "SASU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "55", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RM => { #Structure Type: RegField;
      Name => "SASU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "59:56", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RME => { #Structure Type: RegField;
      Name => "SADU1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "60", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RM => { #Structure Type: RegField;
      Name => "SADU1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "64:61", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RA => { #Structure Type: RegField;
      Name => "SADS2P_RA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Assist for Dual port",
      Width => "2",
      Position => "66:65", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_WA => { #Structure Type: RegField;
      Name => "SADU1P_WA",
      RegMem => "RegField",
      Description => "Write-Assist configuration for the SP SADU compiler",
      Width => "3",
      Position => "69:67", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d5",
    },
    SADU1P_WPULSE => { #Structure Type: RegField;
      Name => "SADU1P_WPULSE",
      RegMem => "RegField",
      Description => "Write-Assist-Pulse configuration for the SP SADU compiler",
      Width => "3",
      Position => "72:70", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E55:E55,F55)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "Spare register",
    Width => "128", # Excel Formula: =calc_reg_width(E57:E57,F57)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "Spare register ",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C56,A56,G56)
    Description => "PMRO controller configuration",
    Width => "32", # Excel Formula: =calc_reg_width(E59:E63,F63)
    Type => "Config",
    PmroRstn => { #Structure Type: RegField;
      Name => "PmroRstn",
      RegMem => "RegField",
      Description => "PMRO reset, active low",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroConfigEn => { #Structure Type: RegField;
      Name => "PmroConfigEn",
      RegMem => "RegField",
      Description => "Enable pmro configuration, when equals to 0 configurations are locked",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroStart => { #Structure Type: RegField;
      Name => "PmroStart",
      RegMem => "RegField",
      Description => "Start the pmro operation",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroRingEn => { #Structure Type: RegField;
      Name => "PmroRingEn",
      RegMem => "RegField",
      Description => "Determines which PMRO ring to activate, should be configured as one hot",
      Width => "7",
      Position => "9:3", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroCntPeriod => { #Structure Type: RegField;
      Name => "PmroCntPeriod",
      RegMem => "RegField",
      Description => "Number of core clock cycles on which PMRO is measured",
      Width => "22",
      Position => "31:10", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "h3FFFFF",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "PMRO status configuration",
    Width => "23", # Excel Formula: =calc_reg_width(E65:E66,F66)
    Type => "ReadOnly",
    PmroCountOut => { #Structure Type: RegField;
      Name => "PmroCountOut",
      RegMem => "RegField",
      Description => "The ring oscilator counter value.",
      Width => "22",
      Position => "21:0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Status",
      UsedBy => "pmro",
    },
    PmroDone => { #Structure Type: RegField;
      Name => "PmroDone",
      RegMem => "RegField",
      Description => "Pmro operation done, PmroCountOut is valid.",
      Width => "1",
      Position => "22", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "Mirror Bus configurations",
    Width => "11", # Excel Formula: =calc_reg_width(E68:E69,F69)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "Enable Mirror Bus",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F67,E68,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "Mirror Bus selector",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C67,A67,G67)
    Description => "Mirror Bus status result",
    Width => "32", # Excel Formula: =calc_reg_width(E71:E71,F71)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "Mirror Bus status result",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F70,E71,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C70,A70,G70)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E73:E73,F73)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  AlmostFull => { #Structure Type: Reg;
    Name => "AlmostFull",
    RegMem => "Reg",
    Address => "100",
    Width => "26", # Excel Formula: =calc_reg_width(E8:E11,F11)
    Type => "Config",
    del_req_fifo_alm_full_cfg => { #Structure Type: RegField;
      Name => "del_req_fifo_alm_full_cfg",
      RegMem => "RegField",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d2",
      InitValueAllModes => "5",
    },
    wr_fail_fifo_alm_full_cfg => { #Structure Type: RegField;
      Name => "wr_fail_fifo_alm_full_cfg",
      RegMem => "RegField",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d35",
    },
    FbmAlmEmptySlowdownWritesTh => { #Structure Type: RegField;
      Name => "FbmAlmEmptySlowdownWritesTh",
      RegMem => "RegField",
      Width => "8",
      Position => "17:10", # Excel Formula: =calc_position(F9,E10)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d128",
    },
    FbmAlmEmptyStopNewWritesTh => { #Structure Type: RegField;
      Name => "FbmAlmEmptyStopNewWritesTh",
      RegMem => "RegField",
      Width => "8",
      Position => "25:18", # Excel Formula: =calc_position(F10,E11)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d28",
    },
  },
  Status => { #Structure Type: Reg;
    Name => "Status",
    RegMem => "Reg",
    Address => "101", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Width => "7", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    InitDone => { #Structure Type: RegField;
      Name => "InitDone",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Status",
      UsedBy => "EMPD",
    },
    wr_fail_fifo_status => { #Structure Type: RegField;
      Name => "wr_fail_fifo_status",
      RegMem => "RegField",
      Width => "6",
      Position => "6:1", # Excel Formula: =calc_position(F13,E14)
      Type => "Status",
      UsedBy => "EMPD",
    },
  },
  FbmConfigurations => { #Structure Type: Reg;
    Name => "FbmConfigurations",
    RegMem => "Reg",
    Address => "102", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "FBM init configurations",
    Width => "156", # Excel Formula: =calc_reg_width(E16:E19,F19)
    Type => "Config",
    FbmInit => { #Structure Type: RegField;
      Name => "FbmInit",
      RegMem => "RegField",
      Description => "If set, initializes FBM logic",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d0",
    },
    FbmWorkingMode => { #Structure Type: RegField;
      Name => "FbmWorkingMode",
      RegMem => "RegField",
      Description => "If set, manual total buffers is applied",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F16,E17)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d0",
    },
    FbmTotalBuffers => { #Structure Type: RegField;
      Name => "FbmTotalBuffers",
      RegMem => "RegField",
      Description => "If FbmWorkingMode set, this number of buffers will be used",
      Width => "14",
      Position => "15:2", # Excel Formula: =calc_position(F17,E18)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d1728",
    },
    FbmNotEmptyEntry => { #Structure Type: RegField;
      Name => "FbmNotEmptyEntry",
      RegMem => "RegField",
      Description => "If FbmWorkingMode set, indicates which entry in FBM is not empty",
      Width => "140", # Excel Formula: =K22/E21
      Position => "155:16", # Excel Formula: =calc_position(F18,E19)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "h3_ffff_ffff_ffff_ffff",
    },
  },
  fbmmem => { #Structure Type: Mem;
    Name => "fbmmem",
    RegMem => "Mem",
    Address => "100000",
    Description => "bitmap memory for the free buffer manager",
    Width => "72", # Excel Formula: =calc_mem_width(E21:E21,M20,F21,-1)
    Type => "Dynamic",
    UsedBy => "FBM: Read,FBM: Write",
    MemEntries => "140", # Excel Formula: =K22/E21
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteBeforeProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,DisableSameAddressErr=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "Note that FBM memory must be eq3 ",
    MemLogicalWidth => "64",
    fbmdata => { #Structure Type: MemField;
      Name => "fbmdata",
      RegMem => "MemField",
      Description => "bitmap",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F20,E21,TRUE)
    },
  },
  pdm => { #Structure Type: Mem;
    Name => "pdm",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C20,A20,G22,L22)
    Description => "payload memory for each EM",
    Width => "152", # Excel Formula: =calc_mem_width(E23:E23,M22,F23,-1)
    Type => "Dynamic",
    UsedBy => "empd",
    MemEntries => "8960", # Excel Formula: =140*1024/16
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,DisableSameAddressErr=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    MemLogicalWidth => "143",
    pdmdata => { #Structure Type: MemField;
      Name => "pdmdata",
      RegMem => "MemField",
      Description => "packet descripror ",
      Width => "143", # Excel Formula: =calc_field_width_define("VOQ_CGM_ENQ_TIME_WIDTH") + calc_field_width_define("TSMON2PDVOQ_PD_WIDTH")
      Position => "142:0", # Excel Formula: =calc_position(F22,E23,TRUE)
    },
  },
  Emdb => { #Structure Type: Mem;
    Name => "Emdb",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C22,A22,G24,L24)
    Description => "Some desc for mem0",
    Width => "14", # Excel Formula: =calc_mem_width(E25:E25,M24,F25,-1)
    Type => "DocOnly",
    UsedBy => "EMPD",
    MemEntries => "12288", # Excel Formula: =12*1024
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=26,SourceIdWidth=1,NumberOfBanks=6,NumberOfCamEntries=64,QuickInsert=Enabled,BinSize=4,NumberOfParallelBanks=6,VerifierSampleReadBeforeProt=2,VrfWriteActivityFactor=25,VrfReadActivityFactor=25,ValidSampleReadBeforeProt=1,VldWriteActivityFactor=50,VldReadActivityFactor=50",
    Comments => "BIN_WIDTH = (`CLOG2(NUMBER_OF_BINS)) = log2(1024) = 10
VERIFIER_WIDTH=KEY_WIDTH(26)-BIN_WIDTH(10) = 16
VERIFIER_PAYLOAD_TABLE_ENTRY_WIDTH = VERIFIER_WIDTH(16) + BUF_WIDTH(13) = 29                        VERIFIER_PAYLOAD_TABLE_WIDTH = BIN_SIZE(4)*VERIFIER_PAYLOAD_TABLE_ENTRY_WIDTH (29) = 116",
    MemLogicalWidth => "14",
    EmdbData => { #Structure Type: MemField;
      Name => "EmdbData",
      RegMem => "MemField",
      Description => "Some desc for mem0 field0",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F24,E25,TRUE)
    },
  },
  WriteFailFifo => { #Structure Type: Mem;
    Name => "WriteFailFifo",
    RegMem => "Mem",
    Address => "300000", # Excel Formula: =calc_mem_address(C22,A22,G26,L26)
    Description => "delete VOQ fifo",
    Width => "92", # Excel Formula: =calc_mem_width(E27:E27,M26,F27,-1)
    Type => "Dynamic",
    UsedBy => "EMPD",
    MemEntries => "40",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,DisableSameAddressErr=Enabled,WriteActivityFactor=0,ReadActivityFactor=0,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    MemLogicalWidth => "84",
    WriteFailPd => { #Structure Type: MemField;
      Name => "WriteFailPd",
      RegMem => "MemField",
      Width => "84", # Excel Formula: =calc_field_width_define("PDVOQ2ICS_WR_FAIL_PD_WIDTH")
      Position => "83:0", # Excel Formula: =calc_position(F26,E27,TRUE)
    },
  },
  EmdbVerifier0 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 0; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[6]",
    RegMem => "Mem",
    Address => "400000", # Excel Formula: =calc_mem_address(C26,A26,G28,L28)
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "152", # Excel Formula: =calc_mem_width(E29:E29,M28,F29,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "0",
    MemLogicalWidth => "152",
    EmdbVerifier0Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "152",
      Position => "151:0", # Excel Formula: =calc_position(F28,E29,TRUE)
    },
  },
  EmdbVerifier1 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 1; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[6]",
    RegMem => "Mem",
    Address => "500000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "152", # Excel Formula: =calc_mem_width(E29:E29,M28,F29,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "1",
    MemLogicalWidth => "152",
    EmdbVerifier1Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 1; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "152",
      Position => "151:0", # Excel Formula: =calc_position(F28,E29,TRUE)
    },
  },
  EmdbVerifier2 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 2; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[6]",
    RegMem => "Mem",
    Address => "600000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "152", # Excel Formula: =calc_mem_width(E29:E29,M28,F29,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "2",
    MemLogicalWidth => "152",
    EmdbVerifier2Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 2; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "152",
      Position => "151:0", # Excel Formula: =calc_position(F28,E29,TRUE)
    },
  },
  EmdbVerifier3 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 3; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[6]",
    RegMem => "Mem",
    Address => "700000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "152", # Excel Formula: =calc_mem_width(E29:E29,M28,F29,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "3",
    MemLogicalWidth => "152",
    EmdbVerifier3Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 3; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "152",
      Position => "151:0", # Excel Formula: =calc_position(F28,E29,TRUE)
    },
  },
  EmdbVerifier4 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 4; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[6]",
    RegMem => "Mem",
    Address => "800000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "152", # Excel Formula: =calc_mem_width(E29:E29,M28,F29,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "4",
    MemLogicalWidth => "152",
    EmdbVerifier4Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 4; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "152",
      Position => "151:0", # Excel Formula: =calc_position(F28,E29,TRUE)
    },
  },
  EmdbVerifier5 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 5; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[6]",
    RegMem => "Mem",
    Address => "900000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "152", # Excel Formula: =calc_mem_width(E29:E29,M28,F29,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "5",
    MemLogicalWidth => "152",
    EmdbVerifier5Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 5; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "152",
      Position => "151:0", # Excel Formula: =calc_position(F28,E29,TRUE)
    },
  },
  EmdbValid0 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 0; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[6]",
    RegMem => "Mem",
    Address => "A00000", # Excel Formula: =calc_mem_address(C28,A28,G30,L30)
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "4", # Excel Formula: =calc_mem_width(E31:E31,M30,F31,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "0",
    MemLogicalWidth => "4",
    EmdbValid0Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F30,E31,TRUE)
    },
  },
  EmdbValid1 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 1; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[6]",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "4", # Excel Formula: =calc_mem_width(E31:E31,M30,F31,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "1",
    MemLogicalWidth => "4",
    EmdbValid1Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F30,E31,TRUE)
    },
  },
  EmdbValid2 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 2; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[6]",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "4", # Excel Formula: =calc_mem_width(E31:E31,M30,F31,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "2",
    MemLogicalWidth => "4",
    EmdbValid2Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F30,E31,TRUE)
    },
  },
  EmdbValid3 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 3; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[6]",
    RegMem => "Mem",
    Address => "D00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "4", # Excel Formula: =calc_mem_width(E31:E31,M30,F31,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "3",
    MemLogicalWidth => "4",
    EmdbValid3Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F30,E31,TRUE)
    },
  },
  EmdbValid4 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 4; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[6]",
    RegMem => "Mem",
    Address => "E00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "4", # Excel Formula: =calc_mem_width(E31:E31,M30,F31,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "4",
    MemLogicalWidth => "4",
    EmdbValid4Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 4; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F30,E31,TRUE)
    },
  },
  EmdbValid5 => { #Structure Type: Mem; ArrayLength: 6; ArrayIndex: 5; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[6]",
    RegMem => "Mem",
    Address => "F00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "4", # Excel Formula: =calc_mem_width(E31:E31,M30,F31,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "5",
    MemLogicalWidth => "4",
    EmdbValid5Data => { #Structure Type: MemField; ArrayLength: 6; ArrayIndex: 5; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F30,E31,TRUE)
    },
  },
  EmdbPerBankReg0 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 0; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[6]",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C15,A15,G15)
    Description => "EM bank configurations, see fields description",
    Width => "54", # Excel Formula: =calc_reg_width(E33:E35,F35)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "0",
    EmdbActiveBanks0 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey0 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 0; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "52",
      Position => "52:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "53", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg1 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 1; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[6]",
    RegMem => "Reg",
    Address => "104",
    Description => "EM bank configurations, see fields description",
    Width => "54", # Excel Formula: =calc_reg_width(E33:E35,F35)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "1",
    EmdbActiveBanks1 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey1 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 1; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "52",
      Position => "52:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "53", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg2 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 2; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[6]",
    RegMem => "Reg",
    Address => "105",
    Description => "EM bank configurations, see fields description",
    Width => "54", # Excel Formula: =calc_reg_width(E33:E35,F35)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "2",
    EmdbActiveBanks2 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey2 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 2; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "52",
      Position => "52:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "53", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg3 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 3; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[6]",
    RegMem => "Reg",
    Address => "106",
    Description => "EM bank configurations, see fields description",
    Width => "54", # Excel Formula: =calc_reg_width(E33:E35,F35)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "3",
    EmdbActiveBanks3 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey3 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 3; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "52",
      Position => "52:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "53", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg4 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 4; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[6]",
    RegMem => "Reg",
    Address => "107",
    Description => "EM bank configurations, see fields description",
    Width => "54", # Excel Formula: =calc_reg_width(E33:E35,F35)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "4",
    EmdbActiveBanks4 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey4 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 4; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "52",
      Position => "52:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc4 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 4; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "53", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg5 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 5; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[6]",
    RegMem => "Reg",
    Address => "108",
    Description => "EM bank configurations, see fields description",
    Width => "54", # Excel Formula: =calc_reg_width(E33:E35,F35)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "5",
    EmdbActiveBanks5 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey5 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 5; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "52",
      Position => "52:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc5 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 5; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "53", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerEmReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbPerEmReg[1]",
    RegMem => "Reg",
    Address => "109", # Excel Formula: =calc_reg_address(C32,A32,G32)
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E37:E39,F39)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    EmdbKeyWidth0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "EmdbKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F36,E37,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "EmdbAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 23;
      Name => "EmdbBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 16; Skip Register;
    Name => "EmdbCamWmMaxReg[1]",
    RegMem => "Reg",
    Address => "10A", # Excel Formula: =calc_reg_address(C36,A36,G36)
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E41:E41,F41)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    EmdbCamWmMax0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "EmdbCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F40,E41,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg0 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 0; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[6]",
    RegMem => "Reg",
    Address => "10B", # Excel Formula: =calc_reg_address(C40,A40,G40)
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E43:E43,F43)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "0",
    EmdbBankWriteCntr0 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg1 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 1; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[6]",
    RegMem => "Reg",
    Address => "10C",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E43:E43,F43)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "1",
    EmdbBankWriteCntr1 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg2 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 2; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[6]",
    RegMem => "Reg",
    Address => "10D",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E43:E43,F43)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "2",
    EmdbBankWriteCntr2 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg3 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 3; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[6]",
    RegMem => "Reg",
    Address => "10E",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E43:E43,F43)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "3",
    EmdbBankWriteCntr3 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg4 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 4; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[6]",
    RegMem => "Reg",
    Address => "10F",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E43:E43,F43)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "4",
    EmdbBankWriteCntr4 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg5 => { #Structure Type: Reg; ArrayLength: 6; ArrayIndex: 5; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[6]",
    RegMem => "Reg",
    Address => "110",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E43:E43,F43)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "6",
    ArrayIndex => "5",
    EmdbBankWriteCntr5 => { #Structure Type: RegField; ArrayLength: 6; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbCam => { #Structure Type: Mem; Skip Register;
    Name => "EmdbCam",
    RegMem => "Mem",
    Address => "1000000", # Excel Formula: =calc_mem_address(C30,A30,G44,L44)
    Description => "EM fallback CAM",
    Width => "41", # Excel Formula: =calc_mem_width(E45:E47,"None",F47,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "64",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=14,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,UseSoftReset=Enabled",
    Comments => "EM Skip Reg",
    MemLogicalWidth => "41",
    EmdbCam_key => { #Structure Type: MemField;
      Name => "EmdbCam_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "26",
      Position => "25:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    EmdbCam_payload => { #Structure Type: MemField;
      Name => "EmdbCam_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "14",
      Position => "39:26", # Excel Formula: =calc_position(F45,E46)
    },
    EmdbCam_valid => { #Structure Type: MemField;
      Name => "EmdbCam_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F46,E47)
    },
  },
};
