$block{flc_db} = {
  Defines_db => "./",
  ProjectName => "Gibraltar",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    KeyConstMisConfigInterruptSummary => { #Structure Type: RegField;
      Name => "KeyConstMisConfigInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, KeyConstMisConfigInterrupt has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
    NppdErrIndicationRegSummary => { #Structure Type: RegField;
      Name => "NppdErrIndicationRegSummary",
      RegMem => "RegField",
      Description => "When this bit is set, NppdErrIndicationReg has asserted interrupt",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt test register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "21",
    Type => "Config",
    CacheIndexToEmIndexMemEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "CacheIndexToEmIndexMemEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    CacheIndexFBM_Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "CacheIndexFBM_Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ResultFifoMemEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "ResultFifoMemEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier8Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier8Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier9Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier9Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier10Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier10Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier11Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier11Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier12Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier12Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier13Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier13Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier14Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier14Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier15Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier15Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier16Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier16Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier17Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier17Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "21",
    Type => "Config",
    CacheIndexToEmIndexMemEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "CacheIndexToEmIndexMemEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    CacheIndexFBM_Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "CacheIndexFBM_Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ResultFifoMemEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "ResultFifoMemEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier8Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier8Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier9Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier9Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier10Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier10Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier11Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier11Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier12Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier12Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier13Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier13Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier14Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier14Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier15Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier15Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier16Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier16Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    FlowCacheVerifier17Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FlowCacheVerifier17Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  ParityErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "ParityErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "5",
    Description => "Parity Error Interrupt Mask Register",
    Width => "1",
    Type => "Config",
    HeaderTypesArrayTcamParityErrInterruptMask => { #Structure Type: RegField;
      Name => "HeaderTypesArrayTcamParityErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, Parity Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "21",
    Type => "Config",
    CacheIndexToEmIndexMemEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "CacheIndexToEmIndexMemEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CacheIndexFBM_Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "CacheIndexFBM_Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ResultFifoMemEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "ResultFifoMemEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier8Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier8Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier9Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier9Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier10Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier10Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier11Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier11Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier12Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier12Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier13Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier13Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier14Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier14Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier15Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier15Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier16Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier16Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier17Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier17Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "21",
    Type => "Config",
    CacheIndexToEmIndexMemEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "CacheIndexToEmIndexMemEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CacheIndexFBM_Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "CacheIndexFBM_Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ResultFifoMemEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "ResultFifoMemEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier8Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier8Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier9Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier9Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier10Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier10Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier11Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier11Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier12Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier12Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier13Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier13Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier14Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier14Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier15Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier15Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier16Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier16Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    FlowCacheVerifier17Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FlowCacheVerifier17Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  ParityErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "ParityErrInitiateRegister",
    RegMem => "Reg",
    Address => "32",
    Description => "Parity Error Initiator Register",
    Width => "1",
    Type => "Config",
    HeaderTypesArrayTcamParityErrInitiate => { #Structure Type: RegField;
      Name => "HeaderTypesArrayTcamParityErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, Parity Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "22",
    Type => "ReadOnly",
    CacheIndexToEmIndexMemErrInt => { #Structure Type: RegField;
      Name => "CacheIndexToEmIndexMemErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    CacheIndexFBM_ErrInt => { #Structure Type: RegField;
      Name => "CacheIndexFBM_ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    HeaderTypesArrayTcamErrInt => { #Structure Type: RegField;
      Name => "HeaderTypesArrayTcamErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    ResultFifoMemErrInt => { #Structure Type: RegField;
      Name => "ResultFifoMemErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier0ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier1ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier2ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier3ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier4ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier5ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "9",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier6ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "10",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier7ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "11",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier8ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier8ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "12",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier9ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier9ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "13",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier10ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier10ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "14",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier11ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier11ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "15",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier12ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier12ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "16",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier13ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier13ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "17",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier14ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier14ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "18",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier15ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier15ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "19",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier16ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier16ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "20",
      Type => "Status",
      UsedBy => "SER",
    },
    FlowCacheVerifier17ErrInt => { #Structure Type: RegField;
      Name => "FlowCacheVerifier17ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "21",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "16",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "14",
      Position => "13:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "15:14",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "6",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "5",
      Position => "4:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  ParityErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "ParityErrDebug",
    RegMem => "Reg",
    Address => "38",
    Description => "Parity Error Counter",
    Width => "16",
    Type => "ReadOnly",
    ParityErrCounter => { #Structure Type: RegField;
      Name => "ParityErrCounter",
      RegMem => "RegField",
      Description => "Counts number of Parity errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  TcamBistControl => { #Structure Type: Reg; Skip Register;
    Name => "TcamBistControl",
    RegMem => "Reg",
    Address => "39",
    Description => "TCAM BIST control",
    Width => "4",
    Type => "Config",
    TcamStrw => { #Structure Type: RegField;
      Name => "TcamStrw",
      RegMem => "RegField",
      Description => "The timing-mode configuration of the TCAMs",
      Width => "2",
      Position => "1:0",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d1",
    },
    TcamBistRst => { #Structure Type: RegField;
      Name => "TcamBistRst",
      RegMem => "RegField",
      Description => "TCAM BIST reset",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d0",
    },
    TcamBistRun => { #Structure Type: RegField;
      Name => "TcamBistRun",
      RegMem => "RegField",
      Description => "TCAM BIST run",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d0",
    },
  },
  TcamBistStatus => { #Structure Type: Reg; Skip Register;
    Name => "TcamBistStatus",
    RegMem => "Reg",
    Address => "3A",
    Description => "TCAM BIST pass fail status",
    Width => "2",
    Type => "ReadOnly",
    TcamBistDonePassOut => { #Structure Type: RegField;
      Name => "TcamBistDonePassOut",
      RegMem => "RegField",
      Description => "When this bit is set, TCAM BIST passed",
      Width => "1",
      Position => "0:0",
      Type => "Status",
      UsedBy => "TCAM",
    },
    TcamBistDoneFailOut => { #Structure Type: RegField;
      Name => "TcamBistDoneFailOut",
      RegMem => "RegField",
      Description => "When this bit is set, TCAM BIST failed",
      Width => "1",
      Position => "1:1",
      Type => "Status",
      UsedBy => "TCAM",
    },
  },
  TcamScanPeriodCfg => { #Structure Type: Reg; Skip Register;
    Name => "TcamScanPeriodCfg",
    RegMem => "Reg",
    Address => "3B",
    Description => "Configures period of TCAM scan for SER, set 0 to disable",
    Width => "32",
    Type => "Config",
    TcamScanPeriod => { #Structure Type: RegField;
      Name => "TcamScanPeriod",
      RegMem => "RegField",
      Description => "Configures period of TCAM scan for SER, set 0 to disable",
      Width => "32",
      Position => "31:0",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d120000000",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "73", # Excel Formula: =calc_reg_width(E25:E53,F53)
    Type => "Config",
    SACR1P_RME => { #Structure Type: RegField;
      Name => "SACR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACR1P_RM => { #Structure Type: RegField;
      Name => "SACR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RME => { #Structure Type: RegField;
      Name => "SACU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RM => { #Structure Type: RegField;
      Name => "SACU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "9:6", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RME => { #Structure Type: RegField;
      Name => "SADC1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RM => { #Structure Type: RegField;
      Name => "SADC1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "14:11", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEA => { #Structure Type: RegField;
      Name => "SADR2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "15", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMA => { #Structure Type: RegField;
      Name => "SADR2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "19:16", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEB => { #Structure Type: RegField;
      Name => "SADR2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMB => { #Structure Type: RegField;
      Name => "SADR2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "24:21", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEA => { #Structure Type: RegField;
      Name => "SADS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "25", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMA => { #Structure Type: RegField;
      Name => "SADS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "29:26", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEB => { #Structure Type: RegField;
      Name => "SADS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMB => { #Structure Type: RegField;
      Name => "SADS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "34:31", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RME => { #Structure Type: RegField;
      Name => "SASR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "35", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RM => { #Structure Type: RegField;
      Name => "SASR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "39:36", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RME => { #Structure Type: RegField;
      Name => "SASS1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RM => { #Structure Type: RegField;
      Name => "SASS1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "44:41", # Excel Formula: =calc_position(F41,E42)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEA => { #Structure Type: RegField;
      Name => "SASS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "45", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMA => { #Structure Type: RegField;
      Name => "SASS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "49:46", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEB => { #Structure Type: RegField;
      Name => "SASS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMB => { #Structure Type: RegField;
      Name => "SASS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "54:51", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RME => { #Structure Type: RegField;
      Name => "SASU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "55", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RM => { #Structure Type: RegField;
      Name => "SASU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "59:56", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RME => { #Structure Type: RegField;
      Name => "SADU1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "60", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RM => { #Structure Type: RegField;
      Name => "SADU1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "64:61", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RA => { #Structure Type: RegField;
      Name => "SADS2P_RA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Assist for Dual port",
      Width => "2",
      Position => "66:65", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_WA => { #Structure Type: RegField;
      Name => "SADU1P_WA",
      RegMem => "RegField",
      Description => "Write-Assist configuration for the SP SADU compiler",
      Width => "3",
      Position => "69:67", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d5",
    },
    SADU1P_WPULSE => { #Structure Type: RegField;
      Name => "SADU1P_WPULSE",
      RegMem => "RegField",
      Description => "Write-Assist-Pulse configuration for the SP SADU compiler",
      Width => "3",
      Position => "72:70", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E55:E55,F55)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "Spare register",
    Width => "128", # Excel Formula: =calc_reg_width(E57:E57,F57)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "Spare register ",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C56,A56,G56)
    Description => "PMRO controller configuration",
    Width => "32", # Excel Formula: =calc_reg_width(E59:E63,F63)
    Type => "Config",
    PmroRstn => { #Structure Type: RegField;
      Name => "PmroRstn",
      RegMem => "RegField",
      Description => "PMRO reset, active low",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroConfigEn => { #Structure Type: RegField;
      Name => "PmroConfigEn",
      RegMem => "RegField",
      Description => "Enable pmro configuration, when equals to 0 configurations are locked",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroStart => { #Structure Type: RegField;
      Name => "PmroStart",
      RegMem => "RegField",
      Description => "Start the pmro operation",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroRingEn => { #Structure Type: RegField;
      Name => "PmroRingEn",
      RegMem => "RegField",
      Description => "Determines which PMRO ring to activate, should be configured as one hot",
      Width => "7",
      Position => "9:3", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroCntPeriod => { #Structure Type: RegField;
      Name => "PmroCntPeriod",
      RegMem => "RegField",
      Description => "Number of core clock cycles on which PMRO is measured",
      Width => "22",
      Position => "31:10", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "h3FFFFF",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "PMRO status configuration",
    Width => "23", # Excel Formula: =calc_reg_width(E65:E66,F66)
    Type => "ReadOnly",
    PmroCountOut => { #Structure Type: RegField;
      Name => "PmroCountOut",
      RegMem => "RegField",
      Description => "The ring oscilator counter value.",
      Width => "22",
      Position => "21:0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Status",
      UsedBy => "pmro",
    },
    PmroDone => { #Structure Type: RegField;
      Name => "PmroDone",
      RegMem => "RegField",
      Description => "Pmro operation done, PmroCountOut is valid.",
      Width => "1",
      Position => "22", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "Mirror Bus configurations",
    Width => "11", # Excel Formula: =calc_reg_width(E68:E69,F69)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "Enable Mirror Bus",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F67,E68,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "Mirror Bus selector",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C67,A67,G67)
    Description => "Mirror Bus status result",
    Width => "32", # Excel Formula: =calc_reg_width(E71:E71,F71)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "Mirror Bus status result",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F70,E71,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C70,A70,G70)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E73:E73,F73)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  MapHeaderTypeToMaskL0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskL[8]",
    RegMem => "Reg",
    Address => "100",
    Description => "Maps the format identifier header type to  a large mask. Is used for excluding large packet headers' fields from the initial flow vector.",
    Width => "640", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "0",
    CacheLargeMask0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "CacheLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "319:0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLargeMask0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "QueueLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "639:320", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskL1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskL[8]",
    RegMem => "Reg",
    Address => "101",
    Description => "Maps the format identifier header type to  a large mask. Is used for excluding large packet headers' fields from the initial flow vector.",
    Width => "640", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "1",
    CacheLargeMask1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "CacheLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "319:0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLargeMask1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "QueueLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "639:320", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskL2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskL[8]",
    RegMem => "Reg",
    Address => "102",
    Description => "Maps the format identifier header type to  a large mask. Is used for excluding large packet headers' fields from the initial flow vector.",
    Width => "640", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "2",
    CacheLargeMask2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "CacheLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "319:0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLargeMask2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "QueueLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "639:320", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskL3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskL[8]",
    RegMem => "Reg",
    Address => "103",
    Description => "Maps the format identifier header type to  a large mask. Is used for excluding large packet headers' fields from the initial flow vector.",
    Width => "640", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "3",
    CacheLargeMask3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "CacheLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "319:0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLargeMask3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "QueueLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "639:320", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskL4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskL[8]",
    RegMem => "Reg",
    Address => "104",
    Description => "Maps the format identifier header type to  a large mask. Is used for excluding large packet headers' fields from the initial flow vector.",
    Width => "640", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "4",
    CacheLargeMask4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "CacheLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "319:0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLargeMask4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "QueueLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "639:320", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskL5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskL[8]",
    RegMem => "Reg",
    Address => "105",
    Description => "Maps the format identifier header type to  a large mask. Is used for excluding large packet headers' fields from the initial flow vector.",
    Width => "640", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "5",
    CacheLargeMask5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "CacheLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "319:0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLargeMask5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "QueueLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "639:320", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskL6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskL[8]",
    RegMem => "Reg",
    Address => "106",
    Description => "Maps the format identifier header type to  a large mask. Is used for excluding large packet headers' fields from the initial flow vector.",
    Width => "640", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "6",
    CacheLargeMask6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "CacheLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "319:0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLargeMask6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "QueueLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "639:320", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskL7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskL[8]",
    RegMem => "Reg",
    Address => "107",
    Description => "Maps the format identifier header type to  a large mask. Is used for excluding large packet headers' fields from the initial flow vector.",
    Width => "640", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "7",
    CacheLargeMask7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "CacheLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "319:0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLargeMask7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "QueueLargeMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "320",
      Position => "639:320", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskM0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskM[8]",
    RegMem => "Reg",
    Address => "108", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Maps the format identifier header type to a medium mask. Is used for excluding medium packet headers' fields from the initial flow vector.",
    Width => "320", # Excel Formula: =calc_reg_width(E11:E12,F12)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "0",
    CacheMediumMask0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "CacheMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueMediumMask0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "QueueMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "319:160", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskM1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskM[8]",
    RegMem => "Reg",
    Address => "109",
    Description => "Maps the format identifier header type to a medium mask. Is used for excluding medium packet headers' fields from the initial flow vector.",
    Width => "320", # Excel Formula: =calc_reg_width(E11:E12,F12)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "1",
    CacheMediumMask1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "CacheMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueMediumMask1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "QueueMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "319:160", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskM2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskM[8]",
    RegMem => "Reg",
    Address => "10A",
    Description => "Maps the format identifier header type to a medium mask. Is used for excluding medium packet headers' fields from the initial flow vector.",
    Width => "320", # Excel Formula: =calc_reg_width(E11:E12,F12)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "2",
    CacheMediumMask2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "CacheMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueMediumMask2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "QueueMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "319:160", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskM3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskM[8]",
    RegMem => "Reg",
    Address => "10B",
    Description => "Maps the format identifier header type to a medium mask. Is used for excluding medium packet headers' fields from the initial flow vector.",
    Width => "320", # Excel Formula: =calc_reg_width(E11:E12,F12)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "3",
    CacheMediumMask3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "CacheMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueMediumMask3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "QueueMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "319:160", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskM4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskM[8]",
    RegMem => "Reg",
    Address => "10C",
    Description => "Maps the format identifier header type to a medium mask. Is used for excluding medium packet headers' fields from the initial flow vector.",
    Width => "320", # Excel Formula: =calc_reg_width(E11:E12,F12)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "4",
    CacheMediumMask4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "CacheMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueMediumMask4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "QueueMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "319:160", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskM5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskM[8]",
    RegMem => "Reg",
    Address => "10D",
    Description => "Maps the format identifier header type to a medium mask. Is used for excluding medium packet headers' fields from the initial flow vector.",
    Width => "320", # Excel Formula: =calc_reg_width(E11:E12,F12)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "5",
    CacheMediumMask5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "CacheMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueMediumMask5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "QueueMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "319:160", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskM6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskM[8]",
    RegMem => "Reg",
    Address => "10E",
    Description => "Maps the format identifier header type to a medium mask. Is used for excluding medium packet headers' fields from the initial flow vector.",
    Width => "320", # Excel Formula: =calc_reg_width(E11:E12,F12)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "6",
    CacheMediumMask6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "CacheMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueMediumMask6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "QueueMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "319:160", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskM7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskM[8]",
    RegMem => "Reg",
    Address => "10F",
    Description => "Maps the format identifier header type to a medium mask. Is used for excluding medium packet headers' fields from the initial flow vector.",
    Width => "320", # Excel Formula: =calc_reg_width(E11:E12,F12)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "8",
    ArrayIndex => "7",
    CacheMediumMask7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "CacheMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueMediumMask7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "QueueMediumMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "160",
      Position => "319:160", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS0 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "110", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "0",
    CacheSmallMask0 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask0 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS1 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "111",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "1",
    CacheSmallMask1 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask1 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS2 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "112",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "2",
    CacheSmallMask2 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask2 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS3 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "113",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "3",
    CacheSmallMask3 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask3 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS4 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "114",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "4",
    CacheSmallMask4 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask4 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS5 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "115",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "5",
    CacheSmallMask5 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask5 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS6 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "116",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "6",
    CacheSmallMask6 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask6 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS7 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "117",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "7",
    CacheSmallMask7 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask7 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS8 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "118",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "8",
    CacheSmallMask8 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask8 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS9 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "119",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "9",
    CacheSmallMask9 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask9 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS10 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "11A",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "10",
    CacheSmallMask10 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask10 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS11 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "11B",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "11",
    CacheSmallMask11 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask11 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS12 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "11C",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "12",
    CacheSmallMask12 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask12 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS13 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "11D",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "13",
    CacheSmallMask13 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask13 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS14 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "11E",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "14",
    CacheSmallMask14 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask14 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskS15 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 21;
    Name => "MapHeaderTypeToMaskS[16]",
    RegMem => "Reg",
    Address => "11F",
    Description => "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    Width => "160", # Excel Formula: =calc_reg_width(E14:E15,F15)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "16",
    ArrayIndex => "15",
    CacheSmallMask15 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 15;
      Name => "CacheSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSmallMask15 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 15;
      Name => "QueueSmallMask[n]",
      RegMem => "RegField",
      Description => "Setting a bit will inclue it in the initial vector",
      Width => "80",
      Position => "159:80", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg0 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "120", # Excel Formula: =calc_reg_address(C13,A13,G13)
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "0",
    MapHeaderTypeToMaskID0 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg1 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "121",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "1",
    MapHeaderTypeToMaskID1 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg2 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "122",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "2",
    MapHeaderTypeToMaskID2 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg3 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "123",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "3",
    MapHeaderTypeToMaskID3 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg4 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "124",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "4",
    MapHeaderTypeToMaskID4 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg5 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "125",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "5",
    MapHeaderTypeToMaskID5 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg6 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "126",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "6",
    MapHeaderTypeToMaskID6 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg7 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "127",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "7",
    MapHeaderTypeToMaskID7 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg8 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "128",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "8",
    MapHeaderTypeToMaskID8 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg9 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "129",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "9",
    MapHeaderTypeToMaskID9 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg10 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "12A",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "10",
    MapHeaderTypeToMaskID10 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg11 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "12B",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "11",
    MapHeaderTypeToMaskID11 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg12 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "12C",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "12",
    MapHeaderTypeToMaskID12 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg13 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "12D",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "13",
    MapHeaderTypeToMaskID13 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg14 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "12E",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "14",
    MapHeaderTypeToMaskID14 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg15 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "12F",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "15",
    MapHeaderTypeToMaskID15 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg16 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "130",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "16",
    MapHeaderTypeToMaskID16 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg17 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "131",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "17",
    MapHeaderTypeToMaskID17 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg18 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "132",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "18",
    MapHeaderTypeToMaskID18 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg19 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "133",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "19",
    MapHeaderTypeToMaskID19 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg20 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "134",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "20",
    MapHeaderTypeToMaskID20 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg21 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "135",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "21",
    MapHeaderTypeToMaskID21 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg22 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "136",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "22",
    MapHeaderTypeToMaskID22 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg23 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "137",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "23",
    MapHeaderTypeToMaskID23 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg24 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "138",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "24",
    MapHeaderTypeToMaskID24 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg25 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "139",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "25",
    MapHeaderTypeToMaskID25 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg26 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "13A",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "26",
    MapHeaderTypeToMaskID26 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg27 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "13B",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "27",
    MapHeaderTypeToMaskID27 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg28 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "13C",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "28",
    MapHeaderTypeToMaskID28 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg29 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "13D",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "29",
    MapHeaderTypeToMaskID29 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg30 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "13E",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "30",
    MapHeaderTypeToMaskID30 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  MapHeaderTypeToMaskIdReg31 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 25;
    Name => "MapHeaderTypeToMaskIdReg[32]",
    RegMem => "Reg",
    Address => "13F",
    Description => "Maps each protocol header type to the mask index which will use it. 
Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    Width => "5", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "31",
    MapHeaderTypeToMaskID31 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 22;
      Name => "MapHeaderTypeToMaskID[n]",
      RegMem => "RegField",
      Description => "Mask ID",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  PriorityTcBitmapReg => { #Structure Type: Reg;
    Name => "PriorityTcBitmapReg",
    RegMem => "Reg",
    Address => "140", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bit per traffic class, Mapps the initial traffic class into high/low priority",
    Width => "8", # Excel Formula: =calc_reg_width(E19:E19,F19)
    Type => "Config",
    PriorityTcBitmap => { #Structure Type: RegField;
      Name => "PriorityTcBitmap",
      RegMem => "RegField",
      Description => "When cache occupancy is above HighTcOnlyTh only if the initial TC corresponding bit is set, the entry will be inserted to the cache",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d255",
    },
  },
  HighTcOnlyThReg => { #Structure Type: Reg;
    Name => "HighTcOnlyThReg",
    RegMem => "Reg",
    Address => "141", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Above this threshold only high priority traffic class according to PriorityTcBitmap will be inserted to the cache",
    Width => "14", # Excel Formula: =calc_reg_width(E21:E21,F21)
    Type => "Config",
    HighTcOnlyTh => { #Structure Type: RegField;
      Name => "HighTcOnlyTh",
      RegMem => "RegField",
      Description => "Amount of entires in the cache; default value will insert all TC to the cache",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F20,E21,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d12288",
    },
  },
  KeyHashMode => { #Structure Type: Reg;
    Name => "KeyHashMode",
    RegMem => "Reg",
    Address => "142", # Excel Formula: =calc_reg_address(C20,A20,G20)
    Description => "Selects the key constructor hash mode for building 96 bits flow signature key from 128B packet header. 2 different primitive polynom based CRC function are used to construct the 1024bit -> 96bit conversion",
    Width => "2", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    Mode => { #Structure Type: RegField;
      Name => "Mode",
      RegMem => "RegField",
      Description => "Hash mode: 0-Hash0; 1- Hash1; 2- Hash0+Hash1; 3- Hash0^Hash1",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d2",
    },
  },
  CacheRangeCompressionProfile0 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "143", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "0",
    CacheSrcHeader0 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset0 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize0 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet0 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile1 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "144",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "1",
    CacheSrcHeader1 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset1 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize1 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet1 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile2 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "145",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "2",
    CacheSrcHeader2 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset2 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize2 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet2 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile3 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "146",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "3",
    CacheSrcHeader3 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset3 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize3 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet3 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile4 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "147",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "4",
    CacheSrcHeader4 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset4 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize4 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet4 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile5 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "148",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "5",
    CacheSrcHeader5 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset5 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize5 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet5 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile6 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "149",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "6",
    CacheSrcHeader6 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset6 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize6 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet6 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile7 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "14A",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "7",
    CacheSrcHeader7 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset7 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize7 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet7 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile8 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "14B",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "8",
    CacheSrcHeader8 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset8 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize8 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet8 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile9 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "14C",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "9",
    CacheSrcHeader9 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset9 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize9 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet9 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile10 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "14D",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "10",
    CacheSrcHeader10 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset10 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize10 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet10 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile11 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "14E",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "11",
    CacheSrcHeader11 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset11 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize11 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet11 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile12 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "14F",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "12",
    CacheSrcHeader12 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset12 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize12 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet12 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile13 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "150",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "13",
    CacheSrcHeader13 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset13 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize13 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet13 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile14 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "151",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "14",
    CacheSrcHeader14 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset14 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize14 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet14 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile15 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "152",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "15",
    CacheSrcHeader15 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset15 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize15 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet15 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile16 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "153",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "16",
    CacheSrcHeader16 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset16 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize16 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet16 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile17 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "154",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "17",
    CacheSrcHeader17 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset17 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize17 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet17 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile18 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "155",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "18",
    CacheSrcHeader18 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset18 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize18 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet18 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile19 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "156",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "19",
    CacheSrcHeader19 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset19 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize19 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet19 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile20 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "157",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "20",
    CacheSrcHeader20 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset20 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize20 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet20 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile21 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "158",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "21",
    CacheSrcHeader21 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset21 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize21 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet21 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile22 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "159",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "22",
    CacheSrcHeader22 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset22 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize22 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet22 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile23 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "15A",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "23",
    CacheSrcHeader23 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset23 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize23 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet23 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile24 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "15B",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "24",
    CacheSrcHeader24 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset24 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize24 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet24 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile25 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "15C",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "25",
    CacheSrcHeader25 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset25 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize25 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet25 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile26 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "15D",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "26",
    CacheSrcHeader26 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset26 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize26 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet26 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile27 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "15E",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "27",
    CacheSrcHeader27 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset27 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize27 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet27 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile28 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "15F",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "28",
    CacheSrcHeader28 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset28 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize28 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet28 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile29 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "160",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "29",
    CacheSrcHeader29 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset29 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize29 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet29 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile30 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "161",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "30",
    CacheSrcHeader30 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset30 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize30 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet30 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  CacheRangeCompressionProfile31 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 29;
    Name => "CacheRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "162",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E25:E28,F28)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "31",
    CacheSrcHeader31 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 15;
      Name => "CacheSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcOffset31 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 15;
      Name => "CacheSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheSrcSize31 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 13;
      Name => "CacheSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheRangeSet31 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 14;
      Name => "CacheRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile0 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "163", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "0",
    QueueSrcHeader0 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset0 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize0 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet0 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile1 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "164",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "1",
    QueueSrcHeader1 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset1 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize1 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet1 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile2 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "165",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "2",
    QueueSrcHeader2 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset2 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize2 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet2 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 2; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile3 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "166",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "3",
    QueueSrcHeader3 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset3 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize3 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet3 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 3; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile4 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "167",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "4",
    QueueSrcHeader4 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset4 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize4 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet4 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 4; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile5 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "168",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "5",
    QueueSrcHeader5 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset5 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize5 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet5 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 5; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile6 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "169",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "6",
    QueueSrcHeader6 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset6 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize6 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet6 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 6; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile7 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "16A",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "7",
    QueueSrcHeader7 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset7 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize7 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet7 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 7; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile8 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "16B",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "8",
    QueueSrcHeader8 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset8 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize8 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet8 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 8; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile9 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "16C",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "9",
    QueueSrcHeader9 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset9 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize9 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet9 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 9; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile10 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "16D",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "10",
    QueueSrcHeader10 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset10 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize10 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet10 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 10; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile11 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "16E",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "11",
    QueueSrcHeader11 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset11 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize11 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet11 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 11; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile12 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "16F",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "12",
    QueueSrcHeader12 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset12 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize12 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet12 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 12; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile13 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "170",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "13",
    QueueSrcHeader13 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset13 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize13 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet13 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 13; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile14 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "171",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "14",
    QueueSrcHeader14 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset14 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize14 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet14 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 14; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile15 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "172",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "15",
    QueueSrcHeader15 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset15 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize15 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet15 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 15; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile16 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "173",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "16",
    QueueSrcHeader16 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset16 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize16 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet16 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 16; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile17 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "174",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "17",
    QueueSrcHeader17 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset17 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize17 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet17 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 17; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile18 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "175",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "18",
    QueueSrcHeader18 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset18 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize18 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet18 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 18; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile19 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "176",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "19",
    QueueSrcHeader19 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset19 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize19 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet19 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 19; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile20 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "177",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "20",
    QueueSrcHeader20 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset20 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize20 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet20 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 20; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile21 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "178",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "21",
    QueueSrcHeader21 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset21 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize21 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet21 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 21; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile22 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "179",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "22",
    QueueSrcHeader22 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset22 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize22 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet22 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 22; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile23 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "17A",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "23",
    QueueSrcHeader23 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset23 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize23 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet23 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 23; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile24 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "17B",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "24",
    QueueSrcHeader24 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset24 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize24 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet24 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 24; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile25 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "17C",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "25",
    QueueSrcHeader25 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset25 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize25 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet25 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 25; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile26 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "17D",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "26",
    QueueSrcHeader26 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset26 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize26 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet26 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 26; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile27 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "17E",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "27",
    QueueSrcHeader27 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset27 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize27 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet27 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 27; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile28 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "17F",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "28",
    QueueSrcHeader28 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset28 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize28 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet28 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 28; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile29 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "180",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "29",
    QueueSrcHeader29 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset29 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize29 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet29 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 29; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile30 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "181",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "30",
    QueueSrcHeader30 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset30 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize30 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet30 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 30; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  QueueRangeCompressionProfile31 => { #Structure Type: Reg; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 29;
    Name => "QueueRangeCompressionProfile[32]",
    RegMem => "Reg",
    Address => "182",
    Description => "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E33,F33)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "32",
    ArrayIndex => "31",
    QueueSrcHeader31 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 15;
      Name => "QueueSrcHeader[n]",
      RegMem => "RegField",
      Description => "The source header number",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcOffset31 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 15;
      Name => "QueueSrcOffset[n]",
      RegMem => "RegField",
      Description => "The source offset within the header in byte resulotion",
      Width => "6",
      Position => "9:4", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueSrcSize31 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 13;
      Name => "QueueSrcSize[n]",
      RegMem => "RegField",
      Description => "The size of the field to be range compressed in bit resolution; value of 0 means 1 bit size, 15 means 16 bits",
      Width => "4",
      Position => "13:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueRangeSet31 => { #Structure Type: RegField; ArrayLength: 32; ArrayIndex: 31; ArrayLocationInName: 14;
      Name => "QueueRangeSet[n]",
      RegMem => "RegField",
      Description => "There are four range sets. Each range set contains 16 ranges. Each range contains two pairs of values: high and low limit. ",
      Width => "2",
      Position => "15:14", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges0 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 0; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "183", # Excel Formula: =calc_reg_address(C29,A29,G29)
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "0",
    CacheUpperLimit0 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit0 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit0 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit0 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges1 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 1; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "184",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "1",
    CacheUpperLimit1 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit1 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit1 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit1 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges2 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 2; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "185",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "2",
    CacheUpperLimit2 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit2 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit2 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit2 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges3 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 3; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "186",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "3",
    CacheUpperLimit3 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit3 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit3 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit3 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges4 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 4; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "187",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "4",
    CacheUpperLimit4 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit4 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit4 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit4 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges5 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 5; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "188",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "5",
    CacheUpperLimit5 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit5 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit5 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit5 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges6 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 6; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "189",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "6",
    CacheUpperLimit6 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit6 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit6 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit6 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges7 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 7; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "18A",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "7",
    CacheUpperLimit7 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit7 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit7 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit7 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges8 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 8; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "18B",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "8",
    CacheUpperLimit8 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 8; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit8 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 8; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit8 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 8; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit8 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 8; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges9 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 9; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "18C",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "9",
    CacheUpperLimit9 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 9; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit9 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 9; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit9 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 9; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit9 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 9; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges10 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 10; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "18D",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "10",
    CacheUpperLimit10 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 10; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit10 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 10; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit10 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 10; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit10 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 10; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges11 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 11; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "18E",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "11",
    CacheUpperLimit11 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 11; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit11 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 11; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit11 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 11; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit11 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 11; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges12 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 12; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "18F",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "12",
    CacheUpperLimit12 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 12; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit12 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 12; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit12 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 12; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit12 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 12; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges13 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 13; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "190",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "13",
    CacheUpperLimit13 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 13; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit13 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 13; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit13 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 13; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit13 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 13; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges14 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 14; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "191",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "14",
    CacheUpperLimit14 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 14; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit14 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 14; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit14 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 14; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit14 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 14; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges15 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 15; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "192",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "15",
    CacheUpperLimit15 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 15; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit15 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 15; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit15 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 15; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit15 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 15; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges16 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 16; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "193",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "16",
    CacheUpperLimit16 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 16; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit16 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 16; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit16 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 16; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit16 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 16; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges17 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 17; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "194",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "17",
    CacheUpperLimit17 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 17; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit17 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 17; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit17 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 17; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit17 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 17; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges18 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 18; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "195",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "18",
    CacheUpperLimit18 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 18; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit18 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 18; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit18 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 18; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit18 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 18; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges19 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 19; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "196",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "19",
    CacheUpperLimit19 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 19; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit19 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 19; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit19 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 19; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit19 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 19; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges20 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 20; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "197",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "20",
    CacheUpperLimit20 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 20; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit20 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 20; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit20 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 20; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit20 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 20; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges21 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 21; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "198",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "21",
    CacheUpperLimit21 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 21; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit21 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 21; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit21 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 21; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit21 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 21; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges22 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 22; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "199",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "22",
    CacheUpperLimit22 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 22; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit22 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 22; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit22 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 22; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit22 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 22; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges23 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 23; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "19A",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "23",
    CacheUpperLimit23 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 23; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit23 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 23; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit23 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 23; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit23 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 23; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges24 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 24; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "19B",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "24",
    CacheUpperLimit24 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 24; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit24 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 24; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit24 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 24; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit24 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 24; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges25 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 25; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "19C",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "25",
    CacheUpperLimit25 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 25; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit25 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 25; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit25 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 25; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit25 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 25; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges26 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 26; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "19D",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "26",
    CacheUpperLimit26 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 26; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit26 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 26; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit26 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 26; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit26 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 26; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges27 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 27; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "19E",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "27",
    CacheUpperLimit27 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 27; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit27 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 27; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit27 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 27; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit27 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 27; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges28 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 28; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "19F",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "28",
    CacheUpperLimit28 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 28; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit28 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 28; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit28 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 28; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit28 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 28; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges29 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 29; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1A0",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "29",
    CacheUpperLimit29 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 29; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit29 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 29; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit29 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 29; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit29 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 29; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges30 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 30; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1A1",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "30",
    CacheUpperLimit30 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 30; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit30 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 30; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit30 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 30; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit30 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 30; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges31 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 31; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1A2",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "31",
    CacheUpperLimit31 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 31; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit31 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 31; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit31 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 31; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit31 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 31; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges32 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 32; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1A3",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "32",
    CacheUpperLimit32 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 32; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit32 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 32; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit32 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 32; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit32 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 32; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges33 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 33; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1A4",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "33",
    CacheUpperLimit33 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 33; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit33 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 33; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit33 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 33; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit33 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 33; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges34 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 34; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1A5",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "34",
    CacheUpperLimit34 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 34; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit34 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 34; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit34 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 34; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit34 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 34; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges35 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 35; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1A6",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "35",
    CacheUpperLimit35 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 35; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit35 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 35; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit35 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 35; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit35 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 35; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges36 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 36; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1A7",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "36",
    CacheUpperLimit36 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 36; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit36 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 36; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit36 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 36; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit36 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 36; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges37 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 37; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1A8",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "37",
    CacheUpperLimit37 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 37; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit37 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 37; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit37 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 37; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit37 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 37; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges38 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 38; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1A9",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "38",
    CacheUpperLimit38 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 38; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit38 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 38; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit38 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 38; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit38 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 38; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges39 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 39; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1AA",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "39",
    CacheUpperLimit39 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 39; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit39 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 39; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit39 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 39; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit39 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 39; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges40 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 40; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1AB",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "40",
    CacheUpperLimit40 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 40; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit40 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 40; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit40 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 40; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit40 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 40; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges41 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 41; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1AC",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "41",
    CacheUpperLimit41 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 41; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit41 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 41; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit41 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 41; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit41 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 41; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges42 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 42; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1AD",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "42",
    CacheUpperLimit42 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 42; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit42 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 42; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit42 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 42; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit42 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 42; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges43 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 43; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1AE",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "43",
    CacheUpperLimit43 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 43; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit43 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 43; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit43 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 43; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit43 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 43; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges44 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 44; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1AF",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "44",
    CacheUpperLimit44 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 44; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit44 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 44; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit44 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 44; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit44 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 44; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges45 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 45; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1B0",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "45",
    CacheUpperLimit45 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 45; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit45 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 45; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit45 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 45; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit45 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 45; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges46 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 46; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1B1",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "46",
    CacheUpperLimit46 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 46; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit46 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 46; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit46 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 46; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit46 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 46; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges47 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 47; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1B2",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "47",
    CacheUpperLimit47 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 47; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit47 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 47; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit47 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 47; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit47 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 47; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges48 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 48; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1B3",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "48",
    CacheUpperLimit48 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 48; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit48 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 48; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit48 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 48; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit48 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 48; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges49 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 49; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1B4",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "49",
    CacheUpperLimit49 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 49; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit49 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 49; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit49 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 49; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit49 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 49; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges50 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 50; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1B5",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "50",
    CacheUpperLimit50 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 50; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit50 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 50; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit50 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 50; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit50 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 50; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges51 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 51; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1B6",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "51",
    CacheUpperLimit51 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 51; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit51 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 51; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit51 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 51; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit51 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 51; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges52 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 52; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1B7",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "52",
    CacheUpperLimit52 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 52; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit52 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 52; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit52 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 52; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit52 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 52; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges53 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 53; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1B8",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "53",
    CacheUpperLimit53 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 53; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit53 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 53; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit53 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 53; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit53 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 53; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges54 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 54; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1B9",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "54",
    CacheUpperLimit54 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 54; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit54 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 54; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit54 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 54; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit54 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 54; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges55 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 55; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1BA",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "55",
    CacheUpperLimit55 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 55; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit55 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 55; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit55 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 55; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit55 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 55; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges56 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 56; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1BB",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "56",
    CacheUpperLimit56 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 56; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit56 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 56; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit56 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 56; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit56 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 56; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges57 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 57; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1BC",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "57",
    CacheUpperLimit57 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 57; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit57 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 57; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit57 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 57; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit57 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 57; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges58 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 58; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1BD",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "58",
    CacheUpperLimit58 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 58; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit58 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 58; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit58 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 58; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit58 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 58; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges59 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 59; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1BE",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "59",
    CacheUpperLimit59 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 59; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit59 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 59; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit59 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 59; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit59 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 59; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges60 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 60; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1BF",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "60",
    CacheUpperLimit60 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 60; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit60 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 60; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit60 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 60; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit60 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 60; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges61 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 61; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1C0",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "61",
    CacheUpperLimit61 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 61; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit61 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 61; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit61 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 61; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit61 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 61; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges62 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 62; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1C1",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "62",
    CacheUpperLimit62 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 62; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit62 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 62; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit62 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 62; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit62 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 62; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  RangeCompressionRanges63 => { #Structure Type: Reg; ArrayLength: 64; ArrayIndex: 63; ArrayLocationInName: 23;
    Name => "RangeCompressionRanges[64]",
    RegMem => "Reg",
    Address => "1C2",
    Description => "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    Width => "64", # Excel Formula: =calc_reg_width(E35:E38,F38)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "64",
    ArrayIndex => "63",
    CacheUpperLimit63 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 63; ArrayLocationInName: 16;
      Name => "CacheUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    CacheLowerLimit63 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 63; ArrayLocationInName: 16;
      Name => "CacheLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueUpperLimit63 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 63; ArrayLocationInName: 16;
      Name => "QueueUpperLimit[n]",
      RegMem => "RegField",
      Description => "Lower limit of the range",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
    QueueLowerLimit63 => { #Structure Type: RegField; ArrayLength: 64; ArrayIndex: 63; ArrayLocationInName: 16;
      Name => "QueueLowerLimit[n]",
      RegMem => "RegField",
      Description => "Upper limit of the range",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  VerifierUpdateRateReg => { #Structure Type: Reg;
    Name => "VerifierUpdateRateReg",
    RegMem => "Reg",
    Address => "1C3", # Excel Formula: =calc_reg_address(C34,A34,G34)
    Description => "Verifier update rate",
    Width => "32", # Excel Formula: =calc_reg_width(E40:E40,F40)
    Type => "Config",
    VerifierUpdateRate => { #Structure Type: RegField;
      Name => "VerifierUpdateRate",
      RegMem => "RegField",
      Description => "Amount of clock cycles before changing the verifier seed of the flow cache key construction logic.",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F39,E40,TRUE)
      Type => "Config",
      UsedBy => "keyc",
      DefaultValue => "d0",
    },
  },
  ValidityCheckRateReg => { #Structure Type: Reg;
    Name => "ValidityCheckRateReg",
    RegMem => "Reg",
    Address => "1C4", # Excel Formula: =calc_reg_address(C39,A39,G39)
    Description => "Validity check rate",
    Width => "16", # Excel Formula: =calc_reg_width(E42:E42,F42)
    Type => "Config",
    ValidityCheckRate => { #Structure Type: RegField;
      Name => "ValidityCheckRate",
      RegMem => "RegField",
      Description => "The amount of clock cycles between consecutive validity check packets. Value of 0 will disable the validity check",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F41,E42,TRUE)
      Type => "Config",
      UsedBy => "db",
      DefaultValue => "d100",
      Comments => "Each validity check packet access the database twich, hence reduces performance",
      InitValueAllModes => "0",
    },
  },
  FbmMinimalIndexAmountThReg => { #Structure Type: Reg;
    Name => "FbmMinimalIndexAmountThReg",
    RegMem => "Reg",
    Address => "1C5", # Excel Formula: =calc_reg_address(C41,A41,G41)
    Description => "The minimal amount of free buffers in the Free Buffer Manager in order to enable new flow insertion to the EM",
    Width => "14", # Excel Formula: =calc_reg_width(E44:E44,F44)
    Type => "Config",
    FbmMinimalIndexAmountTh => { #Structure Type: RegField;
      Name => "FbmMinimalIndexAmountTh",
      RegMem => "RegField",
      Description => "Minimal buffers amount. Shoule be greater than the EM write latency ",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F43,E44,TRUE)
      Type => "Config",
      UsedBy => "db",
      DefaultValue => "d12",
      Comments => "Minimal amount is EMDB write latency (10)",
      InitValueAllModes => "16",
    },
  },
  EmdbCamAlmostFullThReg => { #Structure Type: Reg;
    Name => "EmdbCamAlmostFullThReg",
    RegMem => "Reg",
    Address => "1C6", # Excel Formula: =calc_reg_address(C43,A43,G43)
    Description => "Less than his amount of free entries in the EM CAM, Write cannot be guarntied",
    Width => "7", # Excel Formula: =calc_reg_width(E46:E46,F46)
    Type => "Config",
    EmdbCamAlmostFullTh => { #Structure Type: RegField;
      Name => "EmdbCamAlmostFullTh",
      RegMem => "RegField",
      Description => "The minimal number of free CAM entries in order guaranty insertion to the EM",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Config",
      UsedBy => "db",
      DefaultValue => "d12",
      Comments => "Minimal amount is EMDB write latency (10)",
      InitValueAllModes => "16",
    },
  },
  RcyCodeLocationReg => { #Structure Type: Reg;
    Name => "RcyCodeLocationReg",
    RegMem => "Reg",
    Address => "1C7", # Excel Formula: =calc_reg_address(C45,A45,G45)
    Description => "Defines the location of the 2 bits recycle code within the recycle data. The internal structure of the recycle data (total 8 bits) is determined by the NPE on transmit stage.",
    Width => "6", # Excel Formula: =calc_reg_width(E48:E49,F49)
    Type => "Config",
    RcyCodeLocationMsb => { #Structure Type: RegField;
      Name => "RcyCodeLocationMsb",
      RegMem => "RegField",
      Description => "Recycle code MSB",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "db",
      DefaultValue => "d7",
    },
    RcyCodeLocationLsb => { #Structure Type: RegField;
      Name => "RcyCodeLocationLsb",
      RegMem => "RegField",
      Description => "Recycle code LSB",
      Width => "3",
      Position => "5:3", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "db",
      DefaultValue => "d6",
    },
  },
  FlcDbPipeCreditReg => { #Structure Type: Reg;
    Name => "FlcDbPipeCreditReg",
    RegMem => "Reg",
    Address => "1C8", # Excel Formula: =calc_reg_address(C47,A47,G47)
    Description => "Defines the initial credit between the keyc and the flc_db",
    Width => "6", # Excel Formula: =calc_reg_width(E51:E51,F51)
    Type => "Config",
    FlcDbPipeCredit => { #Structure Type: RegField;
      Name => "FlcDbPipeCredit",
      RegMem => "RegField",
      Description => "The initial credit should be equal to the flc_db pipe depth. The default value enable full performance, but the HW supports up to credit of 40",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F50,E51,TRUE)
      Type => "Config",
      UsedBy => "db",
      DefaultValue => "d33",
    },
  },
  InitDoneReg => { #Structure Type: Reg;
    Name => "InitDoneReg",
    RegMem => "Reg",
    Address => "1C9", # Excel Formula: =calc_reg_address(C50,A50,G50)
    Description => "Init done indication",
    Width => "1", # Excel Formula: =calc_reg_width(E53:E53,F53)
    Type => "ReadOnly",
    InitDone => { #Structure Type: RegField;
      Name => "InitDone",
      RegMem => "RegField",
      Description => "Memories finished self init",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F52,E53,TRUE)
      Type => "Status",
      UsedBy => "flc_db",
    },
  },
  StatusHitMissRatio => { #Structure Type: Reg;
    Name => "StatusHitMissRatio",
    RegMem => "Reg",
    Address => "1CA", # Excel Formula: =calc_reg_address(C52,A52,G52)
    Description => "Status register for counting the flow cache 'hit'/'miss' events. Used in order to calculate the hit/miss ratio. The Counters collects only packets which uses the cache",
    Width => "192", # Excel Formula: =calc_reg_width(E55:E57,F57)
    Type => "ReadOnly",
    HitCounter => { #Structure Type: RegField;
      Name => "HitCounter",
      RegMem => "RegField",
      Description => "Counts the amount of packets which hit the flow cache",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Counter",
      UsedBy => "flc_db",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    MissCounter => { #Structure Type: RegField;
      Name => "MissCounter",
      RegMem => "RegField",
      Description => "Counts the amount of packets which misses the flow cache",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F55,E56)
      Type => "Counter",
      UsedBy => "flc_db",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DontUseCacheCounter => { #Structure Type: RegField;
      Name => "DontUseCacheCounter",
      RegMem => "RegField",
      Description => "Counts the amount of packets which didn't use the cache",
      Width => "64",
      Position => "191:128", # Excel Formula: =calc_position(F56,E57)
      Type => "Counter",
      UsedBy => "flc_db",
      AdditionalInfo => "CounterIncrWidth=1",
      Comments => "Can be used for calculating the 'use_cache' ratio",
    },
  },
  StatusCacheOccupancy => { #Structure Type: Reg;
    Name => "StatusCacheOccupancy",
    RegMem => "Reg",
    Address => "1CB", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "Flow cache occupancy",
    Width => "1", # Excel Formula: =calc_reg_width(E59:E59,F59)
    Type => "Histogram",
    AdditionalInfo => "HistType=Event,NumOfBins=8,BinWidth=64,HistThWidth=14,TimeIntervalWidth=10,RateEventWidth=14",
    CacheOccupancy => { #Structure Type: RegField;
      Name => "CacheOccupancy",
      RegMem => "RegField",
      Description => "The number of flows which are used by the cache",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Histogram",
      UsedBy => "flc_db",
    },
  },
  StatusFirstToSecondPktLatency => { #Structure Type: Reg;
    Name => "StatusFirstToSecondPktLatency",
    RegMem => "Reg",
    Address => "1CC", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "Measures the latency between the first and second packets of a cache flow",
    Width => "1", # Excel Formula: =calc_reg_width(E61:E61,F61)
    Type => "Histogram",
    AdditionalInfo => "HistType=Event,NumOfBins=8,BinWidth=64,HistThWidth=32,TimeIntervalWidth=10,RateEventWidth=14",
    FirstToSecondPktLatency => { #Structure Type: RegField;
      Name => "FirstToSecondPktLatency",
      RegMem => "RegField",
      Description => "The number of clock cycles between the first and second packets in a cache flow, one messurement at a time.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F60,E61,TRUE)
      Type => "Histogram",
      UsedBy => "flc_db",
    },
  },
  StatusNewFlowsRate => { #Structure Type: Reg;
    Name => "StatusNewFlowsRate",
    RegMem => "Reg",
    Address => "1CD", # Excel Formula: =calc_reg_address(C60,A60,G60)
    Description => "Rate of new flows insertions. Aggregated new flows counter collected in rate histogram.",
    Width => "1", # Excel Formula: =calc_reg_width(E63:E63,F63)
    Type => "Histogram",
    AdditionalInfo => "HistType=Rate,NumOfBins=8,BinWidth=64,HistThWidth=15,TimeIntervalWidth=17,RateEventWidth=32",
    NewFlowsRate => { #Structure Type: RegField;
      Name => "NewFlowsRate",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F62,E63,TRUE)
      Type => "Histogram",
      UsedBy => "flc_db",
    },
  },
  DebugFlowHashEfficiency => { #Structure Type: Reg;
    Name => "DebugFlowHashEfficiency",
    RegMem => "Reg",
    Address => "1CE", # Excel Formula: =calc_reg_address(C62,A62,G62)
    Description => "Measures the flow signature hash efficiency",
    Width => "1", # Excel Formula: =calc_reg_width(E65:E65,F65)
    Type => "Histogram",
    AdditionalInfo => "HistType=Event,NumOfBins=8,BinWidth=64,HistThWidth=96,TimeIntervalWidth=10,RateEventWidth=14",
    FlowHashEfficiency => { #Structure Type: RegField;
      Name => "FlowHashEfficiency",
      RegMem => "RegField",
      Description => "Collects the distribution of the flow cache hash results in 8 bins.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Histogram",
      UsedBy => "flc_db",
    },
  },
  KeyConstMisConfigInterrupt => { #Structure Type: Reg;
    Name => "KeyConstMisConfigInterrupt",
    RegMem => "Reg",
    Address => "1CF", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "Indicates misconfiguration of the TCAM in the key constructor. The packet hit one of the TCAMs and missed the other (Sent to the NPU). The associated TCAM entry is at DebugKeyConstMisConfig",
    Width => "1", # Excel Formula: =calc_reg_width(E67:E67,F67)
    Type => "Interrupt",
    KeyConstMisConfigInt => { #Structure Type: RegField;
      Name => "KeyConstMisConfigInt",
      RegMem => "RegField",
      Description => "Interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F66,E67,TRUE)
      Type => "Interrupt",
      UsedBy => "flc_db",
    },
  },
  KeyConstMisConfigInterruptMask => { #Structure Type: Reg; Skip Register;
    Name => "KeyConstMisConfigInterruptMask",
    RegMem => "Reg",
    Address => "1D0",
    Description => "This register masks KeyConstMisConfigInterrupt interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E67:E67,F67)
    Type => "InterruptMask",
    KeyConstMisConfigIntMask => { #Structure Type: RegField;
      Name => "KeyConstMisConfigIntMask",
      RegMem => "RegField",
      Description => "This field masks KeyConstMisConfigInt interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F66,E67,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  KeyConstMisConfigInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "KeyConstMisConfigInterruptTest",
    RegMem => "Reg",
    Address => "1D1",
    Description => "This register tests KeyConstMisConfigInterrupt interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E67:E67,F67)
    Type => "InterruptTest",
    KeyConstMisConfigIntTest => { #Structure Type: RegField;
      Name => "KeyConstMisConfigIntTest",
      RegMem => "RegField",
      Description => "This field tests KeyConstMisConfigInt interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F66,E67,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  DebugKeyConstMisConfig => { #Structure Type: Reg;
    Name => "DebugKeyConstMisConfig",
    RegMem => "Reg",
    Address => "1D2", # Excel Formula: =calc_reg_address(C66,A66,G66)
    Description => "Indicates misconfiguration of the TCAM in the key constructor. The packet hit one of the TCAMs and missed the other (Sent to the NPU)",
    Width => "9", # Excel Formula: =calc_reg_width(E69:E71,F71)
    Type => "ReadOnly",
    KeyConstMisConfigEvent => { #Structure Type: RegField;
      Name => "KeyConstMisConfigEvent",
      RegMem => "RegField",
      Description => "The TCAM entry is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F68,E69,TRUE)
      Type => "Event",
      UsedBy => "flc_db",
    },
    KeyConstMisConfigValueSource => { #Structure Type: RegField;
      Name => "KeyConstMisConfigValueSource",
      RegMem => "RegField",
      Description => "The TCAM which was successfully hit, the other one got the miss. 0- Cache,  1-Queue",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F69,E70)
      Type => "Event",
      UsedBy => "flc_db",
    },
    KeyConstMisConfigValue => { #Structure Type: RegField;
      Name => "KeyConstMisConfigValue",
      RegMem => "RegField",
      Description => "The TCAM entry which is successfully hit",
      Width => "7",
      Position => "8:2", # Excel Formula: =calc_position(F70,E71)
      Type => "Event",
      UsedBy => "flc_db",
    },
  },
  DebugIncomingNppdCounter => { #Structure Type: Reg;
    Name => "DebugIncomingNppdCounter",
    RegMem => "Reg",
    Address => "1D3", # Excel Formula: =calc_reg_address(C68,A68,G68)
    Description => "Counting the number of incoming NPPDs ",
    Width => "64", # Excel Formula: =calc_reg_width(E73:E73,F73)
    Type => "ReadOnly",
    DebugIncomingNppd => { #Structure Type: RegField;
      Name => "DebugIncomingNppd",
      RegMem => "RegField",
      Description => "Incoming NPPDs debug counter",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Counter",
      UsedBy => "debug",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  DebugOutgoingCtxtToFiQCounter => { #Structure Type: Reg;
    Name => "DebugOutgoingCtxtToFiQCounter",
    RegMem => "Reg",
    Address => "1D4", # Excel Formula: =calc_reg_address(C72,A72,G72)
    Description => "Counting the number of outgoing  RxPP contexts towards the FI queues",
    Width => "64", # Excel Formula: =calc_reg_width(E75:E75,F75)
    Type => "ReadOnly",
    DebugOutgoingCtxtToFiQ => { #Structure Type: RegField;
      Name => "DebugOutgoingCtxtToFiQ",
      RegMem => "RegField",
      Description => "Outgoing contexts towards the FI queues",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F74,E75,TRUE)
      Type => "Counter",
      UsedBy => "debug",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  DebugOutgoingNppdCounter => { #Structure Type: Reg;
    Name => "DebugOutgoingNppdCounter",
    RegMem => "Reg",
    Address => "1D5", # Excel Formula: =calc_reg_address(C74,A74,G74)
    Description => "Counting the number of outgoing  NPPDs from the flc_db",
    Width => "64", # Excel Formula: =calc_reg_width(E77:E77,F77)
    Type => "ReadOnly",
    DebugOutgoingNppd => { #Structure Type: RegField;
      Name => "DebugOutgoingNppd",
      RegMem => "RegField",
      Description => "Outgoing NPPDs counter",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F76,E77,TRUE)
      Type => "Counter",
      UsedBy => "debug",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  DebugResultFifoStatusCounter => { #Structure Type: Reg;
    Name => "DebugResultFifoStatusCounter",
    RegMem => "Reg",
    Address => "1D6", # Excel Formula: =calc_reg_address(C76,A76,G76)
    Description => "Reflecting the fullness level of the result FIFO",
    Width => "12", # Excel Formula: =calc_reg_width(E79:E80,F80)
    Type => "ReadOnly",
    DebugResultFifoStatus => { #Structure Type: RegField;
      Name => "DebugResultFifoStatus",
      RegMem => "RegField",
      Description => "Counting the number of NPPDs ready to be transmitted on the output stage of the flc_db",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F78,E79,TRUE)
      Type => "Counter",
      UsedBy => "debug",
      AdditionalInfo => "CounterIncrWidth=6",
    },
    DebugResultFifoStatusWm => { #Structure Type: RegField;
      Name => "DebugResultFifoStatusWm",
      RegMem => "RegField",
      Description => "Water mark of the result FIFO fullness",
      Width => "6",
      Position => "11:6", # Excel Formula: =calc_position(F79,E80)
      Type => "MaxWmk",
      UsedBy => "debug",
    },
  },
  DebugKeycToDbCreditCounter => { #Structure Type: Reg;
    Name => "DebugKeycToDbCreditCounter",
    RegMem => "Reg",
    Address => "1D7", # Excel Formula: =calc_reg_address(C78,A78,G78)
    Description => "Reflecting the credit between the flc_keyc to the flc_db",
    Width => "6", # Excel Formula: =calc_reg_width(E82:E82,F82)
    Type => "ReadOnly",
    DebugKeycToDbCredit => { #Structure Type: RegField;
      Name => "DebugKeycToDbCredit",
      RegMem => "RegField",
      Description => "When this credit is bigger than 0, flc_keyc can send the NPPD to the flc_db",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F81,E82,TRUE)
      Type => "Status",
      UsedBy => "debug",
    },
  },
  DebugKeycToDbCreditNotReadyCounter => { #Structure Type: Reg;
    Name => "DebugKeycToDbCreditNotReadyCounter",
    RegMem => "Reg",
    Address => "1D8", # Excel Formula: =calc_reg_address(C81,A81,G81)
    Description => "Counts the number of cycles in which the flc_keyc had no credit towards the flc_db",
    Width => "48", # Excel Formula: =calc_reg_width(E84:E84,F84)
    Type => "ReadOnly",
    DebugKeycToDbCreditNotReady => { #Structure Type: RegField;
      Name => "DebugKeycToDbCreditNotReady",
      RegMem => "RegField",
      Description => "The number of cycles in which the flc_keyc had no credit towards the flc_db",
      Width => "48",
      Position => "47:0", # Excel Formula: =calc_position(F83,E84,TRUE)
      Type => "Counter",
      UsedBy => "debug",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  DebugRemoveCacheIndexCounter => { #Structure Type: Reg;
    Name => "DebugRemoveCacheIndexCounter",
    RegMem => "Reg",
    Address => "1D9", # Excel Formula: =calc_reg_address(C83,A83,G83)
    Description => "Counters the number of cache index remove commands received from the flc_data",
    Width => "32", # Excel Formula: =calc_reg_width(E86:E86,F86)
    Type => "ReadOnly",
    DebugRemoveCacheIndex => { #Structure Type: RegField;
      Name => "DebugRemoveCacheIndex",
      RegMem => "RegField",
      Description => "The aggregated number",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F85,E86,TRUE)
      Type => "Counter",
      UsedBy => "debug",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  DebugReleasedCacheIndexCounter => { #Structure Type: Reg;
    Name => "DebugReleasedCacheIndexCounter",
    RegMem => "Reg",
    Address => "1DA", # Excel Formula: =calc_reg_address(C85,A85,G85)
    Description => "Counters the number of cache index release commands received from the flc_queues",
    Width => "32", # Excel Formula: =calc_reg_width(E88:E88,F88)
    Type => "ReadOnly",
    DebugReleasedCacheIndex => { #Structure Type: RegField;
      Name => "DebugReleasedCacheIndex",
      RegMem => "RegField",
      Description => "The aggregated number of released cache indexes back to the free-buffer-manager",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F87,E88,TRUE)
      Type => "Counter",
      UsedBy => "debug",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EventMonIndications => { #Structure Type: Reg;
    Name => "EventMonIndications",
    RegMem => "Reg",
    Address => "1DB", # Excel Formula: =calc_reg_address(C87,A87,G87)
    Description => "All Event monitor's outpus (cleared on the same read)",
    Width => "198", # Excel Formula: =calc_reg_width(E90:E93,F93)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    EventMonAcc0 => { #Structure Type: RegField;
      Name => "EventMonAcc0",
      RegMem => "RegField",
      Description => "Number of aggregated hits (ACC0)",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F89,E90,TRUE)
      Type => "Counter",
      UsedBy => "debug",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EventMonCapturedData => { #Structure Type: RegField;
      Name => "EventMonCapturedData",
      RegMem => "RegField",
      Description => "First hit data",
      Width => "38",
      Position => "101:64", # Excel Formula: =calc_position(F90,E91)
      Type => "Capture",
      UsedBy => "debug",
    },
    EventMonTimeOfDay => { #Structure Type: RegField;
      Name => "EventMonTimeOfDay",
      RegMem => "RegField",
      Description => "First hit time of day",
      Width => "32",
      Position => "133:102", # Excel Formula: =calc_position(F91,E92)
      Type => "Capture",
      UsedBy => "debug",
    },
    EventMonClockCounter => { #Structure Type: RegField;
      Name => "EventMonClockCounter",
      RegMem => "RegField",
      Description => "Free running clock counter",
      Width => "64",
      Position => "197:134", # Excel Formula: =calc_position(F92,E93)
      Type => "Counter",
      UsedBy => "debug",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  NppdErrIndicationReg => { #Structure Type: Reg;
    Name => "NppdErrIndicationReg",
    RegMem => "Reg",
    Address => "1DC", # Excel Formula: =calc_reg_address(C89,A89,G89)
    Description => "Incoming NPPD was received with error indication",
    Width => "1", # Excel Formula: =calc_reg_width(E95:E95,F95)
    Type => "Interrupt",
    NppdErrIndication => { #Structure Type: RegField;
      Name => "NppdErrIndication",
      RegMem => "RegField",
      Description => "NPPD with error indication will not be mapped to the flow cache (use_cache will be 0)",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F94,E95,TRUE)
      Type => "Interrupt",
      UsedBy => "flc_keyc",
    },
  },
  NppdErrIndicationRegMask => { #Structure Type: Reg; Skip Register;
    Name => "NppdErrIndicationRegMask",
    RegMem => "Reg",
    Address => "1DD",
    Description => "This register masks NppdErrIndicationReg interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E95:E95,F95)
    Type => "InterruptMask",
    NppdErrIndicationMask => { #Structure Type: RegField;
      Name => "NppdErrIndicationMask",
      RegMem => "RegField",
      Description => "This field masks NppdErrIndication interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F94,E95,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  NppdErrIndicationRegTest => { #Structure Type: Reg; Skip Register;
    Name => "NppdErrIndicationRegTest",
    RegMem => "Reg",
    Address => "1DE",
    Description => "This register tests NppdErrIndicationReg interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E95:E95,F95)
    Type => "InterruptTest",
    NppdErrIndicationTest => { #Structure Type: RegField;
      Name => "NppdErrIndicationTest",
      RegMem => "RegField",
      Description => "This field tests NppdErrIndication interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F94,E95,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  EventMonEnableReg => { #Structure Type: Reg;
    Name => "EventMonEnableReg",
    RegMem => "Reg",
    Address => "1DF", # Excel Formula: =calc_reg_address(C94,A94,G94)
    Description => "Debug Event Monitor: Enable indication",
    Width => "1", # Excel Formula: =calc_reg_width(E97:E97,F97)
    Type => "Config",
    EventMonEnable => { #Structure Type: RegField;
      Name => "EventMonEnable",
      RegMem => "RegField",
      Description => "Enable",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F96,E97,TRUE)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
  },
  EventMonFieldMaskReg => { #Structure Type: Reg;
    Name => "EventMonFieldMaskReg",
    RegMem => "Reg",
    Address => "1E0", # Excel Formula: =calc_reg_address(C96,A96,G96)
    Description => "Event monitor: Mask (and mask) to be performed on each extracted field",
    Width => "38", # Excel Formula: =calc_reg_width(E99:E102,F102)
    Type => "Config",
    EventMonUseCacheMask => { #Structure Type: RegField;
      Name => "EventMonUseCacheMask",
      RegMem => "RegField",
      Description => "Mask",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F98,E99,TRUE)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonPacketCtxtMask => { #Structure Type: RegField;
      Name => "EventMonPacketCtxtMask",
      RegMem => "RegField",
      Description => "Mask",
      Width => "11",
      Position => "11:1", # Excel Formula: =calc_position(F99,E100)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonQueueIndexMask => { #Structure Type: RegField;
      Name => "EventMonQueueIndexMask",
      RegMem => "RegField",
      Description => "Mask",
      Width => "12",
      Position => "23:12", # Excel Formula: =calc_position(F100,E101)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonCacheIndexMask => { #Structure Type: RegField;
      Name => "EventMonCacheIndexMask",
      RegMem => "RegField",
      Description => "Mask",
      Width => "14",
      Position => "37:24", # Excel Formula: =calc_position(F101,E102)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
  },
  EventMonFieldPartOfAndBitmap => { #Structure Type: Reg;
    Name => "EventMonFieldPartOfAndBitmap",
    RegMem => "Reg",
    Address => "1E1", # Excel Formula: =calc_reg_address(C98,A98,G98)
    Description => "Event monitor: Bit per field; if set the field participate in the 'and' condition",
    Width => "4", # Excel Formula: =calc_reg_width(E104:E107,F107)
    Type => "Config",
    EventMonUseCachePartOfAndBitmap => { #Structure Type: RegField;
      Name => "EventMonUseCachePartOfAndBitmap",
      RegMem => "RegField",
      Description => "When set the field will participate in the and comperator",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F103,E104,TRUE)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonPacketCtxtPartOfAndBitmap => { #Structure Type: RegField;
      Name => "EventMonPacketCtxtPartOfAndBitmap",
      RegMem => "RegField",
      Description => "When set the field will participate in the and comperator",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F104,E105)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonQueueIndexPartOfAndBitmap => { #Structure Type: RegField;
      Name => "EventMonQueueIndexPartOfAndBitmap",
      RegMem => "RegField",
      Description => "When set the field will participate in the and comperator",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F105,E106)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonCacheIndexPartOfAndBitmap => { #Structure Type: RegField;
      Name => "EventMonCacheIndexPartOfAndBitmap",
      RegMem => "RegField",
      Description => "When set the field will participate in the and comperator",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F106,E107)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
  },
  EventMonFieldPartOfOrBitmap => { #Structure Type: Reg;
    Name => "EventMonFieldPartOfOrBitmap",
    RegMem => "Reg",
    Address => "1E2", # Excel Formula: =calc_reg_address(C103,A103,G103)
    Description => "Event monitor: Bit per field; if set the field participate in the 'or' condition",
    Width => "4", # Excel Formula: =calc_reg_width(E109:E112,F112)
    Type => "Config",
    EventMonUseCachePartOfOrBitmap => { #Structure Type: RegField;
      Name => "EventMonUseCachePartOfOrBitmap",
      RegMem => "RegField",
      Description => "When set the field will participate in the or comperator",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F108,E109,TRUE)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonPacketCtxtPartOfOrBitmap => { #Structure Type: RegField;
      Name => "EventMonPacketCtxtPartOfOrBitmap",
      RegMem => "RegField",
      Description => "When set the field will participate in the or comperator",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F109,E110)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonQueueIndexPartOfOrBitmap => { #Structure Type: RegField;
      Name => "EventMonQueueIndexPartOfOrBitmap",
      RegMem => "RegField",
      Description => "When set the field will participate in the or comperator",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonCacheIndexPartOfOrBitmap => { #Structure Type: RegField;
      Name => "EventMonCacheIndexPartOfOrBitmap",
      RegMem => "RegField",
      Description => "When set the field will participate in the or comperator",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
  },
  EventMonCompareModeReg => { #Structure Type: Reg;
    Name => "EventMonCompareModeReg",
    RegMem => "Reg",
    Address => "1E3", # Excel Formula: =calc_reg_address(C108,A108,G108)
    Description => "Event monitor compare mode register per field: 2b00 Equal, 2b01 Not equal, 2b01 Smaller than, 2b11 Greater than",
    Width => "8", # Excel Formula: =calc_reg_width(E114:E117,F117)
    Type => "Config",
    EventMonUseCacheCompareMode => { #Structure Type: RegField;
      Name => "EventMonUseCacheCompareMode",
      RegMem => "RegField",
      Description => "Compare mode",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F113,E114,TRUE)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonPacketCtxtCompareMode => { #Structure Type: RegField;
      Name => "EventMonPacketCtxtCompareMode",
      RegMem => "RegField",
      Description => "Compare mode",
      Width => "2",
      Position => "3:2", # Excel Formula: =calc_position(F114,E115)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonQueueIndexCompareMode => { #Structure Type: RegField;
      Name => "EventMonQueueIndexCompareMode",
      RegMem => "RegField",
      Description => "Compare mode",
      Width => "2",
      Position => "5:4", # Excel Formula: =calc_position(F115,E116)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonCacheIndexCompareMode => { #Structure Type: RegField;
      Name => "EventMonCacheIndexCompareMode",
      RegMem => "RegField",
      Description => "Compare mode",
      Width => "2",
      Position => "7:6", # Excel Formula: =calc_position(F116,E117)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
  },
  EventMonCompareValueReg => { #Structure Type: Reg;
    Name => "EventMonCompareValueReg",
    RegMem => "Reg",
    Address => "1E4", # Excel Formula: =calc_reg_address(C113,A113,G113)
    Description => "Event monitor: The value which is compared to the masked field",
    Width => "38", # Excel Formula: =calc_reg_width(E119:E122,F122)
    Type => "Config",
    EventMonUseCacheCompareValue => { #Structure Type: RegField;
      Name => "EventMonUseCacheCompareValue",
      RegMem => "RegField",
      Description => "Compare value",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F118,E119,TRUE)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonPacketCtxtCompareValue => { #Structure Type: RegField;
      Name => "EventMonPacketCtxtCompareValue",
      RegMem => "RegField",
      Description => "Compare value",
      Width => "11",
      Position => "11:1", # Excel Formula: =calc_position(F119,E120)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonQueueIndexCompareValue => { #Structure Type: RegField;
      Name => "EventMonQueueIndexCompareValue",
      RegMem => "RegField",
      Description => "Compare value",
      Width => "12",
      Position => "23:12", # Excel Formula: =calc_position(F120,E121)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
    EventMonCacheIndexCompareValue => { #Structure Type: RegField;
      Name => "EventMonCacheIndexCompareValue",
      RegMem => "RegField",
      Description => "Compare value",
      Width => "14",
      Position => "37:24", # Excel Formula: =calc_position(F121,E122)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
  },
  EventMonModeReg => { #Structure Type: Reg;
    Name => "EventMonModeReg",
    RegMem => "Reg",
    Address => "1E5", # Excel Formula: =calc_reg_address(C118,A118,G118)
    Description => "Event monitor: Defines a 'hit' as 1 of 4 options between the '&' and '|' comparators: 00-only 'and'; 01-only 'or' ;10-'and'&'or; 11-'and'|'or'
",
    Width => "2", # Excel Formula: =calc_reg_width(E124:E124,F124)
    Type => "Config",
    EventMonMode => { #Structure Type: RegField;
      Name => "EventMonMode",
      RegMem => "RegField",
      Description => "Mode",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F123,E124,TRUE)
      Type => "Config",
      UsedBy => "event_mon",
      DefaultValue => "d0",
    },
  },
  LastDebugBusSelReg => { #Structure Type: Reg;
    Name => "LastDebugBusSelReg",
    RegMem => "Reg",
    Address => "1E6", # Excel Formula: =calc_reg_address(C123,A123,G123)
    Description => "Select for multicycle debug bus mux, according to the debug bus connectivity",
    Width => "7", # Excel Formula: =calc_reg_width(E126:E126,F126)
    Type => "Config",
    LastDebugBusSel => { #Structure Type: RegField;
      Name => "LastDebugBusSel",
      RegMem => "RegField",
      Description => "Select for multicycle debug bus mux, according to the debug bus connectivity",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F125,E126,TRUE)
      Type => "Config",
      UsedBy => "dbg",
      DefaultValue => "d0",
    },
  },
  LastDebugBusSelectOutReg => { #Structure Type: Reg;
    Name => "LastDebugBusSelectOutReg",
    RegMem => "Reg",
    Address => "1E7", # Excel Formula: =calc_reg_address(C125,A125,G125)
    Description => "Result data after accessing the LastDebugBusSel",
    Width => "32", # Excel Formula: =calc_reg_width(E128:E128,F128)
    Type => "ReadOnly",
    LastDebugBusSelectOut => { #Structure Type: RegField;
      Name => "LastDebugBusSelectOut",
      RegMem => "RegField",
      Description => "Result data after accessing the LastDebugBusSel",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F127,E128,TRUE)
      Type => "Status",
      UsedBy => "dbg",
    },
  },
  FlowSignatureCrcStartReg => { #Structure Type: Reg;
    Name => "FlowSignatureCrcStartReg",
    RegMem => "Reg",
    Address => "1E8", # Excel Formula: =calc_reg_address(C127,A127,G127)
    Description => "Sets the start value of the flow signature CRC s",
    Width => "192", # Excel Formula: =calc_reg_width(E130:E131,F131)
    Type => "Config",
    FlowSignatureCrcStart0 => { #Structure Type: RegField;
      Name => "FlowSignatureCrcStart0",
      RegMem => "RegField",
      Description => "Start value for CRC0",
      Width => "96",
      Position => "95:0", # Excel Formula: =calc_position(F129,E130,TRUE)
      Type => "Config",
      UsedBy => "flc_keyc",
      DefaultValue => "hffffffffffffffffffffffff",
    },
    FlowSignatureCrcStart1 => { #Structure Type: RegField;
      Name => "FlowSignatureCrcStart1",
      RegMem => "RegField",
      Description => "Start value for CRC1",
      Width => "96",
      Position => "191:96", # Excel Formula: =calc_position(F130,E131)
      Type => "Config",
      UsedBy => "flc_keyc",
      DefaultValue => "hffffffffffffffffffffffff",
    },
  },
  QueueIndexCrcStartReg => { #Structure Type: Reg;
    Name => "QueueIndexCrcStartReg",
    RegMem => "Reg",
    Address => "1E9", # Excel Formula: =calc_reg_address(C129,A129,G129)
    Description => "Sets the start value of the flow signature CRC s",
    Width => "11", # Excel Formula: =calc_reg_width(E133:E133,F133)
    Type => "Config",
    QueueIndexCrcStart => { #Structure Type: RegField;
      Name => "QueueIndexCrcStart",
      RegMem => "RegField",
      Description => "Start value for CRC",
      Width => "11",
      Position => "10:0", # Excel Formula: =calc_position(F132,E133,TRUE)
      Type => "Config",
      UsedBy => "flc_keyc",
      DefaultValue => "h7ff",
    },
  },
  FlowVerifierCrcStartReg => { #Structure Type: Reg;
    Name => "FlowVerifierCrcStartReg",
    RegMem => "Reg",
    Address => "1EA", # Excel Formula: =calc_reg_address(C132,A132,G132)
    Description => "Sets the start value of the flow signature CRC s",
    Width => "32", # Excel Formula: =calc_reg_width(E135:E136,F136)
    Type => "Config",
    FlowVerifierCrcStart0 => { #Structure Type: RegField;
      Name => "FlowVerifierCrcStart0",
      RegMem => "RegField",
      Description => "Start value for CRC0",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F134,E135,TRUE)
      Type => "Config",
      UsedBy => "flc_keyc",
      DefaultValue => "hffff",
    },
    FlowVerifierCrcStart1 => { #Structure Type: RegField;
      Name => "FlowVerifierCrcStart1",
      RegMem => "RegField",
      Description => "Start value for CRC1",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F135,E136)
      Type => "Config",
      UsedBy => "flc_keyc",
      DefaultValue => "hffff",
    },
  },
  CacheIndexToEmIndexMem => { #Structure Type: Mem;
    Name => "CacheIndexToEmIndexMem",
    RegMem => "Mem",
    Address => "100000",
    Description => "Mapping each cache index to the EM index in which it is located",
    Width => "22", # Excel Formula: =calc_mem_width(E138:E138,M137,F138,-1)
    Type => "Dynamic",
    UsedBy => "flc_db",
    MemEntries => "12288",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SamplePhysicalMem=1,SampleReadAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    MemLogicalWidth => "16",
    CacheIndexToEmIndex => { #Structure Type: MemField;
      Name => "CacheIndexToEmIndex",
      RegMem => "MemField",
      Description => "The EM index",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F137,E138,TRUE)
    },
  },
  CacheIndexFBM => { #Structure Type: Mem;
    Name => "CacheIndexFBM",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C137,A137,G139,L139)
    Description => "Bitmap for managing the cache indices. Used by the free-buffer-manager in order to allocate cache indices to the EM database (as payload)",
    Width => "137", # Excel Formula: =calc_mem_width(E140:E140,M139,F140,-1)
    Type => "Dynamic",
    UsedBy => "flc_db",
    MemEntries => "96",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteBeforeProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,DisableSameAddressErr=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    MemLogicalWidth => "128",
    CacheIndexFBMBitmap => { #Structure Type: MemField;
      Name => "CacheIndexFBMBitmap",
      RegMem => "MemField",
      Description => "Free Buffer manager bitmap",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F139,E140,TRUE)
    },
  },
  HeaderTypesArrayTcam => { #Structure Type: Mem;
    Name => "HeaderTypesArrayTcam",
    RegMem => "Mem",
    Address => "300000", # Excel Formula: =calc_mem_address(C139,A139,G141,L141)
    Description => "TCAM for finding the flow cache control bits per header types concatenated array. Accessed with the full header types array.",
    Width => "74", # Excel Formula: =calc_mem_width(E142:E143,"None",F143,-1)
    Type => "Config",
    UsedBy => "keyc",
    MemEntries => "256",
    MemWrapper => "TCAM",
    MemProtect => "Parity",
    AdditionalInfo => "NumOfKeys=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    MemLogicalWidth => "74",
    HeaderTypesArrayTcam_key => { #Structure Type: MemField;
      Name => "HeaderTypesArrayTcam_key",
      RegMem => "MemField",
      Description => "Key for TCAM lookup. The key is a concatanation of all 10 headers type, source port, ifg and recycle code",
      Width => "73", # Excel Formula: =65+6+2
      Position => "72:0", # Excel Formula: =calc_position(F141,E142,TRUE)
    },
    HeaderTypesArrayTcam_delete => { #Structure Type: MemField;
      Name => "HeaderTypesArrayTcam_delete",
      RegMem => "MemField",
      Description => "Delete TCAM entry",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F142,E143)
    },
  },
  HeaderTypesArrayPayload => { #Structure Type: Mem;
    Name => "HeaderTypesArrayPayload",
    RegMem => "Mem",
    Address => "400000", # Excel Formula: =calc_mem_address(C141,A141,G144,L144)
    Description => "Holds the payload for HeaderTypesArrayTcam. Flow cache control bits per header types concatenated array. ",
    Width => "25", # Excel Formula: =calc_mem_width(E145:E153,M144,F153,-1)
    Type => "Config",
    UsedBy => "keyc",
    MemEntries => "256",
    MemWrapper => "RegArray",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,PortErrPropagate=Disabled",
    MemLogicalWidth => "25",
    UseCache => { #Structure Type: MemField;
      Name => "UseCache",
      RegMem => "MemField",
      Description => "If enabled, the flow is allowed to use flow-cache",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F144,E145,TRUE)
    },
    RangeCompressionValid0 => { #Structure Type: MemField;
      Name => "RangeCompressionValid0",
      RegMem => "MemField",
      Description => "Range compression profile 0 is valid",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F145,E146)
    },
    RangeCompressionValid1 => { #Structure Type: MemField;
      Name => "RangeCompressionValid1",
      RegMem => "MemField",
      Description => "Range compression profile 1 is valid",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F146,E147)
    },
    RangeCompressionValid2 => { #Structure Type: MemField;
      Name => "RangeCompressionValid2",
      RegMem => "MemField",
      Description => "Range compression profile 2 is valid",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F147,E148)
    },
    RangeCompressionValid3 => { #Structure Type: MemField;
      Name => "RangeCompressionValid3",
      RegMem => "MemField",
      Description => "Range compression profile 3 is valid",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F148,E149)
    },
    RangeCompressionProfileSel0 => { #Structure Type: MemField;
      Name => "RangeCompressionProfileSel0",
      RegMem => "MemField",
      Description => "Range compression profile 0 value",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F149,E150)
    },
    RangeCompressionProfileSel1 => { #Structure Type: MemField;
      Name => "RangeCompressionProfileSel1",
      RegMem => "MemField",
      Description => "Range compression profile 1 value",
      Width => "5",
      Position => "14:10", # Excel Formula: =calc_position(F150,E151)
    },
    RangeCompressionProfileSel2 => { #Structure Type: MemField;
      Name => "RangeCompressionProfileSel2",
      RegMem => "MemField",
      Description => "Range compression profile 2 value",
      Width => "5",
      Position => "19:15", # Excel Formula: =calc_position(F151,E152)
    },
    RangeCompressionProfileSel3 => { #Structure Type: MemField;
      Name => "RangeCompressionProfileSel3",
      RegMem => "MemField",
      Description => "Range compression profile 3 value",
      Width => "5",
      Position => "24:20", # Excel Formula: =calc_position(F152,E153)
    },
  },
  FlowCache => { #Structure Type: Mem;
    Name => "FlowCache",
    RegMem => "Mem",
    Address => "400000", # Excel Formula: =calc_mem_address(C144,A144,G154,L154)
    Description => "Flow cache data base",
    Width => "41", # Excel Formula: =calc_mem_width(E155:E157,M154,F157,-1)
    Type => "DocOnly",
    UsedBy => "flc_db",
    MemEntries => "18432",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=96,SourceIdWidth=1,NumberOfBanks=18,NumberOfCamEntries=64,QuickInsert=Enabled,BinSize=1,NumberOfParallelBanks=3,2PMemory=Enabled,FastDelete=Enabled,VerifierSampleReadBeforeProt=1,VrfWriteActivityFactor=50,VrfReadActivityFactor=50,VrfDisableSameAddressErr=Enabled,ValidSampleReadBeforeProt=1,ValidFfBased=Enabled,VldWriteActivityFactor=50,VldReadActivityFactor=50,VldDisableSameAddressErr=Enabled,VldEnableNonCpuRdWrSameAddress=Enabled",
    MemLogicalWidth => "41",
    FlowQueueIndex => { #Structure Type: MemField;
      Name => "FlowQueueIndex",
      RegMem => "MemField",
      Description => "Queue index. Used for limiting cache index to a single queue. Incase a cache index was mapped to two queues, the later one will be sent to the npe, and will not use the cache.",
      Width => "11",
      Position => "10:0", # Excel Formula: =calc_position(F154,E155,TRUE)
    },
    FlowCacheVerifier => { #Structure Type: MemField;
      Name => "FlowCacheVerifier",
      RegMem => "MemField",
      Description => "Flow verifier. Used for limiting hash colusions of 2 different flows to the same flow signature for up to one age cycle",
      Width => "16",
      Position => "26:11", # Excel Formula: =calc_position(F155,E156)
    },
    FlowCacheIndex => { #Structure Type: MemField;
      Name => "FlowCacheIndex",
      RegMem => "MemField",
      Description => "Cache index. Cache entry for accesing the flow cache queues and data",
      Width => "14",
      Position => "40:27", # Excel Formula: =calc_position(F156,E157)
    },
  },
  ResultFifoMem => { #Structure Type: Mem;
    Name => "ResultFifoMem",
    RegMem => "Mem",
    Address => "500000", # Excel Formula: =calc_mem_address(C144,A144,G158,L158)
    Description => "Contains the proccessed NPPDs",
    Width => "1335", # Excel Formula: =calc_mem_width(E159:E159,M158,F159,-1)
    Type => "Dynamic",
    UsedBy => "flc_db",
    MemEntries => "40",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleReadAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    MemLogicalWidth => "1323",
    Nppd => { #Structure Type: MemField;
      Name => "Nppd",
      RegMem => "MemField",
      Description => "The NPPD",
      Width => "1323",
      Position => "1322:0", # Excel Formula: =calc_position(F158,E159,TRUE)
    },
  },
  FlowCacheVerifier0 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 0; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "600000", # Excel Formula: =calc_mem_address(C158,A158,G160,L160)
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "0",
    MemLogicalWidth => "136",
    FlowCacheVerifier0Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier1 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 1; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "700000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "1",
    MemLogicalWidth => "136",
    FlowCacheVerifier1Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier2 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 2; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "800000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "2",
    MemLogicalWidth => "136",
    FlowCacheVerifier2Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier3 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 3; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "900000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "3",
    MemLogicalWidth => "136",
    FlowCacheVerifier3Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier4 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 4; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "4",
    MemLogicalWidth => "136",
    FlowCacheVerifier4Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier5 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 5; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "5",
    MemLogicalWidth => "136",
    FlowCacheVerifier5Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier6 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 6; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "6",
    MemLogicalWidth => "136",
    FlowCacheVerifier6Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier7 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 7; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "D00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "7",
    MemLogicalWidth => "136",
    FlowCacheVerifier7Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 7; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier8 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 8; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "E00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "8",
    MemLogicalWidth => "136",
    FlowCacheVerifier8Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 8; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier9 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 9; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "F00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "9",
    MemLogicalWidth => "136",
    FlowCacheVerifier9Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 9; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier10 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 10; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "1000000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "10",
    MemLogicalWidth => "136",
    FlowCacheVerifier10Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 10; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier11 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 11; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "1100000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "11",
    MemLogicalWidth => "136",
    FlowCacheVerifier11Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 11; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier12 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 12; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "1200000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "12",
    MemLogicalWidth => "136",
    FlowCacheVerifier12Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 12; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier13 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 13; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "1300000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "13",
    MemLogicalWidth => "136",
    FlowCacheVerifier13Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 13; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier14 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 14; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "1400000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "14",
    MemLogicalWidth => "136",
    FlowCacheVerifier14Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 14; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier15 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 15; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "1500000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "15",
    MemLogicalWidth => "136",
    FlowCacheVerifier15Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 15; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier16 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 16; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "1600000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "16",
    MemLogicalWidth => "136",
    FlowCacheVerifier16Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 16; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheVerifier17 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 17; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCacheVerifier[18]",
    RegMem => "Mem",
    Address => "1700000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "136", # Excel Formula: =calc_mem_width(E161:E161,M160,F161,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "1R1W",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "17",
    MemLogicalWidth => "136",
    FlowCacheVerifier17Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 17; ArrayLocationInName: 18;
      Name => "FlowCacheVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "136",
      Position => "135:0", # Excel Formula: =calc_position(F160,E161,TRUE)
    },
  },
  FlowCacheValid0 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 0; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "1800000", # Excel Formula: =calc_mem_address(C160,A160,G162,L162)
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "0",
    MemLogicalWidth => "1",
    FlowCacheValid0Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid1 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 1; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "1900000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "1",
    MemLogicalWidth => "1",
    FlowCacheValid1Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid2 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 2; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "1A00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "2",
    MemLogicalWidth => "1",
    FlowCacheValid2Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid3 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 3; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "1B00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "3",
    MemLogicalWidth => "1",
    FlowCacheValid3Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid4 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 4; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "1C00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "4",
    MemLogicalWidth => "1",
    FlowCacheValid4Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid5 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 5; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "1D00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "5",
    MemLogicalWidth => "1",
    FlowCacheValid5Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid6 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 6; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "1E00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "6",
    MemLogicalWidth => "1",
    FlowCacheValid6Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid7 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 7; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "1F00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "7",
    MemLogicalWidth => "1",
    FlowCacheValid7Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid8 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 8; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "2000000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "8",
    MemLogicalWidth => "1",
    FlowCacheValid8Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 8; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid9 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 9; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "2100000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "9",
    MemLogicalWidth => "1",
    FlowCacheValid9Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 9; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid10 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 10; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "2200000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "10",
    MemLogicalWidth => "1",
    FlowCacheValid10Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 10; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid11 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 11; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "2300000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "11",
    MemLogicalWidth => "1",
    FlowCacheValid11Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 11; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid12 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 12; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "2400000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "12",
    MemLogicalWidth => "1",
    FlowCacheValid12Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 12; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid13 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 13; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "2500000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "13",
    MemLogicalWidth => "1",
    FlowCacheValid13Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 13; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid14 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 14; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "2600000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "14",
    MemLogicalWidth => "1",
    FlowCacheValid14Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 14; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid15 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 15; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "2700000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "15",
    MemLogicalWidth => "1",
    FlowCacheValid15Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 15; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid16 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 16; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "2800000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "16",
    MemLogicalWidth => "1",
    FlowCacheValid16Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 16; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCacheValid17 => { #Structure Type: Mem; ArrayLength: 18; ArrayIndex: 17; ArrayLocationInName: 15; Skip Register;
    Name => "FlowCacheValid[18]",
    RegMem => "Mem",
    Address => "2900000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "1", # Excel Formula: =calc_mem_width(E163:E163,M162,F163,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "1024",
    MemWrapper => "2R2W",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "17",
    MemLogicalWidth => "1",
    FlowCacheValid17Data => { #Structure Type: MemField; ArrayLength: 18; ArrayIndex: 17; ArrayLocationInName: 15;
      Name => "FlowCacheValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F162,E163,TRUE)
    },
  },
  FlowCachePerBankReg0 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 0; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1EB", # Excel Formula: =calc_reg_address(C134,A134,G134)
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "0",
    FlowCacheActiveBanks0 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 0; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey0 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 0; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg1 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 1; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1EC",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "1",
    FlowCacheActiveBanks1 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 1; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey1 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 1; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg2 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 2; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1ED",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "2",
    FlowCacheActiveBanks2 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 2; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey2 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 2; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 2; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg3 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 3; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1EE",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "3",
    FlowCacheActiveBanks3 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 3; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey3 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 3; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 3; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg4 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 4; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1EF",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "4",
    FlowCacheActiveBanks4 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 4; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey4 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 4; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc4 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 4; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg5 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 5; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1F0",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "5",
    FlowCacheActiveBanks5 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 5; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey5 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 5; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc5 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 5; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg6 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 6; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1F1",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "6",
    FlowCacheActiveBanks6 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 6; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey6 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 6; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc6 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 6; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg7 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 7; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1F2",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "7",
    FlowCacheActiveBanks7 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 7; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey7 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 7; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc7 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 7; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg8 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 8; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1F3",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "8",
    FlowCacheActiveBanks8 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 8; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey8 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 8; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc8 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 8; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg9 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 9; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1F4",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "9",
    FlowCacheActiveBanks9 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 9; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey9 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 9; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc9 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 9; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg10 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 10; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1F5",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "10",
    FlowCacheActiveBanks10 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 10; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey10 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 10; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc10 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 10; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg11 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 11; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1F6",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "11",
    FlowCacheActiveBanks11 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 11; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey11 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 11; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc11 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 11; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg12 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 12; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1F7",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "12",
    FlowCacheActiveBanks12 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 12; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey12 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 12; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc12 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 12; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg13 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 13; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1F8",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "13",
    FlowCacheActiveBanks13 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 13; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey13 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 13; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc13 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 13; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg14 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 14; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1F9",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "14",
    FlowCacheActiveBanks14 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 14; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey14 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 14; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc14 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 14; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg15 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 15; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1FA",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "15",
    FlowCacheActiveBanks15 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 15; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey15 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 15; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc15 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 15; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg16 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 16; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1FB",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "16",
    FlowCacheActiveBanks16 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 16; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey16 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 16; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc16 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 16; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerBankReg17 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 17; ArrayLocationInName: 20; Skip Register;
    Name => "FlowCachePerBankReg[18]",
    RegMem => "Reg",
    Address => "1FC",
    Description => "EM bank configurations, see fields description",
    Width => "194", # Excel Formula: =calc_reg_width(E165:E167,F167)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "17",
    FlowCacheActiveBanks17 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 17; ArrayLocationInName: 21;
      Name => "FlowCacheActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F164,E165,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "d1",
    },
    FlowCacheHashKey17 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 17; ArrayLocationInName: 17;
      Name => "FlowCacheHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "192",
      Position => "192:1", # Excel Formula: =calc_position(F165,E166)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheUsePrimitiveCrc17 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 17; ArrayLocationInName: 25;
      Name => "FlowCacheUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "193", # Excel Formula: =calc_position(F166,E167)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCachePerEmReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 18; Skip Register;
    Name => "FlowCachePerEmReg[1]",
    RegMem => "Reg",
    Address => "1FD", # Excel Formula: =calc_reg_address(C164,A164,G164)
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E169:E171,F171)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    FlowCacheKeyWidth0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "FlowCacheKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F168,E169,TRUE)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 23;
      Name => "FlowCacheAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F169,E170)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
    FlowCacheBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 28;
      Name => "FlowCacheBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F170,E171)
      Type => "Config",
      UsedBy => "FlowCache",
      DefaultValue => "h0",
    },
  },
  FlowCacheCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 21; Skip Register;
    Name => "FlowCacheCamWmMaxReg[1]",
    RegMem => "Reg",
    Address => "1FE", # Excel Formula: =calc_reg_address(C168,A168,G168)
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E173:E173,F173)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    FlowCacheCamWmMax0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "FlowCacheCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F172,E173,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg0 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 0; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "1FF", # Excel Formula: =calc_reg_address(C172,A172,G172)
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "0",
    FlowCacheBankWriteCntr0 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 0; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg1 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 1; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "200",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "1",
    FlowCacheBankWriteCntr1 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 1; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg2 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 2; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "201",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "2",
    FlowCacheBankWriteCntr2 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 2; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg3 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 3; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "202",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "3",
    FlowCacheBankWriteCntr3 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 3; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg4 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 4; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "203",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "4",
    FlowCacheBankWriteCntr4 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 4; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg5 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 5; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "204",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "5",
    FlowCacheBankWriteCntr5 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 5; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg6 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 6; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "205",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "6",
    FlowCacheBankWriteCntr6 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 6; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg7 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 7; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "206",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "7",
    FlowCacheBankWriteCntr7 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 7; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg8 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 8; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "207",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "8",
    FlowCacheBankWriteCntr8 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 8; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg9 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 9; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "208",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "9",
    FlowCacheBankWriteCntr9 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 9; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg10 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 10; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "209",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "10",
    FlowCacheBankWriteCntr10 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 10; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg11 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 11; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "20A",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "11",
    FlowCacheBankWriteCntr11 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 11; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg12 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 12; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "20B",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "12",
    FlowCacheBankWriteCntr12 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 12; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg13 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 13; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "20C",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "13",
    FlowCacheBankWriteCntr13 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 13; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg14 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 14; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "20D",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "14",
    FlowCacheBankWriteCntr14 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 14; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg15 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 15; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "20E",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "15",
    FlowCacheBankWriteCntr15 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 15; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg16 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 16; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "20F",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "16",
    FlowCacheBankWriteCntr16 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 16; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheBankWriteCntrReg17 => { #Structure Type: Reg; ArrayLength: 18; ArrayIndex: 17; ArrayLocationInName: 26; Skip Register;
    Name => "FlowCacheBankWriteCntrReg[18]",
    RegMem => "Reg",
    Address => "210",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E175:E175,F175)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "18",
    ArrayIndex => "17",
    FlowCacheBankWriteCntr17 => { #Structure Type: RegField; ArrayLength: 18; ArrayIndex: 17; ArrayLocationInName: 23;
      Name => "FlowCacheBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F174,E175,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FlowCacheCam => { #Structure Type: Mem; Skip Register;
    Name => "FlowCacheCam",
    RegMem => "Mem",
    Address => "2A00000", # Excel Formula: =calc_mem_address(C162,A162,G176,L176)
    Description => "EM fallback CAM",
    Width => "138", # Excel Formula: =calc_mem_width(E177:E179,"None",F179,-1)
    Type => "Dynamic",
    UsedBy => "FlowCache",
    MemEntries => "64",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=41,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,NumCamWriteClients=2,UseSoftReset=Enabled",
    Comments => "EM Skip Reg",
    MemLogicalWidth => "138",
    FlowCacheCam_key => { #Structure Type: MemField;
      Name => "FlowCacheCam_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "96",
      Position => "95:0", # Excel Formula: =calc_position(F176,E177,TRUE)
    },
    FlowCacheCam_payload => { #Structure Type: MemField;
      Name => "FlowCacheCam_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "41",
      Position => "136:96", # Excel Formula: =calc_position(F177,E178)
    },
    FlowCacheCam_valid => { #Structure Type: MemField;
      Name => "FlowCacheCam_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "137", # Excel Formula: =calc_position(F178,E179)
    },
  },
  StatusCacheOccupancyCfg => { #Structure Type: Reg; Skip Register;
    Name => "StatusCacheOccupancyCfg",
    RegMem => "Reg",
    Address => "211", # Excel Formula: =calc_reg_address(C174,A174,G174)
    Description => "Histogram configurations register, see fields description",
    Width => "98", # Excel Formula: =calc_reg_width(E181:E187,F187)
    Type => "Config",
    Comments => "EM Skip Reg",
    StatusCacheOccupancyTh0 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyTh0",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusCacheOccupancyTh0, bin 0 is incremented",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F180,E181,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusCacheOccupancyTh1 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyTh1",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusCacheOccupancyTh1, bin 1 is incremented",
      Width => "14",
      Position => "27:14", # Excel Formula: =calc_position(F181,E182)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusCacheOccupancyTh2 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyTh2",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusCacheOccupancyTh2, bin 2 is incremented",
      Width => "14",
      Position => "41:28", # Excel Formula: =calc_position(F182,E183)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusCacheOccupancyTh3 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyTh3",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusCacheOccupancyTh3, bin 3 is incremented",
      Width => "14",
      Position => "55:42", # Excel Formula: =calc_position(F183,E184)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusCacheOccupancyTh4 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyTh4",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusCacheOccupancyTh4, bin 4 is incremented",
      Width => "14",
      Position => "69:56", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusCacheOccupancyTh5 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyTh5",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusCacheOccupancyTh5, bin 5 is incremented",
      Width => "14",
      Position => "83:70", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusCacheOccupancyTh6 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyTh6",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusCacheOccupancyTh6, bin 6 is incremented",
      Width => "14",
      Position => "97:84", # Excel Formula: =calc_position(F186,E187)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  StatusCacheOccupancyStatus => { #Structure Type: Reg; Skip Register;
    Name => "StatusCacheOccupancyStatus",
    RegMem => "Reg",
    Address => "212", # Excel Formula: =calc_reg_address(C180,A180,G180)
    Description => "Histogram status register, see fields description",
    Width => "520", # Excel Formula: =calc_reg_width(E189:E204,F204)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    StatusCacheOccupancyValue0 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyValue0",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F188,E189,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyOverflow0 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyOverflow0",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "64", # Excel Formula: =calc_position(F189,E190)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyValue1 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyValue1",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "128:65", # Excel Formula: =calc_position(F190,E191)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyOverflow1 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyOverflow1",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "129", # Excel Formula: =calc_position(F191,E192)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyValue2 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyValue2",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "193:130", # Excel Formula: =calc_position(F192,E193)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyOverflow2 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyOverflow2",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "194", # Excel Formula: =calc_position(F193,E194)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyValue3 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyValue3",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "258:195", # Excel Formula: =calc_position(F194,E195)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyOverflow3 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyOverflow3",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "259", # Excel Formula: =calc_position(F195,E196)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyValue4 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyValue4",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "323:260", # Excel Formula: =calc_position(F196,E197)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyOverflow4 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyOverflow4",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "324", # Excel Formula: =calc_position(F197,E198)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyValue5 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyValue5",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "388:325", # Excel Formula: =calc_position(F198,E199)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyOverflow5 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyOverflow5",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "389", # Excel Formula: =calc_position(F199,E200)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyValue6 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyValue6",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "453:390", # Excel Formula: =calc_position(F200,E201)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyOverflow6 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyOverflow6",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "454", # Excel Formula: =calc_position(F201,E202)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyValue7 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyValue7",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "518:455", # Excel Formula: =calc_position(F202,E203)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyOverflow7 => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyOverflow7",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "519", # Excel Formula: =calc_position(F203,E204)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  StatusCacheOccupancyMaxWmkReg => { #Structure Type: Reg; Skip Register;
    Name => "StatusCacheOccupancyMaxWmkReg",
    RegMem => "Reg",
    Address => "213", # Excel Formula: =calc_reg_address(C188,A188,G188)
    Description => "Histogram max watermark register, see fields description",
    Width => "46", # Excel Formula: =calc_reg_width(E206:E207,F207)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    StatusCacheOccupancyMaxWmk => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyMaxWmk",
      RegMem => "RegField",
      Description => "Histogram max watermark",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F205,E206,TRUE)
      Type => "MaxWmk",
      UsedBy => "CIF",
    },
    StatusCacheOccupancyMaxWmkTime => { #Structure Type: RegField;
      Name => "StatusCacheOccupancyMaxWmkTime",
      RegMem => "RegField",
      Description => "Time of last max watermark update",
      Width => "32",
      Position => "45:14", # Excel Formula: =calc_position(F206,E207)
      Type => "Capture",
      UsedBy => "CIF",
    },
  },
  StatusFirstToSecondPktLatencyCfg => { #Structure Type: Reg; Skip Register;
    Name => "StatusFirstToSecondPktLatencyCfg",
    RegMem => "Reg",
    Address => "214", # Excel Formula: =calc_reg_address(C205,A205,G205)
    Description => "Histogram configurations register, see fields description",
    Width => "224", # Excel Formula: =calc_reg_width(E209:E215,F215)
    Type => "Config",
    Comments => "EM Skip Reg",
    StatusFirstToSecondPktLatencyTh0 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyTh0",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusFirstToSecondPktLatencyTh0, bin 0 is incremented",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F208,E209,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusFirstToSecondPktLatencyTh1 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyTh1",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusFirstToSecondPktLatencyTh1, bin 1 is incremented",
      Width => "32",
      Position => "63:32", # Excel Formula: =calc_position(F209,E210)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusFirstToSecondPktLatencyTh2 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyTh2",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusFirstToSecondPktLatencyTh2, bin 2 is incremented",
      Width => "32",
      Position => "95:64", # Excel Formula: =calc_position(F210,E211)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusFirstToSecondPktLatencyTh3 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyTh3",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusFirstToSecondPktLatencyTh3, bin 3 is incremented",
      Width => "32",
      Position => "127:96", # Excel Formula: =calc_position(F211,E212)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusFirstToSecondPktLatencyTh4 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyTh4",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusFirstToSecondPktLatencyTh4, bin 4 is incremented",
      Width => "32",
      Position => "159:128", # Excel Formula: =calc_position(F212,E213)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusFirstToSecondPktLatencyTh5 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyTh5",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusFirstToSecondPktLatencyTh5, bin 5 is incremented",
      Width => "32",
      Position => "191:160", # Excel Formula: =calc_position(F213,E214)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusFirstToSecondPktLatencyTh6 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyTh6",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusFirstToSecondPktLatencyTh6, bin 6 is incremented",
      Width => "32",
      Position => "223:192", # Excel Formula: =calc_position(F214,E215)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  StatusFirstToSecondPktLatencyStatus => { #Structure Type: Reg; Skip Register;
    Name => "StatusFirstToSecondPktLatencyStatus",
    RegMem => "Reg",
    Address => "215", # Excel Formula: =calc_reg_address(C208,A208,G208)
    Description => "Histogram status register, see fields description",
    Width => "520", # Excel Formula: =calc_reg_width(E217:E232,F232)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    StatusFirstToSecondPktLatencyValue0 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyValue0",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F216,E217,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyOverflow0 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyOverflow0",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "64", # Excel Formula: =calc_position(F217,E218)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyValue1 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyValue1",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "128:65", # Excel Formula: =calc_position(F218,E219)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyOverflow1 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyOverflow1",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "129", # Excel Formula: =calc_position(F219,E220)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyValue2 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyValue2",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "193:130", # Excel Formula: =calc_position(F220,E221)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyOverflow2 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyOverflow2",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "194", # Excel Formula: =calc_position(F221,E222)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyValue3 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyValue3",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "258:195", # Excel Formula: =calc_position(F222,E223)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyOverflow3 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyOverflow3",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "259", # Excel Formula: =calc_position(F223,E224)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyValue4 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyValue4",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "323:260", # Excel Formula: =calc_position(F224,E225)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyOverflow4 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyOverflow4",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "324", # Excel Formula: =calc_position(F225,E226)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyValue5 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyValue5",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "388:325", # Excel Formula: =calc_position(F226,E227)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyOverflow5 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyOverflow5",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "389", # Excel Formula: =calc_position(F227,E228)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyValue6 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyValue6",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "453:390", # Excel Formula: =calc_position(F228,E229)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyOverflow6 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyOverflow6",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "454", # Excel Formula: =calc_position(F229,E230)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyValue7 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyValue7",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "518:455", # Excel Formula: =calc_position(F230,E231)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyOverflow7 => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyOverflow7",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "519", # Excel Formula: =calc_position(F231,E232)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  StatusFirstToSecondPktLatencyMaxWmkReg => { #Structure Type: Reg; Skip Register;
    Name => "StatusFirstToSecondPktLatencyMaxWmkReg",
    RegMem => "Reg",
    Address => "216", # Excel Formula: =calc_reg_address(C216,A216,G216)
    Description => "Histogram max watermark register, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E234:E235,F235)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    StatusFirstToSecondPktLatencyMaxWmk => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyMaxWmk",
      RegMem => "RegField",
      Description => "Histogram max watermark",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F233,E234,TRUE)
      Type => "MaxWmk",
      UsedBy => "CIF",
    },
    StatusFirstToSecondPktLatencyMaxWmkTime => { #Structure Type: RegField;
      Name => "StatusFirstToSecondPktLatencyMaxWmkTime",
      RegMem => "RegField",
      Description => "Time of last max watermark update",
      Width => "32",
      Position => "63:32", # Excel Formula: =calc_position(F234,E235)
      Type => "Capture",
      UsedBy => "CIF",
    },
  },
  StatusNewFlowsRateCfg => { #Structure Type: Reg; Skip Register;
    Name => "StatusNewFlowsRateCfg",
    RegMem => "Reg",
    Address => "217", # Excel Formula: =calc_reg_address(C233,A233,G233)
    Description => "Histogram configurations register, see fields description",
    Width => "122", # Excel Formula: =calc_reg_width(E237:E244,F244)
    Type => "Config",
    Comments => "EM Skip Reg",
    StatusNewFlowsRateTh0 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateTh0",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusNewFlowsRateTh0, bin 0 is incremented",
      Width => "15",
      Position => "14:0", # Excel Formula: =calc_position(F236,E237,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusNewFlowsRateTh1 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateTh1",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusNewFlowsRateTh1, bin 1 is incremented",
      Width => "15",
      Position => "29:15", # Excel Formula: =calc_position(F237,E238)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusNewFlowsRateTh2 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateTh2",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusNewFlowsRateTh2, bin 2 is incremented",
      Width => "15",
      Position => "44:30", # Excel Formula: =calc_position(F238,E239)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusNewFlowsRateTh3 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateTh3",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusNewFlowsRateTh3, bin 3 is incremented",
      Width => "15",
      Position => "59:45", # Excel Formula: =calc_position(F239,E240)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusNewFlowsRateTh4 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateTh4",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusNewFlowsRateTh4, bin 4 is incremented",
      Width => "15",
      Position => "74:60", # Excel Formula: =calc_position(F240,E241)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusNewFlowsRateTh5 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateTh5",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusNewFlowsRateTh5, bin 5 is incremented",
      Width => "15",
      Position => "89:75", # Excel Formula: =calc_position(F241,E242)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusNewFlowsRateTh6 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateTh6",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= StatusNewFlowsRateTh6, bin 6 is incremented",
      Width => "15",
      Position => "104:90", # Excel Formula: =calc_position(F242,E243)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    StatusNewFlowsRateTimeInterval => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateTimeInterval",
      RegMem => "RegField",
      Description => "Number of clocks between histogram sample events",
      Width => "17",
      Position => "121:105", # Excel Formula: =calc_position(F243,E244)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  StatusNewFlowsRateStatus => { #Structure Type: Reg; Skip Register;
    Name => "StatusNewFlowsRateStatus",
    RegMem => "Reg",
    Address => "218", # Excel Formula: =calc_reg_address(C236,A236,G236)
    Description => "Histogram status register, see fields description",
    Width => "520", # Excel Formula: =calc_reg_width(E246:E261,F261)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    StatusNewFlowsRateValue0 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateValue0",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F245,E246,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateOverflow0 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateOverflow0",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "64", # Excel Formula: =calc_position(F246,E247)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateValue1 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateValue1",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "128:65", # Excel Formula: =calc_position(F247,E248)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateOverflow1 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateOverflow1",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "129", # Excel Formula: =calc_position(F248,E249)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateValue2 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateValue2",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "193:130", # Excel Formula: =calc_position(F249,E250)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateOverflow2 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateOverflow2",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "194", # Excel Formula: =calc_position(F250,E251)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateValue3 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateValue3",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "258:195", # Excel Formula: =calc_position(F251,E252)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateOverflow3 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateOverflow3",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "259", # Excel Formula: =calc_position(F252,E253)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateValue4 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateValue4",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "323:260", # Excel Formula: =calc_position(F253,E254)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateOverflow4 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateOverflow4",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "324", # Excel Formula: =calc_position(F254,E255)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateValue5 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateValue5",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "388:325", # Excel Formula: =calc_position(F255,E256)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateOverflow5 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateOverflow5",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "389", # Excel Formula: =calc_position(F256,E257)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateValue6 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateValue6",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "453:390", # Excel Formula: =calc_position(F257,E258)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateOverflow6 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateOverflow6",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "454", # Excel Formula: =calc_position(F258,E259)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateValue7 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateValue7",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "518:455", # Excel Formula: =calc_position(F259,E260)
      Type => "Status",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateOverflow7 => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateOverflow7",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "519", # Excel Formula: =calc_position(F260,E261)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  StatusNewFlowsRateMaxWmkReg => { #Structure Type: Reg; Skip Register;
    Name => "StatusNewFlowsRateMaxWmkReg",
    RegMem => "Reg",
    Address => "219", # Excel Formula: =calc_reg_address(C245,A245,G245)
    Description => "Histogram max watermark register, see fields description",
    Width => "47", # Excel Formula: =calc_reg_width(E263:E264,F264)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    StatusNewFlowsRateMaxWmk => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateMaxWmk",
      RegMem => "RegField",
      Description => "Histogram max watermark",
      Width => "15",
      Position => "14:0", # Excel Formula: =calc_position(F262,E263,TRUE)
      Type => "MaxWmk",
      UsedBy => "CIF",
    },
    StatusNewFlowsRateMaxWmkTime => { #Structure Type: RegField;
      Name => "StatusNewFlowsRateMaxWmkTime",
      RegMem => "RegField",
      Description => "Time of last max watermark update",
      Width => "32",
      Position => "46:15", # Excel Formula: =calc_position(F263,E264)
      Type => "Capture",
      UsedBy => "CIF",
    },
  },
  DebugFlowHashEfficiencyCfg => { #Structure Type: Reg; Skip Register;
    Name => "DebugFlowHashEfficiencyCfg",
    RegMem => "Reg",
    Address => "21A", # Excel Formula: =calc_reg_address(C262,A262,G262)
    Description => "Histogram configurations register, see fields description",
    Width => "672", # Excel Formula: =calc_reg_width(E266:E272,F272)
    Type => "Config",
    Comments => "EM Skip Reg",
    DebugFlowHashEfficiencyTh0 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyTh0",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= DebugFlowHashEfficiencyTh0, bin 0 is incremented",
      Width => "96",
      Position => "95:0", # Excel Formula: =calc_position(F265,E266,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    DebugFlowHashEfficiencyTh1 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyTh1",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= DebugFlowHashEfficiencyTh1, bin 1 is incremented",
      Width => "96",
      Position => "191:96", # Excel Formula: =calc_position(F266,E267)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    DebugFlowHashEfficiencyTh2 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyTh2",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= DebugFlowHashEfficiencyTh2, bin 2 is incremented",
      Width => "96",
      Position => "287:192", # Excel Formula: =calc_position(F267,E268)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    DebugFlowHashEfficiencyTh3 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyTh3",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= DebugFlowHashEfficiencyTh3, bin 3 is incremented",
      Width => "96",
      Position => "383:288", # Excel Formula: =calc_position(F268,E269)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    DebugFlowHashEfficiencyTh4 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyTh4",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= DebugFlowHashEfficiencyTh4, bin 4 is incremented",
      Width => "96",
      Position => "479:384", # Excel Formula: =calc_position(F269,E270)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    DebugFlowHashEfficiencyTh5 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyTh5",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= DebugFlowHashEfficiencyTh5, bin 5 is incremented",
      Width => "96",
      Position => "575:480", # Excel Formula: =calc_position(F270,E271)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    DebugFlowHashEfficiencyTh6 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyTh6",
      RegMem => "RegField",
      Description => "Thresholds for bin detection. If compared value <= DebugFlowHashEfficiencyTh6, bin 6 is incremented",
      Width => "96",
      Position => "671:576", # Excel Formula: =calc_position(F271,E272)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  DebugFlowHashEfficiencyStatus => { #Structure Type: Reg; Skip Register;
    Name => "DebugFlowHashEfficiencyStatus",
    RegMem => "Reg",
    Address => "21B", # Excel Formula: =calc_reg_address(C265,A265,G265)
    Description => "Histogram status register, see fields description",
    Width => "520", # Excel Formula: =calc_reg_width(E274:E289,F289)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    DebugFlowHashEfficiencyValue0 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyValue0",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F273,E274,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyOverflow0 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyOverflow0",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "64", # Excel Formula: =calc_position(F274,E275)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyValue1 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyValue1",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "128:65", # Excel Formula: =calc_position(F275,E276)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyOverflow1 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyOverflow1",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "129", # Excel Formula: =calc_position(F276,E277)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyValue2 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyValue2",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "193:130", # Excel Formula: =calc_position(F277,E278)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyOverflow2 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyOverflow2",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "194", # Excel Formula: =calc_position(F278,E279)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyValue3 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyValue3",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "258:195", # Excel Formula: =calc_position(F279,E280)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyOverflow3 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyOverflow3",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "259", # Excel Formula: =calc_position(F280,E281)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyValue4 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyValue4",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "323:260", # Excel Formula: =calc_position(F281,E282)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyOverflow4 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyOverflow4",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "324", # Excel Formula: =calc_position(F282,E283)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyValue5 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyValue5",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "388:325", # Excel Formula: =calc_position(F283,E284)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyOverflow5 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyOverflow5",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "389", # Excel Formula: =calc_position(F284,E285)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyValue6 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyValue6",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "453:390", # Excel Formula: =calc_position(F285,E286)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyOverflow6 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyOverflow6",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "454", # Excel Formula: =calc_position(F286,E287)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyValue7 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyValue7",
      RegMem => "RegField",
      Description => "Bin value",
      Width => "64",
      Position => "518:455", # Excel Formula: =calc_position(F287,E288)
      Type => "Status",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyOverflow7 => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyOverflow7",
      RegMem => "RegField",
      Description => "Bin overflow indication",
      Width => "1",
      Position => "519", # Excel Formula: =calc_position(F288,E289)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  DebugFlowHashEfficiencyMaxWmkReg => { #Structure Type: Reg; Skip Register;
    Name => "DebugFlowHashEfficiencyMaxWmkReg",
    RegMem => "Reg",
    Address => "21C", # Excel Formula: =calc_reg_address(C273,A273,G273)
    Description => "Histogram max watermark register, see fields description",
    Width => "128", # Excel Formula: =calc_reg_width(E291:E292,F292)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    DebugFlowHashEfficiencyMaxWmk => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyMaxWmk",
      RegMem => "RegField",
      Description => "Histogram max watermark",
      Width => "96",
      Position => "95:0", # Excel Formula: =calc_position(F290,E291,TRUE)
      Type => "MaxWmk",
      UsedBy => "CIF",
    },
    DebugFlowHashEfficiencyMaxWmkTime => { #Structure Type: RegField;
      Name => "DebugFlowHashEfficiencyMaxWmkTime",
      RegMem => "RegField",
      Description => "Time of last max watermark update",
      Width => "32",
      Position => "127:96", # Excel Formula: =calc_position(F291,E292)
      Type => "Capture",
      UsedBy => "CIF",
    },
  },
};
