$block{ene_cluster} = {
  Defines_db => "X:\\Development\\design\\NPU\\txpp\\enc_eng_defines.v",
  ProjectName => "Gibraltar",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "13",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    EneInterruptSignals0Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals0Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals0 has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
    EneInterruptSignals1Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals1Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals1 has asserted interrupt",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
    },
    EneInterruptSignals2Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals2Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals2 has asserted interrupt",
      Width => "1",
      Position => "3",
      Type => "Interrupt",
    },
    EneInterruptSignals3Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals3Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals3 has asserted interrupt",
      Width => "1",
      Position => "4",
      Type => "Interrupt",
    },
    EneInterruptSignals4Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals4Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals4 has asserted interrupt",
      Width => "1",
      Position => "5",
      Type => "Interrupt",
    },
    EneInterruptSignals5Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals5Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals5 has asserted interrupt",
      Width => "1",
      Position => "6",
      Type => "Interrupt",
    },
    EneInterruptSignals6Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals6Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals6 has asserted interrupt",
      Width => "1",
      Position => "7",
      Type => "Interrupt",
    },
    EneInterruptSignals7Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals7Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals7 has asserted interrupt",
      Width => "1",
      Position => "8",
      Type => "Interrupt",
    },
    EneInterruptSignals8Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals8Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals8 has asserted interrupt",
      Width => "1",
      Position => "9",
      Type => "Interrupt",
    },
    EneInterruptSignals9Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals9Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals9 has asserted interrupt",
      Width => "1",
      Position => "10",
      Type => "Interrupt",
    },
    EneInterruptSignals10Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals10Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals10 has asserted interrupt",
      Width => "1",
      Position => "11",
      Type => "Interrupt",
    },
    EneInterruptSignals11Summary => { #Structure Type: RegField;
      Name => "EneInterruptSignals11Summary",
      RegMem => "RegField",
      Description => "When this bit is set, EneInterruptSignals11 has asserted interrupt",
      Width => "1",
      Position => "12",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt test register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "24",
    Type => "Config",
    Ene0MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene0MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene1MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene1MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene2MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene2MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene3MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene3MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene4MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene4MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene5MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene5MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene6MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene6MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene7MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene7MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene8MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene8MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene9MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene9MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene10MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene10MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene11MacroMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene11MacroMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene0DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene0DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene1DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene1DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene2DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene2DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene3DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene3DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene4DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene4DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene5DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene5DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene6DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene6DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene7DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene7DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene8DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene8DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene9DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene9DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene10DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene10DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene11DataMemoryEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene11DataMemoryEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "24",
    Type => "Config",
    Ene0MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene0MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene1MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene1MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene2MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene2MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene3MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene3MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene4MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene4MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene5MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene5MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene6MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene6MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene7MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene7MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene8MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene8MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene9MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene9MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene10MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene10MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene11MacroMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene11MacroMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene0DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene0DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene1DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene1DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene2DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene2DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene3DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene3DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene4DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene4DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene5DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene5DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene6DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene6DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene7DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene7DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene8DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene8DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene9DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene9DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene10DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene10DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Ene11DataMemoryEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Ene11DataMemoryEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "24",
    Type => "Config",
    Ene0MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene0MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene1MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene1MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene2MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene2MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene3MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene3MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene4MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene4MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene5MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene5MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene6MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene6MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene7MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene7MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene8MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene8MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene9MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene9MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene10MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene10MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene11MacroMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene11MacroMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene0DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene0DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene1DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene1DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene2DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene2DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene3DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene3DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene4DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene4DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene5DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene5DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene6DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene6DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene7DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene7DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene8DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene8DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene9DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene9DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene10DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene10DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene11DataMemoryEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Ene11DataMemoryEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "24",
    Type => "Config",
    Ene0MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene0MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene1MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene1MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene2MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene2MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene3MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene3MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene4MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene4MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene5MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene5MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene6MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene6MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene7MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene7MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene8MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene8MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene9MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene9MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene10MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene10MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene11MacroMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene11MacroMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene0DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene0DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene1DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene1DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene2DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene2DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene3DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene3DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene4DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene4DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene5DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene5DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene6DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene6DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene7DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene7DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene8DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene8DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene9DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene9DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene10DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene10DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Ene11DataMemoryEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Ene11DataMemoryEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "24",
    Type => "ReadOnly",
    Ene0MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene0MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene1MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene1MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene2MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene2MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene3MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene3MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene4MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene4MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene5MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene5MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene6MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene6MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene7MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene7MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene8MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene8MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene9MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene9MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "9",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene10MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene10MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "10",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene11MacroMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene11MacroMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "11",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene0DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene0DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "12",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene1DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene1DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "13",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene2DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene2DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "14",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene3DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene3DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "15",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene4DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene4DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "16",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene5DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene5DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "17",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene6DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene6DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "18",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene7DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene7DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "19",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene8DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene8DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "20",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene9DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene9DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "21",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene10DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene10DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "22",
      Type => "Status",
      UsedBy => "SER",
    },
    Ene11DataMemoryErrInt => { #Structure Type: RegField;
      Name => "Ene11DataMemoryErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "23",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "10",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "8",
      Position => "7:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "9:8",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "6",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "5",
      Position => "4:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "73", # Excel Formula: =calc_reg_width(E25:E53,F53)
    Type => "Config",
    SACR1P_RME => { #Structure Type: RegField;
      Name => "SACR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACR1P_RM => { #Structure Type: RegField;
      Name => "SACR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RME => { #Structure Type: RegField;
      Name => "SACU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RM => { #Structure Type: RegField;
      Name => "SACU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "9:6", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RME => { #Structure Type: RegField;
      Name => "SADC1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RM => { #Structure Type: RegField;
      Name => "SADC1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "14:11", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEA => { #Structure Type: RegField;
      Name => "SADR2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "15", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMA => { #Structure Type: RegField;
      Name => "SADR2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "19:16", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEB => { #Structure Type: RegField;
      Name => "SADR2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMB => { #Structure Type: RegField;
      Name => "SADR2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "24:21", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEA => { #Structure Type: RegField;
      Name => "SADS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "25", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMA => { #Structure Type: RegField;
      Name => "SADS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "29:26", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEB => { #Structure Type: RegField;
      Name => "SADS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMB => { #Structure Type: RegField;
      Name => "SADS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "34:31", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RME => { #Structure Type: RegField;
      Name => "SASR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "35", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RM => { #Structure Type: RegField;
      Name => "SASR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "39:36", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RME => { #Structure Type: RegField;
      Name => "SASS1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RM => { #Structure Type: RegField;
      Name => "SASS1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "44:41", # Excel Formula: =calc_position(F41,E42)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEA => { #Structure Type: RegField;
      Name => "SASS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "45", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMA => { #Structure Type: RegField;
      Name => "SASS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "49:46", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEB => { #Structure Type: RegField;
      Name => "SASS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMB => { #Structure Type: RegField;
      Name => "SASS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "54:51", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RME => { #Structure Type: RegField;
      Name => "SASU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "55", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RM => { #Structure Type: RegField;
      Name => "SASU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "59:56", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RME => { #Structure Type: RegField;
      Name => "SADU1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "60", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RM => { #Structure Type: RegField;
      Name => "SADU1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "64:61", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RA => { #Structure Type: RegField;
      Name => "SADS2P_RA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Assist for Dual port",
      Width => "2",
      Position => "66:65", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_WA => { #Structure Type: RegField;
      Name => "SADU1P_WA",
      RegMem => "RegField",
      Description => "Write-Assist configuration for the SP SADU compiler",
      Width => "3",
      Position => "69:67", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d5",
    },
    SADU1P_WPULSE => { #Structure Type: RegField;
      Name => "SADU1P_WPULSE",
      RegMem => "RegField",
      Description => "Write-Assist-Pulse configuration for the SP SADU compiler",
      Width => "3",
      Position => "72:70", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E55:E55,F55)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "Spare register",
    Width => "128", # Excel Formula: =calc_reg_width(E57:E57,F57)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "Spare register ",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C56,A56,G56)
    Description => "PMRO controller configuration",
    Width => "32", # Excel Formula: =calc_reg_width(E59:E63,F63)
    Type => "Config",
    PmroRstn => { #Structure Type: RegField;
      Name => "PmroRstn",
      RegMem => "RegField",
      Description => "PMRO reset, active low",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroConfigEn => { #Structure Type: RegField;
      Name => "PmroConfigEn",
      RegMem => "RegField",
      Description => "Enable pmro configuration, when equals to 0 configurations are locked",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroStart => { #Structure Type: RegField;
      Name => "PmroStart",
      RegMem => "RegField",
      Description => "Start the pmro operation",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroRingEn => { #Structure Type: RegField;
      Name => "PmroRingEn",
      RegMem => "RegField",
      Description => "Determines which PMRO ring to activate, should be configured as one hot",
      Width => "7",
      Position => "9:3", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroCntPeriod => { #Structure Type: RegField;
      Name => "PmroCntPeriod",
      RegMem => "RegField",
      Description => "Number of core clock cycles on which PMRO is measured",
      Width => "22",
      Position => "31:10", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "h3FFFFF",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "PMRO status configuration",
    Width => "23", # Excel Formula: =calc_reg_width(E65:E66,F66)
    Type => "ReadOnly",
    PmroCountOut => { #Structure Type: RegField;
      Name => "PmroCountOut",
      RegMem => "RegField",
      Description => "The ring oscilator counter value.",
      Width => "22",
      Position => "21:0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Status",
      UsedBy => "pmro",
    },
    PmroDone => { #Structure Type: RegField;
      Name => "PmroDone",
      RegMem => "RegField",
      Description => "Pmro operation done, PmroCountOut is valid.",
      Width => "1",
      Position => "22", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "Mirror Bus configurations",
    Width => "11", # Excel Formula: =calc_reg_width(E68:E69,F69)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "Enable Mirror Bus",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F67,E68,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "Mirror Bus selector",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C67,A67,G67)
    Description => "Mirror Bus status result",
    Width => "32", # Excel Formula: =calc_reg_width(E71:E71,F71)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "Mirror Bus status result",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F70,E71,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C70,A70,G70)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E73:E73,F73)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  FabricMode => { #Structure Type: Reg;
    Name => "FabricMode",
    RegMem => "Reg",
    Address => "100",
    Description => "Set the cluster to fabric mode",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "Config",
    FabricMode_r => { #Structure Type: RegField;
      Name => "FabricMode_r",
      RegMem => "RegField",
      Description => "Affects the arbitration of the sop word at the output of the cluster.
0: network mode
1: fabric mode",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "txpp",
      DefaultValue => "h0",
      DefaultSvConstraint => "h1",
      InitValueAllModes => "0x1",
      InitValueSa => "0x0",
      InitValueLcNwk => "0x0",
    },
  },
  EneInterruptSignals0 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "101", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "0",
    EneTtlCountExpiredInt0 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt0 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals1 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "102",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "1",
    EneTtlCountExpiredInt1 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt1 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals2 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "103",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "2",
    EneTtlCountExpiredInt2 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt2 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals3 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "104",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "3",
    EneTtlCountExpiredInt3 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt3 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals4 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "105",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "4",
    EneTtlCountExpiredInt4 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt4 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals5 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "106",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "5",
    EneTtlCountExpiredInt5 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt5 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals6 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "107",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "6",
    EneTtlCountExpiredInt6 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt6 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals7 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "108",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "7",
    EneTtlCountExpiredInt7 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt7 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals8 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "109",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "8",
    EneTtlCountExpiredInt8 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt8 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals9 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "10A",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "9",
    EneTtlCountExpiredInt9 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt9 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals10 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "10B",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "10",
    EneTtlCountExpiredInt10 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt10 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals11 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 20;
    Name => "EneInterruptSignals[12]",
    RegMem => "Reg",
    Address => "10C",
    Description => "Interrupt signals from the Encapsulation Engines",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Interrupt",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "11",
    EneTtlCountExpiredInt11 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]",
      RegMem => "RegField",
      Description => "Counts the number of times a word has been processed more than the allowed number of instructions set in EneWordTtl",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt11 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]",
      RegMem => "RegField",
      Description => "Asserted if the macro counter has been wrapped around without finishing the processing of the header",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "ene",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals0Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "10D",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "0",
    EneTtlCountExpiredInt0Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt0Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals1Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "10E",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "1",
    EneTtlCountExpiredInt1Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt1Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals2Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "10F",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "2",
    EneTtlCountExpiredInt2Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt2Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals3Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "110",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "3",
    EneTtlCountExpiredInt3Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt3Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals4Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "111",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "4",
    EneTtlCountExpiredInt4Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt4Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals5Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "112",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "5",
    EneTtlCountExpiredInt5Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt5Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals6Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "113",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "6",
    EneTtlCountExpiredInt6Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt6Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals7Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "114",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "7",
    EneTtlCountExpiredInt7Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt7Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals8Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "115",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "8",
    EneTtlCountExpiredInt8Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt8Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals9Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "116",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "9",
    EneTtlCountExpiredInt9Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt9Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals10Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "117",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "10",
    EneTtlCountExpiredInt10Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt10Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals11Mask => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Mask",
    RegMem => "Reg",
    Address => "118",
    Description => "This register masks EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptMask",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "11",
    EneTtlCountExpiredInt11Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt11Mask => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Mask",
      RegMem => "RegField",
      Description => "This field masks EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals0Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "119",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "0",
    EneTtlCountExpiredInt0Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt0Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals1Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "11A",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "1",
    EneTtlCountExpiredInt1Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt1Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals2Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "11B",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "2",
    EneTtlCountExpiredInt2Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt2Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals3Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "11C",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "3",
    EneTtlCountExpiredInt3Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt3Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals4Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "11D",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "4",
    EneTtlCountExpiredInt4Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt4Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals5Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "11E",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "5",
    EneTtlCountExpiredInt5Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt5Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals6Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "11F",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "6",
    EneTtlCountExpiredInt6Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt6Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals7Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "120",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "7",
    EneTtlCountExpiredInt7Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt7Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals8Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "121",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "8",
    EneTtlCountExpiredInt8Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt8Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals9Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "122",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "9",
    EneTtlCountExpiredInt9Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt9Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals10Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "123",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "10",
    EneTtlCountExpiredInt10Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt10Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneInterruptSignals11Test => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 20; Skip Register;
    Name => "EneInterruptSignals[12]Test",
    RegMem => "Reg",
    Address => "124",
    Description => "This register tests EneInterruptSignals[12] interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "InterruptTest",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "11",
    EneTtlCountExpiredInt11Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 22;
      Name => "EneTtlCountExpiredInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneTtlCountExpiredInt[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
    EneMacroCounterWrapAroundInt11Test => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 29;
      Name => "EneMacroCounterWrapAroundInt[n]Test",
      RegMem => "RegField",
      Description => "This field tests EneMacroCounterWrapAroundInt[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
      DefaultSvConstraint => "h1",
    },
  },
  EneDebugCounters0 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "125", # Excel Formula: =calc_reg_address(C9,A9,G9)
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "0",
    EneIncomingHeaders0 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders0 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters1 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "126",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "1",
    EneIncomingHeaders1 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders1 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters2 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "127",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "2",
    EneIncomingHeaders2 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders2 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters3 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "128",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "3",
    EneIncomingHeaders3 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders3 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters4 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "129",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "4",
    EneIncomingHeaders4 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders4 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters5 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "12A",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "5",
    EneIncomingHeaders5 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders5 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters6 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "12B",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "6",
    EneIncomingHeaders6 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders6 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters7 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "12C",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "7",
    EneIncomingHeaders7 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders7 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters8 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "12D",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "8",
    EneIncomingHeaders8 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders8 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters9 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "12E",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "9",
    EneIncomingHeaders9 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders9 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters10 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "12F",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "10",
    EneIncomingHeaders10 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders10 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugCounters11 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 17;
    Name => "EneDebugCounters[12]",
    RegMem => "Reg",
    Address => "130",
    Description => "Counters For Debug",
    Width => "128", # Excel Formula: =calc_reg_width(E13:E14,F14)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "11",
    EneIncomingHeaders11 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 19;
      Name => "EneIncomingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers entering the ENE",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    EneOutgoingHeaders11 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 19;
      Name => "EneOutgoingHeaders[n]",
      RegMem => "RegField",
      Description => "Number of headers Exiting the ENE",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F13,E14)
      Type => "Counter",
      UsedBy => "ene",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EneDebugWaterMark0 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "131", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "0",
    EneMaxInstructionPerWord0 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark1 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "132",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "1",
    EneMaxInstructionPerWord1 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark2 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "133",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "2",
    EneMaxInstructionPerWord2 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark3 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "134",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "3",
    EneMaxInstructionPerWord3 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark4 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "135",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "4",
    EneMaxInstructionPerWord4 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark5 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "136",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "5",
    EneMaxInstructionPerWord5 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark6 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "137",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "6",
    EneMaxInstructionPerWord6 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark7 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "138",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "7",
    EneMaxInstructionPerWord7 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark8 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "139",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "8",
    EneMaxInstructionPerWord8 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark9 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "13A",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "9",
    EneMaxInstructionPerWord9 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark10 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "13B",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "10",
    EneMaxInstructionPerWord10 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugWaterMark11 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 18;
    Name => "EneDebugWaterMark[12]",
    RegMem => "Reg",
    Address => "13C",
    Description => "Water Mark For Debug",
    Width => "8", # Excel Formula: =calc_reg_width(E16:E16,F16)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "11",
    EneMaxInstructionPerWord11 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 25;
      Name => "EneMaxInstructionPerWord[n]",
      RegMem => "RegField",
      Description => "Max instruction ran by a ENE",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst0 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "13D", # Excel Formula: =calc_reg_address(C15,A15,G15)
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "0",
    EneFirstInst0 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst1 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "13E",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "1",
    EneFirstInst1 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst2 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "13F",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "2",
    EneFirstInst2 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst3 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "140",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "3",
    EneFirstInst3 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst4 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "141",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "4",
    EneFirstInst4 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst5 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "142",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "5",
    EneFirstInst5 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst6 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "143",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "6",
    EneFirstInst6 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst7 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "144",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "7",
    EneFirstInst7 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst8 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "145",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "8",
    EneFirstInst8 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst9 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "146",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "9",
    EneFirstInst9 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst10 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "147",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "10",
    EneFirstInst10 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneDebugTtlFirstAccessedInst11 => { #Structure Type: Reg; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 29;
    Name => "EneDebugTtlFirstAccessedInst[12]",
    RegMem => "Reg",
    Address => "148",
    Description => "First macro pointer for a header, valid in case the processing has hit TTL",
    Width => "8", # Excel Formula: =calc_reg_width(E18:E18,F18)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "12",
    ArrayIndex => "11",
    EneFirstInst11 => { #Structure Type: RegField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 13;
      Name => "EneFirstInst[n]",
      RegMem => "RegField",
      Description => "First macro pointer for a header, valid in case the processing has hit TTL",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Status",
      UsedBy => "ene",
    },
  },
  EneClusterDebugWatermark => { #Structure Type: Reg;
    Name => "EneClusterDebugWatermark",
    RegMem => "Reg",
    Address => "149", # Excel Formula: =calc_reg_address(C17,A17,G17)
    Description => "Watermark for debug",
    Width => "4", # Excel Formula: =calc_reg_width(E20:E20,F20)
    Type => "ReadOnly",
    MaxHeaderCountInInputFifo => { #Structure Type: RegField;
      Name => "MaxHeaderCountInInputFifo",
      RegMem => "RegField",
      Description => "Maximum number of headers in the incoming cluster fifo",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "MaxWmk",
      UsedBy => "ene",
    },
  },
  EneWordTtl_r => { #Structure Type: Reg;
    Name => "EneWordTtl_r",
    RegMem => "Reg",
    Address => "14A", # Excel Formula: =calc_reg_address(C19,A19,G19)
    Description => "Maximum number of instruction allowed per word in the ENE. 
When a word has reached the maximum number allowed, the ENE stops processing it.",
    Width => "8", # Excel Formula: =calc_reg_width(E22:E22,F22)
    Type => "Config",
    EneWordTtl => { #Structure Type: RegField;
      Name => "EneWordTtl",
      RegMem => "RegField",
      Description => "Maximum number of instruction.
Minimum Value: 5
Maximum value: 255",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F21,E22,TRUE)
      Type => "Config",
      UsedBy => "ene",
      DefaultValue => "hFF",
      DefaultSvConstraint => "h1",
    },
  },
  Ene0MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "100000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "0",
    MemLogicalWidth => "46",
    Ene0DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene0DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene0ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene0ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene0LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene0LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene0LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene0LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene0StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene0StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene0StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene0Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene1MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "200000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "1",
    MemLogicalWidth => "46",
    Ene1DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene1DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene1ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene1ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene1LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene1LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene1LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene1LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene1StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene1StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene1StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene1Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene2MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "300000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "2",
    MemLogicalWidth => "46",
    Ene2DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene2DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene2ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene2ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene2LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene2LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene2LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene2LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene2StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene2StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene2StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene2Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene3MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "400000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "3",
    MemLogicalWidth => "46",
    Ene3DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene3DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene3ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene3ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene3LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene3LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene3LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene3LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene3StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene3StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene3StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene3Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene4MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "500000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "4",
    MemLogicalWidth => "46",
    Ene4DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene4DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene4ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene4ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene4LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene4LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene4LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene4LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene4StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene4StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene4StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene4Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene5MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "600000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "5",
    MemLogicalWidth => "46",
    Ene5DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene5DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene5ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene5ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene5LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene5LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene5LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene5LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene5StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene5StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene5StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene5Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene6MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "700000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "6",
    MemLogicalWidth => "46",
    Ene6DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene6DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene6ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene6ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene6LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene6LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene6LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene6LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene6StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene6StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene6StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene6Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene7MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "800000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "7",
    MemLogicalWidth => "46",
    Ene7DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene7DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene7ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene7ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene7LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene7LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene7LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene7LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene7StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene7StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene7StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene7Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene8MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "900000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "8",
    MemLogicalWidth => "46",
    Ene8DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene8DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene8ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene8ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene8LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene8LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene8LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene8LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene8StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene8StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene8StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene8Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene9MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "9",
    MemLogicalWidth => "46",
    Ene9DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene9DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene9ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene9ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene9LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene9LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene9LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene9LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene9StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene9StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene9StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene9Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene10MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "10",
    MemLogicalWidth => "46",
    Ene10DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene10DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene10ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene10ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene10LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene10LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene10LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene10LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene10StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene10StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene10StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene10Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene11MacroMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemory",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Holds the instructions of the encapsulation macros
Instruction format for Push to Header/Scratchpad instructions",
    Width => "53", # Excel Formula: =calc_mem_width(E24:E35,M23,F35,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "11",
    MemLogicalWidth => "46",
    Ene11DataFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidth",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Ene11DataFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the Data FS when AttrOffSel equals 0.  in nibbles",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F24,E25)
    },
    Ene11ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F25,E26)
    },
    Ene11ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F26,E27)
    },
    Ene11LeftShiftSizeFsWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsWidth",
      RegMem => "MemField",
      Description => "The width used in the lft shift size FS in bits",
      Width => "3",
      Position => "25:23", # Excel Formula: =calc_position(F27,E28)
    },
    Ene11LeftShiftSizeFsOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSizeFsOffset",
      RegMem => "MemField",
      Description => "The offset used in the lft shift size FS in nibbles",
      Width => "8",
      Position => "33:26", # Excel Formula: =calc_position(F28,E29)
    },
    Ene11LeftShiftFsSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftFsSize",
      RegMem => "MemField",
      Description => "amount of bytes to shift the header to the left in bytes",
      Width => "4",
      Position => "37:34", # Excel Formula: =calc_position(F29,E30)
    },
    Ene11LeftShiftSel => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]LeftShiftSel",
      RegMem => "MemField",
      Description => "The source for the left shift amount applied on the header can be the instruction or the NPPD.
0: Left shift amount is determined by the instruction
1: Left shift amount is determined by the NPPD",
      Width => "1",
      Position => "38", # Excel Formula: =calc_position(F30,E31)
    },
    Ene11StoreEncapSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSize",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F31,E32)
    },
    Ene11StoreCsCommand => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommand",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F32,E33)
    },
    Ene11StartNextMacro => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacro",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F33,E34)
    },
    Ene11Op => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]Op",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F34,E35)
    },
  },
  Ene0MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C23,A23,G36,L36)
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "0",
    MemLogicalWidth => "46",
    Ene0DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene0Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene0SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene0StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene0StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene0StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene0OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene1MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "200000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "1",
    MemLogicalWidth => "46",
    Ene1DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene1Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene1SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene1StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene1StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene1StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene1OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene2MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "300000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "2",
    MemLogicalWidth => "46",
    Ene2DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene2Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene2SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene2StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene2StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene2StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene2OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene3MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "400000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "3",
    MemLogicalWidth => "46",
    Ene3DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene3Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene3SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene3StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene3StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene3StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene3OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene4MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "500000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "4",
    MemLogicalWidth => "46",
    Ene4DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene4Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene4SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene4StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene4StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene4StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene4OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene5MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "600000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "5",
    MemLogicalWidth => "46",
    Ene5DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene5Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene5SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene5StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene5StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene5StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene5OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene6MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "700000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "6",
    MemLogicalWidth => "46",
    Ene6DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene6Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene6SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene6StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene6StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene6StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene6OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene7MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "800000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "7",
    MemLogicalWidth => "46",
    Ene7DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene7Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene7SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene7StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene7StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene7StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene7OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene8MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "900000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "8",
    MemLogicalWidth => "46",
    Ene8DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene8Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene8SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene8StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene8StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene8StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene8OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene9MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "9",
    MemLogicalWidth => "46",
    Ene9DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene9Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene9SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene9StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene9StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene9StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene9OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene10MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "10",
    MemLogicalWidth => "46",
    Ene10DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene10Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene10SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene10StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene10StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene10StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene10OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene11MacroMemoryConst => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConst",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Instruction format for Push Const to Header Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E37:E43,M36,F43,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "11",
    MemLogicalWidth => "46",
    Ene11DataFsWidthConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthConst",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
    Ene11Const => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]Const",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word. Const must come in a byte resolution.",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F37,E38)
    },
    Ene11SpareConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]SpareConst",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F38,E39)
      DocName => "Ene[n]ReservedConst",
    },
    Ene11StoreEncapSizeConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConst",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F39,E40)
    },
    Ene11StoreCsCommandConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConst",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
    },
    Ene11StartNextMacroConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConst",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F41,E42)
    },
    Ene11OpConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]OpConst",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F42,E43)
    },
  },
  Ene0MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C23,A23,G44,L44)
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "0",
    MemLogicalWidth => "46",
    Ene0DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene0Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene0ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene0ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene0Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene0StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene0StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene0StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene0OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene1MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "200000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "1",
    MemLogicalWidth => "46",
    Ene1DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene1Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene1ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene1Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene1StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene1StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene1StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene1OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene2MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "300000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "2",
    MemLogicalWidth => "46",
    Ene2DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene2Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene2ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene2Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene2StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene2StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene2StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene2OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene3MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "400000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "3",
    MemLogicalWidth => "46",
    Ene3DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene3Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene3ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene3ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene3Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene3StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene3StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene3StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene3OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene4MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "500000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "4",
    MemLogicalWidth => "46",
    Ene4DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene4Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene4ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene4ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene4Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene4StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene4StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene4StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene4OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene5MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "600000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "5",
    MemLogicalWidth => "46",
    Ene5DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene5Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene5ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene5ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene5Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene5StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene5StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene5StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene5OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene6MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "700000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "6",
    MemLogicalWidth => "46",
    Ene6DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene6Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene6ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene6ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene6Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene6StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene6StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene6StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene6OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene7MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "800000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "7",
    MemLogicalWidth => "46",
    Ene7DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene7Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene7ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene7ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene7Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene7StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene7StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene7StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene7OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene8MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "900000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "8",
    MemLogicalWidth => "46",
    Ene8DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene8Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene8ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene8ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene8Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene8StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene8StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene8StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene8OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene9MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "9",
    MemLogicalWidth => "46",
    Ene9DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene9Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene9ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene9ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene9Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene9StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene9StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene9StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene9OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene10MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "10",
    MemLogicalWidth => "46",
    Ene10DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene10Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene10ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene10ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene10Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene10StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene10StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene10StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene10OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene11MacroMemoryConstToSp => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryConstToSp",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Instruction format for Push Const to Scratchpad Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E45:E53,M44,F53,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "11",
    MemLogicalWidth => "46",
    Ene11DataWidthConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]DataWidthConstToSp",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Ene11Spare1ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1ConstToSp",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F45,E46)
      DocName => "Ene[n]Reserved1ConstToSp",
    },
    Ene11ScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F46,E47)
    },
    Ene11ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]ConstToSp",
      RegMem => "MemField",
      Description => "Value to be inserted to the sop word.",
      Width => "16",
      Position => "35:20", # Excel Formula: =calc_position(F47,E48)
    },
    Ene11Spare2ConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2ConstToSp",
      RegMem => "MemField",
      Description => "reserved",
      Width => "3",
      Position => "38:36", # Excel Formula: =calc_position(F48,E49)
      DocName => "Ene[n]Reserved2ConstToSp",
    },
    Ene11StoreEncapSizeConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeConstToSp",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F49,E50)
    },
    Ene11StoreCsCommandConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandConstToSp",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F50,E51)
    },
    Ene11StartNextMacroConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroConstToSp",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F51,E52)
    },
    Ene11OpConstToSp => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]OpConstToSp",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F52,E53)
    },
  },
  Ene0MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C23,A23,G54,L54)
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "0",
    MemLogicalWidth => "46",
    Ene0DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene0PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene0PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene0Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene0ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene0Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene0StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene0StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene0StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene0OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene1MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "200000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "1",
    MemLogicalWidth => "46",
    Ene1DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene1PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene1PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene1Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene1ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene1Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene1StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene1StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene1StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene1OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene2MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "300000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "2",
    MemLogicalWidth => "46",
    Ene2DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene2PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene2PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene2Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene2ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene2Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene2StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene2StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene2StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene2OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene3MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "400000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "3",
    MemLogicalWidth => "46",
    Ene3DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene3PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene3PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene3Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene3ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene3Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene3StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene3StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene3StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene3OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene4MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "500000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "4",
    MemLogicalWidth => "46",
    Ene4DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene4PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene4PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene4Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene4ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene4Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene4StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene4StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene4StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene4OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene5MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "600000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "5",
    MemLogicalWidth => "46",
    Ene5DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene5PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene5PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene5Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene5ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene5Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene5StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene5StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene5StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene5OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene6MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "700000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "6",
    MemLogicalWidth => "46",
    Ene6DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene6PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene6PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene6Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene6ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene6Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene6StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene6StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene6StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene6OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene7MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "800000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "7",
    MemLogicalWidth => "46",
    Ene7DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene7PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene7PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene7Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene7ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene7Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene7StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene7StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene7StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene7OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene8MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "900000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "8",
    MemLogicalWidth => "46",
    Ene8DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene8PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene8PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene8Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene8ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene8Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene8StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene8StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene8StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene8OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene9MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "9",
    MemLogicalWidth => "46",
    Ene9DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene9PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene9PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene9Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene9ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene9Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene9StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene9StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene9StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene9OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene10MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "10",
    MemLogicalWidth => "46",
    Ene10DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene10PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene10PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene10Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene10ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene10Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene10StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene10StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene10StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene10OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene11MacroMemoryPktSz => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPktSz",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Instruction format for Push Packet Size Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E55:E64,M54,F64,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "11",
    MemLogicalWidth => "46",
    Ene11DataFsWidthPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthPktSz",
      RegMem => "MemField",
      Description => "Stamping of packet size on the header can be partial or full value.
1: Partial packet size - only the lower half of value
2: Full packet size - two bytes",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
    Ene11PktSzAdditionalConst => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzAdditionalConst",
      RegMem => "MemField",
      Description => "Constant to be added to the packet size before stamping it over the packet-header",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F55,E56)
    },
    Ene11PktSzPushTarget => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]PktSzPushTarget",
      RegMem => "MemField",
      Description => "Write destination
0: Push to header
1: Push to scratchpad",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F56,E57)
    },
    Ene11Spare1PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]Spare1PktSz",
      RegMem => "MemField",
      Description => "reserved",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F57,E58)
      DocName => "Ene[n]Reserved1PktSz",
    },
    Ene11ScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]ScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift rights the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F58,E59)
    },
    Ene11Spare2PktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]Spare2PktSz",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "16",
      Position => "38:23", # Excel Formula: =calc_position(F59,E60)
      DocName => "Ene[n]Reserved2PktSz",
    },
    Ene11StoreEncapSizePktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePktSz",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F60,E61)
    },
    Ene11StoreCsCommandPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPktSz",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F61,E62)
    },
    Ene11StartNextMacroPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPktSz",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F62,E63)
    },
    Ene11OpPktSz => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]OpPktSz",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F63,E64)
    },
  },
  Ene0MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C23,A23,G65,L65)
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "0",
    MemLogicalWidth => "46",
    Ene0DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene0JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene0MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene0MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene0SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene0StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene0StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene0StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene0OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene1MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "200000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "1",
    MemLogicalWidth => "46",
    Ene1DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene1JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene1MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene1MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene1SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene1StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene1StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene1StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene1OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene2MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "300000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "2",
    MemLogicalWidth => "46",
    Ene2DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene2JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene2MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene2MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene2SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene2StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene2StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene2StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene2OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene3MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "400000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "3",
    MemLogicalWidth => "46",
    Ene3DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene3JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene3MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene3MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene3SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene3StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene3StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene3StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene3OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene4MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "500000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "4",
    MemLogicalWidth => "46",
    Ene4DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene4JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene4MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene4MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene4SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene4StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene4StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene4StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene4OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene5MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "600000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "5",
    MemLogicalWidth => "46",
    Ene5DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene5JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene5MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene5MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene5SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene5StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene5StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene5StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene5OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene6MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "700000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "6",
    MemLogicalWidth => "46",
    Ene6DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene6JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene6MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene6MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene6SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene6StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene6StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene6StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene6OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene7MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "800000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "7",
    MemLogicalWidth => "46",
    Ene7DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene7JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene7MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene7MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene7SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene7StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene7StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene7StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene7OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene8MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "900000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "8",
    MemLogicalWidth => "46",
    Ene8DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene8JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene8MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene8MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene8SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene8StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene8StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene8StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene8OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene9MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "9",
    MemLogicalWidth => "46",
    Ene9DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene9JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene9MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene9MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene9SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene9StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene9StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene9StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene9OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene10MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "10",
    MemLogicalWidth => "46",
    Ene10DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene10JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene10MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene10MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene10SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene10StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene10StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene10StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene10OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene11MacroMemoryJump => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJump",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Instruction format for Jump Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E66:E74,M65,F74,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "11",
    MemLogicalWidth => "46",
    Ene11DataFsWidthJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]DataFsWidthJump",
      RegMem => "MemField",
      Description => "Width of data to select from the pkt_attr/scratchpad bus  in bytes (also uses to shift right the header)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F65,E66,TRUE)
    },
    Ene11JumpDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]JumpDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to push into the program counter.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F66,E67)
    },
    Ene11MacroCounterValue => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValue",
      RegMem => "MemField",
      Description => "New program-counter-value. Used if program-counter-valid is set",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F67,E68)
    },
    Ene11MacroCounterValid => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]MacroCounterValid",
      RegMem => "MemField",
      Description => "If set, new program counter is taken from program-counter-value, else from packet-attributes",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F68,E69)
    },
    Ene11SpareJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJump",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "18",
      Position => "38:21", # Excel Formula: =calc_position(F69,E70)
      DocName => "Ene[n]ReservedJump",
    },
    Ene11StoreEncapSizeJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJump",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F70,E71)
    },
    Ene11StoreCsCommandJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJump",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F71,E72)
    },
    Ene11StartNextMacroJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJump",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F72,E73)
    },
    Ene11OpJump => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]OpJump",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F73,E74)
    },
  },
  Ene0MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C23,A23,G75,L75)
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "0",
    MemLogicalWidth => "46",
    Ene0JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene0JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene0SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene0StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene0StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene0StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene0OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene1MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "200000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "1",
    MemLogicalWidth => "46",
    Ene1JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene1JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene1SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene1StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene1StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene1StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene1OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene2MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "300000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "2",
    MemLogicalWidth => "46",
    Ene2JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene2JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene2SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene2StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene2StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene2StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene2OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene3MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "400000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "3",
    MemLogicalWidth => "46",
    Ene3JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene3JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene3SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene3StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene3StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene3StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene3OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene4MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "500000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "4",
    MemLogicalWidth => "46",
    Ene4JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene4JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene4SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene4StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene4StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene4StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene4OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene5MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "600000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "5",
    MemLogicalWidth => "46",
    Ene5JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene5JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene5SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene5StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene5StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene5StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene5OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene6MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "700000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "6",
    MemLogicalWidth => "46",
    Ene6JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene6JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene6SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene6StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene6StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene6StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene6OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene7MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "800000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "7",
    MemLogicalWidth => "46",
    Ene7JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene7JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene7SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene7StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene7StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene7StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene7OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene8MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "900000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "8",
    MemLogicalWidth => "46",
    Ene8JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene8JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene8SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene8StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene8StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene8StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene8OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene9MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "9",
    MemLogicalWidth => "46",
    Ene9JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene9JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene9SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene9StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene9StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene9StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene9OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene10MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "10",
    MemLogicalWidth => "46",
    Ene10JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene10JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene10SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene10StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene10StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene10StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene10OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene11MacroMemoryJumpTable => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryJumpTable",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Instruction format for Jump Table Instruction",
    Width => "53", # Excel Formula: =calc_mem_width(E76:E82,M75,F82,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "11",
    MemLogicalWidth => "46",
    Ene11JumpTableOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableOffsetWidth",
      RegMem => "MemField",
      Description => "Width of jump offset in bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    Ene11JumpTableDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]JumpTableDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the data to be added to program-counter",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F76,E77)
    },
    Ene11SpareJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]SpareJumpTable",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "27",
      Position => "38:12", # Excel Formula: =calc_position(F77,E78)
      DocName => "Ene[n]ReservedJumpTable",
    },
    Ene11StoreEncapSizeJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeJumpTable",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F78,E79)
    },
    Ene11StoreCsCommandJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandJumpTable",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F79,E80)
    },
    Ene11StartNextMacroJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroJumpTable",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F80,E81)
    },
    Ene11OpJumpTable => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]OpJumpTable",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F81,E82)
    },
  },
  Ene0MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C23,A23,G83,L83)
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "0",
    MemLogicalWidth => "46",
    Ene0PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene0PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene0PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene0PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene0PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene0PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene0PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene0PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene0StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene0StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene0StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene0OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene1MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "200000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "1",
    MemLogicalWidth => "46",
    Ene1PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene1PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene1PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene1PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene1PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene1PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene1PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene1PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene1StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene1StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene1StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene1OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene2MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "300000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "2",
    MemLogicalWidth => "46",
    Ene2PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene2PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene2PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene2PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene2PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene2PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene2PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene2PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene2StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene2StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene2StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene2OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene3MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "400000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "3",
    MemLogicalWidth => "46",
    Ene3PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene3PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene3PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene3PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene3PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene3PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene3PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene3PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene3StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene3StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene3StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene3OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene4MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "500000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "4",
    MemLogicalWidth => "46",
    Ene4PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene4PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene4PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene4PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene4PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene4PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene4PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene4PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene4StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene4StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene4StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene4OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene5MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "600000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "5",
    MemLogicalWidth => "46",
    Ene5PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene5PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene5PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene5PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene5PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene5PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene5PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene5PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene5StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene5StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene5StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene5OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene6MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "700000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "6",
    MemLogicalWidth => "46",
    Ene6PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene6PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene6PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene6PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene6PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene6PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene6PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene6PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene6StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene6StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene6StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene6OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene7MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "800000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "7",
    MemLogicalWidth => "46",
    Ene7PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene7PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene7PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene7PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene7PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene7PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene7PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene7PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene7StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene7StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene7StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene7OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene8MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "900000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "8",
    MemLogicalWidth => "46",
    Ene8PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene8PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene8PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene8PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene8PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene8PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene8PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene8PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene8StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene8StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene8StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene8OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene9MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "9",
    MemLogicalWidth => "46",
    Ene9PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene9PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene9PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene9PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene9PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene9PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene9PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene9PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene9StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene9StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene9StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene9OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene10MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "10",
    MemLogicalWidth => "46",
    Ene10PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene10PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene10PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene10PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene10PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene10PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene10PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene10PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene10StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene10StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene10StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene10OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene11MacroMemoryPushSpFromMem => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryPushSpFromMem",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Instruction format for Push To Scratchpad from Memory",
    Width => "53", # Excel Formula: =calc_mem_width(E84:E95,M83,F95,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "11",
    MemLogicalWidth => "46",
    Ene11PushSpMemOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the pointer within the logical table.
Applied after shifting left the data selected by the F.S.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F83,E84,TRUE)
    },
    Ene11PushSpMemDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the pointer within the logical table. The data is extracted from the NPPD. The F.S always takes 3 nibbles for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F84,E85)
    },
    Ene11PushSpMemScratchpadPushSize => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadPushSize",
      RegMem => "MemField",
      Description => "Number of bytes (counted from the LSB position) to be pushed into the scratchpad register.",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F85,E86)
    },
    Ene11PushSpMemScratchpadDataShift => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemScratchpadDataShift",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data that does in the scratchpad",
      Width => "3",
      Position => "22:20", # Excel Formula: =calc_position(F86,E87)
    },
    Ene11PushSpMemLogicalPointerShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalPointerShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the data from the F.S before selecting the width of the data.
Maximum Value: 3",
      Width => "2",
      Position => "24:23", # Excel Formula: =calc_position(F87,E88)
    },
    Ene11PushSpMemLogicalTableBaseOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableBaseOffset",
      RegMem => "MemField",
      Description => "Offset to the beginning of the logical table.
Assignment to logical table is done in a resolution of a line (one line cannot be shared by two logical tables)",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F88,E89)
    },
    Ene11PushSpMemLogicalTableType => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemLogicalTableType",
      RegMem => "MemField",
      Description => "Type (Size) of result returned from the Table
00: 128 bit
01: 64 bit
10: 32 bit",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F89,E90)
    },
    Ene11PushSpMemSpare => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]PushSpMemSpare",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "4",
      Position => "38:35", # Excel Formula: =calc_position(F90,E91)
    },
    Ene11StoreEncapSizePushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizePushSpMem",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F91,E92)
    },
    Ene11StoreCsCommandPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandPushSpMem",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F92,E93)
    },
    Ene11StartNextMacroPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroPushSpMem",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F93,E94)
    },
    Ene11OpPushSpMem => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]OpPushSpMem",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F94,E95)
    },
  },
  Ene0MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C23,A23,G96,L96)
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "0",
    MemLogicalWidth => "46",
    Ene0IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene0IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene0IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene0IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene0IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene0StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene0StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene0StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene0OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene1MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "200000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "1",
    MemLogicalWidth => "46",
    Ene1IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene1IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene1IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene1IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene1IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene1StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene1StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene1StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene1OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene2MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "300000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "2",
    MemLogicalWidth => "46",
    Ene2IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene2IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene2IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene2IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene2IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene2StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene2StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene2StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene2OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene3MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "400000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "3",
    MemLogicalWidth => "46",
    Ene3IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene3IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene3IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene3IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene3IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene3StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene3StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene3StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene3OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene4MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "500000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "4",
    MemLogicalWidth => "46",
    Ene4IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene4IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene4IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene4IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene4IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene4StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene4StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene4StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene4OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene5MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "600000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "5",
    MemLogicalWidth => "46",
    Ene5IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene5IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene5IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene5IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene5IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene5StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene5StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene5StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene5OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene6MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "700000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "6",
    MemLogicalWidth => "46",
    Ene6IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene6IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene6IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene6IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene6IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene6StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene6StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene6StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene6OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene7MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "800000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "7",
    MemLogicalWidth => "46",
    Ene7IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene7IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene7IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene7IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene7IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene7StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene7StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene7StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene7OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene8MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "900000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "8",
    MemLogicalWidth => "46",
    Ene8IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene8IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene8IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene8IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene8IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene8StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene8StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene8StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene8OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene9MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "9",
    MemLogicalWidth => "46",
    Ene9IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene9IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene9IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene9IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene9IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene9StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene9StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene9StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene9OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene10MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "10",
    MemLogicalWidth => "46",
    Ene10IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene10IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene10IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene10IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene10IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene10StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene10StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene10StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene10OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene11MacroMemoryIgnoreSnm => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
    Name => "Ene[12]MacroMemoryIgnoreSnm",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Instruction format for Ignore Start Next Macro",
    Width => "53", # Excel Formula: =calc_mem_width(E97:E105,M96,F105,-1)
    Type => "DocOnly",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    ArrayLength => "12",
    ArrayIndex => "11",
    MemLogicalWidth => "46",
    Ene11IgnoreSnmOffsetWidth => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmOffsetWidth",
      RegMem => "MemField",
      Description => "Width in bits of the number of exit points to ignore.
Applied after shifting left the data selected by the F.S.
Max allowed value: 3",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    Ene11IgnoreSnmDataOffset => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataOffset",
      RegMem => "MemField",
      Description => "The offset (in bytes) of the number of exit points to ignore in the macro. The data is extracted from the NPPD. The F.S always takes a Nibble for this instruction.",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F97,E98)
    },
    Ene11IgnoreSnmSpare0 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare0",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "8",
      Position => "19:12", # Excel Formula: =calc_position(F98,E99)
      DocName => "Ene[n]Reserved0SnmSpare",
    },
    Ene11IgnoreSnmDataShiftLeft => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmDataShiftLeft",
      RegMem => "MemField",
      Description => "Number of bits to shift left the Nibble selected from the F.S.
Maximum value allowed: 3",
      Width => "2",
      Position => "21:20", # Excel Formula: =calc_position(F99,E100)
    },
    Ene11IgnoreSnmSpare1 => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]IgnoreSnmSpare1",
      RegMem => "MemField",
      Description => "Reserved",
      Width => "17",
      Position => "38:22", # Excel Formula: =calc_position(F100,E101)
      DocName => "Ene[n]Reserved1SnmSpare",
    },
    Ene11StoreEncapSizeIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreEncapSizeIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the size of first and second encapsulations",
      Width => "1",
      Position => "39", # Excel Formula: =calc_position(F101,E102)
    },
    Ene11StoreCsCommandIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StoreCsCommandIgnoreSnm",
      RegMem => "MemField",
      Description => "Marks the location of the IPv4 for check sum calculation",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F102,E103)
    },
    Ene11StartNextMacroIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]StartNextMacroIgnoreSnm",
      RegMem => "MemField",
      Description => "Initiate loading of an address of a new macro to the macro counter",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F103,E104)
    },
    Ene11OpIgnoreSnm => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]OpIgnoreSnm",
      RegMem => "MemField",
      Description => "ENE op code
0000: NOP
0001: Push to Scratchpad
0010: Push Packet Size
0011: Push To Header
0100: push Const To Header
0101: Push Const To Scratchpad
0110: Jump
0111: Jump Table
1000: Ignore Start Next Macro
1001: Push To Scratchpad From Memory",
      Width => "4",
      Position => "45:42", # Excel Formula: =calc_position(F104,E105)
    },
  },
  Ene0DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "D00000", # Excel Formula: =calc_mem_address(C23,A23,G106,L106)
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "0",
    MemLogicalWidth => "128",
    Ene0DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene1DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "E00000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "1",
    MemLogicalWidth => "128",
    Ene1DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene2DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "F00000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "2",
    MemLogicalWidth => "128",
    Ene2DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 2; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene3DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "1000000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "3",
    MemLogicalWidth => "128",
    Ene3DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 3; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene4DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "1100000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "4",
    MemLogicalWidth => "128",
    Ene4DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 4; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene5DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "1200000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "5",
    MemLogicalWidth => "128",
    Ene5DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 5; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene6DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "1300000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "6",
    MemLogicalWidth => "128",
    Ene6DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 6; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene7DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "1400000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "7",
    MemLogicalWidth => "128",
    Ene7DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 7; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene8DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "1500000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "8",
    MemLogicalWidth => "128",
    Ene8DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 8; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene9DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "1600000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "9",
    MemLogicalWidth => "128",
    Ene9DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 9; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene10DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "1700000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "10",
    MemLogicalWidth => "128",
    Ene10DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 10; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
  Ene11DataMemory => { #Structure Type: Mem; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
    Name => "Ene[12]DataMemory",
    RegMem => "Mem",
    Address => "1800000",
    Description => "Holds commonly used big data for the ENE.
Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    Width => "137", # Excel Formula: =calc_mem_width(E107:E107,M106,F107,-1)
    Type => "Config",
    UsedBy => "ene",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "12",
    ArrayIndex => "11",
    MemLogicalWidth => "128",
    Ene11DataMemoryLine => { #Structure Type: MemField; ArrayLength: 12; ArrayIndex: 11; ArrayLocationInName: 4;
      Name => "Ene[n]DataMemoryLine",
      RegMem => "MemField",
      Description => "Data Memory line.
Type 00 holds one entry of 128 bits.
Type 01 holds two entries of 64 bits.
Type 10 holds four entries of 32 bits.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F106,E107,TRUE)
    },
  },
};
