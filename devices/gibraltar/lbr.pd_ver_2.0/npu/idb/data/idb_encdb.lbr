$block{idb_encdb} = {
  Defines_db => "../verilog/sdb_idb_defines.v,../../global/npu_db_defines.v",
  ProjectName => "Gibraltar",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "2",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    EmResponseInterruptSummary => { #Structure Type: RegField;
      Name => "EmResponseInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, EmResponseInterrupt has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt test register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "24",
    Type => "Config",
    Slice0_DipIndexMappingTableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice0_DipIndexMappingTableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice1_DipIndexMappingTableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice1_DipIndexMappingTableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice0_L3Dlp1TableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice0_L3Dlp1TableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice1_L3Dlp1TableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice1_L3Dlp1TableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice0_Direct0NhTableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice0_Direct0NhTableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice1_Direct0NhTableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice1_Direct0NhTableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice0_Direct1AdjTableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice0_Direct1AdjTableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice1_Direct1AdjTableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice1_Direct1AdjTableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SmallEncTableVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SmallEncTableVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SmallEncTableVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SmallEncTableVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    L3Dlp0TableVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    L3Dlp0TableVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    L3Dlp0TableVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    L3Dlp0TableVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "24",
    Type => "Config",
    Slice0_DipIndexMappingTableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice0_DipIndexMappingTableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice1_DipIndexMappingTableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice1_DipIndexMappingTableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice0_L3Dlp1TableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice0_L3Dlp1TableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice1_L3Dlp1TableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice1_L3Dlp1TableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice0_Direct0NhTableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice0_Direct0NhTableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice1_Direct0NhTableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice1_Direct0NhTableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice0_Direct1AdjTableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice0_Direct1AdjTableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Slice1_Direct1AdjTableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Slice1_Direct1AdjTableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SmallEncTableVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SmallEncTableVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SmallEncTableVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SmallEncTableVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    L3Dlp0TableVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    L3Dlp0TableVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    L3Dlp0TableVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    L3Dlp0TableVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LargeEncVerifier7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "LargeEncVerifier7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "24",
    Type => "Config",
    Slice0_DipIndexMappingTableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Slice0_DipIndexMappingTableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice1_DipIndexMappingTableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Slice1_DipIndexMappingTableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice0_L3Dlp1TableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Slice0_L3Dlp1TableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice1_L3Dlp1TableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Slice1_L3Dlp1TableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice0_Direct0NhTableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Slice0_Direct0NhTableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice1_Direct0NhTableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Slice1_Direct0NhTableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice0_Direct1AdjTableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Slice0_Direct1AdjTableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice1_Direct1AdjTableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Slice1_Direct1AdjTableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SmallEncTableVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SmallEncTableVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SmallEncTableVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SmallEncTableVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    L3Dlp0TableVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    L3Dlp0TableVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    L3Dlp0TableVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    L3Dlp0TableVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "24",
    Type => "Config",
    Slice0_DipIndexMappingTableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Slice0_DipIndexMappingTableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice1_DipIndexMappingTableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Slice1_DipIndexMappingTableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice0_L3Dlp1TableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Slice0_L3Dlp1TableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice1_L3Dlp1TableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Slice1_L3Dlp1TableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice0_Direct0NhTableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Slice0_Direct0NhTableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice1_Direct0NhTableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Slice1_Direct0NhTableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice0_Direct1AdjTableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Slice0_Direct1AdjTableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Slice1_Direct1AdjTableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Slice1_Direct1AdjTableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SmallEncTableVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SmallEncTableVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SmallEncTableVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SmallEncTableVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    L3Dlp0TableVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    L3Dlp0TableVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    L3Dlp0TableVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    L3Dlp0TableVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LargeEncVerifier7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "LargeEncVerifier7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "24",
    Type => "ReadOnly",
    Slice0_DipIndexMappingTableErrInt => { #Structure Type: RegField;
      Name => "Slice0_DipIndexMappingTableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    Slice1_DipIndexMappingTableErrInt => { #Structure Type: RegField;
      Name => "Slice1_DipIndexMappingTableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    Slice0_L3Dlp1TableErrInt => { #Structure Type: RegField;
      Name => "Slice0_L3Dlp1TableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    Slice1_L3Dlp1TableErrInt => { #Structure Type: RegField;
      Name => "Slice1_L3Dlp1TableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    Slice0_Direct0NhTableErrInt => { #Structure Type: RegField;
      Name => "Slice0_Direct0NhTableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    Slice1_Direct0NhTableErrInt => { #Structure Type: RegField;
      Name => "Slice1_Direct0NhTableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    Slice0_Direct1AdjTableErrInt => { #Structure Type: RegField;
      Name => "Slice0_Direct1AdjTableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    Slice1_Direct1AdjTableErrInt => { #Structure Type: RegField;
      Name => "Slice1_Direct1AdjTableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    SmallEncTableVerifier0ErrInt => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
    SmallEncTableVerifier1ErrInt => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "9",
      Type => "Status",
      UsedBy => "SER",
    },
    SmallEncTableVerifier2ErrInt => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "10",
      Type => "Status",
      UsedBy => "SER",
    },
    SmallEncTableVerifier3ErrInt => { #Structure Type: RegField;
      Name => "SmallEncTableVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "11",
      Type => "Status",
      UsedBy => "SER",
    },
    L3Dlp0TableVerifier0ErrInt => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "12",
      Type => "Status",
      UsedBy => "SER",
    },
    L3Dlp0TableVerifier1ErrInt => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "13",
      Type => "Status",
      UsedBy => "SER",
    },
    L3Dlp0TableVerifier2ErrInt => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "14",
      Type => "Status",
      UsedBy => "SER",
    },
    L3Dlp0TableVerifier3ErrInt => { #Structure Type: RegField;
      Name => "L3Dlp0TableVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "15",
      Type => "Status",
      UsedBy => "SER",
    },
    LargeEncVerifier0ErrInt => { #Structure Type: RegField;
      Name => "LargeEncVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "16",
      Type => "Status",
      UsedBy => "SER",
    },
    LargeEncVerifier1ErrInt => { #Structure Type: RegField;
      Name => "LargeEncVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "17",
      Type => "Status",
      UsedBy => "SER",
    },
    LargeEncVerifier2ErrInt => { #Structure Type: RegField;
      Name => "LargeEncVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "18",
      Type => "Status",
      UsedBy => "SER",
    },
    LargeEncVerifier3ErrInt => { #Structure Type: RegField;
      Name => "LargeEncVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "19",
      Type => "Status",
      UsedBy => "SER",
    },
    LargeEncVerifier4ErrInt => { #Structure Type: RegField;
      Name => "LargeEncVerifier4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "20",
      Type => "Status",
      UsedBy => "SER",
    },
    LargeEncVerifier5ErrInt => { #Structure Type: RegField;
      Name => "LargeEncVerifier5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "21",
      Type => "Status",
      UsedBy => "SER",
    },
    LargeEncVerifier6ErrInt => { #Structure Type: RegField;
      Name => "LargeEncVerifier6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "22",
      Type => "Status",
      UsedBy => "SER",
    },
    LargeEncVerifier7ErrInt => { #Structure Type: RegField;
      Name => "LargeEncVerifier7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "23",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "16",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "14",
      Position => "13:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "15:14",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "6",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "5",
      Position => "4:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  TcamScanPeriodCfg => { #Structure Type: Reg; Skip Register;
    Name => "TcamScanPeriodCfg",
    RegMem => "Reg",
    Address => "3B",
    Description => "Configures period of TCAM scan for SER, set 0 to disable",
    Width => "32",
    Type => "Config",
    TcamScanPeriod => { #Structure Type: RegField;
      Name => "TcamScanPeriod",
      RegMem => "RegField",
      Description => "Configures period of TCAM scan for SER, set 0 to disable",
      Width => "32",
      Position => "31:0",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d120000000",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "73", # Excel Formula: =calc_reg_width(E25:E53,F53)
    Type => "Config",
    SACR1P_RME => { #Structure Type: RegField;
      Name => "SACR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACR1P_RM => { #Structure Type: RegField;
      Name => "SACR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RME => { #Structure Type: RegField;
      Name => "SACU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RM => { #Structure Type: RegField;
      Name => "SACU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "9:6", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RME => { #Structure Type: RegField;
      Name => "SADC1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RM => { #Structure Type: RegField;
      Name => "SADC1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "14:11", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEA => { #Structure Type: RegField;
      Name => "SADR2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "15", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMA => { #Structure Type: RegField;
      Name => "SADR2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "19:16", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEB => { #Structure Type: RegField;
      Name => "SADR2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMB => { #Structure Type: RegField;
      Name => "SADR2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "24:21", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEA => { #Structure Type: RegField;
      Name => "SADS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "25", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMA => { #Structure Type: RegField;
      Name => "SADS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "29:26", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEB => { #Structure Type: RegField;
      Name => "SADS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMB => { #Structure Type: RegField;
      Name => "SADS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "34:31", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RME => { #Structure Type: RegField;
      Name => "SASR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "35", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RM => { #Structure Type: RegField;
      Name => "SASR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "39:36", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RME => { #Structure Type: RegField;
      Name => "SASS1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RM => { #Structure Type: RegField;
      Name => "SASS1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "44:41", # Excel Formula: =calc_position(F41,E42)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEA => { #Structure Type: RegField;
      Name => "SASS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "45", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMA => { #Structure Type: RegField;
      Name => "SASS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "49:46", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEB => { #Structure Type: RegField;
      Name => "SASS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMB => { #Structure Type: RegField;
      Name => "SASS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "54:51", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RME => { #Structure Type: RegField;
      Name => "SASU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "55", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RM => { #Structure Type: RegField;
      Name => "SASU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "59:56", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RME => { #Structure Type: RegField;
      Name => "SADU1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "60", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RM => { #Structure Type: RegField;
      Name => "SADU1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "64:61", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RA => { #Structure Type: RegField;
      Name => "SADS2P_RA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Assist for Dual port",
      Width => "2",
      Position => "66:65", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_WA => { #Structure Type: RegField;
      Name => "SADU1P_WA",
      RegMem => "RegField",
      Description => "Write-Assist configuration for the SP SADU compiler",
      Width => "3",
      Position => "69:67", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d5",
    },
    SADU1P_WPULSE => { #Structure Type: RegField;
      Name => "SADU1P_WPULSE",
      RegMem => "RegField",
      Description => "Write-Assist-Pulse configuration for the SP SADU compiler",
      Width => "3",
      Position => "72:70", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E55:E55,F55)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "Spare register",
    Width => "128", # Excel Formula: =calc_reg_width(E57:E57,F57)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "Spare register ",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C56,A56,G56)
    Description => "PMRO controller configuration",
    Width => "32", # Excel Formula: =calc_reg_width(E59:E63,F63)
    Type => "Config",
    PmroRstn => { #Structure Type: RegField;
      Name => "PmroRstn",
      RegMem => "RegField",
      Description => "PMRO reset, active low",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroConfigEn => { #Structure Type: RegField;
      Name => "PmroConfigEn",
      RegMem => "RegField",
      Description => "Enable pmro configuration, when equals to 0 configurations are locked",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroStart => { #Structure Type: RegField;
      Name => "PmroStart",
      RegMem => "RegField",
      Description => "Start the pmro operation",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroRingEn => { #Structure Type: RegField;
      Name => "PmroRingEn",
      RegMem => "RegField",
      Description => "Determines which PMRO ring to activate, should be configured as one hot",
      Width => "7",
      Position => "9:3", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroCntPeriod => { #Structure Type: RegField;
      Name => "PmroCntPeriod",
      RegMem => "RegField",
      Description => "Number of core clock cycles on which PMRO is measured",
      Width => "22",
      Position => "31:10", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "h3FFFFF",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "PMRO status configuration",
    Width => "23", # Excel Formula: =calc_reg_width(E65:E66,F66)
    Type => "ReadOnly",
    PmroCountOut => { #Structure Type: RegField;
      Name => "PmroCountOut",
      RegMem => "RegField",
      Description => "The ring oscilator counter value.",
      Width => "22",
      Position => "21:0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Status",
      UsedBy => "pmro",
    },
    PmroDone => { #Structure Type: RegField;
      Name => "PmroDone",
      RegMem => "RegField",
      Description => "Pmro operation done, PmroCountOut is valid.",
      Width => "1",
      Position => "22", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "Mirror Bus configurations",
    Width => "11", # Excel Formula: =calc_reg_width(E68:E69,F69)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "Enable Mirror Bus",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F67,E68,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "Mirror Bus selector",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C67,A67,G67)
    Description => "Mirror Bus status result",
    Width => "32", # Excel Formula: =calc_reg_width(E71:E71,F71)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "Mirror Bus status result",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F70,E71,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C70,A70,G70)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E73:E73,F73)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  init_done_status_register => { #Structure Type: Reg;
    Name => "init_done_status_register",
    RegMem => "Reg",
    Address => "100",
    Description => "idb_init_done_status_reg",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "ReadOnly",
    init_done => { #Structure Type: RegField;
      Name => "init_done",
      RegMem => "RegField",
      Description => "idb_init_done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Status",
      UsedBy => "encdb",
    },
  },
  debug_data_bus_register => { #Structure Type: Reg;
    Name => "debug_data_bus_register",
    RegMem => "Reg",
    Address => "101", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "debug_data_bus_register",
    Width => "32", # Excel Formula: =calc_reg_width(E10:E10,F10)
    Type => "ReadOnly",
    debug_data_bus => { #Structure Type: RegField;
      Name => "debug_data_bus",
      RegMem => "RegField",
      Description => "debug_data_bus",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Status",
      UsedBy => "encdb",
    },
  },
  debug_data_select_register => { #Structure Type: Reg;
    Name => "debug_data_select_register",
    RegMem => "Reg",
    Address => "102", # Excel Formula: =calc_reg_address(C9,A9,G9)
    Description => "debug_data_select_register",
    Width => "10", # Excel Formula: =calc_reg_width(E12:E12,F12)
    Type => "Config",
    debug_data_select => { #Structure Type: RegField;
      Name => "debug_data_select",
      RegMem => "RegField",
      Description => "debug_data_select",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F11,E12,TRUE)
      Type => "Config",
      UsedBy => "encdb",
      DefaultValue => "d0",
    },
  },
  debug_fifos_water_marks_register0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 33;
    Name => "debug_fifos_water_marks_register[2]",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C11,A11,G11)
    Description => "WM storing the max amount of entries in FIFO/CBR in multiple places in the design (debug feature)",
    Width => "50", # Excel Formula: =calc_reg_width(E14:E22,F22)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    slice0_small_enc_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_small_enc_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice0_dip_index_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "11:6", # Excel Formula: =calc_position(F14,E15)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice0_dip_index_from_small_em_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_from_small_em_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "16:12", # Excel Formula: =calc_position(F15,E16)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice0_dip_index_from_large_em_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_from_large_em_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "21:17", # Excel Formula: =calc_position(F16,E17)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice0_l3_dlp1_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_l3_dlp1_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "27:22", # Excel Formula: =calc_position(F17,E18)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice0_direct0_from_dlp1_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_from_dlp1_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "32:28", # Excel Formula: =calc_position(F18,E19)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice0_direct0_from_dlp0_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_from_dlp0_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "37:33", # Excel Formula: =calc_position(F19,E20)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice0_direct0_nh_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_nh_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "43:38", # Excel Formula: =calc_position(F20,E21)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice0_direct1_adj_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_direct1_adj_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "49:44", # Excel Formula: =calc_position(F21,E22)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
  },
  debug_fifos_water_marks_register1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 33;
    Name => "debug_fifos_water_marks_register[2]",
    RegMem => "Reg",
    Address => "104",
    Description => "WM storing the max amount of entries in FIFO/CBR in multiple places in the design (debug feature)",
    Width => "50", # Excel Formula: =calc_reg_width(E14:E22,F22)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    slice1_small_enc_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_small_enc_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice1_dip_index_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "11:6", # Excel Formula: =calc_position(F14,E15)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice1_dip_index_from_small_em_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_from_small_em_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "16:12", # Excel Formula: =calc_position(F15,E16)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice1_dip_index_from_large_em_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_from_large_em_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "21:17", # Excel Formula: =calc_position(F16,E17)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice1_l3_dlp1_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_l3_dlp1_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "27:22", # Excel Formula: =calc_position(F17,E18)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice1_direct0_from_dlp1_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_from_dlp1_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "32:28", # Excel Formula: =calc_position(F18,E19)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice1_direct0_from_dlp0_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_from_dlp0_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "37:33", # Excel Formula: =calc_position(F19,E20)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice1_direct0_nh_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_nh_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "43:38", # Excel Formula: =calc_position(F20,E21)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
    slice1_direct1_adj_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_direct1_adj_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "49:44", # Excel Formula: =calc_position(F21,E22)
      Type => "MaxWmk",
      UsedBy => "encdb",
    },
  },
  encdb_tables_counters0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
    Name => "encdb_tables_counters[2]",
    RegMem => "Reg",
    Address => "105", # Excel Formula: =calc_reg_address(C13,A13,G13)
    Description => "WM storing the max amount of entries in FIFO/CBR in multiple places in the design (debug feature)",
    Width => "640", # Excel Formula: =calc_reg_width(E24:E33,F33)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    slice0_small_enc_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_small_enc_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F23,E24,TRUE)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_large_enc_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_large_enc_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F24,E25)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_dip_index_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "191:128", # Excel Formula: =calc_position(F25,E26)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_dip_index_from_small_em_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_from_small_em_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "255:192", # Excel Formula: =calc_position(F26,E27)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_dip_index_from_large_em_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_from_large_em_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "319:256", # Excel Formula: =calc_position(F27,E28)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_l3_dlp1_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_l3_dlp1_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "383:320", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_direct0_from_dlp1_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_from_dlp1_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "447:384", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_direct0_from_dlp0_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_from_dlp0_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "511:448", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_direct0_nh_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_nh_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "575:512", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_direct1_adj_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_direct1_adj_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "639:576", # Excel Formula: =calc_position(F32,E33)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  encdb_tables_counters1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
    Name => "encdb_tables_counters[2]",
    RegMem => "Reg",
    Address => "106",
    Description => "WM storing the max amount of entries in FIFO/CBR in multiple places in the design (debug feature)",
    Width => "640", # Excel Formula: =calc_reg_width(E24:E33,F33)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    slice1_small_enc_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_small_enc_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F23,E24,TRUE)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_large_enc_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_large_enc_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F24,E25)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_dip_index_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "191:128", # Excel Formula: =calc_position(F25,E26)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_dip_index_from_small_em_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_from_small_em_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "255:192", # Excel Formula: =calc_position(F26,E27)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_dip_index_from_large_em_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_dip_index_from_large_em_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "319:256", # Excel Formula: =calc_position(F27,E28)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_l3_dlp1_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_l3_dlp1_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "383:320", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_direct0_from_dlp1_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_from_dlp1_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "447:384", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_direct0_from_dlp0_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_from_dlp0_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "511:448", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_direct0_nh_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_direct0_nh_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "575:512", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_direct1_adj_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_direct1_adj_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "639:576", # Excel Formula: =calc_position(F32,E33)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  encdb_tables_miss_counters0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 27;
    Name => "encdb_tables_miss_counters[2]",
    RegMem => "Reg",
    Address => "107", # Excel Formula: =calc_reg_address(C23,A23,G23)
    Description => "WM storing the max amount of entries in FIFO/CBR in multiple places in the design (debug feature)",
    Width => "192", # Excel Formula: =calc_reg_width(E35:E37,F37)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    slice0_small_enc_miss_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_small_enc_miss_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_large_enc_miss_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_large_enc_miss_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F35,E36)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_l3_dlp0_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_l3_dlp0_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "191:128", # Excel Formula: =calc_position(F36,E37)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  encdb_tables_miss_counters1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 27;
    Name => "encdb_tables_miss_counters[2]",
    RegMem => "Reg",
    Address => "108",
    Description => "WM storing the max amount of entries in FIFO/CBR in multiple places in the design (debug feature)",
    Width => "192", # Excel Formula: =calc_reg_width(E35:E37,F37)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    slice1_small_enc_miss_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_small_enc_miss_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_large_enc_miss_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_large_enc_miss_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F35,E36)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_l3_dlp0_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_l3_dlp0_counter",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "64",
      Position => "191:128", # Excel Formula: =calc_position(F36,E37)
      Type => "Counter",
      UsedBy => "encdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  bubble_logic_counter_cfg => { #Structure Type: Reg;
    Name => "bubble_logic_counter_cfg",
    RegMem => "Reg",
    Address => "109", # Excel Formula: =calc_reg_address(C34,A34,G34)
    Description => "configuration_registers",
    Width => "26", # Excel Formula: =calc_reg_width(E39:E41,F41)
    Type => "Config",
    direct1_input_cbr_num_of_clks_before_forced_bubble_ordy => { #Structure Type: RegField;
      Name => "direct1_input_cbr_num_of_clks_before_forced_bubble_ordy",
      RegMem => "RegField",
      Description => "if cbr-fifo is ready and there was no pop for this-value of clks,bubble will be created for all the other sources to the direct tables.",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F38,E39,TRUE)
      Type => "Config",
      UsedBy => "encdb",
      DefaultValue => "d5",
    },
    direct1_input_cbr_num_of_clks_before_forced_bubble_above_th => { #Structure Type: RegField;
      Name => "direct1_input_cbr_num_of_clks_before_forced_bubble_above_th",
      RegMem => "RegField",
      Description => "if cbr-fifo is ready and there was no pop for this-value of clks,bubble will be created for all the other sources to the direct tables.",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "encdb",
      DefaultValue => "d1",
    },
    Direct1ToDirect0Threshold => { #Structure Type: RegField;
      Name => "Direct1ToDirect0Threshold",
      RegMem => "RegField",
      Width => "6",
      Position => "25:20", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "encdb",
      DefaultValue => "d3",
    },
  },
  SmallEncTable => { #Structure Type: Mem;
    Name => "SmallEncTable",
    RegMem => "Mem",
    Address => "100000",
    Description => "Small Encapsulation EM database",
    Width => "144", # Excel Formula: =calc_mem_width(E43:E43,M42,F43,-1)
    Type => "DocOnly",
    UsedBy => "encdb",
    MemEntries => "32768",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=42,SourceIdWidth=13,NumberOfBanks=4,NumberOfCamEntries=32,FlexibleKey=Enabled,NumberOfKeySizeOptions=2,KeySize2=26,NumberOfParallelBanks=4,2PMemory=Enabled,VerifierSampleReadBeforeProt=2,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=0,VrfReadActivityFactor=100,VrfDisableSameAddressErr=Enabled,VrfEnableNonCpuRdWrSameAddress=Enabled,VldWriteActivityFactor=0,VldReadActivityFactor=100",
    MemLogicalWidth => "144",
    payload => { #Structure Type: MemField;
      Name => "payload",
      RegMem => "MemField",
      Description => "Small-EM payload
when accessing DIP index table, 11 lsbs are the Index to the DIP-index-mapping-table (2b entry-select + 9b address)",
      Width => "144",
      Position => "143:0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Comments => "Key/result options:
42->104
26->120
",
    },
  },
  Slice0_DipIndexMappingTable => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
    Name => "Slice[2]_DipIndexMappingTable",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C42,A42,G44,L44)
    Description => "DIP-Index Mapping Database",
    Width => "138", # Excel Formula: =calc_mem_width(E45:E46,M44,F46,-1)
    Type => "Config",
    UsedBy => "encdb",
    MemEntries => "512", # Excel Formula: =2^9
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "129",
    Slice0_DipData => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Slice[n]_DipData",
      RegMem => "MemField",
      Description => "Dip index mapping payload",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Slice0_is_wide_entry => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Slice[n]_is_wide_entry",
      RegMem => "MemField",
      Description => "when set, entry is IPv6",
      Width => "1",
      Position => "128", # Excel Formula: =calc_position(F45,E46)
    },
  },
  Slice1_DipIndexMappingTable => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
    Name => "Slice[2]_DipIndexMappingTable",
    RegMem => "Mem",
    Address => "300000",
    Description => "DIP-Index Mapping Database",
    Width => "138", # Excel Formula: =calc_mem_width(E45:E46,M44,F46,-1)
    Type => "Config",
    UsedBy => "encdb",
    MemEntries => "512", # Excel Formula: =2^9
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "129",
    Slice1_DipData => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Slice[n]_DipData",
      RegMem => "MemField",
      Description => "Dip index mapping payload",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F44,E45,TRUE)
    },
    Slice1_is_wide_entry => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Slice[n]_is_wide_entry",
      RegMem => "MemField",
      Description => "when set, entry is IPv6",
      Width => "1",
      Position => "128", # Excel Formula: =calc_position(F45,E46)
    },
  },
  L3Dlp0Table => { #Structure Type: Mem;
    Name => "L3Dlp0Table",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C44,A44,G47,L47)
    Description => "L3-DLP Database",
    Width => "144", # Excel Formula: =calc_mem_width(E48:E48,M47,F48,-1)
    Type => "DocOnly",
    UsedBy => "encdb",
    MemEntries => "32768",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=32,SourceIdWidth=13,NumberOfBanks=4,NumberOfCamEntries=32,FlexibleKey=Enabled,NumberOfKeySizeOptions=2,KeySize2=16,NumberOfParallelBanks=4,2PMemory=Enabled,VerifierSampleReadBeforeProt=2,VerifierSamplePhysicalMem=1,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=0,VrfReadActivityFactor=100,VrfDisableSameAddressErr=Enabled,VrfEnableNonCpuRdWrSameAddress=Enabled,VldWriteActivityFactor=0,VldReadActivityFactor=100",
    MemLogicalWidth => "144",
    L3DlpPayload => { #Structure Type: MemField;
      Name => "L3DlpPayload",
      RegMem => "MemField",
      Description => "L3-DLP-Table-Payload
when accessing Direct-tables (0/1), 12 lsbs are the Index to the DIP-index-mapping-table ",
      Width => "144",
      Position => "143:0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Comments => "Key option:
16->142
32->126",
    },
  },
  Slice0_L3Dlp1Table => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
    Name => "Slice[2]_L3Dlp1Table",
    RegMem => "Mem",
    Address => "400000", # Excel Formula: =calc_mem_address(C44,A44,G49,L49)
    Description => "L3-DLP Database",
    Width => "170", # Excel Formula: =calc_mem_width(E50:E51,M49,F51,-1)
    Type => "Config",
    UsedBy => "encdb",
    MemEntries => "1024", # Excel Formula: =2^10
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "161",
    L3DlpPayload0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "L3DlpPayload[n]",
      RegMem => "MemField",
      Description => "L3-DLP-Table-Payload
when accessing Direct-tables (0/1), 12 lsbs are the Index to the DIP-index-mapping-table ",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F49,E50,TRUE)
    },
    is_wide_entry0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "is_wide_entry[n]",
      RegMem => "MemField",
      Description => "when set, entry is wide (120 bits), otherwise, entry contains two narrow entries (60 bits each)",
      Width => "1",
      Position => "160", # Excel Formula: =calc_position(F50,E51)
    },
  },
  Slice1_L3Dlp1Table => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
    Name => "Slice[2]_L3Dlp1Table",
    RegMem => "Mem",
    Address => "500000",
    Description => "L3-DLP Database",
    Width => "170", # Excel Formula: =calc_mem_width(E50:E51,M49,F51,-1)
    Type => "Config",
    UsedBy => "encdb",
    MemEntries => "1024", # Excel Formula: =2^10
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "161",
    L3DlpPayload1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 13;
      Name => "L3DlpPayload[n]",
      RegMem => "MemField",
      Description => "L3-DLP-Table-Payload
when accessing Direct-tables (0/1), 12 lsbs are the Index to the DIP-index-mapping-table ",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F49,E50,TRUE)
    },
    is_wide_entry1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "is_wide_entry[n]",
      RegMem => "MemField",
      Description => "when set, entry is wide (120 bits), otherwise, entry contains two narrow entries (60 bits each)",
      Width => "1",
      Position => "160", # Excel Formula: =calc_position(F50,E51)
    },
  },
  Slice0_Direct0NhTable => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
    Name => "Slice[2]_Direct0NhTable",
    RegMem => "Mem",
    Address => "600000", # Excel Formula: =calc_mem_address(C49,A49,G52,L52)
    Description => "Next-hop-database (Direct-0 Table)",
    Width => "169", # Excel Formula: =calc_mem_width(E53:E53,M52,F53,-1)
    Type => "Config",
    UsedBy => "encdb",
    MemEntries => "6144",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "160",
    Slice0_NhData => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Slice[n]_NhData",
      RegMem => "MemField",
      Description => "Next Hop DB payload",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F52,E53,TRUE)
    },
  },
  Slice1_Direct0NhTable => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
    Name => "Slice[2]_Direct0NhTable",
    RegMem => "Mem",
    Address => "700000",
    Description => "Next-hop-database (Direct-0 Table)",
    Width => "169", # Excel Formula: =calc_mem_width(E53:E53,M52,F53,-1)
    Type => "Config",
    UsedBy => "encdb",
    MemEntries => "6144",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "160",
    Slice1_NhData => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Slice[n]_NhData",
      RegMem => "MemField",
      Description => "Next Hop DB payload",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F52,E53,TRUE)
    },
  },
  Slice0_Direct1AdjTable => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
    Name => "Slice[2]_Direct1AdjTable",
    RegMem => "Mem",
    Address => "800000", # Excel Formula: =calc_mem_address(C52,A52,G54,L54)
    Description => "Adjacent DB Database (Direct-1 Table)",
    Width => "169", # Excel Formula: =calc_mem_width(E55:E55,M54,F55,-1)
    Type => "Config",
    UsedBy => "encdb",
    MemEntries => "2048",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "160",
    Slice0_AdjData => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Slice[n]_AdjData",
      RegMem => "MemField",
      Description => "Adjacent DB payload",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
  },
  Slice1_Direct1AdjTable => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
    Name => "Slice[2]_Direct1AdjTable",
    RegMem => "Mem",
    Address => "900000",
    Description => "Adjacent DB Database (Direct-1 Table)",
    Width => "169", # Excel Formula: =calc_mem_width(E55:E55,M54,F55,-1)
    Type => "Config",
    UsedBy => "encdb",
    MemEntries => "2048",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "160",
    Slice1_AdjData => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Slice[n]_AdjData",
      RegMem => "MemField",
      Description => "Adjacent DB payload",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F54,E55,TRUE)
    },
  },
  LargeEnc => { #Structure Type: Mem;
    Name => "LargeEnc",
    RegMem => "Mem",
    Address => "800000", # Excel Formula: =calc_mem_address(C54,A54,G56,L56)
    Description => "Large Encapsulation EM database",
    Width => "144", # Excel Formula: =calc_mem_width(E57:E57,M56,F57,-1)
    Type => "DocOnly",
    UsedBy => "encdb",
    MemEntries => "65536",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=42,SourceIdWidth=13,NumberOfBanks=8,NumberOfCamEntries=32,FlexibleKey=Enabled,NumberOfKeySizeOptions=2,KeySize2=26,NumberOfParallelBanks=8,2PMemory=Enabled,VerifierSampleReadAccess=1,VerifierSampleReadBeforeProt=3,VerifierSamplePhysicalMem=2,VerifierSampleWriteAfterProt=1,VerifierXorBankSample=1,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=0,VrfReadActivityFactor=66,VrfDisableSameAddressErr=Enabled,VrfEnableNonCpuRdWrSameAddress=Enabled,VldWriteActivityFactor=0,VldReadActivityFactor=66",
    MemLogicalWidth => "144",
    EncdbLargeEncPayload => { #Structure Type: MemField;
      Name => "EncdbLargeEncPayload",
      RegMem => "MemField",
      Description => "Large-EM payload
when accessing DIP index table, 11 lsbs are the Index to the DIP-index-mapping-table",
      Width => "144",
      Position => "143:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Comments => "Key/result options:
42->144
26->160
",
    },
  },
  SmallEncTableVerifier0 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 22; Skip Register;
    Name => "SmallEncTableVerifier[4]",
    RegMem => "Mem",
    Address => "A00000", # Excel Formula: =calc_mem_address(C54,A54,G58,L58)
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E59:E59,M58,F59,-1)
    Type => "Dynamic",
    UsedBy => "SmallEncTable",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    MemLogicalWidth => "184",
    SmallEncTableVerifier0Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "SmallEncTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F58,E59,TRUE)
    },
  },
  SmallEncTableVerifier1 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 22; Skip Register;
    Name => "SmallEncTableVerifier[4]",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E59:E59,M58,F59,-1)
    Type => "Dynamic",
    UsedBy => "SmallEncTable",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    MemLogicalWidth => "184",
    SmallEncTableVerifier1Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "SmallEncTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F58,E59,TRUE)
    },
  },
  SmallEncTableVerifier2 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 22; Skip Register;
    Name => "SmallEncTableVerifier[4]",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E59:E59,M58,F59,-1)
    Type => "Dynamic",
    UsedBy => "SmallEncTable",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    MemLogicalWidth => "184",
    SmallEncTableVerifier2Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "SmallEncTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F58,E59,TRUE)
    },
  },
  SmallEncTableVerifier3 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 22; Skip Register;
    Name => "SmallEncTableVerifier[4]",
    RegMem => "Mem",
    Address => "D00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E59:E59,M58,F59,-1)
    Type => "Dynamic",
    UsedBy => "SmallEncTable",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    MemLogicalWidth => "184",
    SmallEncTableVerifier3Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "SmallEncTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F58,E59,TRUE)
    },
  },
  SmallEncTablePerBankReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 24; Skip Register;
    Name => "SmallEncTablePerBankReg[4]",
    RegMem => "Reg",
    Address => "10A", # Excel Formula: =calc_reg_address(C38,A38,G38)
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E61:E63,F63)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    SmallEncTableActiveBanks0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 25;
      Name => "SmallEncTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F60,E61,TRUE)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "d1",
    },
    SmallEncTableHashKey0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 21;
      Name => "SmallEncTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
    SmallEncTableUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "SmallEncTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
  },
  SmallEncTablePerBankReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 24; Skip Register;
    Name => "SmallEncTablePerBankReg[4]",
    RegMem => "Reg",
    Address => "10B",
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E61:E63,F63)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    SmallEncTableActiveBanks1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 25;
      Name => "SmallEncTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F60,E61,TRUE)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "d1",
    },
    SmallEncTableHashKey1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 21;
      Name => "SmallEncTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
    SmallEncTableUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "SmallEncTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
  },
  SmallEncTablePerBankReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 24; Skip Register;
    Name => "SmallEncTablePerBankReg[4]",
    RegMem => "Reg",
    Address => "10C",
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E61:E63,F63)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    SmallEncTableActiveBanks2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 25;
      Name => "SmallEncTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F60,E61,TRUE)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "d1",
    },
    SmallEncTableHashKey2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 21;
      Name => "SmallEncTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
    SmallEncTableUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 29;
      Name => "SmallEncTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
  },
  SmallEncTablePerBankReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 24; Skip Register;
    Name => "SmallEncTablePerBankReg[4]",
    RegMem => "Reg",
    Address => "10D",
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E61:E63,F63)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    SmallEncTableActiveBanks3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 25;
      Name => "SmallEncTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F60,E61,TRUE)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "d1",
    },
    SmallEncTableHashKey3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 21;
      Name => "SmallEncTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
    SmallEncTableUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 29;
      Name => "SmallEncTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
  },
  SmallEncTablePerEmReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 22; Skip Register;
    Name => "SmallEncTablePerEmReg[1]",
    RegMem => "Reg",
    Address => "10E", # Excel Formula: =calc_reg_address(C60,A60,G60)
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E65:E67,F67)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    SmallEncTableKeyWidth0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "SmallEncTableKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
    SmallEncTableAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 27;
      Name => "SmallEncTableAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F65,E66)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
    SmallEncTableBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 32;
      Name => "SmallEncTableBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F66,E67)
      Type => "Config",
      UsedBy => "SmallEncTable",
      DefaultValue => "h0",
    },
  },
  SmallEncTableCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 25; Skip Register;
    Name => "SmallEncTableCamWmMaxReg[1]",
    RegMem => "Reg",
    Address => "10F", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E69:E69,F69)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    SmallEncTableCamWmMax0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "SmallEncTableCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F68,E69,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  SmallEncTableAccessRegister0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 28; Skip Register;
    Name => "SmallEncTableAccessRegister[1]",
    RegMem => "Reg",
    Address => "110", # Excel Formula: =calc_reg_address(C68,A68,G68)
    Description => "EM indirect access configurations",
    Width => "224", # Excel Formula: =calc_reg_width(E71:E71,F71)
    Type => "External",
    UsedBy => "em_top",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    SmallEncTableAccessReg0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 23;
      Name => "SmallEncTableAccessReg[n]",
      RegMem => "RegField",
      Description => "See EM spec for register usage",
      Width => "224",
      Position => "223:0", # Excel Formula: =calc_position(F70,E71,TRUE)
      Type => "External",
    },
  },
  SmallEncTableResponseRegister0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 30; Skip Register;
    Name => "SmallEncTableResponseRegister[1]",
    RegMem => "Reg",
    Address => "111", # Excel Formula: =calc_reg_address(C70,A70,G70)
    Description => "EM indirect access data",
    Width => "224", # Excel Formula: =calc_reg_width(E73:E74,F74)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    SmallEncTableResponseValid0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 27;
      Name => "SmallEncTableResponseValid[n]",
      RegMem => "RegField",
      Description => "EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Event",
      UsedBy => "emdb",
    },
    SmallEncTableResponseReg0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 25;
      Name => "SmallEncTableResponseReg[n]",
      RegMem => "RegField",
      Description => "EM indirect access data, see EM spec for register usage",
      Width => "223",
      Position => "223:1", # Excel Formula: =calc_position(F73,E74)
      Type => "Capture",
      UsedBy => "emdb",
    },
  },
  SmallEncTableCam => { #Structure Type: Mem; Skip Register;
    Name => "SmallEncTableCam",
    RegMem => "Mem",
    Address => "E00000", # Excel Formula: =calc_mem_address(C58,A58,G75,L75)
    Description => "EM fallback CAM",
    Width => "203", # Excel Formula: =calc_mem_width(E76:E78,"None",F78,-1)
    Type => "Dynamic",
    UsedBy => "SmallEncTable",
    MemEntries => "32",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=160,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,NumCamLookupClients=2",
    Comments => "EM Skip Reg",
    MemLogicalWidth => "203",
    SmallEncTableCam_key => { #Structure Type: MemField;
      Name => "SmallEncTableCam_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "42",
      Position => "41:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
    SmallEncTableCam_payload => { #Structure Type: MemField;
      Name => "SmallEncTableCam_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "160",
      Position => "201:42", # Excel Formula: =calc_position(F76,E77)
    },
    SmallEncTableCam_valid => { #Structure Type: MemField;
      Name => "SmallEncTableCam_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "202", # Excel Formula: =calc_position(F77,E78)
    },
  },
  L3Dlp0TableVerifier0 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 20; Skip Register;
    Name => "L3Dlp0TableVerifier[4]",
    RegMem => "Mem",
    Address => "F00000", # Excel Formula: =calc_mem_address(C75,A75,G79,L79)
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "174", # Excel Formula: =calc_mem_width(E80:E80,M79,F80,-1)
    Type => "Dynamic",
    UsedBy => "L3Dlp0Table",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    MemLogicalWidth => "174",
    L3Dlp0TableVerifier0Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "L3Dlp0TableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "174",
      Position => "173:0", # Excel Formula: =calc_position(F79,E80,TRUE)
    },
  },
  L3Dlp0TableVerifier1 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 20; Skip Register;
    Name => "L3Dlp0TableVerifier[4]",
    RegMem => "Mem",
    Address => "1000000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "174", # Excel Formula: =calc_mem_width(E80:E80,M79,F80,-1)
    Type => "Dynamic",
    UsedBy => "L3Dlp0Table",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    MemLogicalWidth => "174",
    L3Dlp0TableVerifier1Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "L3Dlp0TableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "174",
      Position => "173:0", # Excel Formula: =calc_position(F79,E80,TRUE)
    },
  },
  L3Dlp0TableVerifier2 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 20; Skip Register;
    Name => "L3Dlp0TableVerifier[4]",
    RegMem => "Mem",
    Address => "1100000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "174", # Excel Formula: =calc_mem_width(E80:E80,M79,F80,-1)
    Type => "Dynamic",
    UsedBy => "L3Dlp0Table",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    MemLogicalWidth => "174",
    L3Dlp0TableVerifier2Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "L3Dlp0TableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "174",
      Position => "173:0", # Excel Formula: =calc_position(F79,E80,TRUE)
    },
  },
  L3Dlp0TableVerifier3 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 20; Skip Register;
    Name => "L3Dlp0TableVerifier[4]",
    RegMem => "Mem",
    Address => "1200000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "174", # Excel Formula: =calc_mem_width(E80:E80,M79,F80,-1)
    Type => "Dynamic",
    UsedBy => "L3Dlp0Table",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    MemLogicalWidth => "174",
    L3Dlp0TableVerifier3Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "L3Dlp0TableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "174",
      Position => "173:0", # Excel Formula: =calc_position(F79,E80,TRUE)
    },
  },
  L3Dlp0TablePerBankReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 22; Skip Register;
    Name => "L3Dlp0TablePerBankReg[4]",
    RegMem => "Reg",
    Address => "112", # Excel Formula: =calc_reg_address(C72,A72,G72)
    Description => "EM bank configurations, see fields description",
    Width => "66", # Excel Formula: =calc_reg_width(E82:E84,F84)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    L3Dlp0TableActiveBanks0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 23;
      Name => "L3Dlp0TableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F81,E82,TRUE)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "d1",
    },
    L3Dlp0TableHashKey0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "L3Dlp0TableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "64",
      Position => "64:1", # Excel Formula: =calc_position(F82,E83)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
    L3Dlp0TableUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 27;
      Name => "L3Dlp0TableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F83,E84)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
  },
  L3Dlp0TablePerBankReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 22; Skip Register;
    Name => "L3Dlp0TablePerBankReg[4]",
    RegMem => "Reg",
    Address => "113",
    Description => "EM bank configurations, see fields description",
    Width => "66", # Excel Formula: =calc_reg_width(E82:E84,F84)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    L3Dlp0TableActiveBanks1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 23;
      Name => "L3Dlp0TableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F81,E82,TRUE)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "d1",
    },
    L3Dlp0TableHashKey1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "L3Dlp0TableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "64",
      Position => "64:1", # Excel Formula: =calc_position(F82,E83)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
    L3Dlp0TableUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 27;
      Name => "L3Dlp0TableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F83,E84)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
  },
  L3Dlp0TablePerBankReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 22; Skip Register;
    Name => "L3Dlp0TablePerBankReg[4]",
    RegMem => "Reg",
    Address => "114",
    Description => "EM bank configurations, see fields description",
    Width => "66", # Excel Formula: =calc_reg_width(E82:E84,F84)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    L3Dlp0TableActiveBanks2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 23;
      Name => "L3Dlp0TableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F81,E82,TRUE)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "d1",
    },
    L3Dlp0TableHashKey2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "L3Dlp0TableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "64",
      Position => "64:1", # Excel Formula: =calc_position(F82,E83)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
    L3Dlp0TableUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 27;
      Name => "L3Dlp0TableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F83,E84)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
  },
  L3Dlp0TablePerBankReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 22; Skip Register;
    Name => "L3Dlp0TablePerBankReg[4]",
    RegMem => "Reg",
    Address => "115",
    Description => "EM bank configurations, see fields description",
    Width => "66", # Excel Formula: =calc_reg_width(E82:E84,F84)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    L3Dlp0TableActiveBanks3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 23;
      Name => "L3Dlp0TableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F81,E82,TRUE)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "d1",
    },
    L3Dlp0TableHashKey3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "L3Dlp0TableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "64",
      Position => "64:1", # Excel Formula: =calc_position(F82,E83)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
    L3Dlp0TableUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 27;
      Name => "L3Dlp0TableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F83,E84)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
  },
  L3Dlp0TablePerEmReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 20; Skip Register;
    Name => "L3Dlp0TablePerEmReg[1]",
    RegMem => "Reg",
    Address => "116", # Excel Formula: =calc_reg_address(C81,A81,G81)
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E86:E88,F88)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    L3Dlp0TableKeyWidth0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "L3Dlp0TableKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F85,E86,TRUE)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
    L3Dlp0TableAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 25;
      Name => "L3Dlp0TableAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F86,E87)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
    L3Dlp0TableBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 30;
      Name => "L3Dlp0TableBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F87,E88)
      Type => "Config",
      UsedBy => "L3Dlp0Table",
      DefaultValue => "h0",
    },
  },
  L3Dlp0TableCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 23; Skip Register;
    Name => "L3Dlp0TableCamWmMaxReg[1]",
    RegMem => "Reg",
    Address => "117", # Excel Formula: =calc_reg_address(C85,A85,G85)
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E90:E90,F90)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    L3Dlp0TableCamWmMax0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "L3Dlp0TableCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F89,E90,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  L3Dlp0TableAccessRegister0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 26; Skip Register;
    Name => "L3Dlp0TableAccessRegister[1]",
    RegMem => "Reg",
    Address => "118", # Excel Formula: =calc_reg_address(C89,A89,G89)
    Description => "EM indirect access configurations",
    Width => "214", # Excel Formula: =calc_reg_width(E92:E92,F92)
    Type => "External",
    UsedBy => "em_top",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    L3Dlp0TableAccessReg0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 21;
      Name => "L3Dlp0TableAccessReg[n]",
      RegMem => "RegField",
      Description => "See EM spec for register usage",
      Width => "214",
      Position => "213:0", # Excel Formula: =calc_position(F91,E92,TRUE)
      Type => "External",
    },
  },
  L3Dlp0TableResponseRegister0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 28; Skip Register;
    Name => "L3Dlp0TableResponseRegister[1]",
    RegMem => "Reg",
    Address => "119", # Excel Formula: =calc_reg_address(C91,A91,G91)
    Description => "EM indirect access data",
    Width => "214", # Excel Formula: =calc_reg_width(E94:E95,F95)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    L3Dlp0TableResponseValid0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 25;
      Name => "L3Dlp0TableResponseValid[n]",
      RegMem => "RegField",
      Description => "EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F93,E94,TRUE)
      Type => "Event",
      UsedBy => "emdb",
    },
    L3Dlp0TableResponseReg0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 23;
      Name => "L3Dlp0TableResponseReg[n]",
      RegMem => "RegField",
      Description => "EM indirect access data, see EM spec for register usage",
      Width => "213",
      Position => "213:1", # Excel Formula: =calc_position(F94,E95)
      Type => "Capture",
      UsedBy => "emdb",
    },
  },
  L3Dlp0TableCam => { #Structure Type: Mem; Skip Register;
    Name => "L3Dlp0TableCam",
    RegMem => "Mem",
    Address => "1300000", # Excel Formula: =calc_mem_address(C79,A79,G96,L96)
    Description => "EM fallback CAM",
    Width => "193", # Excel Formula: =calc_mem_width(E97:E99,"None",F99,-1)
    Type => "Dynamic",
    UsedBy => "L3Dlp0Table",
    MemEntries => "32",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=160,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,NumCamLookupClients=2",
    Comments => "EM Skip Reg",
    MemLogicalWidth => "193",
    L3Dlp0TableCam_key => { #Structure Type: MemField;
      Name => "L3Dlp0TableCam_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F96,E97,TRUE)
    },
    L3Dlp0TableCam_payload => { #Structure Type: MemField;
      Name => "L3Dlp0TableCam_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "160",
      Position => "191:32", # Excel Formula: =calc_position(F97,E98)
    },
    L3Dlp0TableCam_valid => { #Structure Type: MemField;
      Name => "L3Dlp0TableCam_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "192", # Excel Formula: =calc_position(F98,E99)
    },
  },
  LargeEncVerifier0 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]",
    RegMem => "Mem",
    Address => "1400000", # Excel Formula: =calc_mem_address(C96,A96,G100,L100)
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E101:E101,M100,F101,-1)
    Type => "Dynamic",
    UsedBy => "LargeEnc",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,XorBankSample=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=66,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    MemLogicalWidth => "184",
    LargeEncVerifier0Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F100,E101,TRUE)
    },
  },
  LargeEncVerifier1 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]",
    RegMem => "Mem",
    Address => "1500000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E101:E101,M100,F101,-1)
    Type => "Dynamic",
    UsedBy => "LargeEnc",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,XorBankSample=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=66,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    MemLogicalWidth => "184",
    LargeEncVerifier1Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F100,E101,TRUE)
    },
  },
  LargeEncVerifier2 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]",
    RegMem => "Mem",
    Address => "1600000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E101:E101,M100,F101,-1)
    Type => "Dynamic",
    UsedBy => "LargeEnc",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,XorBankSample=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=66,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    MemLogicalWidth => "184",
    LargeEncVerifier2Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F100,E101,TRUE)
    },
  },
  LargeEncVerifier3 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]",
    RegMem => "Mem",
    Address => "1700000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E101:E101,M100,F101,-1)
    Type => "Dynamic",
    UsedBy => "LargeEnc",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,XorBankSample=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=66,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    MemLogicalWidth => "184",
    LargeEncVerifier3Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F100,E101,TRUE)
    },
  },
  LargeEncVerifier4 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]",
    RegMem => "Mem",
    Address => "1800000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E101:E101,M100,F101,-1)
    Type => "Dynamic",
    UsedBy => "LargeEnc",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,XorBankSample=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=66,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    MemLogicalWidth => "184",
    LargeEncVerifier4Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F100,E101,TRUE)
    },
  },
  LargeEncVerifier5 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]",
    RegMem => "Mem",
    Address => "1900000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E101:E101,M100,F101,-1)
    Type => "Dynamic",
    UsedBy => "LargeEnc",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,XorBankSample=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=66,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    MemLogicalWidth => "184",
    LargeEncVerifier5Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F100,E101,TRUE)
    },
  },
  LargeEncVerifier6 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]",
    RegMem => "Mem",
    Address => "1A00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E101:E101,M100,F101,-1)
    Type => "Dynamic",
    UsedBy => "LargeEnc",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,XorBankSample=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=66,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    MemLogicalWidth => "184",
    LargeEncVerifier6Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F100,E101,TRUE)
    },
  },
  LargeEncVerifier7 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]",
    RegMem => "Mem",
    Address => "1B00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "184", # Excel Formula: =calc_mem_width(E101:E101,M100,F101,-1)
    Type => "Dynamic",
    UsedBy => "LargeEnc",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,XorBankSample=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=66,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    MemLogicalWidth => "184",
    LargeEncVerifier7Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "184",
      Position => "183:0", # Excel Formula: =calc_position(F100,E101,TRUE)
    },
  },
  LargeEncPerBankReg0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19; Skip Register;
    Name => "LargeEncPerBankReg[8]",
    RegMem => "Reg",
    Address => "11A", # Excel Formula: =calc_reg_address(C93,A93,G93)
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E103:E105,F105)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    LargeEncActiveBanks0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "LargeEncActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "d1",
    },
    LargeEncHashKey0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "LargeEncHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F103,E104)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
    LargeEncUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "LargeEncUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F104,E105)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
  },
  LargeEncPerBankReg1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19; Skip Register;
    Name => "LargeEncPerBankReg[8]",
    RegMem => "Reg",
    Address => "11B",
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E103:E105,F105)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    LargeEncActiveBanks1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "LargeEncActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "d1",
    },
    LargeEncHashKey1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "LargeEncHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F103,E104)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
    LargeEncUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "LargeEncUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F104,E105)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
  },
  LargeEncPerBankReg2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19; Skip Register;
    Name => "LargeEncPerBankReg[8]",
    RegMem => "Reg",
    Address => "11C",
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E103:E105,F105)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    LargeEncActiveBanks2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "LargeEncActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "d1",
    },
    LargeEncHashKey2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "LargeEncHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F103,E104)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
    LargeEncUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 24;
      Name => "LargeEncUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F104,E105)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
  },
  LargeEncPerBankReg3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19; Skip Register;
    Name => "LargeEncPerBankReg[8]",
    RegMem => "Reg",
    Address => "11D",
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E103:E105,F105)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    LargeEncActiveBanks3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "LargeEncActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "d1",
    },
    LargeEncHashKey3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "LargeEncHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F103,E104)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
    LargeEncUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 24;
      Name => "LargeEncUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F104,E105)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
  },
  LargeEncPerBankReg4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19; Skip Register;
    Name => "LargeEncPerBankReg[8]",
    RegMem => "Reg",
    Address => "11E",
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E103:E105,F105)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    LargeEncActiveBanks4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 20;
      Name => "LargeEncActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "d1",
    },
    LargeEncHashKey4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "LargeEncHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F103,E104)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
    LargeEncUsePrimitiveCrc4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 24;
      Name => "LargeEncUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F104,E105)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
  },
  LargeEncPerBankReg5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19; Skip Register;
    Name => "LargeEncPerBankReg[8]",
    RegMem => "Reg",
    Address => "11F",
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E103:E105,F105)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    LargeEncActiveBanks5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 20;
      Name => "LargeEncActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "d1",
    },
    LargeEncHashKey5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "LargeEncHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F103,E104)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
    LargeEncUsePrimitiveCrc5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 24;
      Name => "LargeEncUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F104,E105)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
  },
  LargeEncPerBankReg6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19; Skip Register;
    Name => "LargeEncPerBankReg[8]",
    RegMem => "Reg",
    Address => "120",
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E103:E105,F105)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    LargeEncActiveBanks6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 20;
      Name => "LargeEncActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "d1",
    },
    LargeEncHashKey6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "LargeEncHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F103,E104)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
    LargeEncUsePrimitiveCrc6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 24;
      Name => "LargeEncUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F104,E105)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
  },
  LargeEncPerBankReg7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19; Skip Register;
    Name => "LargeEncPerBankReg[8]",
    RegMem => "Reg",
    Address => "121",
    Description => "EM bank configurations, see fields description",
    Width => "86", # Excel Formula: =calc_reg_width(E103:E105,F105)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    LargeEncActiveBanks7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 20;
      Name => "LargeEncActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "d1",
    },
    LargeEncHashKey7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "LargeEncHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "84",
      Position => "84:1", # Excel Formula: =calc_position(F103,E104)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
    LargeEncUsePrimitiveCrc7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 24;
      Name => "LargeEncUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "85", # Excel Formula: =calc_position(F104,E105)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
  },
  LargeEncPerEmReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncPerEmReg[1]",
    RegMem => "Reg",
    Address => "122", # Excel Formula: =calc_reg_address(C102,A102,G102)
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E107:E109,F109)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    LargeEncKeyWidth0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "LargeEncKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F106,E107,TRUE)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
    LargeEncAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "LargeEncAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F107,E108)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
    LargeEncBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 27;
      Name => "LargeEncBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F108,E109)
      Type => "Config",
      UsedBy => "LargeEnc",
      DefaultValue => "h0",
    },
  },
  LargeEncCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 20; Skip Register;
    Name => "LargeEncCamWmMaxReg[1]",
    RegMem => "Reg",
    Address => "123", # Excel Formula: =calc_reg_address(C106,A106,G106)
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E111:E111,F111)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    LargeEncCamWmMax0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "LargeEncCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F110,E111,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  LargeEncAccessRegister0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 23; Skip Register;
    Name => "LargeEncAccessRegister[1]",
    RegMem => "Reg",
    Address => "124", # Excel Formula: =calc_reg_address(C110,A110,G110)
    Description => "EM indirect access configurations",
    Width => "228", # Excel Formula: =calc_reg_width(E113:E113,F113)
    Type => "External",
    UsedBy => "em_top",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    LargeEncAccessReg0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "LargeEncAccessReg[n]",
      RegMem => "RegField",
      Description => "See EM spec for register usage",
      Width => "228",
      Position => "227:0", # Excel Formula: =calc_position(F112,E113,TRUE)
      Type => "External",
    },
  },
  LargeEncResponseRegister0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 25; Skip Register;
    Name => "LargeEncResponseRegister[1]",
    RegMem => "Reg",
    Address => "125", # Excel Formula: =calc_reg_address(C112,A112,G112)
    Description => "EM indirect access data",
    Width => "225", # Excel Formula: =calc_reg_width(E115:E116,F116)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    LargeEncResponseValid0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "LargeEncResponseValid[n]",
      RegMem => "RegField",
      Description => "EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F114,E115,TRUE)
      Type => "Event",
      UsedBy => "emdb",
    },
    LargeEncResponseReg0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "LargeEncResponseReg[n]",
      RegMem => "RegField",
      Description => "EM indirect access data, see EM spec for register usage",
      Width => "224",
      Position => "224:1", # Excel Formula: =calc_position(F115,E116)
      Type => "Capture",
      UsedBy => "emdb",
    },
  },
  LargeEncCam => { #Structure Type: Mem; Skip Register;
    Name => "LargeEncCam",
    RegMem => "Mem",
    Address => "1C00000", # Excel Formula: =calc_mem_address(C100,A100,G117,L117)
    Description => "EM fallback CAM",
    Width => "203", # Excel Formula: =calc_mem_width(E118:E120,"None",F120,-1)
    Type => "Dynamic",
    UsedBy => "LargeEnc",
    MemEntries => "32",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=160,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,NumCamLookupClients=2",
    Comments => "EM Skip Reg",
    MemLogicalWidth => "203",
    LargeEncCam_key => { #Structure Type: MemField;
      Name => "LargeEncCam_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "42",
      Position => "41:0", # Excel Formula: =calc_position(F117,E118,TRUE)
    },
    LargeEncCam_payload => { #Structure Type: MemField;
      Name => "LargeEncCam_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "160",
      Position => "201:42", # Excel Formula: =calc_position(F118,E119)
    },
    LargeEncCam_valid => { #Structure Type: MemField;
      Name => "LargeEncCam_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "202", # Excel Formula: =calc_position(F119,E120)
    },
  },
  EmResponseInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "EmResponseInterrupt",
    RegMem => "Reg",
    Address => "126", # Excel Formula: =calc_reg_address(C114,A114,G114)
    Description => "EM indirect access data is valid",
    Width => "3", # Excel Formula: =calc_reg_width(E122:E124,F124)
    Type => "Interrupt",
    Comments => "EM Skip Reg",
    SmallEncTableResp => { #Structure Type: RegField;
      Name => "SmallEncTableResp",
      RegMem => "RegField",
      Description => "Relevant EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F121,E122,TRUE)
      Type => "Interrupt",
      UsedBy => "emdb",
    },
    L3Dlp0TableResp => { #Structure Type: RegField;
      Name => "L3Dlp0TableResp",
      RegMem => "RegField",
      Description => "Relevant EM indirect access data is valid",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F122,E123)
      Type => "Interrupt",
      UsedBy => "emdb",
    },
    LargeEncResp => { #Structure Type: RegField;
      Name => "LargeEncResp",
      RegMem => "RegField",
      Description => "Relevant EM indirect access data is valid",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F123,E124)
      Type => "Interrupt",
      UsedBy => "emdb",
    },
  },
  EmResponseInterruptMask => { #Structure Type: Reg; Skip Register; Skip Register;
    Name => "EmResponseInterruptMask",
    RegMem => "Reg",
    Address => "127",
    Description => "This register masks EmResponseInterrupt interrupt register",
    Width => "3", # Excel Formula: =calc_reg_width(E122:E124,F124)
    Type => "InterruptMask",
    Comments => "EM Skip Reg",
    SmallEncTableRespMask => { #Structure Type: RegField;
      Name => "SmallEncTableRespMask",
      RegMem => "RegField",
      Description => "This field masks SmallEncTableResp interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F121,E122,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    L3Dlp0TableRespMask => { #Structure Type: RegField;
      Name => "L3Dlp0TableRespMask",
      RegMem => "RegField",
      Description => "This field masks L3Dlp0TableResp interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F122,E123)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    LargeEncRespMask => { #Structure Type: RegField;
      Name => "LargeEncRespMask",
      RegMem => "RegField",
      Description => "This field masks LargeEncResp interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F123,E124)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  EmResponseInterruptTest => { #Structure Type: Reg; Skip Register; Skip Register;
    Name => "EmResponseInterruptTest",
    RegMem => "Reg",
    Address => "128",
    Description => "This register tests EmResponseInterrupt interrupt register",
    Width => "3", # Excel Formula: =calc_reg_width(E122:E124,F124)
    Type => "InterruptTest",
    Comments => "EM Skip Reg",
    SmallEncTableRespTest => { #Structure Type: RegField;
      Name => "SmallEncTableRespTest",
      RegMem => "RegField",
      Description => "This field tests SmallEncTableResp interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F121,E122,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    L3Dlp0TableRespTest => { #Structure Type: RegField;
      Name => "L3Dlp0TableRespTest",
      RegMem => "RegField",
      Description => "This field tests L3Dlp0TableResp interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F122,E123)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    LargeEncRespTest => { #Structure Type: RegField;
      Name => "LargeEncRespTest",
      RegMem => "RegField",
      Description => "This field tests LargeEncResp interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F123,E124)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  SmallEncTableVerifier0BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 22; Skip Register;
    Name => "SmallEncTableVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "129", # Excel Formula: =calc_reg_address(C121,A121,G121)
    Description => "Bubble request configurations for SmallEncTableVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E126:E126,F126)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    SmallEncTableVerifier0BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "SmallEncTableVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F125,E126,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  SmallEncTableVerifier1BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 22; Skip Register;
    Name => "SmallEncTableVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "12A",
    Description => "Bubble request configurations for SmallEncTableVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E126:E126,F126)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    SmallEncTableVerifier1BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "SmallEncTableVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F125,E126,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  SmallEncTableVerifier2BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 22; Skip Register;
    Name => "SmallEncTableVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "12B",
    Description => "Bubble request configurations for SmallEncTableVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E126:E126,F126)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    SmallEncTableVerifier2BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "SmallEncTableVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F125,E126,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  SmallEncTableVerifier3BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 22; Skip Register;
    Name => "SmallEncTableVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "12C",
    Description => "Bubble request configurations for SmallEncTableVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E126:E126,F126)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    SmallEncTableVerifier3BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "SmallEncTableVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F125,E126,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  L3Dlp0TableVerifier0BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 20; Skip Register;
    Name => "L3Dlp0TableVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "12D", # Excel Formula: =calc_reg_address(C125,A125,G125)
    Description => "Bubble request configurations for L3Dlp0TableVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E128:E128,F128)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    L3Dlp0TableVerifier0BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "L3Dlp0TableVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F127,E128,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  L3Dlp0TableVerifier1BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 20; Skip Register;
    Name => "L3Dlp0TableVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "12E",
    Description => "Bubble request configurations for L3Dlp0TableVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E128:E128,F128)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    L3Dlp0TableVerifier1BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "L3Dlp0TableVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F127,E128,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  L3Dlp0TableVerifier2BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 20; Skip Register;
    Name => "L3Dlp0TableVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "12F",
    Description => "Bubble request configurations for L3Dlp0TableVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E128:E128,F128)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    L3Dlp0TableVerifier2BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "L3Dlp0TableVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F127,E128,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  L3Dlp0TableVerifier3BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 20; Skip Register;
    Name => "L3Dlp0TableVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "130",
    Description => "Bubble request configurations for L3Dlp0TableVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E128:E128,F128)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    L3Dlp0TableVerifier3BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "L3Dlp0TableVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F127,E128,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  LargeEncVerifier0BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "131", # Excel Formula: =calc_reg_address(C127,A127,G127)
    Description => "Bubble request configurations for LargeEncVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E130:E130,F130)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    LargeEncVerifier0BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F129,E130,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  LargeEncVerifier1BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "132",
    Description => "Bubble request configurations for LargeEncVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E130:E130,F130)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    LargeEncVerifier1BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F129,E130,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  LargeEncVerifier2BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "133",
    Description => "Bubble request configurations for LargeEncVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E130:E130,F130)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    LargeEncVerifier2BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F129,E130,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  LargeEncVerifier3BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "134",
    Description => "Bubble request configurations for LargeEncVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E130:E130,F130)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    LargeEncVerifier3BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F129,E130,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  LargeEncVerifier4BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "135",
    Description => "Bubble request configurations for LargeEncVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E130:E130,F130)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    LargeEncVerifier4BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F129,E130,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  LargeEncVerifier5BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "136",
    Description => "Bubble request configurations for LargeEncVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E130:E130,F130)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    LargeEncVerifier5BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F129,E130,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  LargeEncVerifier6BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "137",
    Description => "Bubble request configurations for LargeEncVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E130:E130,F130)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    LargeEncVerifier6BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F129,E130,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  LargeEncVerifier7BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 17; Skip Register;
    Name => "LargeEncVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "138",
    Description => "Bubble request configurations for LargeEncVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E130:E130,F130)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    LargeEncVerifier7BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 17;
      Name => "LargeEncVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F129,E130,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
};
