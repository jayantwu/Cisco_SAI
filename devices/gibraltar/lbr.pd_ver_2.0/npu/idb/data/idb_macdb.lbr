$block{idb_macdb} = {
  Defines_db => "mall enc, large env and  ",
  ProjectName => "Gibraltar",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "4",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    ExternalInterruptsSummary => { #Structure Type: RegField;
      Name => "ExternalInterruptsSummary",
      RegMem => "RegField",
      Description => "When this bit is set, ExternalInterrupts has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
    idb_interruptsSummary => { #Structure Type: RegField;
      Name => "idb_interruptsSummary",
      RegMem => "RegField",
      Description => "When this bit is set, idb_interrupts has asserted interrupt",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
    },
    EmResponseInterruptSummary => { #Structure Type: RegField;
      Name => "EmResponseInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, EmResponseInterrupt has asserted interrupt",
      Width => "1",
      Position => "3",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt test register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "23",
    Type => "Config",
    vlan_membership_table0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "vlan_membership_table0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    vlan_membership_table1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "vlan_membership_table1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    large_relay_tableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "large_relay_tableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    small_relay_table0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "small_relay_table0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    small_relay_table1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "small_relay_table1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    vlan_mapping_tableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "vlan_mapping_tableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    lp_tableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "lp_tableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "23",
    Type => "Config",
    vlan_membership_table0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "vlan_membership_table0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    vlan_membership_table1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "vlan_membership_table1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    large_relay_tableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "large_relay_tableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    small_relay_table0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "small_relay_table0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    small_relay_table1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "small_relay_table1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    vlan_mapping_tableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "vlan_mapping_tableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    lp_tableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "lp_tableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    MymacTableVerifier7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "MymacTableVerifier7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ServiceMappingAccessVerifier7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "23",
    Type => "Config",
    vlan_membership_table0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "vlan_membership_table0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    vlan_membership_table1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "vlan_membership_table1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    large_relay_tableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "large_relay_tableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    small_relay_table0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "small_relay_table0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    small_relay_table1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "small_relay_table1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    vlan_mapping_tableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "vlan_mapping_tableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    lp_tableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "lp_tableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "23",
    Type => "Config",
    vlan_membership_table0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "vlan_membership_table0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    vlan_membership_table1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "vlan_membership_table1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    large_relay_tableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "large_relay_tableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    small_relay_table0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "small_relay_table0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    small_relay_table1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "small_relay_table1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    vlan_mapping_tableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "vlan_mapping_tableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    lp_tableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "lp_tableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    MymacTableVerifier7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "MymacTableVerifier7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ServiceMappingAccessVerifier7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "23",
    Type => "ReadOnly",
    vlan_membership_table0ErrInt => { #Structure Type: RegField;
      Name => "vlan_membership_table0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    vlan_membership_table1ErrInt => { #Structure Type: RegField;
      Name => "vlan_membership_table1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    large_relay_tableErrInt => { #Structure Type: RegField;
      Name => "large_relay_tableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    small_relay_table0ErrInt => { #Structure Type: RegField;
      Name => "small_relay_table0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    small_relay_table1ErrInt => { #Structure Type: RegField;
      Name => "small_relay_table1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    vlan_mapping_tableErrInt => { #Structure Type: RegField;
      Name => "vlan_mapping_tableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    lp_tableErrInt => { #Structure Type: RegField;
      Name => "lp_tableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    MymacTableVerifier0ErrInt => { #Structure Type: RegField;
      Name => "MymacTableVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    MymacTableVerifier1ErrInt => { #Structure Type: RegField;
      Name => "MymacTableVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
    MymacTableVerifier2ErrInt => { #Structure Type: RegField;
      Name => "MymacTableVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "9",
      Type => "Status",
      UsedBy => "SER",
    },
    MymacTableVerifier3ErrInt => { #Structure Type: RegField;
      Name => "MymacTableVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "10",
      Type => "Status",
      UsedBy => "SER",
    },
    MymacTableVerifier4ErrInt => { #Structure Type: RegField;
      Name => "MymacTableVerifier4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "11",
      Type => "Status",
      UsedBy => "SER",
    },
    MymacTableVerifier5ErrInt => { #Structure Type: RegField;
      Name => "MymacTableVerifier5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "12",
      Type => "Status",
      UsedBy => "SER",
    },
    MymacTableVerifier6ErrInt => { #Structure Type: RegField;
      Name => "MymacTableVerifier6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "13",
      Type => "Status",
      UsedBy => "SER",
    },
    MymacTableVerifier7ErrInt => { #Structure Type: RegField;
      Name => "MymacTableVerifier7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "14",
      Type => "Status",
      UsedBy => "SER",
    },
    ServiceMappingAccessVerifier0ErrInt => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "15",
      Type => "Status",
      UsedBy => "SER",
    },
    ServiceMappingAccessVerifier1ErrInt => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "16",
      Type => "Status",
      UsedBy => "SER",
    },
    ServiceMappingAccessVerifier2ErrInt => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "17",
      Type => "Status",
      UsedBy => "SER",
    },
    ServiceMappingAccessVerifier3ErrInt => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "18",
      Type => "Status",
      UsedBy => "SER",
    },
    ServiceMappingAccessVerifier4ErrInt => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "19",
      Type => "Status",
      UsedBy => "SER",
    },
    ServiceMappingAccessVerifier5ErrInt => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "20",
      Type => "Status",
      UsedBy => "SER",
    },
    ServiceMappingAccessVerifier6ErrInt => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "21",
      Type => "Status",
      UsedBy => "SER",
    },
    ServiceMappingAccessVerifier7ErrInt => { #Structure Type: RegField;
      Name => "ServiceMappingAccessVerifier7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "22",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "19",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "17",
      Position => "16:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "18:17",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "6",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "5",
      Position => "4:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  TcamScanPeriodCfg => { #Structure Type: Reg; Skip Register;
    Name => "TcamScanPeriodCfg",
    RegMem => "Reg",
    Address => "3B",
    Description => "Configures period of TCAM scan for SER, set 0 to disable",
    Width => "32",
    Type => "Config",
    TcamScanPeriod => { #Structure Type: RegField;
      Name => "TcamScanPeriod",
      RegMem => "RegField",
      Description => "Configures period of TCAM scan for SER, set 0 to disable",
      Width => "32",
      Position => "31:0",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d120000000",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "73", # Excel Formula: =calc_reg_width(E25:E53,F53)
    Type => "Config",
    SACR1P_RME => { #Structure Type: RegField;
      Name => "SACR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACR1P_RM => { #Structure Type: RegField;
      Name => "SACR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RME => { #Structure Type: RegField;
      Name => "SACU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RM => { #Structure Type: RegField;
      Name => "SACU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "9:6", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RME => { #Structure Type: RegField;
      Name => "SADC1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RM => { #Structure Type: RegField;
      Name => "SADC1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "14:11", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEA => { #Structure Type: RegField;
      Name => "SADR2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "15", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMA => { #Structure Type: RegField;
      Name => "SADR2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "19:16", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEB => { #Structure Type: RegField;
      Name => "SADR2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMB => { #Structure Type: RegField;
      Name => "SADR2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "24:21", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEA => { #Structure Type: RegField;
      Name => "SADS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "25", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMA => { #Structure Type: RegField;
      Name => "SADS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "29:26", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEB => { #Structure Type: RegField;
      Name => "SADS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMB => { #Structure Type: RegField;
      Name => "SADS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "34:31", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RME => { #Structure Type: RegField;
      Name => "SASR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "35", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RM => { #Structure Type: RegField;
      Name => "SASR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "39:36", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RME => { #Structure Type: RegField;
      Name => "SASS1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RM => { #Structure Type: RegField;
      Name => "SASS1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "44:41", # Excel Formula: =calc_position(F41,E42)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEA => { #Structure Type: RegField;
      Name => "SASS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "45", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMA => { #Structure Type: RegField;
      Name => "SASS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "49:46", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEB => { #Structure Type: RegField;
      Name => "SASS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMB => { #Structure Type: RegField;
      Name => "SASS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "54:51", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RME => { #Structure Type: RegField;
      Name => "SASU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "55", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RM => { #Structure Type: RegField;
      Name => "SASU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "59:56", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RME => { #Structure Type: RegField;
      Name => "SADU1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "60", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RM => { #Structure Type: RegField;
      Name => "SADU1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "64:61", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RA => { #Structure Type: RegField;
      Name => "SADS2P_RA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Assist for Dual port",
      Width => "2",
      Position => "66:65", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_WA => { #Structure Type: RegField;
      Name => "SADU1P_WA",
      RegMem => "RegField",
      Description => "Write-Assist configuration for the SP SADU compiler",
      Width => "3",
      Position => "69:67", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d5",
    },
    SADU1P_WPULSE => { #Structure Type: RegField;
      Name => "SADU1P_WPULSE",
      RegMem => "RegField",
      Description => "Write-Assist-Pulse configuration for the SP SADU compiler",
      Width => "3",
      Position => "72:70", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E55:E55,F55)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "Spare register",
    Width => "128", # Excel Formula: =calc_reg_width(E57:E57,F57)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "Spare register ",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C56,A56,G56)
    Description => "PMRO controller configuration",
    Width => "32", # Excel Formula: =calc_reg_width(E59:E63,F63)
    Type => "Config",
    PmroRstn => { #Structure Type: RegField;
      Name => "PmroRstn",
      RegMem => "RegField",
      Description => "PMRO reset, active low",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroConfigEn => { #Structure Type: RegField;
      Name => "PmroConfigEn",
      RegMem => "RegField",
      Description => "Enable pmro configuration, when equals to 0 configurations are locked",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroStart => { #Structure Type: RegField;
      Name => "PmroStart",
      RegMem => "RegField",
      Description => "Start the pmro operation",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroRingEn => { #Structure Type: RegField;
      Name => "PmroRingEn",
      RegMem => "RegField",
      Description => "Determines which PMRO ring to activate, should be configured as one hot",
      Width => "7",
      Position => "9:3", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroCntPeriod => { #Structure Type: RegField;
      Name => "PmroCntPeriod",
      RegMem => "RegField",
      Description => "Number of core clock cycles on which PMRO is measured",
      Width => "22",
      Position => "31:10", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "h3FFFFF",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "PMRO status configuration",
    Width => "23", # Excel Formula: =calc_reg_width(E65:E66,F66)
    Type => "ReadOnly",
    PmroCountOut => { #Structure Type: RegField;
      Name => "PmroCountOut",
      RegMem => "RegField",
      Description => "The ring oscilator counter value.",
      Width => "22",
      Position => "21:0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Status",
      UsedBy => "pmro",
    },
    PmroDone => { #Structure Type: RegField;
      Name => "PmroDone",
      RegMem => "RegField",
      Description => "Pmro operation done, PmroCountOut is valid.",
      Width => "1",
      Position => "22", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "Mirror Bus configurations",
    Width => "11", # Excel Formula: =calc_reg_width(E68:E69,F69)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "Enable Mirror Bus",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F67,E68,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "Mirror Bus selector",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C67,A67,G67)
    Description => "Mirror Bus status result",
    Width => "32", # Excel Formula: =calc_reg_width(E71:E71,F71)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "Mirror Bus status result",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F70,E71,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C70,A70,G70)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E73:E73,F73)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  init_done_status_register => { #Structure Type: Reg;
    Name => "init_done_status_register",
    RegMem => "Reg",
    Address => "100",
    Description => "idb_init_done_status_reg",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "ReadOnly",
    init_done => { #Structure Type: RegField;
      Name => "init_done",
      RegMem => "RegField",
      Description => "idb_init_done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Status",
      UsedBy => "macdb",
    },
  },
  debug_data_bus_register => { #Structure Type: Reg;
    Name => "debug_data_bus_register",
    RegMem => "Reg",
    Address => "101", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "debug_data_bus_register",
    Width => "32", # Excel Formula: =calc_reg_width(E10:E10,F10)
    Type => "ReadOnly",
    debug_data_bus => { #Structure Type: RegField;
      Name => "debug_data_bus",
      RegMem => "RegField",
      Description => "debug_data_bus",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Status",
      UsedBy => "macdb",
    },
  },
  debug_data_select_register => { #Structure Type: Reg;
    Name => "debug_data_select_register",
    RegMem => "Reg",
    Address => "102", # Excel Formula: =calc_reg_address(C9,A9,G9)
    Description => "debug_data_select_register",
    Width => "10", # Excel Formula: =calc_reg_width(E12:E12,F12)
    Type => "Config",
    debug_data_select => { #Structure Type: RegField;
      Name => "debug_data_select",
      RegMem => "RegField",
      Description => "debug_data_select",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F11,E12,TRUE)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "d0",
    },
  },
  VlanMappingCbtNotIrdy0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
    Name => "VlanMappingCbtNotIrdy[2]",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C11,A11,G11)
    Description => "debug_data_bus_register",
    Width => "64", # Excel Formula: =calc_reg_width(E14:E14,F14)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    Slice0VlanMappingCbtNotIrdyCounter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Slice[n]VlanMappingCbtNotIrdyCounter",
      RegMem => "RegField",
      Description => "Counter for cycles where the vlan mapping got backpressure from its cbt",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  VlanMappingCbtNotIrdy1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
    Name => "VlanMappingCbtNotIrdy[2]",
    RegMem => "Reg",
    Address => "104",
    Description => "debug_data_bus_register",
    Width => "64", # Excel Formula: =calc_reg_width(E14:E14,F14)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    Slice1VlanMappingCbtNotIrdyCounter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Slice[n]VlanMappingCbtNotIrdyCounter",
      RegMem => "RegField",
      Description => "Counter for cycles where the vlan mapping got backpressure from its cbt",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  CyclesBeforeBubble => { #Structure Type: Reg;
    Name => "CyclesBeforeBubble",
    RegMem => "Reg",
    Address => "105", # Excel Formula: =calc_reg_address(C13,A13,G13)
    Width => "26", # Excel Formula: =calc_reg_width(E16:E18,F18)
    Type => "Config",
    Sm1InputCbrNumOfClksBeforeForcedBubbleOrdy => { #Structure Type: RegField;
      Name => "Sm1InputCbrNumOfClksBeforeForcedBubbleOrdy",
      RegMem => "RegField",
      Description => "amount of cycle the design would wait before creating bubble to sm0 interface  in case there is output ready in sm1 (but the cnt is below the defined threshold, see below)",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F15,E16,TRUE)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "d5",
    },
    Sm1InputCbrNumOfClksBeforeForcedBubbleAboveTh => { #Structure Type: RegField;
      Name => "Sm1InputCbrNumOfClksBeforeForcedBubbleAboveTh",
      RegMem => "RegField",
      Description => "amount of cycle the design would wait before creating bubble to sm0 interface  in case the cnt is above the defined threshold",
      Width => "10",
      Position => "19:10", # Excel Formula: =calc_position(F16,E17)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "d1",
    },
    Sm1toSm0Threshold => { #Structure Type: RegField;
      Name => "Sm1toSm0Threshold",
      RegMem => "RegField",
      Description => "Fullness threshold for SM1 cbr. Above this threshold, different amount of cycle before bubble would be used (see above fields)",
      Width => "6",
      Position => "25:20", # Excel Formula: =calc_position(F17,E18)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "d3",
    },
  },
  debug_table_input_counter_register0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 35;
    Name => "debug_table_input_counter_register[2]",
    RegMem => "Reg",
    Address => "106", # Excel Formula: =calc_reg_address(C15,A15,G15)
    Description => "debug data counters (input to many of the design registers)",
    Width => "896", # Excel Formula: =calc_reg_width(E20:E33,F33)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    slice0_vlan_mapping => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_vlan_mapping",
      RegMem => "RegField",
      Description => "counter for lookups entering the vlan mapping table",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_service_relay => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_service_relay",
      RegMem => "RegField",
      Description => "counter for lookups entering the service relay table",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F20,E21)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_link_relay => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_link_relay",
      RegMem => "RegField",
      Description => "counter for lookups entering the link relay table",
      Width => "64",
      Position => "191:128", # Excel Formula: =calc_position(F21,E22)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_mymac_em => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_mymac_em",
      RegMem => "RegField",
      Description => "counter for lookups entering the mac termination table",
      Width => "64",
      Position => "255:192", # Excel Formula: =calc_position(F22,E23)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_vm2mymac_em => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_vm2mymac_em",
      RegMem => "RegField",
      Description => "counter for lookups going from vlan mapping to mac termination table",
      Width => "64",
      Position => "319:256", # Excel Formula: =calc_position(F23,E24)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_sm0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm0",
      RegMem => "RegField",
      Description => "counter for lookups entering the sm0 table",
      Width => "64",
      Position => "383:320", # Excel Formula: =calc_position(F24,E25)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_sm1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm1",
      RegMem => "RegField",
      Description => "counter for lookups entering the sm1 table",
      Width => "64",
      Position => "447:384", # Excel Formula: =calc_position(F25,E26)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_sm02service_lp => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm02service_lp",
      RegMem => "RegField",
      Description => "counter for lookups going from sm0 table to the service lp table",
      Width => "64",
      Position => "511:448", # Excel Formula: =calc_position(F26,E27)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_sm02service_relay => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm02service_relay",
      RegMem => "RegField",
      Description => "coutner for lookups going from sm0 table to service relay table",
      Width => "64",
      Position => "575:512", # Excel Formula: =calc_position(F27,E28)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_sm02mymac_db => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm02mymac_db",
      RegMem => "RegField",
      Description => "counter for lookups going  sm0 table to the mac termination table",
      Width => "64",
      Position => "639:576", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_sm12service_lp => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm12service_lp",
      RegMem => "RegField",
      Description => "counter for lookups going from sm1 table to the service lp table",
      Width => "64",
      Position => "703:640", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_sm12service_relay => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm12service_relay",
      RegMem => "RegField",
      Description => "coutner for lookups going from sm1 table to service relay table",
      Width => "64",
      Position => "767:704", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_sm12mymac_db => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm12mymac_db",
      RegMem => "RegField",
      Description => "counter for lookups going  sm1 table to the mac termination table",
      Width => "64",
      Position => "831:768", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_service_lp => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_service_lp",
      RegMem => "RegField",
      Description => "counter for lookups entering the service lp table",
      Width => "64",
      Position => "895:832", # Excel Formula: =calc_position(F32,E33)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  debug_table_input_counter_register1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 35;
    Name => "debug_table_input_counter_register[2]",
    RegMem => "Reg",
    Address => "107",
    Description => "debug data counters (input to many of the design registers)",
    Width => "896", # Excel Formula: =calc_reg_width(E20:E33,F33)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    slice1_vlan_mapping => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_vlan_mapping",
      RegMem => "RegField",
      Description => "counter for lookups entering the vlan mapping table",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_service_relay => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_service_relay",
      RegMem => "RegField",
      Description => "counter for lookups entering the service relay table",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F20,E21)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_link_relay => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_link_relay",
      RegMem => "RegField",
      Description => "counter for lookups entering the link relay table",
      Width => "64",
      Position => "191:128", # Excel Formula: =calc_position(F21,E22)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_mymac_em => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_mymac_em",
      RegMem => "RegField",
      Description => "counter for lookups entering the mac termination table",
      Width => "64",
      Position => "255:192", # Excel Formula: =calc_position(F22,E23)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_vm2mymac_em => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_vm2mymac_em",
      RegMem => "RegField",
      Description => "counter for lookups going from vlan mapping to mac termination table",
      Width => "64",
      Position => "319:256", # Excel Formula: =calc_position(F23,E24)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_sm0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm0",
      RegMem => "RegField",
      Description => "counter for lookups entering the sm0 table",
      Width => "64",
      Position => "383:320", # Excel Formula: =calc_position(F24,E25)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_sm1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm1",
      RegMem => "RegField",
      Description => "counter for lookups entering the sm1 table",
      Width => "64",
      Position => "447:384", # Excel Formula: =calc_position(F25,E26)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_sm02service_lp => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm02service_lp",
      RegMem => "RegField",
      Description => "counter for lookups going from sm0 table to the service lp table",
      Width => "64",
      Position => "511:448", # Excel Formula: =calc_position(F26,E27)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_sm02service_relay => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm02service_relay",
      RegMem => "RegField",
      Description => "coutner for lookups going from sm0 table to service relay table",
      Width => "64",
      Position => "575:512", # Excel Formula: =calc_position(F27,E28)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_sm02mymac_db => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm02mymac_db",
      RegMem => "RegField",
      Description => "counter for lookups going  sm0 table to the mac termination table",
      Width => "64",
      Position => "639:576", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_sm12service_lp => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm12service_lp",
      RegMem => "RegField",
      Description => "counter for lookups going from sm1 table to the service lp table",
      Width => "64",
      Position => "703:640", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_sm12service_relay => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm12service_relay",
      RegMem => "RegField",
      Description => "coutner for lookups going from sm1 table to service relay table",
      Width => "64",
      Position => "767:704", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_sm12mymac_db => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm12mymac_db",
      RegMem => "RegField",
      Description => "counter for lookups going  sm1 table to the mac termination table",
      Width => "64",
      Position => "831:768", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_service_lp => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_service_lp",
      RegMem => "RegField",
      Description => "counter for lookups entering the service lp table",
      Width => "64",
      Position => "895:832", # Excel Formula: =calc_position(F32,E33)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  debug_table_miss_counter_register0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 34;
    Name => "debug_table_miss_counter_register[2]",
    RegMem => "Reg",
    Address => "108", # Excel Formula: =calc_reg_address(C19,A19,G19)
    Description => "debug_data_bus_register",
    Width => "192", # Excel Formula: =calc_reg_width(E35:E37,F37)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    slice0_sm0_miss_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm0_miss_counter",
      RegMem => "RegField",
      Description => "counter for lookups entering the vlan mapping table",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_sm1_miss_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm1_miss_counter",
      RegMem => "RegField",
      Description => "counter for lookups entering the service relay table",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F35,E36)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice0_mymac_miss_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_mymac_miss_counter",
      RegMem => "RegField",
      Description => "counter for lookups entering the link relay table",
      Width => "64",
      Position => "191:128", # Excel Formula: =calc_position(F36,E37)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  debug_table_miss_counter_register1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 34;
    Name => "debug_table_miss_counter_register[2]",
    RegMem => "Reg",
    Address => "109",
    Description => "debug_data_bus_register",
    Width => "192", # Excel Formula: =calc_reg_width(E35:E37,F37)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    slice1_sm0_miss_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm0_miss_counter",
      RegMem => "RegField",
      Description => "counter for lookups entering the vlan mapping table",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_sm1_miss_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm1_miss_counter",
      RegMem => "RegField",
      Description => "counter for lookups entering the service relay table",
      Width => "64",
      Position => "127:64", # Excel Formula: =calc_position(F35,E36)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    slice1_mymac_miss_counter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_mymac_miss_counter",
      RegMem => "RegField",
      Description => "counter for lookups entering the link relay table",
      Width => "64",
      Position => "191:128", # Excel Formula: =calc_position(F36,E37)
      Type => "Counter",
      UsedBy => "macdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  debug_fifos_water_marks_register0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 33;
    Name => "debug_fifos_water_marks_register[2]",
    RegMem => "Reg",
    Address => "10A", # Excel Formula: =calc_reg_address(C34,A34,G34)
    Description => "debug_data_bus_register",
    Width => "82", # Excel Formula: =calc_reg_width(E39:E53,F53)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    slice0_vlan_mapping_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_vlan_mapping_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F38,E39,TRUE)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_service_relay_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_service_relay_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "11:6", # Excel Formula: =calc_position(F39,E40)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_link_relay_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_link_relay_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "17:12", # Excel Formula: =calc_position(F40,E41)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_vlan_mapping2link_relay_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_vlan_mapping2link_relay_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "4",
      Position => "21:18", # Excel Formula: =calc_position(F41,E42)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_mymac_em_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_mymac_em_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "27:22", # Excel Formula: =calc_position(F42,E43)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_vm2mymac_em_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_vm2mymac_em_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "4",
      Position => "31:28", # Excel Formula: =calc_position(F43,E44)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_sm0_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm0_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F44,E45)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_sm1_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm1_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "43:38", # Excel Formula: =calc_position(F45,E46)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_sm02service_lp_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm02service_lp_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "48:44", # Excel Formula: =calc_position(F46,E47)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_sm02service_relay_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm02service_relay_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "53:49", # Excel Formula: =calc_position(F47,E48)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_sm02mymac_db_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm02mymac_db_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "58:54", # Excel Formula: =calc_position(F48,E49)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_sm12service_lp_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm12service_lp_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "63:59", # Excel Formula: =calc_position(F49,E50)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_sm12service_relay_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm12service_relay_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "68:64", # Excel Formula: =calc_position(F50,E51)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_sm12mymac_db_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_sm12mymac_db_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "73:69", # Excel Formula: =calc_position(F51,E52)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice0_service_lp_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "slice[n]_service_lp_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "8",
      Position => "81:74", # Excel Formula: =calc_position(F52,E53)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
  },
  debug_fifos_water_marks_register1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 33;
    Name => "debug_fifos_water_marks_register[2]",
    RegMem => "Reg",
    Address => "10B",
    Description => "debug_data_bus_register",
    Width => "82", # Excel Formula: =calc_reg_width(E39:E53,F53)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    slice1_vlan_mapping_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_vlan_mapping_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F38,E39,TRUE)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_service_relay_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_service_relay_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "11:6", # Excel Formula: =calc_position(F39,E40)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_link_relay_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_link_relay_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "17:12", # Excel Formula: =calc_position(F40,E41)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_vlan_mapping2link_relay_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_vlan_mapping2link_relay_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "4",
      Position => "21:18", # Excel Formula: =calc_position(F41,E42)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_mymac_em_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_mymac_em_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "27:22", # Excel Formula: =calc_position(F42,E43)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_vm2mymac_em_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_vm2mymac_em_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "4",
      Position => "31:28", # Excel Formula: =calc_position(F43,E44)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_sm0_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm0_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F44,E45)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_sm1_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm1_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "6",
      Position => "43:38", # Excel Formula: =calc_position(F45,E46)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_sm02service_lp_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm02service_lp_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "48:44", # Excel Formula: =calc_position(F46,E47)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_sm02service_relay_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm02service_relay_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "53:49", # Excel Formula: =calc_position(F47,E48)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_sm02mymac_db_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm02mymac_db_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "58:54", # Excel Formula: =calc_position(F48,E49)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_sm12service_lp_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm12service_lp_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "63:59", # Excel Formula: =calc_position(F49,E50)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_sm12service_relay_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm12service_relay_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "68:64", # Excel Formula: =calc_position(F50,E51)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_sm12mymac_db_fifo_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_sm12mymac_db_fifo_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "5",
      Position => "73:69", # Excel Formula: =calc_position(F51,E52)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
    slice1_service_lp_cbr_wm => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "slice[n]_service_lp_cbr_wm",
      RegMem => "RegField",
      Description => "max number of entries in the fifo",
      Width => "8",
      Position => "81:74", # Excel Formula: =calc_position(F52,E53)
      Type => "MaxWmk",
      UsedBy => "macdb",
    },
  },
  disable_link_relay_cfg => { #Structure Type: Reg;
    Name => "disable_link_relay_cfg",
    RegMem => "Reg",
    Address => "10C", # Excel Formula: =calc_reg_address(C38,A38,G38)
    Description => "configuration_registers",
    Width => "2", # Excel Formula: =calc_reg_width(E55:E56,F56)
    Type => "Config",
    slice0_disable_link_relay_table => { #Structure Type: RegField;
      Name => "slice0_disable_link_relay_table",
      RegMem => "RegField",
      Description => "when set, service-relay-table is 16K, and link-relay-table is 0K
when reset, service-relay-table is 12K, and link-relay-table is 4k",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "b0",
      InitValueAllModes => "1",
    },
    slice1_disable_link_relay_table => { #Structure Type: RegField;
      Name => "slice1_disable_link_relay_table",
      RegMem => "RegField",
      Description => "when set, service-relay-table is 16K, and link-relay-table is 0K
when reset, service-relay-table is 12K, and link-relay-table is 4k",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F55,E56)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "b0",
      InitValueAllModes => "1",
    },
  },
  ExternalInterrupts => { #Structure Type: Reg;
    Name => "ExternalInterrupts",
    RegMem => "Reg",
    Address => "10D", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "idb_interrupts",
    Width => "2", # Excel Formula: =calc_reg_width(E58:E59,F59)
    Type => "Interrupt",
    ResolutionInterruptSummary => { #Structure Type: RegField;
      Name => "ResolutionInterruptSummary",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F57,E58,TRUE)
      Type => "Interrupt",
      UsedBy => "macdb",
    },
    EncdbInterruptSummary => { #Structure Type: RegField;
      Name => "EncdbInterruptSummary",
      RegMem => "RegField",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F58,E59)
      Type => "Interrupt",
      UsedBy => "macdb",
    },
  },
  ExternalInterruptsMask => { #Structure Type: Reg; Skip Register;
    Name => "ExternalInterruptsMask",
    RegMem => "Reg",
    Address => "10E",
    Description => "This register masks ExternalInterrupts interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E58:E59,F59)
    Type => "InterruptMask",
    ResolutionInterruptSummaryMask => { #Structure Type: RegField;
      Name => "ResolutionInterruptSummaryMask",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F57,E58,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    EncdbInterruptSummaryMask => { #Structure Type: RegField;
      Name => "EncdbInterruptSummaryMask",
      RegMem => "RegField",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F58,E59)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  ExternalInterruptsTest => { #Structure Type: Reg; Skip Register;
    Name => "ExternalInterruptsTest",
    RegMem => "Reg",
    Address => "10F",
    Description => "This register tests ExternalInterrupts interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E58:E59,F59)
    Type => "InterruptTest",
    ResolutionInterruptSummaryTest => { #Structure Type: RegField;
      Name => "ResolutionInterruptSummaryTest",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F57,E58,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    EncdbInterruptSummaryTest => { #Structure Type: RegField;
      Name => "EncdbInterruptSummaryTest",
      RegMem => "RegField",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F58,E59)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  idb_interrupts => { #Structure Type: Reg;
    Name => "idb_interrupts",
    RegMem => "Reg",
    Address => "110", # Excel Formula: =calc_reg_address(C57,A57,G57)
    Description => "idb_interrupts",
    Width => "2", # Excel Formula: =calc_reg_width(E61:E62,F62)
    Type => "Interrupt",
    slice0_service_relay_table_address_out_of_bounds => { #Structure Type: RegField;
      Name => "slice0_service_relay_table_address_out_of_bounds",
      RegMem => "RegField",
      Description => "set if service_relay_table_address is out of bound:
relevant when (disable_link_relay_table=='0') and addr is larger than 12K",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F60,E61,TRUE)
      Type => "Interrupt",
      UsedBy => "macdb",
    },
    slice1_service_relay_table_address_out_of_bounds => { #Structure Type: RegField;
      Name => "slice1_service_relay_table_address_out_of_bounds",
      RegMem => "RegField",
      Description => "set if service_relay_table_address is out of bound:
relevant when (disable_link_relay_table=='0') and addr is larger than 12K",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F61,E62)
      Type => "Interrupt",
      UsedBy => "macdb",
    },
  },
  idb_interruptsMask => { #Structure Type: Reg; Skip Register;
    Name => "idb_interruptsMask",
    RegMem => "Reg",
    Address => "111",
    Description => "This register masks idb_interrupts interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E61:E62,F62)
    Type => "InterruptMask",
    slice0_service_relay_table_address_out_of_boundsMask => { #Structure Type: RegField;
      Name => "slice0_service_relay_table_address_out_of_boundsMask",
      RegMem => "RegField",
      Description => "This field masks slice0_service_relay_table_address_out_of_bounds interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F60,E61,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    slice1_service_relay_table_address_out_of_boundsMask => { #Structure Type: RegField;
      Name => "slice1_service_relay_table_address_out_of_boundsMask",
      RegMem => "RegField",
      Description => "This field masks slice1_service_relay_table_address_out_of_bounds interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F61,E62)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  idb_interruptsTest => { #Structure Type: Reg; Skip Register;
    Name => "idb_interruptsTest",
    RegMem => "Reg",
    Address => "112",
    Description => "This register tests idb_interrupts interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E61:E62,F62)
    Type => "InterruptTest",
    slice0_service_relay_table_address_out_of_boundsTest => { #Structure Type: RegField;
      Name => "slice0_service_relay_table_address_out_of_boundsTest",
      RegMem => "RegField",
      Description => "This field tests slice0_service_relay_table_address_out_of_bounds interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F60,E61,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    slice1_service_relay_table_address_out_of_boundsTest => { #Structure Type: RegField;
      Name => "slice1_service_relay_table_address_out_of_boundsTest",
      RegMem => "RegField",
      Description => "This field tests slice1_service_relay_table_address_out_of_bounds interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F61,E62)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  vlan_mapping_relay_id_offset_cfg => { #Structure Type: Reg;
    Name => "vlan_mapping_relay_id_offset_cfg",
    RegMem => "Reg",
    Address => "113", # Excel Formula: =calc_reg_address(C60,A60,G60)
    Description => "Sets the offset to the relay ID field",
    Width => "7", # Excel Formula: =calc_reg_width(E64:E64,F64)
    Type => "Config",
    vlan_mapping_relay_id_offset => { #Structure Type: RegField;
      Name => "vlan_mapping_relay_id_offset",
      RegMem => "RegField",
      Description => "LSB offset in bits from the vlan mapping table result to the relay ID field",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F63,E64,TRUE)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "b0",
    },
  },
  per_slice_sm1_mask_cfg0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 23;
    Name => "per_slice_sm1_mask_cfg[2]",
    RegMem => "Reg",
    Address => "114", # Excel Formula: =calc_reg_address(C63,A63,G63)
    Description => "Slice[6]_sm1_mask_cfg",
    Width => "50", # Excel Formula: =calc_reg_width(E66:E66,F66)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    sm1_mask0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 9;
      Name => "sm1_mask[n]",
      RegMem => "RegField",
      Description => "when 'two-tables-access' is set (access-sm1=='1' in sm0-key-ctrls), lookup from SM-1 will be done with:
Key = (SM0-key (50) & mask (50))
NOTE: Used for inserting Port|Vlan|Vlan and Port|Vlan simultanously to both SM-table, priority to P|V|V",
      Width => "50",
      Position => "49:0", # Excel Formula: =calc_position(F65,E66,TRUE)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "h3ffffffffffff",
      InitValueAllModes => "0xffffffff",
    },
  },
  per_slice_sm1_mask_cfg1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 23;
    Name => "per_slice_sm1_mask_cfg[2]",
    RegMem => "Reg",
    Address => "115",
    Description => "Slice[6]_sm1_mask_cfg",
    Width => "50", # Excel Formula: =calc_reg_width(E66:E66,F66)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    sm1_mask1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 9;
      Name => "sm1_mask[n]",
      RegMem => "RegField",
      Description => "when 'two-tables-access' is set (access-sm1=='1' in sm0-key-ctrls), lookup from SM-1 will be done with:
Key = (SM0-key (50) & mask (50))
NOTE: Used for inserting Port|Vlan|Vlan and Port|Vlan simultanously to both SM-table, priority to P|V|V",
      Width => "50",
      Position => "49:0", # Excel Formula: =calc_position(F65,E66,TRUE)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "h3ffffffffffff",
      InitValueAllModes => "0xffffffff",
    },
  },
  sm_em_relay_id_offset_cfg => { #Structure Type: Reg;
    Name => "sm_em_relay_id_offset_cfg",
    RegMem => "Reg",
    Address => "116", # Excel Formula: =calc_reg_address(C65,A65,G65)
    Description => "sm_em_relay_id_offset",
    Width => "7", # Excel Formula: =calc_reg_width(E68:E68,F68)
    Type => "Config",
    sm_em_relay_id_offset => { #Structure Type: RegField;
      Name => "sm_em_relay_id_offset",
      RegMem => "RegField",
      Description => "defines the offset of service mapping relay id in service mapping result. ",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F67,E68,TRUE)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "h0",
      InitValueAllModes => "0",
    },
  },
  sm_em_lp_id_offset_cfg => { #Structure Type: Reg;
    Name => "sm_em_lp_id_offset_cfg",
    RegMem => "Reg",
    Address => "117", # Excel Formula: =calc_reg_address(C67,A67,G67)
    Description => "sm_em_lp_id_offset",
    Width => "7", # Excel Formula: =calc_reg_width(E70:E70,F70)
    Type => "Config",
    sm_em_lp_id_offset => { #Structure Type: RegField;
      Name => "sm_em_lp_id_offset",
      RegMem => "RegField",
      Description => "defines the offset of service mapping lp id in service mapping result. ",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F69,E70,TRUE)
      Type => "Config",
      UsedBy => "macdb",
      DefaultValue => "d14",
      InitValueAllModes => "14",
    },
  },
  vlan_membership_table0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
    Name => "vlan_membership_table[2]",
    RegMem => "Mem",
    Address => "100000",
    Description => "vlan_membership_table*2 (logical-depth = 128K)
0,1: txpp-vlan-membership",
    Width => "39", # Excel Formula: =calc_mem_width(E72:E72,M71,F72,-1)
    Type => "Config",
    UsedBy => "idb",
    MemEntries => "4096", # Excel Formula: =2^12
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SamplePhysicalMem=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "32",
    vlan_membership_table_field0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 28;
      Name => "vlan_membership_table_field[n]",
      RegMem => "MemField",
      Description => "vlan_membership_table_field",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F71,E72,TRUE)
    },
  },
  vlan_membership_table1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
    Name => "vlan_membership_table[2]",
    RegMem => "Mem",
    Address => "200000",
    Description => "vlan_membership_table*2 (logical-depth = 128K)
0,1: txpp-vlan-membership",
    Width => "39", # Excel Formula: =calc_mem_width(E72:E72,M71,F72,-1)
    Type => "Config",
    UsedBy => "idb",
    MemEntries => "4096", # Excel Formula: =2^12
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SamplePhysicalMem=1,SampleReadAfterProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "32",
    vlan_membership_table_field1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 28;
      Name => "vlan_membership_table_field[n]",
      RegMem => "MemField",
      Description => "vlan_membership_table_field",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F71,E72,TRUE)
    },
  },
  large_relay_table => { #Structure Type: Mem;
    Name => "large_relay_table",
    RegMem => "Mem",
    Address => "300000", # Excel Formula: =calc_mem_address(C71,A71,G73,L73)
    Description => "Service relay-table (one table for slice-pairs)",
    Width => "88", # Excel Formula: =calc_mem_width(E74:E74,M73,F74,-1)
    Type => "Config",
    UsedBy => "macdb",
    MemEntries => "12288", # Excel Formula: =3*2^12
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleReadAfterProt=1,XorBankSample=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    MemLogicalWidth => "80",
    relay_attributes => { #Structure Type: MemField;
      Name => "relay_attributes",
      RegMem => "MemField",
      Description => "relay_attributes",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F73,E74,TRUE)
    },
  },
  small_relay_table0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 18;
    Name => "small_relay_table[2]",
    RegMem => "Mem",
    Address => "400000", # Excel Formula: =calc_mem_address(C73,A73,G75,L75)
    Description => "Link relay table or extension to Service-relay-table  (one table for slice-pairs)",
    Width => "88", # Excel Formula: =calc_mem_width(E76:E76,M75,F76,-1)
    Type => "Config",
    UsedBy => "macdb",
    MemEntries => "4096", # Excel Formula: =2^12
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleReadAfterProt=2,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    Comments => "read-latency is assuemd to be equla to the large-relay-table's latency",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "80",
    relay_attributes0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "relay_attributes[n]",
      RegMem => "MemField",
      Description => "relay_attributes",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
  },
  small_relay_table1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 18;
    Name => "small_relay_table[2]",
    RegMem => "Mem",
    Address => "500000",
    Description => "Link relay table or extension to Service-relay-table  (one table for slice-pairs)",
    Width => "88", # Excel Formula: =calc_mem_width(E76:E76,M75,F76,-1)
    Type => "Config",
    UsedBy => "macdb",
    MemEntries => "4096", # Excel Formula: =2^12
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleReadAfterProt=2,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    Comments => "read-latency is assuemd to be equla to the large-relay-table's latency",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "80",
    relay_attributes1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "relay_attributes[n]",
      RegMem => "MemField",
      Description => "relay_attributes",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F75,E76,TRUE)
    },
  },
  vlan_mapping_table => { #Structure Type: Mem;
    Name => "vlan_mapping_table",
    RegMem => "Mem",
    Address => "600000", # Excel Formula: =calc_mem_address(C75,A75,G77,L77)
    Description => "vlan_mapping_table  (one table for two slice-pairs)",
    Width => "89", # Excel Formula: =calc_mem_width(E78:E79,M77,F79,-1)
    Type => "Config",
    UsedBy => "macdb",
    MemEntries => "4096", # Excel Formula: =2^12
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleReadAfterProt=1,XorBankSample=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    MemLogicalWidth => "81",
    result => { #Structure Type: MemField;
      Name => "result",
      RegMem => "MemField",
      Description => "result",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F77,E78,TRUE)
    },
    hit => { #Structure Type: MemField;
      Name => "hit",
      RegMem => "MemField",
      Description => "when set, out-result will be taken from pld.result. Otherwise, will be taken from key.default-result",
      Width => "1",
      Position => "80", # Excel Formula: =calc_position(F78,E79)
    },
  },
  MymacTable0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 11;
    Name => "MymacTable[2]",
    RegMem => "Mem",
    Address => "600000", # Excel Formula: =calc_mem_address(C77,A77,G80,L80)
    Description => "mymac_em",
    Width => "160", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,-1)
    Type => "DocOnly",
    UsedBy => "macdb",
    MemEntries => "8192",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=40,SourceIdWidth=1,NumberOfBanks=4,NumberOfCamEntries=32,NumberOfParallelBanks=4,VerifierSampleReadBeforeProt=2,VerifierSamplePhysicalMem=1,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=0,VrfReadActivityFactor=100,VldWriteActivityFactor=0,VldReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "160",
    result0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 7;
      Name => "result[n]",
      RegMem => "MemField",
      Description => "mymac_em_pld",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  MymacTable1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 11;
    Name => "MymacTable[2]",
    RegMem => "Mem",
    Address => "700000",
    Description => "mymac_em",
    Width => "160", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,-1)
    Type => "DocOnly",
    UsedBy => "macdb",
    MemEntries => "8192",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=40,SourceIdWidth=1,NumberOfBanks=4,NumberOfCamEntries=32,NumberOfParallelBanks=4,VerifierSampleReadBeforeProt=2,VerifierSamplePhysicalMem=1,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=0,VrfReadActivityFactor=100,VldWriteActivityFactor=0,VldReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "160",
    result1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 7;
      Name => "result[n]",
      RegMem => "MemField",
      Description => "mymac_em_pld",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  lp_table => { #Structure Type: Mem;
    Name => "lp_table",
    RegMem => "Mem",
    Address => "700000", # Excel Formula: =calc_mem_address(C77,A77,G82,L82)
    Description => "lp-table: 64K",
    Width => "169", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,-1)
    Type => "Config",
    UsedBy => "macdb",
    MemEntries => "65536",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleReadAfterProt=1,XorBankSample=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100",
    MemLogicalWidth => "160",
    lp_attributes => { #Structure Type: MemField;
      Name => "lp_attributes",
      RegMem => "MemField",
      Description => "lp_attributes",
      Width => "160",
      Position => "159:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  ServiceMappingAccess0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 21;
    Name => "ServiceMappingAccess[2]",
    RegMem => "Mem",
    Address => "700000", # Excel Formula: =calc_mem_address(C82,A82,G84,L84)
    Description => "ServiceMapping -  64K",
    Width => "80", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "DocOnly",
    UsedBy => "macdb",
    MemEntries => "65536",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=50,SourceIdWidth=13,NumberOfBanks=8,NumberOfCamEntries=32,NumberOfParallelBanks=8,2PMemory=Enabled,ShareMemory=Enabled,VerifierSampleReadAccess=1,VerifierSampleReadBeforeProt=2,VerifierSamplePhysicalMem=1,VerifierSampleWriteAfterProt=1,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=0,VrfReadActivityFactor=100,VrfDisableSameAddressErr=Enabled,VrfEnableNonCpuRdWrSameAddress=Enabled,VldWriteActivityFactor=0,VldReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "80",
    pld0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 4;
      Name => "pld[n]",
      RegMem => "MemField",
      Description => "Key-size-0-Payload(38)
* may be used for as :{Spare-bits(8), Relay-ID(14), LP-ID(16)}
Key-size-1-Payload(60)
* may be used as: PWE/VPN attributes ",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F84,E85,TRUE)
      Comments => "50->80",
    },
  },
  ServiceMappingAccess1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 21;
    Name => "ServiceMappingAccess[2]",
    RegMem => "Mem",
    Address => "800000",
    Description => "ServiceMapping -  64K",
    Width => "80", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "DocOnly",
    UsedBy => "macdb",
    MemEntries => "65536",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=50,SourceIdWidth=13,NumberOfBanks=8,NumberOfCamEntries=32,NumberOfParallelBanks=8,2PMemory=Enabled,ShareMemory=Enabled,VerifierSampleReadAccess=1,VerifierSampleReadBeforeProt=2,VerifierSamplePhysicalMem=1,VerifierSampleWriteAfterProt=1,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=0,VrfReadActivityFactor=100,VrfDisableSameAddressErr=Enabled,VrfEnableNonCpuRdWrSameAddress=Enabled,VldWriteActivityFactor=0,VldReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "80",
    pld1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 4;
      Name => "pld[n]",
      RegMem => "MemField",
      Description => "Key-size-0-Payload(38)
* may be used for as :{Spare-bits(8), Relay-ID(14), LP-ID(16)}
Key-size-1-Payload(60)
* may be used as: PWE/VPN attributes ",
      Width => "80",
      Position => "79:0", # Excel Formula: =calc_position(F84,E85,TRUE)
      Comments => "50->80",
    },
  },
  MymacTableVerifier0 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19; Skip Register;
    Name => "MymacTableVerifier[8]",
    RegMem => "Mem",
    Address => "800000", # Excel Formula: =calc_mem_address(C82,A82,G86,L86)
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "199", # Excel Formula: =calc_mem_width(E87:E87,M86,F87,-1)
    Type => "Dynamic",
    UsedBy => "MymacTable",
    MemEntries => "2048",
    MemWrapper => "1P",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    MemLogicalWidth => "199",
    MymacTableVerifier0Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "MymacTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "199",
      Position => "198:0", # Excel Formula: =calc_position(F86,E87,TRUE)
    },
  },
  MymacTableVerifier1 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19; Skip Register;
    Name => "MymacTableVerifier[8]",
    RegMem => "Mem",
    Address => "900000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "199", # Excel Formula: =calc_mem_width(E87:E87,M86,F87,-1)
    Type => "Dynamic",
    UsedBy => "MymacTable",
    MemEntries => "2048",
    MemWrapper => "1P",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    MemLogicalWidth => "199",
    MymacTableVerifier1Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "MymacTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "199",
      Position => "198:0", # Excel Formula: =calc_position(F86,E87,TRUE)
    },
  },
  MymacTableVerifier2 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19; Skip Register;
    Name => "MymacTableVerifier[8]",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "199", # Excel Formula: =calc_mem_width(E87:E87,M86,F87,-1)
    Type => "Dynamic",
    UsedBy => "MymacTable",
    MemEntries => "2048",
    MemWrapper => "1P",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    MemLogicalWidth => "199",
    MymacTableVerifier2Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "MymacTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "199",
      Position => "198:0", # Excel Formula: =calc_position(F86,E87,TRUE)
    },
  },
  MymacTableVerifier3 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19; Skip Register;
    Name => "MymacTableVerifier[8]",
    RegMem => "Mem",
    Address => "B00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "199", # Excel Formula: =calc_mem_width(E87:E87,M86,F87,-1)
    Type => "Dynamic",
    UsedBy => "MymacTable",
    MemEntries => "2048",
    MemWrapper => "1P",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    MemLogicalWidth => "199",
    MymacTableVerifier3Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "MymacTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "199",
      Position => "198:0", # Excel Formula: =calc_position(F86,E87,TRUE)
    },
  },
  MymacTableVerifier4 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19; Skip Register;
    Name => "MymacTableVerifier[8]",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "199", # Excel Formula: =calc_mem_width(E87:E87,M86,F87,-1)
    Type => "Dynamic",
    UsedBy => "MymacTable",
    MemEntries => "2048",
    MemWrapper => "1P",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    MemLogicalWidth => "199",
    MymacTableVerifier4Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "MymacTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "199",
      Position => "198:0", # Excel Formula: =calc_position(F86,E87,TRUE)
    },
  },
  MymacTableVerifier5 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19; Skip Register;
    Name => "MymacTableVerifier[8]",
    RegMem => "Mem",
    Address => "D00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "199", # Excel Formula: =calc_mem_width(E87:E87,M86,F87,-1)
    Type => "Dynamic",
    UsedBy => "MymacTable",
    MemEntries => "2048",
    MemWrapper => "1P",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    MemLogicalWidth => "199",
    MymacTableVerifier5Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "MymacTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "199",
      Position => "198:0", # Excel Formula: =calc_position(F86,E87,TRUE)
    },
  },
  MymacTableVerifier6 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19; Skip Register;
    Name => "MymacTableVerifier[8]",
    RegMem => "Mem",
    Address => "E00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "199", # Excel Formula: =calc_mem_width(E87:E87,M86,F87,-1)
    Type => "Dynamic",
    UsedBy => "MymacTable",
    MemEntries => "2048",
    MemWrapper => "1P",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    MemLogicalWidth => "199",
    MymacTableVerifier6Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "MymacTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "199",
      Position => "198:0", # Excel Formula: =calc_position(F86,E87,TRUE)
    },
  },
  MymacTableVerifier7 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19; Skip Register;
    Name => "MymacTableVerifier[8]",
    RegMem => "Mem",
    Address => "F00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "199", # Excel Formula: =calc_mem_width(E87:E87,M86,F87,-1)
    Type => "Dynamic",
    UsedBy => "MymacTable",
    MemEntries => "2048",
    MemWrapper => "1P",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    MemLogicalWidth => "199",
    MymacTableVerifier7Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "MymacTableVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "199",
      Position => "198:0", # Excel Formula: =calc_position(F86,E87,TRUE)
    },
  },
  MymacTablePerBankReg0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 21; Skip Register;
    Name => "MymacTablePerBankReg[8]",
    RegMem => "Reg",
    Address => "118", # Excel Formula: =calc_reg_address(C69,A69,G69)
    Description => "EM bank configurations, see fields description",
    Width => "82", # Excel Formula: =calc_reg_width(E89:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    MymacTableActiveBanks0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "MymacTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F88,E89,TRUE)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "d1",
    },
    MymacTableHashKey0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "MymacTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "80",
      Position => "80:1", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 26;
      Name => "MymacTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "81", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
  },
  MymacTablePerBankReg1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 21; Skip Register;
    Name => "MymacTablePerBankReg[8]",
    RegMem => "Reg",
    Address => "119",
    Description => "EM bank configurations, see fields description",
    Width => "82", # Excel Formula: =calc_reg_width(E89:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    MymacTableActiveBanks1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "MymacTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F88,E89,TRUE)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "d1",
    },
    MymacTableHashKey1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "MymacTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "80",
      Position => "80:1", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 26;
      Name => "MymacTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "81", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
  },
  MymacTablePerBankReg2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 21; Skip Register;
    Name => "MymacTablePerBankReg[8]",
    RegMem => "Reg",
    Address => "11A",
    Description => "EM bank configurations, see fields description",
    Width => "82", # Excel Formula: =calc_reg_width(E89:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    MymacTableActiveBanks2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "MymacTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F88,E89,TRUE)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "d1",
    },
    MymacTableHashKey2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "MymacTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "80",
      Position => "80:1", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 26;
      Name => "MymacTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "81", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
  },
  MymacTablePerBankReg3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 21; Skip Register;
    Name => "MymacTablePerBankReg[8]",
    RegMem => "Reg",
    Address => "11B",
    Description => "EM bank configurations, see fields description",
    Width => "82", # Excel Formula: =calc_reg_width(E89:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    MymacTableActiveBanks3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "MymacTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F88,E89,TRUE)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "d1",
    },
    MymacTableHashKey3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "MymacTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "80",
      Position => "80:1", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 26;
      Name => "MymacTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "81", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
  },
  MymacTablePerBankReg4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 21; Skip Register;
    Name => "MymacTablePerBankReg[8]",
    RegMem => "Reg",
    Address => "11C",
    Description => "EM bank configurations, see fields description",
    Width => "82", # Excel Formula: =calc_reg_width(E89:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    MymacTableActiveBanks4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 22;
      Name => "MymacTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F88,E89,TRUE)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "d1",
    },
    MymacTableHashKey4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "MymacTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "80",
      Position => "80:1", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableUsePrimitiveCrc4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 26;
      Name => "MymacTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "81", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
  },
  MymacTablePerBankReg5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 21; Skip Register;
    Name => "MymacTablePerBankReg[8]",
    RegMem => "Reg",
    Address => "11D",
    Description => "EM bank configurations, see fields description",
    Width => "82", # Excel Formula: =calc_reg_width(E89:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    MymacTableActiveBanks5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 22;
      Name => "MymacTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F88,E89,TRUE)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "d1",
    },
    MymacTableHashKey5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "MymacTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "80",
      Position => "80:1", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableUsePrimitiveCrc5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 26;
      Name => "MymacTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "81", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
  },
  MymacTablePerBankReg6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 21; Skip Register;
    Name => "MymacTablePerBankReg[8]",
    RegMem => "Reg",
    Address => "11E",
    Description => "EM bank configurations, see fields description",
    Width => "82", # Excel Formula: =calc_reg_width(E89:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    MymacTableActiveBanks6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 22;
      Name => "MymacTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F88,E89,TRUE)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "d1",
    },
    MymacTableHashKey6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "MymacTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "80",
      Position => "80:1", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableUsePrimitiveCrc6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 26;
      Name => "MymacTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "81", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
  },
  MymacTablePerBankReg7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 21; Skip Register;
    Name => "MymacTablePerBankReg[8]",
    RegMem => "Reg",
    Address => "11F",
    Description => "EM bank configurations, see fields description",
    Width => "82", # Excel Formula: =calc_reg_width(E89:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    MymacTableActiveBanks7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 22;
      Name => "MymacTableActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F88,E89,TRUE)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "d1",
    },
    MymacTableHashKey7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18;
      Name => "MymacTableHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "80",
      Position => "80:1", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableUsePrimitiveCrc7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 26;
      Name => "MymacTableUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "81", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
  },
  MymacTablePerEmReg0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 19; Skip Register;
    Name => "MymacTablePerEmReg[2]",
    RegMem => "Reg",
    Address => "120", # Excel Formula: =calc_reg_address(C88,A88,G88)
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E93:E95,F95)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    MymacTableKeyWidth0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "MymacTableKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F92,E93,TRUE)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "MymacTableAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F93,E94)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "MymacTableBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F94,E95)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
  },
  MymacTablePerEmReg1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 19; Skip Register;
    Name => "MymacTablePerEmReg[2]",
    RegMem => "Reg",
    Address => "121",
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E93:E95,F95)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    MymacTableKeyWidth1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "MymacTableKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F92,E93,TRUE)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableAutoBubbleReq1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "MymacTableAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F93,E94)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
    MymacTableBubbleReqThreshold1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "MymacTableBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F94,E95)
      Type => "Config",
      UsedBy => "MymacTable",
      DefaultValue => "h0",
    },
  },
  MymacTableCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22; Skip Register;
    Name => "MymacTableCamWmMaxReg[2]",
    RegMem => "Reg",
    Address => "122", # Excel Formula: =calc_reg_address(C92,A92,G92)
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E97:E97,F97)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    MymacTableCamWmMax0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "MymacTableCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F96,E97,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  MymacTableCamWmMaxReg1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22; Skip Register;
    Name => "MymacTableCamWmMaxReg[2]",
    RegMem => "Reg",
    Address => "123",
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E97:E97,F97)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    MymacTableCamWmMax1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "MymacTableCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F96,E97,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  MymacTableAccessRegister0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 25; Skip Register;
    Name => "MymacTableAccessRegister[2]",
    RegMem => "Reg",
    Address => "124", # Excel Formula: =calc_reg_address(C96,A96,G96)
    Description => "EM indirect access configurations",
    Width => "220", # Excel Formula: =calc_reg_width(E99:E99,F99)
    Type => "External",
    UsedBy => "em_top",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    MymacTableAccessReg0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "MymacTableAccessReg[n]",
      RegMem => "RegField",
      Description => "See EM spec for register usage",
      Width => "220",
      Position => "219:0", # Excel Formula: =calc_position(F98,E99,TRUE)
      Type => "External",
    },
  },
  MymacTableAccessRegister1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 25; Skip Register;
    Name => "MymacTableAccessRegister[2]",
    RegMem => "Reg",
    Address => "125",
    Description => "EM indirect access configurations",
    Width => "220", # Excel Formula: =calc_reg_width(E99:E99,F99)
    Type => "External",
    UsedBy => "em_top",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    MymacTableAccessReg1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "MymacTableAccessReg[n]",
      RegMem => "RegField",
      Description => "See EM spec for register usage",
      Width => "220",
      Position => "219:0", # Excel Formula: =calc_position(F98,E99,TRUE)
      Type => "External",
    },
  },
  MymacTableResponseRegister0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 27; Skip Register;
    Name => "MymacTableResponseRegister[2]",
    RegMem => "Reg",
    Address => "126", # Excel Formula: =calc_reg_address(C98,A98,G98)
    Description => "EM indirect access data",
    Width => "220", # Excel Formula: =calc_reg_width(E101:E102,F102)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    MymacTableResponseValid0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "MymacTableResponseValid[n]",
      RegMem => "RegField",
      Description => "EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F100,E101,TRUE)
      Type => "Event",
      UsedBy => "emdb",
    },
    MymacTableResponseReg0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "MymacTableResponseReg[n]",
      RegMem => "RegField",
      Description => "EM indirect access data, see EM spec for register usage",
      Width => "219",
      Position => "219:1", # Excel Formula: =calc_position(F101,E102)
      Type => "Capture",
      UsedBy => "emdb",
    },
  },
  MymacTableResponseRegister1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 27; Skip Register;
    Name => "MymacTableResponseRegister[2]",
    RegMem => "Reg",
    Address => "127",
    Description => "EM indirect access data",
    Width => "220", # Excel Formula: =calc_reg_width(E101:E102,F102)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    MymacTableResponseValid1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "MymacTableResponseValid[n]",
      RegMem => "RegField",
      Description => "EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F100,E101,TRUE)
      Type => "Event",
      UsedBy => "emdb",
    },
    MymacTableResponseReg1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "MymacTableResponseReg[n]",
      RegMem => "RegField",
      Description => "EM indirect access data, see EM spec for register usage",
      Width => "219",
      Position => "219:1", # Excel Formula: =calc_position(F101,E102)
      Type => "Capture",
      UsedBy => "emdb",
    },
  },
  MymacTableCam0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14; Skip Register;
    Name => "MymacTableCam[2]",
    RegMem => "Mem",
    Address => "1000000", # Excel Formula: =calc_mem_address(C86,A86,G103,L103)
    Description => "EM fallback CAM",
    Width => "201", # Excel Formula: =calc_mem_width(E104:E106,"None",F106,-1)
    Type => "Dynamic",
    UsedBy => "MymacTable",
    MemEntries => "32",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=160,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "201",
    MymacTableCam0_key => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "MymacTableCam[n]_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "40",
      Position => "39:0", # Excel Formula: =calc_position(F103,E104,TRUE)
    },
    MymacTableCam0_payload => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "MymacTableCam[n]_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "160",
      Position => "199:40", # Excel Formula: =calc_position(F104,E105)
    },
    MymacTableCam0_valid => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "MymacTableCam[n]_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "200", # Excel Formula: =calc_position(F105,E106)
    },
  },
  MymacTableCam1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14; Skip Register;
    Name => "MymacTableCam[2]",
    RegMem => "Mem",
    Address => "1100000",
    Description => "EM fallback CAM",
    Width => "201", # Excel Formula: =calc_mem_width(E104:E106,"None",F106,-1)
    Type => "Dynamic",
    UsedBy => "MymacTable",
    MemEntries => "32",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=160,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "201",
    MymacTableCam1_key => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "MymacTableCam[n]_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "40",
      Position => "39:0", # Excel Formula: =calc_position(F103,E104,TRUE)
    },
    MymacTableCam1_payload => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "MymacTableCam[n]_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "160",
      Position => "199:40", # Excel Formula: =calc_position(F104,E105)
    },
    MymacTableCam1_valid => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "MymacTableCam[n]_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "200", # Excel Formula: =calc_position(F105,E106)
    },
  },
  ServiceMappingAccessVerifier0 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]",
    RegMem => "Mem",
    Address => "1200000", # Excel Formula: =calc_mem_address(C103,A103,G107,L107)
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "126", # Excel Formula: =calc_mem_width(E108:E108,M107,F108,-1)
    Type => "Dynamic",
    UsedBy => "ServiceMappingAccess",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    MemLogicalWidth => "126",
    ServiceMappingAccessVerifier0Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "126",
      Position => "125:0", # Excel Formula: =calc_position(F107,E108,TRUE)
    },
  },
  ServiceMappingAccessVerifier1 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]",
    RegMem => "Mem",
    Address => "1300000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "126", # Excel Formula: =calc_mem_width(E108:E108,M107,F108,-1)
    Type => "Dynamic",
    UsedBy => "ServiceMappingAccess",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    MemLogicalWidth => "126",
    ServiceMappingAccessVerifier1Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "126",
      Position => "125:0", # Excel Formula: =calc_position(F107,E108,TRUE)
    },
  },
  ServiceMappingAccessVerifier2 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]",
    RegMem => "Mem",
    Address => "1400000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "126", # Excel Formula: =calc_mem_width(E108:E108,M107,F108,-1)
    Type => "Dynamic",
    UsedBy => "ServiceMappingAccess",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    MemLogicalWidth => "126",
    ServiceMappingAccessVerifier2Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "126",
      Position => "125:0", # Excel Formula: =calc_position(F107,E108,TRUE)
    },
  },
  ServiceMappingAccessVerifier3 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]",
    RegMem => "Mem",
    Address => "1500000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "126", # Excel Formula: =calc_mem_width(E108:E108,M107,F108,-1)
    Type => "Dynamic",
    UsedBy => "ServiceMappingAccess",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    MemLogicalWidth => "126",
    ServiceMappingAccessVerifier3Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "126",
      Position => "125:0", # Excel Formula: =calc_position(F107,E108,TRUE)
    },
  },
  ServiceMappingAccessVerifier4 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]",
    RegMem => "Mem",
    Address => "1600000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "126", # Excel Formula: =calc_mem_width(E108:E108,M107,F108,-1)
    Type => "Dynamic",
    UsedBy => "ServiceMappingAccess",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    MemLogicalWidth => "126",
    ServiceMappingAccessVerifier4Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "126",
      Position => "125:0", # Excel Formula: =calc_position(F107,E108,TRUE)
    },
  },
  ServiceMappingAccessVerifier5 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]",
    RegMem => "Mem",
    Address => "1700000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "126", # Excel Formula: =calc_mem_width(E108:E108,M107,F108,-1)
    Type => "Dynamic",
    UsedBy => "ServiceMappingAccess",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    MemLogicalWidth => "126",
    ServiceMappingAccessVerifier5Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "126",
      Position => "125:0", # Excel Formula: =calc_position(F107,E108,TRUE)
    },
  },
  ServiceMappingAccessVerifier6 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]",
    RegMem => "Mem",
    Address => "1800000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "126", # Excel Formula: =calc_mem_width(E108:E108,M107,F108,-1)
    Type => "Dynamic",
    UsedBy => "ServiceMappingAccess",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    MemLogicalWidth => "126",
    ServiceMappingAccessVerifier6Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "126",
      Position => "125:0", # Excel Formula: =calc_position(F107,E108,TRUE)
    },
  },
  ServiceMappingAccessVerifier7 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]",
    RegMem => "Mem",
    Address => "1900000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "126", # Excel Formula: =calc_mem_width(E108:E108,M107,F108,-1)
    Type => "Dynamic",
    UsedBy => "ServiceMappingAccess",
    MemEntries => "8192",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,SampleReadAccess=1,SampleReadBeforeProt=2,SamplePhysicalMem=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    MemLogicalWidth => "126",
    ServiceMappingAccessVerifier7Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "126",
      Position => "125:0", # Excel Formula: =calc_position(F107,E108,TRUE)
    },
  },
  ServiceMappingAccessPerBankReg0 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "128", # Excel Formula: =calc_reg_address(C100,A100,G100)
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "0",
    ServiceMappingAccessActiveBanks0 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey0 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg1 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "129",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "1",
    ServiceMappingAccessActiveBanks1 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey1 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg2 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "12A",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "2",
    ServiceMappingAccessActiveBanks2 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey2 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg3 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "12B",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "3",
    ServiceMappingAccessActiveBanks3 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey3 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg4 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "12C",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "4",
    ServiceMappingAccessActiveBanks4 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey4 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc4 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg5 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "12D",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "5",
    ServiceMappingAccessActiveBanks5 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey5 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc5 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg6 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "12E",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "6",
    ServiceMappingAccessActiveBanks6 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey6 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc6 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg7 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "12F",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "7",
    ServiceMappingAccessActiveBanks7 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey7 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc7 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg8 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "130",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "8",
    ServiceMappingAccessActiveBanks8 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey8 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc8 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg9 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "131",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "9",
    ServiceMappingAccessActiveBanks9 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey9 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc9 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg10 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "132",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "10",
    ServiceMappingAccessActiveBanks10 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey10 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc10 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg11 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "133",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "11",
    ServiceMappingAccessActiveBanks11 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey11 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc11 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg12 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "134",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "12",
    ServiceMappingAccessActiveBanks12 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey12 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc12 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg13 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "135",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "13",
    ServiceMappingAccessActiveBanks13 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey13 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc13 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg14 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "136",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "14",
    ServiceMappingAccessActiveBanks14 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey14 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc14 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerBankReg15 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 31; Skip Register;
    Name => "ServiceMappingAccessPerBankReg[16]",
    RegMem => "Reg",
    Address => "137",
    Description => "EM bank configurations, see fields description",
    Width => "102", # Excel Formula: =calc_reg_width(E110:E112,F112)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "15",
    ServiceMappingAccessActiveBanks15 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "d1",
    },
    ServiceMappingAccessHashKey15 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 28;
      Name => "ServiceMappingAccessHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "100",
      Position => "100:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessUsePrimitiveCrc15 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 36;
      Name => "ServiceMappingAccessUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "101", # Excel Formula: =calc_position(F111,E112)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerEmReg0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessPerEmReg[2]",
    RegMem => "Reg",
    Address => "138", # Excel Formula: =calc_reg_address(C109,A109,G109)
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E114:E116,F116)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    ServiceMappingAccessKeyWidth0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F113,E114,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 34;
      Name => "ServiceMappingAccessAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F114,E115)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 39;
      Name => "ServiceMappingAccessBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F115,E116)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessPerEmReg1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessPerEmReg[2]",
    RegMem => "Reg",
    Address => "139",
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E114:E116,F116)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    ServiceMappingAccessKeyWidth1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F113,E114,TRUE)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessAutoBubbleReq1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 34;
      Name => "ServiceMappingAccessAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F114,E115)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
    ServiceMappingAccessBubbleReqThreshold1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 39;
      Name => "ServiceMappingAccessBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F115,E116)
      Type => "Config",
      UsedBy => "ServiceMappingAccess",
      DefaultValue => "h0",
    },
  },
  ServiceMappingAccessCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 32; Skip Register;
    Name => "ServiceMappingAccessCamWmMaxReg[2]",
    RegMem => "Reg",
    Address => "13A", # Excel Formula: =calc_reg_address(C113,A113,G113)
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E118:E118,F118)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    ServiceMappingAccessCamWmMax0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F117,E118,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  ServiceMappingAccessCamWmMaxReg1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 32; Skip Register;
    Name => "ServiceMappingAccessCamWmMaxReg[2]",
    RegMem => "Reg",
    Address => "13B",
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E118:E118,F118)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    ServiceMappingAccessCamWmMax1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F117,E118,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  ServiceMappingAccessAccessRegister0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 35; Skip Register;
    Name => "ServiceMappingAccessAccessRegister[2]",
    RegMem => "Reg",
    Address => "13C", # Excel Formula: =calc_reg_address(C117,A117,G117)
    Description => "EM indirect access configurations",
    Width => "156", # Excel Formula: =calc_reg_width(E120:E120,F120)
    Type => "External",
    UsedBy => "em_top",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    ServiceMappingAccessAccessReg0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 30;
      Name => "ServiceMappingAccessAccessReg[n]",
      RegMem => "RegField",
      Description => "See EM spec for register usage",
      Width => "156",
      Position => "155:0", # Excel Formula: =calc_position(F119,E120,TRUE)
      Type => "External",
    },
  },
  ServiceMappingAccessAccessRegister1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 35; Skip Register;
    Name => "ServiceMappingAccessAccessRegister[2]",
    RegMem => "Reg",
    Address => "13D",
    Description => "EM indirect access configurations",
    Width => "156", # Excel Formula: =calc_reg_width(E120:E120,F120)
    Type => "External",
    UsedBy => "em_top",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    ServiceMappingAccessAccessReg1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 30;
      Name => "ServiceMappingAccessAccessReg[n]",
      RegMem => "RegField",
      Description => "See EM spec for register usage",
      Width => "156",
      Position => "155:0", # Excel Formula: =calc_position(F119,E120,TRUE)
      Type => "External",
    },
  },
  ServiceMappingAccessResponseRegister0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 37; Skip Register;
    Name => "ServiceMappingAccessResponseRegister[2]",
    RegMem => "Reg",
    Address => "13E", # Excel Formula: =calc_reg_address(C119,A119,G119)
    Description => "EM indirect access data",
    Width => "153", # Excel Formula: =calc_reg_width(E122:E123,F123)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    ServiceMappingAccessResponseValid0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 34;
      Name => "ServiceMappingAccessResponseValid[n]",
      RegMem => "RegField",
      Description => "EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F121,E122,TRUE)
      Type => "Event",
      UsedBy => "emdb",
    },
    ServiceMappingAccessResponseReg0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessResponseReg[n]",
      RegMem => "RegField",
      Description => "EM indirect access data, see EM spec for register usage",
      Width => "152",
      Position => "152:1", # Excel Formula: =calc_position(F122,E123)
      Type => "Capture",
      UsedBy => "emdb",
    },
  },
  ServiceMappingAccessResponseRegister1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 37; Skip Register;
    Name => "ServiceMappingAccessResponseRegister[2]",
    RegMem => "Reg",
    Address => "13F",
    Description => "EM indirect access data",
    Width => "153", # Excel Formula: =calc_reg_width(E122:E123,F123)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    ServiceMappingAccessResponseValid1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 34;
      Name => "ServiceMappingAccessResponseValid[n]",
      RegMem => "RegField",
      Description => "EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F121,E122,TRUE)
      Type => "Event",
      UsedBy => "emdb",
    },
    ServiceMappingAccessResponseReg1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 32;
      Name => "ServiceMappingAccessResponseReg[n]",
      RegMem => "RegField",
      Description => "EM indirect access data, see EM spec for register usage",
      Width => "152",
      Position => "152:1", # Excel Formula: =calc_position(F122,E123)
      Type => "Capture",
      UsedBy => "emdb",
    },
  },
  ServiceMappingAccessCam0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24; Skip Register;
    Name => "ServiceMappingAccessCam[2]",
    RegMem => "Mem",
    Address => "1A00000", # Excel Formula: =calc_mem_address(C107,A107,G124,L124)
    Description => "EM fallback CAM",
    Width => "131", # Excel Formula: =calc_mem_width(E125:E127,"None",F127,-1)
    Type => "Dynamic",
    UsedBy => "ServiceMappingAccess",
    MemEntries => "32",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=80,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,NumCamLookupClients=2",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "131",
    ServiceMappingAccessCam0_key => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "ServiceMappingAccessCam[n]_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "50",
      Position => "49:0", # Excel Formula: =calc_position(F124,E125,TRUE)
    },
    ServiceMappingAccessCam0_payload => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "ServiceMappingAccessCam[n]_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "80",
      Position => "129:50", # Excel Formula: =calc_position(F125,E126)
    },
    ServiceMappingAccessCam0_valid => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "ServiceMappingAccessCam[n]_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "130", # Excel Formula: =calc_position(F126,E127)
    },
  },
  ServiceMappingAccessCam1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24; Skip Register;
    Name => "ServiceMappingAccessCam[2]",
    RegMem => "Mem",
    Address => "1B00000",
    Description => "EM fallback CAM",
    Width => "131", # Excel Formula: =calc_mem_width(E125:E127,"None",F127,-1)
    Type => "Dynamic",
    UsedBy => "ServiceMappingAccess",
    MemEntries => "32",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=80,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,NumCamLookupClients=2",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "131",
    ServiceMappingAccessCam1_key => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "ServiceMappingAccessCam[n]_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "50",
      Position => "49:0", # Excel Formula: =calc_position(F124,E125,TRUE)
    },
    ServiceMappingAccessCam1_payload => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "ServiceMappingAccessCam[n]_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "80",
      Position => "129:50", # Excel Formula: =calc_position(F125,E126)
    },
    ServiceMappingAccessCam1_valid => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "ServiceMappingAccessCam[n]_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "130", # Excel Formula: =calc_position(F126,E127)
    },
  },
  EmResponseInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "EmResponseInterrupt",
    RegMem => "Reg",
    Address => "140", # Excel Formula: =calc_reg_address(C121,A121,G121)
    Description => "EM indirect access data is valid",
    Width => "4", # Excel Formula: =calc_reg_width(E129:E132,F132)
    Type => "Interrupt",
    Comments => "EM Skip Reg",
    MymacTable0Resp => { #Structure Type: RegField;
      Name => "MymacTable0Resp",
      RegMem => "RegField",
      Description => "Relevant EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F128,E129,TRUE)
      Type => "Interrupt",
      UsedBy => "emdb",
    },
    MymacTable1Resp => { #Structure Type: RegField;
      Name => "MymacTable1Resp",
      RegMem => "RegField",
      Description => "Relevant EM indirect access data is valid",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F129,E130)
      Type => "Interrupt",
      UsedBy => "emdb",
    },
    ServiceMappingAccess0Resp => { #Structure Type: RegField;
      Name => "ServiceMappingAccess0Resp",
      RegMem => "RegField",
      Description => "Relevant EM indirect access data is valid",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F130,E131)
      Type => "Interrupt",
      UsedBy => "emdb",
    },
    ServiceMappingAccess1Resp => { #Structure Type: RegField;
      Name => "ServiceMappingAccess1Resp",
      RegMem => "RegField",
      Description => "Relevant EM indirect access data is valid",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F131,E132)
      Type => "Interrupt",
      UsedBy => "emdb",
    },
  },
  EmResponseInterruptMask => { #Structure Type: Reg; Skip Register; Skip Register;
    Name => "EmResponseInterruptMask",
    RegMem => "Reg",
    Address => "141",
    Description => "This register masks EmResponseInterrupt interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E129:E132,F132)
    Type => "InterruptMask",
    Comments => "EM Skip Reg",
    MymacTable0RespMask => { #Structure Type: RegField;
      Name => "MymacTable0RespMask",
      RegMem => "RegField",
      Description => "This field masks MymacTable0Resp interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F128,E129,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    MymacTable1RespMask => { #Structure Type: RegField;
      Name => "MymacTable1RespMask",
      RegMem => "RegField",
      Description => "This field masks MymacTable1Resp interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F129,E130)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    ServiceMappingAccess0RespMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccess0RespMask",
      RegMem => "RegField",
      Description => "This field masks ServiceMappingAccess0Resp interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F130,E131)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    ServiceMappingAccess1RespMask => { #Structure Type: RegField;
      Name => "ServiceMappingAccess1RespMask",
      RegMem => "RegField",
      Description => "This field masks ServiceMappingAccess1Resp interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F131,E132)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  EmResponseInterruptTest => { #Structure Type: Reg; Skip Register; Skip Register;
    Name => "EmResponseInterruptTest",
    RegMem => "Reg",
    Address => "142",
    Description => "This register tests EmResponseInterrupt interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E129:E132,F132)
    Type => "InterruptTest",
    Comments => "EM Skip Reg",
    MymacTable0RespTest => { #Structure Type: RegField;
      Name => "MymacTable0RespTest",
      RegMem => "RegField",
      Description => "This field tests MymacTable0Resp interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F128,E129,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    MymacTable1RespTest => { #Structure Type: RegField;
      Name => "MymacTable1RespTest",
      RegMem => "RegField",
      Description => "This field tests MymacTable1Resp interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F129,E130)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ServiceMappingAccess0RespTest => { #Structure Type: RegField;
      Name => "ServiceMappingAccess0RespTest",
      RegMem => "RegField",
      Description => "This field tests ServiceMappingAccess0Resp interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F130,E131)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ServiceMappingAccess1RespTest => { #Structure Type: RegField;
      Name => "ServiceMappingAccess1RespTest",
      RegMem => "RegField",
      Description => "This field tests ServiceMappingAccess1Resp interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F131,E132)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  large_relay_tableBubbleReqCfg => { #Structure Type: Reg; Skip Register;
    Name => "large_relay_tableBubbleReqCfg",
    RegMem => "Reg",
    Address => "143", # Excel Formula: =calc_reg_address(C128,A128,G128)
    Description => "Bubble request configurations for large_relay_table memory",
    Width => "16", # Excel Formula: =calc_reg_width(E134:E134,F134)
    Type => "Config",
    Comments => "EM Skip Reg",
    large_relay_tableBubbleTimerCfg => { #Structure Type: RegField;
      Name => "large_relay_tableBubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F133,E134,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  vlan_mapping_tableBubbleReqCfg => { #Structure Type: Reg; Skip Register;
    Name => "vlan_mapping_tableBubbleReqCfg",
    RegMem => "Reg",
    Address => "144", # Excel Formula: =calc_reg_address(C133,A133,G133)
    Description => "Bubble request configurations for vlan_mapping_table memory",
    Width => "16", # Excel Formula: =calc_reg_width(E136:E136,F136)
    Type => "Config",
    Comments => "EM Skip Reg",
    vlan_mapping_tableBubbleTimerCfg => { #Structure Type: RegField;
      Name => "vlan_mapping_tableBubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F135,E136,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  lp_tableBubbleReqCfg => { #Structure Type: Reg; Skip Register;
    Name => "lp_tableBubbleReqCfg",
    RegMem => "Reg",
    Address => "145", # Excel Formula: =calc_reg_address(C135,A135,G135)
    Description => "Bubble request configurations for lp_table memory",
    Width => "16", # Excel Formula: =calc_reg_width(E138:E138,F138)
    Type => "Config",
    Comments => "EM Skip Reg",
    lp_tableBubbleTimerCfg => { #Structure Type: RegField;
      Name => "lp_tableBubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F137,E138,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  ServiceMappingAccessVerifier0BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "146", # Excel Formula: =calc_reg_address(C137,A137,G137)
    Description => "Bubble request configurations for ServiceMappingAccessVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E140:E140,F140)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    ServiceMappingAccessVerifier0BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F139,E140,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  ServiceMappingAccessVerifier1BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "147",
    Description => "Bubble request configurations for ServiceMappingAccessVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E140:E140,F140)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    ServiceMappingAccessVerifier1BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F139,E140,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  ServiceMappingAccessVerifier2BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "148",
    Description => "Bubble request configurations for ServiceMappingAccessVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E140:E140,F140)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    ServiceMappingAccessVerifier2BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F139,E140,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  ServiceMappingAccessVerifier3BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "149",
    Description => "Bubble request configurations for ServiceMappingAccessVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E140:E140,F140)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    ServiceMappingAccessVerifier3BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F139,E140,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  ServiceMappingAccessVerifier4BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "14A",
    Description => "Bubble request configurations for ServiceMappingAccessVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E140:E140,F140)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    ServiceMappingAccessVerifier4BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F139,E140,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  ServiceMappingAccessVerifier5BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "14B",
    Description => "Bubble request configurations for ServiceMappingAccessVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E140:E140,F140)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    ServiceMappingAccessVerifier5BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F139,E140,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  ServiceMappingAccessVerifier6BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "14C",
    Description => "Bubble request configurations for ServiceMappingAccessVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E140:E140,F140)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    ServiceMappingAccessVerifier6BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F139,E140,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  ServiceMappingAccessVerifier7BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 29; Skip Register;
    Name => "ServiceMappingAccessVerifier[8]BubbleReqCfg",
    RegMem => "Reg",
    Address => "14D",
    Description => "Bubble request configurations for ServiceMappingAccessVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E140:E140,F140)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    ServiceMappingAccessVerifier7BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 29;
      Name => "ServiceMappingAccessVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F139,E140,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
};
