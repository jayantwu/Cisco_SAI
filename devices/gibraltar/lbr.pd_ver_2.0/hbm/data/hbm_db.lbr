$block{hbm} = {
  Defines_db => "W:\\design\\mmu\\verilog\\mmu_defines.v",
  ProjectName => "Gibraltar",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "10",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    GeneralInterruptRegisterSummary => { #Structure Type: RegField;
      Name => "GeneralInterruptRegisterSummary",
      RegMem => "RegField",
      Description => "When this bit is set, GeneralInterruptRegister has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
    ChannelInterrupts0Summary => { #Structure Type: RegField;
      Name => "ChannelInterrupts0Summary",
      RegMem => "RegField",
      Description => "When this bit is set, ChannelInterrupts0 has asserted interrupt",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
    },
    ChannelInterrupts1Summary => { #Structure Type: RegField;
      Name => "ChannelInterrupts1Summary",
      RegMem => "RegField",
      Description => "When this bit is set, ChannelInterrupts1 has asserted interrupt",
      Width => "1",
      Position => "3",
      Type => "Interrupt",
    },
    ChannelInterrupts2Summary => { #Structure Type: RegField;
      Name => "ChannelInterrupts2Summary",
      RegMem => "RegField",
      Description => "When this bit is set, ChannelInterrupts2 has asserted interrupt",
      Width => "1",
      Position => "4",
      Type => "Interrupt",
    },
    ChannelInterrupts3Summary => { #Structure Type: RegField;
      Name => "ChannelInterrupts3Summary",
      RegMem => "RegField",
      Description => "When this bit is set, ChannelInterrupts3 has asserted interrupt",
      Width => "1",
      Position => "5",
      Type => "Interrupt",
    },
    ChannelInterrupts4Summary => { #Structure Type: RegField;
      Name => "ChannelInterrupts4Summary",
      RegMem => "RegField",
      Description => "When this bit is set, ChannelInterrupts4 has asserted interrupt",
      Width => "1",
      Position => "6",
      Type => "Interrupt",
    },
    ChannelInterrupts5Summary => { #Structure Type: RegField;
      Name => "ChannelInterrupts5Summary",
      RegMem => "RegField",
      Description => "When this bit is set, ChannelInterrupts5 has asserted interrupt",
      Width => "1",
      Position => "7",
      Type => "Interrupt",
    },
    ChannelInterrupts6Summary => { #Structure Type: RegField;
      Name => "ChannelInterrupts6Summary",
      RegMem => "RegField",
      Description => "When this bit is set, ChannelInterrupts6 has asserted interrupt",
      Width => "1",
      Position => "8",
      Type => "Interrupt",
    },
    ChannelInterrupts7Summary => { #Structure Type: RegField;
      Name => "ChannelInterrupts7Summary",
      RegMem => "RegField",
      Description => "When this bit is set, ChannelInterrupts7 has asserted interrupt",
      Width => "1",
      Position => "9",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt test register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "49",
    Type => "Config",
    pc0_async_fifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo8Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo8Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo9Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo9Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo10Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo10Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo11Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo11Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo12Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo12Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo13Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo13Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo14Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo14Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo15Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo15Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo8Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo8Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "24",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo9Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo9Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "25",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo10Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo10Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "26",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo11Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo11Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "27",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo12Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo12Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "28",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo13Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo13Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "29",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo14Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo14Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "30",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo15Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo15Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "31",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "32",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "33",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "34",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "35",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "36",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "37",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "38",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "39",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo8Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo8Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "40",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo9Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo9Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "41",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo10Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo10Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "42",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo11Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo11Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "43",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo12Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo12Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "44",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo13Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo13Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "45",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo14Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo14Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "46",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo15Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo15Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "47",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    CaptureMemEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "CaptureMemEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "48",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "49",
    Type => "Config",
    pc0_async_fifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo8Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo8Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo9Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo9Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo10Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo10Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo11Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo11Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo12Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo12Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo13Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo13Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo14Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo14Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo15Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo15Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo8Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo8Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "24",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo9Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo9Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "25",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo10Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo10Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "26",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo11Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo11Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "27",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo12Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo12Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "28",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo13Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo13Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "29",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo14Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo14Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "30",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo15Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo15Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "31",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "32",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "33",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "34",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "35",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "36",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "37",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "38",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "39",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo8Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo8Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "40",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo9Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo9Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "41",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo10Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo10Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "42",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo11Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo11Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "43",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo12Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo12Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "44",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo13Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo13Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "45",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo14Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo14Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "46",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo15Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo15Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "47",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    CaptureMemEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "CaptureMemEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "48",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "49",
    Type => "Config",
    pc0_async_fifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo8Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo8Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo9Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo9Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo10Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo10Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo11Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo11Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo12Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo12Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo13Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo13Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo14Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo14Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo15Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo15Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo8Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo8Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "24",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo9Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo9Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "25",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo10Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo10Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "26",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo11Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo11Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "27",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo12Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo12Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "28",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo13Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo13Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "29",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo14Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo14Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "30",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo15Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo15Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "31",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "32",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "33",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "34",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "35",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "36",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "37",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "38",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "39",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo8Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo8Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "40",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo9Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo9Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "41",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo10Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo10Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "42",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo11Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo11Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "43",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo12Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo12Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "44",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo13Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo13Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "45",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo14Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo14Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "46",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo15Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo15Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "47",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CaptureMemEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "CaptureMemEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "48",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "49",
    Type => "Config",
    pc0_async_fifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo8Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo8Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo9Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo9Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo10Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo10Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo11Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo11Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo12Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo12Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo13Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo13Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo14Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo14Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo15Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo15Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo8Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo8Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "24",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo9Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo9Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "25",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo10Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo10Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "26",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo11Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo11Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "27",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo12Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo12Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "28",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo13Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo13Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "29",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo14Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo14Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "30",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo15Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo15Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "31",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "32",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "33",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "34",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "35",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "36",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "37",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "38",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "39",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo8Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo8Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "40",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo9Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo9Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "41",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo10Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo10Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "42",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo11Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo11Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "43",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo12Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo12Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "44",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo13Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo13Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "45",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo14Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo14Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "46",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo15Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo15Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "47",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CaptureMemEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "CaptureMemEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "48",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "49",
    Type => "ReadOnly",
    pc0_async_fifo0ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo1ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo2ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo3ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo4ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo5ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo6ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo7ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo8ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo8ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo9ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo9ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "9",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo10ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo10ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "10",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo11ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo11ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "11",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo12ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo12ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "12",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo13ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo13ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "13",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo14ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo14ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "14",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo15ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo15ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "15",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo0ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "16",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo1ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "17",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo2ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "18",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo3ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "19",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo4ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "20",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo5ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "21",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo6ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "22",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo7ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "23",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo8ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo8ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "24",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo9ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo9ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "25",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo10ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo10ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "26",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo11ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo11ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "27",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo12ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo12ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "28",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo13ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo13ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "29",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo14ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo14ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "30",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo15ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo15ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "31",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo0ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "32",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo1ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "33",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo2ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "34",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo3ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "35",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo4ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "36",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo5ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "37",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo6ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "38",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo7ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "39",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo8ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo8ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "40",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo9ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo9ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "41",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo10ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo10ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "42",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo11ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo11ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "43",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo12ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo12ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "44",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo13ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo13ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "45",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo14ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo14ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "46",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo15ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo15ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "47",
      Type => "Status",
      UsedBy => "SER",
    },
    CaptureMemErrInt => { #Structure Type: RegField;
      Name => "CaptureMemErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "48",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "10",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "8",
      Position => "7:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "9:8",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "7",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "6",
      Position => "5:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "73", # Excel Formula: =calc_reg_width(E25:E53,F53)
    Type => "Config",
    SACR1P_RME => { #Structure Type: RegField;
      Name => "SACR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACR1P_RM => { #Structure Type: RegField;
      Name => "SACR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RME => { #Structure Type: RegField;
      Name => "SACU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RM => { #Structure Type: RegField;
      Name => "SACU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "9:6", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RME => { #Structure Type: RegField;
      Name => "SADC1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RM => { #Structure Type: RegField;
      Name => "SADC1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "14:11", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEA => { #Structure Type: RegField;
      Name => "SADR2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "15", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMA => { #Structure Type: RegField;
      Name => "SADR2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "19:16", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEB => { #Structure Type: RegField;
      Name => "SADR2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMB => { #Structure Type: RegField;
      Name => "SADR2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "24:21", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEA => { #Structure Type: RegField;
      Name => "SADS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "25", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMA => { #Structure Type: RegField;
      Name => "SADS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "29:26", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEB => { #Structure Type: RegField;
      Name => "SADS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMB => { #Structure Type: RegField;
      Name => "SADS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "34:31", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RME => { #Structure Type: RegField;
      Name => "SASR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "35", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RM => { #Structure Type: RegField;
      Name => "SASR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "39:36", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RME => { #Structure Type: RegField;
      Name => "SASS1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RM => { #Structure Type: RegField;
      Name => "SASS1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "44:41", # Excel Formula: =calc_position(F41,E42)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEA => { #Structure Type: RegField;
      Name => "SASS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "45", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMA => { #Structure Type: RegField;
      Name => "SASS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "49:46", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEB => { #Structure Type: RegField;
      Name => "SASS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMB => { #Structure Type: RegField;
      Name => "SASS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "54:51", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RME => { #Structure Type: RegField;
      Name => "SASU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "55", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RM => { #Structure Type: RegField;
      Name => "SASU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "59:56", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RME => { #Structure Type: RegField;
      Name => "SADU1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "60", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RM => { #Structure Type: RegField;
      Name => "SADU1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "64:61", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RA => { #Structure Type: RegField;
      Name => "SADS2P_RA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Assist for Dual port",
      Width => "2",
      Position => "66:65", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_WA => { #Structure Type: RegField;
      Name => "SADU1P_WA",
      RegMem => "RegField",
      Description => "Write-Assist configuration for the SP SADU compiler",
      Width => "3",
      Position => "69:67", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d5",
    },
    SADU1P_WPULSE => { #Structure Type: RegField;
      Name => "SADU1P_WPULSE",
      RegMem => "RegField",
      Description => "Write-Assist-Pulse configuration for the SP SADU compiler",
      Width => "3",
      Position => "72:70", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E55:E55,F55)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "Spare register",
    Width => "128", # Excel Formula: =calc_reg_width(E57:E57,F57)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "Spare register ",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C56,A56,G56)
    Description => "PMRO controller configuration",
    Width => "32", # Excel Formula: =calc_reg_width(E59:E63,F63)
    Type => "Config",
    PmroRstn => { #Structure Type: RegField;
      Name => "PmroRstn",
      RegMem => "RegField",
      Description => "PMRO reset, active low",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroConfigEn => { #Structure Type: RegField;
      Name => "PmroConfigEn",
      RegMem => "RegField",
      Description => "Enable pmro configuration, when equals to 0 configurations are locked",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroStart => { #Structure Type: RegField;
      Name => "PmroStart",
      RegMem => "RegField",
      Description => "Start the pmro operation",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroRingEn => { #Structure Type: RegField;
      Name => "PmroRingEn",
      RegMem => "RegField",
      Description => "Determines which PMRO ring to activate, should be configured as one hot",
      Width => "7",
      Position => "9:3", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroCntPeriod => { #Structure Type: RegField;
      Name => "PmroCntPeriod",
      RegMem => "RegField",
      Description => "Number of core clock cycles on which PMRO is measured",
      Width => "22",
      Position => "31:10", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "h3FFFFF",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "PMRO status configuration",
    Width => "23", # Excel Formula: =calc_reg_width(E65:E66,F66)
    Type => "ReadOnly",
    PmroCountOut => { #Structure Type: RegField;
      Name => "PmroCountOut",
      RegMem => "RegField",
      Description => "The ring oscilator counter value.",
      Width => "22",
      Position => "21:0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Status",
      UsedBy => "pmro",
    },
    PmroDone => { #Structure Type: RegField;
      Name => "PmroDone",
      RegMem => "RegField",
      Description => "Pmro operation done, PmroCountOut is valid.",
      Width => "1",
      Position => "22", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "Mirror Bus configurations",
    Width => "11", # Excel Formula: =calc_reg_width(E68:E69,F69)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "Enable Mirror Bus",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F67,E68,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "Mirror Bus selector",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C67,A67,G67)
    Description => "Mirror Bus status result",
    Width => "32", # Excel Formula: =calc_reg_width(E71:E71,F71)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "Mirror Bus status result",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F70,E71,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C70,A70,G70)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E73:E73,F73)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  GeneralInterruptRegister => { #Structure Type: Reg;
    Name => "GeneralInterruptRegister",
    RegMem => "Reg",
    Address => "100",
    Description => "Interrupt",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "Interrupt",
    CattripInterrupt => { #Structure Type: RegField;
      Name => "CattripInterrupt",
      RegMem => "RegField",
      Description => "Catastrophic temperature indication from HBM die",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
  },
  GeneralInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "GeneralInterruptRegisterMask",
    RegMem => "Reg",
    Address => "101",
    Description => "This register masks GeneralInterruptRegister interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "InterruptMask",
    CattripInterruptMask => { #Structure Type: RegField;
      Name => "CattripInterruptMask",
      RegMem => "RegField",
      Description => "This field masks CattripInterrupt interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  GeneralInterruptRegisterTest => { #Structure Type: Reg; Skip Register;
    Name => "GeneralInterruptRegisterTest",
    RegMem => "Reg",
    Address => "102",
    Description => "This register tests GeneralInterruptRegister interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "InterruptTest",
    CattripInterruptTest => { #Structure Type: RegField;
      Name => "CattripInterruptTest",
      RegMem => "RegField",
      Description => "This field tests CattripInterrupt interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  ChannelInterrupts0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18;
    Name => "ChannelInterrupts[8]",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Interrupt",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "Interrupt",
    ArrayLength => "8",
    ArrayIndex => "0",
    AsyncFifoUnderflow0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had underflow. Fatal error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoOverflow0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had overflow. Fatal error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AddressParityError0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "AddressParityError[n]",
      RegMem => "RegField",
      Description => "Address parity error seen on HBM for this channel. Fatal error",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    OneBitEccError0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]",
      RegMem => "RegField",
      Description => "1b ECC error seen on HBM for this channel",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
  },
  ChannelInterrupts1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18;
    Name => "ChannelInterrupts[8]",
    RegMem => "Reg",
    Address => "104",
    Description => "Interrupt",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "Interrupt",
    ArrayLength => "8",
    ArrayIndex => "1",
    AsyncFifoUnderflow1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had underflow. Fatal error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoOverflow1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had overflow. Fatal error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AddressParityError1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "AddressParityError[n]",
      RegMem => "RegField",
      Description => "Address parity error seen on HBM for this channel. Fatal error",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    OneBitEccError1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]",
      RegMem => "RegField",
      Description => "1b ECC error seen on HBM for this channel",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
  },
  ChannelInterrupts2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18;
    Name => "ChannelInterrupts[8]",
    RegMem => "Reg",
    Address => "105",
    Description => "Interrupt",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "Interrupt",
    ArrayLength => "8",
    ArrayIndex => "2",
    AsyncFifoUnderflow2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had underflow. Fatal error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoOverflow2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had overflow. Fatal error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AddressParityError2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "AddressParityError[n]",
      RegMem => "RegField",
      Description => "Address parity error seen on HBM for this channel. Fatal error",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    OneBitEccError2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]",
      RegMem => "RegField",
      Description => "1b ECC error seen on HBM for this channel",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
  },
  ChannelInterrupts3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18;
    Name => "ChannelInterrupts[8]",
    RegMem => "Reg",
    Address => "106",
    Description => "Interrupt",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "Interrupt",
    ArrayLength => "8",
    ArrayIndex => "3",
    AsyncFifoUnderflow3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had underflow. Fatal error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoOverflow3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had overflow. Fatal error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AddressParityError3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "AddressParityError[n]",
      RegMem => "RegField",
      Description => "Address parity error seen on HBM for this channel. Fatal error",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    OneBitEccError3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]",
      RegMem => "RegField",
      Description => "1b ECC error seen on HBM for this channel",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
  },
  ChannelInterrupts4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18;
    Name => "ChannelInterrupts[8]",
    RegMem => "Reg",
    Address => "107",
    Description => "Interrupt",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "Interrupt",
    ArrayLength => "8",
    ArrayIndex => "4",
    AsyncFifoUnderflow4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had underflow. Fatal error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoOverflow4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had overflow. Fatal error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AddressParityError4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "AddressParityError[n]",
      RegMem => "RegField",
      Description => "Address parity error seen on HBM for this channel. Fatal error",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    OneBitEccError4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]",
      RegMem => "RegField",
      Description => "1b ECC error seen on HBM for this channel",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
  },
  ChannelInterrupts5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18;
    Name => "ChannelInterrupts[8]",
    RegMem => "Reg",
    Address => "108",
    Description => "Interrupt",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "Interrupt",
    ArrayLength => "8",
    ArrayIndex => "5",
    AsyncFifoUnderflow5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had underflow. Fatal error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoOverflow5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had overflow. Fatal error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AddressParityError5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "AddressParityError[n]",
      RegMem => "RegField",
      Description => "Address parity error seen on HBM for this channel. Fatal error",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    OneBitEccError5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]",
      RegMem => "RegField",
      Description => "1b ECC error seen on HBM for this channel",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
  },
  ChannelInterrupts6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18;
    Name => "ChannelInterrupts[8]",
    RegMem => "Reg",
    Address => "109",
    Description => "Interrupt",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "Interrupt",
    ArrayLength => "8",
    ArrayIndex => "6",
    AsyncFifoUnderflow6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had underflow. Fatal error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoOverflow6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had overflow. Fatal error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AddressParityError6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "AddressParityError[n]",
      RegMem => "RegField",
      Description => "Address parity error seen on HBM for this channel. Fatal error",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    OneBitEccError6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]",
      RegMem => "RegField",
      Description => "1b ECC error seen on HBM for this channel",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
  },
  ChannelInterrupts7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18;
    Name => "ChannelInterrupts[8]",
    RegMem => "Reg",
    Address => "10A",
    Description => "Interrupt",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "Interrupt",
    ArrayLength => "8",
    ArrayIndex => "7",
    AsyncFifoUnderflow7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had underflow. Fatal error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoOverflow7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]",
      RegMem => "RegField",
      Description => "Async FIFO had overflow. Fatal error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AddressParityError7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "AddressParityError[n]",
      RegMem => "RegField",
      Description => "Address parity error seen on HBM for this channel. Fatal error",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    OneBitEccError7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]",
      RegMem => "RegField",
      Description => "1b ECC error seen on HBM for this channel",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
  },
  ChannelInterrupts0Mask => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Mask",
    RegMem => "Reg",
    Address => "10B",
    Description => "This register masks ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptMask",
    ArrayLength => "8",
    ArrayIndex => "0",
    AsyncFifoUnderflow0Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoOverflow0Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AddressParityError0Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    OneBitEccError0Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  ChannelInterrupts1Mask => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Mask",
    RegMem => "Reg",
    Address => "10C",
    Description => "This register masks ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptMask",
    ArrayLength => "8",
    ArrayIndex => "1",
    AsyncFifoUnderflow1Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoOverflow1Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AddressParityError1Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    OneBitEccError1Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  ChannelInterrupts2Mask => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Mask",
    RegMem => "Reg",
    Address => "10D",
    Description => "This register masks ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptMask",
    ArrayLength => "8",
    ArrayIndex => "2",
    AsyncFifoUnderflow2Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoOverflow2Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AddressParityError2Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    OneBitEccError2Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  ChannelInterrupts3Mask => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Mask",
    RegMem => "Reg",
    Address => "10E",
    Description => "This register masks ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptMask",
    ArrayLength => "8",
    ArrayIndex => "3",
    AsyncFifoUnderflow3Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoOverflow3Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AddressParityError3Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    OneBitEccError3Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  ChannelInterrupts4Mask => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Mask",
    RegMem => "Reg",
    Address => "10F",
    Description => "This register masks ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptMask",
    ArrayLength => "8",
    ArrayIndex => "4",
    AsyncFifoUnderflow4Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoOverflow4Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AddressParityError4Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    OneBitEccError4Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  ChannelInterrupts5Mask => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Mask",
    RegMem => "Reg",
    Address => "110",
    Description => "This register masks ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptMask",
    ArrayLength => "8",
    ArrayIndex => "5",
    AsyncFifoUnderflow5Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoOverflow5Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AddressParityError5Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    OneBitEccError5Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  ChannelInterrupts6Mask => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Mask",
    RegMem => "Reg",
    Address => "111",
    Description => "This register masks ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptMask",
    ArrayLength => "8",
    ArrayIndex => "6",
    AsyncFifoUnderflow6Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoOverflow6Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AddressParityError6Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    OneBitEccError6Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  ChannelInterrupts7Mask => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Mask",
    RegMem => "Reg",
    Address => "112",
    Description => "This register masks ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptMask",
    ArrayLength => "8",
    ArrayIndex => "7",
    AsyncFifoUnderflow7Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoOverflow7Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AddressParityError7Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    OneBitEccError7Mask => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Mask",
      RegMem => "RegField",
      Description => "This field masks OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  ChannelInterrupts0Test => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Test",
    RegMem => "Reg",
    Address => "113",
    Description => "This register tests ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptTest",
    ArrayLength => "8",
    ArrayIndex => "0",
    AsyncFifoUnderflow0Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoOverflow0Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AddressParityError0Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Test",
      RegMem => "RegField",
      Description => "This field tests AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    OneBitEccError0Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Test",
      RegMem => "RegField",
      Description => "This field tests OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  ChannelInterrupts1Test => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Test",
    RegMem => "Reg",
    Address => "114",
    Description => "This register tests ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptTest",
    ArrayLength => "8",
    ArrayIndex => "1",
    AsyncFifoUnderflow1Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoOverflow1Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AddressParityError1Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Test",
      RegMem => "RegField",
      Description => "This field tests AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    OneBitEccError1Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Test",
      RegMem => "RegField",
      Description => "This field tests OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  ChannelInterrupts2Test => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Test",
    RegMem => "Reg",
    Address => "115",
    Description => "This register tests ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptTest",
    ArrayLength => "8",
    ArrayIndex => "2",
    AsyncFifoUnderflow2Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoOverflow2Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AddressParityError2Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Test",
      RegMem => "RegField",
      Description => "This field tests AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    OneBitEccError2Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Test",
      RegMem => "RegField",
      Description => "This field tests OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  ChannelInterrupts3Test => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Test",
    RegMem => "Reg",
    Address => "116",
    Description => "This register tests ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptTest",
    ArrayLength => "8",
    ArrayIndex => "3",
    AsyncFifoUnderflow3Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoOverflow3Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AddressParityError3Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Test",
      RegMem => "RegField",
      Description => "This field tests AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    OneBitEccError3Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Test",
      RegMem => "RegField",
      Description => "This field tests OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  ChannelInterrupts4Test => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Test",
    RegMem => "Reg",
    Address => "117",
    Description => "This register tests ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptTest",
    ArrayLength => "8",
    ArrayIndex => "4",
    AsyncFifoUnderflow4Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoOverflow4Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AddressParityError4Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Test",
      RegMem => "RegField",
      Description => "This field tests AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    OneBitEccError4Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Test",
      RegMem => "RegField",
      Description => "This field tests OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  ChannelInterrupts5Test => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Test",
    RegMem => "Reg",
    Address => "118",
    Description => "This register tests ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptTest",
    ArrayLength => "8",
    ArrayIndex => "5",
    AsyncFifoUnderflow5Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoOverflow5Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AddressParityError5Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Test",
      RegMem => "RegField",
      Description => "This field tests AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    OneBitEccError5Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Test",
      RegMem => "RegField",
      Description => "This field tests OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  ChannelInterrupts6Test => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Test",
    RegMem => "Reg",
    Address => "119",
    Description => "This register tests ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptTest",
    ArrayLength => "8",
    ArrayIndex => "6",
    AsyncFifoUnderflow6Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoOverflow6Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AddressParityError6Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Test",
      RegMem => "RegField",
      Description => "This field tests AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    OneBitEccError6Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Test",
      RegMem => "RegField",
      Description => "This field tests OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  ChannelInterrupts7Test => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18; Skip Register;
    Name => "ChannelInterrupts[8]Test",
    RegMem => "Reg",
    Address => "11A",
    Description => "This register tests ChannelInterrupts[8] interrupt register",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "InterruptTest",
    ArrayLength => "8",
    ArrayIndex => "7",
    AsyncFifoUnderflow7Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "AsyncFifoUnderflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoUnderflow[n] interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoOverflow7Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18;
      Name => "AsyncFifoOverflow[n]Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoOverflow[n] interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AddressParityError7Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "AddressParityError[n]Test",
      RegMem => "RegField",
      Description => "This field tests AddressParityError[n] interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    OneBitEccError7Test => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "OneBitEccError[n]Test",
      RegMem => "RegField",
      Description => "This field tests OneBitEccError[n] interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  HbmResets => { #Structure Type: Reg;
    Name => "HbmResets",
    RegMem => "Reg",
    Address => "11B", # Excel Formula: =calc_reg_address(C9,A9,G9)
    Description => "Reset for parts of HBM module",
    Width => "12", # Excel Formula: =calc_reg_width(E15:E19,F19)
    Type => "Config",
    ApbRstn => { #Structure Type: RegField;
      Name => "ApbRstn",
      RegMem => "RegField",
      Description => "Reset for APB bus. Taken out of reset directly after soft_reset is removed",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F14,E15,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    IeeeWrstn => { #Structure Type: RegField;
      Name => "IeeeWrstn",
      RegMem => "RegField",
      Description => "Drives WRSTN on IEEE1500 interface to HBM. Take out of reset when programming HBM die, and return to reset for mission mode. Only used when UseIeeeBridge is set",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F15,E16)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    PllRstn => { #Structure Type: RegField;
      Name => "PllRstn",
      RegMem => "RegField",
      Description => "reset for HBM PLL.  Must be taken out of reset only after has been configured using APB or IEEE",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F16,E17)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    PhyRstn => { #Structure Type: RegField;
      Name => "PhyRstn",
      RegMem => "RegField",
      Description => "reset for HBM PHY",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F17,E18)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    DfiRstn => { #Structure Type: RegField;
      Name => "DfiRstn",
      RegMem => "RegField",
      Description => "When this is 0, the logic on dfi_clk inside HBM will be kept in reset. Must release this before taking HBM die out of reset. One bit per channel",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F18,E19)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HbmClockConfig => { #Structure Type: Reg;
    Name => "HbmClockConfig",
    RegMem => "Reg",
    Address => "11C", # Excel Formula: =calc_reg_address(C14,A14,G14)
    Description => "Config of divided clocks in HBM",
    Width => "14", # Excel Formula: =calc_reg_width(E21:E23,F23)
    Type => "Config",
    ApbClockDivision => { #Structure Type: RegField;
      Name => "ApbClockDivision",
      RegMem => "RegField",
      Description => "Number of core clocks for one APB clock. Max freq is 250 MHz. Default is 250 MHz for 1.5 GHz core clk",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F20,E21,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d6",
    },
    IeeeClockDivision => { #Structure Type: RegField;
      Name => "IeeeClockDivision",
      RegMem => "RegField",
      Description => "Number of core clocks for one IEEE1500 clock. Max is 50 MHz. Default is 50 MHz for 1.5 GHz core clk. Max supported divider value 63",
      Width => "8",
      Position => "12:5", # Excel Formula: =calc_position(F21,E22)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d30",
      DocName => " ",
    },
    UseIeeeBridge => { #Structure Type: RegField;
      Name => "UseIeeeBridge",
      RegMem => "RegField",
      Description => "0 : Drive the IEEE interface from external 1500 interface
1 : Drive the IEEE interface from cif2ieee bridge, by using ieee1500 virtual memory",
      Width => "1",
      Position => "13", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  AsyncFifoConfig0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "11D", # Excel Formula: =calc_reg_address(C20,A20,G20)
    Description => "Config of MMU to HBM async FIFO",
    Width => "7", # Excel Formula: =calc_reg_width(E25:E25,F25)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "0",
    AlmostFull0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
      DocName => "AlmostFullThreshold[n]",
    },
  },
  AsyncFifoConfig1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "11E",
    Description => "Config of MMU to HBM async FIFO",
    Width => "7", # Excel Formula: =calc_reg_width(E25:E25,F25)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "1",
    AlmostFull1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
      DocName => "AlmostFullThreshold[n]",
    },
  },
  AsyncFifoConfig2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "11F",
    Description => "Config of MMU to HBM async FIFO",
    Width => "7", # Excel Formula: =calc_reg_width(E25:E25,F25)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "2",
    AlmostFull2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
      DocName => "AlmostFullThreshold[n]",
    },
  },
  AsyncFifoConfig3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "120",
    Description => "Config of MMU to HBM async FIFO",
    Width => "7", # Excel Formula: =calc_reg_width(E25:E25,F25)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "3",
    AlmostFull3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
      DocName => "AlmostFullThreshold[n]",
    },
  },
  AsyncFifoConfig4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "121",
    Description => "Config of MMU to HBM async FIFO",
    Width => "7", # Excel Formula: =calc_reg_width(E25:E25,F25)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "4",
    AlmostFull4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
      DocName => "AlmostFullThreshold[n]",
    },
  },
  AsyncFifoConfig5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "122",
    Description => "Config of MMU to HBM async FIFO",
    Width => "7", # Excel Formula: =calc_reg_width(E25:E25,F25)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "5",
    AlmostFull5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
      DocName => "AlmostFullThreshold[n]",
    },
  },
  AsyncFifoConfig6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "123",
    Description => "Config of MMU to HBM async FIFO",
    Width => "7", # Excel Formula: =calc_reg_width(E25:E25,F25)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "6",
    AlmostFull6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
      DocName => "AlmostFullThreshold[n]",
    },
  },
  AsyncFifoConfig7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "124",
    Description => "Config of MMU to HBM async FIFO",
    Width => "7", # Excel Formula: =calc_reg_width(E25:E25,F25)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "7",
    AlmostFull7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
      DocName => "AlmostFullThreshold[n]",
    },
  },
  PhyModeConfig0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 14;
    Name => "PhyModeConfig[8]",
    RegMem => "Reg",
    Address => "125", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Config of HBM PHY",
    Width => "1", # Excel Formula: =calc_reg_width(E27:E27,F27)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "0",
    PhyMode0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 8;
      Name => "PhyMode[n]",
      RegMem => "RegField",
      Description => "0 : Use 1:1 DFI freq mode
1 : Use 2:1 DFI freq mode",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  PhyModeConfig1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 14;
    Name => "PhyModeConfig[8]",
    RegMem => "Reg",
    Address => "126",
    Description => "Config of HBM PHY",
    Width => "1", # Excel Formula: =calc_reg_width(E27:E27,F27)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "1",
    PhyMode1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 8;
      Name => "PhyMode[n]",
      RegMem => "RegField",
      Description => "0 : Use 1:1 DFI freq mode
1 : Use 2:1 DFI freq mode",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  PhyModeConfig2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 14;
    Name => "PhyModeConfig[8]",
    RegMem => "Reg",
    Address => "127",
    Description => "Config of HBM PHY",
    Width => "1", # Excel Formula: =calc_reg_width(E27:E27,F27)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "2",
    PhyMode2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 8;
      Name => "PhyMode[n]",
      RegMem => "RegField",
      Description => "0 : Use 1:1 DFI freq mode
1 : Use 2:1 DFI freq mode",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  PhyModeConfig3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 14;
    Name => "PhyModeConfig[8]",
    RegMem => "Reg",
    Address => "128",
    Description => "Config of HBM PHY",
    Width => "1", # Excel Formula: =calc_reg_width(E27:E27,F27)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "3",
    PhyMode3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 8;
      Name => "PhyMode[n]",
      RegMem => "RegField",
      Description => "0 : Use 1:1 DFI freq mode
1 : Use 2:1 DFI freq mode",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  PhyModeConfig4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 14;
    Name => "PhyModeConfig[8]",
    RegMem => "Reg",
    Address => "129",
    Description => "Config of HBM PHY",
    Width => "1", # Excel Formula: =calc_reg_width(E27:E27,F27)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "4",
    PhyMode4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 8;
      Name => "PhyMode[n]",
      RegMem => "RegField",
      Description => "0 : Use 1:1 DFI freq mode
1 : Use 2:1 DFI freq mode",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  PhyModeConfig5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 14;
    Name => "PhyModeConfig[8]",
    RegMem => "Reg",
    Address => "12A",
    Description => "Config of HBM PHY",
    Width => "1", # Excel Formula: =calc_reg_width(E27:E27,F27)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "5",
    PhyMode5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 8;
      Name => "PhyMode[n]",
      RegMem => "RegField",
      Description => "0 : Use 1:1 DFI freq mode
1 : Use 2:1 DFI freq mode",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  PhyModeConfig6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 14;
    Name => "PhyModeConfig[8]",
    RegMem => "Reg",
    Address => "12B",
    Description => "Config of HBM PHY",
    Width => "1", # Excel Formula: =calc_reg_width(E27:E27,F27)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "6",
    PhyMode6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 8;
      Name => "PhyMode[n]",
      RegMem => "RegField",
      Description => "0 : Use 1:1 DFI freq mode
1 : Use 2:1 DFI freq mode",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  PhyModeConfig7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 14;
    Name => "PhyModeConfig[8]",
    RegMem => "Reg",
    Address => "12C",
    Description => "Config of HBM PHY",
    Width => "1", # Excel Formula: =calc_reg_width(E27:E27,F27)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "7",
    PhyMode7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 8;
      Name => "PhyMode[n]",
      RegMem => "RegField",
      Description => "0 : Use 1:1 DFI freq mode
1 : Use 2:1 DFI freq mode",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  TempWatermarkReg => { #Structure Type: Reg;
    Name => "TempWatermarkReg",
    RegMem => "Reg",
    Address => "12D", # Excel Formula: =calc_reg_address(C26,A26,G26)
    Description => "High watermark of 3b temperature interface from HBM",
    Width => "3", # Excel Formula: =calc_reg_width(E29:E29,F29)
    Type => "ReadOnly",
    TempWatermark => { #Structure Type: RegField;
      Name => "TempWatermark",
      RegMem => "RegField",
      Description => "High watermark of 3b temperature interface from HBM. Encoded by HBM.",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F28,E29,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  PllLockedStatus => { #Structure Type: Reg;
    Name => "PllLockedStatus",
    RegMem => "Reg",
    Address => "12E", # Excel Formula: =calc_reg_address(C28,A28,G28)
    Description => "High watermark of 3b temperature interface from HBM",
    Width => "1", # Excel Formula: =calc_reg_width(E31:E31,F31)
    Type => "ReadOnly",
    PllLocked => { #Structure Type: RegField;
      Name => "PllLocked",
      RegMem => "RegField",
      Description => "pll_locked output from HBM PHY PLL",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  ApbCtrl => { #Structure Type: Reg;
    Name => "ApbCtrl",
    RegMem => "Reg",
    Address => "12F", # Excel Formula: =calc_reg_address(C30,A30,G30)
    Description => "Control for APB or IEEE control of PHY CSRs",
    Width => "2", # Excel Formula: =calc_reg_width(E33:E34,F34)
    Type => "Config",
    ApbCtrlReq => { #Structure Type: RegField;
      Name => "ApbCtrlReq",
      RegMem => "RegField",
      Description => "Raises change_ctrl_req signal. Must be kept high until change_ctrl_ack is raised, and then lowered",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    ApbCtrlMode => { #Structure Type: RegField;
      Name => "ApbCtrlMode",
      RegMem => "RegField",
      Description => "Must be stable before ApbCtrlReq is raised. 
0 : APB control of CSRs
1 : IEEE1500 control of PHY CSRs (default)",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  ApbCtrlStatus => { #Structure Type: Reg;
    Name => "ApbCtrlStatus",
    RegMem => "Reg",
    Address => "130", # Excel Formula: =calc_reg_address(C32,A32,G32)
    Description => "Status for APB or IEEE control of PHY CSRs",
    Width => "1", # Excel Formula: =calc_reg_width(E36:E36,F36)
    Type => "ReadOnly",
    ApbCtrlAck => { #Structure Type: RegField;
      Name => "ApbCtrlAck",
      RegMem => "RegField",
      Description => "Reflect change_ctrl_ack signal",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F35,E36,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  HbmConfig0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "131", # Excel Formula: =calc_reg_address(C35,A35,G35)
    Description => "Config of HBM macro",
    Width => "19", # Excel Formula: =calc_reg_width(E38:E40,F40)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "0",
    HbmPl0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into PHY. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F37,E38,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d2",
    },
    DbiByteEnable0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "DbiByteEnable[n]",
      RegMem => "RegField",
      Description => "Enable DBI functionality in HBM per data byte
0 - do not enable DBI
1 - enable DBI
Must match setting in HBM die. ",
      Width => "16",
      Position => "17:2", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "hffff",
    },
    CrcEnable0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "CrcEnable[n]",
      RegMem => "RegField",
      Description => "Enable CRC-8  checking 
0 - do not enable CRC
1 - enable CRC",
      Width => "1",
      Position => "18", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "132",
    Description => "Config of HBM macro",
    Width => "19", # Excel Formula: =calc_reg_width(E38:E40,F40)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "1",
    HbmPl1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into PHY. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F37,E38,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d2",
    },
    DbiByteEnable1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "DbiByteEnable[n]",
      RegMem => "RegField",
      Description => "Enable DBI functionality in HBM per data byte
0 - do not enable DBI
1 - enable DBI
Must match setting in HBM die. ",
      Width => "16",
      Position => "17:2", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "hffff",
    },
    CrcEnable1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "CrcEnable[n]",
      RegMem => "RegField",
      Description => "Enable CRC-8  checking 
0 - do not enable CRC
1 - enable CRC",
      Width => "1",
      Position => "18", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "133",
    Description => "Config of HBM macro",
    Width => "19", # Excel Formula: =calc_reg_width(E38:E40,F40)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "2",
    HbmPl2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into PHY. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F37,E38,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d2",
    },
    DbiByteEnable2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 14;
      Name => "DbiByteEnable[n]",
      RegMem => "RegField",
      Description => "Enable DBI functionality in HBM per data byte
0 - do not enable DBI
1 - enable DBI
Must match setting in HBM die. ",
      Width => "16",
      Position => "17:2", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "hffff",
    },
    CrcEnable2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "CrcEnable[n]",
      RegMem => "RegField",
      Description => "Enable CRC-8  checking 
0 - do not enable CRC
1 - enable CRC",
      Width => "1",
      Position => "18", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "134",
    Description => "Config of HBM macro",
    Width => "19", # Excel Formula: =calc_reg_width(E38:E40,F40)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "3",
    HbmPl3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into PHY. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F37,E38,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d2",
    },
    DbiByteEnable3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 14;
      Name => "DbiByteEnable[n]",
      RegMem => "RegField",
      Description => "Enable DBI functionality in HBM per data byte
0 - do not enable DBI
1 - enable DBI
Must match setting in HBM die. ",
      Width => "16",
      Position => "17:2", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "hffff",
    },
    CrcEnable3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "CrcEnable[n]",
      RegMem => "RegField",
      Description => "Enable CRC-8  checking 
0 - do not enable CRC
1 - enable CRC",
      Width => "1",
      Position => "18", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "135",
    Description => "Config of HBM macro",
    Width => "19", # Excel Formula: =calc_reg_width(E38:E40,F40)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "4",
    HbmPl4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into PHY. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F37,E38,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d2",
    },
    DbiByteEnable4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 14;
      Name => "DbiByteEnable[n]",
      RegMem => "RegField",
      Description => "Enable DBI functionality in HBM per data byte
0 - do not enable DBI
1 - enable DBI
Must match setting in HBM die. ",
      Width => "16",
      Position => "17:2", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "hffff",
    },
    CrcEnable4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 10;
      Name => "CrcEnable[n]",
      RegMem => "RegField",
      Description => "Enable CRC-8  checking 
0 - do not enable CRC
1 - enable CRC",
      Width => "1",
      Position => "18", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "136",
    Description => "Config of HBM macro",
    Width => "19", # Excel Formula: =calc_reg_width(E38:E40,F40)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "5",
    HbmPl5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into PHY. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F37,E38,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d2",
    },
    DbiByteEnable5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 14;
      Name => "DbiByteEnable[n]",
      RegMem => "RegField",
      Description => "Enable DBI functionality in HBM per data byte
0 - do not enable DBI
1 - enable DBI
Must match setting in HBM die. ",
      Width => "16",
      Position => "17:2", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "hffff",
    },
    CrcEnable5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 10;
      Name => "CrcEnable[n]",
      RegMem => "RegField",
      Description => "Enable CRC-8  checking 
0 - do not enable CRC
1 - enable CRC",
      Width => "1",
      Position => "18", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "137",
    Description => "Config of HBM macro",
    Width => "19", # Excel Formula: =calc_reg_width(E38:E40,F40)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "6",
    HbmPl6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into PHY. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F37,E38,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d2",
    },
    DbiByteEnable6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 14;
      Name => "DbiByteEnable[n]",
      RegMem => "RegField",
      Description => "Enable DBI functionality in HBM per data byte
0 - do not enable DBI
1 - enable DBI
Must match setting in HBM die. ",
      Width => "16",
      Position => "17:2", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "hffff",
    },
    CrcEnable6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 10;
      Name => "CrcEnable[n]",
      RegMem => "RegField",
      Description => "Enable CRC-8  checking 
0 - do not enable CRC
1 - enable CRC",
      Width => "1",
      Position => "18", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "138",
    Description => "Config of HBM macro",
    Width => "19", # Excel Formula: =calc_reg_width(E38:E40,F40)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "7",
    HbmPl7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into PHY. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F37,E38,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d2",
    },
    DbiByteEnable7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 14;
      Name => "DbiByteEnable[n]",
      RegMem => "RegField",
      Description => "Enable DBI functionality in HBM per data byte
0 - do not enable DBI
1 - enable DBI
Must match setting in HBM die. ",
      Width => "16",
      Position => "17:2", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "hffff",
    },
    CrcEnable7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 10;
      Name => "CrcEnable[n]",
      RegMem => "RegField",
      Description => "Enable CRC-8  checking 
0 - do not enable CRC
1 - enable CRC",
      Width => "1",
      Position => "18", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmDebug0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 9;
    Name => "HbmDebug[8]",
    RegMem => "Reg",
    Address => "139", # Excel Formula: =calc_reg_address(C37,A37,G37)
    Description => "Debug features for HBM",
    Width => "4", # Excel Formula: =calc_reg_width(E42:E45,F45)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "0",
    EccCheckEnable0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "Enable ECC checking on data read from HBM die. 
0 - do not enable ECC checking
1 - enable ECC checking",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F41,E42,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "Consider 1b (correctable) ECC error as an error in the read data packet
0 - do not consider 1b error as data error
1 - consider 1b error as data error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "Pass on parity error on Rx data to MMU. 
0 - do not pass on parity error to MMU
1 - pass on parity error to MMU
The error will always be counted in the counters",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    IgnoreGenError0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "IgnoreGenError[n]",
      RegMem => "RegField",
      Description => "Ignore gen_error request from MMU
0 - do not ignore gen_error request (default)
1 - ignore gen_error request
When working with a traffic_gen, this should always be used",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HbmDebug1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 9;
    Name => "HbmDebug[8]",
    RegMem => "Reg",
    Address => "13A",
    Description => "Debug features for HBM",
    Width => "4", # Excel Formula: =calc_reg_width(E42:E45,F45)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "1",
    EccCheckEnable1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "Enable ECC checking on data read from HBM die. 
0 - do not enable ECC checking
1 - enable ECC checking",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F41,E42,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "Consider 1b (correctable) ECC error as an error in the read data packet
0 - do not consider 1b error as data error
1 - consider 1b error as data error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "Pass on parity error on Rx data to MMU. 
0 - do not pass on parity error to MMU
1 - pass on parity error to MMU
The error will always be counted in the counters",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    IgnoreGenError1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "IgnoreGenError[n]",
      RegMem => "RegField",
      Description => "Ignore gen_error request from MMU
0 - do not ignore gen_error request (default)
1 - ignore gen_error request
When working with a traffic_gen, this should always be used",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HbmDebug2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 9;
    Name => "HbmDebug[8]",
    RegMem => "Reg",
    Address => "13B",
    Description => "Debug features for HBM",
    Width => "4", # Excel Formula: =calc_reg_width(E42:E45,F45)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "2",
    EccCheckEnable2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "Enable ECC checking on data read from HBM die. 
0 - do not enable ECC checking
1 - enable ECC checking",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F41,E42,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "Consider 1b (correctable) ECC error as an error in the read data packet
0 - do not consider 1b error as data error
1 - consider 1b error as data error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "Pass on parity error on Rx data to MMU. 
0 - do not pass on parity error to MMU
1 - pass on parity error to MMU
The error will always be counted in the counters",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    IgnoreGenError2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "IgnoreGenError[n]",
      RegMem => "RegField",
      Description => "Ignore gen_error request from MMU
0 - do not ignore gen_error request (default)
1 - ignore gen_error request
When working with a traffic_gen, this should always be used",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HbmDebug3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 9;
    Name => "HbmDebug[8]",
    RegMem => "Reg",
    Address => "13C",
    Description => "Debug features for HBM",
    Width => "4", # Excel Formula: =calc_reg_width(E42:E45,F45)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "3",
    EccCheckEnable3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "Enable ECC checking on data read from HBM die. 
0 - do not enable ECC checking
1 - enable ECC checking",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F41,E42,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "Consider 1b (correctable) ECC error as an error in the read data packet
0 - do not consider 1b error as data error
1 - consider 1b error as data error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "Pass on parity error on Rx data to MMU. 
0 - do not pass on parity error to MMU
1 - pass on parity error to MMU
The error will always be counted in the counters",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    IgnoreGenError3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "IgnoreGenError[n]",
      RegMem => "RegField",
      Description => "Ignore gen_error request from MMU
0 - do not ignore gen_error request (default)
1 - ignore gen_error request
When working with a traffic_gen, this should always be used",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HbmDebug4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 9;
    Name => "HbmDebug[8]",
    RegMem => "Reg",
    Address => "13D",
    Description => "Debug features for HBM",
    Width => "4", # Excel Formula: =calc_reg_width(E42:E45,F45)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "4",
    EccCheckEnable4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "Enable ECC checking on data read from HBM die. 
0 - do not enable ECC checking
1 - enable ECC checking",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F41,E42,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "Consider 1b (correctable) ECC error as an error in the read data packet
0 - do not consider 1b error as data error
1 - consider 1b error as data error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "Pass on parity error on Rx data to MMU. 
0 - do not pass on parity error to MMU
1 - pass on parity error to MMU
The error will always be counted in the counters",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    IgnoreGenError4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "IgnoreGenError[n]",
      RegMem => "RegField",
      Description => "Ignore gen_error request from MMU
0 - do not ignore gen_error request (default)
1 - ignore gen_error request
When working with a traffic_gen, this should always be used",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HbmDebug5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 9;
    Name => "HbmDebug[8]",
    RegMem => "Reg",
    Address => "13E",
    Description => "Debug features for HBM",
    Width => "4", # Excel Formula: =calc_reg_width(E42:E45,F45)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "5",
    EccCheckEnable5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "Enable ECC checking on data read from HBM die. 
0 - do not enable ECC checking
1 - enable ECC checking",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F41,E42,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "Consider 1b (correctable) ECC error as an error in the read data packet
0 - do not consider 1b error as data error
1 - consider 1b error as data error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "Pass on parity error on Rx data to MMU. 
0 - do not pass on parity error to MMU
1 - pass on parity error to MMU
The error will always be counted in the counters",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    IgnoreGenError5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "IgnoreGenError[n]",
      RegMem => "RegField",
      Description => "Ignore gen_error request from MMU
0 - do not ignore gen_error request (default)
1 - ignore gen_error request
When working with a traffic_gen, this should always be used",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HbmDebug6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 9;
    Name => "HbmDebug[8]",
    RegMem => "Reg",
    Address => "13F",
    Description => "Debug features for HBM",
    Width => "4", # Excel Formula: =calc_reg_width(E42:E45,F45)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "6",
    EccCheckEnable6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "Enable ECC checking on data read from HBM die. 
0 - do not enable ECC checking
1 - enable ECC checking",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F41,E42,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "Consider 1b (correctable) ECC error as an error in the read data packet
0 - do not consider 1b error as data error
1 - consider 1b error as data error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "Pass on parity error on Rx data to MMU. 
0 - do not pass on parity error to MMU
1 - pass on parity error to MMU
The error will always be counted in the counters",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    IgnoreGenError6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "IgnoreGenError[n]",
      RegMem => "RegField",
      Description => "Ignore gen_error request from MMU
0 - do not ignore gen_error request (default)
1 - ignore gen_error request
When working with a traffic_gen, this should always be used",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HbmDebug7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 9;
    Name => "HbmDebug[8]",
    RegMem => "Reg",
    Address => "140",
    Description => "Debug features for HBM",
    Width => "4", # Excel Formula: =calc_reg_width(E42:E45,F45)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "7",
    EccCheckEnable7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "Enable ECC checking on data read from HBM die. 
0 - do not enable ECC checking
1 - enable ECC checking",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F41,E42,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "Consider 1b (correctable) ECC error as an error in the read data packet
0 - do not consider 1b error as data error
1 - consider 1b error as data error",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "Pass on parity error on Rx data to MMU. 
0 - do not pass on parity error to MMU
1 - pass on parity error to MMU
The error will always be counted in the counters",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    IgnoreGenError7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "IgnoreGenError[n]",
      RegMem => "RegField",
      Description => "Ignore gen_error request from MMU
0 - do not ignore gen_error request (default)
1 - ignore gen_error request
When working with a traffic_gen, this should always be used",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HbmErrorCounters0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "141", # Excel Formula: =calc_reg_address(C41,A41,G41)
    Description => "Error counters for HBM interface Errors",
    Width => "176", # Excel Formula: =calc_reg_width(E47:E57,F57)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "0",
    DerrCntrDw00 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 12;
      Name => "DerrCntrDw0[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW0, or DQ bits 31:0",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F46,E47,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw10 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 12;
      Name => "DerrCntrDw1[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW1, or DQ bits 63:32",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F47,E48)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw20 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 12;
      Name => "DerrCntrDw2[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW2, or DQ bits 95:64",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F48,E49)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw30 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 12;
      Name => "DerrCntrDw3[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW3, or DQ bits 127:96",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F49,E50)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AerrCntr0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 9;
      Name => "AerrCntr[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors indicated by AERR from HBM die. These errors are ignored by MMU",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F50,E51)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc00 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC0",
      Width => "16",
      Position => "95:80", # Excel Formula: =calc_position(F51,E52)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc10 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC1",
      Width => "16",
      Position => "111:96", # Excel Formula: =calc_position(F52,E53)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc00 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC0",
      Width => "16",
      Position => "127:112", # Excel Formula: =calc_position(F53,E54)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc10 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC1",
      Width => "16",
      Position => "143:128", # Excel Formula: =calc_position(F54,E55)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc00 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC0",
      Width => "16",
      Position => "159:144", # Excel Formula: =calc_position(F55,E56)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc10 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC1",
      Width => "16",
      Position => "175:160", # Excel Formula: =calc_position(F56,E57)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "142",
    Description => "Error counters for HBM interface Errors",
    Width => "176", # Excel Formula: =calc_reg_width(E47:E57,F57)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "1",
    DerrCntrDw01 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 12;
      Name => "DerrCntrDw0[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW0, or DQ bits 31:0",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F46,E47,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw11 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 12;
      Name => "DerrCntrDw1[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW1, or DQ bits 63:32",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F47,E48)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw21 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 12;
      Name => "DerrCntrDw2[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW2, or DQ bits 95:64",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F48,E49)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw31 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 12;
      Name => "DerrCntrDw3[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW3, or DQ bits 127:96",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F49,E50)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AerrCntr1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 9;
      Name => "AerrCntr[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors indicated by AERR from HBM die. These errors are ignored by MMU",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F50,E51)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc01 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC0",
      Width => "16",
      Position => "95:80", # Excel Formula: =calc_position(F51,E52)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc11 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC1",
      Width => "16",
      Position => "111:96", # Excel Formula: =calc_position(F52,E53)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc01 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC0",
      Width => "16",
      Position => "127:112", # Excel Formula: =calc_position(F53,E54)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc11 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC1",
      Width => "16",
      Position => "143:128", # Excel Formula: =calc_position(F54,E55)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc01 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC0",
      Width => "16",
      Position => "159:144", # Excel Formula: =calc_position(F55,E56)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc11 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC1",
      Width => "16",
      Position => "175:160", # Excel Formula: =calc_position(F56,E57)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "143",
    Description => "Error counters for HBM interface Errors",
    Width => "176", # Excel Formula: =calc_reg_width(E47:E57,F57)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "2",
    DerrCntrDw02 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 12;
      Name => "DerrCntrDw0[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW0, or DQ bits 31:0",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F46,E47,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw12 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 12;
      Name => "DerrCntrDw1[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW1, or DQ bits 63:32",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F47,E48)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw22 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 12;
      Name => "DerrCntrDw2[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW2, or DQ bits 95:64",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F48,E49)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw32 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 12;
      Name => "DerrCntrDw3[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW3, or DQ bits 127:96",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F49,E50)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AerrCntr2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 9;
      Name => "AerrCntr[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors indicated by AERR from HBM die. These errors are ignored by MMU",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F50,E51)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc02 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC0",
      Width => "16",
      Position => "95:80", # Excel Formula: =calc_position(F51,E52)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc12 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC1",
      Width => "16",
      Position => "111:96", # Excel Formula: =calc_position(F52,E53)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc02 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC0",
      Width => "16",
      Position => "127:112", # Excel Formula: =calc_position(F53,E54)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc12 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC1",
      Width => "16",
      Position => "143:128", # Excel Formula: =calc_position(F54,E55)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc02 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC0",
      Width => "16",
      Position => "159:144", # Excel Formula: =calc_position(F55,E56)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc12 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC1",
      Width => "16",
      Position => "175:160", # Excel Formula: =calc_position(F56,E57)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "144",
    Description => "Error counters for HBM interface Errors",
    Width => "176", # Excel Formula: =calc_reg_width(E47:E57,F57)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "3",
    DerrCntrDw03 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 12;
      Name => "DerrCntrDw0[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW0, or DQ bits 31:0",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F46,E47,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw13 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 12;
      Name => "DerrCntrDw1[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW1, or DQ bits 63:32",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F47,E48)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw23 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 12;
      Name => "DerrCntrDw2[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW2, or DQ bits 95:64",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F48,E49)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw33 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 12;
      Name => "DerrCntrDw3[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW3, or DQ bits 127:96",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F49,E50)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AerrCntr3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 9;
      Name => "AerrCntr[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors indicated by AERR from HBM die. These errors are ignored by MMU",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F50,E51)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc03 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC0",
      Width => "16",
      Position => "95:80", # Excel Formula: =calc_position(F51,E52)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc13 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC1",
      Width => "16",
      Position => "111:96", # Excel Formula: =calc_position(F52,E53)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc03 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC0",
      Width => "16",
      Position => "127:112", # Excel Formula: =calc_position(F53,E54)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc13 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC1",
      Width => "16",
      Position => "143:128", # Excel Formula: =calc_position(F54,E55)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc03 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC0",
      Width => "16",
      Position => "159:144", # Excel Formula: =calc_position(F55,E56)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc13 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC1",
      Width => "16",
      Position => "175:160", # Excel Formula: =calc_position(F56,E57)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "145",
    Description => "Error counters for HBM interface Errors",
    Width => "176", # Excel Formula: =calc_reg_width(E47:E57,F57)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "4",
    DerrCntrDw04 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 12;
      Name => "DerrCntrDw0[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW0, or DQ bits 31:0",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F46,E47,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw14 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 12;
      Name => "DerrCntrDw1[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW1, or DQ bits 63:32",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F47,E48)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw24 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 12;
      Name => "DerrCntrDw2[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW2, or DQ bits 95:64",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F48,E49)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw34 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 12;
      Name => "DerrCntrDw3[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW3, or DQ bits 127:96",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F49,E50)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AerrCntr4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 9;
      Name => "AerrCntr[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors indicated by AERR from HBM die. These errors are ignored by MMU",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F50,E51)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc04 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC0",
      Width => "16",
      Position => "95:80", # Excel Formula: =calc_position(F51,E52)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc14 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC1",
      Width => "16",
      Position => "111:96", # Excel Formula: =calc_position(F52,E53)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc04 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC0",
      Width => "16",
      Position => "127:112", # Excel Formula: =calc_position(F53,E54)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc14 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC1",
      Width => "16",
      Position => "143:128", # Excel Formula: =calc_position(F54,E55)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc04 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC0",
      Width => "16",
      Position => "159:144", # Excel Formula: =calc_position(F55,E56)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc14 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC1",
      Width => "16",
      Position => "175:160", # Excel Formula: =calc_position(F56,E57)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "146",
    Description => "Error counters for HBM interface Errors",
    Width => "176", # Excel Formula: =calc_reg_width(E47:E57,F57)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "5",
    DerrCntrDw05 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 12;
      Name => "DerrCntrDw0[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW0, or DQ bits 31:0",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F46,E47,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw15 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 12;
      Name => "DerrCntrDw1[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW1, or DQ bits 63:32",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F47,E48)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw25 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 12;
      Name => "DerrCntrDw2[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW2, or DQ bits 95:64",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F48,E49)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw35 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 12;
      Name => "DerrCntrDw3[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW3, or DQ bits 127:96",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F49,E50)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AerrCntr5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 9;
      Name => "AerrCntr[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors indicated by AERR from HBM die. These errors are ignored by MMU",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F50,E51)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc05 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC0",
      Width => "16",
      Position => "95:80", # Excel Formula: =calc_position(F51,E52)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc15 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC1",
      Width => "16",
      Position => "111:96", # Excel Formula: =calc_position(F52,E53)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc05 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC0",
      Width => "16",
      Position => "127:112", # Excel Formula: =calc_position(F53,E54)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc15 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC1",
      Width => "16",
      Position => "143:128", # Excel Formula: =calc_position(F54,E55)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc05 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC0",
      Width => "16",
      Position => "159:144", # Excel Formula: =calc_position(F55,E56)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc15 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC1",
      Width => "16",
      Position => "175:160", # Excel Formula: =calc_position(F56,E57)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "147",
    Description => "Error counters for HBM interface Errors",
    Width => "176", # Excel Formula: =calc_reg_width(E47:E57,F57)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "6",
    DerrCntrDw06 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 12;
      Name => "DerrCntrDw0[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW0, or DQ bits 31:0",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F46,E47,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw16 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 12;
      Name => "DerrCntrDw1[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW1, or DQ bits 63:32",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F47,E48)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw26 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 12;
      Name => "DerrCntrDw2[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW2, or DQ bits 95:64",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F48,E49)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw36 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 12;
      Name => "DerrCntrDw3[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW3, or DQ bits 127:96",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F49,E50)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AerrCntr6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 9;
      Name => "AerrCntr[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors indicated by AERR from HBM die. These errors are ignored by MMU",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F50,E51)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc06 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC0",
      Width => "16",
      Position => "95:80", # Excel Formula: =calc_position(F51,E52)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc16 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC1",
      Width => "16",
      Position => "111:96", # Excel Formula: =calc_position(F52,E53)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc06 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC0",
      Width => "16",
      Position => "127:112", # Excel Formula: =calc_position(F53,E54)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc16 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC1",
      Width => "16",
      Position => "143:128", # Excel Formula: =calc_position(F54,E55)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc06 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC0",
      Width => "16",
      Position => "159:144", # Excel Formula: =calc_position(F55,E56)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc16 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC1",
      Width => "16",
      Position => "175:160", # Excel Formula: =calc_position(F56,E57)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "148",
    Description => "Error counters for HBM interface Errors",
    Width => "176", # Excel Formula: =calc_reg_width(E47:E57,F57)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "7",
    DerrCntrDw07 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 12;
      Name => "DerrCntrDw0[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW0, or DQ bits 31:0",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F46,E47,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw17 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 12;
      Name => "DerrCntrDw1[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW1, or DQ bits 63:32",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F47,E48)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw27 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 12;
      Name => "DerrCntrDw2[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW2, or DQ bits 95:64",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F48,E49)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DerrCntrDw37 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 12;
      Name => "DerrCntrDw3[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors indicated by DERR from HBM die. These errors are ignored by MMU. Counter for DW3, or DQ bits 127:96",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F49,E50)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AerrCntr7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 9;
      Name => "AerrCntr[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors indicated by AERR from HBM die. These errors are ignored by MMU",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F50,E51)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc07 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC0",
      Width => "16",
      Position => "95:80", # Excel Formula: =calc_position(F51,E52)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrorCntrPc17 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 22;
      Name => "OneBitEccErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface on PC1",
      Width => "16",
      Position => "111:96", # Excel Formula: =calc_position(F52,E53)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc07 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC0",
      Width => "16",
      Position => "127:112", # Excel Formula: =calc_position(F53,E54)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrorCntrPc17 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 25;
      Name => "RdDataParityErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors on PC1",
      Width => "16",
      Position => "143:128", # Excel Formula: =calc_position(F54,E55)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc07 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC0",
      Width => "16",
      Position => "159:144", # Excel Formula: =calc_position(F55,E56)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CrcErrorCntrPc17 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "CrcErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Counter of CRC-8 errors on PC1",
      Width => "16",
      Position => "175:160", # Excel Formula: =calc_position(F56,E57)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorInjection0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18;
    Name => "HbmErrorInjection[8]",
    RegMem => "Reg",
    Address => "149", # Excel Formula: =calc_reg_address(C46,A46,G46)
    Description => "Interface to inject errors into stream seen by MMU",
    Width => "35", # Excel Formula: =calc_reg_width(E59:E62,F62)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "0",
    InjectErrors0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "InjectErrors[n]",
      RegMem => "RegField",
      Description => "0 : Do not inject errors into read data stream
1 : Inject errors into read data stream (debug use only)
Should be used together with IgnoreGenError to check buffer release mechanism in MMU",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    ErrorsToInject0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "ErrorsToInject[n]",
      RegMem => "RegField",
      Description => "Number of errors to inject. 0 means inject forever",
      Width => "16",
      Position => "16:1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CyclesBetweenErrors0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "CyclesBetweenErrors[n]",
      RegMem => "RegField",
      Description => "Number of core_clk cycles to wait in between error injections. Only counts cycles where have valid data to HBM",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d5",
    },
    InjectErrorType0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "InjectErrorType[n]",
      RegMem => "RegField",
      Description => "Type of error to inject
1 : parity error (inverts transmitted CRC)
2 : CRC error (CRC field is corrupted, data is valid)
3 : corrupted data",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmErrorInjection1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18;
    Name => "HbmErrorInjection[8]",
    RegMem => "Reg",
    Address => "14A",
    Description => "Interface to inject errors into stream seen by MMU",
    Width => "35", # Excel Formula: =calc_reg_width(E59:E62,F62)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "1",
    InjectErrors1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 13;
      Name => "InjectErrors[n]",
      RegMem => "RegField",
      Description => "0 : Do not inject errors into read data stream
1 : Inject errors into read data stream (debug use only)
Should be used together with IgnoreGenError to check buffer release mechanism in MMU",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    ErrorsToInject1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "ErrorsToInject[n]",
      RegMem => "RegField",
      Description => "Number of errors to inject. 0 means inject forever",
      Width => "16",
      Position => "16:1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CyclesBetweenErrors1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "CyclesBetweenErrors[n]",
      RegMem => "RegField",
      Description => "Number of core_clk cycles to wait in between error injections. Only counts cycles where have valid data to HBM",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d5",
    },
    InjectErrorType1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "InjectErrorType[n]",
      RegMem => "RegField",
      Description => "Type of error to inject
1 : parity error (inverts transmitted CRC)
2 : CRC error (CRC field is corrupted, data is valid)
3 : corrupted data",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmErrorInjection2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18;
    Name => "HbmErrorInjection[8]",
    RegMem => "Reg",
    Address => "14B",
    Description => "Interface to inject errors into stream seen by MMU",
    Width => "35", # Excel Formula: =calc_reg_width(E59:E62,F62)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "2",
    InjectErrors2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 13;
      Name => "InjectErrors[n]",
      RegMem => "RegField",
      Description => "0 : Do not inject errors into read data stream
1 : Inject errors into read data stream (debug use only)
Should be used together with IgnoreGenError to check buffer release mechanism in MMU",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    ErrorsToInject2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "ErrorsToInject[n]",
      RegMem => "RegField",
      Description => "Number of errors to inject. 0 means inject forever",
      Width => "16",
      Position => "16:1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CyclesBetweenErrors2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "CyclesBetweenErrors[n]",
      RegMem => "RegField",
      Description => "Number of core_clk cycles to wait in between error injections. Only counts cycles where have valid data to HBM",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d5",
    },
    InjectErrorType2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "InjectErrorType[n]",
      RegMem => "RegField",
      Description => "Type of error to inject
1 : parity error (inverts transmitted CRC)
2 : CRC error (CRC field is corrupted, data is valid)
3 : corrupted data",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmErrorInjection3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18;
    Name => "HbmErrorInjection[8]",
    RegMem => "Reg",
    Address => "14C",
    Description => "Interface to inject errors into stream seen by MMU",
    Width => "35", # Excel Formula: =calc_reg_width(E59:E62,F62)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "3",
    InjectErrors3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 13;
      Name => "InjectErrors[n]",
      RegMem => "RegField",
      Description => "0 : Do not inject errors into read data stream
1 : Inject errors into read data stream (debug use only)
Should be used together with IgnoreGenError to check buffer release mechanism in MMU",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    ErrorsToInject3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "ErrorsToInject[n]",
      RegMem => "RegField",
      Description => "Number of errors to inject. 0 means inject forever",
      Width => "16",
      Position => "16:1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CyclesBetweenErrors3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "CyclesBetweenErrors[n]",
      RegMem => "RegField",
      Description => "Number of core_clk cycles to wait in between error injections. Only counts cycles where have valid data to HBM",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d5",
    },
    InjectErrorType3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "InjectErrorType[n]",
      RegMem => "RegField",
      Description => "Type of error to inject
1 : parity error (inverts transmitted CRC)
2 : CRC error (CRC field is corrupted, data is valid)
3 : corrupted data",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmErrorInjection4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18;
    Name => "HbmErrorInjection[8]",
    RegMem => "Reg",
    Address => "14D",
    Description => "Interface to inject errors into stream seen by MMU",
    Width => "35", # Excel Formula: =calc_reg_width(E59:E62,F62)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "4",
    InjectErrors4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 13;
      Name => "InjectErrors[n]",
      RegMem => "RegField",
      Description => "0 : Do not inject errors into read data stream
1 : Inject errors into read data stream (debug use only)
Should be used together with IgnoreGenError to check buffer release mechanism in MMU",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    ErrorsToInject4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "ErrorsToInject[n]",
      RegMem => "RegField",
      Description => "Number of errors to inject. 0 means inject forever",
      Width => "16",
      Position => "16:1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CyclesBetweenErrors4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 20;
      Name => "CyclesBetweenErrors[n]",
      RegMem => "RegField",
      Description => "Number of core_clk cycles to wait in between error injections. Only counts cycles where have valid data to HBM",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d5",
    },
    InjectErrorType4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "InjectErrorType[n]",
      RegMem => "RegField",
      Description => "Type of error to inject
1 : parity error (inverts transmitted CRC)
2 : CRC error (CRC field is corrupted, data is valid)
3 : corrupted data",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmErrorInjection5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18;
    Name => "HbmErrorInjection[8]",
    RegMem => "Reg",
    Address => "14E",
    Description => "Interface to inject errors into stream seen by MMU",
    Width => "35", # Excel Formula: =calc_reg_width(E59:E62,F62)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "5",
    InjectErrors5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 13;
      Name => "InjectErrors[n]",
      RegMem => "RegField",
      Description => "0 : Do not inject errors into read data stream
1 : Inject errors into read data stream (debug use only)
Should be used together with IgnoreGenError to check buffer release mechanism in MMU",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    ErrorsToInject5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "ErrorsToInject[n]",
      RegMem => "RegField",
      Description => "Number of errors to inject. 0 means inject forever",
      Width => "16",
      Position => "16:1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CyclesBetweenErrors5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 20;
      Name => "CyclesBetweenErrors[n]",
      RegMem => "RegField",
      Description => "Number of core_clk cycles to wait in between error injections. Only counts cycles where have valid data to HBM",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d5",
    },
    InjectErrorType5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "InjectErrorType[n]",
      RegMem => "RegField",
      Description => "Type of error to inject
1 : parity error (inverts transmitted CRC)
2 : CRC error (CRC field is corrupted, data is valid)
3 : corrupted data",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmErrorInjection6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18;
    Name => "HbmErrorInjection[8]",
    RegMem => "Reg",
    Address => "14F",
    Description => "Interface to inject errors into stream seen by MMU",
    Width => "35", # Excel Formula: =calc_reg_width(E59:E62,F62)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "6",
    InjectErrors6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 13;
      Name => "InjectErrors[n]",
      RegMem => "RegField",
      Description => "0 : Do not inject errors into read data stream
1 : Inject errors into read data stream (debug use only)
Should be used together with IgnoreGenError to check buffer release mechanism in MMU",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    ErrorsToInject6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "ErrorsToInject[n]",
      RegMem => "RegField",
      Description => "Number of errors to inject. 0 means inject forever",
      Width => "16",
      Position => "16:1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CyclesBetweenErrors6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 20;
      Name => "CyclesBetweenErrors[n]",
      RegMem => "RegField",
      Description => "Number of core_clk cycles to wait in between error injections. Only counts cycles where have valid data to HBM",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d5",
    },
    InjectErrorType6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "InjectErrorType[n]",
      RegMem => "RegField",
      Description => "Type of error to inject
1 : parity error (inverts transmitted CRC)
2 : CRC error (CRC field is corrupted, data is valid)
3 : corrupted data",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmErrorInjection7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18;
    Name => "HbmErrorInjection[8]",
    RegMem => "Reg",
    Address => "150",
    Description => "Interface to inject errors into stream seen by MMU",
    Width => "35", # Excel Formula: =calc_reg_width(E59:E62,F62)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "7",
    InjectErrors7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 13;
      Name => "InjectErrors[n]",
      RegMem => "RegField",
      Description => "0 : Do not inject errors into read data stream
1 : Inject errors into read data stream (debug use only)
Should be used together with IgnoreGenError to check buffer release mechanism in MMU",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    ErrorsToInject7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "ErrorsToInject[n]",
      RegMem => "RegField",
      Description => "Number of errors to inject. 0 means inject forever",
      Width => "16",
      Position => "16:1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CyclesBetweenErrors7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 20;
      Name => "CyclesBetweenErrors[n]",
      RegMem => "RegField",
      Description => "Number of core_clk cycles to wait in between error injections. Only counts cycles where have valid data to HBM",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d5",
    },
    InjectErrorType7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "InjectErrorType[n]",
      RegMem => "RegField",
      Description => "Type of error to inject
1 : parity error (inverts transmitted CRC)
2 : CRC error (CRC field is corrupted, data is valid)
3 : corrupted data",
      Width => "2",
      Position => "34:33", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  CaptureMemConfig => { #Structure Type: Reg;
    Name => "CaptureMemConfig",
    RegMem => "Reg",
    Address => "151", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "Config of Capture Memory",
    Width => "59", # Excel Formula: =calc_reg_width(E64:E70,F70)
    Type => "Config",
    CaptureMemEnable => { #Structure Type: RegField;
      Name => "CaptureMemEnable",
      RegMem => "RegField",
      Description => "Enable of channel capture memory",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F63,E64,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CaptureMemChannelSelect => { #Structure Type: RegField;
      Name => "CaptureMemChannelSelect",
      RegMem => "RegField",
      Description => "Selects channel that writes to capture memory",
      Width => "3",
      Position => "3:1", # Excel Formula: =calc_position(F64,E65)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CaptureMemPcSelect => { #Structure Type: RegField;
      Name => "CaptureMemPcSelect",
      RegMem => "RegField",
      Description => "Selects psuedo-channel that writes to capture memory",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F65,E66)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CaptureMemDriver => { #Structure Type: RegField;
      Name => "CaptureMemDriver",
      RegMem => "RegField",
      Description => "0 : Capture mem captures only error transactions from selected PC. Stops when mem is full
1 : Capture mem captures stream of data after error selected by ErrorNumber is detected. Stops when mem is full
2 : MMU traffic generator mode. Capture memory will capture constantly, and will stop when get gen_error from the MMU
3 : Capture mem captures stream of data after trigger is detected in row cmd. Stops when mem is full",
      Width => "2",
      Position => "6:5", # Excel Formula: =calc_position(F66,E67)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CaptureMemRowCmdTrigger => { #Structure Type: RegField;
      Name => "CaptureMemRowCmdTrigger",
      RegMem => "RegField",
      Description => "When row command is equal to this value, trigger will be sent to capture memory to start capture. Bits 10:0 are first row cmd cycle. Only ACTIVATE commands are matched. Does not include row command parity bits",
      Width => "22",
      Position => "28:7", # Excel Formula: =calc_position(F67,E68)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CaptureMemRowCmdTriggerMask => { #Structure Type: RegField;
      Name => "CaptureMemRowCmdTriggerMask",
      RegMem => "RegField",
      Description => "Bits that are masked when comparing row cmd to  CaptureMemRowCmdTrigger",
      Width => "22",
      Position => "50:29", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CaptureMemErrorCount => { #Structure Type: RegField;
      Name => "CaptureMemErrorCount",
      RegMem => "RegField",
      Description => "Number error at which to start capturing data. 0 means first error, etc",
      Width => "8",
      Position => "58:51", # Excel Formula: =calc_position(F69,E70)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  CaptureMemStatus => { #Structure Type: Reg;
    Name => "CaptureMemStatus",
    RegMem => "Reg",
    Address => "152", # Excel Formula: =calc_reg_address(C63,A63,G63)
    Description => "Status of Capture Memory",
    Width => "17", # Excel Formula: =calc_reg_width(E72:E73,F73)
    Type => "ReadOnly",
    CaptureMemValidEntries => { #Structure Type: RegField;
      Name => "CaptureMemValidEntries",
      RegMem => "RegField",
      Description => "Number of valid entries in Capture Memory",
      Width => "9",
      Position => "8:0", # Excel Formula: =calc_position(F71,E72,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
    CaptureMemStopPointer => { #Structure Type: RegField;
      Name => "CaptureMemStopPointer",
      RegMem => "RegField",
      Description => "Current write pointer of capture memory. Used in continuous capture mode to get order of capture data",
      Width => "8",
      Position => "16:9", # Excel Formula: =calc_position(F72,E73)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  ErrorRecordConfig => { #Structure Type: Reg;
    Name => "ErrorRecordConfig",
    RegMem => "Reg",
    Address => "153", # Excel Formula: =calc_reg_address(C71,A71,G71)
    Description => "Config of Error Record Memory",
    Width => "2", # Excel Formula: =calc_reg_width(E75:E76,F76)
    Type => "Config",
    ErrorRecordEnable => { #Structure Type: RegField;
      Name => "ErrorRecordEnable",
      RegMem => "RegField",
      Description => "Enable of error record memory",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F74,E75,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    ErrorRecordOverwrite => { #Structure Type: RegField;
      Name => "ErrorRecordOverwrite",
      RegMem => "RegField",
      Description => "0 : Do not overwrite Error Record entries, but stop after memory is full
1 : Overwrite cyclically Error Record entries",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F75,E76)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  PhyMonSel => { #Structure Type: Reg;
    Name => "PhyMonSel",
    RegMem => "Reg",
    Address => "154", # Excel Formula: =calc_reg_address(C74,A74,G74)
    Description => "Config of Error Record Memory",
    Width => "9", # Excel Formula: =calc_reg_width(E78:E79,F79)
    Type => "Config",
    PhyMonSelect => { #Structure Type: RegField;
      Name => "PhyMonSelect",
      RegMem => "RegField",
      Description => "Selector for PHY monitor output",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F77,E78,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d13",
    },
    PhyMonEn => { #Structure Type: RegField;
      Name => "PhyMonEn",
      RegMem => "RegField",
      Description => "Enable of PHY monitor output",
      Width => "1",
      Position => "8", # Excel Formula: =calc_position(F78,E79)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  pc0_async_fifo0 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "100000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "0",
    MemLogicalWidth => "131",
    pc0_async_fifoData0 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo1 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "200000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "1",
    MemLogicalWidth => "131",
    pc0_async_fifoData1 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo2 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "300000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "2",
    MemLogicalWidth => "131",
    pc0_async_fifoData2 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo3 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "400000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "3",
    MemLogicalWidth => "131",
    pc0_async_fifoData3 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo4 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "500000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "4",
    MemLogicalWidth => "131",
    pc0_async_fifoData4 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo5 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "600000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "5",
    MemLogicalWidth => "131",
    pc0_async_fifoData5 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo6 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "700000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "6",
    MemLogicalWidth => "131",
    pc0_async_fifoData6 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo7 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "800000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "7",
    MemLogicalWidth => "131",
    pc0_async_fifoData7 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo8 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "900000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "8",
    MemLogicalWidth => "131",
    pc0_async_fifoData8 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo9 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "A00000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "9",
    MemLogicalWidth => "131",
    pc0_async_fifoData9 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo10 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "B00000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "10",
    MemLogicalWidth => "131",
    pc0_async_fifoData10 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo11 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "C00000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "11",
    MemLogicalWidth => "131",
    pc0_async_fifoData11 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo12 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "D00000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "12",
    MemLogicalWidth => "131",
    pc0_async_fifoData12 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo13 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "E00000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "13",
    MemLogicalWidth => "131",
    pc0_async_fifoData13 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo14 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "F00000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "14",
    MemLogicalWidth => "131",
    pc0_async_fifoData14 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc0_async_fifo15 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[16]",
    RegMem => "Mem",
    Address => "1000000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E81:E81,M80,F81,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "15",
    MemLogicalWidth => "131",
    pc0_async_fifoData15 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F80,E81,TRUE)
    },
  },
  pc1_async_fifo0 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1100000", # Excel Formula: =calc_mem_address(C80,A80,G82,L82)
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "0",
    MemLogicalWidth => "131",
    pc1_async_fifoData0 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo1 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1200000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "1",
    MemLogicalWidth => "131",
    pc1_async_fifoData1 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo2 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1300000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "2",
    MemLogicalWidth => "131",
    pc1_async_fifoData2 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo3 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1400000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "3",
    MemLogicalWidth => "131",
    pc1_async_fifoData3 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo4 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1500000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "4",
    MemLogicalWidth => "131",
    pc1_async_fifoData4 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo5 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1600000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "5",
    MemLogicalWidth => "131",
    pc1_async_fifoData5 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo6 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1700000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "6",
    MemLogicalWidth => "131",
    pc1_async_fifoData6 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo7 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1800000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "7",
    MemLogicalWidth => "131",
    pc1_async_fifoData7 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo8 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1900000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "8",
    MemLogicalWidth => "131",
    pc1_async_fifoData8 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo9 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1A00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "9",
    MemLogicalWidth => "131",
    pc1_async_fifoData9 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo10 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1B00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "10",
    MemLogicalWidth => "131",
    pc1_async_fifoData10 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo11 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1C00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "11",
    MemLogicalWidth => "131",
    pc1_async_fifoData11 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo12 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1D00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "12",
    MemLogicalWidth => "131",
    pc1_async_fifoData12 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo13 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1E00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "13",
    MemLogicalWidth => "131",
    pc1_async_fifoData13 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo14 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "1F00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "14",
    MemLogicalWidth => "131",
    pc1_async_fifoData14 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  pc1_async_fifo15 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[16]",
    RegMem => "Mem",
    Address => "2000000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "144", # Excel Formula: =calc_mem_width(E83:E83,M82,F83,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "15",
    MemLogicalWidth => "131",
    pc1_async_fifoData15 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "131", # Excel Formula: =131
      Position => "130:0", # Excel Formula: =calc_position(F82,E83,TRUE)
    },
  },
  cntrl_async_fifo0 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2100000", # Excel Formula: =calc_mem_address(C82,A82,G84,L84)
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "0",
    MemLogicalWidth => "27",
    cntrl_async_fifoData0 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo1 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2200000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "1",
    MemLogicalWidth => "27",
    cntrl_async_fifoData1 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo2 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2300000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "2",
    MemLogicalWidth => "27",
    cntrl_async_fifoData2 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo3 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2400000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "3",
    MemLogicalWidth => "27",
    cntrl_async_fifoData3 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo4 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2500000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "4",
    MemLogicalWidth => "27",
    cntrl_async_fifoData4 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo5 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2600000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "5",
    MemLogicalWidth => "27",
    cntrl_async_fifoData5 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo6 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2700000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "6",
    MemLogicalWidth => "27",
    cntrl_async_fifoData6 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo7 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2800000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "7",
    MemLogicalWidth => "27",
    cntrl_async_fifoData7 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo8 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2900000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "8",
    MemLogicalWidth => "27",
    cntrl_async_fifoData8 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo9 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2A00000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "9",
    MemLogicalWidth => "27",
    cntrl_async_fifoData9 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo10 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2B00000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "10",
    MemLogicalWidth => "27",
    cntrl_async_fifoData10 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo11 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2C00000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "11",
    MemLogicalWidth => "27",
    cntrl_async_fifoData11 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo12 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2D00000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "12",
    MemLogicalWidth => "27",
    cntrl_async_fifoData12 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo13 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2E00000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "13",
    MemLogicalWidth => "27",
    cntrl_async_fifoData13 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo14 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "2F00000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "14",
    MemLogicalWidth => "27",
    cntrl_async_fifoData14 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  cntrl_async_fifo15 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[16]",
    RegMem => "Mem",
    Address => "3000000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "34", # Excel Formula: =calc_mem_width(E85:E85,M84,F85,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=41,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "16",
    ArrayIndex => "15",
    MemLogicalWidth => "27",
    cntrl_async_fifoData15 => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "27",
      Position => "26:0", # Excel Formula: =calc_position(F84,E85,TRUE)
    },
  },
  CaptureMem => { #Structure Type: Mem;
    Name => "CaptureMem",
    RegMem => "Mem",
    Address => "3100000", # Excel Formula: =calc_mem_address(C84,A84,G86,L86)
    Description => "HBM Capture memory. Captures data per cycle for one PC. Captures according to trigger or captures error transactions",
    Width => "182", # Excel Formula: =calc_mem_width(E87:E94,M86,F94,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    MemLogicalWidth => "173",
    CaptureMemData => { #Structure Type: MemField;
      Name => "CaptureMemData",
      RegMem => "MemField",
      Description => "data of transaction",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F86,E87,TRUE)
    },
    CaptureMemBank => { #Structure Type: MemField;
      Name => "CaptureMemBank",
      RegMem => "MemField",
      Description => "bank number of  transaction",
      Width => "4",
      Position => "131:128", # Excel Formula: =calc_position(F87,E88)
    },
    CaptureMemCol => { #Structure Type: MemField;
      Name => "CaptureMemCol",
      RegMem => "MemField",
      Description => "col number of  transaction",
      Width => "5",
      Position => "136:132", # Excel Formula: =calc_position(F88,E89)
    },
    CaptureMemRow => { #Structure Type: MemField;
      Name => "CaptureMemRow",
      RegMem => "MemField",
      Description => "row addr of  transaction",
      Width => "14",
      Position => "150:137", # Excel Formula: =calc_position(F89,E90)
    },
    CaptureMemErrorType => { #Structure Type: MemField;
      Name => "CaptureMemErrorType",
      RegMem => "MemField",
      Description => "Error type (more than one is allowed)
bit 0 : 1b ECC error
bit 1 : CRC error ",
      Width => "2",
      Position => "152:151", # Excel Formula: =calc_position(F90,E91)
    },
    CaptureMemParityCompare => { #Structure Type: MemField;
      Name => "CaptureMemParityCompare",
      RegMem => "MemField",
      Description => "4b of parity compare. 
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "156:153", # Excel Formula: =calc_position(F91,E92)
    },
    CaptureMemReceivedCrc => { #Structure Type: MemField;
      Name => "CaptureMemReceivedCrc",
      RegMem => "MemField",
      Description => "Recived CRC ",
      Width => "8",
      Position => "164:157", # Excel Formula: =calc_position(F92,E93)
    },
    CaptureMemExpectedCrc => { #Structure Type: MemField;
      Name => "CaptureMemExpectedCrc",
      RegMem => "MemField",
      Description => "Expected CRC",
      Width => "8",
      Position => "172:165", # Excel Formula: =calc_position(F93,E94)
    },
  },
  ErrorRecordPc00 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
    Name => "ErrorRecordPc0[8]",
    RegMem => "Mem",
    Address => "3200000", # Excel Formula: =calc_mem_address(C86,A86,G95,L95)
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E96:E101,M95,F101,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "0",
    MemLogicalWidth => "29",
    EntryValid0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F95,E96,TRUE)
    },
    ErrorBank0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F96,E97)
    },
    ErrorCol0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F97,E98)
    },
    ErrorRow0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F98,E99)
    },
    ErrorType0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F99,E100)
    },
    ParityCompare0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC0
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F100,E101)
    },
  },
  ErrorRecordPc01 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
    Name => "ErrorRecordPc0[8]",
    RegMem => "Mem",
    Address => "3300000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E96:E101,M95,F101,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "1",
    MemLogicalWidth => "29",
    EntryValid1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F95,E96,TRUE)
    },
    ErrorBank1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F96,E97)
    },
    ErrorCol1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F97,E98)
    },
    ErrorRow1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F98,E99)
    },
    ErrorType1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F99,E100)
    },
    ParityCompare1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC0
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F100,E101)
    },
  },
  ErrorRecordPc02 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
    Name => "ErrorRecordPc0[8]",
    RegMem => "Mem",
    Address => "3400000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E96:E101,M95,F101,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "2",
    MemLogicalWidth => "29",
    EntryValid2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F95,E96,TRUE)
    },
    ErrorBank2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F96,E97)
    },
    ErrorCol2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F97,E98)
    },
    ErrorRow2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F98,E99)
    },
    ErrorType2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F99,E100)
    },
    ParityCompare2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC0
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F100,E101)
    },
  },
  ErrorRecordPc03 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
    Name => "ErrorRecordPc0[8]",
    RegMem => "Mem",
    Address => "3500000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E96:E101,M95,F101,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "3",
    MemLogicalWidth => "29",
    EntryValid3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F95,E96,TRUE)
    },
    ErrorBank3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F96,E97)
    },
    ErrorCol3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F97,E98)
    },
    ErrorRow3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F98,E99)
    },
    ErrorType3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F99,E100)
    },
    ParityCompare3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC0
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F100,E101)
    },
  },
  ErrorRecordPc04 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
    Name => "ErrorRecordPc0[8]",
    RegMem => "Mem",
    Address => "3600000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E96:E101,M95,F101,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "4",
    MemLogicalWidth => "29",
    EntryValid4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F95,E96,TRUE)
    },
    ErrorBank4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F96,E97)
    },
    ErrorCol4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F97,E98)
    },
    ErrorRow4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F98,E99)
    },
    ErrorType4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F99,E100)
    },
    ParityCompare4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC0
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F100,E101)
    },
  },
  ErrorRecordPc05 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
    Name => "ErrorRecordPc0[8]",
    RegMem => "Mem",
    Address => "3700000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E96:E101,M95,F101,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "5",
    MemLogicalWidth => "29",
    EntryValid5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F95,E96,TRUE)
    },
    ErrorBank5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F96,E97)
    },
    ErrorCol5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F97,E98)
    },
    ErrorRow5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F98,E99)
    },
    ErrorType5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F99,E100)
    },
    ParityCompare5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC0
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F100,E101)
    },
  },
  ErrorRecordPc06 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
    Name => "ErrorRecordPc0[8]",
    RegMem => "Mem",
    Address => "3800000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E96:E101,M95,F101,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "6",
    MemLogicalWidth => "29",
    EntryValid6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F95,E96,TRUE)
    },
    ErrorBank6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F96,E97)
    },
    ErrorCol6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F97,E98)
    },
    ErrorRow6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F98,E99)
    },
    ErrorType6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F99,E100)
    },
    ParityCompare6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC0
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F100,E101)
    },
  },
  ErrorRecordPc07 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
    Name => "ErrorRecordPc0[8]",
    RegMem => "Mem",
    Address => "3900000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E96:E101,M95,F101,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "7",
    MemLogicalWidth => "29",
    EntryValid7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F95,E96,TRUE)
    },
    ErrorBank7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F96,E97)
    },
    ErrorCol7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F97,E98)
    },
    ErrorRow7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F98,E99)
    },
    ErrorType7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F99,E100)
    },
    ParityCompare7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC0
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F100,E101)
    },
  },
  ErrorRecordPc10 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
    Name => "ErrorRecordPc1[8]",
    RegMem => "Mem",
    Address => "3A00000", # Excel Formula: =calc_mem_address(C95,A95,G102,L102)
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E103:E108,M102,F108,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "0",
    MemLogicalWidth => "29",
    EntryValid0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
    },
    ErrorBank0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F103,E104)
    },
    ErrorCol0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F104,E105)
    },
    ErrorRow0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F105,E106)
    },
    ErrorType0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F106,E107)
    },
    ParityCompare0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC1
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F107,E108)
    },
  },
  ErrorRecordPc11 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
    Name => "ErrorRecordPc1[8]",
    RegMem => "Mem",
    Address => "3B00000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E103:E108,M102,F108,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "1",
    MemLogicalWidth => "29",
    EntryValid1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
    },
    ErrorBank1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F103,E104)
    },
    ErrorCol1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F104,E105)
    },
    ErrorRow1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F105,E106)
    },
    ErrorType1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F106,E107)
    },
    ParityCompare1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC1
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F107,E108)
    },
  },
  ErrorRecordPc12 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
    Name => "ErrorRecordPc1[8]",
    RegMem => "Mem",
    Address => "3C00000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E103:E108,M102,F108,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "2",
    MemLogicalWidth => "29",
    EntryValid2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
    },
    ErrorBank2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F103,E104)
    },
    ErrorCol2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F104,E105)
    },
    ErrorRow2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F105,E106)
    },
    ErrorType2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F106,E107)
    },
    ParityCompare2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC1
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F107,E108)
    },
  },
  ErrorRecordPc13 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
    Name => "ErrorRecordPc1[8]",
    RegMem => "Mem",
    Address => "3D00000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E103:E108,M102,F108,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "3",
    MemLogicalWidth => "29",
    EntryValid3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
    },
    ErrorBank3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F103,E104)
    },
    ErrorCol3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F104,E105)
    },
    ErrorRow3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F105,E106)
    },
    ErrorType3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F106,E107)
    },
    ParityCompare3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC1
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F107,E108)
    },
  },
  ErrorRecordPc14 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
    Name => "ErrorRecordPc1[8]",
    RegMem => "Mem",
    Address => "3E00000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E103:E108,M102,F108,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "4",
    MemLogicalWidth => "29",
    EntryValid4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
    },
    ErrorBank4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F103,E104)
    },
    ErrorCol4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F104,E105)
    },
    ErrorRow4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F105,E106)
    },
    ErrorType4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F106,E107)
    },
    ParityCompare4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC1
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F107,E108)
    },
  },
  ErrorRecordPc15 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
    Name => "ErrorRecordPc1[8]",
    RegMem => "Mem",
    Address => "3F00000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E103:E108,M102,F108,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "5",
    MemLogicalWidth => "29",
    EntryValid5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
    },
    ErrorBank5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F103,E104)
    },
    ErrorCol5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F104,E105)
    },
    ErrorRow5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F105,E106)
    },
    ErrorType5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F106,E107)
    },
    ParityCompare5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC1
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F107,E108)
    },
  },
  ErrorRecordPc16 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
    Name => "ErrorRecordPc1[8]",
    RegMem => "Mem",
    Address => "4000000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E103:E108,M102,F108,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "6",
    MemLogicalWidth => "29",
    EntryValid6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
    },
    ErrorBank6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F103,E104)
    },
    ErrorCol6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F104,E105)
    },
    ErrorRow6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F105,E106)
    },
    ErrorType6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F106,E107)
    },
    ParityCompare6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC1
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F107,E108)
    },
  },
  ErrorRecordPc17 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
    Name => "ErrorRecordPc1[8]",
    RegMem => "Mem",
    Address => "4100000",
    Description => "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    Width => "29", # Excel Formula: =calc_mem_width(E103:E108,M102,F108,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "16",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,FfBased=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "7",
    MemLogicalWidth => "29",
    EntryValid7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "0 : Error Record entry is not valid
1 : ErrorRecord entry is valid
Initialized to all 0 on soft reset of block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F102,E103,TRUE)
    },
    ErrorBank7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 10;
      Name => "ErrorBank[n]",
      RegMem => "MemField",
      Description => "bank number of error transaction",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F103,E104)
    },
    ErrorCol7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 9;
      Name => "ErrorCol[n]",
      RegMem => "MemField",
      Description => "col number of error transaction",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F104,E105)
    },
    ErrorRow7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 9;
      Name => "ErrorRow[n]",
      RegMem => "MemField",
      Description => "row addr of error transaction",
      Width => "14",
      Position => "23:10", # Excel Formula: =calc_position(F105,E106)
    },
    ErrorType7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 10;
      Name => "ErrorType[n]",
      RegMem => "MemField",
      Description => "Type of error
0 : 1b ECC error
1 : CRC error  
In case of parity error, a value of 1 will be written if there is also CRC error, otherwise 0, even if there is no 1b ECC error",
      Width => "1",
      Position => "24", # Excel Formula: =calc_position(F106,E107)
    },
    ParityCompare7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 14;
      Name => "ParityCompare[n]",
      RegMem => "MemField",
      Description => "4b of parity compare for PC1
0 : Parity matches for corresponding DW
1 : Parity does not match for corresponding DW",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F107,E108)
    },
  },
  Ieee1500 => { #Structure Type: Mem;
    Name => "Ieee1500",
    RegMem => "Mem",
    Address => "4200000", # Excel Formula: =calc_mem_address(C102,A102,G109,L109)
    Description => "Virtual Memory for mapping HBM die and PHY IEEE 1500 accessible registers. The address is translated to the IEEE1500 instruction
Cannot access IEEE registers inside PHY, which are accessed normally using APB, and will use IEEE only in test mode from external JTAG
Width of memory is a bit larger than largest WDR in Samsung HBM spec. 
Note that on reads, the read data will be in leftmost bits of register. For example, when reading a 256b register, the valid bits will be bits 511:256
bits 11:8 : Channel address. Value of f means broadcast. Broadcast is supported only on write. Not relevant for PHY registers
bits 7:0 : Register address",
    Width => "521", # Excel Formula: =calc_mem_width(E110:E111,M109,F111,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    DocName => "Ieee1500VirtualMem",
    MemEntries => "4096",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    MemLogicalWidth => "521",
    Ieee1500Data => { #Structure Type: MemField;
      Name => "Ieee1500Data",
      RegMem => "MemField",
      Description => "Data to write/read to IEEE 1500 register",
      Width => "512",
      Position => "511:0", # Excel Formula: =calc_position(F109,E110,TRUE)
    },
    Ieee1500Length => { #Structure Type: MemField;
      Name => "Ieee1500Length",
      RegMem => "MemField",
      Description => "Length of WDR to write/read. ",
      Width => "9",
      Position => "520:512", # Excel Formula: =calc_position(F110,E111)
    },
  },
  PhyApb => { #Structure Type: Mem;
    Name => "PhyApb",
    RegMem => "Mem",
    Address => "4300000", # Excel Formula: =calc_mem_address(C109,A109,G112,L112)
    Description => "Virtual Memory for mapping PHY APB accessible registers. 
Width of memory is according to APB data bus
This address is translated to PADDR[13:2]",
    Width => "32", # Excel Formula: =calc_mem_width(E113:E113,M112,F113,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    DocName => "PhyApbVirtualMem",
    MemEntries => "4096",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    MemLogicalWidth => "32",
    PhyApbData => { #Structure Type: MemField;
      Name => "PhyApbData",
      RegMem => "MemField",
      Description => "Data to write/read to APB register",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F112,E113,TRUE)
    },
  },
};
