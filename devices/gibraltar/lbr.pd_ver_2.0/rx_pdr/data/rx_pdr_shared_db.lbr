$block{rx_pdr_shared_db} = {
  Defines_db => "Z:\\leaba_reg_db_example\\defines.v",
  ProjectName => "Gibraltar",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    SharedDBInterruptRegSummary => { #Structure Type: RegField;
      Name => "SharedDBInterruptRegSummary",
      RegMem => "RegField",
      Description => "When this bit is set, SharedDBInterruptReg has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
    EmResponseInterruptSummary => { #Structure Type: RegField;
      Name => "EmResponseInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, EmResponseInterrupt has asserted interrupt",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt test register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "4",
    Type => "Config",
    SharedDbVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "SharedDbVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SharedDbVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "SharedDbVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SharedDbVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "SharedDbVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SharedDbVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "SharedDbVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "4",
    Type => "Config",
    SharedDbVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "SharedDbVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SharedDbVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "SharedDbVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SharedDbVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "SharedDbVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SharedDbVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "SharedDbVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "4",
    Type => "Config",
    SharedDbVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "SharedDbVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SharedDbVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "SharedDbVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SharedDbVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "SharedDbVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SharedDbVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "SharedDbVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "4",
    Type => "Config",
    SharedDbVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "SharedDbVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SharedDbVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "SharedDbVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SharedDbVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "SharedDbVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SharedDbVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "SharedDbVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "4",
    Type => "ReadOnly",
    SharedDbVerifier0ErrInt => { #Structure Type: RegField;
      Name => "SharedDbVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    SharedDbVerifier1ErrInt => { #Structure Type: RegField;
      Name => "SharedDbVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    SharedDbVerifier2ErrInt => { #Structure Type: RegField;
      Name => "SharedDbVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    SharedDbVerifier3ErrInt => { #Structure Type: RegField;
      Name => "SharedDbVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "17",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "15",
      Position => "14:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "16:15",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "3",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "2",
      Position => "1:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  TcamScanPeriodCfg => { #Structure Type: Reg; Skip Register;
    Name => "TcamScanPeriodCfg",
    RegMem => "Reg",
    Address => "3B",
    Description => "Configures period of TCAM scan for SER, set 0 to disable",
    Width => "32",
    Type => "Config",
    TcamScanPeriod => { #Structure Type: RegField;
      Name => "TcamScanPeriod",
      RegMem => "RegField",
      Description => "Configures period of TCAM scan for SER, set 0 to disable",
      Width => "32",
      Position => "31:0",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d120000000",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "73", # Excel Formula: =calc_reg_width(E25:E53,F53)
    Type => "Config",
    SACR1P_RME => { #Structure Type: RegField;
      Name => "SACR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACR1P_RM => { #Structure Type: RegField;
      Name => "SACR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RME => { #Structure Type: RegField;
      Name => "SACU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RM => { #Structure Type: RegField;
      Name => "SACU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "9:6", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RME => { #Structure Type: RegField;
      Name => "SADC1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RM => { #Structure Type: RegField;
      Name => "SADC1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "14:11", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEA => { #Structure Type: RegField;
      Name => "SADR2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "15", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMA => { #Structure Type: RegField;
      Name => "SADR2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "19:16", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEB => { #Structure Type: RegField;
      Name => "SADR2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMB => { #Structure Type: RegField;
      Name => "SADR2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "24:21", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEA => { #Structure Type: RegField;
      Name => "SADS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "25", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMA => { #Structure Type: RegField;
      Name => "SADS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "29:26", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEB => { #Structure Type: RegField;
      Name => "SADS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMB => { #Structure Type: RegField;
      Name => "SADS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "34:31", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RME => { #Structure Type: RegField;
      Name => "SASR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "35", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RM => { #Structure Type: RegField;
      Name => "SASR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "39:36", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RME => { #Structure Type: RegField;
      Name => "SASS1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RM => { #Structure Type: RegField;
      Name => "SASS1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "44:41", # Excel Formula: =calc_position(F41,E42)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEA => { #Structure Type: RegField;
      Name => "SASS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "45", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMA => { #Structure Type: RegField;
      Name => "SASS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "49:46", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEB => { #Structure Type: RegField;
      Name => "SASS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMB => { #Structure Type: RegField;
      Name => "SASS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "54:51", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RME => { #Structure Type: RegField;
      Name => "SASU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "55", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RM => { #Structure Type: RegField;
      Name => "SASU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "59:56", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RME => { #Structure Type: RegField;
      Name => "SADU1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "60", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RM => { #Structure Type: RegField;
      Name => "SADU1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "64:61", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RA => { #Structure Type: RegField;
      Name => "SADS2P_RA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Assist for Dual port",
      Width => "2",
      Position => "66:65", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_WA => { #Structure Type: RegField;
      Name => "SADU1P_WA",
      RegMem => "RegField",
      Description => "Write-Assist configuration for the SP SADU compiler",
      Width => "3",
      Position => "69:67", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d5",
    },
    SADU1P_WPULSE => { #Structure Type: RegField;
      Name => "SADU1P_WPULSE",
      RegMem => "RegField",
      Description => "Write-Assist-Pulse configuration for the SP SADU compiler",
      Width => "3",
      Position => "72:70", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E55:E55,F55)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "Spare register",
    Width => "128", # Excel Formula: =calc_reg_width(E57:E57,F57)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "Spare register ",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C56,A56,G56)
    Description => "PMRO controller configuration",
    Width => "32", # Excel Formula: =calc_reg_width(E59:E63,F63)
    Type => "Config",
    PmroRstn => { #Structure Type: RegField;
      Name => "PmroRstn",
      RegMem => "RegField",
      Description => "PMRO reset, active low",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroConfigEn => { #Structure Type: RegField;
      Name => "PmroConfigEn",
      RegMem => "RegField",
      Description => "Enable pmro configuration, when equals to 0 configurations are locked",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroStart => { #Structure Type: RegField;
      Name => "PmroStart",
      RegMem => "RegField",
      Description => "Start the pmro operation",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroRingEn => { #Structure Type: RegField;
      Name => "PmroRingEn",
      RegMem => "RegField",
      Description => "Determines which PMRO ring to activate, should be configured as one hot",
      Width => "7",
      Position => "9:3", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroCntPeriod => { #Structure Type: RegField;
      Name => "PmroCntPeriod",
      RegMem => "RegField",
      Description => "Number of core clock cycles on which PMRO is measured",
      Width => "22",
      Position => "31:10", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "h3FFFFF",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "PMRO status configuration",
    Width => "23", # Excel Formula: =calc_reg_width(E65:E66,F66)
    Type => "ReadOnly",
    PmroCountOut => { #Structure Type: RegField;
      Name => "PmroCountOut",
      RegMem => "RegField",
      Description => "The ring oscilator counter value.",
      Width => "22",
      Position => "21:0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Status",
      UsedBy => "pmro",
    },
    PmroDone => { #Structure Type: RegField;
      Name => "PmroDone",
      RegMem => "RegField",
      Description => "Pmro operation done, PmroCountOut is valid.",
      Width => "1",
      Position => "22", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "Mirror Bus configurations",
    Width => "11", # Excel Formula: =calc_reg_width(E68:E69,F69)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "Enable Mirror Bus",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F67,E68,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "Mirror Bus selector",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C67,A67,G67)
    Description => "Mirror Bus status result",
    Width => "32", # Excel Formula: =calc_reg_width(E71:E71,F71)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "Mirror Bus status result",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F70,E71,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C70,A70,G70)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E73:E73,F73)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  SharedDBInterruptReg => { #Structure Type: Reg;
    Name => "SharedDBInterruptReg",
    RegMem => "Reg",
    Address => "100",
    Width => "2", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Interrupt",
    LookupAError => { #Structure Type: RegField;
      Name => "LookupAError",
      RegMem => "RegField",
      Description => "Indicates 2 bit ECC error occurred on lookup A",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Interrupt",
      UsedBy => "DSN",
    },
    LookupBError => { #Structure Type: RegField;
      Name => "LookupBError",
      RegMem => "RegField",
      Description => "Indicates 2 bit ECC error occurred on lookup A",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "Interrupt",
      UsedBy => "DSN",
    },
  },
  SharedDBInterruptRegMask => { #Structure Type: Reg; Skip Register;
    Name => "SharedDBInterruptRegMask",
    RegMem => "Reg",
    Address => "101",
    Width => "2", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "InterruptMask",
    LookupAErrorMask => { #Structure Type: RegField;
      Name => "LookupAErrorMask",
      RegMem => "RegField",
      Description => "This field masks LookupAError interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    LookupBErrorMask => { #Structure Type: RegField;
      Name => "LookupBErrorMask",
      RegMem => "RegField",
      Description => "This field masks LookupBError interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  SharedDBInterruptRegTest => { #Structure Type: Reg; Skip Register;
    Name => "SharedDBInterruptRegTest",
    RegMem => "Reg",
    Address => "102",
    Width => "2", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "InterruptTest",
    LookupAErrorTest => { #Structure Type: RegField;
      Name => "LookupAErrorTest",
      RegMem => "RegField",
      Description => "This field tests LookupAError interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    LookupBErrorTest => { #Structure Type: RegField;
      Name => "LookupBErrorTest",
      RegMem => "RegField",
      Description => "This field tests LookupBError interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  GlobalConfiguration => { #Structure Type: Reg;
    Name => "GlobalConfiguration",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Width => "2", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "Config",
    DeviceType => { #Structure Type: RegField;
      Name => "DeviceType",
      RegMem => "RegField",
      Description => "Indicates the mode of the device:
2'h0 - LC
2'h1 - TR
2'h2 - SA
2'h3 - FE",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h2",
      InitValueSa => "2",
      InitValueLcNwk => "0",
      InitValueLcFab => "0",
      InitValueFe => "3",
    },
  },
  FeLinksBmpTableConf => { #Structure Type: Reg;
    Name => "FeLinksBmpTableConf",
    RegMem => "Reg",
    Address => "104", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Width => "4", # Excel Formula: =calc_reg_width(E13:E13,F13)
    Type => "Config",
    DisEccCheckFeLinksBmp => { #Structure Type: RegField;
      Name => "DisEccCheckFeLinksBmp",
      RegMem => "RegField",
      Description => "Disables ECC check on the data that returns from the FE links BMP table. The ECC is external since the memory is shared.Bit per target memory",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
  },
  SharedDb => { #Structure Type: Mem;
    Name => "SharedDb",
    RegMem => "Mem",
    Address => "100000",
    Description => "Key is: {Client[31], Slice_num[30:28], Is_recycle[27], MCID[26:11], Entry_number[10:0]}

Client: RX (0), TX (1)
Slice Num: RX (0 - NW, 1 - FB), TX (0 - 5)",
    Width => "72", # Excel Formula: =calc_mem_width(E15:E15,M14,F15,-1)
    Type => "DocOnly",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "65536", # Excel Formula: =64*1024
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=32,SourceIdWidth=1,NumberOfBanks=4,NumberOfCamEntries=32,NumberOfParallelBanks=4,2PMemory=Enabled,VerifierSampleReadAccess=1,VerifierSampleReadBeforeProt=3,VerifierSamplePhysicalMem=2,VerifierSampleWriteAfterProt=1,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=0,VrfReadActivityFactor=50,VrfDisableSameAddressErr=Enabled,VrfEnableNonCpuRdWrSameAddress=Enabled,ValidSampleReadAccess=1,ValidSampleReadBeforeProt=2,ValidSampleWriteAfterProt=1,ValidCpuReadAccess=Enabled,ValidCpuWriteAccess=Enabled,VldWriteActivityFactor=0,VldReadActivityFactor=0",
    MemLogicalWidth => "72",
    SharedDbPayload => { #Structure Type: MemField;
      Name => "SharedDbPayload",
      RegMem => "MemField",
      Width => "72",
      Position => "71:0", # Excel Formula: =calc_position(F14,E15,TRUE)
    },
  },
  McEmdbEntry => { #Structure Type: Mem;
    Name => "McEmdbEntry",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C14,A14,G16,L16)
    Description => "Parsing of the MC EMDB for documentation",
    Width => "72", # Excel Formula: =calc_mem_width(E17:E22,M16,F22,-1)
    Type => "DocOnly",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    MemLogicalWidth => "72",
    McCopyId0 => { #Structure Type: MemField;
      Name => "McCopyId0",
      RegMem => "MemField",
      Description => "If MC Copy ID = 0 : CUD set to MCID using the MCID from the PD.
If MC Copy ID < cfg : CUD set to MCID using the value of the MC copy ID
If MC copy Id >= cfg : CUD set to MC Copy ID ",
      Width => "18",
      Position => "17:0", # Excel Formula: =calc_position(F16,E17,TRUE)
    },
    McCopyBaseQueueNum0 => { #Structure Type: MemField;
      Name => "McCopyBaseQueueNum0",
      RegMem => "MemField",
      Width => "16",
      Position => "33:18", # Excel Formula: =calc_position(F17,E18)
    },
    McCopyTcMapProfile0 => { #Structure Type: MemField;
      Name => "McCopyTcMapProfile0",
      RegMem => "MemField",
      Width => "2",
      Position => "35:34", # Excel Formula: =calc_position(F18,E19)
    },
    McCopyId1 => { #Structure Type: MemField;
      Name => "McCopyId1",
      RegMem => "MemField",
      Width => "18",
      Position => "53:36", # Excel Formula: =calc_position(F19,E20)
    },
    McCopyBaseQueueNum1 => { #Structure Type: MemField;
      Name => "McCopyBaseQueueNum1",
      RegMem => "MemField",
      Width => "16",
      Position => "69:54", # Excel Formula: =calc_position(F20,E21)
    },
    McCopyTcMapProfile1 => { #Structure Type: MemField;
      Name => "McCopyTcMapProfile1",
      RegMem => "MemField",
      Width => "2",
      Position => "71:70", # Excel Formula: =calc_position(F21,E22)
    },
  },
  McEmdbEntryTxpdrFormat0 => { #Structure Type: Mem;
    Name => "McEmdbEntryTxpdrFormat0",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C14,A14,G23,L23)
    Description => "Parsing of the MC EMDB TXPDR format for documentation",
    Width => "59", # Excel Formula: =calc_mem_width(E24:E30,M23,F30,-1)
    Type => "DocOnly",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    MemLogicalWidth => "59",
    Format0 => { #Structure Type: MemField;
      Name => "Format0",
      RegMem => "MemField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F23,E24,TRUE)
    },
    Format0McCopyId0 => { #Structure Type: MemField;
      Name => "Format0McCopyId0",
      RegMem => "MemField",
      Width => "18",
      Position => "18:1", # Excel Formula: =calc_position(F24,E25)
    },
    Format0McCopyId1 => { #Structure Type: MemField;
      Name => "Format0McCopyId1",
      RegMem => "MemField",
      Width => "18",
      Position => "36:19", # Excel Formula: =calc_position(F25,E26)
    },
    Format0McCopyOqg0 => { #Structure Type: MemField;
      Name => "Format0McCopyOqg0",
      RegMem => "MemField",
      Width => "8",
      Position => "44:37", # Excel Formula: =calc_position(F26,E27)
    },
    Format0McCopyOqg1 => { #Structure Type: MemField;
      Name => "Format0McCopyOqg1",
      RegMem => "MemField",
      Width => "8",
      Position => "52:45", # Excel Formula: =calc_position(F27,E28)
    },
    Format0McCopyTcMapProfile0 => { #Structure Type: MemField;
      Name => "Format0McCopyTcMapProfile0",
      RegMem => "MemField",
      Width => "3",
      Position => "55:53", # Excel Formula: =calc_position(F28,E29)
    },
    Format0McCopyTcMapProfile1 => { #Structure Type: MemField;
      Name => "Format0McCopyTcMapProfile1",
      RegMem => "MemField",
      Width => "3",
      Position => "58:56", # Excel Formula: =calc_position(F29,E30)
    },
  },
  McEmdbEntryTxpdrFormat1 => { #Structure Type: Mem;
    Name => "McEmdbEntryTxpdrFormat1",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C14,A14,G31,L31)
    Description => "Parsing of the MC EMDB TXPDR format for documentation",
    Width => "72", # Excel Formula: =calc_mem_width(E32:E36,M31,F36,-1)
    Type => "DocOnly",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "256",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    MemLogicalWidth => "72",
    Format1 => { #Structure Type: MemField;
      Name => "Format1",
      RegMem => "MemField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F31,E32,TRUE)
    },
    Format1McCopyId => { #Structure Type: MemField;
      Name => "Format1McCopyId",
      RegMem => "MemField",
      Width => "18",
      Position => "18:1", # Excel Formula: =calc_position(F32,E33)
    },
    Format1McCopyTcMapProfile => { #Structure Type: MemField;
      Name => "Format1McCopyTcMapProfile",
      RegMem => "MemField",
      Width => "3",
      Position => "21:19", # Excel Formula: =calc_position(F33,E34)
    },
    Format1BitmapMappingProfile => { #Structure Type: MemField;
      Name => "Format1BitmapMappingProfile",
      RegMem => "MemField",
      Width => "2",
      Position => "23:22", # Excel Formula: =calc_position(F34,E35)
    },
    Format1CopyBitmap => { #Structure Type: MemField;
      Name => "Format1CopyBitmap",
      RegMem => "MemField",
      Width => "48",
      Position => "71:24", # Excel Formula: =calc_position(F35,E36)
    },
  },
  McFeLinksBmp => { #Structure Type: Mem;
    Name => "McFeLinksBmp",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C14,A14,G37,L37)
    Description => "Parsing of the MC FE Link BMP for documentation",
    Width => "109", # Excel Formula: =calc_mem_width(E38:E38,M37,F38,-1)
    Type => "DocOnly",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "65536",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=2,SampleReadAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PortErrPropagate=Disabled",
    MemLogicalWidth => "109",
    McFeLinksBmpEntry => { #Structure Type: MemField;
      Name => "McFeLinksBmpEntry",
      RegMem => "MemField",
      Description => "The MC FE links BMP table entry:
107:0 - a bitmap of the 108 FE link
Each entry is a bitmap of all the fabric-links that a particular multicast group may make copies to
Note that if there are multiple links to reach a destination device that has member leafs of the MCID than all these links would be identified in this bitmap
108 - Use Bitmap directly - indicates that the link selection should take into consideration only the McFeLinksBmp and the live links.
If all bits are set to 0 - the PD will be dropped.",
      Width => "109",
      Position => "108:0", # Excel Formula: =calc_position(F37,E38,TRUE)
    },
  },
  McFeLinksBmpMemoryPartition => { #Structure Type: Mem;
    Name => "McFeLinksBmpMemoryPartition",
    RegMem => "Mem",
    Address => "100000", # Excel Formula: =calc_mem_address(C14,A14,G39,L39)
    Width => "198", # Excel Formula: =calc_mem_width(E40:E44,M39,F44,-1)
    Type => "DocOnly",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "65536",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=2,SampleReadAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PortErrPropagate=Disabled",
    MemLogicalWidth => "198",
    McFeLinksBmpPart1 => { #Structure Type: MemField;
      Name => "McFeLinksBmpPart1",
      RegMem => "MemField",
      Description => "The MC FE links BMP is sharing a memory with the MC EMDB verifier table so the data and ECC are spread on the 2 physical memories (2 MC EMDB banks)",
      Width => "91",
      Position => "90:0", # Excel Formula: =calc_position(F39,E40,TRUE)
    },
    McFeLinksBmpEccPart1 => { #Structure Type: MemField;
      Name => "McFeLinksBmpEccPart1",
      RegMem => "MemField",
      Width => "8",
      Position => "98:91", # Excel Formula: =calc_position(F40,E41)
    },
    McFeLinksBmpPart2 => { #Structure Type: MemField;
      Name => "McFeLinksBmpPart2",
      RegMem => "MemField",
      Description => "The MC FE links BMP is sharing a memory with the MC EMDB verifier table so the data and ECC are spread on the 2 physical memories (2 MC EMDB banks)",
      Width => "18",
      Position => "116:99", # Excel Formula: =calc_position(F41,E42)
    },
    McFeLinksBmpPart2Unused => { #Structure Type: MemField;
      Name => "McFeLinksBmpPart2Unused",
      RegMem => "MemField",
      Description => "Unused bits",
      Width => "73",
      Position => "189:117", # Excel Formula: =calc_position(F42,E43)
    },
    McFeLinksBmpEccPart2 => { #Structure Type: MemField;
      Name => "McFeLinksBmpEccPart2",
      RegMem => "MemField",
      Width => "8",
      Position => "197:190", # Excel Formula: =calc_position(F43,E44)
    },
  },
  SharedDbVerifier0 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 17; Skip Register;
    Name => "SharedDbVerifier[4]",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C14,A14,G45,L45)
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "99", # Excel Formula: =calc_mem_width(E46:E46,M45,F46,-1)
    Type => "Dynamic",
    UsedBy => "SharedDb",
    MemEntries => "16384",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,UseEccCpuWr=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    MemLogicalWidth => "91",
    SharedDbVerifier0Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "SharedDbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "99",
      Position => "98:0", # Excel Formula: =calc_position(F45,E46,TRUE)
    },
  },
  SharedDbVerifier1 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 17; Skip Register;
    Name => "SharedDbVerifier[4]",
    RegMem => "Mem",
    Address => "300000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "99", # Excel Formula: =calc_mem_width(E46:E46,M45,F46,-1)
    Type => "Dynamic",
    UsedBy => "SharedDb",
    MemEntries => "16384",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,UseEccCpuWr=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    MemLogicalWidth => "91",
    SharedDbVerifier1Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "SharedDbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "99",
      Position => "98:0", # Excel Formula: =calc_position(F45,E46,TRUE)
    },
  },
  SharedDbVerifier2 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 17; Skip Register;
    Name => "SharedDbVerifier[4]",
    RegMem => "Mem",
    Address => "400000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "99", # Excel Formula: =calc_mem_width(E46:E46,M45,F46,-1)
    Type => "Dynamic",
    UsedBy => "SharedDb",
    MemEntries => "16384",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,UseEccCpuWr=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    MemLogicalWidth => "91",
    SharedDbVerifier2Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 17;
      Name => "SharedDbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "99",
      Position => "98:0", # Excel Formula: =calc_position(F45,E46,TRUE)
    },
  },
  SharedDbVerifier3 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 17; Skip Register;
    Name => "SharedDbVerifier[4]",
    RegMem => "Mem",
    Address => "500000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "99", # Excel Formula: =calc_mem_width(E46:E46,M45,F46,-1)
    Type => "Dynamic",
    UsedBy => "SharedDb",
    MemEntries => "16384",
    MemWrapper => "2R1W Slow Write",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,UseHardReset=1,UseEccCpuWr=1,SampleReadAccess=1,SampleReadBeforeProt=3,SamplePhysicalMem=2,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=50,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    MemLogicalWidth => "91",
    SharedDbVerifier3Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 17;
      Name => "SharedDbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "99",
      Position => "98:0", # Excel Formula: =calc_position(F45,E46,TRUE)
    },
  },
  SharedDbPerBankReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 19; Skip Register;
    Name => "SharedDbPerBankReg[4]",
    RegMem => "Reg",
    Address => "105", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "EM bank configurations, see fields description",
    Width => "66", # Excel Formula: =calc_reg_width(E48:E50,F50)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    SharedDbActiveBanks0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "SharedDbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "d1",
    },
    SharedDbHashKey0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "SharedDbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "64",
      Position => "64:1", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
    SharedDbUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "SharedDbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
  },
  SharedDbPerBankReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 19; Skip Register;
    Name => "SharedDbPerBankReg[4]",
    RegMem => "Reg",
    Address => "106",
    Description => "EM bank configurations, see fields description",
    Width => "66", # Excel Formula: =calc_reg_width(E48:E50,F50)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    SharedDbActiveBanks1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "SharedDbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "d1",
    },
    SharedDbHashKey1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "SharedDbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "64",
      Position => "64:1", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
    SharedDbUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "SharedDbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
  },
  SharedDbPerBankReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 19; Skip Register;
    Name => "SharedDbPerBankReg[4]",
    RegMem => "Reg",
    Address => "107",
    Description => "EM bank configurations, see fields description",
    Width => "66", # Excel Formula: =calc_reg_width(E48:E50,F50)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    SharedDbActiveBanks2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "SharedDbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "d1",
    },
    SharedDbHashKey2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "SharedDbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "64",
      Position => "64:1", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
    SharedDbUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 24;
      Name => "SharedDbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
  },
  SharedDbPerBankReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 19; Skip Register;
    Name => "SharedDbPerBankReg[4]",
    RegMem => "Reg",
    Address => "108",
    Description => "EM bank configurations, see fields description",
    Width => "66", # Excel Formula: =calc_reg_width(E48:E50,F50)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    SharedDbActiveBanks3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "SharedDbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "d1",
    },
    SharedDbHashKey3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "SharedDbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "64",
      Position => "64:1", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
    SharedDbUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 24;
      Name => "SharedDbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
  },
  SharedDbPerEmReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 17; Skip Register;
    Name => "SharedDbPerEmReg[1]",
    RegMem => "Reg",
    Address => "109", # Excel Formula: =calc_reg_address(C47,A47,G47)
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E52:E54,F54)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    SharedDbKeyWidth0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "SharedDbKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F51,E52,TRUE)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
    SharedDbAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "SharedDbAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
    SharedDbBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 27;
      Name => "SharedDbBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F53,E54)
      Type => "Config",
      UsedBy => "SharedDb",
      DefaultValue => "h0",
    },
  },
  SharedDbCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 20; Skip Register;
    Name => "SharedDbCamWmMaxReg[1]",
    RegMem => "Reg",
    Address => "10A", # Excel Formula: =calc_reg_address(C51,A51,G51)
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E56:E56,F56)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    SharedDbCamWmMax0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "SharedDbCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F55,E56,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  SharedDbAccessRegister0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 23; Skip Register;
    Name => "SharedDbAccessRegister[1]",
    RegMem => "Reg",
    Address => "10B", # Excel Formula: =calc_reg_address(C55,A55,G55)
    Description => "EM indirect access configurations",
    Width => "127", # Excel Formula: =calc_reg_width(E58:E58,F58)
    Type => "External",
    UsedBy => "em_top",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    SharedDbAccessReg0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "SharedDbAccessReg[n]",
      RegMem => "RegField",
      Description => "See EM spec for register usage",
      Width => "127",
      Position => "126:0", # Excel Formula: =calc_position(F57,E58,TRUE)
      Type => "External",
    },
  },
  SharedDbResponseRegister0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 25; Skip Register;
    Name => "SharedDbResponseRegister[1]",
    RegMem => "Reg",
    Address => "10C", # Excel Formula: =calc_reg_address(C57,A57,G57)
    Description => "EM indirect access data",
    Width => "127", # Excel Formula: =calc_reg_width(E60:E61,F61)
    Type => "ReadOnly",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    SharedDbResponseValid0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "SharedDbResponseValid[n]",
      RegMem => "RegField",
      Description => "EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F59,E60,TRUE)
      Type => "Event",
      UsedBy => "emdb",
    },
    SharedDbResponseReg0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "SharedDbResponseReg[n]",
      RegMem => "RegField",
      Description => "EM indirect access data, see EM spec for register usage",
      Width => "126",
      Position => "126:1", # Excel Formula: =calc_position(F60,E61)
      Type => "Capture",
      UsedBy => "emdb",
    },
  },
  SharedDbCam => { #Structure Type: Mem; Skip Register;
    Name => "SharedDbCam",
    RegMem => "Mem",
    Address => "600000", # Excel Formula: =calc_mem_address(C45,A45,G62,L62)
    Description => "EM fallback CAM",
    Width => "105", # Excel Formula: =calc_mem_width(E63:E65,"None",F65,-1)
    Type => "Dynamic",
    UsedBy => "SharedDb",
    MemEntries => "32",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=72,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,NumCamLookupClients=2",
    Comments => "EM Skip Reg",
    MemLogicalWidth => "105",
    SharedDbCam_key => { #Structure Type: MemField;
      Name => "SharedDbCam_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F62,E63,TRUE)
    },
    SharedDbCam_payload => { #Structure Type: MemField;
      Name => "SharedDbCam_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "72",
      Position => "103:32", # Excel Formula: =calc_position(F63,E64)
    },
    SharedDbCam_valid => { #Structure Type: MemField;
      Name => "SharedDbCam_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "104", # Excel Formula: =calc_position(F64,E65)
    },
  },
  EmResponseInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "EmResponseInterrupt",
    RegMem => "Reg",
    Address => "10D", # Excel Formula: =calc_reg_address(C59,A59,G59)
    Description => "EM indirect access data is valid",
    Width => "1", # Excel Formula: =calc_reg_width(E67:E67,F67)
    Type => "Interrupt",
    Comments => "EM Skip Reg",
    SharedDbResp => { #Structure Type: RegField;
      Name => "SharedDbResp",
      RegMem => "RegField",
      Description => "Relevant EM indirect access data is valid",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F66,E67,TRUE)
      Type => "Interrupt",
      UsedBy => "emdb",
    },
  },
  EmResponseInterruptMask => { #Structure Type: Reg; Skip Register; Skip Register;
    Name => "EmResponseInterruptMask",
    RegMem => "Reg",
    Address => "10E",
    Description => "This register masks EmResponseInterrupt interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E67:E67,F67)
    Type => "InterruptMask",
    Comments => "EM Skip Reg",
    SharedDbRespMask => { #Structure Type: RegField;
      Name => "SharedDbRespMask",
      RegMem => "RegField",
      Description => "This field masks SharedDbResp interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F66,E67,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  EmResponseInterruptTest => { #Structure Type: Reg; Skip Register; Skip Register;
    Name => "EmResponseInterruptTest",
    RegMem => "Reg",
    Address => "10F",
    Description => "This register tests EmResponseInterrupt interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E67:E67,F67)
    Type => "InterruptTest",
    Comments => "EM Skip Reg",
    SharedDbRespTest => { #Structure Type: RegField;
      Name => "SharedDbRespTest",
      RegMem => "RegField",
      Description => "This field tests SharedDbResp interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F66,E67,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  SharedDbVerifier0BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 17; Skip Register;
    Name => "SharedDbVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "110", # Excel Formula: =calc_reg_address(C66,A66,G66)
    Description => "Bubble request configurations for SharedDbVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E69:E69,F69)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    SharedDbVerifier0BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "SharedDbVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F68,E69,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  SharedDbVerifier1BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 17; Skip Register;
    Name => "SharedDbVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "111",
    Description => "Bubble request configurations for SharedDbVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E69:E69,F69)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    SharedDbVerifier1BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "SharedDbVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F68,E69,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  SharedDbVerifier2BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 17; Skip Register;
    Name => "SharedDbVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "112",
    Description => "Bubble request configurations for SharedDbVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E69:E69,F69)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    SharedDbVerifier2BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 17;
      Name => "SharedDbVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F68,E69,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
  SharedDbVerifier3BubbleReqCfg => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 17; Skip Register;
    Name => "SharedDbVerifier[4]BubbleReqCfg",
    RegMem => "Reg",
    Address => "113",
    Description => "Bubble request configurations for SharedDbVerifier[n] memory",
    Width => "16", # Excel Formula: =calc_reg_width(E69:E69,F69)
    Type => "Config",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    SharedDbVerifier3BubbleTimerCfg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 17;
      Name => "SharedDbVerifier[n]BubbleTimerCfg",
      RegMem => "RegField",
      Description => "Number of consecutive pipe accesses before generating CPU bubble request",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F68,E69,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d1",
    },
  },
};
