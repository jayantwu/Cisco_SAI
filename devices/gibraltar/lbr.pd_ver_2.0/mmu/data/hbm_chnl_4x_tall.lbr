$block{hbm_chnl_4x_tall} = {
  Defines_db => "V:\\design\\mmu\\verilog\\mmu_defines.v",
  ProjectName => "Gibraltar",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "1",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt test register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "16",
    Type => "Config",
    hbm_wr_channel_data_fifo_first_beat0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_first_beat0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_wr_channel_data_fifo_first_beat1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_first_beat1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_wr_channel_data_fifo_second_beat0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_second_beat0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_wr_channel_data_fifo_second_beat1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_second_beat1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_wr_channel_cmd_fifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_cmd_fifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_wr_channel_cmd_fifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_cmd_fifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_data_mem_first_beat0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_first_beat0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_data_mem_first_beat1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_first_beat1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_data_mem_second_beat0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_second_beat0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_data_mem_second_beat1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_second_beat1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_cmd_fifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_cmd_fifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_cmd_fifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_cmd_fifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_reorder_bank_fifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_reorder_bank_fifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_reorder_bank_fifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_reorder_bank_fifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_lpm_channel_mem0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_lpm_channel_mem0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_lpm_channel_mem1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_lpm_channel_mem1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "16",
    Type => "Config",
    hbm_wr_channel_data_fifo_first_beat0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_first_beat0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_wr_channel_data_fifo_first_beat1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_first_beat1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_wr_channel_data_fifo_second_beat0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_second_beat0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_wr_channel_data_fifo_second_beat1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_second_beat1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_wr_channel_cmd_fifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_cmd_fifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_wr_channel_cmd_fifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_wr_channel_cmd_fifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_data_mem_first_beat0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_first_beat0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_data_mem_first_beat1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_first_beat1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_data_mem_second_beat0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_second_beat0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_data_mem_second_beat1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_second_beat1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_cmd_fifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_cmd_fifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_channel_cmd_fifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_channel_cmd_fifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_reorder_bank_fifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_reorder_bank_fifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_rd_reorder_bank_fifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_rd_reorder_bank_fifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_lpm_channel_mem0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_lpm_channel_mem0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    hbm_lpm_channel_mem1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "hbm_lpm_channel_mem1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "16",
    Type => "Config",
    hbm_wr_channel_data_fifo_first_beat0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_first_beat0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_wr_channel_data_fifo_first_beat1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_first_beat1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_wr_channel_data_fifo_second_beat0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_second_beat0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_wr_channel_data_fifo_second_beat1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_second_beat1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_wr_channel_cmd_fifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_cmd_fifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_wr_channel_cmd_fifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_cmd_fifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_data_mem_first_beat0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_first_beat0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_data_mem_first_beat1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_first_beat1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_data_mem_second_beat0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_second_beat0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_data_mem_second_beat1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_second_beat1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_cmd_fifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_cmd_fifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_cmd_fifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_cmd_fifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_reorder_bank_fifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_reorder_bank_fifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_reorder_bank_fifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_reorder_bank_fifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_lpm_channel_mem0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_lpm_channel_mem0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_lpm_channel_mem1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_lpm_channel_mem1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "16",
    Type => "Config",
    hbm_wr_channel_data_fifo_first_beat0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_first_beat0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_wr_channel_data_fifo_first_beat1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_first_beat1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_wr_channel_data_fifo_second_beat0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_second_beat0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_wr_channel_data_fifo_second_beat1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_second_beat1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_wr_channel_cmd_fifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_cmd_fifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_wr_channel_cmd_fifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_wr_channel_cmd_fifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_data_mem_first_beat0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_first_beat0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_data_mem_first_beat1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_first_beat1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_data_mem_second_beat0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_second_beat0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_data_mem_second_beat1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_second_beat1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_cmd_fifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_cmd_fifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_channel_cmd_fifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_channel_cmd_fifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_reorder_bank_fifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_reorder_bank_fifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_rd_reorder_bank_fifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_rd_reorder_bank_fifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_lpm_channel_mem0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_lpm_channel_mem0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    hbm_lpm_channel_mem1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "hbm_lpm_channel_mem1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "16",
    Type => "ReadOnly",
    hbm_wr_channel_data_fifo_first_beat0ErrInt => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_first_beat0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_wr_channel_data_fifo_first_beat1ErrInt => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_first_beat1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_wr_channel_data_fifo_second_beat0ErrInt => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_second_beat0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_wr_channel_data_fifo_second_beat1ErrInt => { #Structure Type: RegField;
      Name => "hbm_wr_channel_data_fifo_second_beat1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_wr_channel_cmd_fifo0ErrInt => { #Structure Type: RegField;
      Name => "hbm_wr_channel_cmd_fifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_wr_channel_cmd_fifo1ErrInt => { #Structure Type: RegField;
      Name => "hbm_wr_channel_cmd_fifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_rd_channel_data_mem_first_beat0ErrInt => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_first_beat0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_rd_channel_data_mem_first_beat1ErrInt => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_first_beat1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_rd_channel_data_mem_second_beat0ErrInt => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_second_beat0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_rd_channel_data_mem_second_beat1ErrInt => { #Structure Type: RegField;
      Name => "hbm_rd_channel_data_mem_second_beat1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "9",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_rd_channel_cmd_fifo0ErrInt => { #Structure Type: RegField;
      Name => "hbm_rd_channel_cmd_fifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "10",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_rd_channel_cmd_fifo1ErrInt => { #Structure Type: RegField;
      Name => "hbm_rd_channel_cmd_fifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "11",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_rd_reorder_bank_fifo0ErrInt => { #Structure Type: RegField;
      Name => "hbm_rd_reorder_bank_fifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "12",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_rd_reorder_bank_fifo1ErrInt => { #Structure Type: RegField;
      Name => "hbm_rd_reorder_bank_fifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "13",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_lpm_channel_mem0ErrInt => { #Structure Type: RegField;
      Name => "hbm_lpm_channel_mem0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "14",
      Type => "Status",
      UsedBy => "SER",
    },
    hbm_lpm_channel_mem1ErrInt => { #Structure Type: RegField;
      Name => "hbm_lpm_channel_mem1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "15",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "11",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "9",
      Position => "8:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "10:9",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "5",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "4",
      Position => "3:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "73", # Excel Formula: =calc_reg_width(E25:E53,F53)
    Type => "Config",
    SACR1P_RME => { #Structure Type: RegField;
      Name => "SACR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACR1P_RM => { #Structure Type: RegField;
      Name => "SACR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RME => { #Structure Type: RegField;
      Name => "SACU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RM => { #Structure Type: RegField;
      Name => "SACU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "9:6", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RME => { #Structure Type: RegField;
      Name => "SADC1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RM => { #Structure Type: RegField;
      Name => "SADC1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "14:11", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEA => { #Structure Type: RegField;
      Name => "SADR2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "15", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMA => { #Structure Type: RegField;
      Name => "SADR2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "19:16", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEB => { #Structure Type: RegField;
      Name => "SADR2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMB => { #Structure Type: RegField;
      Name => "SADR2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "24:21", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEA => { #Structure Type: RegField;
      Name => "SADS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "25", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMA => { #Structure Type: RegField;
      Name => "SADS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "29:26", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEB => { #Structure Type: RegField;
      Name => "SADS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMB => { #Structure Type: RegField;
      Name => "SADS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "34:31", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RME => { #Structure Type: RegField;
      Name => "SASR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "35", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RM => { #Structure Type: RegField;
      Name => "SASR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "39:36", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RME => { #Structure Type: RegField;
      Name => "SASS1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RM => { #Structure Type: RegField;
      Name => "SASS1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "44:41", # Excel Formula: =calc_position(F41,E42)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEA => { #Structure Type: RegField;
      Name => "SASS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "45", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMA => { #Structure Type: RegField;
      Name => "SASS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "49:46", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEB => { #Structure Type: RegField;
      Name => "SASS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMB => { #Structure Type: RegField;
      Name => "SASS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "54:51", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RME => { #Structure Type: RegField;
      Name => "SASU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "55", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RM => { #Structure Type: RegField;
      Name => "SASU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "59:56", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RME => { #Structure Type: RegField;
      Name => "SADU1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "60", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RM => { #Structure Type: RegField;
      Name => "SADU1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "64:61", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RA => { #Structure Type: RegField;
      Name => "SADS2P_RA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Assist for Dual port",
      Width => "2",
      Position => "66:65", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_WA => { #Structure Type: RegField;
      Name => "SADU1P_WA",
      RegMem => "RegField",
      Description => "Write-Assist configuration for the SP SADU compiler",
      Width => "3",
      Position => "69:67", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d5",
    },
    SADU1P_WPULSE => { #Structure Type: RegField;
      Name => "SADU1P_WPULSE",
      RegMem => "RegField",
      Description => "Write-Assist-Pulse configuration for the SP SADU compiler",
      Width => "3",
      Position => "72:70", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E55:E55,F55)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "Spare register",
    Width => "128", # Excel Formula: =calc_reg_width(E57:E57,F57)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "Spare register ",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C56,A56,G56)
    Description => "PMRO controller configuration",
    Width => "32", # Excel Formula: =calc_reg_width(E59:E63,F63)
    Type => "Config",
    PmroRstn => { #Structure Type: RegField;
      Name => "PmroRstn",
      RegMem => "RegField",
      Description => "PMRO reset, active low",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroConfigEn => { #Structure Type: RegField;
      Name => "PmroConfigEn",
      RegMem => "RegField",
      Description => "Enable pmro configuration, when equals to 0 configurations are locked",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroStart => { #Structure Type: RegField;
      Name => "PmroStart",
      RegMem => "RegField",
      Description => "Start the pmro operation",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroRingEn => { #Structure Type: RegField;
      Name => "PmroRingEn",
      RegMem => "RegField",
      Description => "Determines which PMRO ring to activate, should be configured as one hot",
      Width => "7",
      Position => "9:3", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroCntPeriod => { #Structure Type: RegField;
      Name => "PmroCntPeriod",
      RegMem => "RegField",
      Description => "Number of core clock cycles on which PMRO is measured",
      Width => "22",
      Position => "31:10", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "h3FFFFF",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "PMRO status configuration",
    Width => "23", # Excel Formula: =calc_reg_width(E65:E66,F66)
    Type => "ReadOnly",
    PmroCountOut => { #Structure Type: RegField;
      Name => "PmroCountOut",
      RegMem => "RegField",
      Description => "The ring oscilator counter value.",
      Width => "22",
      Position => "21:0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Status",
      UsedBy => "pmro",
    },
    PmroDone => { #Structure Type: RegField;
      Name => "PmroDone",
      RegMem => "RegField",
      Description => "Pmro operation done, PmroCountOut is valid.",
      Width => "1",
      Position => "22", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "Mirror Bus configurations",
    Width => "11", # Excel Formula: =calc_reg_width(E68:E69,F69)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "Enable Mirror Bus",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F67,E68,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "Mirror Bus selector",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C67,A67,G67)
    Description => "Mirror Bus status result",
    Width => "32", # Excel Formula: =calc_reg_width(E71:E71,F71)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "Mirror Bus status result",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F70,E71,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C70,A70,G70)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E73:E73,F73)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  HbmTrainingDone => { #Structure Type: Reg;
    Name => "HbmTrainingDone",
    RegMem => "Reg",
    Address => "100",
    Description => "Indicates that HBM training done, ready for mission mode",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "Config",
    TrainingDone => { #Structure Type: RegField;
      Name => "TrainingDone",
      RegMem => "RegField",
      Description => "channels will be prevented from sending data or functional commands before training has been completed
0 - HBM training not done
1 - HBM training done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HBMDieType => { #Structure Type: Reg;
    Name => "HBMDieType",
    RegMem => "Reg",
    Address => "101", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Type of HBM Die",
    Width => "4", # Excel Formula: =calc_reg_width(E10:E13,F13)
    Type => "Config",
    NumHbms => { #Structure Type: RegField;
      Name => "NumHbms",
      RegMem => "RegField",
      Description => "
NOT FUNCTIONAL",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    HbmUpperOrLower => { #Structure Type: RegField;
      Name => "HbmUpperOrLower",
      RegMem => "RegField",
      Description => "
NOT FUNCTIONAL",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1  ",
    },
    LargeBurstMode => { #Structure Type: RegField;
      Name => "LargeBurstMode",
      RegMem => "RegField",
      Description => "Use data granularity per channel of 256B instead of 128B.
0 - use 128B granularity
1 - use 256B granularity
Required for HBM clock speed > 2.0 GHz when using Samsung HBM dies",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    UseRdPathErrorMonitor => { #Structure Type: RegField;
      Name => "UseRdPathErrorMonitor",
      RegMem => "RegField",
      Description => "Enable for read path monitor, which filters out unexpected read data
0 - do not used read path monitor
1 - use read path monitor",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F12,E13)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  HBMRdToWrArbitrationConfig => { #Structure Type: Reg;
    Name => "HBMRdToWrArbitrationConfig",
    RegMem => "Reg",
    Address => "102", # Excel Formula: =calc_reg_address(C9,A9,G9)
    Description => "Various fields used in HBMRdToWrArbitrationCriteria",
    Width => "64", # Excel Formula: =calc_reg_width(E15:E22,F22)
    Type => "Config",
    MinStayRdRequests => { #Structure Type: RegField;
      Name => "MinStayRdRequests",
      RegMem => "RegField",
      Description => "Minimum number of total read requests required to stay in read",
      Width => "9",
      Position => "8:0", # Excel Formula: =calc_position(F14,E15,TRUE)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d16",
    },
    MinStayRdValidBanks => { #Structure Type: RegField;
      Name => "MinStayRdValidBanks",
      RegMem => "RegField",
      Description => "Minimum number of total non-empty banks required to stay in read",
      Width => "5",
      Position => "13:9", # Excel Formula: =calc_position(F15,E16)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d0",
    },
    MinMoveToWrValidBanks => { #Structure Type: RegField;
      Name => "MinMoveToWrValidBanks",
      RegMem => "RegField",
      Description => "Minimum number of total valid banks required to move to write",
      Width => "5",
      Position => "18:14", # Excel Formula: =calc_position(F16,E17)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d4",
    },
    MinMoveToWrRequests => { #Structure Type: RegField;
      Name => "MinMoveToWrRequests",
      RegMem => "RegField",
      Description => "Minimum number of total write requests required to move to write",
      Width => "8",
      Position => "26:19", # Excel Formula: =calc_position(F17,E18)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d15",
    },
    RdTotalCyclesThreshold0 => { #Structure Type: RegField;
      Name => "RdTotalCyclesThreshold0",
      RegMem => "RegField",
      Description => "Number of cycles elapsed when read is given priority  after which move to write. Lowest threshold",
      Width => "12",
      Position => "38:27", # Excel Formula: =calc_position(F18,E19)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d512",
    },
    RdTotalCyclesThreshold1 => { #Structure Type: RegField;
      Name => "RdTotalCyclesThreshold1",
      RegMem => "RegField",
      Description => "Number of cycles elapsed when read is given priority  after which move to write. Second threshold. Assumed to be larger than threshold0",
      Width => "12",
      Position => "50:39", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d1024",
    },
    RdTotalCyclesThreshold2 => { #Structure Type: RegField;
      Name => "RdTotalCyclesThreshold2",
      RegMem => "RegField",
      Description => "Number of cycles elapsed when read is given priority  after which move to write. Third threshold. Assumed to be larger than threshold1",
      Width => "12",
      Position => "62:51", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d2048",
    },
    MoveToWrOnEmpty => { #Structure Type: RegField;
      Name => "MoveToWrOnEmpty",
      RegMem => "RegField",
      Description => "Move to write whenever all read FIFOs are empty
0 - Do not automatically move to write when all read FIFOs are empty
1 - Automatically move to write when all read FIFOs are empty",
      Width => "1",
      Position => "63", # Excel Formula: =calc_position(F21,E22)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d1",
    },
  },
  HBMWrToRdArbitrationConfig => { #Structure Type: Reg;
    Name => "HBMWrToRdArbitrationConfig",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C14,A14,G14)
    Description => "Various fields used in HBMWrToRdArbitrationCriteria",
    Width => "81", # Excel Formula: =calc_reg_width(E24:E33,F33)
    Type => "Config",
    MinStayWrRequests => { #Structure Type: RegField;
      Name => "MinStayWrRequests",
      RegMem => "RegField",
      Description => "Minimum number of total write requests required to stay in write",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F23,E24,TRUE)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d16",
    },
    MinStayWrValidBanks => { #Structure Type: RegField;
      Name => "MinStayWrValidBanks",
      RegMem => "RegField",
      Description => "Minimum number of total non-empty write banks to stay in write",
      Width => "5",
      Position => "12:8", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d3",
    },
    MinMoveToRdValidBanks => { #Structure Type: RegField;
      Name => "MinMoveToRdValidBanks",
      RegMem => "RegField",
      Description => "Minimum number of valid reads banks required to move to read. Threshold 0",
      Width => "5",
      Position => "17:13", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d12",
    },
    MinMoveToRdRequests => { #Structure Type: RegField;
      Name => "MinMoveToRdRequests",
      RegMem => "RegField",
      Description => "Minimum number of total read requests required to move to read",
      Width => "9",
      Position => "26:18", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d15  ",
    },
    WrTotalCyclesThreshold0 => { #Structure Type: RegField;
      Name => "WrTotalCyclesThreshold0",
      RegMem => "RegField",
      Description => "Number of cycles elapsed when write is given priority  after which move to read. Lowest threshold",
      Width => "12",
      Position => "38:27", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d512",
    },
    WrTotalCyclesThreshold1 => { #Structure Type: RegField;
      Name => "WrTotalCyclesThreshold1",
      RegMem => "RegField",
      Description => "Number of cycles elapsed when write is given priority  after which move to read. Second threshold. Assumed to be larger than threshold0",
      Width => "12",
      Position => "50:39", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d1024",
    },
    WrTotalCyclesThreshold2 => { #Structure Type: RegField;
      Name => "WrTotalCyclesThreshold2",
      RegMem => "RegField",
      Description => "Number of cycles elapsed when write is given priority  after which move to read. Third threshold. Assumed to be larger than threshold1",
      Width => "12",
      Position => "62:51", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d2048",
    },
    MinLpmReqPendingCycles => { #Structure Type: RegField;
      Name => "MinLpmReqPendingCycles",
      RegMem => "RegField",
      Description => "Number of cycles during which LPM read request is pending after which to move to read. Counter is reset on move to write. Values less than MinArbCycles will have no effect",
      Width => "9",
      Position => "71:63", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d128",
    },
    MoveToRdOnEmpty => { #Structure Type: RegField;
      Name => "MoveToRdOnEmpty",
      RegMem => "RegField",
      Description => "Move to read whenever all write FIFOs are empty
0 - Do not automatically move to read when all write FIFOs are empty
1 - Automatically move to read when all write FIFOs are empty",
      Width => "1",
      Position => "72", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d1",
    },
    MinArbCycles => { #Structure Type: RegField;
      Name => "MinArbCycles",
      RegMem => "RegField",
      Description => "Minimum number of cycles that arbitration must remain in write or read under any circumstances. USED FOR INTERNAL DESIGN TUNING",
      Width => "8",
      Position => "80:73", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "d96",
    },
  },
  HBMRdToWrArbitrationCriteria => { #Structure Type: Reg;
    Name => "HBMRdToWrArbitrationCriteria",
    RegMem => "Reg",
    Address => "104", # Excel Formula: =calc_reg_address(C23,A23,G23)
    Description => "Configuration for LUT that controls switching from read to write. The 8 criteria in HBMRdToWrArbitrationConfig register are translated to 256b vector, where a 1 means move to write on that combination
LUT bit 0: Total number of rd requests (SMS only) <= MinStayRdRequests
LUT bit 1: Total number of non-empty rd banks (LPM or SMS data) <=  MinStayRdValidBanks
LUT bit 2: Total number of non-empty rd banks (LPM or SMS data) > MinMoveToWrValidBanks
LUT bit 3: Total number of rd requests (SMS only) < Total number of write requests
LUT bit 4: Total number of write requests > MinMoveToWrRequests
LUT bit 5: Total number of non-empty rd banks (LPM or SMS data) <  total number of non-empty wr banks
LUT bit 7:6: Total number of cycles elapsed since last switch > RdTotalCyclesThreshold0,1,2",
    Width => "256", # Excel Formula: =calc_reg_width(E35:E35,F35)
    Type => "Config",
    RdToWrLut => { #Structure Type: RegField;
      Name => "RdToWrLut",
      RegMem => "RegField",
      Description => "Move to write if is 1 in vector formed by LUT bits. ",
      Width => "256",
      Position => "255:0", # Excel Formula: =calc_position(F34,E35,TRUE)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000",
    },
  },
  HBMWrToRdArbitrationCriteria => { #Structure Type: Reg;
    Name => "HBMWrToRdArbitrationCriteria",
    RegMem => "Reg",
    Address => "105", # Excel Formula: =calc_reg_address(C34,A34,G34)
    Description => "Configuration for LUT that controls switching from write to read The 9 criteria in HBMWrToWrArbitrationCriteria register are translated to 256b vector, where a 1 means move to write on that combination
LUT bit 0: Total number of wr requests <= MinStayWrRequests
LUT bit 1: Total number of non-empty wr banks <=  MinStayWrValidBanks
LUT bit 2: Total number of non-empty wr banks > MinMoveToRdValidBanks
LUT bit 3: Total number of wr requests < Total number of read requests  (SMS only)
LUT bit 4: Total number of read requests  (SMS only) > MinMoveToRdRequests
LUT bit 5: Total number of non-empty wr banks  <  total number of non-empty rd banks  (LPM or SMS data)
LUT bit 7:6: Total number of cycles elapsed since last switch > RdTotalCyclesThreshold0,1,2
LUT bit 8 : Number of cycles that LPM read request is pending >= MinLpmReqPendingCycles",
    Width => "512", # Excel Formula: =calc_reg_width(E37:E37,F37)
    Type => "Config",
    WrToRdLut => { #Structure Type: RegField;
      Name => "WrToRdLut",
      RegMem => "RegField",
      Description => "Move to read if is 1 in vector formed by LUT bits.",
      Width => "512",
      Position => "511:0", # Excel Formula: =calc_position(F36,E37,TRUE)
      Type => "Config",
      UsedBy => "arb",
      DefaultValue => "b
    },
  },
  MmuLpmReadArbitration => { #Structure Type: Reg;
    Name => "MmuLpmReadArbitration",
    RegMem => "Reg",
    Address => "106", # Excel Formula: =calc_reg_address(C36,A36,G36)
    Description => "Configuration for arbitration between LPM and MMU read requests",
    Width => "2", # Excel Formula: =calc_reg_width(E39:E40,F40)
    Type => "Config",
    LpmStrictPriority => { #Structure Type: RegField;
      Name => "LpmStrictPriority",
      RegMem => "RegField",
      Description => "Give strict priority to LPM read request
0 - LPM read request will not have strict priority (priority will be determined by LpmHighPriority register) 
1- LPM read request will have strict priority over SMS data",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F38,E39,TRUE)
      Type => "Config",
      UsedBy => "hbm_rd_channel",
      DefaultValue => "d1",
    },
    LpmHighPriority => { #Structure Type: RegField;
      Name => "LpmHighPriority",
      RegMem => "RegField",
      Description => "Give equal priority to SMS and LPM read requests 
0 - SMS data will be favored 2:1 over LPM data.
1 - LPM will have equal priority to SMS data.  
Only used if StrictPriority is 0.",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "hbm_rd_channel",
      DefaultValue => "d1",
    },
  },
  MmuBankArbitration => { #Structure Type: Reg;
    Name => "MmuBankArbitration",
    RegMem => "Reg",
    Address => "107", # Excel Formula: =calc_reg_address(C38,A38,G38)
    Description => "Configuration for arbitration between banks in HBM channels",
    Width => "9", # Excel Formula: =calc_reg_width(E42:E43,F43)
    Type => "Config",
    RdFifoPriorityThreshold => { #Structure Type: RegField;
      Name => "RdFifoPriorityThreshold",
      RegMem => "RegField",
      Description => "All banks whose read request FIFO is fuller than this level will get strict priority over other banks in the same bank group. If set to 0, will have no effect",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F41,E42,TRUE)
      Type => "Config",
      UsedBy => "hbm_rd_channel",
      DefaultValue => "d12",
    },
    WrFifoPriorityThreshold => { #Structure Type: RegField;
      Name => "WrFifoPriorityThreshold",
      RegMem => "RegField",
      Description => "All banks whose write FIFO is fuller than this level will get strict priority over other banks in the same bank group. If set to 0, will have no effect. Default is for LargeBurstMode",
      Width => "4",
      Position => "8:5", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "hbm_wr_channel",
      DefaultValue => "d4",
    },
  },
  HBMTimingParams => { #Structure Type: Reg;
    Name => "HBMTimingParams",
    RegMem => "Reg",
    Address => "108", # Excel Formula: =calc_reg_address(C41,A41,G41)
    Description => "Timing parameters from HBM standard. NOTE: All times are in terms of DRAM clock (nomimal 1 GHZ)! Defaults are according to Samsung spec, 1GHz DFI clock. Cycles must be rounded upwards if division by clock cycle is not integer",
    Width => "90", # Excel Formula: =calc_reg_width(E45:E61,F61)
    Type => "Config",
    HbmTrcdrd => { #Structure Type: RegField;
      Name => "HbmTrcdrd",
      RegMem => "RegField",
      Description => "Min time from ACTIVATE until first read command",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F44,E45,TRUE)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d16",
    },
    HbmTrcdwr => { #Structure Type: RegField;
      Name => "HbmTrcdwr",
      RegMem => "RegField",
      Description => "Min time from ACTIVATE until first write command",
      Width => "6",
      Position => "11:6", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d14",
    },
    HbmTrrdl => { #Structure Type: RegField;
      Name => "HbmTrrdl",
      RegMem => "RegField",
      Description => "Min time between 2 ACTIVATEs or SINGLE_BANK_REFRESH for 2 different banks, SAME bank group",
      Width => "4",
      Position => "15:12", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d2",
    },
    HbmTrrds => { #Structure Type: RegField;
      Name => "HbmTrrds",
      RegMem => "RegField",
      Description => "Min time between 2 ACTIVATEs or SINGLE_BANK_REFRESH for 2 different banks, DIFFERENT bank group",
      Width => "4",
      Position => "19:16", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d2",
    },
    HbmTrp => { #Structure Type: RegField;
      Name => "HbmTrp",
      RegMem => "RegField",
      Description => "Min time from Prefetch command until next ACTIVATE or SINGLE BANK REFRESH",
      Width => "5",
      Position => "24:20", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d16",
    },
    HbmTccdl => { #Structure Type: RegField;
      Name => "HbmTccdl",
      RegMem => "RegField",
      Description => "Min time between 2 consecutive RDs or WRs to 2 different banks in SAME bank group. Set to value for BL=4",
      Width => "4",
      Position => "28:25", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d4",
    },
    HbmTccds => { #Structure Type: RegField;
      Name => "HbmTccds",
      RegMem => "RegField",
      Description => "Min time between 2 consecutive RDs or WRs to 2 different banks in DIFFERENT bank group. Set to value for BL=4",
      Width => "4",
      Position => "32:29", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d2",
    },
    HbmTwtrl => { #Structure Type: RegField;
      Name => "HbmTwtrl",
      RegMem => "RegField",
      Description => "Min time between end of wr data and issuing of RD command, SAME bank group. Add WL + BL/2 to value from data sheet",
      Width => "5",
      Position => "37:33", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d8",
    },
    HbmTwtrs => { #Structure Type: RegField;
      Name => "HbmTwtrs",
      RegMem => "RegField",
      Description => "Min time between end of wr data and issuing of RD command, DIFFERENT bank group. Add WL + BL/2 to value from data sheet",
      Width => "5",
      Position => "42:38", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d3",
    },
    HbmTrtw => { #Structure Type: RegField;
      Name => "HbmTrtw",
      RegMem => "RegField",
      Description => "Min time between RD command and WR command. Calculated according to formula in data sheet in terms of DFI clocks",
      Width => "6",
      Position => "48:43", # Excel Formula: =calc_position(F53,E54)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d3",
    },
    HbmTras => { #Structure Type: RegField;
      Name => "HbmTras",
      RegMem => "RegField",
      Description => "Min time from ACTIVATE until PRECHARGE command. It is assumed that tRC = tRAS + tRP. If this is not the case, then (tRC - tRAS - tRP) should be added to the tRAS value from the data sheet",
      Width => "6",
      Position => "54:49", # Excel Formula: =calc_position(F54,E55)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d29 ",
    },
    HbmWL => { #Structure Type: RegField;
      Name => "HbmWL",
      RegMem => "RegField",
      Description => "Clock cycles from sending WR command until sending wr data on interface. Same value must be programmed into HBM die using MRS commands. Min value 3 (2 is minimum due to PHY constraints, 3 due to RTL constraint). Max value 8 (according to standard)
Note that this is NOT encoded the same as mode register. Here is actual value",
      Width => "4",
      Position => "58:55", # Excel Formula: =calc_position(F55,E56)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d8",
    },
    HbmTrrefd => { #Structure Type: RegField;
      Name => "HbmTrrefd",
      RegMem => "RegField",
      Description => "Min time from SINGLE BANK REFRESH to ACTIVATE or SINGLE BANK REFRESH of different bank. Min value 2",
      Width => "4",
      Position => "62:59", # Excel Formula: =calc_position(F56,E57)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d8",
    },
    HbmTrfcsb => { #Structure Type: RegField;
      Name => "HbmTrfcsb",
      RegMem => "RegField",
      Description => "Min time from SINGLE BANK REFRESH to ACTIVATE of same bank. In terms of DFI clock cycles",
      Width => "8",
      Position => "70:63", # Excel Formula: =calc_position(F57,E58)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d160",
    },
    HbmTrfc => { #Structure Type: RegField;
      Name => "HbmTrfc",
      RegMem => "RegField",
      Description => "Min time from REFRESH to any other command. In terms of DFI clock cycles",
      Width => "9",
      Position => "79:71", # Excel Formula: =calc_position(F58,E59)
      Type => "Config",
      UsedBy => "refresh",
      DefaultValue => "d260",
    },
    HbmDoSingleBankRefresh => { #Structure Type: RegField;
      Name => "HbmDoSingleBankRefresh",
      RegMem => "RegField",
      Description => "0 : Use pulled-in REFRESH commands for HBM refresh. Must be used when using traffic generator
1 : Use SINGLE BANK REFRESH commands. Recommended for normal MMU use",
      Width => "1",
      Position => "80", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d1",
    },
    HbmRefreshPriorityTime => { #Structure Type: RegField;
      Name => "HbmRefreshPriorityTime",
      RegMem => "RegField",
      Description => "Time, in dfi_clk cycles, before the end of the tREFI interval in which SINGLE_BANK_REFRESH commands will be given priority. Should be larger that 16 * (2 + tRREFD)",
      Width => "9",
      Position => "89:81", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d220",
    },
  },
  HBMMoreTimingParameters => { #Structure Type: Reg;
    Name => "HBMMoreTimingParameters",
    RegMem => "Reg",
    Address => "109", # Excel Formula: =calc_reg_address(C44,A44,G44)
    Description => "Timing parameters from HBM standard. NOTE: All times are in terms of DRAM clock (nomimal 1 GHZ)! Defaults are according to Samsung spec, 1GHz DFI clock. Cycles must be rounded upwards if division by clock cycle is not integer",
    Width => "31", # Excel Formula: =calc_reg_width(E63:E67,F67)
    Type => "Config",
    HbmTfaw => { #Structure Type: RegField;
      Name => "HbmTfaw",
      RegMem => "RegField",
      Description => "Four bank activate window. Valid values (MMU restriction) 8->32. 
For SK Hynix HBM dies, use here 8ns (the Interleave case tFAW)",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F62,E63,TRUE)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d16",
    },
    HbmTfawUseInterleavedPcs => { #Structure Type: RegField;
      Name => "HbmTfawUseInterleavedPcs",
      RegMem => "RegField",
      Description => "0 : Use for Samsung HBM. Counts tFAW only per PC
1 : Use for SK Hynix HBM. Counts tFAW including both PCs",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F63,E64)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d0",
    },
    HbmTrefi => { #Structure Type: RegField;
      Name => "HbmTrefi",
      RegMem => "RegField",
      Description => "Average periodic refresh interval for REFRESH command. In terms of DFI clock cycles. (Default is 3.9 us @ 1 GHz clock)",
      Width => "16",
      Position => "21:6", # Excel Formula: =calc_position(F64,E65)
      Type => "Config",
      UsedBy => "refresh",
      DefaultValue => "d3900",
    },
    HbmTwr => { #Structure Type: RegField;
      Name => "HbmTwr",
      RegMem => "RegField",
      Description => "Write Recovery field. Must program same value into Mode Register",
      Width => "5",
      Position => "26:22", # Excel Formula: =calc_position(F65,E66)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d16 ",
    },
    HbmTrtp => { #Structure Type: RegField;
      Name => "HbmTrtp",
      RegMem => "RegField",
      Description => "Min time from RD command until can issue PRECHARGE command. Measured in CLOCKS in spec.  Take parameter tRTPL for BL=4",
      Width => "4",
      Position => "30:27", # Excel Formula: =calc_position(F66,E67)
      Type => "Config",
      UsedBy => "prot",
      DefaultValue => "d4 ",
    },
  },
  HBMPowerDown => { #Structure Type: Reg;
    Name => "HBMPowerDown",
    RegMem => "Reg",
    Address => "10A", # Excel Formula: =calc_reg_address(C62,A62,G62)
    Description => "Configuration and timing parameters related to power down of HBM",
    Width => "9", # Excel Formula: =calc_reg_width(E69:E71,F71)
    Type => "Config",
    EnablePowerDown => { #Structure Type: RegField;
      Name => "EnablePowerDown",
      RegMem => "RegField",
      Description => "Enable HBM to enter power-down state when few requests are pending
0 - Do not allow HBM to enter power-down state
1 - Allow HBM to enter power-down state",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F68,E69,TRUE)
      Type => "Config",
      UsedBy => "row_cmd",
      DefaultValue => "d1",
    },
    HbmTpd => { #Structure Type: RegField;
      Name => "HbmTpd",
      RegMem => "RegField",
      Description => "Minimum power-down duration. Round up to closest integer",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F69,E70)
      Type => "Config",
      UsedBy => "row_cmd",
      DefaultValue => "d6",
    },
    HbmTxp => { #Structure Type: RegField;
      Name => "HbmTxp",
      RegMem => "RegField",
      Description => "Minimum time after exiting power-down that can issue valid command. Round up to closest integer",
      Width => "4",
      Position => "8:5", # Excel Formula: =calc_position(F70,E71)
      Type => "Config",
      UsedBy => "row_cmd",
      DefaultValue => "d8",
    },
  },
  ChannelFifoSizes => { #Structure Type: Reg;
    Name => "ChannelFifoSizes",
    RegMem => "Reg",
    Address => "10B", # Excel Formula: =calc_reg_address(C68,A68,G68)
    Description => "Sizes of command FIFOs in read/write channels",
    Width => "17", # Excel Formula: =calc_reg_width(E73:E75,F75)
    Type => "Config",
    WriteFifoSize => { #Structure Type: RegField;
      Name => "WriteFifoSize",
      RegMem => "RegField",
      Description => "Max size of write data FIFO for a single bank. Given as almost_full level, so for full 32 entries use value of 0. For LargeBurstMode, use 0. For 128B mode, use 16 or more",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "hbm_wr_channel",
      DefaultValue => "d0",
    },
    ReadFifoSize => { #Structure Type: RegField;
      Name => "ReadFifoSize",
      RegMem => "RegField",
      Description => "Size of read command FIFO in read channel. Max value of 32. ONLY USED FOR DEBUG",
      Width => "6",
      Position => "10:5", # Excel Formula: =calc_position(F73,E74)
      Type => "Config",
      UsedBy => "hbm_rd_channel",
      DefaultValue => "d32",
    },
    LpmResultAlmFull => { #Structure Type: RegField;
      Name => "LpmResultAlmFull",
      RegMem => "RegField",
      Description => "Almost full threshold for LPM result FIFO. Used to send almost_full indication to MMU for LPM load balancing",
      Width => "6",
      Position => "16:11", # Excel Formula: =calc_position(F74,E75)
      Type => "Config",
      UsedBy => "hbm_rd_channel",
      DefaultValue => "d52",
    },
  },
  DebugCounters0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14;
    Name => "DebugCounters[2]",
    RegMem => "Reg",
    Address => "10C", # Excel Formula: =calc_reg_address(C72,A72,G72)
    Description => "Various performance counters",
    Width => "187", # Excel Formula: =calc_reg_width(E77:E84,F84)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    WrPathFlowControlCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "WrPathFlowControlCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that write path gave flow control indication when valid data was waiting",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F76,E77,TRUE)
      Type => "Counter",
      UsedBy => "hbm_wr_channel",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdPathFlowControlCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "RdPathFlowControlCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that read path gave flow control indication when valid req was waiting",
      Width => "32",
      Position => "63:32", # Excel Formula: =calc_position(F77,E78)
      Type => "Counter",
      UsedBy => "hbm_rd_channel",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdResponseFlowControlCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 28;
      Name => "RdResponseFlowControlCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that read response path gave flow control indication when valid rd data was waiting",
      Width => "32",
      Position => "95:64", # Excel Formula: =calc_position(F78,E79)
      Type => "Counter",
      UsedBy => "hbm_rd_reorder",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    LpmBuffersFullCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 21;
      Name => "LpmBuffersFullCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that LPM requests were not taken due to full LPM memory",
      Width => "8",
      Position => "103:96", # Excel Formula: =calc_position(F79,E80)
      Type => "Counter",
      UsedBy => "hbm_lpm_channel",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    PowerDownCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "PowerDownCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that channel is in power-down states",
      Width => "32",
      Position => "135:104", # Excel Formula: =calc_position(F80,E81)
      Type => "Counter",
      UsedBy => "hbm_protocol_row_cmd",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    ReadBeforeWriteCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "ReadBeforeWriteCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that read was stopped due to read-before-write hazard",
      Width => "32",
      Position => "167:136", # Excel Formula: =calc_position(F81,E82)
      Type => "Counter",
      UsedBy => "hbm_rd_channel",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    TotalWrBankFifoFillWatermark0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "TotalWrBankFifoFillWatermark[n]",
      RegMem => "RegField",
      Description => "High watermark for total fill of all wr bank FIFOs for this channel",
      Width => "9",
      Position => "176:168", # Excel Formula: =calc_position(F82,E83)
      Type => "MaxWmk",
      UsedBy => "hbm_wr_channel",
    },
    TotalRdBankFifoFillWatermark0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "TotalRdBankFifoFillWatermark[n]",
      RegMem => "RegField",
      Description => "High watermark for total fill of all rd bank FIFOs for this channel",
      Width => "10",
      Position => "186:177", # Excel Formula: =calc_position(F83,E84)
      Type => "MaxWmk",
      UsedBy => "hbm_rd_channel",
    },
  },
  DebugCounters1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14;
    Name => "DebugCounters[2]",
    RegMem => "Reg",
    Address => "10D",
    Description => "Various performance counters",
    Width => "187", # Excel Formula: =calc_reg_width(E77:E84,F84)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    WrPathFlowControlCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "WrPathFlowControlCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that write path gave flow control indication when valid data was waiting",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F76,E77,TRUE)
      Type => "Counter",
      UsedBy => "hbm_wr_channel",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdPathFlowControlCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "RdPathFlowControlCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that read path gave flow control indication when valid req was waiting",
      Width => "32",
      Position => "63:32", # Excel Formula: =calc_position(F77,E78)
      Type => "Counter",
      UsedBy => "hbm_rd_channel",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdResponseFlowControlCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 28;
      Name => "RdResponseFlowControlCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that read response path gave flow control indication when valid rd data was waiting",
      Width => "32",
      Position => "95:64", # Excel Formula: =calc_position(F78,E79)
      Type => "Counter",
      UsedBy => "hbm_rd_reorder",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    LpmBuffersFullCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 21;
      Name => "LpmBuffersFullCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that LPM requests were not taken due to full LPM memory",
      Width => "8",
      Position => "103:96", # Excel Formula: =calc_position(F79,E80)
      Type => "Counter",
      UsedBy => "hbm_lpm_channel",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    PowerDownCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "PowerDownCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that channel is in power-down states",
      Width => "32",
      Position => "135:104", # Excel Formula: =calc_position(F80,E81)
      Type => "Counter",
      UsedBy => "hbm_protocol_row_cmd",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    ReadBeforeWriteCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "ReadBeforeWriteCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that read was stopped due to read-before-write hazard",
      Width => "32",
      Position => "167:136", # Excel Formula: =calc_position(F81,E82)
      Type => "Counter",
      UsedBy => "hbm_rd_channel",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    TotalWrBankFifoFillWatermark1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "TotalWrBankFifoFillWatermark[n]",
      RegMem => "RegField",
      Description => "High watermark for total fill of all wr bank FIFOs for this channel",
      Width => "9",
      Position => "176:168", # Excel Formula: =calc_position(F82,E83)
      Type => "MaxWmk",
      UsedBy => "hbm_wr_channel",
    },
    TotalRdBankFifoFillWatermark1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "TotalRdBankFifoFillWatermark[n]",
      RegMem => "RegField",
      Description => "High watermark for total fill of all rd bank FIFOs for this channel",
      Width => "10",
      Position => "186:177", # Excel Formula: =calc_position(F83,E84)
      Type => "MaxWmk",
      UsedBy => "hbm_rd_channel",
    },
  },
  RdWrArbitrationDebugControl0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 28;
    Name => "RdWrArbitrationDebugControl[2]",
    RegMem => "Reg",
    Address => "10E", # Excel Formula: =calc_reg_address(C76,A76,G76)
    Description => "Debug registers for read-write arbitration tuning",
    Width => "33", # Excel Formula: =calc_reg_width(E86:E87,F87)
    Type => "Config",
    ArrayLength => "2",
    ArrayIndex => "0",
    RdWrArbitrationCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "RdWrArbitrationCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles after start to run idle cycle checker",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F85,E86,TRUE)
      Type => "Config",
      UsedBy => "hbm_protocol_row_cmd",
      DefaultValue => "d16777215",
    },
    RdWrArbitrationGo0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "RdWrArbitrationGo[n]",
      RegMem => "RegField",
      Description => "Write 0 then 1 to this register to start the arbitration debug",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F86,E87)
      Type => "Config",
      UsedBy => "hbm_protocol_row_cmd",
      DefaultValue => "d0",
    },
  },
  RdWrArbitrationDebugControl1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 28;
    Name => "RdWrArbitrationDebugControl[2]",
    RegMem => "Reg",
    Address => "10F",
    Description => "Debug registers for read-write arbitration tuning",
    Width => "33", # Excel Formula: =calc_reg_width(E86:E87,F87)
    Type => "Config",
    ArrayLength => "2",
    ArrayIndex => "1",
    RdWrArbitrationCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "RdWrArbitrationCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles after start to run idle cycle checker",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F85,E86,TRUE)
      Type => "Config",
      UsedBy => "hbm_protocol_row_cmd",
      DefaultValue => "d16777215",
    },
    RdWrArbitrationGo1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "RdWrArbitrationGo[n]",
      RegMem => "RegField",
      Description => "Write 0 then 1 to this register to start the arbitration debug",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F86,E87)
      Type => "Config",
      UsedBy => "hbm_protocol_row_cmd",
      DefaultValue => "d0",
    },
  },
  RdWrArbitrationDebugStatus0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 27;
    Name => "RdWrArbitrationDebugStatus[2]",
    RegMem => "Reg",
    Address => "110", # Excel Formula: =calc_reg_address(C85,A85,G85)
    Description => "Debug registers for read-write arbitration tuning",
    Width => "64", # Excel Formula: =calc_reg_width(E89:E90,F90)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    WriteIdleCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "WriteIdleCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that write path was selected and no traffic was sent on row bus during RdWrArbitration",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F88,E89,TRUE)
      Type => "Counter",
      UsedBy => "hbm_protocol_row_cmd",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    ReadIdleCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "ReadIdleCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that read path was selected and no traffic was sent on row bus during RdWrArbitration",
      Width => "32",
      Position => "63:32", # Excel Formula: =calc_position(F89,E90)
      Type => "Counter",
      UsedBy => "hbm_protocol_row_cmd",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  RdWrArbitrationDebugStatus1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 27;
    Name => "RdWrArbitrationDebugStatus[2]",
    RegMem => "Reg",
    Address => "111",
    Description => "Debug registers for read-write arbitration tuning",
    Width => "64", # Excel Formula: =calc_reg_width(E89:E90,F90)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    WriteIdleCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "WriteIdleCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that write path was selected and no traffic was sent on row bus during RdWrArbitration",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F88,E89,TRUE)
      Type => "Counter",
      UsedBy => "hbm_protocol_row_cmd",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    ReadIdleCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "ReadIdleCycles[n]",
      RegMem => "RegField",
      Description => "Number of cycles that read path was selected and no traffic was sent on row bus during RdWrArbitration",
      Width => "32",
      Position => "63:32", # Excel Formula: =calc_position(F89,E90)
      Type => "Counter",
      UsedBy => "hbm_protocol_row_cmd",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  TrafficGenTransCtrl0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 20;
    Name => "TrafficGenTransCtrl[2]",
    RegMem => "Reg",
    Address => "112", # Excel Formula: =calc_reg_address(C88,A88,G88)
    Description => "Transaction control for HBM Traffic Generator",
    Width => "71", # Excel Formula: =calc_reg_width(E92:E98,F98)
    Type => "Config",
    ArrayLength => "2",
    ArrayIndex => "0",
    UseTrafficGen0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "UseTrafficGen[n]",
      RegMem => "RegField",
      Description => "0 : Do not use traffic generator
1 : Use traffic generator",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F91,E92,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    RunTest0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 8;
      Name => "RunTest[n]",
      RegMem => "RegField",
      Description => "1 : Generate traffic
0 : Do not generate traffic (stop)
If the generator stops due to StopOnError or finishing NumTransactions, must write 0 and then 1 to this register",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F92,E93)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
    NumTransactions0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "NumTransactions[n]",
      RegMem => "RegField",
      Description => "Number of 1kb (or, in large burst mode, 2kb) transactions to send. This is the total number of writes and reads to send. The number should be even, and should be divisible by WritesBeforeTurnaround * 2 for correct results
0 : send transactions infinitely, until stop is given",
      Width => "32",
      Position => "33:2", # Excel Formula: =calc_position(F93,E94)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
    StopOnError0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 12;
      Name => "StopOnError[n]",
      RegMem => "RegField",
      Description => "0 : Do not stop on any error
non-0 : Stop when get this number error",
      Width => "16",
      Position => "49:34", # Excel Formula: =calc_position(F94,E95)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d1",
    },
    PcForStopOnError0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "PcForStopOnError[n]",
      RegMem => "RegField",
      Description => "Which PC to look at when counting which error to stop on",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F95,E96)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
    WritesBeforeTurnaround0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 23;
      Name => "WritesBeforeTurnaround[n]",
      RegMem => "RegField",
      Description => "Number of writes/reads to do before doing turnaround to read/write. Counted in 1kb transactions (2kb in large burst mode). MUST be multiple of NumBanks",
      Width => "16",
      Position => "66:51", # Excel Formula: =calc_position(F96,E97)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d256",
    },
    IdlesBtwnBanks0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "IdlesBtwnBanks[n]",
      RegMem => "RegField",
      Description => "Number of IDLE cycles to insert between groups of 4 ACTIVATE commands. ",
      Width => "4",
      Position => "70:67", # Excel Formula: =calc_position(F97,E98)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
  },
  TrafficGenTransCtrl1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 20;
    Name => "TrafficGenTransCtrl[2]",
    RegMem => "Reg",
    Address => "113",
    Description => "Transaction control for HBM Traffic Generator",
    Width => "71", # Excel Formula: =calc_reg_width(E92:E98,F98)
    Type => "Config",
    ArrayLength => "2",
    ArrayIndex => "1",
    UseTrafficGen1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "UseTrafficGen[n]",
      RegMem => "RegField",
      Description => "0 : Do not use traffic generator
1 : Use traffic generator",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F91,E92,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    RunTest1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 8;
      Name => "RunTest[n]",
      RegMem => "RegField",
      Description => "1 : Generate traffic
0 : Do not generate traffic (stop)
If the generator stops due to StopOnError or finishing NumTransactions, must write 0 and then 1 to this register",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F92,E93)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
    NumTransactions1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "NumTransactions[n]",
      RegMem => "RegField",
      Description => "Number of 1kb (or, in large burst mode, 2kb) transactions to send. This is the total number of writes and reads to send. The number should be even, and should be divisible by WritesBeforeTurnaround * 2 for correct results
0 : send transactions infinitely, until stop is given",
      Width => "32",
      Position => "33:2", # Excel Formula: =calc_position(F93,E94)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
    StopOnError1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 12;
      Name => "StopOnError[n]",
      RegMem => "RegField",
      Description => "0 : Do not stop on any error
non-0 : Stop when get this number error",
      Width => "16",
      Position => "49:34", # Excel Formula: =calc_position(F94,E95)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d1",
    },
    PcForStopOnError1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "PcForStopOnError[n]",
      RegMem => "RegField",
      Description => "Which PC to look at when counting which error to stop on",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F95,E96)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
    WritesBeforeTurnaround1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 23;
      Name => "WritesBeforeTurnaround[n]",
      RegMem => "RegField",
      Description => "Number of writes/reads to do before doing turnaround to read/write. Counted in 1kb transactions (2kb in large burst mode). MUST be multiple of NumBanks",
      Width => "16",
      Position => "66:51", # Excel Formula: =calc_position(F96,E97)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d256",
    },
    IdlesBtwnBanks1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "IdlesBtwnBanks[n]",
      RegMem => "RegField",
      Description => "Number of IDLE cycles to insert between groups of 4 ACTIVATE commands. ",
      Width => "4",
      Position => "70:67", # Excel Formula: =calc_position(F97,E98)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
  },
  TrafficGenTransStatus0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
    Name => "TrafficGenTransStatus[2]",
    RegMem => "Reg",
    Address => "114", # Excel Formula: =calc_reg_address(C91,A91,G91)
    Description => "Transaction status for HBM Traffic Generator",
    Width => "128", # Excel Formula: =calc_reg_width(E100:E103,F103)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    WritesSent0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "WritesSent[n]",
      RegMem => "RegField",
      Description => "Number of writes sent since last run_test. Counted in units of 512b",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F99,E100,TRUE)
      Type => "Counter",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    ReadsReceived0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "ReadsReceived[n]",
      RegMem => "RegField",
      Description => "Number of reads received since last run_test. Counted in units of 512b",
      Width => "32",
      Position => "63:32", # Excel Formula: =calc_position(F100,E101)
      Type => "Counter",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    NumCoreClockCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "NumCoreClockCycles[n]",
      RegMem => "RegField",
      Description => "Number of core_clk cycles since last run_test",
      Width => "32",
      Position => "95:64", # Excel Formula: =calc_position(F101,E102)
      Type => "Counter",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    NumDfiClockCycles0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "NumDfiClockCycles[n]",
      RegMem => "RegField",
      Description => "Number of dfi_clk cycles since last run_test, as reflected by almost_full in MMU. Used for debug of dfi_clk freq",
      Width => "32",
      Position => "127:96", # Excel Formula: =calc_position(F102,E103)
      Type => "Counter",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  TrafficGenTransStatus1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
    Name => "TrafficGenTransStatus[2]",
    RegMem => "Reg",
    Address => "115",
    Description => "Transaction status for HBM Traffic Generator",
    Width => "128", # Excel Formula: =calc_reg_width(E100:E103,F103)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    WritesSent1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "WritesSent[n]",
      RegMem => "RegField",
      Description => "Number of writes sent since last run_test. Counted in units of 512b",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F99,E100,TRUE)
      Type => "Counter",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    ReadsReceived1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "ReadsReceived[n]",
      RegMem => "RegField",
      Description => "Number of reads received since last run_test. Counted in units of 512b",
      Width => "32",
      Position => "63:32", # Excel Formula: =calc_position(F100,E101)
      Type => "Counter",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    NumCoreClockCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "NumCoreClockCycles[n]",
      RegMem => "RegField",
      Description => "Number of core_clk cycles since last run_test",
      Width => "32",
      Position => "95:64", # Excel Formula: =calc_position(F101,E102)
      Type => "Counter",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    NumDfiClockCycles1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "NumDfiClockCycles[n]",
      RegMem => "RegField",
      Description => "Number of dfi_clk cycles since last run_test, as reflected by almost_full in MMU. Used for debug of dfi_clk freq",
      Width => "32",
      Position => "127:96", # Excel Formula: =calc_position(F102,E103)
      Type => "Counter",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  TrafficGenAddrCtrl => { #Structure Type: Reg;
    Name => "TrafficGenAddrCtrl",
    RegMem => "Reg",
    Address => "116", # Excel Formula: =calc_reg_address(C99,A99,G99)
    Description => "Address control for HBM Traffic Generator",
    Width => "107", # Excel Formula: =calc_reg_width(E105:E110,F110)
    Type => "Config",
    NumBanks => { #Structure Type: RegField;
      Name => "NumBanks",
      RegMem => "RegField",
      Description => "Number of banks to use. Must be large enough to satisfy tRC to get full bandwidth. Max of 16. Must be even number",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F104,E105,TRUE)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d16",
    },
    BankSequence => { #Structure Type: RegField;
      Name => "BankSequence",
      RegMem => "RegField",
      Description => "Programmed bank sequence. bits 3:0 are first bank, etc
Successive banks must be in different bank groups to reach full performance",
      Width => "64",
      Position => "68:5", # Excel Formula: =calc_position(F105,E106)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
    RowChangeMode => { #Structure Type: RegField;
      Name => "RowChangeMode",
      RegMem => "RegField",
      Description => "0 : Change row/col addr every transaction
1 : Change row/col addr after loop through all banks (memory walk)",
      Width => "1",
      Position => "69", # Excel Formula: =calc_position(F106,E107)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
    RowColStart => { #Structure Type: RegField;
      Name => "RowColStart",
      RegMem => "RegField",
      Description => "Start value for row,col vector 
17:4 : start for row value
3:0 start for col value",
      Width => "18",
      Position => "87:70", # Excel Formula: =calc_position(F107,E108)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
    RowColJump => { #Structure Type: RegField;
      Name => "RowColJump",
      RegMem => "RegField",
      Description => "Amount to jump between 2 row_col vector values. When using large_burst_mode, must be set to even number.",
      Width => "18",
      Position => "105:88", # Excel Formula: =calc_position(F108,E109)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d2",
    },
    RowColIncrement => { #Structure Type: RegField;
      Name => "RowColIncrement",
      RegMem => "RegField",
      Description => "0 : Decrement row_col values each transaction
1 : Increment row_col values each transaction",
      Width => "1",
      Position => "106", # Excel Formula: =calc_position(F109,E110)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d1",
    },
  },
  TrafficGenDataCtrl => { #Structure Type: Reg;
    Name => "TrafficGenDataCtrl",
    RegMem => "Reg",
    Address => "117", # Excel Formula: =calc_reg_address(C104,A104,G104)
    Description => "Data control for HBM Traffic Generator",
    Width => "226", # Excel Formula: =calc_reg_width(E112:E118,F118)
    Type => "Config",
    DataSource => { #Structure Type: RegField;
      Name => "DataSource",
      RegMem => "RegField",
      Description => "0 : Take data from data_reg
1 : Generate data from PRBS31
2 : Use Moving 0 pattern
3 : Use Moving 1 pattern",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F111,E112,TRUE)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d0",
    },
    DataPrbsSeed => { #Structure Type: RegField;
      Name => "DataPrbsSeed",
      RegMem => "RegField",
      Description => "Initial seed for PRBS31",
      Width => "32",
      Position => "33:2", # Excel Formula: =calc_position(F112,E113)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "d1",
    },
    DataReg0 => { #Structure Type: RegField;
      Name => "DataReg0",
      RegMem => "RegField",
      Description => "Register0 to use for data generation. The sequence is determined by data_reg_seq register",
      Width => "32",
      Position => "65:34", # Excel Formula: =calc_position(F113,E114)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "h00000000",
    },
    DataReg1 => { #Structure Type: RegField;
      Name => "DataReg1",
      RegMem => "RegField",
      Description => "Register1 to use for data generation. The sequence is determined by data_reg_seq register",
      Width => "32",
      Position => "97:66", # Excel Formula: =calc_position(F114,E115)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "h0f0f0f0f",
    },
    DataReg2 => { #Structure Type: RegField;
      Name => "DataReg2",
      RegMem => "RegField",
      Description => "Register2 to use for data generation. The sequence is determined by data_reg_seq register",
      Width => "32",
      Position => "129:98", # Excel Formula: =calc_position(F115,E116)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "hffffffff",
    },
    DataReg3 => { #Structure Type: RegField;
      Name => "DataReg3",
      RegMem => "RegField",
      Description => "Register3 to use for data generation. The sequence is determined by data_reg_seq register",
      Width => "32",
      Position => "161:130", # Excel Formula: =calc_position(F116,E117)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "hf0f0f0f0",
    },
    DataRegSeq => { #Structure Type: RegField;
      Name => "DataRegSeq",
      RegMem => "RegField",
      Description => "Sequence in which to send data_reg on data bus. Bits [1:0] are first data, bits [3:2] are 2nd data, etc. Default is to cycle through all 4 registers",
      Width => "64",
      Position => "225:162", # Excel Formula: =calc_position(F117,E118)
      Type => "Config",
      UsedBy => "trfgen",
      DefaultValue => "he4e4e4e4e4e4e4e4",
    },
  },
  TrafficGenErrorCntr0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 20;
    Name => "TrafficGenErrorCntr[2]",
    RegMem => "Reg",
    Address => "118", # Excel Formula: =calc_reg_address(C111,A111,G111)
    Description => "Error status for HBM Traffic Generator",
    Width => "40", # Excel Formula: =calc_reg_width(E120:E122,F122)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    DataCompareErrorCntrPc00 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "DataCompareErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Data compare error counter. Counts error for every 256b",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F119,E120,TRUE)
      Type => "Status",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DataCompareErrorCntrPc10 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "DataCompareErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Data compare error counter. Counts error for every 256b",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F120,E121)
      Type => "Status",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    BankOrderErrorCntr0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "BankOrderErrorCntr[n]",
      RegMem => "RegField",
      Description => "NOT FUNCTIONAL",
      Width => "8",
      Position => "39:32", # Excel Formula: =calc_position(F121,E122)
      Type => "Status",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  TrafficGenErrorCntr1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 20;
    Name => "TrafficGenErrorCntr[2]",
    RegMem => "Reg",
    Address => "119",
    Description => "Error status for HBM Traffic Generator",
    Width => "40", # Excel Formula: =calc_reg_width(E120:E122,F122)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    DataCompareErrorCntrPc01 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "DataCompareErrorCntrPc0[n]",
      RegMem => "RegField",
      Description => "Data compare error counter. Counts error for every 256b",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F119,E120,TRUE)
      Type => "Status",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    DataCompareErrorCntrPc11 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "DataCompareErrorCntrPc1[n]",
      RegMem => "RegField",
      Description => "Data compare error counter. Counts error for every 256b",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F120,E121)
      Type => "Status",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    BankOrderErrorCntr1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "BankOrderErrorCntr[n]",
      RegMem => "RegField",
      Description => "NOT FUNCTIONAL",
      Width => "8",
      Position => "39:32", # Excel Formula: =calc_position(F121,E122)
      Type => "Status",
      UsedBy => "trfgen",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmReadErrorCounters0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 21;
    Name => "HbmReadErrorCounters[2]",
    RegMem => "Reg",
    Address => "11A", # Excel Formula: =calc_reg_address(C119,A119,G119)
    Description => "Counters for types of errors seen by read monitor",
    Width => "8", # Excel Formula: =calc_reg_width(E124:E125,F125)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    UnexpectedReadCounter0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "UnexpectedReadCounter[n]",
      RegMem => "RegField",
      Description => "Counter of times that got read data when not expecting it",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F123,E124,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    MissedReadCounter0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "MissedReadCounter[n]",
      RegMem => "RegField",
      Description => "Counter of times that did not get read data from HBM when expecting it",
      Width => "4",
      Position => "7:4", # Excel Formula: =calc_position(F124,E125)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmReadErrorCounters1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 21;
    Name => "HbmReadErrorCounters[2]",
    RegMem => "Reg",
    Address => "11B",
    Description => "Counters for types of errors seen by read monitor",
    Width => "8", # Excel Formula: =calc_reg_width(E124:E125,F125)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    UnexpectedReadCounter1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "UnexpectedReadCounter[n]",
      RegMem => "RegField",
      Description => "Counter of times that got read data when not expecting it",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F123,E124,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    MissedReadCounter1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "MissedReadCounter[n]",
      RegMem => "RegField",
      Description => "Counter of times that did not get read data from HBM when expecting it",
      Width => "4",
      Position => "7:4", # Excel Formula: =calc_position(F124,E125)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  debug_data_bus_register => { #Structure Type: Reg;
    Name => "debug_data_bus_register",
    RegMem => "Reg",
    Address => "11C", # Excel Formula: =calc_reg_address(C123,A123,G123)
    Description => "debug_data_bus_register",
    Width => "16", # Excel Formula: =calc_reg_width(E127:E127,F127)
    Type => "ReadOnly",
    debug_data_bus => { #Structure Type: RegField;
      Name => "debug_data_bus",
      RegMem => "RegField",
      Description => "debug_data_bus of internal signals",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F126,E127,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  debug_data_select_register => { #Structure Type: Reg;
    Name => "debug_data_select_register",
    RegMem => "Reg",
    Address => "11D", # Excel Formula: =calc_reg_address(C126,A126,G126)
    Description => "debug_data_select_register",
    Width => "8", # Excel Formula: =calc_reg_width(E129:E129,F129)
    Type => "Config",
    debug_data_select => { #Structure Type: RegField;
      Name => "debug_data_select",
      RegMem => "RegField",
      Description => "debug_data_select for internal signals",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F128,E129,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
  },
  hbm_wr_channel_data_fifo_first_beat0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 36;
    Name => "hbm_wr_channel_data_fifo_first_beat[2]",
    RegMem => "Mem",
    Address => "100000",
    Description => "HBM Write Channel Data FIFO",
    Width => "561", # Excel Formula: =calc_mem_width(E131:E131,M130,F131,128)
    Type => "Dynamic",
    UsedBy => "hbm_wr_channel",
    MemEntries => "256", # Excel Formula: =calc_field_width_define("HBM_WR_CHANNEL_DATA_FIFO_DEPTH")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "520",
    hbm_wr_channel_data_fifo_first_beat0Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 36;
      Name => "hbm_wr_channel_data_fifo_first_beat[n]Data",
      RegMem => "MemField",
      Width => "520",
      Position => "519:0", # Excel Formula: =calc_position(F130,E131,TRUE)
    },
  },
  hbm_wr_channel_data_fifo_first_beat1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 36;
    Name => "hbm_wr_channel_data_fifo_first_beat[2]",
    RegMem => "Mem",
    Address => "200000",
    Description => "HBM Write Channel Data FIFO",
    Width => "561", # Excel Formula: =calc_mem_width(E131:E131,M130,F131,128)
    Type => "Dynamic",
    UsedBy => "hbm_wr_channel",
    MemEntries => "256", # Excel Formula: =calc_field_width_define("HBM_WR_CHANNEL_DATA_FIFO_DEPTH")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "520",
    hbm_wr_channel_data_fifo_first_beat1Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 36;
      Name => "hbm_wr_channel_data_fifo_first_beat[n]Data",
      RegMem => "MemField",
      Width => "520",
      Position => "519:0", # Excel Formula: =calc_position(F130,E131,TRUE)
    },
  },
  hbm_wr_channel_data_fifo_second_beat0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 37;
    Name => "hbm_wr_channel_data_fifo_second_beat[2]",
    RegMem => "Mem",
    Address => "300000", # Excel Formula: =calc_mem_address(C130,A130,G132,L132)
    Description => "HBM Write Channel Data FIFO",
    Width => "561", # Excel Formula: =calc_mem_width(E133:E133,M132,F133,128)
    Type => "Dynamic",
    UsedBy => "hbm_wr_channel",
    MemEntries => "256", # Excel Formula: =calc_field_width_define("HBM_WR_CHANNEL_DATA_FIFO_DEPTH")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "520",
    hbm_wr_channel_data_fifo_second_beat0Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 37;
      Name => "hbm_wr_channel_data_fifo_second_beat[n]Data",
      RegMem => "MemField",
      Width => "520",
      Position => "519:0", # Excel Formula: =calc_position(F132,E133,TRUE)
    },
  },
  hbm_wr_channel_data_fifo_second_beat1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 37;
    Name => "hbm_wr_channel_data_fifo_second_beat[2]",
    RegMem => "Mem",
    Address => "400000",
    Description => "HBM Write Channel Data FIFO",
    Width => "561", # Excel Formula: =calc_mem_width(E133:E133,M132,F133,128)
    Type => "Dynamic",
    UsedBy => "hbm_wr_channel",
    MemEntries => "256", # Excel Formula: =calc_field_width_define("HBM_WR_CHANNEL_DATA_FIFO_DEPTH")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "520",
    hbm_wr_channel_data_fifo_second_beat1Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 37;
      Name => "hbm_wr_channel_data_fifo_second_beat[n]Data",
      RegMem => "MemField",
      Width => "520",
      Position => "519:0", # Excel Formula: =calc_position(F132,E133,TRUE)
    },
  },
  hbm_wr_channel_cmd_fifo0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
    Name => "hbm_wr_channel_cmd_fifo[2]",
    RegMem => "Mem",
    Address => "500000", # Excel Formula: =calc_mem_address(C132,A132,G134,L134)
    Description => "HBM Write Channel Command FIFO ",
    Width => "42", # Excel Formula: =calc_mem_width(E135:E135,M134,F135,-1)
    Type => "Dynamic",
    UsedBy => "hbm_wr_channel",
    MemEntries => "192", # Excel Formula: =calc_field_width_define("HBM_WR_CHANNEL_CMD_FIFO_DEPTH")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "35",
    hbm_wr_channel_cmd_fifo0Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "hbm_wr_channel_cmd_fifo[n]Data",
      RegMem => "MemField",
      Width => "35", # Excel Formula: =calc_field_width_define("HBM_WR_CHANNEL_CMD_FIFO_WIDTH")
      Position => "34:0", # Excel Formula: =calc_position(F134,E135,TRUE)
    },
  },
  hbm_wr_channel_cmd_fifo1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
    Name => "hbm_wr_channel_cmd_fifo[2]",
    RegMem => "Mem",
    Address => "600000",
    Description => "HBM Write Channel Command FIFO ",
    Width => "42", # Excel Formula: =calc_mem_width(E135:E135,M134,F135,-1)
    Type => "Dynamic",
    UsedBy => "hbm_wr_channel",
    MemEntries => "192", # Excel Formula: =calc_field_width_define("HBM_WR_CHANNEL_CMD_FIFO_DEPTH")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "35",
    hbm_wr_channel_cmd_fifo1Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "hbm_wr_channel_cmd_fifo[n]Data",
      RegMem => "MemField",
      Width => "35", # Excel Formula: =calc_field_width_define("HBM_WR_CHANNEL_CMD_FIFO_WIDTH")
      Position => "34:0", # Excel Formula: =calc_position(F134,E135,TRUE)
    },
  },
  hbm_rd_channel_data_mem_first_beat0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 35;
    Name => "hbm_rd_channel_data_mem_first_beat[2]",
    RegMem => "Mem",
    Address => "700000", # Excel Formula: =calc_mem_address(C134,A134,G136,L136)
    Description => "HBM Read Channel Data Mem",
    Width => "548", # Excel Formula: =calc_mem_width(E137:E137,M136,F137,128)
    Type => "Dynamic",
    UsedBy => "hbm_rd_reorder",
    MemEntries => "512",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "512",
    hbm_rd_channel_data_mem_first_beat0Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 35;
      Name => "hbm_rd_channel_data_mem_first_beat[n]Data",
      RegMem => "MemField",
      Width => "512",
      Position => "511:0", # Excel Formula: =calc_position(F136,E137,TRUE)
    },
  },
  hbm_rd_channel_data_mem_first_beat1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 35;
    Name => "hbm_rd_channel_data_mem_first_beat[2]",
    RegMem => "Mem",
    Address => "800000",
    Description => "HBM Read Channel Data Mem",
    Width => "548", # Excel Formula: =calc_mem_width(E137:E137,M136,F137,128)
    Type => "Dynamic",
    UsedBy => "hbm_rd_reorder",
    MemEntries => "512",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "512",
    hbm_rd_channel_data_mem_first_beat1Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 35;
      Name => "hbm_rd_channel_data_mem_first_beat[n]Data",
      RegMem => "MemField",
      Width => "512",
      Position => "511:0", # Excel Formula: =calc_position(F136,E137,TRUE)
    },
  },
  hbm_rd_channel_data_mem_second_beat0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 36;
    Name => "hbm_rd_channel_data_mem_second_beat[2]",
    RegMem => "Mem",
    Address => "900000", # Excel Formula: =calc_mem_address(C136,A136,G138,L138)
    Description => "HBM Read Channel Data Mem",
    Width => "548", # Excel Formula: =calc_mem_width(E139:E139,M138,F139,128)
    Type => "Dynamic",
    UsedBy => "hbm_rd_reorder",
    MemEntries => "512", # Excel Formula: =calc_field_width_define("HBM_RD_REORDER_DATA_MEM_DEPTH")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "512",
    hbm_rd_channel_data_mem_second_beat0Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 36;
      Name => "hbm_rd_channel_data_mem_second_beat[n]Data",
      RegMem => "MemField",
      Width => "512",
      Position => "511:0", # Excel Formula: =calc_position(F138,E139,TRUE)
    },
  },
  hbm_rd_channel_data_mem_second_beat1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 36;
    Name => "hbm_rd_channel_data_mem_second_beat[2]",
    RegMem => "Mem",
    Address => "A00000",
    Description => "HBM Read Channel Data Mem",
    Width => "548", # Excel Formula: =calc_mem_width(E139:E139,M138,F139,128)
    Type => "Dynamic",
    UsedBy => "hbm_rd_reorder",
    MemEntries => "512", # Excel Formula: =calc_field_width_define("HBM_RD_REORDER_DATA_MEM_DEPTH")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "512",
    hbm_rd_channel_data_mem_second_beat1Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 36;
      Name => "hbm_rd_channel_data_mem_second_beat[n]Data",
      RegMem => "MemField",
      Width => "512",
      Position => "511:0", # Excel Formula: =calc_position(F138,E139,TRUE)
    },
  },
  hbm_rd_channel_cmd_fifo0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
    Name => "hbm_rd_channel_cmd_fifo[2]",
    RegMem => "Mem",
    Address => "B00000", # Excel Formula: =calc_mem_address(C138,A138,G140,L140)
    Description => "HBM Read Channel Command FIFO  ",
    Width => "49", # Excel Formula: =calc_mem_width(E141:E141,M140,F141,-1)
    Type => "Dynamic",
    UsedBy => "hbm_rd_channel",
    MemEntries => "448", # Excel Formula: =calc_field_width_define("HBM_RD_CHANNEL_CMD_FIFO_DEPTH")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteBeforeProt=1,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "42",
    hbm_rd_channel_cmd_fifo0Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "hbm_rd_channel_cmd_fifo[n]Data",
      RegMem => "MemField",
      Width => "42",
      Position => "41:0", # Excel Formula: =calc_position(F140,E141,TRUE)
    },
  },
  hbm_rd_channel_cmd_fifo1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
    Name => "hbm_rd_channel_cmd_fifo[2]",
    RegMem => "Mem",
    Address => "C00000",
    Description => "HBM Read Channel Command FIFO  ",
    Width => "49", # Excel Formula: =calc_mem_width(E141:E141,M140,F141,-1)
    Type => "Dynamic",
    UsedBy => "hbm_rd_channel",
    MemEntries => "448", # Excel Formula: =calc_field_width_define("HBM_RD_CHANNEL_CMD_FIFO_DEPTH")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteBeforeProt=1,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "42",
    hbm_rd_channel_cmd_fifo1Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "hbm_rd_channel_cmd_fifo[n]Data",
      RegMem => "MemField",
      Width => "42",
      Position => "41:0", # Excel Formula: =calc_position(F140,E141,TRUE)
    },
  },
  hbm_rd_reorder_bank_fifo0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 25;
    Name => "hbm_rd_reorder_bank_fifo[2]",
    RegMem => "Mem",
    Address => "D00000", # Excel Formula: =calc_mem_address(C140,A140,G142,L142)
    Description => "HBM Read Reorder Bank FIFO",
    Width => "22", # Excel Formula: =calc_mem_width(E143:E143,M142,F143,-1)
    Type => "Dynamic",
    UsedBy => "hbm_rd_reorder",
    MemEntries => "284", # Excel Formula: =calc_field_width_define("HBM_RD_REORDER_BANK_FIFO_MEM_DEPTH")
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "16",
    hbm_rd_reorder_bank_fifo0Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 25;
      Name => "hbm_rd_reorder_bank_fifo[n]Data",
      RegMem => "MemField",
      Width => "16", # Excel Formula: =calc_field_width_define("HBM_RD_REORDER_BANK_FIFO_MEM_WIDTH")
      Position => "15:0", # Excel Formula: =calc_position(F142,E143,TRUE)
    },
  },
  hbm_rd_reorder_bank_fifo1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 25;
    Name => "hbm_rd_reorder_bank_fifo[2]",
    RegMem => "Mem",
    Address => "E00000",
    Description => "HBM Read Reorder Bank FIFO",
    Width => "22", # Excel Formula: =calc_mem_width(E143:E143,M142,F143,-1)
    Type => "Dynamic",
    UsedBy => "hbm_rd_reorder",
    MemEntries => "284", # Excel Formula: =calc_field_width_define("HBM_RD_REORDER_BANK_FIFO_MEM_DEPTH")
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,PortErrPropagate=Enabled,WriteActivityFactor=13,ReadActivityFactor=13,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "16",
    hbm_rd_reorder_bank_fifo1Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 25;
      Name => "hbm_rd_reorder_bank_fifo[n]Data",
      RegMem => "MemField",
      Width => "16", # Excel Formula: =calc_field_width_define("HBM_RD_REORDER_BANK_FIFO_MEM_WIDTH")
      Position => "15:0", # Excel Formula: =calc_position(F142,E143,TRUE)
    },
  },
  hbm_lpm_channel_mem0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 20;
    Name => "hbm_lpm_channel_mem[2]",
    RegMem => "Mem",
    Address => "F00000", # Excel Formula: =calc_mem_address(C142,A142,G144,L144)
    Description => "HBM LPM Channel memory",
    Width => "81", # Excel Formula: =calc_mem_width(E145:E145,M144,F145,-1)
    Type => "Dynamic",
    UsedBy => "hbm_lpm_channel",
    MemEntries => "64", # Excel Formula: =calc_field_width_define("HBM_LPM_MEM_DEPTH")
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,PortErrPropagate=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "73",
    hbm_lpm_channel_mem0Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "hbm_lpm_channel_mem[n]Data",
      RegMem => "MemField",
      Width => "73", # Excel Formula: =calc_field_width_define("HBM_LPM_MEM_WIDTH")
      Position => "72:0", # Excel Formula: =calc_position(F144,E145,TRUE)
    },
  },
  hbm_lpm_channel_mem1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 20;
    Name => "hbm_lpm_channel_mem[2]",
    RegMem => "Mem",
    Address => "1000000",
    Description => "HBM LPM Channel memory",
    Width => "81", # Excel Formula: =calc_mem_width(E145:E145,M144,F145,-1)
    Type => "Dynamic",
    UsedBy => "hbm_lpm_channel",
    MemEntries => "64", # Excel Formula: =calc_field_width_define("HBM_LPM_MEM_DEPTH")
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,PortErrPropagate=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "73",
    hbm_lpm_channel_mem1Data => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "hbm_lpm_channel_mem[n]Data",
      RegMem => "MemField",
      Width => "73", # Excel Formula: =calc_field_width_define("HBM_LPM_MEM_WIDTH")
      Position => "72:0", # Excel Formula: =calc_position(F144,E145,TRUE)
    },
  },
  hbmCpuMemAccessCh00 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1100000", # Excel Formula: =calc_mem_address(C144,A144,G146,L146)
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "0",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess0Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess0ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess0EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh01 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1200000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "1",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess1Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess1ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess1EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh02 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1300000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "2",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess2Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess2ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess2EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh03 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1400000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "3",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess3Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess3ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess3EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh04 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1500000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "4",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess4Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess4ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess4EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh05 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1600000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "5",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess5Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess5ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess5EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh06 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1700000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "6",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess6Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess6ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess6EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh07 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1800000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "7",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess7Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess7ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess7EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh08 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1900000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "8",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess8Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess8ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess8EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh09 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1A00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "9",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess9Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess9ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess9EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh010 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1B00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "10",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess10Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess10ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess10EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh011 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1C00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "11",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess11Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess11ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess11EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh012 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1D00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "12",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess12Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess12ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess12EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh013 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1E00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "13",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess13Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess13ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess13EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh014 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "1F00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "14",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess14Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess14ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess14EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh015 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh0[16]",
    RegMem => "Mem",
    Address => "2000000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E147:E149,M146,F149,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "15",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess15Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
    hbmCpuMemAccess15ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F147,E148)
    },
    hbmCpuMemAccess15EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F148,E149)
    },
  },
  hbmCpuMemAccessCh10 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2100000", # Excel Formula: =calc_mem_address(C146,A146,G150,L150)
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "0",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess0Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess0ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess0EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh11 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2200000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "1",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess1Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess1ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess1EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh12 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2300000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "2",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess2Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess2ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess2EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh13 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2400000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "3",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess3Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess3ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess3EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh14 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2500000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "4",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess4Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess4ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess4EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh15 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2600000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "5",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess5Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess5ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess5EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh16 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2700000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "6",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess6Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess6ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess6EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh17 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2800000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "7",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess7Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess7ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess7EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh18 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2900000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "8",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess8Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess8ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess8EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh19 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2A00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "9",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess9Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess9ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess9EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh110 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2B00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "10",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess10Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess10ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess10EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh111 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2C00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "11",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess11Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess11ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess11EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh112 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2D00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "12",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess12Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess12ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess12EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh113 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2E00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "13",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess13Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess13ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess13EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh114 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "2F00000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "14",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess14Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess14ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess14EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
  hbmCpuMemAccessCh115 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 19;
    Name => "hbmCpuMemAccessCh1[16]",
    RegMem => "Mem",
    Address => "3000000",
    Description => "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as
3:0 : col
17:4 : row",
    Width => "1026", # Excel Formula: =calc_mem_width(E151:E153,M150,F153,-1)
    Type => "Dynamic",
    UsedBy => "hbm_cpu_if",
    MemEntries => "262144", # Excel Formula: =4194304/16
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,IgnoreInstance=Enabled,WriteActivityFactor=1,ReadActivityFactor=1,PortErrPropagate=Disabled",
    ArrayLength => "16",
    ArrayIndex => "15",
    MemLogicalWidth => "1026",
    hbmCpuMemAccess15Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]Data",
      RegMem => "MemField",
      Description => "Write or read data",
      Width => "1024",
      Position => "1023:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
    hbmCpuMemAccess15ParityError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]ParityError",
      RegMem => "MemField",
      Description => "Read only. Was parity error in accessed location",
      Width => "1",
      Position => "1024", # Excel Formula: =calc_position(F151,E152)
    },
    hbmCpuMemAccess15EccError => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 16;
      Name => "hbmCpuMemAccess[n]EccError",
      RegMem => "MemField",
      Description => "Read only. Was ECC error in accessed location",
      Width => "1",
      Position => "1025", # Excel Formula: =calc_position(F152,E153)
    },
  },
};
