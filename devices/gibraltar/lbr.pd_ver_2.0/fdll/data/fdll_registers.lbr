$block{fdll} = {
  Defines_db => "..\\verilog\\fdll_defines.v",
  ProjectName => "Gibraltar",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "2",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    GeneralInterruptSummary => { #Structure Type: RegField;
      Name => "GeneralInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, GeneralInterrupt has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt test register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "Setting this filed to 1 triggers an assertion of the interrupt that is associated with this test field",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "10",
    Type => "Config",
    FdllFbmEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FdllFbmEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SmsBufferPtrEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "SmsBufferPtrEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    UserCountEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "UserCountEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "10",
    Type => "Config",
    FdllFbmEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FdllFbmEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    SmsBufferPtrEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "SmsBufferPtrEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    UserCountEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "UserCountEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "10",
    Type => "Config",
    FdllFbmEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FdllFbmEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SmsBufferPtrEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "SmsBufferPtrEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    UserCountEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "UserCountEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "10",
    Type => "Config",
    FdllFbmEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FdllFbmEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SmsBufferPtrEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "SmsBufferPtrEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    UserCountEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "UserCountEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "10",
    Type => "ReadOnly",
    FdllFbmErrInt => { #Structure Type: RegField;
      Name => "FdllFbmErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    SmsBufferPtrErrInt => { #Structure Type: RegField;
      Name => "SmsBufferPtrErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    UserCountErrInt => { #Structure Type: RegField;
      Name => "UserCountErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier0ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier1ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier2ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier3ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier4ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier5ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier6ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "9",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "18",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "16",
      Position => "15:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "17:16",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "5",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "4",
      Position => "3:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  TcamScanPeriodCfg => { #Structure Type: Reg; Skip Register;
    Name => "TcamScanPeriodCfg",
    RegMem => "Reg",
    Address => "3B",
    Description => "Configures period of TCAM scan for SER, set 0 to disable",
    Width => "32",
    Type => "Config",
    TcamScanPeriod => { #Structure Type: RegField;
      Name => "TcamScanPeriod",
      RegMem => "RegField",
      Description => "Configures period of TCAM scan for SER, set 0 to disable",
      Width => "32",
      Position => "31:0",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d120000000",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "73", # Excel Formula: =calc_reg_width(E25:E53,F53)
    Type => "Config",
    SACR1P_RME => { #Structure Type: RegField;
      Name => "SACR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACR1P_RM => { #Structure Type: RegField;
      Name => "SACR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "4:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RME => { #Structure Type: RegField;
      Name => "SACU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SACU2P_RM => { #Structure Type: RegField;
      Name => "SACU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "9:6", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RME => { #Structure Type: RegField;
      Name => "SADC1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADC1P_RM => { #Structure Type: RegField;
      Name => "SADC1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "14:11", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEA => { #Structure Type: RegField;
      Name => "SADR2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "15", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMA => { #Structure Type: RegField;
      Name => "SADR2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "19:16", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMEB => { #Structure Type: RegField;
      Name => "SADR2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F32,E33)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADR2P_RMB => { #Structure Type: RegField;
      Name => "SADR2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "24:21", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEA => { #Structure Type: RegField;
      Name => "SADS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "25", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMA => { #Structure Type: RegField;
      Name => "SADS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "29:26", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMEB => { #Structure Type: RegField;
      Name => "SADS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RMB => { #Structure Type: RegField;
      Name => "SADS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "34:31", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RME => { #Structure Type: RegField;
      Name => "SASR1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "35", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASR1P_RM => { #Structure Type: RegField;
      Name => "SASR1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "39:36", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RME => { #Structure Type: RegField;
      Name => "SASS1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS1P_RM => { #Structure Type: RegField;
      Name => "SASS1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "44:41", # Excel Formula: =calc_position(F41,E42)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEA => { #Structure Type: RegField;
      Name => "SASS2P_RMEA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port A",
      Width => "1",
      Position => "45", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMA => { #Structure Type: RegField;
      Name => "SASS2P_RMA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port A",
      Width => "4",
      Position => "49:46", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMEB => { #Structure Type: RegField;
      Name => "SASS2P_RMEB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable port B",
      Width => "1",
      Position => "50", # Excel Formula: =calc_position(F44,E45)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASS2P_RMB => { #Structure Type: RegField;
      Name => "SASS2P_RMB",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin port B",
      Width => "4",
      Position => "54:51", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RME => { #Structure Type: RegField;
      Name => "SASU2P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "55", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SASU2P_RM => { #Structure Type: RegField;
      Name => "SASU2P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "59:56", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RME => { #Structure Type: RegField;
      Name => "SADU1P_RME",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin Enable",
      Width => "1",
      Position => "60", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_RM => { #Structure Type: RegField;
      Name => "SADU1P_RM",
      RegMem => "RegField",
      Description => "MBIST logic - Read Margin",
      Width => "4",
      Position => "64:61", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADS2P_RA => { #Structure Type: RegField;
      Name => "SADS2P_RA",
      RegMem => "RegField",
      Description => "MBIST logic - Read Assist for Dual port",
      Width => "2",
      Position => "66:65", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    SADU1P_WA => { #Structure Type: RegField;
      Name => "SADU1P_WA",
      RegMem => "RegField",
      Description => "Write-Assist configuration for the SP SADU compiler",
      Width => "3",
      Position => "69:67", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "d5",
    },
    SADU1P_WPULSE => { #Structure Type: RegField;
      Name => "SADU1P_WPULSE",
      RegMem => "RegField",
      Description => "Write-Assist-Pulse configuration for the SP SADU compiler",
      Width => "3",
      Position => "72:70", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E55:E55,F55)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "Spare register",
    Width => "128", # Excel Formula: =calc_reg_width(E57:E57,F57)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "Spare register ",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C56,A56,G56)
    Description => "PMRO controller configuration",
    Width => "32", # Excel Formula: =calc_reg_width(E59:E63,F63)
    Type => "Config",
    PmroRstn => { #Structure Type: RegField;
      Name => "PmroRstn",
      RegMem => "RegField",
      Description => "PMRO reset, active low",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F58,E59,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroConfigEn => { #Structure Type: RegField;
      Name => "PmroConfigEn",
      RegMem => "RegField",
      Description => "Enable pmro configuration, when equals to 0 configurations are locked",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroStart => { #Structure Type: RegField;
      Name => "PmroStart",
      RegMem => "RegField",
      Description => "Start the pmro operation",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroRingEn => { #Structure Type: RegField;
      Name => "PmroRingEn",
      RegMem => "RegField",
      Description => "Determines which PMRO ring to activate, should be configured as one hot",
      Width => "7",
      Position => "9:3", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroCntPeriod => { #Structure Type: RegField;
      Name => "PmroCntPeriod",
      RegMem => "RegField",
      Description => "Number of core clock cycles on which PMRO is measured",
      Width => "22",
      Position => "31:10", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "h3FFFFF",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C58,A58,G58)
    Description => "PMRO status configuration",
    Width => "23", # Excel Formula: =calc_reg_width(E65:E66,F66)
    Type => "ReadOnly",
    PmroCountOut => { #Structure Type: RegField;
      Name => "PmroCountOut",
      RegMem => "RegField",
      Description => "The ring oscilator counter value.",
      Width => "22",
      Position => "21:0", # Excel Formula: =calc_position(F64,E65,TRUE)
      Type => "Status",
      UsedBy => "pmro",
    },
    PmroDone => { #Structure Type: RegField;
      Name => "PmroDone",
      RegMem => "RegField",
      Description => "Pmro operation done, PmroCountOut is valid.",
      Width => "1",
      Position => "22", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C64,A64,G64)
    Description => "Mirror Bus configurations",
    Width => "11", # Excel Formula: =calc_reg_width(E68:E69,F69)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "Enable Mirror Bus",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F67,E68,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "Mirror Bus selector",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C67,A67,G67)
    Description => "Mirror Bus status result",
    Width => "32", # Excel Formula: =calc_reg_width(E71:E71,F71)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "Mirror Bus status result",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F70,E71,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C70,A70,G70)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E73:E73,F73)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  GeneralInterrupt => { #Structure Type: Reg;
    Name => "GeneralInterrupt",
    RegMem => "Reg",
    Address => "100",
    Description => "Interrupt register for EMPD",
    Width => "2", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Interrupt",
    EmdbDuplicateEntry => { #Structure Type: RegField;
      Name => "EmdbDuplicateEntry",
      RegMem => "RegField",
      Description => "Exact match entry has duplicated data as a result of bug. If set, consult the designer.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Interrupt",
      UsedBy => "EMPD",
    },
    UcdvRollover => { #Structure Type: RegField;
      Name => "UcdvRollover",
      RegMem => "RegField",
      Description => "An SMS buffer user count has wrapped around due to bug or configuration error. If set, consult the designer.",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "Interrupt",
      UsedBy => "shr",
    },
  },
  GeneralInterruptMask => { #Structure Type: Reg; Skip Register;
    Name => "GeneralInterruptMask",
    RegMem => "Reg",
    Address => "101",
    Description => "This register masks GeneralInterrupt interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "InterruptMask",
    EmdbDuplicateEntryMask => { #Structure Type: RegField;
      Name => "EmdbDuplicateEntryMask",
      RegMem => "RegField",
      Description => "This field masks EmdbDuplicateEntry interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    UcdvRolloverMask => { #Structure Type: RegField;
      Name => "UcdvRolloverMask",
      RegMem => "RegField",
      Description => "This field masks UcdvRollover interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  GeneralInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "GeneralInterruptTest",
    RegMem => "Reg",
    Address => "102",
    Description => "This register tests GeneralInterrupt interrupt register",
    Width => "2", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "InterruptTest",
    EmdbDuplicateEntryTest => { #Structure Type: RegField;
      Name => "EmdbDuplicateEntryTest",
      RegMem => "RegField",
      Description => "This field tests EmdbDuplicateEntry interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    UcdvRolloverTest => { #Structure Type: RegField;
      Name => "UcdvRolloverTest",
      RegMem => "RegField",
      Description => "This field tests UcdvRollover interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  InternalFifoAlmFull => { #Structure Type: Reg;
    Name => "InternalFifoAlmFull",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Internal EMPD fifos size settings.
This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    Width => "27", # Excel Formula: =calc_reg_width(E11:E13,F13)
    Type => "Config",
    DelReqFifoAlmFullCfg => { #Structure Type: RegField;
      Name => "DelReqFifoAlmFullCfg",
      RegMem => "RegField",
      Description => "Internal fifo size configuration.",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d4",
    },
    FbmAlmEmptyTh => { #Structure Type: RegField;
      Name => "FbmAlmEmptyTh",
      RegMem => "RegField",
      Description => "Internal fifo size configuration.",
      Width => "16",
      Position => "19:4", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d256",
    },
    CamAlmFullTh => { #Structure Type: RegField;
      Name => "CamAlmFullTh",
      RegMem => "RegField",
      Description => "Internal fifo size configuration.",
      Width => "7",
      Position => "26:20", # Excel Formula: =calc_position(F12,E13)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d127",
    },
  },
  FbmConfigurations => { #Structure Type: Reg;
    Name => "FbmConfigurations",
    RegMem => "Reg",
    Address => "104", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "EMPD free buffer manager debug configurations, allows to work with less buffers for debug scenarios, should not be changed by the user for normal operation",
    Width => "306", # Excel Formula: =calc_reg_width(E15:E18,F18)
    Type => "Config",
    FbmInit => { #Structure Type: RegField;
      Name => "FbmInit",
      RegMem => "RegField",
      Description => "Controls initialization of FBM logic after block is already out of reset
To use - write to the register with this field set to 1 and then write again with value 0
During normal operation this value should be set to 0",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F14,E15,TRUE)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d1",
    },
    FbmWorkingMode => { #Structure Type: RegField;
      Name => "FbmWorkingMode",
      RegMem => "RegField",
      Description => "If set, manual buffers allocation is applied, using configurations FbmTotalBuffers, FbmNotEmptyEntry, and memory FdllFbm
0 - All buffers are used
1 - Only configured buffers are used",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F15,E16)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d0",
    },
    FbmTotalBuffers => { #Structure Type: RegField;
      Name => "FbmTotalBuffers",
      RegMem => "RegField",
      Description => "If FbmWorkingMode is set, this number should be configured to the total number of buffers used",
      Width => "16",
      Position => "17:2", # Excel Formula: =calc_position(F16,E17)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d36864",
    },
    FbmNotEmptyEntry => { #Structure Type: RegField;
      Name => "FbmNotEmptyEntry",
      RegMem => "RegField",
      Description => "If FbmWorkingMode is set, this field should be configured to indicate which entries in the FBM are not empty
This is a bitmap where each bit represents 128 consecutive buffers (one line in FdllFbm memory):
0 - all buffers are inactive
1 - at least one of the buffers is active",
      Width => "288",
      Position => "305:18", # Excel Formula: =calc_position(F17,E18)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "hffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
    },
  },
  EmpdDebug => { #Structure Type: Reg;
    Name => "EmpdDebug",
    RegMem => "Reg",
    Address => "105", # Excel Formula: =calc_reg_address(C14,A14,G14)
    Description => "EMPD debug indications register",
    Width => "34", # Excel Formula: =calc_reg_width(E20:E23,F23)
    Type => "ReadOnly",
    ReadAccessCnt => { #Structure Type: RegField;
      Name => "ReadAccessCnt",
      RegMem => "RegField",
      Description => "Counts number of read accesses to EMPD",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Counter",
      UsedBy => "EMPD",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    WriteAccessCnt => { #Structure Type: RegField;
      Name => "WriteAccessCnt",
      RegMem => "RegField",
      Description => "Counts number of write accesses to EMPD",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F20,E21)
      Type => "Counter",
      UsedBy => "EMPD",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    CamFull => { #Structure Type: RegField;
      Name => "CamFull",
      RegMem => "RegField",
      Description => "Exact match CAM full indication",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F21,E22)
      Type => "Event",
      UsedBy => "EMPD",
    },
    FbmFull => { #Structure Type: RegField;
      Name => "FbmFull",
      RegMem => "RegField",
      Description => "EMPD FBM full indication",
      Width => "1",
      Position => "33", # Excel Formula: =calc_position(F22,E23)
      Type => "Event",
      UsedBy => "EMPD",
    },
  },
  FbmDebug => { #Structure Type: Reg;
    Name => "FbmDebug",
    RegMem => "Reg",
    Address => "106", # Excel Formula: =calc_reg_address(C19,A19,G19)
    Description => "FBM debug indications register",
    Width => "32", # Excel Formula: =calc_reg_width(E25:E26,F26)
    Type => "ReadOnly",
    FbmMinValue => { #Structure Type: RegField;
      Name => "FbmMinValue",
      RegMem => "RegField",
      Description => "Stores minimal number of free buffers",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "MinWmk",
      UsedBy => "EMPD",
    },
    FbmInstValue => { #Structure Type: RegField;
      Name => "FbmInstValue",
      RegMem => "RegField",
      Description => "Reflects instantaneous number of free buffers",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F25,E26)
      Type => "Status",
      UsedBy => "EMPD",
    },
  },
  WriteFailDebug => { #Structure Type: Reg;
    Name => "WriteFailDebug",
    RegMem => "Reg",
    Address => "107", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Exact match write fail debug indications register",
    Width => "44", # Excel Formula: =calc_reg_width(E28:E30,F30)
    Type => "ReadOnly",
    LastWriteFailValid => { #Structure Type: RegField;
      Name => "LastWriteFailValid",
      RegMem => "RegField",
      Description => "If set, exact match write fail occurred",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Event",
      UsedBy => "EMPD",
    },
    LastKey => { #Structure Type: RegField;
      Name => "LastKey",
      RegMem => "RegField",
      Description => "Last Key that suffered write fail",
      Width => "24",
      Position => "24:1", # Excel Formula: =calc_position(F28,E29)
      Type => "Capture",
      UsedBy => "EMPD",
    },
    LastData => { #Structure Type: RegField;
      Name => "LastData",
      RegMem => "RegField",
      Description => "Last Data that suffered write fail",
      Width => "19",
      Position => "43:25", # Excel Formula: =calc_position(F29,E30)
      Type => "Capture",
      UsedBy => "EMPD",
    },
  },
  WriteFailDebugCounter => { #Structure Type: Reg;
    Name => "WriteFailDebugCounter",
    RegMem => "Reg",
    Address => "108", # Excel Formula: =calc_reg_address(C27,A27,G27)
    Description => "Exact match write fail events counter",
    Width => "16", # Excel Formula: =calc_reg_width(E32:E32,F32)
    Type => "ReadOnly",
    WriteFailCnt => { #Structure Type: RegField;
      Name => "WriteFailCnt",
      RegMem => "RegField",
      Description => "Counts number of exact match write fail events",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F31,E32,TRUE)
      Type => "Counter",
      UsedBy => "EMPD",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  FdllFbm => { #Structure Type: Mem;
    Name => "FdllFbm",
    RegMem => "Mem",
    Address => "100000",
    Description => "Free buffer manager. 1 bit per buffer, indicating its availability.",
    Width => "137", # Excel Formula: =calc_mem_width(E34:E34,M33,F34,-1)
    Type => "Dynamic",
    UsedBy => "FBM",
    MemEntries => "288",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteBeforeProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,DisableSameAddressErr=Enabled,WriteActivityFactor=88,ReadActivityFactor=88,PortErrPropagate=Disabled",
    MemLogicalWidth => "128",
    FdllFbmData => { #Structure Type: MemField;
      Name => "FdllFbmData",
      RegMem => "MemField",
      Description => "Each entry represents 128 buffers of the FBM. The memory is initiated to all ones.",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F33,E34,TRUE)
    },
  },
  SmsBufferPtr => { #Structure Type: Mem;
    Name => "SmsBufferPtr",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C33,A33,G35,L35)
    Description => "EMPD payload - SMS buffer pointers. The address is a buffer from the FBM.",
    Width => "25", # Excel Formula: =calc_mem_width(E36:E36,M35,F36,-1)
    Type => "Dynamic",
    UsedBy => "EMPD",
    MemEntries => "36864", # Excel Formula: =(3*96*1024/8)
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=2,SampleReadAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=44,ReadActivityFactor=44,PortErrPropagate=Disabled",
    MemLogicalWidth => "19",
    SmsBufferPtrData => { #Structure Type: MemField;
      Name => "SmsBufferPtrData",
      RegMem => "MemField",
      Description => "Each entry stores SMS buffer pointer written to the database.",
      Width => "19",
      Position => "18:0", # Excel Formula: =calc_position(F35,E36,TRUE)
    },
  },
  UserCount => { #Structure Type: Mem;
    Name => "UserCount",
    RegMem => "Mem",
    Address => "300000", # Excel Formula: =calc_mem_address(C35,A35,G37,L37)
    Description => "User count memory per SMS buffer. Used for FBM buffer release.",
    Width => "20", # Excel Formula: =calc_mem_width(E38:E38,M37,F38,-1)
    Type => "Dynamic",
    UsedBy => "EMPD",
    MemEntries => "36864", # Excel Formula: =(3*96*1024/8)
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteBeforeProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,DisableSameAddressErr=Enabled,WriteActivityFactor=44,ReadActivityFactor=44,PortErrPropagate=Disabled",
    MemLogicalWidth => "14",
    UserCountData => { #Structure Type: MemField;
      Name => "UserCountData",
      RegMem => "MemField",
      Description => "Stores summation of the SMS buffer user count. When got to 0, FBM buffer is released.",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F37,E38,TRUE)
    },
  },
  Emdb => { #Structure Type: Mem;
    Name => "Emdb",
    RegMem => "Mem",
    Address => "300000", # Excel Formula: =calc_mem_address(C37,A37,G39,L39)
    Description => "FDLL Exact Match. Used as FDLL database, accessed by design only.",
    Width => "16", # Excel Formula: =calc_mem_width(E40:E40,M39,F40,-1)
    Type => "DocOnly",
    UsedBy => "EMPD",
    MemEntries => "43008", # Excel Formula: =42*1024
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=24,SourceIdWidth=15,NumberOfBanks=7,NumberOfCamEntries=64,QuickInsert=Enabled,FastDelete=Enabled,BinSize=6,NumberOfParallelBanks=7,VerifierSampleReadBeforeProt=1,VrfWriteActivityFactor=11,VrfReadActivityFactor=88,ValidSampleReadBeforeProt=1,ValidFfBased=Enabled,VldDisableSameAddressErr=Enabled,VldEnableNonCpuRdWrSameAddress=Enabled",
    MemLogicalWidth => "16",
    EmdbData => { #Structure Type: MemField;
      Name => "EmdbData",
      RegMem => "MemField",
      Description => "FDLL Exact Match. Used as FDLL database, accessed by design only.",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F39,E40,TRUE)
    },
  },
  EmdbVerifier0 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 0; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[7]",
    RegMem => "Mem",
    Address => "400000", # Excel Formula: =calc_mem_address(C37,A37,G41,L41)
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "222", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=11,ReadActivityFactor=88,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "0",
    MemLogicalWidth => "222",
    EmdbVerifier0Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "222",
      Position => "221:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  EmdbVerifier1 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 1; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[7]",
    RegMem => "Mem",
    Address => "500000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "222", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=11,ReadActivityFactor=88,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "1",
    MemLogicalWidth => "222",
    EmdbVerifier1Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 1; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "222",
      Position => "221:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  EmdbVerifier2 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 2; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[7]",
    RegMem => "Mem",
    Address => "600000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "222", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=11,ReadActivityFactor=88,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "2",
    MemLogicalWidth => "222",
    EmdbVerifier2Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 2; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "222",
      Position => "221:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  EmdbVerifier3 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 3; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[7]",
    RegMem => "Mem",
    Address => "700000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "222", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=11,ReadActivityFactor=88,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "3",
    MemLogicalWidth => "222",
    EmdbVerifier3Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 3; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "222",
      Position => "221:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  EmdbVerifier4 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 4; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[7]",
    RegMem => "Mem",
    Address => "800000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "222", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=11,ReadActivityFactor=88,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "4",
    MemLogicalWidth => "222",
    EmdbVerifier4Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 4; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "222",
      Position => "221:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  EmdbVerifier5 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 5; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[7]",
    RegMem => "Mem",
    Address => "900000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "222", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=11,ReadActivityFactor=88,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "5",
    MemLogicalWidth => "222",
    EmdbVerifier5Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 5; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "222",
      Position => "221:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  EmdbVerifier6 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 6; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[7]",
    RegMem => "Mem",
    Address => "A00000",
    Description => "Holds the verifier and the payload of the EM entry",
    Width => "222", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=11,ReadActivityFactor=88,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "6",
    MemLogicalWidth => "222",
    EmdbVerifier6Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 6; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Description => "Verifier and payload data",
      Width => "222",
      Position => "221:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  EmdbValid0 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 0; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[7]",
    RegMem => "Mem",
    Address => "B00000", # Excel Formula: =calc_mem_address(C41,A41,G43,L43)
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "6", # Excel Formula: =calc_mem_width(E44:E44,M43,F44,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1R2W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "0",
    MemLogicalWidth => "6",
    EmdbValid0Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F43,E44,TRUE)
    },
  },
  EmdbValid1 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 1; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[7]",
    RegMem => "Mem",
    Address => "C00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "6", # Excel Formula: =calc_mem_width(E44:E44,M43,F44,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1R2W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "1",
    MemLogicalWidth => "6",
    EmdbValid1Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F43,E44,TRUE)
    },
  },
  EmdbValid2 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 2; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[7]",
    RegMem => "Mem",
    Address => "D00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "6", # Excel Formula: =calc_mem_width(E44:E44,M43,F44,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1R2W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "2",
    MemLogicalWidth => "6",
    EmdbValid2Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F43,E44,TRUE)
    },
  },
  EmdbValid3 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 3; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[7]",
    RegMem => "Mem",
    Address => "E00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "6", # Excel Formula: =calc_mem_width(E44:E44,M43,F44,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1R2W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "3",
    MemLogicalWidth => "6",
    EmdbValid3Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F43,E44,TRUE)
    },
  },
  EmdbValid4 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 4; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[7]",
    RegMem => "Mem",
    Address => "F00000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "6", # Excel Formula: =calc_mem_width(E44:E44,M43,F44,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1R2W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "4",
    MemLogicalWidth => "6",
    EmdbValid4Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 4; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F43,E44,TRUE)
    },
  },
  EmdbValid5 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 5; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[7]",
    RegMem => "Mem",
    Address => "1000000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "6", # Excel Formula: =calc_mem_width(E44:E44,M43,F44,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1R2W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "5",
    MemLogicalWidth => "6",
    EmdbValid5Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 5; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F43,E44,TRUE)
    },
  },
  EmdbValid6 => { #Structure Type: Mem; ArrayLength: 7; ArrayIndex: 6; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[7]",
    RegMem => "Mem",
    Address => "1100000",
    Description => "Bitmap of consumed EM entries, bit per entry",
    Width => "6", # Excel Formula: =calc_mem_width(E44:E44,M43,F44,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "1024",
    MemWrapper => "1R2W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,FfBased=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "6",
    MemLogicalWidth => "6",
    EmdbValid6Data => { #Structure Type: MemField; ArrayLength: 7; ArrayIndex: 6; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Description => "0 - entry is free
1 - entry is consumed",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F43,E44,TRUE)
    },
  },
  EmdbPerBankReg0 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 0; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[7]",
    RegMem => "Reg",
    Address => "109", # Excel Formula: =calc_reg_address(C31,A31,G31)
    Description => "EM bank configurations, see fields description",
    Width => "50", # Excel Formula: =calc_reg_width(E46:E48,F48)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "0",
    EmdbActiveBanks0 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey0 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 0; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg1 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 1; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[7]",
    RegMem => "Reg",
    Address => "10A",
    Description => "EM bank configurations, see fields description",
    Width => "50", # Excel Formula: =calc_reg_width(E46:E48,F48)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "1",
    EmdbActiveBanks1 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey1 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 1; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg2 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 2; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[7]",
    RegMem => "Reg",
    Address => "10B",
    Description => "EM bank configurations, see fields description",
    Width => "50", # Excel Formula: =calc_reg_width(E46:E48,F48)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "2",
    EmdbActiveBanks2 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey2 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 2; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg3 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 3; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[7]",
    RegMem => "Reg",
    Address => "10C",
    Description => "EM bank configurations, see fields description",
    Width => "50", # Excel Formula: =calc_reg_width(E46:E48,F48)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "3",
    EmdbActiveBanks3 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey3 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 3; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg4 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 4; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[7]",
    RegMem => "Reg",
    Address => "10D",
    Description => "EM bank configurations, see fields description",
    Width => "50", # Excel Formula: =calc_reg_width(E46:E48,F48)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "4",
    EmdbActiveBanks4 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey4 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 4; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc4 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 4; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg5 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 5; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[7]",
    RegMem => "Reg",
    Address => "10E",
    Description => "EM bank configurations, see fields description",
    Width => "50", # Excel Formula: =calc_reg_width(E46:E48,F48)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "5",
    EmdbActiveBanks5 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey5 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 5; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc5 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 5; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg6 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 6; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[7]",
    RegMem => "Reg",
    Address => "10F",
    Description => "EM bank configurations, see fields description",
    Width => "50", # Excel Formula: =calc_reg_width(E46:E48,F48)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "6",
    EmdbActiveBanks6 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Description => "0 - EM bank is inactive
1 - EM bank is active",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey6 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 6; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Description => "Seed for the EM hash",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F46,E47)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc6 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 6; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Description => "0 - use non primitive polynom for the hash CRC
1 - use primitive polynom for the hash CRC",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerEmReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbPerEmReg[1]",
    RegMem => "Reg",
    Address => "110", # Excel Formula: =calc_reg_address(C45,A45,G45)
    Description => "EM configurations, see fields description",
    Width => "33", # Excel Formula: =calc_reg_width(E50:E52,F52)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    EmdbKeyWidth0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "EmdbKeyWidth[n]",
      RegMem => "RegField",
      Description => "Map the 4 key LSBs to key width",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F49,E50,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "EmdbAutoBubbleReq[n]",
      RegMem => "RegField",
      Description => "Generate bubble request to the pipe automatically",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 23;
      Name => "EmdbBubbleReqThreshold[n]",
      RegMem => "RegField",
      Description => "Number of consecutive pipe lookups before generating CPU bubble request",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 16; Skip Register;
    Name => "EmdbCamWmMaxReg[1]",
    RegMem => "Reg",
    Address => "111", # Excel Formula: =calc_reg_address(C49,A49,G49)
    Description => "EM debug indications, see fields description",
    Width => "8", # Excel Formula: =calc_reg_width(E54:E54,F54)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    EmdbCamWmMax0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "EmdbCamWmMax[n]",
      RegMem => "RegField",
      Description => "CAM max watermark",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F53,E54,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg0 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 0; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[7]",
    RegMem => "Reg",
    Address => "112", # Excel Formula: =calc_reg_address(C53,A53,G53)
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E56:E56,F56)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "0",
    EmdbBankWriteCntr0 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F55,E56,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg1 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 1; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[7]",
    RegMem => "Reg",
    Address => "113",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E56:E56,F56)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "1",
    EmdbBankWriteCntr1 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F55,E56,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg2 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 2; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[7]",
    RegMem => "Reg",
    Address => "114",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E56:E56,F56)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "2",
    EmdbBankWriteCntr2 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F55,E56,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg3 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 3; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[7]",
    RegMem => "Reg",
    Address => "115",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E56:E56,F56)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "3",
    EmdbBankWriteCntr3 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F55,E56,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg4 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 4; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[7]",
    RegMem => "Reg",
    Address => "116",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E56:E56,F56)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "4",
    EmdbBankWriteCntr4 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F55,E56,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg5 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 5; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[7]",
    RegMem => "Reg",
    Address => "117",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E56:E56,F56)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "5",
    EmdbBankWriteCntr5 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F55,E56,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg6 => { #Structure Type: Reg; ArrayLength: 7; ArrayIndex: 6; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[7]",
    RegMem => "Reg",
    Address => "118",
    Description => "EM bank debug indications, see fields description",
    Width => "64", # Excel Formula: =calc_reg_width(E56:E56,F56)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "7",
    ArrayIndex => "6",
    EmdbBankWriteCntr6 => { #Structure Type: RegField; ArrayLength: 7; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Description => "Counts number of insertions to the EM bank",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F55,E56,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbCam => { #Structure Type: Mem; Skip Register;
    Name => "EmdbCam",
    RegMem => "Mem",
    Address => "1200000", # Excel Formula: =calc_mem_address(C43,A43,G57,L57)
    Description => "EM fallback CAM",
    Width => "41", # Excel Formula: =calc_mem_width(E58:E60,"None",F60,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "64",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=16,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,NumCamWriteClients=2,UseSoftReset=Enabled",
    Comments => "EM Skip Reg",
    MemLogicalWidth => "41",
    EmdbCam_key => { #Structure Type: MemField;
      Name => "EmdbCam_key",
      RegMem => "MemField",
      Description => "CAM key",
      Width => "24",
      Position => "23:0", # Excel Formula: =calc_position(F57,E58,TRUE)
    },
    EmdbCam_payload => { #Structure Type: MemField;
      Name => "EmdbCam_payload",
      RegMem => "MemField",
      Description => "CAM payload",
      Width => "16",
      Position => "39:24", # Excel Formula: =calc_position(F58,E59)
    },
    EmdbCam_valid => { #Structure Type: MemField;
      Name => "EmdbCam_valid",
      RegMem => "MemField",
      Description => "CAM entry is valid",
      Width => "1",
      Position => "40", # Excel Formula: =calc_position(F59,E60)
    },
  },
};
