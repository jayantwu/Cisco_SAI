$block{mmu} = {
  Defines_db => "X:\\verilog\\mmu_defines.v",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "2",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    GeneralInterruptRegisterSummary => { #Structure Type: RegField;
      Name => "GeneralInterruptRegisterSummary",
      RegMem => "RegField",
      Description => "When this bit is set, GeneralInterruptRegister has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks Ecc_1bErrInterrupt",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks Ecc_2bErrInterrupt",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks ParityErrInterrupt",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "5",
    Type => "Config",
    sms_data_fifo_mem0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    sms_data_fifo_mem1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    sms_data_fifo_mem2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    sms_data_fifo_mem3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    mmu_dbd_req_fifoEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "mmu_dbd_req_fifoEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "5",
    Type => "Config",
    sms_data_fifo_mem0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    sms_data_fifo_mem1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    sms_data_fifo_mem2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    sms_data_fifo_mem3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    mmu_dbd_req_fifoEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "mmu_dbd_req_fifoEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "5",
    Type => "Config",
    sms_data_fifo_mem0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    sms_data_fifo_mem1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    sms_data_fifo_mem2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    sms_data_fifo_mem3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    mmu_dbd_req_fifoEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "mmu_dbd_req_fifoEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "5",
    Type => "Config",
    sms_data_fifo_mem0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    sms_data_fifo_mem1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    sms_data_fifo_mem2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    sms_data_fifo_mem3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    mmu_dbd_req_fifoEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "mmu_dbd_req_fifoEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "5",
    Type => "ReadOnly",
    sms_data_fifo_mem0ErrInt => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    sms_data_fifo_mem1ErrInt => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    sms_data_fifo_mem2ErrInt => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    sms_data_fifo_mem3ErrInt => { #Structure Type: RegField;
      Name => "sms_data_fifo_mem3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    mmu_dbd_req_fifoErrInt => { #Structure Type: RegField;
      Name => "mmu_dbd_req_fifoErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "10",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "8",
      Position => "7:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "9:8",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "4",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "3",
      Position => "2:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  MbistPassStatus => { #Structure Type: Reg; Skip Register;
    Name => "MbistPassStatus",
    RegMem => "Reg",
    Address => "39",
    Description => "MBIST pass status",
    Width => "10",
    Type => "ReadOnly",
    BistDonePassOut => { #Structure Type: RegField;
      Name => "BistDonePassOut",
      RegMem => "RegField",
      Description => "When this bit is set, MBIST passed",
      Width => "10",
      Position => "9:0",
      Type => "Status",
      UsedBy => "MEM",
    },
  },
  MbistFailStatus => { #Structure Type: Reg; Skip Register;
    Name => "MbistFailStatus",
    RegMem => "Reg",
    Address => "3A",
    Description => "MBIST fail status",
    Width => "10",
    Type => "ReadOnly",
    BistDoneFailOut => { #Structure Type: RegField;
      Name => "BistDoneFailOut",
      RegMem => "RegField",
      Description => "When this bit is set, MBIST failed",
      Width => "10",
      Position => "9:0",
      Type => "Status",
      UsedBy => "MEM",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
      DefaultValue => "b0",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "3", # Excel Formula: =calc_reg_width(E25:E27,F27)
    Type => "Config",
    CoreBistRprMode => { #Structure Type: RegField;
      Name => "CoreBistRprMode",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistRun => { #Structure Type: RegField;
      Name => "CoreBistRun",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistPtrnFill => { #Structure Type: RegField;
      Name => "CoreBistPtrnFill",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E29:E29,F29)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F28,E29,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C28,A28,G28)
    Description => "Power Down Configuration for the block",
    Width => "128", # Excel Formula: =calc_reg_width(E31:E31,F31)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C30,A30,G30)
    Width => "39", # Excel Formula: =calc_reg_width(E33:E37,F37)
    Type => "Config",
    PmroExecute => { #Structure Type: RegField;
      Name => "PmroExecute",
      RegMem => "RegField",
      Description => "0->1: execute pmro command.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroCmd => { #Structure Type: RegField;
      Name => "PmroCmd",
      RegMem => "RegField",
      Description => "Pmro command to execute:
0: reset.
1: write.
2: read.
3: invalid.",
      Width => "2",
      Position => "2:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroSbusReset => { #Structure Type: RegField;
      Name => "PmroSbusReset",
      RegMem => "RegField",
      Description => "Reset pmro sbus chain. Need to set to 0 before starting access to pmro registers.",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroAddr => { #Structure Type: RegField;
      Name => "PmroAddr",
      RegMem => "RegField",
      Description => "PMRO register address:
0 - control register, 8b, def: 0x0.
1 - SVT Configuration Register, 16b, def: 0xFFFF.
2 - LVT Configuration Register, 16b, def: 0xFFFF.
3 - ULVT Configuration Register, 16b, def: 0xFFFF.
4 - Interconnect Configuration Register, 16b, def: 0xFFFF.
5 - Reference Clock Counter Register, 24b, def: 0xFFF000.
6 - Oscillator Counter Register, 24b, def: 0x000000.
7 - SBus ID register, read as 0x0B.
Set to '0' on reset command.",
      Width => "3",
      Position => "6:4", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroData => { #Structure Type: RegField;
      Name => "PmroData",
      RegMem => "RegField",
      Description => "PMRO data, set to 0x0 on reset and read command.",
      Width => "32",
      Position => "38:7", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C32,A32,G32)
    Width => "34", # Excel Formula: =calc_reg_width(E39:E41,F41)
    Type => "ReadOnly",
    PmroRdata => { #Structure Type: RegField;
      Name => "PmroRdata",
      RegMem => "RegField",
      Description => "Read data from pmro. Valid when PmroFinish=1 and PmroFailed=0.",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F38,E39,TRUE)
      Type => "Capture",
      UsedBy => "pmro",
    },
    PmroFailed => { #Structure Type: RegField;
      Name => "PmroFailed",
      RegMem => "RegField",
      Description => "Pmro command failed. Valid only when PmroFinish=1.",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F39,E40)
      Type => "Capture",
      UsedBy => "pmro",
    },
    PmroFinish => { #Structure Type: RegField;
      Name => "PmroFinish",
      RegMem => "RegField",
      Description => "Pmro command finished.",
      Width => "1",
      Position => "33", # Excel Formula: =calc_position(F40,E41)
      Type => "Event",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C38,A38,G38)
    Description => "aaa",
    Width => "11", # Excel Formula: =calc_reg_width(E43:E44,F44)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "aaa",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "aaa",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C42,A42,G42)
    Description => "aaa",
    Width => "32", # Excel Formula: =calc_reg_width(E46:E46,F46)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "aaa",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C45,A45,G45)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E48:E48,F48)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  GeneralInterruptRegister => { #Structure Type: Reg;
    Name => "GeneralInterruptRegister",
    RegMem => "Reg",
    Address => "100",
    Description => "Interrupt",
    Width => "10", # Excel Formula: =calc_reg_width(E8:E17,F17)
    Type => "Interrupt",
    hbm_chnl_0_1_interrupt => { #Structure Type: RegField;
      Name => "hbm_chnl_0_1_interrupt",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Interrupt",
      UsedBy => "mmu",
    },
    hbm_chnl_2_3_interrupt => { #Structure Type: RegField;
      Name => "hbm_chnl_2_3_interrupt",
      RegMem => "RegField",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "Interrupt",
      UsedBy => "mmu",
    },
    hbm_chnl_4_5_interrupt => { #Structure Type: RegField;
      Name => "hbm_chnl_4_5_interrupt",
      RegMem => "RegField",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F9,E10)
      Type => "Interrupt",
      UsedBy => "mmu",
    },
    hbm_chnl_6_7_interrupt => { #Structure Type: RegField;
      Name => "hbm_chnl_6_7_interrupt",
      RegMem => "RegField",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "mmu",
    },
    hbm_chnl_8_9_interrupt => { #Structure Type: RegField;
      Name => "hbm_chnl_8_9_interrupt",
      RegMem => "RegField",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F11,E12)
      Type => "Interrupt",
      UsedBy => "mmu",
    },
    hbm_chnl_10_11_interrupt => { #Structure Type: RegField;
      Name => "hbm_chnl_10_11_interrupt",
      RegMem => "RegField",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F12,E13)
      Type => "Interrupt",
      UsedBy => "mmu",
    },
    hbm_chnl_12_13_interrupt => { #Structure Type: RegField;
      Name => "hbm_chnl_12_13_interrupt",
      RegMem => "RegField",
      Width => "1",
      Position => "6", # Excel Formula: =calc_position(F13,E14)
      Type => "Interrupt",
      UsedBy => "mmu",
    },
    hbm_chnl_14_15_interrupt => { #Structure Type: RegField;
      Name => "hbm_chnl_14_15_interrupt",
      RegMem => "RegField",
      Width => "1",
      Position => "7", # Excel Formula: =calc_position(F14,E15)
      Type => "Interrupt",
      UsedBy => "mmu",
    },
    mmu_has_error_buffer_interrupt => { #Structure Type: RegField;
      Name => "mmu_has_error_buffer_interrupt",
      RegMem => "RegField",
      Description => "MMU list of error buffers is not empty",
      Width => "1",
      Position => "8", # Excel Formula: =calc_position(F15,E16)
      Type => "Interrupt",
      UsedBy => "mmu",
    },
    lpm_error_interrupt => { #Structure Type: RegField;
      Name => "lpm_error_interrupt",
      RegMem => "RegField",
      Description => "Got error in LPM read from memory",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F16,E17)
      Type => "Interrupt",
      UsedBy => "mmu",
    },
  },
  GeneralInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "GeneralInterruptRegisterMask",
    RegMem => "Reg",
    Address => "101",
    Description => "This register masks GeneralInterruptRegister interrupt register",
    Width => "10", # Excel Formula: =calc_reg_width(E8:E17,F17)
    Type => "InterruptMask",
    hbm_chnl_0_1_interruptMask => { #Structure Type: RegField;
      Name => "hbm_chnl_0_1_interruptMask",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    hbm_chnl_2_3_interruptMask => { #Structure Type: RegField;
      Name => "hbm_chnl_2_3_interruptMask",
      RegMem => "RegField",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    hbm_chnl_4_5_interruptMask => { #Structure Type: RegField;
      Name => "hbm_chnl_4_5_interruptMask",
      RegMem => "RegField",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F9,E10)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    hbm_chnl_6_7_interruptMask => { #Structure Type: RegField;
      Name => "hbm_chnl_6_7_interruptMask",
      RegMem => "RegField",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    hbm_chnl_8_9_interruptMask => { #Structure Type: RegField;
      Name => "hbm_chnl_8_9_interruptMask",
      RegMem => "RegField",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    hbm_chnl_10_11_interruptMask => { #Structure Type: RegField;
      Name => "hbm_chnl_10_11_interruptMask",
      RegMem => "RegField",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    hbm_chnl_12_13_interruptMask => { #Structure Type: RegField;
      Name => "hbm_chnl_12_13_interruptMask",
      RegMem => "RegField",
      Width => "1",
      Position => "6", # Excel Formula: =calc_position(F13,E14)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    hbm_chnl_14_15_interruptMask => { #Structure Type: RegField;
      Name => "hbm_chnl_14_15_interruptMask",
      RegMem => "RegField",
      Width => "1",
      Position => "7", # Excel Formula: =calc_position(F14,E15)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    mmu_has_error_buffer_interruptMask => { #Structure Type: RegField;
      Name => "mmu_has_error_buffer_interruptMask",
      RegMem => "RegField",
      Description => "This field masks mmu_has_error_buffer_interrupt interrupt",
      Width => "1",
      Position => "8", # Excel Formula: =calc_position(F15,E16)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    lpm_error_interruptMask => { #Structure Type: RegField;
      Name => "lpm_error_interruptMask",
      RegMem => "RegField",
      Description => "This field masks lpm_error_interrupt interrupt",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F16,E17)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  GeneralInterruptRegisterTest => { #Structure Type: Reg; Skip Register;
    Name => "GeneralInterruptRegisterTest",
    RegMem => "Reg",
    Address => "102",
    Description => "This register tests GeneralInterruptRegister interrupt register",
    Width => "10", # Excel Formula: =calc_reg_width(E8:E17,F17)
    Type => "InterruptTest",
    hbm_chnl_0_1_interruptTest => { #Structure Type: RegField;
      Name => "hbm_chnl_0_1_interruptTest",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    hbm_chnl_2_3_interruptTest => { #Structure Type: RegField;
      Name => "hbm_chnl_2_3_interruptTest",
      RegMem => "RegField",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    hbm_chnl_4_5_interruptTest => { #Structure Type: RegField;
      Name => "hbm_chnl_4_5_interruptTest",
      RegMem => "RegField",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F9,E10)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    hbm_chnl_6_7_interruptTest => { #Structure Type: RegField;
      Name => "hbm_chnl_6_7_interruptTest",
      RegMem => "RegField",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    hbm_chnl_8_9_interruptTest => { #Structure Type: RegField;
      Name => "hbm_chnl_8_9_interruptTest",
      RegMem => "RegField",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    hbm_chnl_10_11_interruptTest => { #Structure Type: RegField;
      Name => "hbm_chnl_10_11_interruptTest",
      RegMem => "RegField",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    hbm_chnl_12_13_interruptTest => { #Structure Type: RegField;
      Name => "hbm_chnl_12_13_interruptTest",
      RegMem => "RegField",
      Width => "1",
      Position => "6", # Excel Formula: =calc_position(F13,E14)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    hbm_chnl_14_15_interruptTest => { #Structure Type: RegField;
      Name => "hbm_chnl_14_15_interruptTest",
      RegMem => "RegField",
      Width => "1",
      Position => "7", # Excel Formula: =calc_position(F14,E15)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    mmu_has_error_buffer_interruptTest => { #Structure Type: RegField;
      Name => "mmu_has_error_buffer_interruptTest",
      RegMem => "RegField",
      Description => "This field tests mmu_has_error_buffer_interrupt interrupt",
      Width => "1",
      Position => "8", # Excel Formula: =calc_position(F15,E16)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    lpm_error_interruptTest => { #Structure Type: RegField;
      Name => "lpm_error_interruptTest",
      RegMem => "RegField",
      Description => "This field tests lpm_error_interrupt interrupt",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F16,E17)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  MmuParameters => { #Structure Type: Reg;
    Name => "MmuParameters",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Parameters of MMU",
    Width => "4", # Excel Formula: =calc_reg_width(E19:E22,F22)
    Type => "Config",
    DramBufferSize => { #Structure Type: RegField;
      Name => "DramBufferSize",
      RegMem => "RegField",
      Description => "Size of DRAM buffer. 0 = 4kB buffer, 1 = 8kB buffer
4kB is supported if total HBM memory is 4GB or 2GB. 8kB is supported if total HBM memory is 8GB or 4GB.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "pack",
      DefaultValue => "d1",
    },
    Hynix256Mode => { #Structure Type: RegField;
      Name => "Hynix256Mode",
      RegMem => "RegField",
      Description => "Use data granularity per channel of 256B instead of 128B. Used for Hynix dies",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "alloc",
      DefaultValue => "d0",
    },
    LpmRandomMode => { #Structure Type: RegField;
      Name => "LpmRandomMode",
      RegMem => "RegField",
      Description => "If set, LPM chooses among 4 replicated banks using random LFSR, and not according to fullness",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "lpm_dist",
      DefaultValue => "d0",
    },
    UseDbdErrorMonitor => { #Structure Type: RegField;
      Name => "UseDbdErrorMonitor",
      RegMem => "RegField",
      Description => "If set, will use monitor to check legality of packet data against DBDs, and give error if does not match",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F21,E22)
      Type => "Config",
      UsedBy => "unpack",
      DefaultValue => "d1",
    },
  },
  HBMDieType => { #Structure Type: Reg;
    Name => "HBMDieType",
    RegMem => "Reg",
    Address => "104", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Type of HBM Die",
    Width => "3", # Excel Formula: =calc_reg_width(E24:E26,F26)
    Type => "Config",
    HbmNumChannels => { #Structure Type: RegField;
      Name => "HbmNumChannels",
      RegMem => "RegField",
      Description => "Total # of HBM channels from all dies
0 = 8 channels, 1 = 16 channels
Set to 0 for one HBM die, 1 for 2 HBM dies",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F23,E24,TRUE)
      Type => "Config",
      UsedBy => "mmu",
      DefaultValue => "d1",
      Comments => " ",
    },
    HbmBanksPerChannel => { #Structure Type: RegField;
      Name => "HbmBanksPerChannel",
      RegMem => "RegField",
      Description => "NOT USED",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "mmu",
      DefaultValue => "d1",
      DocName => " ",
    },
    HbmUpperOrLower => { #Structure Type: RegField;
      Name => "HbmUpperOrLower",
      RegMem => "RegField",
      Description => "Only relevant if HbmNumChannels set to 0. Which HBM die is connected, the upper one or lower one",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "mmu",
      DefaultValue => "d1",
    },
  },
  LPMConfig0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 10;
    Name => "LPMConfig[4]",
    RegMem => "Reg",
    Address => "105", # Excel Formula: =calc_reg_address(C23,A23,G23)
    Description => "Offset added to LPM bucket number in LPM addressing scheme. Used to locate LPM in particular areas of memory, and to do channel load balancing of LPM",
    Width => "22", # Excel Formula: =calc_reg_width(E28:E29,F29)
    Type => "Config",
    ArrayLength => "4",
    ArrayIndex => "0",
    LPMStartBankChannelOffset0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 26;
      Name => "LPMStartBankChannelOffset[n]",
      RegMem => "RegField",
      Description => "Offset for LPM Channel and bank",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Config",
      UsedBy => "lpm_dist",
      DefaultValue => "d0",
    },
    LPMStartRowOffset0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "LPMStartRowOffset[n]",
      RegMem => "RegField",
      Description => "Offset for LPM row start. For Hynix mode, 2 MSBs must be set to 00",
      Width => "14",
      Position => "21:8", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "lpm_dist",
      DefaultValue => "d0 ",
    },
  },
  LPMConfig1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 10;
    Name => "LPMConfig[4]",
    RegMem => "Reg",
    Address => "106",
    Description => "Offset added to LPM bucket number in LPM addressing scheme. Used to locate LPM in particular areas of memory, and to do channel load balancing of LPM",
    Width => "22", # Excel Formula: =calc_reg_width(E28:E29,F29)
    Type => "Config",
    ArrayLength => "4",
    ArrayIndex => "1",
    LPMStartBankChannelOffset1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 26;
      Name => "LPMStartBankChannelOffset[n]",
      RegMem => "RegField",
      Description => "Offset for LPM Channel and bank",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Config",
      UsedBy => "lpm_dist",
      DefaultValue => "d0",
    },
    LPMStartRowOffset1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "LPMStartRowOffset[n]",
      RegMem => "RegField",
      Description => "Offset for LPM row start. For Hynix mode, 2 MSBs must be set to 00",
      Width => "14",
      Position => "21:8", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "lpm_dist",
      DefaultValue => "d0 ",
    },
  },
  LPMConfig2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 10;
    Name => "LPMConfig[4]",
    RegMem => "Reg",
    Address => "107",
    Description => "Offset added to LPM bucket number in LPM addressing scheme. Used to locate LPM in particular areas of memory, and to do channel load balancing of LPM",
    Width => "22", # Excel Formula: =calc_reg_width(E28:E29,F29)
    Type => "Config",
    ArrayLength => "4",
    ArrayIndex => "2",
    LPMStartBankChannelOffset2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 26;
      Name => "LPMStartBankChannelOffset[n]",
      RegMem => "RegField",
      Description => "Offset for LPM Channel and bank",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Config",
      UsedBy => "lpm_dist",
      DefaultValue => "d0",
    },
    LPMStartRowOffset2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "LPMStartRowOffset[n]",
      RegMem => "RegField",
      Description => "Offset for LPM row start. For Hynix mode, 2 MSBs must be set to 00",
      Width => "14",
      Position => "21:8", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "lpm_dist",
      DefaultValue => "d0 ",
    },
  },
  LPMConfig3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 10;
    Name => "LPMConfig[4]",
    RegMem => "Reg",
    Address => "108",
    Description => "Offset added to LPM bucket number in LPM addressing scheme. Used to locate LPM in particular areas of memory, and to do channel load balancing of LPM",
    Width => "22", # Excel Formula: =calc_reg_width(E28:E29,F29)
    Type => "Config",
    ArrayLength => "4",
    ArrayIndex => "3",
    LPMStartBankChannelOffset3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 26;
      Name => "LPMStartBankChannelOffset[n]",
      RegMem => "RegField",
      Description => "Offset for LPM Channel and bank",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Config",
      UsedBy => "lpm_dist",
      DefaultValue => "d0",
    },
    LPMStartRowOffset3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "LPMStartRowOffset[n]",
      RegMem => "RegField",
      Description => "Offset for LPM row start. For Hynix mode, 2 MSBs must be set to 00",
      Width => "14",
      Position => "21:8", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "lpm_dist",
      DefaultValue => "d0 ",
    },
  },
  ErrorBuffers0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 13;
    Name => "ErrorBuffers[8]",
    RegMem => "Reg",
    Address => "109", # Excel Formula: =calc_reg_address(C27,A27,G27)
    Description => "DRAM buffer address which got ECC error from HBM. Not returned to buffer pool. Cleared upon CPU read",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "0",
    ErrorBuffer0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 12;
      Name => "ErrorBuffer[n]",
      RegMem => "RegField",
      Description => "Address of error buffer",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
    ErrorBufferValid0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "ErrorBufferValid[n]",
      RegMem => "RegField",
      Description => "Set to 1 if error buffer entry is valid",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F31,E32)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
  },
  ErrorBuffers1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 13;
    Name => "ErrorBuffers[8]",
    RegMem => "Reg",
    Address => "10A",
    Description => "DRAM buffer address which got ECC error from HBM. Not returned to buffer pool. Cleared upon CPU read",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "1",
    ErrorBuffer1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 12;
      Name => "ErrorBuffer[n]",
      RegMem => "RegField",
      Description => "Address of error buffer",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
    ErrorBufferValid1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "ErrorBufferValid[n]",
      RegMem => "RegField",
      Description => "Set to 1 if error buffer entry is valid",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F31,E32)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
  },
  ErrorBuffers2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 13;
    Name => "ErrorBuffers[8]",
    RegMem => "Reg",
    Address => "10B",
    Description => "DRAM buffer address which got ECC error from HBM. Not returned to buffer pool. Cleared upon CPU read",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "2",
    ErrorBuffer2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 12;
      Name => "ErrorBuffer[n]",
      RegMem => "RegField",
      Description => "Address of error buffer",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
    ErrorBufferValid2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 17;
      Name => "ErrorBufferValid[n]",
      RegMem => "RegField",
      Description => "Set to 1 if error buffer entry is valid",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F31,E32)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
  },
  ErrorBuffers3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 13;
    Name => "ErrorBuffers[8]",
    RegMem => "Reg",
    Address => "10C",
    Description => "DRAM buffer address which got ECC error from HBM. Not returned to buffer pool. Cleared upon CPU read",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "3",
    ErrorBuffer3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 12;
      Name => "ErrorBuffer[n]",
      RegMem => "RegField",
      Description => "Address of error buffer",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
    ErrorBufferValid3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 17;
      Name => "ErrorBufferValid[n]",
      RegMem => "RegField",
      Description => "Set to 1 if error buffer entry is valid",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F31,E32)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
  },
  ErrorBuffers4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 13;
    Name => "ErrorBuffers[8]",
    RegMem => "Reg",
    Address => "10D",
    Description => "DRAM buffer address which got ECC error from HBM. Not returned to buffer pool. Cleared upon CPU read",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "4",
    ErrorBuffer4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 12;
      Name => "ErrorBuffer[n]",
      RegMem => "RegField",
      Description => "Address of error buffer",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
    ErrorBufferValid4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 17;
      Name => "ErrorBufferValid[n]",
      RegMem => "RegField",
      Description => "Set to 1 if error buffer entry is valid",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F31,E32)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
  },
  ErrorBuffers5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 13;
    Name => "ErrorBuffers[8]",
    RegMem => "Reg",
    Address => "10E",
    Description => "DRAM buffer address which got ECC error from HBM. Not returned to buffer pool. Cleared upon CPU read",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "5",
    ErrorBuffer5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 12;
      Name => "ErrorBuffer[n]",
      RegMem => "RegField",
      Description => "Address of error buffer",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
    ErrorBufferValid5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 17;
      Name => "ErrorBufferValid[n]",
      RegMem => "RegField",
      Description => "Set to 1 if error buffer entry is valid",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F31,E32)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
  },
  ErrorBuffers6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 13;
    Name => "ErrorBuffers[8]",
    RegMem => "Reg",
    Address => "10F",
    Description => "DRAM buffer address which got ECC error from HBM. Not returned to buffer pool. Cleared upon CPU read",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "6",
    ErrorBuffer6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 12;
      Name => "ErrorBuffer[n]",
      RegMem => "RegField",
      Description => "Address of error buffer",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
    ErrorBufferValid6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 17;
      Name => "ErrorBufferValid[n]",
      RegMem => "RegField",
      Description => "Set to 1 if error buffer entry is valid",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F31,E32)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
  },
  ErrorBuffers7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 13;
    Name => "ErrorBuffers[8]",
    RegMem => "Reg",
    Address => "110",
    Description => "DRAM buffer address which got ECC error from HBM. Not returned to buffer pool. Cleared upon CPU read",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "7",
    ErrorBuffer7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 12;
      Name => "ErrorBuffer[n]",
      RegMem => "RegField",
      Description => "Address of error buffer",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
    ErrorBufferValid7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 17;
      Name => "ErrorBufferValid[n]",
      RegMem => "RegField",
      Description => "Set to 1 if error buffer entry is valid",
      Width => "1",
      Position => "20", # Excel Formula: =calc_position(F31,E32)
      Type => "Event",
      UsedBy => "mmu_rd_reorder",
    },
  },
  LPMErrorReqIdReg => { #Structure Type: Reg;
    Name => "LPMErrorReqIdReg",
    RegMem => "Reg",
    Address => "111", # Excel Formula: =calc_reg_address(C30,A30,G30)
    Description => "Req ID of LPM buffer that had error. MSB is LPM interface 0 or 1",
    Width => "8", # Excel Formula: =calc_reg_width(E34:E34,F34)
    Type => "ReadOnly",
    LPMErrorReqId => { #Structure Type: RegField;
      Name => "LPMErrorReqId",
      RegMem => "RegField",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F33,E34,TRUE)
      Type => "Event",
      UsedBy => "mmu_lpm_rd_req",
    },
  },
  LPMErrorCounterReg => { #Structure Type: Reg;
    Name => "LPMErrorCounterReg",
    RegMem => "Reg",
    Address => "112", # Excel Formula: =calc_reg_address(C33,A33,G33)
    Description => "Counter of number of LPM errors",
    Width => "16", # Excel Formula: =calc_reg_width(E36:E36,F36)
    Type => "ReadOnly",
    LPMErrorCounter => { #Structure Type: RegField;
      Name => "LPMErrorCounter",
      RegMem => "RegField",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F35,E36,TRUE)
      Type => "Counter",
      UsedBy => "mmu_lpm_rd_req",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  debug_data_bus_register => { #Structure Type: Reg;
    Name => "debug_data_bus_register",
    RegMem => "Reg",
    Address => "113", # Excel Formula: =calc_reg_address(C35,A35,G35)
    Description => "debug_data_bus_register",
    Width => "32", # Excel Formula: =calc_reg_width(E38:E38,F38)
    Type => "ReadOnly",
    debug_data_bus => { #Structure Type: RegField;
      Name => "debug_data_bus",
      RegMem => "RegField",
      Description => "debug_data_bus",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F37,E38,TRUE)
      Type => "Status",
      UsedBy => "mmu",
    },
  },
  debug_data_select_register => { #Structure Type: Reg;
    Name => "debug_data_select_register",
    RegMem => "Reg",
    Address => "114", # Excel Formula: =calc_reg_address(C37,A37,G37)
    Description => "debug_data_bus_register",
    Width => "10", # Excel Formula: =calc_reg_width(E40:E40,F40)
    Type => "Config",
    debug_data_select => { #Structure Type: RegField;
      Name => "debug_data_select",
      RegMem => "RegField",
      Description => "debug_data_bus",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F39,E40,TRUE)
      Type => "Config",
      UsedBy => "mmu",
      DefaultValue => "d0",
    },
  },
  sms_data_fifo_mem0 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 18;
    Name => "sms_data_fifo_mem[4]",
    RegMem => "Mem",
    Address => "100000",
    Description => "MMU SMS DATA FIFO",
    Width => "620", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,128)
    Type => "Dynamic",
    UsedBy => "pack",
    MemEntries => "32", # Excel Formula: =calc_field_width_define("MMU_SMS_DATA_FIFO_DEPTH")
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=100,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "4",
    ArrayIndex => "0",
    MemLogicalWidth => "576",
    sms_data_fifo_mem0Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "sms_data_fifo_mem[n]Data",
      RegMem => "MemField",
      Width => "576", # Excel Formula: =calc_field_width_define("MMU_SMS_DATA_FIFO_WIDTH")
      Position => "575:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  sms_data_fifo_mem1 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 18;
    Name => "sms_data_fifo_mem[4]",
    RegMem => "Mem",
    Address => "200000",
    Description => "MMU SMS DATA FIFO",
    Width => "620", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,128)
    Type => "Dynamic",
    UsedBy => "pack",
    MemEntries => "32", # Excel Formula: =calc_field_width_define("MMU_SMS_DATA_FIFO_DEPTH")
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=100,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "4",
    ArrayIndex => "1",
    MemLogicalWidth => "576",
    sms_data_fifo_mem1Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "sms_data_fifo_mem[n]Data",
      RegMem => "MemField",
      Width => "576", # Excel Formula: =calc_field_width_define("MMU_SMS_DATA_FIFO_WIDTH")
      Position => "575:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  sms_data_fifo_mem2 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 18;
    Name => "sms_data_fifo_mem[4]",
    RegMem => "Mem",
    Address => "300000",
    Description => "MMU SMS DATA FIFO",
    Width => "620", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,128)
    Type => "Dynamic",
    UsedBy => "pack",
    MemEntries => "32", # Excel Formula: =calc_field_width_define("MMU_SMS_DATA_FIFO_DEPTH")
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=100,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "4",
    ArrayIndex => "2",
    MemLogicalWidth => "576",
    sms_data_fifo_mem2Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "sms_data_fifo_mem[n]Data",
      RegMem => "MemField",
      Width => "576", # Excel Formula: =calc_field_width_define("MMU_SMS_DATA_FIFO_WIDTH")
      Position => "575:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  sms_data_fifo_mem3 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 18;
    Name => "sms_data_fifo_mem[4]",
    RegMem => "Mem",
    Address => "400000",
    Description => "MMU SMS DATA FIFO",
    Width => "620", # Excel Formula: =calc_mem_width(E42:E42,M41,F42,128)
    Type => "Dynamic",
    UsedBy => "pack",
    MemEntries => "32", # Excel Formula: =calc_field_width_define("MMU_SMS_DATA_FIFO_DEPTH")
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,WriteActivityFactor=100,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "4",
    ArrayIndex => "3",
    MemLogicalWidth => "576",
    sms_data_fifo_mem3Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "sms_data_fifo_mem[n]Data",
      RegMem => "MemField",
      Width => "576", # Excel Formula: =calc_field_width_define("MMU_SMS_DATA_FIFO_WIDTH")
      Position => "575:0", # Excel Formula: =calc_position(F41,E42,TRUE)
    },
  },
  mmu_dbd_req_fifo => { #Structure Type: Mem;
    Name => "mmu_dbd_req_fifo",
    RegMem => "Mem",
    Address => "500000", # Excel Formula: =calc_mem_address(C41,A41,G43,L43)
    Description => "MMU FIFO of DBD read requests",
    Width => "85", # Excel Formula: =calc_mem_width(E44:E44,M43,F44,-1)
    Type => "Dynamic",
    UsedBy => "rd_reorder",
    MemEntries => "252",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,PortErrPropagate=Enabled,WriteActivityFactor=10,ReadActivityFactor=10,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "Depth is 32 entires, minus flop prefetch",
    MemLogicalWidth => "77",
    mmu_dbd_req_fifoData => { #Structure Type: MemField;
      Name => "mmu_dbd_req_fifoData",
      RegMem => "MemField",
      Width => "77",
      Position => "76:0", # Excel Formula: =calc_position(F43,E44,TRUE)
    },
  },
};
