$block{mem_wrapper_top} = {
  Defines_db => "X:\\latest\\design\\mem_wrapper\\data\\mem_wrapper_top_defines.v",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "2",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    TestDoneInterruptRegisterSummary => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, TestDoneInterruptRegister has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "This field masks Ecc_1bErrInterrupt",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "This field masks Ecc_2bErrInterrupt",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "This field masks ParityErrInterrupt",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "4",
    Type => "Config",
    single_port_largeEcc_1bErrInterruptMask => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    two_port_powerEcc_1bErrInterruptMask => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    mrf_slowEcc_1bErrInterruptMask => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    mrf_wideEcc_1bErrInterruptMask => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "4",
    Type => "Config",
    single_port_largeEcc_2bErrInterruptMask => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    two_port_powerEcc_2bErrInterruptMask => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    mrf_slowEcc_2bErrInterruptMask => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    mrf_wideEcc_2bErrInterruptMask => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "4",
    Type => "Config",
    single_port_largeEcc_1bErrInitiate => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    two_port_powerEcc_1bErrInitiate => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    mrf_slowEcc_1bErrInitiate => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    mrf_wideEcc_1bErrInitiate => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "4",
    Type => "Config",
    single_port_largeEcc_2bErrInitiate => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    two_port_powerEcc_2bErrInitiate => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    mrf_slowEcc_2bErrInitiate => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    mrf_wideEcc_2bErrInitiate => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "4",
    Type => "ReadOnly",
    single_port_largeErrInt => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    two_port_powerErrInt => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    mrf_slowErrInt => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    mrf_wideErrInt => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "15",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "13",
      Position => "12:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "14:13",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "3",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "2",
      Position => "1:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  MbistStatus => { #Structure Type: Reg; Skip Register;
    RegMem => "Reg",
    Address => "39",
    Description => "MBIST pass fail status",
    Width => "12",
    Type => "ReadOnly",
    BistDonePassOut => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, MBIST passed",
      Width => "6",
      Position => "5:0",
      Type => "Status",
      UsedBy => "MEM",
    },
    BistDoneFailOut => { #Structure Type: RegField;
      RegMem => "RegField",
      Description => "When this bit is set, MBIST failed",
      Width => "6",
      Position => "11:6",
      Type => "Status",
      UsedBy => "MEM",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
      DefaultValue => "b0",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "3", # Excel Formula: =calc_reg_width(E25:E27,F27)
    Type => "Config",
    CoreBistRprMode => { #Structure Type: RegField;
      Name => "CoreBistRprMode",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistRun => { #Structure Type: RegField;
      Name => "CoreBistRun",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistPtrnFill => { #Structure Type: RegField;
      Name => "CoreBistPtrnFill",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E29:E29,F29)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F28,E29,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  TestDoneInterruptRegister => { #Structure Type: Reg;
    Name => "TestDoneInterruptRegister",
    RegMem => "Reg",
    Address => "100",
    Description => "Test for memory is done",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "Interrupt",
    TestDone0 => { #Structure Type: RegField;
      Name => "TestDone0",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Interrupt",
      UsedBy => "mem_wrapper_top",
    },
  },
  TestDoneInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "TestDoneInterruptRegisterMask",
    RegMem => "Reg",
    Address => "101",
    Description => "This register masks TestDoneInterruptRegister interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "InterruptMask",
    DefaultValue => "b0",
    TestDone0Mask => { #Structure Type: RegField;
      Name => "TestDone0Mask",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  TestDoneInterruptRegisterTest => { #Structure Type: Reg; Skip Register;
    Name => "TestDoneInterruptRegisterTest",
    RegMem => "Reg",
    Address => "102",
    Description => "This register tests TestDoneInterruptRegister interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "InterruptTest",
    DefaultValue => "b0",
    TestDone0Test => { #Structure Type: RegField;
      Name => "TestDone0Test",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  CssControlReg => { #Structure Type: Reg;
    Name => "CssControlReg",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "CssControlReg",
    Width => "2", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Config",
    Reserved => { #Structure Type: RegField;
      Name => "Reserved",
      RegMem => "RegField",
      Description => "Not used",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h1",
    },
    CssControlRegContinuousTest => { #Structure Type: RegField;
      Name => "CssControlRegContinuousTest",
      RegMem => "RegField",
      Description => "When set, runs continuous memory test",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F10,E11)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h0",
    },
  },
  StartTestReg => { #Structure Type: Reg;
    Name => "StartTestReg",
    RegMem => "Reg",
    Address => "104", # Excel Formula: =calc_reg_address(C9,A9,G9)
    Description => "StartTest Reg",
    Width => "4", # Excel Formula: =calc_reg_width(E13:E13,F13)
    Type => "External",
    UsedBy => "mem_wrapper_top",
    StartTestReg0 => { #Structure Type: RegField;
      Name => "StartTestReg0",
      RegMem => "RegField",
      Description => "Vector for starting memory tests",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "External",
    },
  },
  TestPassReg => { #Structure Type: Reg;
    Name => "TestPassReg",
    RegMem => "Reg",
    Address => "105", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "TestPassReg",
    Width => "4", # Excel Formula: =calc_reg_width(E15:E15,F15)
    Type => "ReadOnly",
    TestPassReg0 => { #Structure Type: RegField;
      Name => "TestPassReg0",
      RegMem => "RegField",
      Description => "One bit for each memory, whether it passed",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F14,E15,TRUE)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
  },
  DataReg0 => { #Structure Type: Reg;
    Name => "DataReg0",
    RegMem => "Reg",
    Address => "106", # Excel Formula: =calc_reg_address(C14,A14,G14)
    Description => "DataReg 0 for mem check",
    Width => "32", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    DataReg_data0 => { #Structure Type: RegField;
      Name => "DataReg_data0",
      RegMem => "RegField",
      Description => "Data for memgen reg 0",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h0",
      DefaultSvConstraint => "h1",
    },
  },
  DataReg1 => { #Structure Type: Reg;
    Name => "DataReg1",
    RegMem => "Reg",
    Address => "107", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "DataReg 1 for mem check",
    Width => "32", # Excel Formula: =calc_reg_width(E19:E19,F19)
    Type => "Config",
    DataReg_data1 => { #Structure Type: RegField;
      Name => "DataReg_data1",
      RegMem => "RegField",
      Description => "Data for memgen reg 1",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "hffffffff",
    },
  },
  DataReg2 => { #Structure Type: Reg;
    Name => "DataReg2",
    RegMem => "Reg",
    Address => "108", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "DataReg 2 for mem check",
    Width => "32", # Excel Formula: =calc_reg_width(E21:E21,F21)
    Type => "Config",
    DataReg_data2 => { #Structure Type: RegField;
      Name => "DataReg_data2",
      RegMem => "RegField",
      Description => "Data for memgen reg 2",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F20,E21,TRUE)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h55555555",
      DefaultSvConstraint => "h1",
    },
  },
  DataReg3 => { #Structure Type: Reg;
    Name => "DataReg3",
    RegMem => "Reg",
    Address => "109", # Excel Formula: =calc_reg_address(C20,A20,G20)
    Description => "DataReg 3 for mem check",
    Width => "32", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    DataReg_data3 => { #Structure Type: RegField;
      Name => "DataReg_data3",
      RegMem => "RegField",
      Description => "Data for memgen reg 3",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "haaaaaaaa",
    },
  },
  ControlReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 11;
    Name => "ControlReg[4]",
    RegMem => "Reg",
    Address => "10A", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "Control Reg",
    Width => "9", # Excel Formula: =calc_reg_width(E25:E26,F26)
    Type => "Config",
    ArrayLength => "4",
    ArrayIndex => "0",
    ControlReg0StopOnError => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "ControlReg[n]StopOnError",
      RegMem => "RegField",
      Description => "If set, stop on first mem error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h1",
    },
    ControlReg0ErrorCaptureCount => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "ControlReg[n]ErrorCaptureCount",
      RegMem => "RegField",
      Description => "Which # error to capture in Error Capture register.
0 means last error found",
      Width => "8",
      Position => "8:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h0",
    },
  },
  ControlReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 11;
    Name => "ControlReg[4]",
    RegMem => "Reg",
    Address => "10B",
    Description => "Control Reg",
    Width => "9", # Excel Formula: =calc_reg_width(E25:E26,F26)
    Type => "Config",
    ArrayLength => "4",
    ArrayIndex => "1",
    ControlReg1StopOnError => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "ControlReg[n]StopOnError",
      RegMem => "RegField",
      Description => "If set, stop on first mem error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h1",
    },
    ControlReg1ErrorCaptureCount => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "ControlReg[n]ErrorCaptureCount",
      RegMem => "RegField",
      Description => "Which # error to capture in Error Capture register.
0 means last error found",
      Width => "8",
      Position => "8:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h0",
    },
  },
  ControlReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 11;
    Name => "ControlReg[4]",
    RegMem => "Reg",
    Address => "10C",
    Description => "Control Reg",
    Width => "9", # Excel Formula: =calc_reg_width(E25:E26,F26)
    Type => "Config",
    ArrayLength => "4",
    ArrayIndex => "2",
    ControlReg2StopOnError => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 11;
      Name => "ControlReg[n]StopOnError",
      RegMem => "RegField",
      Description => "If set, stop on first mem error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h1",
    },
    ControlReg2ErrorCaptureCount => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 11;
      Name => "ControlReg[n]ErrorCaptureCount",
      RegMem => "RegField",
      Description => "Which # error to capture in Error Capture register.
0 means last error found",
      Width => "8",
      Position => "8:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h0",
    },
  },
  ControlReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 11;
    Name => "ControlReg[4]",
    RegMem => "Reg",
    Address => "10D",
    Description => "Control Reg",
    Width => "9", # Excel Formula: =calc_reg_width(E25:E26,F26)
    Type => "Config",
    ArrayLength => "4",
    ArrayIndex => "3",
    ControlReg3StopOnError => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 11;
      Name => "ControlReg[n]StopOnError",
      RegMem => "RegField",
      Description => "If set, stop on first mem error",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h1",
    },
    ControlReg3ErrorCaptureCount => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 11;
      Name => "ControlReg[n]ErrorCaptureCount",
      RegMem => "RegField",
      Description => "Which # error to capture in Error Capture register.
0 means last error found",
      Width => "8",
      Position => "8:1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "mem_wrapper_top",
      DefaultValue => "h0",
    },
  },
  StatusReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 10;
    Name => "StatusReg[4]",
    RegMem => "Reg",
    Address => "10E", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Status Reg",
    Width => "16", # Excel Formula: =calc_reg_width(E28:E29,F29)
    Type => "ReadOnly",
    ArrayLength => "4",
    ArrayIndex => "0",
    StatusReg0RdWrErrors => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "StatusReg[n]RdWrErrors",
      RegMem => "RegField",
      Description => "Number of errors where read value not equal to write value",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    StatusReg0ECCErrors => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "StatusReg[n]ECCErrors",
      RegMem => "RegField",
      Description => "Number of errors where 2b ECC error was detected",
      Width => "8",
      Position => "15:8", # Excel Formula: =calc_position(F28,E29)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
  },
  StatusReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 10;
    Name => "StatusReg[4]",
    RegMem => "Reg",
    Address => "10F",
    Description => "Status Reg",
    Width => "16", # Excel Formula: =calc_reg_width(E28:E29,F29)
    Type => "ReadOnly",
    ArrayLength => "4",
    ArrayIndex => "1",
    StatusReg1RdWrErrors => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "StatusReg[n]RdWrErrors",
      RegMem => "RegField",
      Description => "Number of errors where read value not equal to write value",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    StatusReg1ECCErrors => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "StatusReg[n]ECCErrors",
      RegMem => "RegField",
      Description => "Number of errors where 2b ECC error was detected",
      Width => "8",
      Position => "15:8", # Excel Formula: =calc_position(F28,E29)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
  },
  StatusReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 10;
    Name => "StatusReg[4]",
    RegMem => "Reg",
    Address => "110",
    Description => "Status Reg",
    Width => "16", # Excel Formula: =calc_reg_width(E28:E29,F29)
    Type => "ReadOnly",
    ArrayLength => "4",
    ArrayIndex => "2",
    StatusReg2RdWrErrors => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "StatusReg[n]RdWrErrors",
      RegMem => "RegField",
      Description => "Number of errors where read value not equal to write value",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    StatusReg2ECCErrors => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "StatusReg[n]ECCErrors",
      RegMem => "RegField",
      Description => "Number of errors where 2b ECC error was detected",
      Width => "8",
      Position => "15:8", # Excel Formula: =calc_position(F28,E29)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
  },
  StatusReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 10;
    Name => "StatusReg[4]",
    RegMem => "Reg",
    Address => "111",
    Description => "Status Reg",
    Width => "16", # Excel Formula: =calc_reg_width(E28:E29,F29)
    Type => "ReadOnly",
    ArrayLength => "4",
    ArrayIndex => "3",
    StatusReg3RdWrErrors => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "StatusReg[n]RdWrErrors",
      RegMem => "RegField",
      Description => "Number of errors where read value not equal to write value",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    StatusReg3ECCErrors => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "StatusReg[n]ECCErrors",
      RegMem => "RegField",
      Description => "Number of errors where 2b ECC error was detected",
      Width => "8",
      Position => "15:8", # Excel Formula: =calc_position(F28,E29)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
  },
  ErrorCaptureReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16;
    Name => "ErrorCaptureReg[4]",
    RegMem => "Reg",
    Address => "112", # Excel Formula: =calc_reg_address(C27,A27,G27)
    Description => "Error Capture Reg",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E33,F33)
    Type => "ReadOnly",
    ArrayLength => "4",
    ArrayIndex => "0",
    ErrorCaptureReg0Pattern => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]Pattern",
      RegMem => "RegField",
      Description => "Pattern on which error detected",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    ErrorCaptureReg0Addr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]Addr",
      RegMem => "RegField",
      Description => "Address on which error detected",
      Width => "14",
      Position => "18:5", # Excel Formula: =calc_position(F31,E32)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    ErrorCaptureReg0DataReg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]DataReg",
      RegMem => "RegField",
      Description => "Data reg on which error detected ",
      Width => "2",
      Position => "20:19", # Excel Formula: =calc_position(F32,E33)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
  },
  ErrorCaptureReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16;
    Name => "ErrorCaptureReg[4]",
    RegMem => "Reg",
    Address => "113",
    Description => "Error Capture Reg",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E33,F33)
    Type => "ReadOnly",
    ArrayLength => "4",
    ArrayIndex => "1",
    ErrorCaptureReg1Pattern => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]Pattern",
      RegMem => "RegField",
      Description => "Pattern on which error detected",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    ErrorCaptureReg1Addr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]Addr",
      RegMem => "RegField",
      Description => "Address on which error detected",
      Width => "14",
      Position => "18:5", # Excel Formula: =calc_position(F31,E32)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    ErrorCaptureReg1DataReg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]DataReg",
      RegMem => "RegField",
      Description => "Data reg on which error detected ",
      Width => "2",
      Position => "20:19", # Excel Formula: =calc_position(F32,E33)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
  },
  ErrorCaptureReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16;
    Name => "ErrorCaptureReg[4]",
    RegMem => "Reg",
    Address => "114",
    Description => "Error Capture Reg",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E33,F33)
    Type => "ReadOnly",
    ArrayLength => "4",
    ArrayIndex => "2",
    ErrorCaptureReg2Pattern => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]Pattern",
      RegMem => "RegField",
      Description => "Pattern on which error detected",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    ErrorCaptureReg2Addr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]Addr",
      RegMem => "RegField",
      Description => "Address on which error detected",
      Width => "14",
      Position => "18:5", # Excel Formula: =calc_position(F31,E32)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    ErrorCaptureReg2DataReg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]DataReg",
      RegMem => "RegField",
      Description => "Data reg on which error detected ",
      Width => "2",
      Position => "20:19", # Excel Formula: =calc_position(F32,E33)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
  },
  ErrorCaptureReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16;
    Name => "ErrorCaptureReg[4]",
    RegMem => "Reg",
    Address => "115",
    Description => "Error Capture Reg",
    Width => "21", # Excel Formula: =calc_reg_width(E31:E33,F33)
    Type => "ReadOnly",
    ArrayLength => "4",
    ArrayIndex => "3",
    ErrorCaptureReg3Pattern => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]Pattern",
      RegMem => "RegField",
      Description => "Pattern on which error detected",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    ErrorCaptureReg3Addr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]Addr",
      RegMem => "RegField",
      Description => "Address on which error detected",
      Width => "14",
      Position => "18:5", # Excel Formula: =calc_position(F31,E32)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
    ErrorCaptureReg3DataReg => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "ErrorCaptureReg[n]DataReg",
      RegMem => "RegField",
      Description => "Data reg on which error detected ",
      Width => "2",
      Position => "20:19", # Excel Formula: =calc_position(F32,E33)
      Type => "Status",
      UsedBy => "mem_wrapper_top",
    },
  },
  single_port_large => { #Structure Type: Mem;
    Name => "single_port_large",
    RegMem => "Mem",
    Address => "100000",
    Description => "single_port_large",
    Width => "259", # Excel Formula: =calc_mem_width(E35:E35,M34,F35,-1)
    Type => "Dynamic",
    UsedBy => "mem_wrapper_top",
    MemEntries => "8192",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleWriteBeforeProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    MemLogicalWidth => "249",
    single_port_largeField0 => { #Structure Type: MemField;
      Name => "single_port_largeField0",
      RegMem => "MemField",
      Description => "single_port_large",
      Width => "249",
      Position => "248:0", # Excel Formula: =calc_position(F34,E35,TRUE)
    },
  },
  two_port_power => { #Structure Type: Mem;
    Name => "two_port_power",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C34,A34,G36,L36)
    Description => "two_port_power",
    Width => "143", # Excel Formula: =calc_mem_width(E37:E37,M36,F37,-1)
    Type => "Dynamic",
    UsedBy => "mem_wrapper_top",
    MemEntries => "128",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleWriteBeforeProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    MemLogicalWidth => "134",
    two_port_powerField0 => { #Structure Type: MemField;
      Name => "two_port_powerField0",
      RegMem => "MemField",
      Description => "two_port_power",
      Width => "134",
      Position => "133:0", # Excel Formula: =calc_position(F36,E37,TRUE)
    },
  },
  mrf_slow => { #Structure Type: Mem;
    Name => "mrf_slow",
    RegMem => "Mem",
    Address => "300000", # Excel Formula: =calc_mem_address(C36,A36,G38,L38)
    Description => "mrf_slow",
    Width => "137", # Excel Formula: =calc_mem_width(E39:E39,M38,F39,-1)
    Type => "Dynamic",
    UsedBy => "mem_wrapper_top",
    MemEntries => "192",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteBeforeProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    MemLogicalWidth => "128",
    mrf_slowField0 => { #Structure Type: MemField;
      Name => "mrf_slowField0",
      RegMem => "MemField",
      Description => "mrf_slow",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F38,E39,TRUE)
    },
  },
  mrf_wide => { #Structure Type: Mem;
    Name => "mrf_wide",
    RegMem => "Mem",
    Address => "400000", # Excel Formula: =calc_mem_address(C38,A38,G40,L40)
    Description => "mrf_wide",
    Width => "197", # Excel Formula: =calc_mem_width(E41:E41,M40,F41,-1)
    Type => "Dynamic",
    UsedBy => "mem_wrapper_top",
    MemEntries => "20",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteBeforeProt=1,PortErrPropagate=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    MemLogicalWidth => "188",
    mrf_wideField0 => { #Structure Type: MemField;
      Name => "mrf_wideField0",
      RegMem => "MemField",
      Description => "mrf_wide",
      Width => "188",
      Position => "187:0", # Excel Formula: =calc_position(F40,E41,TRUE)
    },
  },
};
