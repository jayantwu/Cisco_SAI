$block{fllb} = {
  Defines_db => "Z:\\leaba_reg_db_example\\defines.v",
  ProjectName => "Pacific",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "1",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks Ecc_1bErrInterrupt",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks Ecc_2bErrInterrupt",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks ParityErrInterrupt",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "26",
    Type => "Config",
    IflbFbm0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbFbm0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbFbm1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbFbm1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbData0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbData0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbData1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbData1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbDataEmIndex0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbDataEmIndex0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbDataEmIndex1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbDataEmIndex1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ElephantTableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "ElephantTableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PdFifoEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PdFifoEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LbgTableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "LbgTableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LbgFarEndLinksUpTableEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "LbgFarEndLinksUpTableEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier8Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier8Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier9Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier9Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier10Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier10Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier11Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier11Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier12Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier12Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier13Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier13Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier14Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier14Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "24",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier15Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier15Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "25",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "26",
    Type => "Config",
    IflbFbm0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbFbm0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbFbm1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbFbm1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbData0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbData0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbData1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbData1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbDataEmIndex0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbDataEmIndex0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbDataEmIndex1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbDataEmIndex1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    ElephantTableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "ElephantTableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PdFifoEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PdFifoEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LbgTableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "LbgTableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    LbgFarEndLinksUpTableEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "LbgFarEndLinksUpTableEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier8Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier8Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier9Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier9Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier10Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier10Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier11Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier11Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier12Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier12Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier13Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier13Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier14Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier14Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "24",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    IflbEmVerifier15Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "IflbEmVerifier15Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "25",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "26",
    Type => "Config",
    IflbFbm0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbFbm0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbFbm1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbFbm1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbData0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbData0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbData1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbData1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbDataEmIndex0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbDataEmIndex0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbDataEmIndex1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbDataEmIndex1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ElephantTableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "ElephantTableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PdFifoEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PdFifoEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LbgTableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "LbgTableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LbgFarEndLinksUpTableEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "LbgFarEndLinksUpTableEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier8Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier8Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier9Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier9Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier10Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier10Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier11Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier11Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier12Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier12Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier13Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier13Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier14Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier14Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "24",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier15Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier15Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "25",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "26",
    Type => "Config",
    IflbFbm0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbFbm0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbFbm1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbFbm1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbData0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbData0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbData1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbData1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbDataEmIndex0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbDataEmIndex0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbDataEmIndex1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbDataEmIndex1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    ElephantTableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "ElephantTableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PdFifoEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PdFifoEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LbgTableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "LbgTableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    LbgFarEndLinksUpTableEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "LbgFarEndLinksUpTableEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier8Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier8Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier9Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier9Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier10Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier10Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier11Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier11Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier12Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier12Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier13Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier13Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier14Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier14Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "24",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    IflbEmVerifier15Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "IflbEmVerifier15Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "25",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "26",
    Type => "ReadOnly",
    IflbFbm0ErrInt => { #Structure Type: RegField;
      Name => "IflbFbm0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbFbm1ErrInt => { #Structure Type: RegField;
      Name => "IflbFbm1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbData0ErrInt => { #Structure Type: RegField;
      Name => "IflbData0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbData1ErrInt => { #Structure Type: RegField;
      Name => "IflbData1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbDataEmIndex0ErrInt => { #Structure Type: RegField;
      Name => "IflbDataEmIndex0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbDataEmIndex1ErrInt => { #Structure Type: RegField;
      Name => "IflbDataEmIndex1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    ElephantTableErrInt => { #Structure Type: RegField;
      Name => "ElephantTableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    PdFifoErrInt => { #Structure Type: RegField;
      Name => "PdFifoErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    LbgTableErrInt => { #Structure Type: RegField;
      Name => "LbgTableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
    LbgFarEndLinksUpTableErrInt => { #Structure Type: RegField;
      Name => "LbgFarEndLinksUpTableErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "9",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier0ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "10",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier1ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "11",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier2ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "12",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier3ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "13",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier4ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "14",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier5ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "15",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier6ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "16",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier7ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "17",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier8ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier8ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "18",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier9ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier9ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "19",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier10ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier10ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "20",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier11ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier11ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "21",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier12ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier12ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "22",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier13ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier13ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "23",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier14ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier14ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "24",
      Type => "Status",
      UsedBy => "SER",
    },
    IflbEmVerifier15ErrInt => { #Structure Type: RegField;
      Name => "IflbEmVerifier15ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "25",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "14",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "12",
      Position => "11:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "13:12",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "6",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "5",
      Position => "4:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  MbistPassStatus => { #Structure Type: Reg; Skip Register;
    Name => "MbistPassStatus",
    RegMem => "Reg",
    Address => "39",
    Description => "MBIST pass status",
    Width => "88",
    Type => "ReadOnly",
    BistDonePassOut => { #Structure Type: RegField;
      Name => "BistDonePassOut",
      RegMem => "RegField",
      Description => "When this bit is set, MBIST passed",
      Width => "88",
      Position => "87:0",
      Type => "Status",
      UsedBy => "MEM",
    },
  },
  MbistFailStatus => { #Structure Type: Reg; Skip Register;
    Name => "MbistFailStatus",
    RegMem => "Reg",
    Address => "3A",
    Description => "MBIST fail status",
    Width => "88",
    Type => "ReadOnly",
    BistDoneFailOut => { #Structure Type: RegField;
      Name => "BistDoneFailOut",
      RegMem => "RegField",
      Description => "When this bit is set, MBIST failed",
      Width => "88",
      Position => "87:0",
      Type => "Status",
      UsedBy => "MEM",
    },
  },
  TcamBistStatus => { #Structure Type: Reg; Skip Register;
    Name => "TcamBistStatus",
    RegMem => "Reg",
    Address => "3B",
    Description => "TCAM BIST pass fail status",
    Width => "16",
    Type => "ReadOnly",
    TcamBistDonePassOut => { #Structure Type: RegField;
      Name => "TcamBistDonePassOut",
      RegMem => "RegField",
      Description => "When this bit is set, TCAM BIST passed",
      Width => "8",
      Position => "7:0",
      Type => "Status",
      UsedBy => "TCAM",
    },
    TcamBistDoneFailOut => { #Structure Type: RegField;
      Name => "TcamBistDoneFailOut",
      RegMem => "RegField",
      Description => "When this bit is set, TCAM BIST failed",
      Width => "8",
      Position => "15:8",
      Type => "Status",
      UsedBy => "TCAM",
    },
  },
  TcamScanPeriodCfg => { #Structure Type: Reg; Skip Register;
    Name => "TcamScanPeriodCfg",
    RegMem => "Reg",
    Address => "3C",
    Description => "Configures period of TCAM scan for SER, set 0 to disable",
    Width => "32",
    Type => "Config",
    TcamScanPeriod => { #Structure Type: RegField;
      Name => "TcamScanPeriod",
      RegMem => "RegField",
      Description => "",
      Width => "32",
      Position => "31:0",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d120000000",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
      DefaultValue => "b0",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "3", # Excel Formula: =calc_reg_width(E25:E27,F27)
    Type => "Config",
    CoreBistRprMode => { #Structure Type: RegField;
      Name => "CoreBistRprMode",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistRun => { #Structure Type: RegField;
      Name => "CoreBistRun",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistPtrnFill => { #Structure Type: RegField;
      Name => "CoreBistPtrnFill",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E29:E29,F29)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F28,E29,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C28,A28,G28)
    Description => "Power Down Configuration for the block",
    Width => "128", # Excel Formula: =calc_reg_width(E31:E31,F31)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C30,A30,G30)
    Width => "39", # Excel Formula: =calc_reg_width(E33:E37,F37)
    Type => "Config",
    PmroExecute => { #Structure Type: RegField;
      Name => "PmroExecute",
      RegMem => "RegField",
      Description => "0->1: execute pmro command.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroCmd => { #Structure Type: RegField;
      Name => "PmroCmd",
      RegMem => "RegField",
      Description => "Pmro command to execute:
0: reset.
1: write.
2: read.
3: invalid.",
      Width => "2",
      Position => "2:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroSbusReset => { #Structure Type: RegField;
      Name => "PmroSbusReset",
      RegMem => "RegField",
      Description => "Reset pmro sbus chain. Need to set to 0 before starting access to pmro registers.",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroAddr => { #Structure Type: RegField;
      Name => "PmroAddr",
      RegMem => "RegField",
      Description => "PMRO register address:
0 - control register, 8b, def: 0x0.
1 - SVT Configuration Register, 16b, def: 0xFFFF.
2 - LVT Configuration Register, 16b, def: 0xFFFF.
3 - ULVT Configuration Register, 16b, def: 0xFFFF.
4 - Interconnect Configuration Register, 16b, def: 0xFFFF.
5 - Reference Clock Counter Register, 24b, def: 0xFFF000.
6 - Oscillator Counter Register, 24b, def: 0x000000.
7 - SBus ID register, read as 0x0B.
Set to '0' on reset command.",
      Width => "3",
      Position => "6:4", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroData => { #Structure Type: RegField;
      Name => "PmroData",
      RegMem => "RegField",
      Description => "PMRO data, set to 0x0 on reset and read command.",
      Width => "32",
      Position => "38:7", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C32,A32,G32)
    Width => "34", # Excel Formula: =calc_reg_width(E39:E41,F41)
    Type => "ReadOnly",
    PmroRdata => { #Structure Type: RegField;
      Name => "PmroRdata",
      RegMem => "RegField",
      Description => "Read data from pmro. Valid when PmroFinish=1 and PmroFailed=0.",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F38,E39,TRUE)
      Type => "Capture",
      UsedBy => "pmro",
    },
    PmroFailed => { #Structure Type: RegField;
      Name => "PmroFailed",
      RegMem => "RegField",
      Description => "Pmro command failed. Valid only when PmroFinish=1.",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F39,E40)
      Type => "Capture",
      UsedBy => "pmro",
    },
    PmroFinish => { #Structure Type: RegField;
      Name => "PmroFinish",
      RegMem => "RegField",
      Description => "Pmro command finished.",
      Width => "1",
      Position => "33", # Excel Formula: =calc_position(F40,E41)
      Type => "Event",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C38,A38,G38)
    Description => "aaa",
    Width => "11", # Excel Formula: =calc_reg_width(E43:E44,F44)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "aaa",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "aaa",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C42,A42,G42)
    Description => "aaa",
    Width => "32", # Excel Formula: =calc_reg_width(E46:E46,F46)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "aaa",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C45,A45,G45)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E48:E48,F48)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  SliceModeConfig => { #Structure Type: Reg;
    Name => "SliceModeConfig",
    RegMem => "Reg",
    Address => "100",
    Description => "Slice mode configuration",
    Width => "4", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "Config",
    SliceMode => { #Structure Type: RegField;
      Name => "SliceMode",
      RegMem => "RegField",
      Description => "Slice mode
0 - SLICE_MODE_CRF_NWK_TS
1 - SLICE_MODE_CRF_NWK_SN
2 - SLICE_MODE_CRF_FAB_TS
3 - SLICE_MODE_CRF_FAB_SN
4 - SLICE_MODE_TOR_NWK   
5 - SLICE_MODE_TOR_FAB   
6 - SLICE_MODE_FE_TS     
7 - SLICE_MODE_FE_SN     
8 - SLICE_MODE_SA        
9 - SLICE_MODE_DRAM      ",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d0",
    },
  },
  FifoCbtConfig => { #Structure Type: Reg;
    Name => "FifoCbtConfig",
    RegMem => "Reg",
    Address => "101", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Thresholds that control when input to the block is stopped in order to avoid overflow",
    Width => "12", # Excel Formula: =calc_reg_width(E10:E11,F11)
    Type => "Config",
    PdFifoAlmostFullTh => { #Structure Type: RegField;
      Name => "PdFifoAlmostFullTh",
      RegMem => "RegField",
      Description => "Stop RX Counters CBR when PD FIFO is above fill level. Used when not using CbtAlmostFullTh.
This field was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d26",
      Comments => "equals 50-24 (pipe from CBR to FIFO is 22cc + 2 extra)",
    },
    CbtAlmostFullTh => { #Structure Type: RegField;
      Name => "CbtAlmostFullTh",
      RegMem => "RegField",
      Description => "Threshold that controls when input to the block is stopped in order to avoid overflow when in bypass mode.
Should be configured to 5 in bypass mode (BypassMode = 1 or 2)
Should be configured to 63 (max value) otherwise (BypassMode = 0)
These values are optimized for the current silicon, thus the user is not expected to choose any other value unless instructed by Cisco Systems, Inc.",
      Width => "6",
      Position => "11:6", # Excel Formula: =calc_position(F10,E11)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d5",
      Comments => "In bypass mode PDs are not stored in FIFO but go directly to output without stopping.
Max value 63 disables almost full indication
FLLB_CBT_ALM_FULL = 2*RX_COUNTERS2FLLB_SAMPLES + 1 + BYPASS_NUM_OF_SAMPLES
2*RX_COUNTERS2FLLB_SAMPLES because 1cc for cbt_rdy to reach rx_counters, another one for the data to reach back fllb | +1 is sample of RX Counters logic to output",
    },
  },
  GeneralConfig => { #Structure Type: Reg;
    Name => "GeneralConfig",
    RegMem => "Reg",
    Address => "102", # Excel Formula: =calc_reg_address(C9,A9,G9)
    Description => "General confurations",
    Width => "24", # Excel Formula: =calc_reg_width(E13:E25,F25)
    Type => "Config",
    IsOverlay => { #Structure Type: RegField;
      Name => "IsOverlay",
      RegMem => "RegField",
      Description => "Whether the device is used with overlay environment
0 - Non-Overlay
1 - Overlay
In non-overlay mode link failure indication from DCFM will cause block to stop changing links for existing flows and use ECMP for new flows",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    DefaultCountType => { #Structure Type: RegField;
      Name => "DefaultCountType",
      RegMem => "RegField",
      Description => "Whether determining which flows are elephants is based on byte count (leaky bucket) or packet count
0 - COUNT_TYPE_BYTES
1 - COUNT_TYPE_PACKETS",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      DocName => "DefaultElephantTrapMode",
    },
    FirstFlowletAlwaysEcmp => { #Structure Type: RegField;
      Name => "FirstFlowletAlwaysEcmp",
      RegMem => "RegField",
      Description => "Whether a new flow that enters the IFDB is allocated a path based on ECMP so only the next flowlet will be allocated using flowlet allocation procedure
0 - Use flowlet allocation procedure for first flowlet of new flow
1 - Use ECMP for first flowlet of new flow",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    FirstFlowletEcmpFromIflbUtilPercent => { #Structure Type: RegField;
      Name => "FirstFlowletEcmpFromIflbUtilPercent",
      RegMem => "RegField",
      Description => "IFDB utilization percent above which, when there is a possibility that a new flow will fail entering the IFDB (and thus might not keep its chosen path), it will be allocated a path based on ECMP
Value of 0 determines to always use ECMP for flows that might fail entering the IFDB
Resolution: 1/2^4 percent - e.g. value 8 means utilization higher than 50%",
      Width => "4",
      Position => "6:3", # Excel Formula: =calc_position(F15,E16)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      DocName => "FirstFlowletEcmpFromIfdbUtilPercent",
      Comments => "Since design does not wait for indication that EM insert succeded, the first packet (and those few cc after) might get flowlet LB but not keep their entry in the IFDB.
When configured percentage = 0 flowlet LB is used only when EM insert is guarnteed (there is place in EM CAM)
Note: Decided not to verify - feature remains coded just in case",
    },
    EcmpMaskLocalFailedLinks => { #Structure Type: RegField;
      Name => "EcmpMaskLocalFailedLinks",
      RegMem => "RegField",
      Description => "Whether to mask local failed links when using ECMP link selection procedure
0 - Do not mask
1 - Mask",
      Width => "1",
      Position => "7", # Excel Formula: =calc_position(F16,E17)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    EcmpMaskFarFailedLinks => { #Structure Type: RegField;
      Name => "EcmpMaskFarFailedLinks",
      RegMem => "RegField",
      Description => "Whether to mask Far-End failed links when using ECMP link selection procedure (Use only with overlay)
0 - Do not mask
1 - Mask",
      Width => "1",
      Position => "8", # Excel Formula: =calc_position(F17,E18)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    FlowletMaskLocalFailedLinks => { #Structure Type: RegField;
      Name => "FlowletMaskLocalFailedLinks",
      RegMem => "RegField",
      Description => "Whether to mask local failed links when using Flowlet link selection procedure
0 - Do not mask
1 - Mask",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F18,E19)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    FlowletMaskFarFailedLinks => { #Structure Type: RegField;
      Name => "FlowletMaskFarFailedLinks",
      RegMem => "RegField",
      Description => "Whether to mask Far-End failed links when using Flowlet link selection procedure (Use only with overlay)
0 - Do not mask
1 - Mask",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    LastPacketTimeResolution => { #Structure Type: RegField;
      Name => "LastPacketTimeResolution",
      RegMem => "RegField",
      Description => "Resolution for IFDB's LastPacketTime field, which is used to determine the time difference for the leaky bucket, flowlet gap and aging
Resolution is 2^(8+config)ns
For example:
0 - 2^8ns
5 - 2^13ns",
      Width => "4",
      Position => "14:11", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h5",
      Comments => "offset of the bits from device_time, starting from min (8 = MIN_LAST_PACKET_TIME_RESOLUTION)",
    },
    InitTimestampResolution => { #Structure Type: RegField;
      Name => "InitTimestampResolution",
      RegMem => "RegField",
      Description => "Resolution for Elephant table's Init Timestamp, which is used to determine elephant duration for ElephantFlowDurationHistogram
Resolution 0.5us * 2^config =  2^9ns * 2^config",
      Width => "3",
      Position => "17:15", # Excel Formula: =calc_position(F21,E22)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
      Comments => "2^9ns from ELEPHANT_DURATION_MIN_RESOLUTION parameter",
    },
    FlowletByteCountResolution => { #Structure Type: RegField;
      Name => "FlowletByteCountResolution",
      RegMem => "RegField",
      Description => "Resolution for the IFDB FlowletByteCount field which is used for FlowletSizeHistogram and ElephantFlowSizeHistogram
Resolution is 2^config [byte]
For example:
0 - 2^0=1 byte
8 - 2^8 = 256 byte
15 (max) - 2^15 = 32768 byte",
      Width => "4",
      Position => "21:18", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
      Comments => "Resolution used the same way as with FlowBucketResolution",
    },
    DisableAgingByTp => { #Structure Type: RegField;
      Name => "DisableAgingByTp",
      RegMem => "RegField",
      Description => "Disable aging caused by feedback packet access
Feedback packets use the FLLB's IFDB to map flow signature to SVC. When this configuration is enabled aging is also performed on the entry if aging threshold was crossed
0 - Enabled
1 - Disabled",
      Width => "1",
      Position => "22", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
      DocName => "DisableAgingByFp",
    },
    PromoteToElephantWithoutGap => { #Structure Type: RegField;
      Name => "PromoteToElephantWithoutGap",
      RegMem => "RegField",
      Description => "Whether to mark flows as expired elephant when they cross the elephant flow TH, even if they can't change to full (SLB with SVC) elephant immediately (because flowlet gap didn't pass, SVC is not available or FLLB is in reorder-error mode). Marking as expired elephant will cause the next packet of the flow that is received when the flow can become elephant, to trigger the transition even if at that time the flow does not pass the elephant flow TH
Only relevant when SLB is enabled and when not using ProcessAllFlows mode
0 - Promote to elephant only if the flow can receive SVC and use SLB
1 - Always promote to (expired) elephant when TH is crossed",
      Width => "1",
      Position => "23", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
      DocName => "AlwaysPromoteToElephantWhenCrossedTh",
    },
  },
  TcMappingConfig => { #Structure Type: Reg;
    Name => "TcMappingConfig",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "TC Mapping configuration",
    Width => "33", # Excel Formula: =calc_reg_width(E27:E29,F29)
    Type => "Config",
    MapTcOnlyForLbgId => { #Structure Type: RegField;
      Name => "MapTcOnlyForLbgId",
      RegMem => "RegField",
      Description => "Whether to map the TC of elephant flows only for LBG ID flows or all flows (relevant in process all flows mode)
0 - Map TC of elephant flows for all flows
1 - Map TC of elephant flows only for flows with LBG-ID destination",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "b1",
    },
    ElephantTcMapping => { #Structure Type: RegField;
      Name => "ElephantTcMapping",
      RegMem => "RegField",
      Description => "Mapping table for modified TC of elephant flows. The original TC of elephant flows will be mapped according to Modified-TC = 3bit-config[Original-TC]. (8*3 bit entries - Each 3 bit of the field's 24 bits is mapping of one TC)
To disable, use default mapping of Modified-TC = Original-TC",
      Width => "24",
      Position => "24:1", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "b111110101100011010001000",
    },
    SlbTcMapping => { #Structure Type: RegField;
      Name => "SlbTcMapping",
      RegMem => "RegField",
      Description => "Mapping table of the TC sent to FILB in SLB open command. 3b to 1b mapping - 8*1 bit entries",
      Width => "8",
      Position => "32:25", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "b11110000",
    },
  },
  EnabledSvcConfig => { #Structure Type: Reg;
    Name => "EnabledSvcConfig",
    RegMem => "Reg",
    Address => "104", # Excel Formula: =calc_reg_address(C26,A26,G26)
    Description => "SVC Enabling configuration",
    Width => "42", # Excel Formula: =calc_reg_width(E31:E32,F32)
    Type => "Config",
    NumOfEnabledSvc => { #Structure Type: RegField;
      Name => "NumOfEnabledSvc",
      RegMem => "RegField",
      Description => "Total number of enabled SVCs (should match the separately configured SVC FBM memory)
Default is that all 512 SVC were enabled",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d512",
    },
    EnabledSvcLines => { #Structure Type: RegField;
      Name => "EnabledSvcLines",
      RegMem => "RegField",
      Description => "Whether each group of 16 consecutive SVCs has any SVC enabled (should match the separately configured SvcFbm memory)
This is a bitmap where each bit matches a group of 16 consecutive SVCs:
0 - all 16 buffers are inactive
1 - at least one of the 16 buffers is active
e.g. bit 0 matches SVC 0-15, bit 1 matches SVC 16-31, etc.
Default is all 1s i.e. all groups have at least one enabled SVC (including the case where all 512 SVCs are enabled)",
      Width => "32",
      Position => "41:10", # Excel Formula: =calc_position(F31,E32)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hFFFFFFFF",
    },
  },
  EnableConfig => { #Structure Type: Reg;
    Name => "EnableConfig",
    RegMem => "Reg",
    Address => "105", # Excel Formula: =calc_reg_address(C30,A30,G30)
    Description => "Features enable configuration",
    Width => "5", # Excel Formula: =calc_reg_width(E34:E37,F37)
    Type => "Config",
    ProcessAllFlows => { #Structure Type: RegField;
      Name => "ProcessAllFlows",
      RegMem => "RegField",
      Description => "Enable FLLB processing of flows with non-LBG-ID destination (which then can have TC demotion)
Should not be used in modes where flow signature is invalid (CRF fabric slice and FE)
0 - Process only flows with LBG-ID destination
1 - Process all flows",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F33,E34,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
    BypassMode => { #Structure Type: RegField;
      Name => "BypassMode",
      RegMem => "RegField",
      Description => "Whether FLLB is active or bypassed
0 - BYPASS_MODE_PROCESS - All PDs are process, should be used when using LBG-ID forward destination and/or TC Demotion
1 - BYPASS_MODE_BYPASS - FLLB block is bypassed (lower latency and power than process mode)
2 - BYPASS_MODE_BYPASS_AND_PROCESS - Traffic bypasses FLLB block (for lower latency) and also processed for instrumentation internally (i.e. cannot affect packet properties such as TC demotion)",
      Width => "2",
      Position => "2:1", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "BYPASS_MODE_BYPASS_AND_PROCESS - PDs sent to both bypass and pipe, exit FLLB from bypass and only processed for instrumentation and then terminated in pipe",
    },
    SlbEnabled => { #Structure Type: RegField;
      Name => "SlbEnabled",
      RegMem => "RegField",
      Description => "Whether SLB is enabled. When disabled traffic destination is based only on Flowlet Load Balancing or ECMP.
When SLB is disabled SVCs are used for instrumentation
0 - SLB Disabled
1 - SLB Enabled",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
    AllEcmp => { #Structure Type: RegField;
      Name => "AllEcmp",
      RegMem => "RegField",
      Description => "Ignore destination in IFDB and only use ECMP instead
0 - Other LB methods (FLB/SLB) can be used
1 - Use ECMP",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
  },
  ResetTimerConfig => { #Structure Type: Reg;
    Name => "ResetTimerConfig",
    RegMem => "Reg",
    Address => "106", # Excel Formula: =calc_reg_address(C33,A33,G33)
    Description => "Configuration to control whether to reset the New-Flows-Use-ECMP timer that causes new flows to be allocated using ECMP while it is active
Used to prevent Out-Of-Order in cases where the last packet of the flow possibly was sent at a period shorter than flowlet gap, but it was not recorded in the IFDB",
    Width => "5", # Excel Formula: =calc_reg_width(E39:E43,F43)
    Type => "Config",
    ResetTimerOnInsertFail => { #Structure Type: RegField;
      Name => "ResetTimerOnInsertFail",
      RegMem => "RegField",
      Description => "Reset timer when insert to IFDB failed (due to collision in Exact-Match database)",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F38,E39,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    ResetTimerOnFullIflb => { #Structure Type: RegField;
      Name => "ResetTimerOnFullIflb",
      RegMem => "RegField",
      Description => "Reset timer when the IFDB is full (All 4K entries used) when the flow tries to allocate an entry",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F39,E40)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
      DocName => "ResetTimerOnFullIfdb",
    },
    ResetTimerOnPdWhileDeletingEntry => { #Structure Type: RegField;
      Name => "ResetTimerOnPdWhileDeletingEntry",
      RegMem => "RegField",
      Description => "Reset timer when a PD was received while its entry is still being deleted (PD received shortly after its flow aged out of the IFDB)",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F40,E41)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    ResetTimerOnEcmpOnlyPd => { #Structure Type: RegField;
      Name => "ResetTimerOnEcmpOnlyPd",
      RegMem => "RegField",
      Description => "Reset timer when a PD was received with ECMP only (don't track) control code",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F41,E42)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
    ResetTimerOnPdSizeLowerThanTh => { #Structure Type: RegField;
      Name => "ResetTimerOnPdSizeLowerThanTh",
      RegMem => "RegField",
      Description => "Reset timer when a PD was received with lower size than the minimal TH to allocate IFDB entry",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F42,E43)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
  },
  MinPacketConfig => { #Structure Type: Reg;
    Name => "MinPacketConfig",
    RegMem => "Reg",
    Address => "107", # Excel Formula: =calc_reg_address(C38,A38,G38)
    Description => "Threshold configurations for minimal packet size to be ignored",
    Width => "28", # Excel Formula: =calc_reg_width(E45:E46,F46)
    Type => "Config",
    MinPacketSizeToAllocIflbEntry => { #Structure Type: RegField;
      Name => "MinPacketSizeToAllocIflbEntry",
      RegMem => "RegField",
      Description => "Packets smaller than this threshold are not allocated an IFDB entry
Resolution - Bytes",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F44,E45,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      DocName => "MinPacketSizeToAllocIfdbEntry",
    },
    MinPacketSizeToUpdateRate => { #Structure Type: RegField;
      Name => "MinPacketSizeToUpdateRate",
      RegMem => "RegField",
      Description => "Packets smaller than this threshold are not counted for flow rate
Resolution - Bytes",
      Width => "14",
      Position => "27:14", # Excel Formula: =calc_position(F45,E46)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
  },
  RateConfig => { #Structure Type: Reg;
    Name => "RateConfig",
    RegMem => "Reg",
    Address => "108", # Excel Formula: =calc_reg_address(C44,A44,G44)
    Description => "Rate configuration for determining flow as elephant",
    Width => "35", # Excel Formula: =calc_reg_width(E48:E51,F51)
    Type => "Config",
    FlowRateResolution => { #Structure Type: RegField;
      Name => "FlowRateResolution",
      RegMem => "RegField",
      Description => "Resolution for the IFDB bucket field
Resolution is 2^config [byte]
For example:
0 - 2^0=1 byte
8 - 2^8 = 256 byte
15 (max) - 2^15 = 32768 byte  (larger than likely to be used)
Since Bucket field of the IFDB is 16 bit, the maximum bucket size is 2^16 * 2^config (e.g. 16MB Bucket with 2^8=256B resolution)",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h8",
      DocName => "FlowBucketResolution",
    },
    LeakyBucketRate => { #Structure Type: RegField;
      Name => "LeakyBucketRate",
      RegMem => "RegField",
      Description => "The rate in which the bucket (IFDB rate) decreases
Format: 3LSB Mantissa + 2MSB Expontent with base resolution of 1/4 gbps
i.e. 1/4gbps * (3LSB)*2^(2MSB)
Examples:
00010 = 1/4*2*2^0 = 0.5gbps
10101 = 1/4*5*2^2 = 5gbps
11111 = 1/4*7*2^3 = 14gbps",
      Width => "5",
      Position => "8:4", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h5",
      Comments => "The 3LSB are input of a multiplier, 2MSB shift the result",
    },
    ElephantFlowTh => { #Structure Type: RegField;
      Name => "ElephantFlowTh",
      RegMem => "RegField",
      Description => "When elephant trap mode is set to bytes - Flows with higher bucket value than TH are defined as elephant.
Threshold in bytes is with resolution of FlowBucketResolution
e.g. default value of 1024 = 256kB bucket with 256B FlowBucketResolution configuration",
      Width => "16",
      Position => "24:9", # Excel Formula: =calc_position(F49,E50)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h400",
    },
    ElephantFlowPacketsTh => { #Structure Type: RegField;
      Name => "ElephantFlowPacketsTh",
      RegMem => "RegField",
      Description => "When elephant trap mode is set to packets - Flows with higher bucket value (number of packets) than TH are defined as elephant",
      Width => "10",
      Position => "34:25", # Excel Formula: =calc_position(F50,E51)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hF",
    },
  },
  TimeThConfig => { #Structure Type: Reg;
    Name => "TimeThConfig",
    RegMem => "Reg",
    Address => "109", # Excel Formula: =calc_reg_address(C47,A47,G47)
    Description => "Time threshold configurations",
    Width => "22", # Excel Formula: =calc_reg_width(E53:E54,F54)
    Type => "Config",
    FlowletGapTh => { #Structure Type: RegField;
      Name => "FlowletGapTh",
      RegMem => "RegField",
      Description => "Required gap from last packet to start a new flowlet with new destination link (should be larger then network skew in order to avoid receiving the flow's packets out-of-order)
Resolution - Same as LastPacketTimeResolution
e.g. with LastPacketTimeResolution of 5 (2^13ns), configuration of 32 implies gap of 2^18ns =~ 256us",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F52,E53,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h20",
    },
    IflbFullTimeTh => { #Structure Type: RegField;
      Name => "IflbFullTimeTh",
      RegMem => "RegField",
      Description => "Duration after New-Flows-Use-ECMP timer event that ECMP is used for new flows
Resolution - 1024ns (~us)",
      Width => "10",
      Position => "21:12", # Excel Formula: =calc_position(F53,E54)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h20",
      DocName => "NewFlowsUseEcmpTimerTh",
      Comments => "1024ns based on IFLB_FULL_RESOLUTION parameter",
    },
  },
  AgingConfig => { #Structure Type: Reg;
    Name => "AgingConfig",
    RegMem => "Reg",
    Address => "10A", # Excel Formula: =calc_reg_address(C52,A52,G52)
    Description => "Aging configurations",
    Width => "44", # Excel Formula: =calc_reg_width(E56:E60,F60)
    Type => "Config",
    DisableAging => { #Structure Type: RegField;
      Name => "DisableAging",
      RegMem => "RegField",
      Description => "Disables aging - Use to save power when FLLB is not used
0 - Aging active
1 - Aging disabled",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F55,E56,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
    ExpireToggledFlows => { #Structure Type: RegField;
      Name => "ExpireToggledFlows",
      RegMem => "RegField",
      Description => "Whether elephant flows marked with toggled aging TH (received FIN) expire, i.e. change to expired elephant status. When disabled these flows will not expire but only age out of the IFDB completely after crossing the relevant threshold
0 - Toggled TH flows will not expire
1 - Toggled TH flows can expire",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F56,E57)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
    SameEntryMinimalAgingInterval => { #Structure Type: RegField;
      Name => "SameEntryMinimalAgingInterval",
      RegMem => "RegField",
      Description => "Minimal interval between aging cycles of IFDB entry
Since this is minimal configuration, traffic will not be stopped to maintain this interval, and aging cycles will not be issued faster than required for this configuration even when there are bubbles in the traffic
Resolution: 4us (us=1024ns)",
      Width => "15",
      Position => "16:2", # Excel Formula: =calc_position(F57,E58)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d8",
      Comments => "4us interval means always insert aging cycle on bubbles (there are 4906 entries, each one is scanned once in 4096 cycles = 4us)",
    },
    SameEntryMaximalAgingInterval => { #Structure Type: RegField;
      Name => "SameEntryMaximalAgingInterval",
      RegMem => "RegField",
      Description => "Maximal interval between aging cycles of IFDB entry (will force bubbles, i.e. stop traffic, to maintain this configuration)
Resolution: 8us (us=1024ns)",
      Width => "15",
      Position => "31:17", # Excel Formula: =calc_position(F58,E59)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d128",
      Comments => "The resolution is 8us and not 4us because NumOfEntriesToUpdateToEnterBubble = 4094 is assumed to be used, so after each <config> cycles the num_of_entries_to_update will be increased by 1, but bubble still won't be forced.
Only after 4094 cycles without entering aging cycle we will actually force bubble, i.e. twice the time of 4us resolution
If NumOfEntriesToUpdateToEnterBubble field is set to 1, the resolution would be 4us
Note: In order to return to the same entry after 256us, we need to have aging cycle enter the pipe every 256us/4096 = 64 cycles (1.56% of device BW used for aging)",
    },
    NumOfEntriesToUpdateToEnterBubble => { #Structure Type: RegField;
      Name => "NumOfEntriesToUpdateToEnterBubble",
      RegMem => "RegField",
      Description => "Threshold for the number of entries that need update to force entering a bubble
This field was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
      Width => "12",
      Position => "43:32", # Excel Formula: =calc_position(F59,E60)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d4094",
      Comments => "1 entry before overflow (all 1s) so still won't overflow if couldn't enter pipe because CIF created bubble",
    },
  },
  AgingThConfig => { #Structure Type: Reg;
    Name => "AgingThConfig",
    RegMem => "Reg",
    Address => "10B", # Excel Formula: =calc_reg_address(C55,A55,G55)
    Description => "Aging threshold configuration",
    Width => "52", # Excel Formula: =calc_reg_width(E62:E65,F65)
    Type => "Config",
    FlowAgingNotElephantTh => { #Structure Type: RegField;
      Name => "FlowAgingNotElephantTh",
      RegMem => "RegField",
      Description => "Aging duration for non-elephant flows to be deleted from IFDB
Resolution - Same as LastPacketTimeResolution",
      Width => "13",
      Position => "12:0", # Excel Formula: =calc_position(F61,E62,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h100",
    },
    FlowAgingExpiredElephantTh => { #Structure Type: RegField;
      Name => "FlowAgingExpiredElephantTh",
      RegMem => "RegField",
      Description => "Aging duration for expired elephant flows to be deleted from IFDB
Resolution - Same as LastPacketTimeResolution
To avoid IFDB's LastPacketTime wrap-around, 
this TH + SameEntryMaximalAgingInterval (each with its relevant resolution) should be lower than 2^13",
      Width => "13",
      Position => "25:13", # Excel Formula: =calc_position(F62,E63)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1000",
    },
    FlowAgingSlbElephantTh => { #Structure Type: RegField;
      Name => "FlowAgingSlbElephantTh",
      RegMem => "RegField",
      Description => "Aging duration for SLB elephant flows to expire (change to expired elephant status)
Resolution - Same as LastPacketTimeResolution",
      Width => "13",
      Position => "38:26", # Excel Formula: =calc_position(F63,E64)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h100",
    },
    FlowToggleAgingTh => { #Structure Type: RegField;
      Name => "FlowToggleAgingTh",
      RegMem => "RegField",
      Description => "Aging duration for flows marked as TH toggled (received FIN) to be deleted from IFDB
Resolution - Same as LastPacketTimeResolution",
      Width => "13",
      Position => "51:39", # Excel Formula: =calc_position(F64,E65)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
      Comments => "The TH should be at least the latency between FLLB and ICS (and the not_empty message from ICS to FLLB)",
    },
  },
  IflbFbmConfig => { #Structure Type: Reg;
    Name => "IflbFbmConfig",
    RegMem => "Reg",
    Address => "10C", # Excel Formula: =calc_reg_address(C61,A61,G61)
    Description => "IFDB FBM initialization configurations
Each buffer represents one of the 4K flows",
    Width => "83", # Excel Formula: =calc_reg_width(E67:E71,F71)
    Type => "Config",
    DocName => "IfdbFbmConfig",
    FbmInit => { #Structure Type: RegField;
      Name => "FbmInit",
      RegMem => "RegField",
      Description => "Controls initialization of FBM logic after block is already out of reset
To use - write to the register with this field set to 1 and then write again with value 0
During normal operation this value should be set to 0",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F66,E67,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d0",
    },
    FbmWorkingMode => { #Structure Type: RegField;
      Name => "FbmWorkingMode",
      RegMem => "RegField",
      Description => "If set, manual buffers allocation is applied, using configurations FbmTotalBuffers, FbmNotEmptyEntry, and memory IfdbFbm
0 - All buffers are used
1 - Only configured buffers are used",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F67,E68)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d0",
    },
    FbmTotalBuffers => { #Structure Type: RegField;
      Name => "FbmTotalBuffers",
      RegMem => "RegField",
      Description => "If FbmWorkingMode is set, this number should be configured to the total number of buffers used",
      Width => "13",
      Position => "14:2", # Excel Formula: =calc_position(F68,E69)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d4096",
    },
    FbmNotEmptyEntry => { #Structure Type: RegField;
      Name => "FbmNotEmptyEntry",
      RegMem => "RegField",
      Description => "If FbmWorkingMode is set, this field should be configured to indicate which entries in the FBM are not empty
This is a bitmap where each bit represents 64 consecutive buffers (one line in IfdbFbm memory):
0 - all 64 buffers are inactive
1 - at least one of the 64 buffers is active",
      Width => "64",
      Position => "78:15", # Excel Formula: =calc_position(F69,E70)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hffffffffffffffff",
    },
    FbmAlmostEmptyTh => { #Structure Type: RegField;
      Name => "FbmAlmostEmptyTh",
      RegMem => "RegField",
      Description => "Stop allocating buffers when FBM is almost empty.
Should be configured to 0.
This field was used for debugging during the design phase, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
      Width => "4",
      Position => "82:79", # Excel Formula: =calc_position(F70,E71)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d0",
    },
  },
  IbmConfig => { #Structure Type: Reg;
    Name => "IbmConfig",
    RegMem => "Reg",
    Address => "10D", # Excel Formula: =calc_reg_address(C66,A66,G66)
    Description => "In-Bound Mirror commands for Tetration",
    Width => "15", # Excel Formula: =calc_reg_width(E73:E75,F75)
    Type => "Config",
    NewFlowIbmCmd => { #Structure Type: RegField;
      Name => "NewFlowIbmCmd",
      RegMem => "RegField",
      Description => "IBM command to mark new flows
Use default IBM command = 31 to disable",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F72,E73,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1f",
    },
    NewElephantIbmCmd => { #Structure Type: RegField;
      Name => "NewElephantIbmCmd",
      RegMem => "RegField",
      Description => "IBM command to mark new elephant flows
Use default IBM command = 31 to disable",
      Width => "5",
      Position => "9:5", # Excel Formula: =calc_position(F73,E74)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1f",
    },
    FinIbmCmd => { #Structure Type: RegField;
      Name => "FinIbmCmd",
      RegMem => "RegField",
      Description => "IBM command to mark PD of flow that receives FIN
Use default IBM command = 31 to disable",
      Width => "5",
      Position => "14:10", # Excel Formula: =calc_position(F74,E75)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1f",
    },
  },
  CpuRead => { #Structure Type: Reg;
    Name => "CpuRead",
    RegMem => "Reg",
    Address => "10E", # Excel Formula: =calc_reg_address(C72,A72,G72)
    Description => "CPU Read register
Writing to this register will trigger CPU read process",
    Width => "36", # Excel Formula: =calc_reg_width(E77:E77,F77)
    Type => "External",
    UsedBy => "DSN",
    CpuReadFlowSign => { #Structure Type: RegField;
      Name => "CpuReadFlowSign",
      RegMem => "RegField",
      Description => "Flow signature to read",
      Width => "36",
      Position => "35:0", # Excel Formula: =calc_position(F76,E77,TRUE)
      Type => "External",
    },
  },
  CpuReadResultIflb => { #Structure Type: Reg;
    Name => "CpuReadResultIflb",
    RegMem => "Reg",
    Address => "10F", # Excel Formula: =calc_reg_address(C76,A76,G76)
    Description => "CPU Read result from IFDB",
    Width => "99", # Excel Formula: =calc_reg_width(E79:E80,F80)
    Type => "ReadOnly",
    DocName => "CpuReadResultIfdb",
    CpuReadResultIflbEntry => { #Structure Type: RegField;
      Name => "CpuReadResultIflbEntry",
      RegMem => "RegField",
      Description => "IFDB Entry read",
      Width => "87",
      Position => "86:0", # Excel Formula: =calc_position(F78,E79,TRUE)
      Type => "Status",
      UsedBy => "DSN",
      DocName => "CpuReadResultIfdbEntry",
    },
    CpuReadResultIflbPointer => { #Structure Type: RegField;
      Name => "CpuReadResultIflbPointer",
      RegMem => "RegField",
      Description => "Pointer (address) to the IFDB entry in the IFDB Data memory",
      Width => "12",
      Position => "98:87", # Excel Formula: =calc_position(F79,E80)
      Type => "Status",
      UsedBy => "DSN",
      DocName => "CpuReadResultIfldPointer",
    },
  },
  CpuReadResultElephant => { #Structure Type: Reg;
    Name => "CpuReadResultElephant",
    RegMem => "Reg",
    Address => "110", # Excel Formula: =calc_reg_address(C78,A78,G78)
    Description => "CPU Read result from elephant table",
    Width => "81", # Excel Formula: =calc_reg_width(E82:E82,F82)
    Type => "ReadOnly",
    CpuReadResultElephantEntry => { #Structure Type: RegField;
      Name => "CpuReadResultElephantEntry",
      RegMem => "RegField",
      Description => "Elephant table entry read",
      Width => "81",
      Position => "80:0", # Excel Formula: =calc_position(F81,E82,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  CpuReadResultMisc => { #Structure Type: Reg;
    Name => "CpuReadResultMisc",
    RegMem => "Reg",
    Address => "111", # Excel Formula: =calc_reg_address(C81,A81,G81)
    Description => "CPU Read result details",
    Width => "36", # Excel Formula: =calc_reg_width(E84:E86,F86)
    Type => "ReadOnly",
    CpuReadResultReady => { #Structure Type: RegField;
      Name => "CpuReadResultReady",
      RegMem => "RegField",
      Description => "Read result is ready (data in all result regsiters is valid) - bit per IFG (EM)",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F83,E84,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
    CpuReadResultHit => { #Structure Type: RegField;
      Name => "CpuReadResultHit",
      RegMem => "RegField",
      Description => "Flow signature was found in IFDB - bit per IFG (EM)",
      Width => "2",
      Position => "3:2", # Excel Formula: =calc_position(F84,E85)
      Type => "Status",
      UsedBy => "DSN",
    },
    CpuReadResultTime => { #Structure Type: RegField;
      Name => "CpuReadResultTime",
      RegMem => "RegField",
      Description => "Device time at the moment of CPU read",
      Width => "32",
      Position => "35:4", # Excel Formula: =calc_position(F85,E86)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  CpuReadMaskCounterThConfig => { #Structure Type: Reg;
    Name => "CpuReadMaskCounterThConfig",
    RegMem => "Reg",
    Address => "112", # Excel Formula: =calc_reg_address(C83,A83,G83)
    Description => "CPU Read auxiliary configuration",
    Width => "5", # Excel Formula: =calc_reg_width(E88:E88,F88)
    Type => "Config",
    CpuReadMaskCounterTh => { #Structure Type: RegField;
      Name => "CpuReadMaskCounterTh",
      RegMem => "RegField",
      Description => "How long is the CPU Read ready masked after read
This field was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F87,E88,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d22",
      Comments => "Configured to pipe latency",
    },
  },
  BubbleTimerConfig => { #Structure Type: Reg;
    Name => "BubbleTimerConfig",
    RegMem => "Reg",
    Address => "113", # Excel Formula: =calc_reg_address(C87,A87,G87)
    Description => "Bubble threshold times configurations",
    Width => "32", # Excel Formula: =calc_reg_width(E90:E91,F91)
    Type => "Config",
    BubbleTpTh => { #Structure Type: RegField;
      Name => "BubbleTpTh",
      RegMem => "RegField",
      Description => "Threshold time to enter a bubble (stop traffic) in order to process a waiting feedback packet
Resolution: 2cc
Use default configuration of 0xffff to disable",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F89,E90,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hffff",
      DocName => "BubbleFpTh",
      Comments => "Resolution is 2cc since timer is increased once per IFG processing cycle",
    },
    BubbleCpuReadTh => { #Structure Type: RegField;
      Name => "BubbleCpuReadTh",
      RegMem => "RegField",
      Description => "Threshold time to enter a bubble (stop traffic) in order to process a waiting CPU Read command
Resolution: 2cc
Use default configuration of 0xffff to disable",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hffff",
      Comments => "Resolution is 2cc since timer is increased once per IFG processing cycle",
    },
  },
  LinksUpTable => { #Structure Type: Reg;
    Name => "LinksUpTable",
    RegMem => "Reg",
    Address => "114", # Excel Formula: =calc_reg_address(C89,A89,G89)
    Description => "Links up status",
    Width => "36", # Excel Formula: =calc_reg_width(E93:E93,F93)
    Type => "ReadOnly",
    LinksUp => { #Structure Type: RegField;
      Name => "LinksUp",
      RegMem => "RegField",
      Description => "Local Links up status, bit per link, aggregated from FRM updates",
      Width => "36",
      Position => "35:0", # Excel Formula: =calc_position(F92,E93,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  SvcEmptyStatusReg => { #Structure Type: Reg;
    Name => "SvcEmptyStatusReg",
    RegMem => "Reg",
    Address => "115", # Excel Formula: =calc_reg_address(C92,A92,G92)
    Description => "Empty SVC Status",
    Width => "512", # Excel Formula: =calc_reg_width(E95:E95,F95)
    Type => "ReadOnly",
    SvcEmptyStatus => { #Structure Type: RegField;
      Name => "SvcEmptyStatus",
      RegMem => "RegField",
      Description => "Whether each SVC is empty (has no PDs), bit per SVC, according to last indication from ICS",
      Width => "512",
      Position => "511:0", # Excel Formula: =calc_position(F94,E95,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  DebugRegister => { #Structure Type: Reg;
    Name => "DebugRegister",
    RegMem => "Reg",
    Address => "116", # Excel Formula: =calc_reg_address(C94,A94,G94)
    Description => "Counters for debugging",
    Width => "64", # Excel Formula: =calc_reg_width(E97:E100,F100)
    Type => "ReadOnly",
    FlowletPathChangesCounter => { #Structure Type: RegField;
      Name => "FlowletPathChangesCounter",
      RegMem => "RegField",
      Description => "Number of flowlet path changes at flowlet gaps",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F96,E97,TRUE)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AgedElephantFlowsCounter => { #Structure Type: RegField;
      Name => "AgedElephantFlowsCounter",
      RegMem => "RegField",
      Description => "Number of aged elephant flows - flows that return elephant context (SVC)",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F97,E98)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AgedNotSlbFlowsCounter => { #Structure Type: RegField;
      Name => "AgedNotSlbFlowsCounter",
      RegMem => "RegField",
      Description => "Number of aged not-SLB elephant flows (deleted from IFDB)",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F98,E99)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    FeedbackPacketOutputCounter => { #Structure Type: RegField;
      Name => "FeedbackPacketOutputCounter",
      RegMem => "RegField",
      Description => "Number of feedback packets processed",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F99,E100)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  ResetTimerEventRegister => { #Structure Type: Reg;
    Name => "ResetTimerEventRegister",
    RegMem => "Reg",
    Address => "117", # Excel Formula: =calc_reg_address(C96,A96,G96)
    Description => "Indication of events that may reset the New-Flows-Use-ECMP Timer (reset based on ResetTimerConfig)",
    Width => "5", # Excel Formula: =calc_reg_width(E102:E106,F106)
    Type => "ReadOnly",
    InsertFailEvent => { #Structure Type: RegField;
      Name => "InsertFailEvent",
      RegMem => "RegField",
      Description => "Insert to IFDB failed (due to collision in Exact-Match database)",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F101,E102,TRUE)
      Type => "Event",
      UsedBy => "DSN",
    },
    FullIflbEvent => { #Structure Type: RegField;
      Name => "FullIflbEvent",
      RegMem => "RegField",
      Description => "The IFDB was full (All 4K entries used) when a flow tried to allocate an entry",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F102,E103)
      Type => "Event",
      UsedBy => "DSN",
      DocName => "FullIfdbEvent",
    },
    PdWhileDeletingEntryEvent => { #Structure Type: RegField;
      Name => "PdWhileDeletingEntryEvent",
      RegMem => "RegField",
      Description => "A PD was received while its entry is still being deleted (PD received shortly after its flow aged out of the IFDB)",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F103,E104)
      Type => "Event",
      UsedBy => "DSN",
    },
    EcmpOnlyPdEvent => { #Structure Type: RegField;
      Name => "EcmpOnlyPdEvent",
      RegMem => "RegField",
      Description => "A PD was received with ECMP only (don't track) control code",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F104,E105)
      Type => "Event",
      UsedBy => "DSN",
    },
    PdSizeLowerThanThEvent => { #Structure Type: RegField;
      Name => "PdSizeLowerThanThEvent",
      RegMem => "RegField",
      Description => "A PD was received with lower size than the minimal TH to allocate IFDB entry",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F105,E106)
      Type => "Event",
      UsedBy => "DSN",
    },
  },
  DropCounterRegister => { #Structure Type: Reg;
    Name => "DropCounterRegister",
    RegMem => "Reg",
    Address => "118", # Excel Formula: =calc_reg_address(C101,A101,G101)
    Description => "Dropped PD counter register",
    Width => "24", # Excel Formula: =calc_reg_width(E108:E108,F108)
    Type => "ReadOnly",
    DropCounter => { #Structure Type: RegField;
      Name => "DropCounter",
      RegMem => "RegField",
      Description => "Number of PDs dropped (due to no eligible links)",
      Width => "24",
      Position => "23:0", # Excel Formula: =calc_position(F107,E108,TRUE)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  WrongLbgidEvent => { #Structure Type: Reg;
    Name => "WrongLbgidEvent",
    RegMem => "Reg",
    Address => "119", # Excel Formula: =calc_reg_address(C107,A107,G107)
    Description => "Wrong LBG-ID event details",
    Width => "37", # Excel Formula: =calc_reg_width(E110:E111,F111)
    Type => "ReadOnly",
    EventValid => { #Structure Type: RegField;
      Name => "EventValid",
      RegMem => "RegField",
      Description => "Wrong LBG-ID event occurred - collision of two flows with same flow signature but different LBG-ID",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F109,E110,TRUE)
      Type => "Event",
      UsedBy => "DSN",
    },
    EventFlowSign => { #Structure Type: RegField;
      Name => "EventFlowSign",
      RegMem => "RegField",
      Description => "The Flow signature of the two flows that collided",
      Width => "36",
      Position => "36:1", # Excel Formula: =calc_position(F110,E111)
      Type => "Capture",
      UsedBy => "DSN",
    },
  },
  FlowsInstrumentationRegister => { #Structure Type: Reg;
    Name => "FlowsInstrumentationRegister",
    RegMem => "Reg",
    Address => "11A", # Excel Formula: =calc_reg_address(C109,A109,G109)
    Description => "Active flows instrumentation register",
    Width => "44", # Excel Formula: =calc_reg_width(E113:E116,F116)
    Type => "ReadOnly",
    ActiveFlowsCount => { #Structure Type: RegField;
      Name => "ActiveFlowsCount",
      RegMem => "RegField",
      Description => "Current number of active flows in the IFDB",
      Width => "13",
      Position => "12:0", # Excel Formula: =calc_position(F112,E113,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
    ActiveFlowsMax => { #Structure Type: RegField;
      Name => "ActiveFlowsMax",
      RegMem => "RegField",
      Description => "Maximum number of active flows in the IFDB since last read",
      Width => "13",
      Position => "25:13", # Excel Formula: =calc_position(F113,E114)
      Type => "MaxWmk",
      UsedBy => "DSN",
    },
    ElephantFlowsCount => { #Structure Type: RegField;
      Name => "ElephantFlowsCount",
      RegMem => "RegField",
      Description => "Current number of active elephant flows in the IFDB",
      Width => "9",
      Position => "34:26", # Excel Formula: =calc_position(F114,E115)
      Type => "Status",
      UsedBy => "DSN",
    },
    ElephantFlowsMax => { #Structure Type: RegField;
      Name => "ElephantFlowsMax",
      RegMem => "RegField",
      Description => "Maximum number of active elephant flows in the IFDB since last read",
      Width => "9",
      Position => "43:35", # Excel Formula: =calc_position(F115,E116)
      Type => "MaxWmk",
      UsedBy => "DSN",
    },
  },
  ActiveFlowsHistogram => { #Structure Type: Reg;
    Name => "ActiveFlowsHistogram",
    RegMem => "Reg",
    Address => "11B", # Excel Formula: =calc_reg_address(C112,A112,G112)
    Description => "Histogram of the number of active flows in the IFDB",
    Width => "1", # Excel Formula: =calc_reg_width(E118:E118,F118)
    Type => "Histogram",
    AdditionalInfo => "HistType=Static,NumOfBins=8,BinWidth=32,HistThWidth=13,TimeIntervalWidth=12,RateEventWidth=1",
    Comments => "HistThWidth=13b => Max 8k flows (4k per IFG)
TimeIntervalWidth=12 => 4us",
    ActiveFlowsHistogramField => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramField",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F117,E118,TRUE)
      Type => "Histogram",
      UsedBy => "DSN",
    },
  },
  ActiveElephantFlowsHistogram => { #Structure Type: Reg;
    Name => "ActiveElephantFlowsHistogram",
    RegMem => "Reg",
    Address => "11C", # Excel Formula: =calc_reg_address(C117,A117,G117)
    Description => "Histogram of the number of active elephant flows in the IFDB",
    Width => "1", # Excel Formula: =calc_reg_width(E120:E120,F120)
    Type => "Histogram",
    AdditionalInfo => "HistType=Static,NumOfBins=8,BinWidth=32,HistThWidth=9,TimeIntervalWidth=12,RateEventWidth=1",
    Comments => "HistThWidth=9b => Max 512 elephants (Num of SVCs)
TimeIntervalWidth=12 => 4us",
    ActiveElephantFlowsHistogramField => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramField",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F119,E120,TRUE)
      Type => "Histogram",
      UsedBy => "DSN",
    },
  },
  ElephantFlowSizeHistogram => { #Structure Type: Reg;
    Name => "ElephantFlowSizeHistogram",
    RegMem => "Reg",
    Address => "11D", # Excel Formula: =calc_reg_address(C119,A119,G119)
    Description => "Histogram of the byte count for elephant flows
Whenever an elephant flow is aged from the elephant table (deleted from IFDB or change status to expired elephant), the amount of bytes that were accumulated for the flow are registered in the histogram
Resolution from FlowletByteCountResolution",
    Width => "1", # Excel Formula: =calc_reg_width(E122:E122,F122)
    Type => "Histogram",
    AdditionalInfo => "HistType=Event,NumOfBins=8,BinWidth=32,HistThWidth=32,TimeIntervalWidth=1,RateEventWidth=1",
    ElephantFlowSizeHistogramField => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramField",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F121,E122,TRUE)
      Type => "Histogram",
      UsedBy => "DSN",
    },
  },
  ElephantFlowPacketCountHistogram => { #Structure Type: Reg;
    Name => "ElephantFlowPacketCountHistogram",
    RegMem => "Reg",
    Address => "11E", # Excel Formula: =calc_reg_address(C121,A121,G121)
    Description => "Histogram of the packet count for elephant flows
Whenever an elephant flow is aged from the elephant table (deleted from IFDB or change status to expired elephant), the amount of packets that were in the flow are registered in the histogram",
    Width => "1", # Excel Formula: =calc_reg_width(E124:E124,F124)
    Type => "Histogram",
    AdditionalInfo => "HistType=Event,NumOfBins=8,BinWidth=32,HistThWidth=24,TimeIntervalWidth=1,RateEventWidth=1",
    ElephantFlowPacketCountHistogramField => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramField",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F123,E124,TRUE)
      Type => "Histogram",
      UsedBy => "DSN",
    },
  },
  ElephantFlowDurationHistogram => { #Structure Type: Reg;
    Name => "ElephantFlowDurationHistogram",
    RegMem => "Reg",
    Address => "11F", # Excel Formula: =calc_reg_address(C123,A123,G123)
    Description => "Histogram of the elephant flow duration
Whenever an Elephant flow is aged from the elephant table (deleted from IFDB or change status to expired elephant), the amount of time since it was first inserted into the Elephant table (not the IFDB) is recorded.
Resolution from InitTimestampResolution - same as InitTimestamp field of ElephantTable",
    Width => "1", # Excel Formula: =calc_reg_width(E126:E126,F126)
    Type => "Histogram",
    AdditionalInfo => "HistType=Event,NumOfBins=8,BinWidth=32,HistThWidth=24,TimeIntervalWidth=1,RateEventWidth=1",
    ElephantFlowDurationHistogramField => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramField",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F125,E126,TRUE)
      Type => "Histogram",
      UsedBy => "DSN",
    },
  },
  FlowArrivalRateHistogram => { #Structure Type: Reg;
    Name => "FlowArrivalRateHistogram",
    RegMem => "Reg",
    Address => "120", # Excel Formula: =calc_reg_address(C125,A125,G125)
    Description => "Hisogram of the rate of flows entering the IFDB - Counter increased by 1 each time a flow enters the IFDB, with sum sampled once in configured interval",
    Width => "1", # Excel Formula: =calc_reg_width(E128:E128,F128)
    Type => "Histogram",
    AdditionalInfo => "HistType=Rate,NumOfBins=8,BinWidth=32,HistThWidth=15,TimeIntervalWidth=17,RateEventWidth=1",
    FlowArrivalRateHistogramField => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramField",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F127,E128,TRUE)
      Type => "Histogram",
      UsedBy => "DSN",
    },
  },
  FlowletInterArrivalTimeHistogram => { #Structure Type: Reg;
    Name => "FlowletInterArrivalTimeHistogram",
    RegMem => "Reg",
    Address => "121", # Excel Formula: =calc_reg_address(C127,A127,G127)
    Description => "Histogram of the flowlet inter-arrival time - Time difference between arrival of the packet that starts a new flowlet and the last packet of the previous flowlet
Resolution same as IFDB's LastPacketTime field (based on LastPacketTimeResolution)
Includes elephant flows",
    Width => "1", # Excel Formula: =calc_reg_width(E130:E130,F130)
    Type => "Histogram",
    AdditionalInfo => "HistType=Event,NumOfBins=8,BinWidth=32,HistThWidth=13,TimeIntervalWidth=1,RateEventWidth=1",
    FlowletInterArrivalTimeHistogramField => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramField",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F129,E130,TRUE)
      Type => "Histogram",
      UsedBy => "DSN",
    },
  },
  FlowletSizeHistogram => { #Structure Type: Reg;
    Name => "FlowletSizeHistogram",
    RegMem => "Reg",
    Address => "122", # Excel Formula: =calc_reg_address(C129,A129,G129)
    Description => "Histogram of the byte count of flowlets (records size of the previous flowlet each time a new flowlet starts)
Includes elephant flows",
    Width => "1", # Excel Formula: =calc_reg_width(E132:E132,F132)
    Type => "Histogram",
    AdditionalInfo => "HistType=Event,NumOfBins=8,BinWidth=32,HistThWidth=16,TimeIntervalWidth=1,RateEventWidth=1",
    FlowletSizeHistogramField => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramField",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F131,E132,TRUE)
      Type => "Histogram",
      UsedBy => "DSN",
    },
  },
  ElephantPacketSizeHistogram => { #Structure Type: Reg;
    Name => "ElephantPacketSizeHistogram",
    RegMem => "Reg",
    Address => "123", # Excel Formula: =calc_reg_address(C131,A131,G131)
    Description => "Histogram of the packet size of elephant flows (after decreasing NP Header size)",
    Width => "1", # Excel Formula: =calc_reg_width(E134:E134,F134)
    Type => "Histogram",
    AdditionalInfo => "HistType=Event,NumOfBins=8,BinWidth=32,HistThWidth=14,TimeIntervalWidth=1,RateEventWidth=1",
    ElephantPacketSizeHistogramField => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramField",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F133,E134,TRUE)
      Type => "Histogram",
      UsedBy => "DSN",
    },
  },
  StatusRegister => { #Structure Type: Reg;
    Name => "StatusRegister",
    RegMem => "Reg",
    Address => "124", # Excel Formula: =calc_reg_address(C133,A133,G133)
    Description => "Initialization status reigster",
    Width => "1", # Excel Formula: =calc_reg_width(E136:E136,F136)
    Type => "ReadOnly",
    InitDone => { #Structure Type: RegField;
      Name => "InitDone",
      RegMem => "RegField",
      Description => "FLLB initialization is done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F135,E136,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  FllbControlCodeMap => { #Structure Type: Mem;
    Name => "FllbControlCodeMap",
    RegMem => "Mem",
    Address => "100000",
    Description => "Mapping of the 3b FLLB Control code from PD to properties",
    Width => "6", # Excel Formula: =calc_mem_width(E138:E143,M137,F143,-1)
    Type => "Config",
    UsedBy => "DSN",
    MemEntries => "8",
    MemWrapper => "RegArray",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PortErrPropagate=Disabled",
    MemLogicalWidth => "6",
    ForceElephant => { #Structure Type: MemField;
      Name => "ForceElephant",
      RegMem => "MemField",
      Description => "Become elephant regardless of crossing elephant TH",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F137,E138,TRUE)
    },
    DisableElephant => { #Structure Type: MemField;
      Name => "DisableElephant",
      RegMem => "MemField",
      Description => "Do not change to elephant even if crossed elephant TH",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F138,E139)
    },
    DisableSlb => { #Structure Type: MemField;
      Name => "DisableSlb",
      RegMem => "MemField",
      Description => "Do not use SLB even if elephant",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F139,E140)
    },
    EcmpOnly => { #Structure Type: MemField;
      Name => "EcmpOnly",
      RegMem => "MemField",
      Description => "Do not enter IFDB table, select output based on ECMP",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F140,E141)
      Comments => "In commented out code - delete entry if possible (even without aging)",
    },
    InvertCountType => { #Structure Type: MemField;
      Name => "InvertCountType",
      RegMem => "MemField",
      Description => "The flow will be determined as elephant using the opposite Trap-Mode (bytes vs. packets) from the default configured in DefaultElephantTrapMode
0 - Flow will use the Trap-Mode configured in DefaultElephantTrapMode
1 - Flow will use the opposite of the Trap-Mode configured in DefaultElephantTrapMode",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F141,E142)
    },
    ToggleAgingTh => { #Structure Type: MemField;
      Name => "ToggleAgingTh",
      RegMem => "MemField",
      Description => "Used to indicate FIN packet
Change aging threshold to configured one (FlowToggleAgingTh). At the new threshold flow will be deleted from IFDB completely, SLB flows will expire based on ExpireToggledFlows configuration",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F142,E143)
    },
  },
  Link2DspTable => { #Structure Type: Mem;
    Name => "Link2DspTable",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C137,A137,G144,L144)
    Description => "Link-to-DSP mapping table, entry per spine link",
    Width => "13", # Excel Formula: =calc_mem_width(E145:E145,M144,F145,-1)
    Type => "Config",
    UsedBy => "DSN",
    MemEntries => "36",
    MemWrapper => "RegArray",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PortErrPropagate=Disabled",
    MemLogicalWidth => "13",
    LinkMap => { #Structure Type: MemField;
      Name => "LinkMap",
      RegMem => "MemField",
      Description => "DSP for the link",
      Width => "13",
      Position => "12:0", # Excel Formula: =calc_position(F144,E145,TRUE)
    },
  },
  IfSourcePortConfig => { #Structure Type: Mem;
    Name => "IfSourcePortConfig",
    RegMem => "Mem",
    Address => "300000", # Excel Formula: =calc_mem_address(C144,A144,G146,L146)
    Description => "Configuration per source port",
    Width => "4", # Excel Formula: =calc_mem_width(E147:E147,M146,F147,-1)
    Type => "Config",
    UsedBy => "DSN",
    MemEntries => "64",
    MemWrapper => "RegArray",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PortErrPropagate=Disabled",
    MemLogicalWidth => "4",
    NpHeaderSize => { #Structure Type: MemField;
      Name => "NpHeaderSize",
      RegMem => "MemField",
      Description => "Size of NP header data (from the PD's Packet Size)
header size is config*4B",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F146,E147,TRUE)
    },
  },
  SvcFbm => { #Structure Type: Mem;
    Name => "SvcFbm",
    RegMem => "Mem",
    Address => "400000", # Excel Formula: =calc_mem_address(C146,A146,G148,L148)
    Description => "SVC Free buffer manager memory, each entry represents 16 consecutive SVCs (total 32*16 = 512 SVCs)",
    Width => "16", # Excel Formula: =calc_mem_width(E149:E149,M148,F149,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    MemEntries => "32",
    MemWrapper => "1R1W",
    MemProtect => "None",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,FfBased=Enabled,PortErrPropagate=Disabled",
    MemLogicalWidth => "16",
    FbmRow => { #Structure Type: MemField;
      Name => "FbmRow",
      RegMem => "MemField",
      Description => "This is a bitmap where each memory line represents 16 consecutive SVCs activity bits
Initialize to all 1s to enable all SVCs",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F148,E149,TRUE)
    },
  },
  IflbEm0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 7;
    Name => "IflbEm[2]",
    RegMem => "Mem",
    Address => "400000", # Excel Formula: =calc_mem_address(C148,A148,G150,L150)
    Description => "Exact-Match table matching between flow signature (key to the table) and an IFDB data entry",
    Width => "12", # Excel Formula: =calc_mem_width(E151:E151,M150,F151,-1)
    Type => "DocOnly",
    UsedBy => "empd",
    DocName => "IfdbEm[2]",
    MemEntries => "8192", # Excel Formula: =8*1024
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=36,SourceIdWidth=1,NumberOfBanks=8,NumberOfCamEntries=32,QuickInsert=Enabled,BinSize=2,PackArrayToBus=Enabled,VerifierSampleReadBeforeProt=1,VrfWriteActivityFactor=50,VrfReadActivityFactor=50,ValidSampleReadBeforeProt=1,VldWriteActivityFactor=6,VldReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "12",
    Pointer0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 8;
      Name => "Pointer[n]",
      RegMem => "MemField",
      Description => "Pointer (address) to the IFDB entry in the IFDB Data memory",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
  },
  IflbEm1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 7;
    Name => "IflbEm[2]",
    RegMem => "Mem",
    Address => "500000",
    Description => "Exact-Match table matching between flow signature (key to the table) and an IFDB data entry",
    Width => "12", # Excel Formula: =calc_mem_width(E151:E151,M150,F151,-1)
    Type => "DocOnly",
    UsedBy => "empd",
    DocName => "IfdbEm[2]",
    MemEntries => "8192", # Excel Formula: =8*1024
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=36,SourceIdWidth=1,NumberOfBanks=8,NumberOfCamEntries=32,QuickInsert=Enabled,BinSize=2,PackArrayToBus=Enabled,VerifierSampleReadBeforeProt=1,VrfWriteActivityFactor=50,VrfReadActivityFactor=50,ValidSampleReadBeforeProt=1,VldWriteActivityFactor=6,VldReadActivityFactor=100",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "12",
    Pointer1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 8;
      Name => "Pointer[n]",
      RegMem => "MemField",
      Description => "Pointer (address) to the IFDB entry in the IFDB Data memory",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F150,E151,TRUE)
    },
  },
  IflbFbm0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 8;
    Name => "IflbFbm[2]",
    RegMem => "Mem",
    Address => "500000", # Excel Formula: =calc_mem_address(C148,A148,G152,L152)
    Description => "IFDB entries free buffer manager memory, each entry represets 64 consecutive IFDB flow entries (total 64*64 = 4096 entries)",
    Width => "72", # Excel Formula: =calc_mem_width(E153:E153,M152,F153,-1)
    Type => "Dynamic",
    UsedBy => "empd",
    DocName => "IfdbFbm[2]",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,WriteActivityFactor=52,ReadActivityFactor=52,PortErrPropagate=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "64",
    IflbFbmRow0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "IflbFbmRow[n]",
      RegMem => "MemField",
      Description => "This is a bitmap where each memory line represents 64 consecutive IFDB flow entries activity bits
Only initialize if IfdbFbmConfig's FbmWorkingMode is set to active",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F152,E153,TRUE)
      DocName => "IfdbFbmRow[n]",
    },
  },
  IflbFbm1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 8;
    Name => "IflbFbm[2]",
    RegMem => "Mem",
    Address => "600000",
    Description => "IFDB entries free buffer manager memory, each entry represets 64 consecutive IFDB flow entries (total 64*64 = 4096 entries)",
    Width => "72", # Excel Formula: =calc_mem_width(E153:E153,M152,F153,-1)
    Type => "Dynamic",
    UsedBy => "empd",
    DocName => "IfdbFbm[2]",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,WriteActivityFactor=52,ReadActivityFactor=52,PortErrPropagate=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "64",
    IflbFbmRow1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "IflbFbmRow[n]",
      RegMem => "MemField",
      Description => "This is a bitmap where each memory line represents 64 consecutive IFDB flow entries activity bits
Only initialize if IfdbFbmConfig's FbmWorkingMode is set to active",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F152,E153,TRUE)
      DocName => "IfdbFbmRow[n]",
    },
  },
  IflbData0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 9;
    Name => "IflbData[2]",
    RegMem => "Mem",
    Address => "700000", # Excel Formula: =calc_mem_address(C152,A152,G154,L154)
    Description => "IFDB data memory per flow",
    Width => "81", # Excel Formula: =calc_mem_width(E155:E163,M154,F163,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DocName => "IfdbData[2]",
    MemEntries => "4096", # Excel Formula: =4*1024
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=3,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "Total read latency for EMPD (localparam EMPD_LATENCY) should be even (write to IFDB data is 1cc after read result)",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "73",
    EntryValid0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "Whether the entry is valid - represents an active flow",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F154,E155,TRUE)
      Comments => "Needed for Aging which scan the EM data without key",
    },
    LbgId0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "LbgId[n]",
      RegMem => "MemField",
      Description => "LBG-ID of the flow",
      Width => "9",
      Position => "9:1", # Excel Formula: =calc_position(F155,E156)
    },
    ToggleAgingTh0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "ToggleAgingTh[n]",
      RegMem => "MemField",
      Description => "Flow marked with toggled aging TH (received FIN) from PD's control code
0 - Flow did not receive FIN, uses normal aging TH
1 - Flow received FIN, uses toggled aging TH",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F156,E157)
    },
    LastPacketTime0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "LastPacketTime[n]",
      RegMem => "MemField",
      Description => "Timestamp of the last packet received for the flow.
Used to determine the time difference from current packet for the leaky bucket, flowlet gap and crossing aging thresholds
Resolution according to LastPacketTimeResolution",
      Width => "13",
      Position => "23:11", # Excel Formula: =calc_position(F157,E158)
      Comments => "13bit allows remembering 64ms with 8us resolution",
    },
    ElephantStatus0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "ElephantStatus[n]",
      RegMem => "MemField",
      Description => "0 - Not elephant
1 - Expired Elephant - Elephant without SLB-Context
2 - Not-SLB Elephant - Elephant with SLB-Context (elephant table index) for instrumentation without using SLB LB (i.e. when it is disabled)
3 - SLB Elephant - Elephant with SLB-Context and SLB LB",
      Width => "2",
      Position => "25:24", # Excel Formula: =calc_position(F158,E159)
      Comments => "Enum defined in fllb_parameters",
    },
    FabricLink0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "FabricLink[n]",
      RegMem => "MemField",
      Description => "Current flowlet output fabric (spine) link",
      Width => "6",
      Position => "31:26", # Excel Formula: =calc_position(F159,E160)
    },
    SlbVoqContext0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "SlbVoqContext[n]",
      RegMem => "MemField",
      Description => "SLB VOQ Context (and elephant table index, which is used also when not using SLB LB)",
      Width => "9",
      Position => "40:32", # Excel Formula: =calc_position(F160,E161)
    },
    Rate0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 5;
      Name => "Rate[n]",
      RegMem => "MemField",
      Description => "Number of bytes in the bucket, when elephant trap mode is set to bytes - Resolution according to FlowBucketResolution
When elephant trap mode is set to packets - this is the number of packets that arrived",
      Width => "16",
      Position => "56:41", # Excel Formula: =calc_position(F161,E162)
      DocName => "RateBucket[n]",
      Comments => "16bit allows a 16MB bucket with 256B Resolution",
    },
    FlowletByteCount0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "FlowletByteCount[n]",
      RegMem => "MemField",
      Description => "Used for instrumentation - FlowletSizeHistogram
Resolution according to FlowletByteCountResolution",
      Width => "16",
      Position => "72:57", # Excel Formula: =calc_position(F162,E163)
    },
  },
  IflbData1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 9;
    Name => "IflbData[2]",
    RegMem => "Mem",
    Address => "800000",
    Description => "IFDB data memory per flow",
    Width => "81", # Excel Formula: =calc_mem_width(E155:E163,M154,F163,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DocName => "IfdbData[2]",
    MemEntries => "4096", # Excel Formula: =4*1024
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=3,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "Total read latency for EMPD (localparam EMPD_LATENCY) should be even (write to IFDB data is 1cc after read result)",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "73",
    EntryValid1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "EntryValid[n]",
      RegMem => "MemField",
      Description => "Whether the entry is valid - represents an active flow",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F154,E155,TRUE)
      Comments => "Needed for Aging which scan the EM data without key",
    },
    LbgId1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "LbgId[n]",
      RegMem => "MemField",
      Description => "LBG-ID of the flow",
      Width => "9",
      Position => "9:1", # Excel Formula: =calc_position(F155,E156)
    },
    ToggleAgingTh1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "ToggleAgingTh[n]",
      RegMem => "MemField",
      Description => "Flow marked with toggled aging TH (received FIN) from PD's control code
0 - Flow did not receive FIN, uses normal aging TH
1 - Flow received FIN, uses toggled aging TH",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F156,E157)
    },
    LastPacketTime1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "LastPacketTime[n]",
      RegMem => "MemField",
      Description => "Timestamp of the last packet received for the flow.
Used to determine the time difference from current packet for the leaky bucket, flowlet gap and crossing aging thresholds
Resolution according to LastPacketTimeResolution",
      Width => "13",
      Position => "23:11", # Excel Formula: =calc_position(F157,E158)
      Comments => "13bit allows remembering 64ms with 8us resolution",
    },
    ElephantStatus1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "ElephantStatus[n]",
      RegMem => "MemField",
      Description => "0 - Not elephant
1 - Expired Elephant - Elephant without SLB-Context
2 - Not-SLB Elephant - Elephant with SLB-Context (elephant table index) for instrumentation without using SLB LB (i.e. when it is disabled)
3 - SLB Elephant - Elephant with SLB-Context and SLB LB",
      Width => "2",
      Position => "25:24", # Excel Formula: =calc_position(F158,E159)
      Comments => "Enum defined in fllb_parameters",
    },
    FabricLink1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "FabricLink[n]",
      RegMem => "MemField",
      Description => "Current flowlet output fabric (spine) link",
      Width => "6",
      Position => "31:26", # Excel Formula: =calc_position(F159,E160)
    },
    SlbVoqContext1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "SlbVoqContext[n]",
      RegMem => "MemField",
      Description => "SLB VOQ Context (and elephant table index, which is used also when not using SLB LB)",
      Width => "9",
      Position => "40:32", # Excel Formula: =calc_position(F160,E161)
    },
    Rate1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 5;
      Name => "Rate[n]",
      RegMem => "MemField",
      Description => "Number of bytes in the bucket, when elephant trap mode is set to bytes - Resolution according to FlowBucketResolution
When elephant trap mode is set to packets - this is the number of packets that arrived",
      Width => "16",
      Position => "56:41", # Excel Formula: =calc_position(F161,E162)
      DocName => "RateBucket[n]",
      Comments => "16bit allows a 16MB bucket with 256B Resolution",
    },
    FlowletByteCount1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "FlowletByteCount[n]",
      RegMem => "MemField",
      Description => "Used for instrumentation - FlowletSizeHistogram
Resolution according to FlowletByteCountResolution",
      Width => "16",
      Position => "72:57", # Excel Formula: =calc_position(F162,E163)
    },
  },
  IflbDataEmIndex0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 16;
    Name => "IflbDataEmIndex[2]",
    RegMem => "Mem",
    Address => "900000", # Excel Formula: =calc_mem_address(C154,A154,G164,L164)
    Description => "IFDB EM Index memory per flow",
    Width => "20", # Excel Formula: =calc_mem_width(E165:E165,M164,F165,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DocName => "IfdbDataEmIndex[2]",
    MemEntries => "4096", # Excel Formula: =4*1024
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=3,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "Total read latency for EMPD (localparam EMPD_LATENCY) should be even (write to IFDB data is 1cc after read result)",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "14",
    EmIndex0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 8;
      Name => "EmIndex[n]",
      RegMem => "MemField",
      Description => "Index of the flow in the Exact-Match table, used to delete the correct flow when flow is aged out of the IFDB",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F164,E165,TRUE)
    },
  },
  IflbDataEmIndex1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 16;
    Name => "IflbDataEmIndex[2]",
    RegMem => "Mem",
    Address => "A00000",
    Description => "IFDB EM Index memory per flow",
    Width => "20", # Excel Formula: =calc_mem_width(E165:E165,M164,F165,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DocName => "IfdbDataEmIndex[2]",
    MemEntries => "4096", # Excel Formula: =4*1024
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=3,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "Total read latency for EMPD (localparam EMPD_LATENCY) should be even (write to IFDB data is 1cc after read result)",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "14",
    EmIndex1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 8;
      Name => "EmIndex[n]",
      RegMem => "MemField",
      Description => "Index of the flow in the Exact-Match table, used to delete the correct flow when flow is aged out of the IFDB",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F164,E165,TRUE)
    },
  },
  ElephantTable => { #Structure Type: Mem;
    Name => "ElephantTable",
    RegMem => "Mem",
    Address => "B00000", # Excel Formula: =calc_mem_address(C164,A164,G166,L166)
    Description => "Data on elephant flows for instrumentation",
    Width => "89", # Excel Formula: =calc_mem_width(E167:E170,M166,F170,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    MemEntries => "512",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,WriteActivityFactor=100,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuWriteAccess=Disabled",
    MemLogicalWidth => "81",
    Active => { #Structure Type: MemField;
      Name => "Active",
      RegMem => "MemField",
      Description => "Whether the flow is active or aged out",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F166,E167,TRUE)
      Comments => "Only needed for direct read by CPU (note: not initialized to 0)",
    },
    InitTimestamp => { #Structure Type: MemField;
      Name => "InitTimestamp",
      RegMem => "MemField",
      Description => "Timestamp of the time when the flow was allocated the elephant table entry
Used to determine elephant duration for ElephantFlowDurationHistogram
Resolution according to InitTimestampResolution",
      Width => "24",
      Position => "24:1", # Excel Formula: =calc_position(F167,E168)
      Comments => "Max resolution is 2^9*2^7 = 2^16ns so can count up to 2^16*2^24ns = ~1000sec = device_time_width (40b)",
    },
    ByteCount => { #Structure Type: MemField;
      Name => "ByteCount",
      RegMem => "MemField",
      Description => "Byte count of the flow since it was allocate the elephant table entry - Used for ElephantFlowSizeHistogram
Resolution according to FlowletByteCountResolution",
      Width => "32",
      Position => "56:25", # Excel Formula: =calc_position(F168,E169)
      Comments => "This is enough for 10gbps elephant flow with 64B resolution for 3.7 minutes before overflow.", # Excel Formula: =CONCATENATE("This is enough for 10gbps elephant flow with 64B resolution for ", ROUND(2^32*64 / (10*10^9*60/8),1), " minutes before overflow.")
    },
    PacketCount => { #Structure Type: MemField;
      Name => "PacketCount",
      RegMem => "MemField",
      Description => "Packet count of the flow since it was allocate the elephant table entry - Used for ElephantFlowPacketCountHistogram",
      Width => "24",
      Position => "80:57", # Excel Formula: =calc_position(F169,E170)
      Comments => "This is log(256)=8b lower than byte count so they will overflow at the same time assuming an elephant flow packets are at least 256B (overflow after byte count if higher than that). i.e. enough for 10gbps elephant flow of 256B packets with 64B resolution for 3.7 minutes before overflow.", # Excel Formula: =CONCATENATE("This is log(256)=8b lower than byte count so they will overflow at the same time assuming an elephant flow packets are at least 256B (overflow after byte count if higher than that).", " i.e. enough for 10gbps elephant flow of 256B packets with 64B resolution for ", ROUND(256*2^24*64 / (10*10^9*60/8),1), " minutes before overflow.")
    },
  },
  PdFifo => { #Structure Type: Mem;
    Name => "PdFifo",
    RegMem => "Mem",
    Address => "C00000", # Excel Formula: =calc_mem_address(C166,A166,G171,L171)
    Description => "PD FIFO memory",
    Width => "150", # Excel Formula: =calc_mem_width(E172:E172,M171,F172,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    MemEntries => "44",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,WriteActivityFactor=100,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "Num of entries is twice (to recover from backpressure immediately) the block's latency (2cc in RX Counters + 20cc in FLLB pipe => 44) - Memory Read Latency-1 (=-6 because it is used with prefetch) + 6 (extra) = 44",
    MemLogicalWidth => "141",
    Pd => { #Structure Type: MemField;
      Name => "Pd",
      RegMem => "MemField",
      Description => "PD without muxed fields that are only relevant in modes where FLLB is inactive (FE/CRF Fabric slice)",
      Width => "141",
      Position => "140:0", # Excel Formula: =calc_position(F171,E172,TRUE)
      Comments => "Width = fllb2reorder_pd_width_without_muxed_bits + fllb2reorder_max_muxed_bits_pd_width (=lb_key+sch_comp_size + in_mirror_cmd1 + lm_cnt_rx_idx) = 111 + 16 + 7 + 5 + 2",
    },
  },
  LbgTable => { #Structure Type: Mem;
    Name => "LbgTable",
    RegMem => "Mem",
    Address => "D00000", # Excel Formula: =calc_mem_address(C171,A171,G173,L173)
    Description => "Properties per LBG-ID, entry selected based on each flow's LBG-ID",
    Width => "45", # Excel Formula: =calc_mem_width(E174:E176,M173,F176,-1)
    Type => "Config",
    UsedBy => "DSN",
    MemEntries => "512",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=0,ReadActivityFactor=100,PortErrPropagate=Disabled",
    Comments => "Latency must match LbgFarEndLinksUp Table",
    MemLogicalWidth => "38",
    EligibleLinksBitmap => { #Structure Type: MemField;
      Name => "EligibleLinksBitmap",
      RegMem => "MemField",
      Description => "Bitmap of eligible spine links to select from for the LBG-ID, for ECMP/flowlet LB. Each bit represents a link.
0 - Link is not eligible
1 - Link is eligible",
      Width => "36",
      Position => "35:0", # Excel Formula: =calc_position(F173,E174,TRUE)
    },
    FlbEnable => { #Structure Type: MemField;
      Name => "FlbEnable",
      RegMem => "MemField",
      Description => "Enable Flowlet LB",
      Width => "1",
      Position => "36", # Excel Formula: =calc_position(F174,E175)
    },
    SlbEnable => { #Structure Type: MemField;
      Name => "SlbEnable",
      RegMem => "MemField",
      Description => "Enable SLB LB",
      Width => "1",
      Position => "37", # Excel Formula: =calc_position(F175,E176)
    },
  },
  LbgFarEndLinksUpTable => { #Structure Type: Mem;
    Name => "LbgFarEndLinksUpTable",
    RegMem => "Mem",
    Address => "E00000", # Excel Formula: =calc_mem_address(C173,A173,G177,L177)
    Description => "Far-End Links up table, entry per LBG-ID selected based on each flow's LBG-ID",
    Width => "43", # Excel Formula: =calc_mem_width(E178:E178,M177,F178,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    MemEntries => "512",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,DisableSameAddressErr=Enabled,WriteActivityFactor=1,ReadActivityFactor=100,PortErrPropagate=Disabled",
    Comments => "Latency must match LBG Table",
    MemLogicalWidth => "36",
    FarEndLinksUpBitmap => { #Structure Type: MemField;
      Name => "FarEndLinksUpBitmap",
      RegMem => "MemField",
      Description => "Far-End Links Up Bitmap, as indicated by FRM, when in overlay environment. Each bit represents a link.
0 - Corresponding far-end link is down
1 - Corresponding far-end link is up
Used when configured to in EcmpMaskFarFailedLinks or FlowletMaskFarFailedLinks",
      Width => "36",
      Position => "35:0", # Excel Formula: =calc_position(F177,E178,TRUE)
    },
  },
  IflbEmVerifier0 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "F00000", # Excel Formula: =calc_mem_address(C177,A177,G179,L179)
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "0",
    MemLogicalWidth => "92",
    IflbEmVerifier0Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier1 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1000000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "1",
    MemLogicalWidth => "92",
    IflbEmVerifier1Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier2 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1100000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "2",
    MemLogicalWidth => "92",
    IflbEmVerifier2Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier3 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1200000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "3",
    MemLogicalWidth => "92",
    IflbEmVerifier3Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier4 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1300000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "4",
    MemLogicalWidth => "92",
    IflbEmVerifier4Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier5 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1400000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "5",
    MemLogicalWidth => "92",
    IflbEmVerifier5Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier6 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1500000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "6",
    MemLogicalWidth => "92",
    IflbEmVerifier6Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier7 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1600000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "7",
    MemLogicalWidth => "92",
    IflbEmVerifier7Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier8 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1700000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "8",
    MemLogicalWidth => "92",
    IflbEmVerifier8Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier9 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1800000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "9",
    MemLogicalWidth => "92",
    IflbEmVerifier9Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier10 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1900000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "10",
    MemLogicalWidth => "92",
    IflbEmVerifier10Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier11 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1A00000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "11",
    MemLogicalWidth => "92",
    IflbEmVerifier11Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier12 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1B00000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "12",
    MemLogicalWidth => "92",
    IflbEmVerifier12Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier13 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1C00000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "13",
    MemLogicalWidth => "92",
    IflbEmVerifier13Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier14 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1D00000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "14",
    MemLogicalWidth => "92",
    IflbEmVerifier14Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmVerifier15 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmVerifier[16]",
    RegMem => "Mem",
    Address => "1E00000",
    Width => "92", # Excel Formula: =calc_mem_width(E180:E180,M179,F180,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "15",
    MemLogicalWidth => "92",
    IflbEmVerifier15Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 15;
      Name => "IflbEmVerifier[n]Data",
      RegMem => "MemField",
      Width => "92",
      Position => "91:0", # Excel Formula: =calc_position(F179,E180,TRUE)
    },
  },
  IflbEmValid0 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "1F00000", # Excel Formula: =calc_mem_address(C179,A179,G181,L181)
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "0",
    MemLogicalWidth => "2",
    IflbEmValid0Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid1 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2000000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "1",
    MemLogicalWidth => "2",
    IflbEmValid1Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid2 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2100000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "2",
    MemLogicalWidth => "2",
    IflbEmValid2Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid3 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2200000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "3",
    MemLogicalWidth => "2",
    IflbEmValid3Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid4 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2300000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "4",
    MemLogicalWidth => "2",
    IflbEmValid4Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid5 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2400000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "5",
    MemLogicalWidth => "2",
    IflbEmValid5Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid6 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2500000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "6",
    MemLogicalWidth => "2",
    IflbEmValid6Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid7 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2600000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "7",
    MemLogicalWidth => "2",
    IflbEmValid7Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid8 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2700000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "8",
    MemLogicalWidth => "2",
    IflbEmValid8Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid9 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2800000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "9",
    MemLogicalWidth => "2",
    IflbEmValid9Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid10 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2900000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "10",
    MemLogicalWidth => "2",
    IflbEmValid10Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid11 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2A00000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "11",
    MemLogicalWidth => "2",
    IflbEmValid11Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid12 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2B00000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "12",
    MemLogicalWidth => "2",
    IflbEmValid12Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid13 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2C00000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "13",
    MemLogicalWidth => "2",
    IflbEmValid13Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid14 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2D00000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "14",
    MemLogicalWidth => "2",
    IflbEmValid14Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmValid15 => { #Structure Type: Mem; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 12; Skip Register;
    Name => "IflbEmValid[16]",
    RegMem => "Mem",
    Address => "2E00000",
    Width => "2", # Excel Formula: =calc_mem_width(E182:E182,M181,F182,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=6,ReadActivityFactor=100,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "15",
    MemLogicalWidth => "2",
    IflbEmValid15Data => { #Structure Type: MemField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 12;
      Name => "IflbEmValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F181,E182,TRUE)
    },
  },
  IflbEmPerBankReg0 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "125", # Excel Formula: =calc_reg_address(C135,A135,G135)
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "0",
    IflbEmActiveBanks0 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey0 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg1 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "126",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "1",
    IflbEmActiveBanks1 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey1 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg2 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "127",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "2",
    IflbEmActiveBanks2 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey2 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg3 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "128",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "3",
    IflbEmActiveBanks3 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey3 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg4 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "129",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "4",
    IflbEmActiveBanks4 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey4 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc4 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg5 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "12A",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "5",
    IflbEmActiveBanks5 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey5 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc5 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg6 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "12B",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "6",
    IflbEmActiveBanks6 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey6 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc6 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg7 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "12C",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "7",
    IflbEmActiveBanks7 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey7 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc7 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg8 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "12D",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "8",
    IflbEmActiveBanks8 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey8 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc8 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg9 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "12E",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "9",
    IflbEmActiveBanks9 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey9 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc9 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg10 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "12F",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "10",
    IflbEmActiveBanks10 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey10 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc10 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg11 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "130",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "11",
    IflbEmActiveBanks11 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey11 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc11 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg12 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "131",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "12",
    IflbEmActiveBanks12 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey12 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc12 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg13 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "132",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "13",
    IflbEmActiveBanks13 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey13 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc13 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg14 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "133",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "14",
    IflbEmActiveBanks14 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey14 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc14 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerBankReg15 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 17; Skip Register;
    Name => "IflbEmPerBankReg[16]",
    RegMem => "Reg",
    Address => "134",
    Width => "74", # Excel Formula: =calc_reg_width(E184:E186,F186)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "15",
    IflbEmActiveBanks15 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 18;
      Name => "IflbEmActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F183,E184,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "d1",
    },
    IflbEmHashKey15 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 14;
      Name => "IflbEmHashKey[n]",
      RegMem => "RegField",
      Width => "72",
      Position => "72:1", # Excel Formula: =calc_position(F184,E185)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmUsePrimitiveCrc15 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 22;
      Name => "IflbEmUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "73", # Excel Formula: =calc_position(F185,E186)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerEmReg0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmPerEmReg[2]",
    RegMem => "Reg",
    Address => "135", # Excel Formula: =calc_reg_address(C183,A183,G183)
    Width => "33", # Excel Formula: =calc_reg_width(E188:E190,F190)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    IflbEmKeyWidth0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "IflbEmKeyWidth[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F187,E188,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "IflbEmAutoBubbleReq[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F188,E189)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 25;
      Name => "IflbEmBubbleReqThreshold[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F189,E190)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmPerEmReg1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 15; Skip Register;
    Name => "IflbEmPerEmReg[2]",
    RegMem => "Reg",
    Address => "136",
    Width => "33", # Excel Formula: =calc_reg_width(E188:E190,F190)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    IflbEmKeyWidth1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "IflbEmKeyWidth[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F187,E188,TRUE)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmAutoBubbleReq1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "IflbEmAutoBubbleReq[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F188,E189)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
    IflbEmBubbleReqThreshold1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 25;
      Name => "IflbEmBubbleReqThreshold[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F189,E190)
      Type => "Config",
      UsedBy => "IflbEm",
      DefaultValue => "h0",
    },
  },
  IflbEmCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 18; Skip Register;
    Name => "IflbEmCamWmMaxReg[2]",
    RegMem => "Reg",
    Address => "137", # Excel Formula: =calc_reg_address(C187,A187,G187)
    Width => "8", # Excel Formula: =calc_reg_width(E192:E192,F192)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    IflbEmCamWmMax0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "IflbEmCamWmMax[n]",
      RegMem => "RegField",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F191,E192,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmCamWmMaxReg1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 18; Skip Register;
    Name => "IflbEmCamWmMaxReg[2]",
    RegMem => "Reg",
    Address => "138",
    Width => "8", # Excel Formula: =calc_reg_width(E192:E192,F192)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    IflbEmCamWmMax1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "IflbEmCamWmMax[n]",
      RegMem => "RegField",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F191,E192,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg0 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "139", # Excel Formula: =calc_reg_address(C191,A191,G191)
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "0",
    IflbEmBankWriteCntr0 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg1 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "13A",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "1",
    IflbEmBankWriteCntr1 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg2 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "13B",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "2",
    IflbEmBankWriteCntr2 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg3 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "13C",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "3",
    IflbEmBankWriteCntr3 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg4 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "13D",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "4",
    IflbEmBankWriteCntr4 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 4; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg5 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "13E",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "5",
    IflbEmBankWriteCntr5 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 5; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg6 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "13F",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "6",
    IflbEmBankWriteCntr6 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 6; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg7 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "140",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "7",
    IflbEmBankWriteCntr7 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 7; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg8 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "141",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "8",
    IflbEmBankWriteCntr8 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 8; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg9 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "142",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "9",
    IflbEmBankWriteCntr9 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 9; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg10 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "143",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "10",
    IflbEmBankWriteCntr10 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 10; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg11 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "144",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "11",
    IflbEmBankWriteCntr11 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 11; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg12 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "145",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "12",
    IflbEmBankWriteCntr12 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 12; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg13 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "146",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "13",
    IflbEmBankWriteCntr13 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 13; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg14 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "147",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "14",
    IflbEmBankWriteCntr14 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 14; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmBankWriteCntrReg15 => { #Structure Type: Reg; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 23; Skip Register;
    Name => "IflbEmBankWriteCntrReg[16]",
    RegMem => "Reg",
    Address => "148",
    Width => "64", # Excel Formula: =calc_reg_width(E194:E194,F194)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "16",
    ArrayIndex => "15",
    IflbEmBankWriteCntr15 => { #Structure Type: RegField; ArrayLength: 16; ArrayIndex: 15; ArrayLocationInName: 20;
      Name => "IflbEmBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F193,E194,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  IflbEmCam0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 10; Skip Register;
    Name => "IflbEmCam[2]",
    RegMem => "Mem",
    Address => "2F00000", # Excel Formula: =calc_mem_address(C181,A181,G195,L195)
    Width => "49", # Excel Formula: =calc_mem_width(E196:E198,"None",F198,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "32",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=12,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "49",
    IflbEmCam0_key => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "IflbEmCam[n]_key",
      RegMem => "MemField",
      Width => "36",
      Position => "35:0", # Excel Formula: =calc_position(F195,E196,TRUE)
    },
    IflbEmCam0_payload => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "IflbEmCam[n]_payload",
      RegMem => "MemField",
      Width => "12",
      Position => "47:36", # Excel Formula: =calc_position(F196,E197)
    },
    IflbEmCam0_valid => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "IflbEmCam[n]_valid",
      RegMem => "MemField",
      Width => "1",
      Position => "48", # Excel Formula: =calc_position(F197,E198)
    },
  },
  IflbEmCam1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 10; Skip Register;
    Name => "IflbEmCam[2]",
    RegMem => "Mem",
    Address => "3000000",
    Width => "49", # Excel Formula: =calc_mem_width(E196:E198,"None",F198,-1)
    Type => "Dynamic",
    UsedBy => "IflbEm",
    MemEntries => "32",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=12,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    Comments => "EM Skip Reg",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "49",
    IflbEmCam1_key => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "IflbEmCam[n]_key",
      RegMem => "MemField",
      Width => "36",
      Position => "35:0", # Excel Formula: =calc_position(F195,E196,TRUE)
    },
    IflbEmCam1_payload => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "IflbEmCam[n]_payload",
      RegMem => "MemField",
      Width => "12",
      Position => "47:36", # Excel Formula: =calc_position(F196,E197)
    },
    IflbEmCam1_valid => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "IflbEmCam[n]_valid",
      RegMem => "MemField",
      Width => "1",
      Position => "48", # Excel Formula: =calc_position(F197,E198)
    },
  },
  ActiveFlowsHistogramCfg => { #Structure Type: Reg; Skip Register;
    Name => "ActiveFlowsHistogramCfg",
    RegMem => "Reg",
    Address => "149", # Excel Formula: =calc_reg_address(C193,A193,G193)
    Width => "103", # Excel Formula: =calc_reg_width(E200:E207,F207)
    Type => "Config",
    Comments => "EM Skip Reg",
    ActiveFlowsHistogramTh0 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramTh0",
      RegMem => "RegField",
      Width => "13",
      Position => "12:0", # Excel Formula: =calc_position(F199,E200,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveFlowsHistogramTh1 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramTh1",
      RegMem => "RegField",
      Width => "13",
      Position => "25:13", # Excel Formula: =calc_position(F200,E201)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveFlowsHistogramTh2 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramTh2",
      RegMem => "RegField",
      Width => "13",
      Position => "38:26", # Excel Formula: =calc_position(F201,E202)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveFlowsHistogramTh3 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramTh3",
      RegMem => "RegField",
      Width => "13",
      Position => "51:39", # Excel Formula: =calc_position(F202,E203)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveFlowsHistogramTh4 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramTh4",
      RegMem => "RegField",
      Width => "13",
      Position => "64:52", # Excel Formula: =calc_position(F203,E204)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveFlowsHistogramTh5 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramTh5",
      RegMem => "RegField",
      Width => "13",
      Position => "77:65", # Excel Formula: =calc_position(F204,E205)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveFlowsHistogramTh6 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramTh6",
      RegMem => "RegField",
      Width => "13",
      Position => "90:78", # Excel Formula: =calc_position(F205,E206)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveFlowsHistogramTimeInterval => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramTimeInterval",
      RegMem => "RegField",
      Width => "12",
      Position => "102:91", # Excel Formula: =calc_position(F206,E207)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  ActiveFlowsHistogramStatus => { #Structure Type: Reg; Skip Register;
    Name => "ActiveFlowsHistogramStatus",
    RegMem => "Reg",
    Address => "14A", # Excel Formula: =calc_reg_address(C199,A199,G199)
    Width => "264", # Excel Formula: =calc_reg_width(E209:E224,F224)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    ActiveFlowsHistogramValue0 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramValue0",
      RegMem => "RegField",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F208,E209,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramOverflow0 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramOverflow0",
      RegMem => "RegField",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F209,E210)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramValue1 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramValue1",
      RegMem => "RegField",
      Width => "32",
      Position => "64:33", # Excel Formula: =calc_position(F210,E211)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramOverflow1 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramOverflow1",
      RegMem => "RegField",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F211,E212)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramValue2 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramValue2",
      RegMem => "RegField",
      Width => "32",
      Position => "97:66", # Excel Formula: =calc_position(F212,E213)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramOverflow2 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramOverflow2",
      RegMem => "RegField",
      Width => "1",
      Position => "98", # Excel Formula: =calc_position(F213,E214)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramValue3 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramValue3",
      RegMem => "RegField",
      Width => "32",
      Position => "130:99", # Excel Formula: =calc_position(F214,E215)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramOverflow3 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramOverflow3",
      RegMem => "RegField",
      Width => "1",
      Position => "131", # Excel Formula: =calc_position(F215,E216)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramValue4 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramValue4",
      RegMem => "RegField",
      Width => "32",
      Position => "163:132", # Excel Formula: =calc_position(F216,E217)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramOverflow4 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramOverflow4",
      RegMem => "RegField",
      Width => "1",
      Position => "164", # Excel Formula: =calc_position(F217,E218)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramValue5 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramValue5",
      RegMem => "RegField",
      Width => "32",
      Position => "196:165", # Excel Formula: =calc_position(F218,E219)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramOverflow5 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramOverflow5",
      RegMem => "RegField",
      Width => "1",
      Position => "197", # Excel Formula: =calc_position(F219,E220)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramValue6 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramValue6",
      RegMem => "RegField",
      Width => "32",
      Position => "229:198", # Excel Formula: =calc_position(F220,E221)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramOverflow6 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramOverflow6",
      RegMem => "RegField",
      Width => "1",
      Position => "230", # Excel Formula: =calc_position(F221,E222)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramValue7 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramValue7",
      RegMem => "RegField",
      Width => "32",
      Position => "262:231", # Excel Formula: =calc_position(F222,E223)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveFlowsHistogramOverflow7 => { #Structure Type: RegField;
      Name => "ActiveFlowsHistogramOverflow7",
      RegMem => "RegField",
      Width => "1",
      Position => "263", # Excel Formula: =calc_position(F223,E224)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  ActiveElephantFlowsHistogramCfg => { #Structure Type: Reg; Skip Register;
    Name => "ActiveElephantFlowsHistogramCfg",
    RegMem => "Reg",
    Address => "14B", # Excel Formula: =calc_reg_address(C208,A208,G208)
    Width => "75", # Excel Formula: =calc_reg_width(E226:E233,F233)
    Type => "Config",
    Comments => "EM Skip Reg",
    ActiveElephantFlowsHistogramTh0 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramTh0",
      RegMem => "RegField",
      Width => "9",
      Position => "8:0", # Excel Formula: =calc_position(F225,E226,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveElephantFlowsHistogramTh1 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramTh1",
      RegMem => "RegField",
      Width => "9",
      Position => "17:9", # Excel Formula: =calc_position(F226,E227)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveElephantFlowsHistogramTh2 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramTh2",
      RegMem => "RegField",
      Width => "9",
      Position => "26:18", # Excel Formula: =calc_position(F227,E228)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveElephantFlowsHistogramTh3 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramTh3",
      RegMem => "RegField",
      Width => "9",
      Position => "35:27", # Excel Formula: =calc_position(F228,E229)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveElephantFlowsHistogramTh4 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramTh4",
      RegMem => "RegField",
      Width => "9",
      Position => "44:36", # Excel Formula: =calc_position(F229,E230)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveElephantFlowsHistogramTh5 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramTh5",
      RegMem => "RegField",
      Width => "9",
      Position => "53:45", # Excel Formula: =calc_position(F230,E231)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveElephantFlowsHistogramTh6 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramTh6",
      RegMem => "RegField",
      Width => "9",
      Position => "62:54", # Excel Formula: =calc_position(F231,E232)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ActiveElephantFlowsHistogramTimeInterval => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramTimeInterval",
      RegMem => "RegField",
      Width => "12",
      Position => "74:63", # Excel Formula: =calc_position(F232,E233)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  ActiveElephantFlowsHistogramStatus => { #Structure Type: Reg; Skip Register;
    Name => "ActiveElephantFlowsHistogramStatus",
    RegMem => "Reg",
    Address => "14C", # Excel Formula: =calc_reg_address(C225,A225,G225)
    Width => "264", # Excel Formula: =calc_reg_width(E235:E250,F250)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    ActiveElephantFlowsHistogramValue0 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramValue0",
      RegMem => "RegField",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F234,E235,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramOverflow0 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramOverflow0",
      RegMem => "RegField",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F235,E236)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramValue1 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramValue1",
      RegMem => "RegField",
      Width => "32",
      Position => "64:33", # Excel Formula: =calc_position(F236,E237)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramOverflow1 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramOverflow1",
      RegMem => "RegField",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F237,E238)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramValue2 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramValue2",
      RegMem => "RegField",
      Width => "32",
      Position => "97:66", # Excel Formula: =calc_position(F238,E239)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramOverflow2 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramOverflow2",
      RegMem => "RegField",
      Width => "1",
      Position => "98", # Excel Formula: =calc_position(F239,E240)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramValue3 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramValue3",
      RegMem => "RegField",
      Width => "32",
      Position => "130:99", # Excel Formula: =calc_position(F240,E241)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramOverflow3 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramOverflow3",
      RegMem => "RegField",
      Width => "1",
      Position => "131", # Excel Formula: =calc_position(F241,E242)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramValue4 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramValue4",
      RegMem => "RegField",
      Width => "32",
      Position => "163:132", # Excel Formula: =calc_position(F242,E243)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramOverflow4 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramOverflow4",
      RegMem => "RegField",
      Width => "1",
      Position => "164", # Excel Formula: =calc_position(F243,E244)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramValue5 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramValue5",
      RegMem => "RegField",
      Width => "32",
      Position => "196:165", # Excel Formula: =calc_position(F244,E245)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramOverflow5 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramOverflow5",
      RegMem => "RegField",
      Width => "1",
      Position => "197", # Excel Formula: =calc_position(F245,E246)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramValue6 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramValue6",
      RegMem => "RegField",
      Width => "32",
      Position => "229:198", # Excel Formula: =calc_position(F246,E247)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramOverflow6 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramOverflow6",
      RegMem => "RegField",
      Width => "1",
      Position => "230", # Excel Formula: =calc_position(F247,E248)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramValue7 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramValue7",
      RegMem => "RegField",
      Width => "32",
      Position => "262:231", # Excel Formula: =calc_position(F248,E249)
      Type => "Status",
      UsedBy => "CIF",
    },
    ActiveElephantFlowsHistogramOverflow7 => { #Structure Type: RegField;
      Name => "ActiveElephantFlowsHistogramOverflow7",
      RegMem => "RegField",
      Width => "1",
      Position => "263", # Excel Formula: =calc_position(F249,E250)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  ElephantFlowSizeHistogramCfg => { #Structure Type: Reg; Skip Register;
    Name => "ElephantFlowSizeHistogramCfg",
    RegMem => "Reg",
    Address => "14D", # Excel Formula: =calc_reg_address(C234,A234,G234)
    Width => "224", # Excel Formula: =calc_reg_width(E252:E258,F258)
    Type => "Config",
    Comments => "EM Skip Reg",
    ElephantFlowSizeHistogramTh0 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramTh0",
      RegMem => "RegField",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F251,E252,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowSizeHistogramTh1 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramTh1",
      RegMem => "RegField",
      Width => "32",
      Position => "63:32", # Excel Formula: =calc_position(F252,E253)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowSizeHistogramTh2 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramTh2",
      RegMem => "RegField",
      Width => "32",
      Position => "95:64", # Excel Formula: =calc_position(F253,E254)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowSizeHistogramTh3 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramTh3",
      RegMem => "RegField",
      Width => "32",
      Position => "127:96", # Excel Formula: =calc_position(F254,E255)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowSizeHistogramTh4 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramTh4",
      RegMem => "RegField",
      Width => "32",
      Position => "159:128", # Excel Formula: =calc_position(F255,E256)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowSizeHistogramTh5 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramTh5",
      RegMem => "RegField",
      Width => "32",
      Position => "191:160", # Excel Formula: =calc_position(F256,E257)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowSizeHistogramTh6 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramTh6",
      RegMem => "RegField",
      Width => "32",
      Position => "223:192", # Excel Formula: =calc_position(F257,E258)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  ElephantFlowSizeHistogramStatus => { #Structure Type: Reg; Skip Register;
    Name => "ElephantFlowSizeHistogramStatus",
    RegMem => "Reg",
    Address => "14E", # Excel Formula: =calc_reg_address(C251,A251,G251)
    Width => "264", # Excel Formula: =calc_reg_width(E260:E275,F275)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    ElephantFlowSizeHistogramValue0 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramValue0",
      RegMem => "RegField",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F259,E260,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramOverflow0 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramOverflow0",
      RegMem => "RegField",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F260,E261)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramValue1 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramValue1",
      RegMem => "RegField",
      Width => "32",
      Position => "64:33", # Excel Formula: =calc_position(F261,E262)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramOverflow1 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramOverflow1",
      RegMem => "RegField",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F262,E263)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramValue2 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramValue2",
      RegMem => "RegField",
      Width => "32",
      Position => "97:66", # Excel Formula: =calc_position(F263,E264)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramOverflow2 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramOverflow2",
      RegMem => "RegField",
      Width => "1",
      Position => "98", # Excel Formula: =calc_position(F264,E265)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramValue3 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramValue3",
      RegMem => "RegField",
      Width => "32",
      Position => "130:99", # Excel Formula: =calc_position(F265,E266)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramOverflow3 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramOverflow3",
      RegMem => "RegField",
      Width => "1",
      Position => "131", # Excel Formula: =calc_position(F266,E267)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramValue4 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramValue4",
      RegMem => "RegField",
      Width => "32",
      Position => "163:132", # Excel Formula: =calc_position(F267,E268)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramOverflow4 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramOverflow4",
      RegMem => "RegField",
      Width => "1",
      Position => "164", # Excel Formula: =calc_position(F268,E269)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramValue5 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramValue5",
      RegMem => "RegField",
      Width => "32",
      Position => "196:165", # Excel Formula: =calc_position(F269,E270)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramOverflow5 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramOverflow5",
      RegMem => "RegField",
      Width => "1",
      Position => "197", # Excel Formula: =calc_position(F270,E271)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramValue6 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramValue6",
      RegMem => "RegField",
      Width => "32",
      Position => "229:198", # Excel Formula: =calc_position(F271,E272)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramOverflow6 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramOverflow6",
      RegMem => "RegField",
      Width => "1",
      Position => "230", # Excel Formula: =calc_position(F272,E273)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramValue7 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramValue7",
      RegMem => "RegField",
      Width => "32",
      Position => "262:231", # Excel Formula: =calc_position(F273,E274)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowSizeHistogramOverflow7 => { #Structure Type: RegField;
      Name => "ElephantFlowSizeHistogramOverflow7",
      RegMem => "RegField",
      Width => "1",
      Position => "263", # Excel Formula: =calc_position(F274,E275)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  ElephantFlowPacketCountHistogramCfg => { #Structure Type: Reg; Skip Register;
    Name => "ElephantFlowPacketCountHistogramCfg",
    RegMem => "Reg",
    Address => "14F", # Excel Formula: =calc_reg_address(C259,A259,G259)
    Width => "168", # Excel Formula: =calc_reg_width(E277:E283,F283)
    Type => "Config",
    Comments => "EM Skip Reg",
    ElephantFlowPacketCountHistogramTh0 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramTh0",
      RegMem => "RegField",
      Width => "24",
      Position => "23:0", # Excel Formula: =calc_position(F276,E277,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowPacketCountHistogramTh1 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramTh1",
      RegMem => "RegField",
      Width => "24",
      Position => "47:24", # Excel Formula: =calc_position(F277,E278)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowPacketCountHistogramTh2 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramTh2",
      RegMem => "RegField",
      Width => "24",
      Position => "71:48", # Excel Formula: =calc_position(F278,E279)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowPacketCountHistogramTh3 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramTh3",
      RegMem => "RegField",
      Width => "24",
      Position => "95:72", # Excel Formula: =calc_position(F279,E280)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowPacketCountHistogramTh4 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramTh4",
      RegMem => "RegField",
      Width => "24",
      Position => "119:96", # Excel Formula: =calc_position(F280,E281)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowPacketCountHistogramTh5 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramTh5",
      RegMem => "RegField",
      Width => "24",
      Position => "143:120", # Excel Formula: =calc_position(F281,E282)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowPacketCountHistogramTh6 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramTh6",
      RegMem => "RegField",
      Width => "24",
      Position => "167:144", # Excel Formula: =calc_position(F282,E283)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  ElephantFlowPacketCountHistogramStatus => { #Structure Type: Reg; Skip Register;
    Name => "ElephantFlowPacketCountHistogramStatus",
    RegMem => "Reg",
    Address => "150", # Excel Formula: =calc_reg_address(C276,A276,G276)
    Width => "264", # Excel Formula: =calc_reg_width(E285:E300,F300)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    ElephantFlowPacketCountHistogramValue0 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramValue0",
      RegMem => "RegField",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F284,E285,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramOverflow0 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramOverflow0",
      RegMem => "RegField",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F285,E286)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramValue1 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramValue1",
      RegMem => "RegField",
      Width => "32",
      Position => "64:33", # Excel Formula: =calc_position(F286,E287)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramOverflow1 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramOverflow1",
      RegMem => "RegField",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F287,E288)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramValue2 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramValue2",
      RegMem => "RegField",
      Width => "32",
      Position => "97:66", # Excel Formula: =calc_position(F288,E289)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramOverflow2 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramOverflow2",
      RegMem => "RegField",
      Width => "1",
      Position => "98", # Excel Formula: =calc_position(F289,E290)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramValue3 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramValue3",
      RegMem => "RegField",
      Width => "32",
      Position => "130:99", # Excel Formula: =calc_position(F290,E291)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramOverflow3 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramOverflow3",
      RegMem => "RegField",
      Width => "1",
      Position => "131", # Excel Formula: =calc_position(F291,E292)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramValue4 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramValue4",
      RegMem => "RegField",
      Width => "32",
      Position => "163:132", # Excel Formula: =calc_position(F292,E293)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramOverflow4 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramOverflow4",
      RegMem => "RegField",
      Width => "1",
      Position => "164", # Excel Formula: =calc_position(F293,E294)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramValue5 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramValue5",
      RegMem => "RegField",
      Width => "32",
      Position => "196:165", # Excel Formula: =calc_position(F294,E295)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramOverflow5 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramOverflow5",
      RegMem => "RegField",
      Width => "1",
      Position => "197", # Excel Formula: =calc_position(F295,E296)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramValue6 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramValue6",
      RegMem => "RegField",
      Width => "32",
      Position => "229:198", # Excel Formula: =calc_position(F296,E297)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramOverflow6 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramOverflow6",
      RegMem => "RegField",
      Width => "1",
      Position => "230", # Excel Formula: =calc_position(F297,E298)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramValue7 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramValue7",
      RegMem => "RegField",
      Width => "32",
      Position => "262:231", # Excel Formula: =calc_position(F298,E299)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowPacketCountHistogramOverflow7 => { #Structure Type: RegField;
      Name => "ElephantFlowPacketCountHistogramOverflow7",
      RegMem => "RegField",
      Width => "1",
      Position => "263", # Excel Formula: =calc_position(F299,E300)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  ElephantFlowDurationHistogramCfg => { #Structure Type: Reg; Skip Register;
    Name => "ElephantFlowDurationHistogramCfg",
    RegMem => "Reg",
    Address => "151", # Excel Formula: =calc_reg_address(C284,A284,G284)
    Width => "168", # Excel Formula: =calc_reg_width(E302:E308,F308)
    Type => "Config",
    Comments => "EM Skip Reg",
    ElephantFlowDurationHistogramTh0 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramTh0",
      RegMem => "RegField",
      Width => "24",
      Position => "23:0", # Excel Formula: =calc_position(F301,E302,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowDurationHistogramTh1 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramTh1",
      RegMem => "RegField",
      Width => "24",
      Position => "47:24", # Excel Formula: =calc_position(F302,E303)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowDurationHistogramTh2 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramTh2",
      RegMem => "RegField",
      Width => "24",
      Position => "71:48", # Excel Formula: =calc_position(F303,E304)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowDurationHistogramTh3 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramTh3",
      RegMem => "RegField",
      Width => "24",
      Position => "95:72", # Excel Formula: =calc_position(F304,E305)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowDurationHistogramTh4 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramTh4",
      RegMem => "RegField",
      Width => "24",
      Position => "119:96", # Excel Formula: =calc_position(F305,E306)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowDurationHistogramTh5 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramTh5",
      RegMem => "RegField",
      Width => "24",
      Position => "143:120", # Excel Formula: =calc_position(F306,E307)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantFlowDurationHistogramTh6 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramTh6",
      RegMem => "RegField",
      Width => "24",
      Position => "167:144", # Excel Formula: =calc_position(F307,E308)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  ElephantFlowDurationHistogramStatus => { #Structure Type: Reg; Skip Register;
    Name => "ElephantFlowDurationHistogramStatus",
    RegMem => "Reg",
    Address => "152", # Excel Formula: =calc_reg_address(C301,A301,G301)
    Width => "264", # Excel Formula: =calc_reg_width(E310:E325,F325)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    ElephantFlowDurationHistogramValue0 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramValue0",
      RegMem => "RegField",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F309,E310,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramOverflow0 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramOverflow0",
      RegMem => "RegField",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F310,E311)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramValue1 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramValue1",
      RegMem => "RegField",
      Width => "32",
      Position => "64:33", # Excel Formula: =calc_position(F311,E312)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramOverflow1 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramOverflow1",
      RegMem => "RegField",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F312,E313)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramValue2 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramValue2",
      RegMem => "RegField",
      Width => "32",
      Position => "97:66", # Excel Formula: =calc_position(F313,E314)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramOverflow2 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramOverflow2",
      RegMem => "RegField",
      Width => "1",
      Position => "98", # Excel Formula: =calc_position(F314,E315)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramValue3 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramValue3",
      RegMem => "RegField",
      Width => "32",
      Position => "130:99", # Excel Formula: =calc_position(F315,E316)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramOverflow3 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramOverflow3",
      RegMem => "RegField",
      Width => "1",
      Position => "131", # Excel Formula: =calc_position(F316,E317)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramValue4 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramValue4",
      RegMem => "RegField",
      Width => "32",
      Position => "163:132", # Excel Formula: =calc_position(F317,E318)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramOverflow4 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramOverflow4",
      RegMem => "RegField",
      Width => "1",
      Position => "164", # Excel Formula: =calc_position(F318,E319)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramValue5 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramValue5",
      RegMem => "RegField",
      Width => "32",
      Position => "196:165", # Excel Formula: =calc_position(F319,E320)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramOverflow5 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramOverflow5",
      RegMem => "RegField",
      Width => "1",
      Position => "197", # Excel Formula: =calc_position(F320,E321)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramValue6 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramValue6",
      RegMem => "RegField",
      Width => "32",
      Position => "229:198", # Excel Formula: =calc_position(F321,E322)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramOverflow6 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramOverflow6",
      RegMem => "RegField",
      Width => "1",
      Position => "230", # Excel Formula: =calc_position(F322,E323)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramValue7 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramValue7",
      RegMem => "RegField",
      Width => "32",
      Position => "262:231", # Excel Formula: =calc_position(F323,E324)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantFlowDurationHistogramOverflow7 => { #Structure Type: RegField;
      Name => "ElephantFlowDurationHistogramOverflow7",
      RegMem => "RegField",
      Width => "1",
      Position => "263", # Excel Formula: =calc_position(F324,E325)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  FlowArrivalRateHistogramCfg => { #Structure Type: Reg; Skip Register;
    Name => "FlowArrivalRateHistogramCfg",
    RegMem => "Reg",
    Address => "153", # Excel Formula: =calc_reg_address(C309,A309,G309)
    Width => "122", # Excel Formula: =calc_reg_width(E327:E334,F334)
    Type => "Config",
    Comments => "EM Skip Reg",
    FlowArrivalRateHistogramTh0 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramTh0",
      RegMem => "RegField",
      Width => "15",
      Position => "14:0", # Excel Formula: =calc_position(F326,E327,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowArrivalRateHistogramTh1 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramTh1",
      RegMem => "RegField",
      Width => "15",
      Position => "29:15", # Excel Formula: =calc_position(F327,E328)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowArrivalRateHistogramTh2 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramTh2",
      RegMem => "RegField",
      Width => "15",
      Position => "44:30", # Excel Formula: =calc_position(F328,E329)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowArrivalRateHistogramTh3 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramTh3",
      RegMem => "RegField",
      Width => "15",
      Position => "59:45", # Excel Formula: =calc_position(F329,E330)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowArrivalRateHistogramTh4 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramTh4",
      RegMem => "RegField",
      Width => "15",
      Position => "74:60", # Excel Formula: =calc_position(F330,E331)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowArrivalRateHistogramTh5 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramTh5",
      RegMem => "RegField",
      Width => "15",
      Position => "89:75", # Excel Formula: =calc_position(F331,E332)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowArrivalRateHistogramTh6 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramTh6",
      RegMem => "RegField",
      Width => "15",
      Position => "104:90", # Excel Formula: =calc_position(F332,E333)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowArrivalRateHistogramTimeInterval => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramTimeInterval",
      RegMem => "RegField",
      Width => "17",
      Position => "121:105", # Excel Formula: =calc_position(F333,E334)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  FlowArrivalRateHistogramStatus => { #Structure Type: Reg; Skip Register;
    Name => "FlowArrivalRateHistogramStatus",
    RegMem => "Reg",
    Address => "154", # Excel Formula: =calc_reg_address(C326,A326,G326)
    Width => "264", # Excel Formula: =calc_reg_width(E336:E351,F351)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    FlowArrivalRateHistogramValue0 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramValue0",
      RegMem => "RegField",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F335,E336,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramOverflow0 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramOverflow0",
      RegMem => "RegField",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F336,E337)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramValue1 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramValue1",
      RegMem => "RegField",
      Width => "32",
      Position => "64:33", # Excel Formula: =calc_position(F337,E338)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramOverflow1 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramOverflow1",
      RegMem => "RegField",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F338,E339)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramValue2 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramValue2",
      RegMem => "RegField",
      Width => "32",
      Position => "97:66", # Excel Formula: =calc_position(F339,E340)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramOverflow2 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramOverflow2",
      RegMem => "RegField",
      Width => "1",
      Position => "98", # Excel Formula: =calc_position(F340,E341)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramValue3 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramValue3",
      RegMem => "RegField",
      Width => "32",
      Position => "130:99", # Excel Formula: =calc_position(F341,E342)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramOverflow3 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramOverflow3",
      RegMem => "RegField",
      Width => "1",
      Position => "131", # Excel Formula: =calc_position(F342,E343)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramValue4 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramValue4",
      RegMem => "RegField",
      Width => "32",
      Position => "163:132", # Excel Formula: =calc_position(F343,E344)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramOverflow4 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramOverflow4",
      RegMem => "RegField",
      Width => "1",
      Position => "164", # Excel Formula: =calc_position(F344,E345)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramValue5 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramValue5",
      RegMem => "RegField",
      Width => "32",
      Position => "196:165", # Excel Formula: =calc_position(F345,E346)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramOverflow5 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramOverflow5",
      RegMem => "RegField",
      Width => "1",
      Position => "197", # Excel Formula: =calc_position(F346,E347)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramValue6 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramValue6",
      RegMem => "RegField",
      Width => "32",
      Position => "229:198", # Excel Formula: =calc_position(F347,E348)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramOverflow6 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramOverflow6",
      RegMem => "RegField",
      Width => "1",
      Position => "230", # Excel Formula: =calc_position(F348,E349)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramValue7 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramValue7",
      RegMem => "RegField",
      Width => "32",
      Position => "262:231", # Excel Formula: =calc_position(F349,E350)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowArrivalRateHistogramOverflow7 => { #Structure Type: RegField;
      Name => "FlowArrivalRateHistogramOverflow7",
      RegMem => "RegField",
      Width => "1",
      Position => "263", # Excel Formula: =calc_position(F350,E351)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  FlowletInterArrivalTimeHistogramCfg => { #Structure Type: Reg; Skip Register;
    Name => "FlowletInterArrivalTimeHistogramCfg",
    RegMem => "Reg",
    Address => "155", # Excel Formula: =calc_reg_address(C335,A335,G335)
    Width => "91", # Excel Formula: =calc_reg_width(E353:E359,F359)
    Type => "Config",
    Comments => "EM Skip Reg",
    FlowletInterArrivalTimeHistogramTh0 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramTh0",
      RegMem => "RegField",
      Width => "13",
      Position => "12:0", # Excel Formula: =calc_position(F352,E353,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletInterArrivalTimeHistogramTh1 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramTh1",
      RegMem => "RegField",
      Width => "13",
      Position => "25:13", # Excel Formula: =calc_position(F353,E354)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletInterArrivalTimeHistogramTh2 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramTh2",
      RegMem => "RegField",
      Width => "13",
      Position => "38:26", # Excel Formula: =calc_position(F354,E355)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletInterArrivalTimeHistogramTh3 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramTh3",
      RegMem => "RegField",
      Width => "13",
      Position => "51:39", # Excel Formula: =calc_position(F355,E356)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletInterArrivalTimeHistogramTh4 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramTh4",
      RegMem => "RegField",
      Width => "13",
      Position => "64:52", # Excel Formula: =calc_position(F356,E357)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletInterArrivalTimeHistogramTh5 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramTh5",
      RegMem => "RegField",
      Width => "13",
      Position => "77:65", # Excel Formula: =calc_position(F357,E358)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletInterArrivalTimeHistogramTh6 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramTh6",
      RegMem => "RegField",
      Width => "13",
      Position => "90:78", # Excel Formula: =calc_position(F358,E359)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  FlowletInterArrivalTimeHistogramStatus => { #Structure Type: Reg; Skip Register;
    Name => "FlowletInterArrivalTimeHistogramStatus",
    RegMem => "Reg",
    Address => "156", # Excel Formula: =calc_reg_address(C352,A352,G352)
    Width => "264", # Excel Formula: =calc_reg_width(E361:E376,F376)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    FlowletInterArrivalTimeHistogramValue0 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramValue0",
      RegMem => "RegField",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F360,E361,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramOverflow0 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramOverflow0",
      RegMem => "RegField",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F361,E362)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramValue1 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramValue1",
      RegMem => "RegField",
      Width => "32",
      Position => "64:33", # Excel Formula: =calc_position(F362,E363)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramOverflow1 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramOverflow1",
      RegMem => "RegField",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F363,E364)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramValue2 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramValue2",
      RegMem => "RegField",
      Width => "32",
      Position => "97:66", # Excel Formula: =calc_position(F364,E365)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramOverflow2 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramOverflow2",
      RegMem => "RegField",
      Width => "1",
      Position => "98", # Excel Formula: =calc_position(F365,E366)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramValue3 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramValue3",
      RegMem => "RegField",
      Width => "32",
      Position => "130:99", # Excel Formula: =calc_position(F366,E367)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramOverflow3 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramOverflow3",
      RegMem => "RegField",
      Width => "1",
      Position => "131", # Excel Formula: =calc_position(F367,E368)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramValue4 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramValue4",
      RegMem => "RegField",
      Width => "32",
      Position => "163:132", # Excel Formula: =calc_position(F368,E369)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramOverflow4 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramOverflow4",
      RegMem => "RegField",
      Width => "1",
      Position => "164", # Excel Formula: =calc_position(F369,E370)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramValue5 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramValue5",
      RegMem => "RegField",
      Width => "32",
      Position => "196:165", # Excel Formula: =calc_position(F370,E371)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramOverflow5 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramOverflow5",
      RegMem => "RegField",
      Width => "1",
      Position => "197", # Excel Formula: =calc_position(F371,E372)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramValue6 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramValue6",
      RegMem => "RegField",
      Width => "32",
      Position => "229:198", # Excel Formula: =calc_position(F372,E373)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramOverflow6 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramOverflow6",
      RegMem => "RegField",
      Width => "1",
      Position => "230", # Excel Formula: =calc_position(F373,E374)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramValue7 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramValue7",
      RegMem => "RegField",
      Width => "32",
      Position => "262:231", # Excel Formula: =calc_position(F374,E375)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletInterArrivalTimeHistogramOverflow7 => { #Structure Type: RegField;
      Name => "FlowletInterArrivalTimeHistogramOverflow7",
      RegMem => "RegField",
      Width => "1",
      Position => "263", # Excel Formula: =calc_position(F375,E376)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  FlowletSizeHistogramCfg => { #Structure Type: Reg; Skip Register;
    Name => "FlowletSizeHistogramCfg",
    RegMem => "Reg",
    Address => "157", # Excel Formula: =calc_reg_address(C360,A360,G360)
    Width => "112", # Excel Formula: =calc_reg_width(E378:E384,F384)
    Type => "Config",
    Comments => "EM Skip Reg",
    FlowletSizeHistogramTh0 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramTh0",
      RegMem => "RegField",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F377,E378,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletSizeHistogramTh1 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramTh1",
      RegMem => "RegField",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F378,E379)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletSizeHistogramTh2 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramTh2",
      RegMem => "RegField",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F379,E380)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletSizeHistogramTh3 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramTh3",
      RegMem => "RegField",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F380,E381)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletSizeHistogramTh4 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramTh4",
      RegMem => "RegField",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F381,E382)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletSizeHistogramTh5 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramTh5",
      RegMem => "RegField",
      Width => "16",
      Position => "95:80", # Excel Formula: =calc_position(F382,E383)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    FlowletSizeHistogramTh6 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramTh6",
      RegMem => "RegField",
      Width => "16",
      Position => "111:96", # Excel Formula: =calc_position(F383,E384)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  FlowletSizeHistogramStatus => { #Structure Type: Reg; Skip Register;
    Name => "FlowletSizeHistogramStatus",
    RegMem => "Reg",
    Address => "158", # Excel Formula: =calc_reg_address(C377,A377,G377)
    Width => "264", # Excel Formula: =calc_reg_width(E386:E401,F401)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    FlowletSizeHistogramValue0 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramValue0",
      RegMem => "RegField",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F385,E386,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramOverflow0 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramOverflow0",
      RegMem => "RegField",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F386,E387)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramValue1 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramValue1",
      RegMem => "RegField",
      Width => "32",
      Position => "64:33", # Excel Formula: =calc_position(F387,E388)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramOverflow1 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramOverflow1",
      RegMem => "RegField",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F388,E389)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramValue2 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramValue2",
      RegMem => "RegField",
      Width => "32",
      Position => "97:66", # Excel Formula: =calc_position(F389,E390)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramOverflow2 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramOverflow2",
      RegMem => "RegField",
      Width => "1",
      Position => "98", # Excel Formula: =calc_position(F390,E391)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramValue3 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramValue3",
      RegMem => "RegField",
      Width => "32",
      Position => "130:99", # Excel Formula: =calc_position(F391,E392)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramOverflow3 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramOverflow3",
      RegMem => "RegField",
      Width => "1",
      Position => "131", # Excel Formula: =calc_position(F392,E393)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramValue4 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramValue4",
      RegMem => "RegField",
      Width => "32",
      Position => "163:132", # Excel Formula: =calc_position(F393,E394)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramOverflow4 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramOverflow4",
      RegMem => "RegField",
      Width => "1",
      Position => "164", # Excel Formula: =calc_position(F394,E395)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramValue5 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramValue5",
      RegMem => "RegField",
      Width => "32",
      Position => "196:165", # Excel Formula: =calc_position(F395,E396)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramOverflow5 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramOverflow5",
      RegMem => "RegField",
      Width => "1",
      Position => "197", # Excel Formula: =calc_position(F396,E397)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramValue6 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramValue6",
      RegMem => "RegField",
      Width => "32",
      Position => "229:198", # Excel Formula: =calc_position(F397,E398)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramOverflow6 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramOverflow6",
      RegMem => "RegField",
      Width => "1",
      Position => "230", # Excel Formula: =calc_position(F398,E399)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramValue7 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramValue7",
      RegMem => "RegField",
      Width => "32",
      Position => "262:231", # Excel Formula: =calc_position(F399,E400)
      Type => "Status",
      UsedBy => "CIF",
    },
    FlowletSizeHistogramOverflow7 => { #Structure Type: RegField;
      Name => "FlowletSizeHistogramOverflow7",
      RegMem => "RegField",
      Width => "1",
      Position => "263", # Excel Formula: =calc_position(F400,E401)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
  ElephantPacketSizeHistogramCfg => { #Structure Type: Reg; Skip Register;
    Name => "ElephantPacketSizeHistogramCfg",
    RegMem => "Reg",
    Address => "159", # Excel Formula: =calc_reg_address(C385,A385,G385)
    Width => "98", # Excel Formula: =calc_reg_width(E403:E409,F409)
    Type => "Config",
    Comments => "EM Skip Reg",
    ElephantPacketSizeHistogramTh0 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramTh0",
      RegMem => "RegField",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F402,E403,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantPacketSizeHistogramTh1 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramTh1",
      RegMem => "RegField",
      Width => "14",
      Position => "27:14", # Excel Formula: =calc_position(F403,E404)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantPacketSizeHistogramTh2 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramTh2",
      RegMem => "RegField",
      Width => "14",
      Position => "41:28", # Excel Formula: =calc_position(F404,E405)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantPacketSizeHistogramTh3 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramTh3",
      RegMem => "RegField",
      Width => "14",
      Position => "55:42", # Excel Formula: =calc_position(F405,E406)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantPacketSizeHistogramTh4 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramTh4",
      RegMem => "RegField",
      Width => "14",
      Position => "69:56", # Excel Formula: =calc_position(F406,E407)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantPacketSizeHistogramTh5 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramTh5",
      RegMem => "RegField",
      Width => "14",
      Position => "83:70", # Excel Formula: =calc_position(F407,E408)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
    ElephantPacketSizeHistogramTh6 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramTh6",
      RegMem => "RegField",
      Width => "14",
      Position => "97:84", # Excel Formula: =calc_position(F408,E409)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d0",
    },
  },
  ElephantPacketSizeHistogramStatus => { #Structure Type: Reg; Skip Register;
    Name => "ElephantPacketSizeHistogramStatus",
    RegMem => "Reg",
    Address => "15A", # Excel Formula: =calc_reg_address(C402,A402,G402)
    Width => "264", # Excel Formula: =calc_reg_width(E411:E426,F426)
    Type => "ReadOnly",
    AdditionalInfo => "MirrorReadAccess",
    Comments => "EM Skip Reg",
    ElephantPacketSizeHistogramValue0 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramValue0",
      RegMem => "RegField",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F410,E411,TRUE)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramOverflow0 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramOverflow0",
      RegMem => "RegField",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F411,E412)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramValue1 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramValue1",
      RegMem => "RegField",
      Width => "32",
      Position => "64:33", # Excel Formula: =calc_position(F412,E413)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramOverflow1 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramOverflow1",
      RegMem => "RegField",
      Width => "1",
      Position => "65", # Excel Formula: =calc_position(F413,E414)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramValue2 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramValue2",
      RegMem => "RegField",
      Width => "32",
      Position => "97:66", # Excel Formula: =calc_position(F414,E415)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramOverflow2 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramOverflow2",
      RegMem => "RegField",
      Width => "1",
      Position => "98", # Excel Formula: =calc_position(F415,E416)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramValue3 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramValue3",
      RegMem => "RegField",
      Width => "32",
      Position => "130:99", # Excel Formula: =calc_position(F416,E417)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramOverflow3 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramOverflow3",
      RegMem => "RegField",
      Width => "1",
      Position => "131", # Excel Formula: =calc_position(F417,E418)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramValue4 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramValue4",
      RegMem => "RegField",
      Width => "32",
      Position => "163:132", # Excel Formula: =calc_position(F418,E419)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramOverflow4 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramOverflow4",
      RegMem => "RegField",
      Width => "1",
      Position => "164", # Excel Formula: =calc_position(F419,E420)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramValue5 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramValue5",
      RegMem => "RegField",
      Width => "32",
      Position => "196:165", # Excel Formula: =calc_position(F420,E421)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramOverflow5 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramOverflow5",
      RegMem => "RegField",
      Width => "1",
      Position => "197", # Excel Formula: =calc_position(F421,E422)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramValue6 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramValue6",
      RegMem => "RegField",
      Width => "32",
      Position => "229:198", # Excel Formula: =calc_position(F422,E423)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramOverflow6 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramOverflow6",
      RegMem => "RegField",
      Width => "1",
      Position => "230", # Excel Formula: =calc_position(F423,E424)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramValue7 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramValue7",
      RegMem => "RegField",
      Width => "32",
      Position => "262:231", # Excel Formula: =calc_position(F424,E425)
      Type => "Status",
      UsedBy => "CIF",
    },
    ElephantPacketSizeHistogramOverflow7 => { #Structure Type: RegField;
      Name => "ElephantPacketSizeHistogramOverflow7",
      RegMem => "RegField",
      Width => "1",
      Position => "263", # Excel Formula: =calc_position(F425,E426)
      Type => "Status",
      UsedBy => "CIF",
    },
  },
};
