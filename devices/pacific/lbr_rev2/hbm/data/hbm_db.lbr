$block{hbm} = {
  Defines_db => "Z:\\design\\mmu\\verilog\\mmu_defines.v",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "2",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    GeneralInterruptRegisterSummary => { #Structure Type: RegField;
      Name => "GeneralInterruptRegisterSummary",
      RegMem => "RegField",
      Description => "When this bit is set, GeneralInterruptRegister has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks Ecc_1bErrInterrupt",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks Ecc_2bErrInterrupt",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks ParityErrInterrupt",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "24",
    Type => "Config",
    pc0_async_fifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "24",
    Type => "Config",
    pc0_async_fifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc0_async_fifo7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc0_async_fifo7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    pc1_async_fifo7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "pc1_async_fifo7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    cntrl_async_fifo7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "cntrl_async_fifo7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "24",
    Type => "Config",
    pc0_async_fifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "24",
    Type => "Config",
    pc0_async_fifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc0_async_fifo7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc0_async_fifo7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    pc1_async_fifo7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "pc1_async_fifo7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "22",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    cntrl_async_fifo7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "cntrl_async_fifo7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "23",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "24",
    Type => "ReadOnly",
    pc0_async_fifo0ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo1ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo2ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo3ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo4ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo5ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo6ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    pc0_async_fifo7ErrInt => { #Structure Type: RegField;
      Name => "pc0_async_fifo7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo0ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo1ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "9",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo2ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "10",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo3ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "11",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo4ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "12",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo5ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "13",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo6ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "14",
      Type => "Status",
      UsedBy => "SER",
    },
    pc1_async_fifo7ErrInt => { #Structure Type: RegField;
      Name => "pc1_async_fifo7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "15",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo0ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "16",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo1ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "17",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo2ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "18",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo3ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "19",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo4ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "20",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo5ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "21",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo6ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "22",
      Type => "Status",
      UsedBy => "SER",
    },
    cntrl_async_fifo7ErrInt => { #Structure Type: RegField;
      Name => "cntrl_async_fifo7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "23",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "8",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "6",
      Position => "5:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "7:6",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "6",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "5",
      Position => "4:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  MbistPassStatus => { #Structure Type: Reg; Skip Register;
    Name => "MbistPassStatus",
    RegMem => "Reg",
    Address => "39",
    Description => "MBIST pass status",
    Width => "48",
    Type => "ReadOnly",
    BistDonePassOut => { #Structure Type: RegField;
      Name => "BistDonePassOut",
      RegMem => "RegField",
      Description => "When this bit is set, MBIST passed",
      Width => "48",
      Position => "47:0",
      Type => "Status",
      UsedBy => "MEM",
    },
  },
  MbistFailStatus => { #Structure Type: Reg; Skip Register;
    Name => "MbistFailStatus",
    RegMem => "Reg",
    Address => "3A",
    Description => "MBIST fail status",
    Width => "48",
    Type => "ReadOnly",
    BistDoneFailOut => { #Structure Type: RegField;
      Name => "BistDoneFailOut",
      RegMem => "RegField",
      Description => "When this bit is set, MBIST failed",
      Width => "48",
      Position => "47:0",
      Type => "Status",
      UsedBy => "MEM",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
      DefaultValue => "b0",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "3", # Excel Formula: =calc_reg_width(E25:E27,F27)
    Type => "Config",
    CoreBistRprMode => { #Structure Type: RegField;
      Name => "CoreBistRprMode",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistRun => { #Structure Type: RegField;
      Name => "CoreBistRun",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistPtrnFill => { #Structure Type: RegField;
      Name => "CoreBistPtrnFill",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E29:E29,F29)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F28,E29,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C28,A28,G28)
    Description => "Power Down Configuration for the block",
    Width => "128", # Excel Formula: =calc_reg_width(E31:E31,F31)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C30,A30,G30)
    Width => "39", # Excel Formula: =calc_reg_width(E33:E37,F37)
    Type => "Config",
    PmroExecute => { #Structure Type: RegField;
      Name => "PmroExecute",
      RegMem => "RegField",
      Description => "0->1: execute pmro command.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroCmd => { #Structure Type: RegField;
      Name => "PmroCmd",
      RegMem => "RegField",
      Description => "Pmro command to execute:
0: reset.
1: write.
2: read.
3: invalid.",
      Width => "2",
      Position => "2:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroSbusReset => { #Structure Type: RegField;
      Name => "PmroSbusReset",
      RegMem => "RegField",
      Description => "Reset pmro sbus chain. Need to set to 0 before starting access to pmro registers.",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroAddr => { #Structure Type: RegField;
      Name => "PmroAddr",
      RegMem => "RegField",
      Description => "PMRO register address:
0 - control register, 8b, def: 0x0.
1 - SVT Configuration Register, 16b, def: 0xFFFF.
2 - LVT Configuration Register, 16b, def: 0xFFFF.
3 - ULVT Configuration Register, 16b, def: 0xFFFF.
4 - Interconnect Configuration Register, 16b, def: 0xFFFF.
5 - Reference Clock Counter Register, 24b, def: 0xFFF000.
6 - Oscillator Counter Register, 24b, def: 0x000000.
7 - SBus ID register, read as 0x0B.
Set to '0' on reset command.",
      Width => "3",
      Position => "6:4", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroData => { #Structure Type: RegField;
      Name => "PmroData",
      RegMem => "RegField",
      Description => "PMRO data, set to 0x0 on reset and read command.",
      Width => "32",
      Position => "38:7", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C32,A32,G32)
    Width => "34", # Excel Formula: =calc_reg_width(E39:E41,F41)
    Type => "ReadOnly",
    PmroRdata => { #Structure Type: RegField;
      Name => "PmroRdata",
      RegMem => "RegField",
      Description => "Read data from pmro. Valid when PmroFinish=1 and PmroFailed=0.",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F38,E39,TRUE)
      Type => "Capture",
      UsedBy => "pmro",
    },
    PmroFailed => { #Structure Type: RegField;
      Name => "PmroFailed",
      RegMem => "RegField",
      Description => "Pmro command failed. Valid only when PmroFinish=1.",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F39,E40)
      Type => "Capture",
      UsedBy => "pmro",
    },
    PmroFinish => { #Structure Type: RegField;
      Name => "PmroFinish",
      RegMem => "RegField",
      Description => "Pmro command finished.",
      Width => "1",
      Position => "33", # Excel Formula: =calc_position(F40,E41)
      Type => "Event",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C38,A38,G38)
    Description => "aaa",
    Width => "11", # Excel Formula: =calc_reg_width(E43:E44,F44)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "aaa",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "aaa",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C42,A42,G42)
    Description => "aaa",
    Width => "32", # Excel Formula: =calc_reg_width(E46:E46,F46)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "aaa",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C45,A45,G45)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E48:E48,F48)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  GeneralInterruptRegister => { #Structure Type: Reg;
    Name => "GeneralInterruptRegister",
    RegMem => "Reg",
    Address => "100",
    Description => "Interrupt",
    Width => "11", # Excel Formula: =calc_reg_width(E8:E18,F18)
    Type => "Interrupt",
    AsyncFifoEmptyInterrupt0 => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt0",
      RegMem => "RegField",
      Description => "MMU -> HBM Async FIFO empty (fatal error)",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoEmptyInterrupt1 => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt1",
      RegMem => "RegField",
      Description => "MMU -> HBM Async FIFO empty (fatal error)",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoEmptyInterrupt2 => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt2",
      RegMem => "RegField",
      Description => "MMU -> HBM Async FIFO empty (fatal error)",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F9,E10)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoEmptyInterrupt3 => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt3",
      RegMem => "RegField",
      Description => "MMU -> HBM Async FIFO empty (fatal error)",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F10,E11)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoEmptyInterrupt4 => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt4",
      RegMem => "RegField",
      Description => "MMU -> HBM Async FIFO empty (fatal error)",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F11,E12)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoEmptyInterrupt5 => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt5",
      RegMem => "RegField",
      Description => "MMU -> HBM Async FIFO empty (fatal error)",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F12,E13)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoEmptyInterrupt6 => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt6",
      RegMem => "RegField",
      Description => "MMU -> HBM Async FIFO empty (fatal error)",
      Width => "1",
      Position => "6", # Excel Formula: =calc_position(F13,E14)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    AsyncFifoEmptyInterrupt7 => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt7",
      RegMem => "RegField",
      Description => "MMU -> HBM Async FIFO empty (fatal error)",
      Width => "1",
      Position => "7", # Excel Formula: =calc_position(F14,E15)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    CattripInterrupt => { #Structure Type: RegField;
      Name => "CattripInterrupt",
      RegMem => "RegField",
      Description => "Catastrophic temperature indication from HBM die",
      Width => "1",
      Position => "8", # Excel Formula: =calc_position(F15,E16)
      Type => "Interrupt",
      UsedBy => "hbm",
    },
    SpcioSbe => { #Structure Type: RegField;
      Name => "SpcioSbe",
      RegMem => "RegField",
      Description => "Sbus master Spico memory single-bit error",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F16,E17)
      Type => "Interrupt",
      UsedBy => "sbm",
    },
    SpcioDbe => { #Structure Type: RegField;
      Name => "SpcioDbe",
      RegMem => "RegField",
      Description => "Sbus master Spico memory double-bit error",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F17,E18)
      Type => "Interrupt",
      UsedBy => "sbm",
    },
  },
  GeneralInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "GeneralInterruptRegisterMask",
    RegMem => "Reg",
    Address => "101",
    Description => "This register masks GeneralInterruptRegister interrupt register",
    Width => "11", # Excel Formula: =calc_reg_width(E8:E18,F18)
    Type => "InterruptMask",
    AsyncFifoEmptyInterrupt0Mask => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt0Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoEmptyInterrupt0 interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoEmptyInterrupt1Mask => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt1Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoEmptyInterrupt1 interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoEmptyInterrupt2Mask => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt2Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoEmptyInterrupt2 interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F9,E10)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoEmptyInterrupt3Mask => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt3Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoEmptyInterrupt3 interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoEmptyInterrupt4Mask => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt4Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoEmptyInterrupt4 interrupt",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoEmptyInterrupt5Mask => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt5Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoEmptyInterrupt5 interrupt",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoEmptyInterrupt6Mask => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt6Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoEmptyInterrupt6 interrupt",
      Width => "1",
      Position => "6", # Excel Formula: =calc_position(F13,E14)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    AsyncFifoEmptyInterrupt7Mask => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt7Mask",
      RegMem => "RegField",
      Description => "This field masks AsyncFifoEmptyInterrupt7 interrupt",
      Width => "1",
      Position => "7", # Excel Formula: =calc_position(F14,E15)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    CattripInterruptMask => { #Structure Type: RegField;
      Name => "CattripInterruptMask",
      RegMem => "RegField",
      Description => "This field masks CattripInterrupt interrupt",
      Width => "1",
      Position => "8", # Excel Formula: =calc_position(F15,E16)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    SpcioSbeMask => { #Structure Type: RegField;
      Name => "SpcioSbeMask",
      RegMem => "RegField",
      Description => "This field masks SpcioSbe interrupt",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F16,E17)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
    SpcioDbeMask => { #Structure Type: RegField;
      Name => "SpcioDbeMask",
      RegMem => "RegField",
      Description => "This field masks SpcioDbe interrupt",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F17,E18)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  GeneralInterruptRegisterTest => { #Structure Type: Reg; Skip Register;
    Name => "GeneralInterruptRegisterTest",
    RegMem => "Reg",
    Address => "102",
    Description => "This register tests GeneralInterruptRegister interrupt register",
    Width => "11", # Excel Formula: =calc_reg_width(E8:E18,F18)
    Type => "InterruptTest",
    AsyncFifoEmptyInterrupt0Test => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt0Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoEmptyInterrupt0 interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoEmptyInterrupt1Test => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt1Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoEmptyInterrupt1 interrupt",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F8,E9)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoEmptyInterrupt2Test => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt2Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoEmptyInterrupt2 interrupt",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F9,E10)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoEmptyInterrupt3Test => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt3Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoEmptyInterrupt3 interrupt",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F10,E11)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoEmptyInterrupt4Test => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt4Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoEmptyInterrupt4 interrupt",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F11,E12)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoEmptyInterrupt5Test => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt5Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoEmptyInterrupt5 interrupt",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F12,E13)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoEmptyInterrupt6Test => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt6Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoEmptyInterrupt6 interrupt",
      Width => "1",
      Position => "6", # Excel Formula: =calc_position(F13,E14)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    AsyncFifoEmptyInterrupt7Test => { #Structure Type: RegField;
      Name => "AsyncFifoEmptyInterrupt7Test",
      RegMem => "RegField",
      Description => "This field tests AsyncFifoEmptyInterrupt7 interrupt",
      Width => "1",
      Position => "7", # Excel Formula: =calc_position(F14,E15)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    CattripInterruptTest => { #Structure Type: RegField;
      Name => "CattripInterruptTest",
      RegMem => "RegField",
      Description => "This field tests CattripInterrupt interrupt",
      Width => "1",
      Position => "8", # Excel Formula: =calc_position(F15,E16)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    SpcioSbeTest => { #Structure Type: RegField;
      Name => "SpcioSbeTest",
      RegMem => "RegField",
      Description => "This field tests SpcioSbe interrupt",
      Width => "1",
      Position => "9", # Excel Formula: =calc_position(F16,E17)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    SpcioDbeTest => { #Structure Type: RegField;
      Name => "SpcioDbeTest",
      RegMem => "RegField",
      Description => "This field tests SpcioDbe interrupt",
      Width => "1",
      Position => "10", # Excel Formula: =calc_position(F17,E18)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  AsyncFifoConfig0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Config of MMU to HBM async FIFO",
    Width => "6", # Excel Formula: =calc_reg_width(E20:E20,F20)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "0",
    AlmostFull0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
    },
  },
  AsyncFifoConfig1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "104",
    Description => "Config of MMU to HBM async FIFO",
    Width => "6", # Excel Formula: =calc_reg_width(E20:E20,F20)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "1",
    AlmostFull1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
    },
  },
  AsyncFifoConfig2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "105",
    Description => "Config of MMU to HBM async FIFO",
    Width => "6", # Excel Formula: =calc_reg_width(E20:E20,F20)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "2",
    AlmostFull2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
    },
  },
  AsyncFifoConfig3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "106",
    Description => "Config of MMU to HBM async FIFO",
    Width => "6", # Excel Formula: =calc_reg_width(E20:E20,F20)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "3",
    AlmostFull3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
    },
  },
  AsyncFifoConfig4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "107",
    Description => "Config of MMU to HBM async FIFO",
    Width => "6", # Excel Formula: =calc_reg_width(E20:E20,F20)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "4",
    AlmostFull4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
    },
  },
  AsyncFifoConfig5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "108",
    Description => "Config of MMU to HBM async FIFO",
    Width => "6", # Excel Formula: =calc_reg_width(E20:E20,F20)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "5",
    AlmostFull5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
    },
  },
  AsyncFifoConfig6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "109",
    Description => "Config of MMU to HBM async FIFO",
    Width => "6", # Excel Formula: =calc_reg_width(E20:E20,F20)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "6",
    AlmostFull6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
    },
  },
  AsyncFifoConfig7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 16;
    Name => "AsyncFifoConfig[8]",
    RegMem => "Reg",
    Address => "10A",
    Description => "Config of MMU to HBM async FIFO",
    Width => "6", # Excel Formula: =calc_reg_width(E20:E20,F20)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "7",
    AlmostFull7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 11;
      Name => "AlmostFull[n]",
      RegMem => "RegField",
      Description => "Almost full level for async FIFO. Needs to be set according to clock ratio between core clk and DFI clock (default value is for 1.23 GHz core and 1 GHz DFI)",
      Width => "6",
      Position => "5:0", # Excel Formula: =calc_position(F19,E20,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d50",
    },
  },
  HbmConfig0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "10B", # Excel Formula: =calc_reg_address(C19,A19,G19)
    Description => "Config of HBM macro",
    Width => "6", # Excel Formula: =calc_reg_width(E22:E26,F26)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "0",
    HbmPl0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into firmware. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F21,E22,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    DbiEnable0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "DbiEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable DBI functionality in HBM. Must match setting in HBM die . Value of 0 is NOT supported",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    EccCheckEnable0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable ECC checking on data read from HBM die. ",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "If set, count 1b (correctable) ECC error as an error in the read data packet",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "If set, parity error on Rx data will be passed on to MMU. The error will always be counted in the counters",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "10C",
    Description => "Config of HBM macro",
    Width => "6", # Excel Formula: =calc_reg_width(E22:E26,F26)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "1",
    HbmPl1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into firmware. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F21,E22,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    DbiEnable1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "DbiEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable DBI functionality in HBM. Must match setting in HBM die . Value of 0 is NOT supported",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    EccCheckEnable1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable ECC checking on data read from HBM die. ",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "If set, count 1b (correctable) ECC error as an error in the read data packet",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "If set, parity error on Rx data will be passed on to MMU. The error will always be counted in the counters",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "10D",
    Description => "Config of HBM macro",
    Width => "6", # Excel Formula: =calc_reg_width(E22:E26,F26)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "2",
    HbmPl2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into firmware. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F21,E22,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    DbiEnable2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "DbiEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable DBI functionality in HBM. Must match setting in HBM die . Value of 0 is NOT supported",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    EccCheckEnable2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable ECC checking on data read from HBM die. ",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "If set, count 1b (correctable) ECC error as an error in the read data packet",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "If set, parity error on Rx data will be passed on to MMU. The error will always be counted in the counters",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "10E",
    Description => "Config of HBM macro",
    Width => "6", # Excel Formula: =calc_reg_width(E22:E26,F26)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "3",
    HbmPl3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into firmware. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F21,E22,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    DbiEnable3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "DbiEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable DBI functionality in HBM. Must match setting in HBM die . Value of 0 is NOT supported",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    EccCheckEnable3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable ECC checking on data read from HBM die. ",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "If set, count 1b (correctable) ECC error as an error in the read data packet",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "If set, parity error on Rx data will be passed on to MMU. The error will always be counted in the counters",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "10F",
    Description => "Config of HBM macro",
    Width => "6", # Excel Formula: =calc_reg_width(E22:E26,F26)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "4",
    HbmPl4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into firmware. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F21,E22,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    DbiEnable4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 10;
      Name => "DbiEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable DBI functionality in HBM. Must match setting in HBM die . Value of 0 is NOT supported",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    EccCheckEnable4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable ECC checking on data read from HBM die. ",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "If set, count 1b (correctable) ECC error as an error in the read data packet",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "If set, parity error on Rx data will be passed on to MMU. The error will always be counted in the counters",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "110",
    Description => "Config of HBM macro",
    Width => "6", # Excel Formula: =calc_reg_width(E22:E26,F26)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "5",
    HbmPl5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into firmware. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F21,E22,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    DbiEnable5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 10;
      Name => "DbiEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable DBI functionality in HBM. Must match setting in HBM die . Value of 0 is NOT supported",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    EccCheckEnable5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable ECC checking on data read from HBM die. ",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "If set, count 1b (correctable) ECC error as an error in the read data packet",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "If set, parity error on Rx data will be passed on to MMU. The error will always be counted in the counters",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "111",
    Description => "Config of HBM macro",
    Width => "6", # Excel Formula: =calc_reg_width(E22:E26,F26)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "6",
    HbmPl6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into firmware. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F21,E22,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    DbiEnable6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 10;
      Name => "DbiEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable DBI functionality in HBM. Must match setting in HBM die . Value of 0 is NOT supported",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    EccCheckEnable6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable ECC checking on data read from HBM die. ",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "If set, count 1b (correctable) ECC error as an error in the read data packet",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "If set, parity error on Rx data will be passed on to MMU. The error will always be counted in the counters",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmConfig7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 10;
    Name => "HbmConfig[8]",
    RegMem => "Reg",
    Address => "112",
    Description => "Config of HBM macro",
    Width => "6", # Excel Formula: =calc_reg_width(E22:E26,F26)
    Type => "Config",
    ArrayLength => "8",
    ArrayIndex => "7",
    HbmPl7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 6;
      Name => "HbmPl[n]",
      RegMem => "RegField",
      Description => "Parity latency (PL) field. Must be same as programmed into firmware. Supported values 1->3. Used for checking parity on read data.",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F21,E22,TRUE)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    DbiEnable7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 10;
      Name => "DbiEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable DBI functionality in HBM. Must match setting in HBM die . Value of 0 is NOT supported",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    EccCheckEnable7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
      Name => "EccCheckEnable[n]",
      RegMem => "RegField",
      Description => "If set, enable ECC checking on data read from HBM die. ",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
    CountOneBitEccAsError7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 22;
      Name => "CountOneBitEccAsError[n]",
      RegMem => "RegField",
      Description => "If set, count 1b (correctable) ECC error as an error in the read data packet",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d0",
    },
    CheckRxDataParity7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18;
      Name => "CheckRxDataParity[n]",
      RegMem => "RegField",
      Description => "If set, parity error on Rx data will be passed on to MMU. The error will always be counted in the counters",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "hbm",
      DefaultValue => "d1",
    },
  },
  HbmErrorCounters0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "113", # Excel Formula: =calc_reg_address(C21,A21,G21)
    Description => "Error counters for HBM interface Errors",
    Width => "80", # Excel Formula: =calc_reg_width(E28:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "0",
    WrDataParityErrors0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "WrDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors. These errors are ignored by MAC",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AddrParityErrors0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "AddrParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors. ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrors0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "OneBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    TwoBitEccErrors0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "TwoBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 2b ECC errors on HBM interface",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrors0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "RdDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "114",
    Description => "Error counters for HBM interface Errors",
    Width => "80", # Excel Formula: =calc_reg_width(E28:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "1",
    WrDataParityErrors1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "WrDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors. These errors are ignored by MAC",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AddrParityErrors1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "AddrParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors. ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrors1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "OneBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    TwoBitEccErrors1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "TwoBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 2b ECC errors on HBM interface",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrors1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "RdDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "115",
    Description => "Error counters for HBM interface Errors",
    Width => "80", # Excel Formula: =calc_reg_width(E28:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "2",
    WrDataParityErrors2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "WrDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors. These errors are ignored by MAC",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AddrParityErrors2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 17;
      Name => "AddrParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors. ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrors2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "OneBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    TwoBitEccErrors2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "TwoBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 2b ECC errors on HBM interface",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrors2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "RdDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "116",
    Description => "Error counters for HBM interface Errors",
    Width => "80", # Excel Formula: =calc_reg_width(E28:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "3",
    WrDataParityErrors3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "WrDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors. These errors are ignored by MAC",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AddrParityErrors3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 17;
      Name => "AddrParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors. ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrors3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "OneBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    TwoBitEccErrors3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "TwoBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 2b ECC errors on HBM interface",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrors3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "RdDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "117",
    Description => "Error counters for HBM interface Errors",
    Width => "80", # Excel Formula: =calc_reg_width(E28:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "4",
    WrDataParityErrors4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "WrDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors. These errors are ignored by MAC",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AddrParityErrors4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 17;
      Name => "AddrParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors. ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrors4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "OneBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    TwoBitEccErrors4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 16;
      Name => "TwoBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 2b ECC errors on HBM interface",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrors4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "RdDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "118",
    Description => "Error counters for HBM interface Errors",
    Width => "80", # Excel Formula: =calc_reg_width(E28:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "5",
    WrDataParityErrors5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "WrDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors. These errors are ignored by MAC",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AddrParityErrors5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 17;
      Name => "AddrParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors. ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrors5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "OneBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    TwoBitEccErrors5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 16;
      Name => "TwoBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 2b ECC errors on HBM interface",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrors5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "RdDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "119",
    Description => "Error counters for HBM interface Errors",
    Width => "80", # Excel Formula: =calc_reg_width(E28:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "6",
    WrDataParityErrors6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "WrDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors. These errors are ignored by MAC",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AddrParityErrors6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 17;
      Name => "AddrParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors. ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrors6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "OneBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    TwoBitEccErrors6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 16;
      Name => "TwoBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 2b ECC errors on HBM interface",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrors6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "RdDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmErrorCounters7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 17;
    Name => "HbmErrorCounters[8]",
    RegMem => "Reg",
    Address => "11A",
    Description => "Error counters for HBM interface Errors",
    Width => "80", # Excel Formula: =calc_reg_width(E28:E32,F32)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "7",
    WrDataParityErrors7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "WrDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of write data parity errors. These errors are ignored by MAC",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F27,E28,TRUE)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    AddrParityErrors7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 17;
      Name => "AddrParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of addr(row or col) parity errors. ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F28,E29)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    OneBitEccErrors7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "OneBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 1b ECC errors on HBM interface",
      Width => "16",
      Position => "47:32", # Excel Formula: =calc_position(F29,E30)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    TwoBitEccErrors7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 16;
      Name => "TwoBitEccErrors[n]",
      RegMem => "RegField",
      Description => "Counter of 2b ECC errors on HBM interface",
      Width => "16",
      Position => "63:48", # Excel Formula: =calc_position(F30,E31)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    RdDataParityErrors7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "RdDataParityErrors[n]",
      RegMem => "RegField",
      Description => "Counter of read data parity errors",
      Width => "16",
      Position => "79:64", # Excel Formula: =calc_position(F31,E32)
      Type => "Counter",
      UsedBy => "hbm",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  HbmStatus0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 10;
    Name => "HbmStatus[8]",
    RegMem => "Reg",
    Address => "11B", # Excel Formula: =calc_reg_address(C27,A27,G27)
    Description => "Status register for HBM",
    Width => "2", # Excel Formula: =calc_reg_width(E34:E35,F35)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "0",
    dfi_init_complete0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "dfi_init_complete[n]",
      RegMem => "RegField",
      Description => "Set if DFI initialization is done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F33,E34,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
    dfi_phylvl_req_n0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "dfi_phylvl_req_n[n]",
      RegMem => "RegField",
      Description => "Status of PHYLVL Req signal from PHY",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F34,E35)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  HbmStatus1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 10;
    Name => "HbmStatus[8]",
    RegMem => "Reg",
    Address => "11C",
    Description => "Status register for HBM",
    Width => "2", # Excel Formula: =calc_reg_width(E34:E35,F35)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "1",
    dfi_init_complete1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "dfi_init_complete[n]",
      RegMem => "RegField",
      Description => "Set if DFI initialization is done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F33,E34,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
    dfi_phylvl_req_n1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "dfi_phylvl_req_n[n]",
      RegMem => "RegField",
      Description => "Status of PHYLVL Req signal from PHY",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F34,E35)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  HbmStatus2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 10;
    Name => "HbmStatus[8]",
    RegMem => "Reg",
    Address => "11D",
    Description => "Status register for HBM",
    Width => "2", # Excel Formula: =calc_reg_width(E34:E35,F35)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "2",
    dfi_init_complete2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "dfi_init_complete[n]",
      RegMem => "RegField",
      Description => "Set if DFI initialization is done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F33,E34,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
    dfi_phylvl_req_n2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 17;
      Name => "dfi_phylvl_req_n[n]",
      RegMem => "RegField",
      Description => "Status of PHYLVL Req signal from PHY",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F34,E35)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  HbmStatus3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 10;
    Name => "HbmStatus[8]",
    RegMem => "Reg",
    Address => "11E",
    Description => "Status register for HBM",
    Width => "2", # Excel Formula: =calc_reg_width(E34:E35,F35)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "3",
    dfi_init_complete3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "dfi_init_complete[n]",
      RegMem => "RegField",
      Description => "Set if DFI initialization is done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F33,E34,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
    dfi_phylvl_req_n3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 17;
      Name => "dfi_phylvl_req_n[n]",
      RegMem => "RegField",
      Description => "Status of PHYLVL Req signal from PHY",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F34,E35)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  HbmStatus4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 10;
    Name => "HbmStatus[8]",
    RegMem => "Reg",
    Address => "11F",
    Description => "Status register for HBM",
    Width => "2", # Excel Formula: =calc_reg_width(E34:E35,F35)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "4",
    dfi_init_complete4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "dfi_init_complete[n]",
      RegMem => "RegField",
      Description => "Set if DFI initialization is done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F33,E34,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
    dfi_phylvl_req_n4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 17;
      Name => "dfi_phylvl_req_n[n]",
      RegMem => "RegField",
      Description => "Status of PHYLVL Req signal from PHY",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F34,E35)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  HbmStatus5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 10;
    Name => "HbmStatus[8]",
    RegMem => "Reg",
    Address => "120",
    Description => "Status register for HBM",
    Width => "2", # Excel Formula: =calc_reg_width(E34:E35,F35)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "5",
    dfi_init_complete5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "dfi_init_complete[n]",
      RegMem => "RegField",
      Description => "Set if DFI initialization is done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F33,E34,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
    dfi_phylvl_req_n5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 17;
      Name => "dfi_phylvl_req_n[n]",
      RegMem => "RegField",
      Description => "Status of PHYLVL Req signal from PHY",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F34,E35)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  HbmStatus6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 10;
    Name => "HbmStatus[8]",
    RegMem => "Reg",
    Address => "121",
    Description => "Status register for HBM",
    Width => "2", # Excel Formula: =calc_reg_width(E34:E35,F35)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "6",
    dfi_init_complete6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "dfi_init_complete[n]",
      RegMem => "RegField",
      Description => "Set if DFI initialization is done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F33,E34,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
    dfi_phylvl_req_n6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 17;
      Name => "dfi_phylvl_req_n[n]",
      RegMem => "RegField",
      Description => "Status of PHYLVL Req signal from PHY",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F34,E35)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  HbmStatus7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 10;
    Name => "HbmStatus[8]",
    RegMem => "Reg",
    Address => "122",
    Description => "Status register for HBM",
    Width => "2", # Excel Formula: =calc_reg_width(E34:E35,F35)
    Type => "ReadOnly",
    ArrayLength => "8",
    ArrayIndex => "7",
    dfi_init_complete7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18;
      Name => "dfi_init_complete[n]",
      RegMem => "RegField",
      Description => "Set if DFI initialization is done",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F33,E34,TRUE)
      Type => "Status",
      UsedBy => "hbm",
    },
    dfi_phylvl_req_n7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 17;
      Name => "dfi_phylvl_req_n[n]",
      RegMem => "RegField",
      Description => "Status of PHYLVL Req signal from PHY",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F34,E35)
      Type => "Status",
      UsedBy => "hbm",
    },
  },
  SbmInterruptReqData => { #Structure Type: Reg;
    Name => "SbmInterruptReqData",
    RegMem => "Reg",
    Address => "123", # Excel Formula: =calc_reg_address(C33,A33,G33)
    Description => "Sbus master Spico interrupt request register",
    Width => "16", # Excel Formula: =calc_reg_width(E37:E39,F39)
    Type => "Config",
    SpicoInterruptDataHigh => { #Structure Type: RegField;
      Name => "SpicoInterruptDataHigh",
      RegMem => "RegField",
      Description => "Interrupt data high-order bits",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F36,E37,TRUE)
      Type => "Config",
      UsedBy => "sbm",
      DefaultValue => "h0",
      AdditionalInfo => "DisableCfgUnderTraffic",
    },
    SpicoInterruptDataLow => { #Structure Type: RegField;
      Name => "SpicoInterruptDataLow",
      RegMem => "RegField",
      Description => "Interrupt data low-order bits",
      Width => "8",
      Position => "11:4", # Excel Formula: =calc_position(F37,E38)
      Type => "Config",
      UsedBy => "sbm",
      DefaultValue => "h0",
      AdditionalInfo => "DisableCfgUnderTraffic",
    },
    SpicoInterruptCode => { #Structure Type: RegField;
      Name => "SpicoInterruptCode",
      RegMem => "RegField",
      Description => "Interrupt code",
      Width => "4",
      Position => "15:12", # Excel Formula: =calc_position(F38,E39)
      Type => "Config",
      UsedBy => "sbm",
      DefaultValue => "h0",
      AdditionalInfo => "DisableCfgUnderTraffic",
    },
  },
  SbmInterruptReq => { #Structure Type: Reg;
    Name => "SbmInterruptReq",
    RegMem => "Reg",
    Address => "124", # Excel Formula: =calc_reg_address(C36,A36,G36)
    Description => "Sbus master Spico interrupt request register",
    Width => "1", # Excel Formula: =calc_reg_width(E41:E41,F41)
    Type => "External",
    UsedBy => "sbm",
    SpicoInterruptReq => { #Structure Type: RegField;
      Name => "SpicoInterruptReq",
      RegMem => "RegField",
      Description => "Interrupt request trigger.
Cleared by HW.
",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F40,E41,TRUE)
      Type => "External",
      AdditionalInfo => "DisableCfgUnderTraffic",
    },
  },
  SbmInterruptStatus => { #Structure Type: Reg;
    Name => "SbmInterruptStatus",
    RegMem => "Reg",
    Address => "125", # Excel Formula: =calc_reg_address(C40,A40,G40)
    Description => "Sbus master Spico interrupt status register",
    Width => "16", # Excel Formula: =calc_reg_width(E43:E45,F45)
    Type => "ReadOnly",
    SpicoInterruptDataOut => { #Structure Type: RegField;
      Name => "SpicoInterruptDataOut",
      RegMem => "RegField",
      Description => "Interrupt output data.
Valid when interrupt data out valid is '0'.",
      Width => "14",
      Position => "13:0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Status",
      UsedBy => "sbm",
    },
    SpicoInterruptDataOutValid => { #Structure Type: RegField;
      Name => "SpicoInterruptDataOutValid",
      RegMem => "RegField",
      Description => "0' when interrupt data out is valid",
      Width => "1",
      Position => "14", # Excel Formula: =calc_position(F43,E44)
      Type => "Status",
      UsedBy => "sbm",
    },
    SpicoInterruptInProgress => { #Structure Type: RegField;
      Name => "SpicoInterruptInProgress",
      RegMem => "RegField",
      Description => "0' when interrupt handling is in progress. ",
      Width => "1",
      Position => "15", # Excel Formula: =calc_position(F44,E45)
      Type => "Status",
      UsedBy => "sbm",
    },
  },
  SbmReqReg => { #Structure Type: Reg;
    Name => "SbmReqReg",
    RegMem => "Reg",
    Address => "126", # Excel Formula: =calc_reg_address(C42,A42,G42)
    Description => "SBUS Master Request Register",
    Width => "24", # Excel Formula: =calc_reg_width(E47:E49,F49)
    Type => "Config",
    SbmReqRxAddr => { #Structure Type: RegField;
      Name => "SbmReqRxAddr",
      RegMem => "RegField",
      Description => "Request Receiver Address",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F46,E47,TRUE)
      Type => "Config",
      UsedBy => "sbm",
      DefaultValue => "h0",
    },
    SbmReqDataAddr => { #Structure Type: RegField;
      Name => "SbmReqDataAddr",
      RegMem => "RegField",
      Description => "Request Data Address",
      Width => "8",
      Position => "15:8", # Excel Formula: =calc_position(F47,E48)
      Type => "Config",
      UsedBy => "sbm",
      DefaultValue => "h0",
    },
    SbmReqCmd => { #Structure Type: RegField;
      Name => "SbmReqCmd",
      RegMem => "RegField",
      Description => "Request Command",
      Width => "8",
      Position => "23:16", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "sbm",
      DefaultValue => "h0",
    },
  },
  SbmReqDataReg => { #Structure Type: Reg;
    Name => "SbmReqDataReg",
    RegMem => "Reg",
    Address => "127", # Excel Formula: =calc_reg_address(C46,A46,G46)
    Description => "SBUS Master Request Data Register",
    Width => "32", # Excel Formula: =calc_reg_width(E51:E51,F51)
    Type => "Config",
    SbmReqData => { #Structure Type: RegField;
      Name => "SbmReqData",
      RegMem => "RegField",
      Description => "Request Data",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F50,E51,TRUE)
      Type => "Config",
      UsedBy => "sbm",
      DefaultValue => "h0",
    },
  },
  SbmReqExecuteReg => { #Structure Type: Reg;
    Name => "SbmReqExecuteReg",
    RegMem => "Reg",
    Address => "128", # Excel Formula: =calc_reg_address(C50,A50,G50)
    Description => "SBUS Master Request Execute Register",
    Width => "1", # Excel Formula: =calc_reg_width(E53:E53,F53)
    Type => "External",
    UsedBy => "sbm",
    AdditionalInfo => "ExternalBackdoorWriteEnable",
    SbmReqExecute => { #Structure Type: RegField;
      Name => "SbmReqExecute",
      RegMem => "RegField",
      Description => "Request Execute - write 1 to execute the request. When done the register is cleared by the HW",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F52,E53,TRUE)
      Type => "External",
    },
  },
  SbmRspResultReg => { #Structure Type: Reg;
    Name => "SbmRspResultReg",
    RegMem => "Reg",
    Address => "129", # Excel Formula: =calc_reg_address(C52,A52,G52)
    Description => "SBUS Master Response Result Code Register",
    Width => "4", # Excel Formula: =calc_reg_width(E55:E56,F56)
    Type => "ReadOnly",
    SbmRspResultValid => { #Structure Type: RegField;
      Name => "SbmRspResultValid",
      RegMem => "RegField",
      Description => "Response Result Valid - 1 indicates a valid response, cleared on read",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Event",
      UsedBy => "sbm",
    },
    SbmRspResultCode => { #Structure Type: RegField;
      Name => "SbmRspResultCode",
      RegMem => "RegField",
      Description => "Response Result Code",
      Width => "3",
      Position => "3:1", # Excel Formula: =calc_position(F55,E56)
      Type => "Status",
      UsedBy => "sbm",
    },
  },
  SbmRspDataReg => { #Structure Type: Reg;
    Name => "SbmRspDataReg",
    RegMem => "Reg",
    Address => "12A", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Description => "SBUS Master Response Data Register",
    Width => "32", # Excel Formula: =calc_reg_width(E58:E58,F58)
    Type => "ReadOnly",
    SbmRspData => { #Structure Type: RegField;
      Name => "SbmRspData",
      RegMem => "RegField",
      Description => "Response Data",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F57,E58,TRUE)
      Type => "Status",
      UsedBy => "sbm",
    },
  },
  SbmBistControlReg => { #Structure Type: Reg;
    Name => "SbmBistControlReg",
    RegMem => "Reg",
    Address => "12B", # Excel Formula: =calc_reg_address(C57,A57,G57)
    Width => "3", # Excel Formula: =calc_reg_width(E60:E62,F62)
    Type => "Config",
    SbmCoreBistRprMode => { #Structure Type: RegField;
      Name => "SbmCoreBistRprMode",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F59,E60,TRUE)
      Type => "Config",
      UsedBy => "sbm",
      DefaultValue => "h0",
      AdditionalInfo => "DisableCfgUnderTraffic",
    },
    SbmCoreBistPtrnFill => { #Structure Type: RegField;
      Name => "SbmCoreBistPtrnFill",
      RegMem => "RegField",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F60,E61)
      Type => "Config",
      UsedBy => "sbm",
      DefaultValue => "h0",
      AdditionalInfo => "DisableCfgUnderTraffic",
    },
    SbmCoreBistRun => { #Structure Type: RegField;
      Name => "SbmCoreBistRun",
      RegMem => "RegField",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F61,E62)
      Type => "Config",
      UsedBy => "sbm",
      DefaultValue => "h0",
      AdditionalInfo => "DisableCfgUnderTraffic",
    },
  },
  SbmBistStatusReg => { #Structure Type: Reg;
    Name => "SbmBistStatusReg",
    RegMem => "Reg",
    Address => "12C", # Excel Formula: =calc_reg_address(C59,A59,G59)
    Width => "2", # Excel Formula: =calc_reg_width(E64:E65,F65)
    Type => "ReadOnly",
    SbmBistDonePassOut => { #Structure Type: RegField;
      Name => "SbmBistDonePassOut",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F63,E64,TRUE)
      Type => "Status",
      UsedBy => "sbm",
    },
    SbmBistDoneFailOut => { #Structure Type: RegField;
      Name => "SbmBistDoneFailOut",
      RegMem => "RegField",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F64,E65)
      Type => "Status",
      UsedBy => "sbm",
    },
  },
  pc0_async_fifo0 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[8]",
    RegMem => "Mem",
    Address => "100000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E67:E67,M66,F67,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "0",
    MemLogicalWidth => "138",
    pc0_async_fifoData0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F66,E67,TRUE)
    },
  },
  pc0_async_fifo1 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[8]",
    RegMem => "Mem",
    Address => "200000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E67:E67,M66,F67,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "1",
    MemLogicalWidth => "138",
    pc0_async_fifoData1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F66,E67,TRUE)
    },
  },
  pc0_async_fifo2 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[8]",
    RegMem => "Mem",
    Address => "300000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E67:E67,M66,F67,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "2",
    MemLogicalWidth => "138",
    pc0_async_fifoData2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F66,E67,TRUE)
    },
  },
  pc0_async_fifo3 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[8]",
    RegMem => "Mem",
    Address => "400000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E67:E67,M66,F67,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "3",
    MemLogicalWidth => "138",
    pc0_async_fifoData3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F66,E67,TRUE)
    },
  },
  pc0_async_fifo4 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[8]",
    RegMem => "Mem",
    Address => "500000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E67:E67,M66,F67,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "4",
    MemLogicalWidth => "138",
    pc0_async_fifoData4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F66,E67,TRUE)
    },
  },
  pc0_async_fifo5 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[8]",
    RegMem => "Mem",
    Address => "600000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E67:E67,M66,F67,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "5",
    MemLogicalWidth => "138",
    pc0_async_fifoData5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F66,E67,TRUE)
    },
  },
  pc0_async_fifo6 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[8]",
    RegMem => "Mem",
    Address => "700000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E67:E67,M66,F67,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "6",
    MemLogicalWidth => "138",
    pc0_async_fifoData6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F66,E67,TRUE)
    },
  },
  pc0_async_fifo7 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
    Name => "pc0_async_fifo[8]",
    RegMem => "Mem",
    Address => "800000",
    Description => "MMU 2 HBM Async FIFO mem for PC0 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E67:E67,M66,F67,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "7",
    MemLogicalWidth => "138",
    pc0_async_fifoData7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "pc0_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F66,E67,TRUE)
    },
  },
  pc1_async_fifo0 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[8]",
    RegMem => "Mem",
    Address => "900000", # Excel Formula: =calc_mem_address(C66,A66,G68,L68)
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E69:E69,M68,F69,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "0",
    MemLogicalWidth => "138",
    pc1_async_fifoData0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F68,E69,TRUE)
    },
  },
  pc1_async_fifo1 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[8]",
    RegMem => "Mem",
    Address => "A00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E69:E69,M68,F69,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "1",
    MemLogicalWidth => "138",
    pc1_async_fifoData1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F68,E69,TRUE)
    },
  },
  pc1_async_fifo2 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[8]",
    RegMem => "Mem",
    Address => "B00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E69:E69,M68,F69,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "2",
    MemLogicalWidth => "138",
    pc1_async_fifoData2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F68,E69,TRUE)
    },
  },
  pc1_async_fifo3 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[8]",
    RegMem => "Mem",
    Address => "C00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E69:E69,M68,F69,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "3",
    MemLogicalWidth => "138",
    pc1_async_fifoData3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F68,E69,TRUE)
    },
  },
  pc1_async_fifo4 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[8]",
    RegMem => "Mem",
    Address => "D00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E69:E69,M68,F69,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "4",
    MemLogicalWidth => "138",
    pc1_async_fifoData4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F68,E69,TRUE)
    },
  },
  pc1_async_fifo5 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[8]",
    RegMem => "Mem",
    Address => "E00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E69:E69,M68,F69,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "5",
    MemLogicalWidth => "138",
    pc1_async_fifoData5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F68,E69,TRUE)
    },
  },
  pc1_async_fifo6 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[8]",
    RegMem => "Mem",
    Address => "F00000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E69:E69,M68,F69,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "6",
    MemLogicalWidth => "138",
    pc1_async_fifoData6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F68,E69,TRUE)
    },
  },
  pc1_async_fifo7 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 15;
    Name => "pc1_async_fifo[8]",
    RegMem => "Mem",
    Address => "1000000",
    Description => "MMU 2 HBM Async FIFO mem for PC1 data/control",
    Width => "152", # Excel Formula: =calc_mem_width(E69:E69,M68,F69,128)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,SplitProtWidth=128,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "7",
    MemLogicalWidth => "138",
    pc1_async_fifoData7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 19;
      Name => "pc1_async_fifoData[n]",
      RegMem => "MemField",
      Width => "138", # Excel Formula: =128+1+1+7+1
      Position => "137:0", # Excel Formula: =calc_position(F68,E69,TRUE)
    },
  },
  cntrl_async_fifo0 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[8]",
    RegMem => "Mem",
    Address => "1100000", # Excel Formula: =calc_mem_address(C68,A68,G70,L70)
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "35", # Excel Formula: =calc_mem_width(E71:E71,M70,F71,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "0",
    MemLogicalWidth => "28",
    cntrl_async_fifoData0 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "28",
      Position => "27:0", # Excel Formula: =calc_position(F70,E71,TRUE)
    },
  },
  cntrl_async_fifo1 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[8]",
    RegMem => "Mem",
    Address => "1200000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "35", # Excel Formula: =calc_mem_width(E71:E71,M70,F71,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "1",
    MemLogicalWidth => "28",
    cntrl_async_fifoData1 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "28",
      Position => "27:0", # Excel Formula: =calc_position(F70,E71,TRUE)
    },
  },
  cntrl_async_fifo2 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[8]",
    RegMem => "Mem",
    Address => "1300000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "35", # Excel Formula: =calc_mem_width(E71:E71,M70,F71,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "2",
    MemLogicalWidth => "28",
    cntrl_async_fifoData2 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "28",
      Position => "27:0", # Excel Formula: =calc_position(F70,E71,TRUE)
    },
  },
  cntrl_async_fifo3 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[8]",
    RegMem => "Mem",
    Address => "1400000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "35", # Excel Formula: =calc_mem_width(E71:E71,M70,F71,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "3",
    MemLogicalWidth => "28",
    cntrl_async_fifoData3 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "28",
      Position => "27:0", # Excel Formula: =calc_position(F70,E71,TRUE)
    },
  },
  cntrl_async_fifo4 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[8]",
    RegMem => "Mem",
    Address => "1500000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "35", # Excel Formula: =calc_mem_width(E71:E71,M70,F71,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "4",
    MemLogicalWidth => "28",
    cntrl_async_fifoData4 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "28",
      Position => "27:0", # Excel Formula: =calc_position(F70,E71,TRUE)
    },
  },
  cntrl_async_fifo5 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[8]",
    RegMem => "Mem",
    Address => "1600000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "35", # Excel Formula: =calc_mem_width(E71:E71,M70,F71,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "5",
    MemLogicalWidth => "28",
    cntrl_async_fifoData5 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "28",
      Position => "27:0", # Excel Formula: =calc_position(F70,E71,TRUE)
    },
  },
  cntrl_async_fifo6 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[8]",
    RegMem => "Mem",
    Address => "1700000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "35", # Excel Formula: =calc_mem_width(E71:E71,M70,F71,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "6",
    MemLogicalWidth => "28",
    cntrl_async_fifoData6 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "28",
      Position => "27:0", # Excel Formula: =calc_position(F70,E71,TRUE)
    },
  },
  cntrl_async_fifo7 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 17;
    Name => "cntrl_async_fifo[8]",
    RegMem => "Mem",
    Address => "1800000",
    Description => "MMU 2 HBM Async FIFO mem",
    Width => "35", # Excel Formula: =calc_mem_width(E71:E71,M70,F71,-1)
    Type => "Dynamic",
    UsedBy => "hbm",
    MemEntries => "64",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=1,PortErrPropagate=Enabled,TwoClocks=Enabled,Synchronizer=Enabled,DisableSameAddressErr=Enabled,EnableNonCpuRdWrSameAddress=Enabled,WriteActivityFactor=83,ReadActivityFactor=100,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "8",
    ArrayIndex => "7",
    MemLogicalWidth => "28",
    cntrl_async_fifoData7 => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 21;
      Name => "cntrl_async_fifoData[n]",
      RegMem => "MemField",
      Width => "28",
      Position => "27:0", # Excel Formula: =calc_position(F70,E71,TRUE)
    },
  },
};
