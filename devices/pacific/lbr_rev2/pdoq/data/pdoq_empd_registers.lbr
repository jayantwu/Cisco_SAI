$block{pdoq_empd} = {
  Defines_db => "..\\verilog\\pdoq_defines.v,..\\..\\defines\\control_common_defines.v,..\\..\\defines\\pd_fd_defines.v",
  ProjectName => "Pacific",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "2",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
    GeneralInterruptSummary => { #Structure Type: RegField;
      Name => "GeneralInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, GeneralInterrupt has asserted interrupt",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks Ecc_1bErrInterrupt",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks Ecc_2bErrInterrupt",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks ParityErrInterrupt",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "6",
    Type => "Config",
    FbmEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "FbmEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PdmEcc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PdmEcc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "6",
    Type => "Config",
    FbmEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "FbmEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PdmEcc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PdmEcc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    EmdbVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "6",
    Type => "Config",
    FbmEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "FbmEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PdmEcc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PdmEcc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "6",
    Type => "Config",
    FbmEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "FbmEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PdmEcc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PdmEcc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    EmdbVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "EmdbVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "6",
    Type => "ReadOnly",
    FbmErrInt => { #Structure Type: RegField;
      Name => "FbmErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    PdmErrInt => { #Structure Type: RegField;
      Name => "PdmErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier0ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier1ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier2ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    EmdbVerifier3ErrInt => { #Structure Type: RegField;
      Name => "EmdbVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "13",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "11",
      Position => "10:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "12:11",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "4",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "3",
      Position => "2:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  MbistPassStatus => { #Structure Type: Reg; Skip Register;
    Name => "MbistPassStatus",
    RegMem => "Reg",
    Address => "39",
    Description => "MBIST pass status",
    Width => "22",
    Type => "ReadOnly",
    BistDonePassOut => { #Structure Type: RegField;
      Name => "BistDonePassOut",
      RegMem => "RegField",
      Description => "When this bit is set, MBIST passed",
      Width => "22",
      Position => "21:0",
      Type => "Status",
      UsedBy => "MEM",
    },
  },
  MbistFailStatus => { #Structure Type: Reg; Skip Register;
    Name => "MbistFailStatus",
    RegMem => "Reg",
    Address => "3A",
    Description => "MBIST fail status",
    Width => "22",
    Type => "ReadOnly",
    BistDoneFailOut => { #Structure Type: RegField;
      Name => "BistDoneFailOut",
      RegMem => "RegField",
      Description => "When this bit is set, MBIST failed",
      Width => "22",
      Position => "21:0",
      Type => "Status",
      UsedBy => "MEM",
    },
  },
  TcamBistStatus => { #Structure Type: Reg; Skip Register;
    Name => "TcamBistStatus",
    RegMem => "Reg",
    Address => "3B",
    Description => "TCAM BIST pass fail status",
    Width => "8",
    Type => "ReadOnly",
    TcamBistDonePassOut => { #Structure Type: RegField;
      Name => "TcamBistDonePassOut",
      RegMem => "RegField",
      Description => "When this bit is set, TCAM BIST passed",
      Width => "4",
      Position => "3:0",
      Type => "Status",
      UsedBy => "TCAM",
    },
    TcamBistDoneFailOut => { #Structure Type: RegField;
      Name => "TcamBistDoneFailOut",
      RegMem => "RegField",
      Description => "When this bit is set, TCAM BIST failed",
      Width => "4",
      Position => "7:4",
      Type => "Status",
      UsedBy => "TCAM",
    },
  },
  TcamScanPeriodCfg => { #Structure Type: Reg; Skip Register;
    Name => "TcamScanPeriodCfg",
    RegMem => "Reg",
    Address => "3C",
    Description => "Configures period of TCAM scan for SER, set 0 to disable",
    Width => "32",
    Type => "Config",
    TcamScanPeriod => { #Structure Type: RegField;
      Name => "TcamScanPeriod",
      RegMem => "RegField",
      Description => "",
      Width => "32",
      Position => "31:0",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d120000000",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
      DefaultValue => "b0",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "3", # Excel Formula: =calc_reg_width(E25:E27,F27)
    Type => "Config",
    CoreBistRprMode => { #Structure Type: RegField;
      Name => "CoreBistRprMode",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistRun => { #Structure Type: RegField;
      Name => "CoreBistRun",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistPtrnFill => { #Structure Type: RegField;
      Name => "CoreBistPtrnFill",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E29:E29,F29)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F28,E29,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C28,A28,G28)
    Description => "Power Down Configuration for the block",
    Width => "128", # Excel Formula: =calc_reg_width(E31:E31,F31)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C30,A30,G30)
    Width => "39", # Excel Formula: =calc_reg_width(E33:E37,F37)
    Type => "Config",
    PmroExecute => { #Structure Type: RegField;
      Name => "PmroExecute",
      RegMem => "RegField",
      Description => "0->1: execute pmro command.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroCmd => { #Structure Type: RegField;
      Name => "PmroCmd",
      RegMem => "RegField",
      Description => "Pmro command to execute:
0: reset.
1: write.
2: read.
3: invalid.",
      Width => "2",
      Position => "2:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroSbusReset => { #Structure Type: RegField;
      Name => "PmroSbusReset",
      RegMem => "RegField",
      Description => "Reset pmro sbus chain. Need to set to 0 before starting access to pmro registers.",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroAddr => { #Structure Type: RegField;
      Name => "PmroAddr",
      RegMem => "RegField",
      Description => "PMRO register address:
0 - control register, 8b, def: 0x0.
1 - SVT Configuration Register, 16b, def: 0xFFFF.
2 - LVT Configuration Register, 16b, def: 0xFFFF.
3 - ULVT Configuration Register, 16b, def: 0xFFFF.
4 - Interconnect Configuration Register, 16b, def: 0xFFFF.
5 - Reference Clock Counter Register, 24b, def: 0xFFF000.
6 - Oscillator Counter Register, 24b, def: 0x000000.
7 - SBus ID register, read as 0x0B.
Set to '0' on reset command.",
      Width => "3",
      Position => "6:4", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroData => { #Structure Type: RegField;
      Name => "PmroData",
      RegMem => "RegField",
      Description => "PMRO data, set to 0x0 on reset and read command.",
      Width => "32",
      Position => "38:7", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C32,A32,G32)
    Width => "34", # Excel Formula: =calc_reg_width(E39:E41,F41)
    Type => "ReadOnly",
    PmroRdata => { #Structure Type: RegField;
      Name => "PmroRdata",
      RegMem => "RegField",
      Description => "Read data from pmro. Valid when PmroFinish=1 and PmroFailed=0.",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F38,E39,TRUE)
      Type => "Capture",
      UsedBy => "pmro",
    },
    PmroFailed => { #Structure Type: RegField;
      Name => "PmroFailed",
      RegMem => "RegField",
      Description => "Pmro command failed. Valid only when PmroFinish=1.",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F39,E40)
      Type => "Capture",
      UsedBy => "pmro",
    },
    PmroFinish => { #Structure Type: RegField;
      Name => "PmroFinish",
      RegMem => "RegField",
      Description => "Pmro command finished.",
      Width => "1",
      Position => "33", # Excel Formula: =calc_position(F40,E41)
      Type => "Event",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C38,A38,G38)
    Description => "aaa",
    Width => "11", # Excel Formula: =calc_reg_width(E43:E44,F44)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "aaa",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "aaa",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C42,A42,G42)
    Description => "aaa",
    Width => "32", # Excel Formula: =calc_reg_width(E46:E46,F46)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "aaa",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C45,A45,G45)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E48:E48,F48)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  GeneralInterrupt => { #Structure Type: Reg;
    Name => "GeneralInterrupt",
    RegMem => "Reg",
    Address => "100",
    Description => "Interrupt register for EMPD",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "Interrupt",
    EmdbDuplicateEntry => { #Structure Type: RegField;
      Name => "EmdbDuplicateEntry",
      RegMem => "RegField",
      Description => "Exact match entry has duplicated data as a result of bug. If set, consult the designer.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Interrupt",
      UsedBy => "EMPD",
    },
  },
  GeneralInterruptMask => { #Structure Type: Reg; Skip Register;
    Name => "GeneralInterruptMask",
    RegMem => "Reg",
    Address => "101",
    Description => "This register masks GeneralInterrupt interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "InterruptMask",
    EmdbDuplicateEntryMask => { #Structure Type: RegField;
      Name => "EmdbDuplicateEntryMask",
      RegMem => "RegField",
      Description => "This field masks EmdbDuplicateEntry interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptMask",
      UsedBy => "",
      DefaultValue => "b1",
    },
  },
  GeneralInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "GeneralInterruptTest",
    RegMem => "Reg",
    Address => "102",
    Description => "This register tests GeneralInterrupt interrupt register",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "InterruptTest",
    EmdbDuplicateEntryTest => { #Structure Type: RegField;
      Name => "EmdbDuplicateEntryTest",
      RegMem => "RegField",
      Description => "This field tests EmdbDuplicateEntry interrupt",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  InternalFifoAlmFull => { #Structure Type: Reg;
    Name => "InternalFifoAlmFull",
    RegMem => "Reg",
    Address => "103", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Internal EMPD fifos size settings.
This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    Width => "27", # Excel Formula: =calc_reg_width(E10:E12,F12)
    Type => "Config",
    DelReqFifoAlmFullCfg => { #Structure Type: RegField;
      Name => "DelReqFifoAlmFullCfg",
      RegMem => "RegField",
      Description => "Internal fifo size configuration.",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d8",
    },
    FbmAlmEmptyTh => { #Structure Type: RegField;
      Name => "FbmAlmEmptyTh",
      RegMem => "RegField",
      Description => "Internal fifo size configuration.",
      Width => "11",
      Position => "15:5", # Excel Formula: =calc_position(F10,E11)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d28",
    },
    FbmReduceRateTh => { #Structure Type: RegField;
      Name => "FbmReduceRateTh",
      RegMem => "RegField",
      Description => "Internal fifo size configuration.",
      Width => "11",
      Position => "26:16", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d128",
    },
  },
  FbmConfigurations => { #Structure Type: Reg;
    Name => "FbmConfigurations",
    RegMem => "Reg",
    Address => "104", # Excel Formula: =calc_reg_address(C9,A9,G9)
    Description => "EMPD free buffer manager debug configurations, allows to work with less buffers for debug scenarios, should not be changed by the user for normal operation",
    Width => "121", # Excel Formula: =calc_reg_width(E14:E17,F17)
    Type => "Config",
    FbmInit => { #Structure Type: RegField;
      Name => "FbmInit",
      RegMem => "RegField",
      Description => "If set, initializes FBM logic",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F13,E14,TRUE)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d0",
    },
    FbmWorkingMode => { #Structure Type: RegField;
      Name => "FbmWorkingMode",
      RegMem => "RegField",
      Description => "If set, manual total buffers is applied",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d0",
    },
    FbmTotalBuffers => { #Structure Type: RegField;
      Name => "FbmTotalBuffers",
      RegMem => "RegField",
      Description => "If FbmWorkingMode set, this number of buffers will be used",
      Width => "11",
      Position => "12:2", # Excel Formula: =calc_position(F15,E16)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "d1728",
    },
    FbmNotEmptyEntry => { #Structure Type: RegField;
      Name => "FbmNotEmptyEntry",
      RegMem => "RegField",
      Description => "If FbmWorkingMode set, indicates which entry in FBM is not empty",
      Width => "108", # Excel Formula: =(calc_field_width_define("PDOQ_EMDB_PDM_ENTRIES"))/calc_field_width_define("PDOQ_EMDB_FBM_WIDTH")
      Position => "120:13", # Excel Formula: =calc_position(F16,E17)
      Type => "Config",
      UsedBy => "EMPD",
      DefaultValue => "hfffffffffffffffffffffffffff",
    },
  },
  EmpdDebug => { #Structure Type: Reg;
    Name => "EmpdDebug",
    RegMem => "Reg",
    Address => "105", # Excel Formula: =calc_reg_address(C13,A13,G13)
    Description => "EMPD debug indications register",
    Width => "33", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "ReadOnly",
    ReadAccessCnt => { #Structure Type: RegField;
      Name => "ReadAccessCnt",
      RegMem => "RegField",
      Description => "Counts number of read accesses to EMPD",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Counter",
      UsedBy => "EMPD",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    WriteAccessCnt => { #Structure Type: RegField;
      Name => "WriteAccessCnt",
      RegMem => "RegField",
      Description => "Counts number of write accesses to EMPD",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F19,E20)
      Type => "Counter",
      UsedBy => "EMPD",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    FbmFull => { #Structure Type: RegField;
      Name => "FbmFull",
      RegMem => "RegField",
      Description => "EMPD FBM full indication",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F20,E21)
      Type => "Event",
      UsedBy => "EMPD",
    },
  },
  FbmDebug => { #Structure Type: Reg;
    Name => "FbmDebug",
    RegMem => "Reg",
    Address => "106", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "FBM debug indications register",
    Width => "22", # Excel Formula: =calc_reg_width(E23:E24,F24)
    Type => "ReadOnly",
    FbmMinValue => { #Structure Type: RegField;
      Name => "FbmMinValue",
      RegMem => "RegField",
      Description => "Stores minimal number of free buffers",
      Width => "11",
      Position => "10:0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "MinWmk",
      UsedBy => "EMPD",
    },
    FbmInstValue => { #Structure Type: RegField;
      Name => "FbmInstValue",
      RegMem => "RegField",
      Description => "Reflects instantaneous number of free buffers",
      Width => "11",
      Position => "21:11", # Excel Formula: =calc_position(F23,E24)
      Type => "Status",
      UsedBy => "EMPD",
    },
  },
  WriteFailDebug => { #Structure Type: Reg;
    Name => "WriteFailDebug",
    RegMem => "Reg",
    Address => "107", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "Exact match write fail debug indications register",
    Width => "80", # Excel Formula: =calc_reg_width(E26:E28,F28)
    Type => "ReadOnly",
    LastWriteFailValid => { #Structure Type: RegField;
      Name => "LastWriteFailValid",
      RegMem => "RegField",
      Description => "If set, exact match write fail occurred",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F25,E26,TRUE)
      Type => "Event",
      UsedBy => "EMPD",
    },
    LastKey => { #Structure Type: RegField;
      Name => "LastKey",
      RegMem => "RegField",
      Description => "Last Key that suffered write fail",
      Width => "24",
      Position => "24:1", # Excel Formula: =calc_position(F26,E27)
      Type => "Capture",
      UsedBy => "EMPD",
    },
    LastData => { #Structure Type: RegField;
      Name => "LastData",
      RegMem => "RegField",
      Description => "Last Data that suffered write fail",
      Width => "55",
      Position => "79:25", # Excel Formula: =calc_position(F27,E28)
      Type => "Capture",
      UsedBy => "EMPD",
    },
  },
  WriteFailDebugCounter => { #Structure Type: Reg;
    Name => "WriteFailDebugCounter",
    RegMem => "Reg",
    Address => "108", # Excel Formula: =calc_reg_address(C25,A25,G25)
    Description => "Exact match write fail events counter",
    Width => "16", # Excel Formula: =calc_reg_width(E30:E30,F30)
    Type => "ReadOnly",
    WriteFailCnt => { #Structure Type: RegField;
      Name => "WriteFailCnt",
      RegMem => "RegField",
      Description => "Counts number of exact match write fail events",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F29,E30,TRUE)
      Type => "Counter",
      UsedBy => "EMPD",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Fbm => { #Structure Type: Mem;
    Name => "Fbm",
    RegMem => "Mem",
    Address => "100000",
    Description => "Free buffer manager. 1 bit per buffer, indicating its availability.",
    Width => "22", # Excel Formula: =calc_mem_width(E32:E32,M31,F32,-1)
    Type => "Dynamic",
    UsedBy => "FBM",
    MemEntries => "108", # Excel Formula: =(calc_field_width_define("PDOQ_EMDB_PDM_ENTRIES"))/calc_field_width_define("PDOQ_EMDB_FBM_WIDTH")
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=1,SampleWriteBeforeProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,DisableSameAddressErr=Enabled,WriteActivityFactor=38,ReadActivityFactor=38,PortErrPropagate=Disabled",
    Comments => "Note that FBM memory must be eq3 ",
    MemLogicalWidth => "16",
    FbmData => { #Structure Type: MemField;
      Name => "FbmData",
      RegMem => "MemField",
      Description => "Each entry represents 128 buffers of the FBM. The memory is initiated to all ones.",
      Width => "16", # Excel Formula: =calc_field_width_define("PDOQ_EMDB_FBM_WIDTH")
      Position => "15:0", # Excel Formula: =calc_position(F31,E32,TRUE)
    },
  },
  Pdm => { #Structure Type: Mem;
    Name => "Pdm",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C31,A31,G33,L33)
    Description => "EMPD payload - packet descriptors. The address is a buffer from the FBM.",
    Width => "145", # Excel Formula: =calc_mem_width(E34:E34,M33,F34,-1)
    Type => "Dynamic",
    UsedBy => "EMPD",
    MemEntries => "1728", # Excel Formula: =calc_field_width_define("PDOQ_EMDB_PDM_ENTRIES")
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadBeforeProt=2,SampleReadAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=38,ReadActivityFactor=38,PortErrPropagate=Disabled",
    MemLogicalWidth => "136",
    PdmData => { #Structure Type: MemField;
      Name => "PdmData",
      RegMem => "MemField",
      Description => "Each entry stores the packet descriptor written to the database.",
      Width => "136", # Excel Formula: =calc_field_width_define("TXCGM2PDOQ_DUAL_PD_WIDTH")-calc_field_width_define("OQ_NUMBER_WIDTH")
      Position => "135:0", # Excel Formula: =calc_position(F33,E34,TRUE)
    },
  },
  Emdb => { #Structure Type: Mem;
    Name => "Emdb",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C33,A33,G35,L35)
    Description => "PDOQ Exact Match. Used as PDOQ database, accessed by design only.",
    Width => "11", # Excel Formula: =calc_mem_width(E36:E36,M35,F36,-1)
    Type => "DocOnly",
    UsedBy => "EMPD",
    MemEntries => "4096",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=24,SourceIdWidth=1,NumberOfBanks=4,NumberOfCamEntries=64,QuickInsert=Enabled,BinSize=2,VerifierSampleReadBeforeProt=1,VrfWriteActivityFactor=10,VrfReadActivityFactor=75,ValidSampleReadBeforeProt=1,VldWriteActivityFactor=10,VldReadActivityFactor=75,VldDisableSameAddressErr=Enabled",
    MemLogicalWidth => "11",
    EmdbData => { #Structure Type: MemField;
      Name => "EmdbData",
      RegMem => "MemField",
      Description => "PDOQ Exact Match. Used as PDOQ database, accessed by design only.",
      Width => "11",
      Position => "10:0", # Excel Formula: =calc_position(F35,E36,TRUE)
    },
  },
  DelSinglePd => { #Structure Type: Mem;
    Name => "DelSinglePd",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C33,A33,G37,L37)
    Description => "Deleted Single PD fields parsing - for internal use, not a real memory",
    Width => "49", # Excel Formula: =calc_mem_width(E38:E41,M37,F41,-1)
    Type => "DocOnly",
    UsedBy => "EMPD",
    MemEntries => "1",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PortErrPropagate=Disabled",
    MemLogicalWidth => "49",
    PacketSize => { #Structure Type: MemField;
      Name => "PacketSize",
      RegMem => "MemField",
      Width => "14", # Excel Formula: =calc_field_width_define("PKT_SIZE_WIDTH")
      Position => "13:0", # Excel Formula: =calc_position(F37,E38,TRUE)
    },
    Ucdv => { #Structure Type: MemField;
      Name => "Ucdv",
      RegMem => "MemField",
      Width => "14", # Excel Formula: =calc_field_width_define("PD_UCDV_WIDTH")
      Position => "27:14", # Excel Formula: =calc_position(F38,E39)
    },
    PacketId => { #Structure Type: MemField;
      Name => "PacketId",
      RegMem => "MemField",
      Width => "18", # Excel Formula: =calc_field_width_define("PKT_ID_WIDTH")
      Position => "45:28", # Excel Formula: =calc_position(F39,E40)
    },
    CgmCounterType => { #Structure Type: MemField;
      Name => "CgmCounterType",
      RegMem => "MemField",
      Width => "3", # Excel Formula: =calc_field_width_define("CGM_COUNTER_TYPE_WIDTH")
      Position => "48:46", # Excel Formula: =calc_position(F40,E41)
    },
  },
  DelDualPd => { #Structure Type: Mem;
    Name => "DelDualPd",
    RegMem => "Mem",
    Address => "200000", # Excel Formula: =calc_mem_address(C33,A33,G42,L42)
    Description => "Deleted Dual PD fields parsing - for internal use, not a real memory",
    Width => "55", # Excel Formula: =calc_mem_width(E43:E47,M42,F47,-1)
    Type => "DocOnly",
    UsedBy => "EMPD",
    MemEntries => "1",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PortErrPropagate=Disabled",
    MemLogicalWidth => "55",
    PacketSize0 => { #Structure Type: MemField;
      Name => "PacketSize0",
      RegMem => "MemField",
      Width => "9", # Excel Formula: =calc_field_width_define("DUAL_PD_PKT_SIZE_WIDTH")
      Position => "8:0", # Excel Formula: =calc_position(F42,E43,TRUE)
    },
    PacketSize1 => { #Structure Type: MemField;
      Name => "PacketSize1",
      RegMem => "MemField",
      Width => "9", # Excel Formula: =calc_field_width_define("DUAL_PD_PKT_SIZE_WIDTH")
      Position => "17:9", # Excel Formula: =calc_position(F43,E44)
    },
    PacketId0 => { #Structure Type: MemField;
      Name => "PacketId0",
      RegMem => "MemField",
      Width => "18", # Excel Formula: =calc_field_width_define("PKT_ID_WIDTH")
      Position => "35:18", # Excel Formula: =calc_position(F44,E45)
    },
    PacketId1 => { #Structure Type: MemField;
      Name => "PacketId1",
      RegMem => "MemField",
      Width => "18", # Excel Formula: =calc_field_width_define("PKT_ID_WIDTH")
      Position => "53:36", # Excel Formula: =calc_position(F45,E46)
    },
    DualPd => { #Structure Type: MemField;
      Name => "DualPd",
      RegMem => "MemField",
      Width => "1",
      Position => "54", # Excel Formula: =calc_position(F46,E47)
    },
  },
  EmdbVerifier0 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[4]",
    RegMem => "Mem",
    Address => "300000", # Excel Formula: =calc_mem_address(C33,A33,G48,L48)
    Width => "64", # Excel Formula: =calc_mem_width(E49:E49,M48,F49,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=10,ReadActivityFactor=75,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    MemLogicalWidth => "64",
    EmdbVerifier0Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F48,E49,TRUE)
    },
  },
  EmdbVerifier1 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[4]",
    RegMem => "Mem",
    Address => "400000",
    Width => "64", # Excel Formula: =calc_mem_width(E49:E49,M48,F49,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=10,ReadActivityFactor=75,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    MemLogicalWidth => "64",
    EmdbVerifier1Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F48,E49,TRUE)
    },
  },
  EmdbVerifier2 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[4]",
    RegMem => "Mem",
    Address => "500000",
    Width => "64", # Excel Formula: =calc_mem_width(E49:E49,M48,F49,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=10,ReadActivityFactor=75,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    MemLogicalWidth => "64",
    EmdbVerifier2Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F48,E49,TRUE)
    },
  },
  EmdbVerifier3 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbVerifier[4]",
    RegMem => "Mem",
    Address => "600000",
    Width => "64", # Excel Formula: =calc_mem_width(E49:E49,M48,F49,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=10,ReadActivityFactor=75,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    MemLogicalWidth => "64",
    EmdbVerifier3Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 13;
      Name => "EmdbVerifier[n]Data",
      RegMem => "MemField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F48,E49,TRUE)
    },
  },
  EmdbValid0 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[4]",
    RegMem => "Mem",
    Address => "700000", # Excel Formula: =calc_mem_address(C48,A48,G50,L50)
    Width => "2", # Excel Formula: =calc_mem_width(E51:E51,M50,F51,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=10,ReadActivityFactor=75,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    MemLogicalWidth => "2",
    EmdbValid0Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F50,E51,TRUE)
    },
  },
  EmdbValid1 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[4]",
    RegMem => "Mem",
    Address => "800000",
    Width => "2", # Excel Formula: =calc_mem_width(E51:E51,M50,F51,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=10,ReadActivityFactor=75,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    MemLogicalWidth => "2",
    EmdbValid1Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F50,E51,TRUE)
    },
  },
  EmdbValid2 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[4]",
    RegMem => "Mem",
    Address => "900000",
    Width => "2", # Excel Formula: =calc_mem_width(E51:E51,M50,F51,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=10,ReadActivityFactor=75,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    MemLogicalWidth => "2",
    EmdbValid2Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F50,E51,TRUE)
    },
  },
  EmdbValid3 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 10; Skip Register;
    Name => "EmdbValid[4]",
    RegMem => "Mem",
    Address => "A00000",
    Width => "2", # Excel Formula: =calc_mem_width(E51:E51,M50,F51,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=1,WriteActivityFactor=10,ReadActivityFactor=75,DisableSameAddressErr=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    MemLogicalWidth => "2",
    EmdbValid3Data => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 10;
      Name => "EmdbValid[n]Data",
      RegMem => "MemField",
      Width => "2",
      Position => "1:0", # Excel Formula: =calc_position(F50,E51,TRUE)
    },
  },
  EmdbPerBankReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[4]",
    RegMem => "Reg",
    Address => "109", # Excel Formula: =calc_reg_address(C29,A29,G29)
    Width => "50", # Excel Formula: =calc_reg_width(E53:E55,F55)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    EmdbActiveBanks0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F52,E53,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F53,E54)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F54,E55)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[4]",
    RegMem => "Reg",
    Address => "10A",
    Width => "50", # Excel Formula: =calc_reg_width(E53:E55,F55)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    EmdbActiveBanks1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F52,E53,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F53,E54)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F54,E55)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[4]",
    RegMem => "Reg",
    Address => "10B",
    Width => "50", # Excel Formula: =calc_reg_width(E53:E55,F55)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    EmdbActiveBanks2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F52,E53,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F53,E54)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F54,E55)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerBankReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 15; Skip Register;
    Name => "EmdbPerBankReg[4]",
    RegMem => "Reg",
    Address => "10C",
    Width => "50", # Excel Formula: =calc_reg_width(E53:E55,F55)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    EmdbActiveBanks3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "EmdbActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F52,E53,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "d1",
    },
    EmdbHashKey3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 12;
      Name => "EmdbHashKey[n]",
      RegMem => "RegField",
      Width => "48",
      Position => "48:1", # Excel Formula: =calc_position(F53,E54)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "EmdbUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "49", # Excel Formula: =calc_position(F54,E55)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbPerEmReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 13; Skip Register;
    Name => "EmdbPerEmReg[1]",
    RegMem => "Reg",
    Address => "10D", # Excel Formula: =calc_reg_address(C52,A52,G52)
    Width => "33", # Excel Formula: =calc_reg_width(E57:E59,F59)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    EmdbKeyWidth0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "EmdbKeyWidth[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F56,E57,TRUE)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "EmdbAutoBubbleReq[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F57,E58)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
    EmdbBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 23;
      Name => "EmdbBubbleReqThreshold[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F58,E59)
      Type => "Config",
      UsedBy => "Emdb",
      DefaultValue => "h0",
    },
  },
  EmdbCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 16; Skip Register;
    Name => "EmdbCamWmMaxReg[1]",
    RegMem => "Reg",
    Address => "10E", # Excel Formula: =calc_reg_address(C56,A56,G56)
    Width => "8", # Excel Formula: =calc_reg_width(E61:E61,F61)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "1",
    ArrayIndex => "0",
    EmdbCamWmMax0 => { #Structure Type: RegField; ArrayLength: 1; ArrayIndex: 0; ArrayLocationInName: 13;
      Name => "EmdbCamWmMax[n]",
      RegMem => "RegField",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F60,E61,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[4]",
    RegMem => "Reg",
    Address => "10F", # Excel Formula: =calc_reg_address(C60,A60,G60)
    Width => "64", # Excel Formula: =calc_reg_width(E63:E63,F63)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    EmdbBankWriteCntr0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F62,E63,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[4]",
    RegMem => "Reg",
    Address => "110",
    Width => "64", # Excel Formula: =calc_reg_width(E63:E63,F63)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    EmdbBankWriteCntr1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F62,E63,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[4]",
    RegMem => "Reg",
    Address => "111",
    Width => "64", # Excel Formula: =calc_reg_width(E63:E63,F63)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    EmdbBankWriteCntr2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F62,E63,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbBankWriteCntrReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 21; Skip Register;
    Name => "EmdbBankWriteCntrReg[4]",
    RegMem => "Reg",
    Address => "112",
    Width => "64", # Excel Formula: =calc_reg_width(E63:E63,F63)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    EmdbBankWriteCntr3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "EmdbBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F62,E63,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  EmdbCam => { #Structure Type: Mem; Skip Register;
    Name => "EmdbCam",
    RegMem => "Mem",
    Address => "B00000", # Excel Formula: =calc_mem_address(C50,A50,G64,L64)
    Width => "36", # Excel Formula: =calc_mem_width(E65:E67,"None",F67,-1)
    Type => "Dynamic",
    UsedBy => "Emdb",
    MemEntries => "64",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=11,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    Comments => "EM Skip Reg",
    MemLogicalWidth => "36",
    EmdbCam_key => { #Structure Type: MemField;
      Name => "EmdbCam_key",
      RegMem => "MemField",
      Width => "24",
      Position => "23:0", # Excel Formula: =calc_position(F64,E65,TRUE)
    },
    EmdbCam_payload => { #Structure Type: MemField;
      Name => "EmdbCam_payload",
      RegMem => "MemField",
      Width => "11",
      Position => "34:24", # Excel Formula: =calc_position(F65,E66)
    },
    EmdbCam_valid => { #Structure Type: MemField;
      Name => "EmdbCam_valid",
      RegMem => "MemField",
      Width => "1",
      Position => "35", # Excel Formula: =calc_position(F66,E67)
    },
  },
};
