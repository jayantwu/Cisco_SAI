$block{pp_reorder_slice} = {
  Defines_db => "Z:\\leaba_reg_db_example\\defines.v",
  ProjectName => "Pacific",
  InterruptRegister => { #Structure Type: Reg; Skip Register;
    Name => "InterruptRegister",
    RegMem => "Reg",
    Address => "0",
    Description => "Master Interrupt Register",
    Width => "1",
    Type => "Interrupt",
    MemProtectInterruptSummary => { #Structure Type: RegField;
      Name => "MemProtectInterruptSummary",
      RegMem => "RegField",
      Description => "When this bit is set, MemProtectInterrupt has asserted interrupt",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
    },
  },
  MemProtectInterrupt => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterrupt",
    RegMem => "Reg",
    Address => "1",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "Interrupt",
    Ecc_1bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b error was detected",
      Width => "1",
      Position => "0",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    Ecc_2bErrInterrupt => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b error was detected",
      Width => "1",
      Position => "1",
      Type => "Interrupt",
      UsedBy => "SER",
    },
    ParityErrInterrupt => { #Structure Type: RegField;
      Name => "ParityErrInterrupt",
      RegMem => "RegField",
      Description => "When this bit is set, Parity error was detected",
      Width => "1",
      Position => "2",
      Type => "Interrupt",
      UsedBy => "SER",
    },
  },
  MemProtectInterruptTest => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectInterruptTest",
    RegMem => "Reg",
    Address => "2",
    Description => "ECC/Parity Interrupt Register",
    Width => "3",
    Type => "InterruptTest",
    Ecc_1bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_1bErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks Ecc_1bErrInterrupt",
      Width => "1",
      Position => "0",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    Ecc_2bErrInterruptTest => { #Structure Type: RegField;
      Name => "Ecc_2bErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks Ecc_2bErrInterrupt",
      Width => "1",
      Position => "1",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
    ParityErrInterruptTest => { #Structure Type: RegField;
      Name => "ParityErrInterruptTest",
      RegMem => "RegField",
      Description => "This field masks ParityErrInterrupt",
      Width => "1",
      Position => "2",
      Type => "InterruptTest",
      UsedBy => "",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "3",
    Description => "ECC 1b Error Interrupt Mask Register",
    Width => "22",
    Type => "Config",
    Fifo0NewPkts0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Fifo0NewPkts0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Fifo0NewPkts1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Fifo0NewPkts1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Fifo1NewPkts0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Fifo1NewPkts0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Fifo1NewPkts1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "Fifo1NewPkts1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpReorderRdFifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpReorderRdFifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpReorderRdFifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpReorderRdFifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpConnectionTable0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpConnectionTable0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpConnectionTable1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpConnectionTable1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    OutPdFifo0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "OutPdFifo0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    OutPdFifo1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "OutPdFifo1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchPdMemoryNarrow0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryNarrow0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchPdMemoryNarrow1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryNarrow1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchPdMemoryWide0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryWide0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchPdMemoryWide1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryWide1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier0Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier0Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier1Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier1Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier2Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier2Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier3Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier3Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier4Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier4Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier5Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier5Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier6Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier6Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier7Ecc_1bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier7Ecc_1bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },
  Ecc_2bErrInterruptRegisterMask => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInterruptRegisterMask",
    RegMem => "Reg",
    Address => "4",
    Description => "ECC 2b Error Interrupt Mask Register",
    Width => "22",
    Type => "Config",
    Fifo0NewPkts0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Fifo0NewPkts0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Fifo0NewPkts1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Fifo0NewPkts1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Fifo1NewPkts0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Fifo1NewPkts0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    Fifo1NewPkts1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "Fifo1NewPkts1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpReorderRdFifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpReorderRdFifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpReorderRdFifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpReorderRdFifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpConnectionTable0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpConnectionTable0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpConnectionTable1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpConnectionTable1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    OutPdFifo0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "OutPdFifo0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    OutPdFifo1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "OutPdFifo1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchPdMemoryNarrow0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryNarrow0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchPdMemoryNarrow1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryNarrow1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchPdMemoryWide0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryWide0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchPdMemoryWide1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryWide1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier0Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier0Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier1Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier1Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier2Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier2Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier3Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier3Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier4Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier4Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier5Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier5Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier6Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier6Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
    PpExactMatchVerifier7Ecc_2bErrInterruptMask => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier7Ecc_2bErrInterruptMask",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error indication will be masked",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b1",
    },
  },

  Ecc_1bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrInitiateRegister",
    RegMem => "Reg",
    Address => "30",
    Description => "ECC 1b Error Initiator Register",
    Width => "22",
    Type => "Config",
    Fifo0NewPkts0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Fifo0NewPkts0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Fifo0NewPkts1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Fifo0NewPkts1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Fifo1NewPkts0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Fifo1NewPkts0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Fifo1NewPkts1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "Fifo1NewPkts1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpReorderRdFifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpReorderRdFifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpReorderRdFifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpReorderRdFifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpConnectionTable0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpConnectionTable0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpConnectionTable1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpConnectionTable1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    OutPdFifo0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "OutPdFifo0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    OutPdFifo1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "OutPdFifo1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchPdMemoryNarrow0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryNarrow0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchPdMemoryNarrow1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryNarrow1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchPdMemoryWide0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryWide0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchPdMemoryWide1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryWide1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier0Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier0Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier1Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier1Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier2Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier2Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier3Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier3Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier4Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier4Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier5Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier5Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier6Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier6Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier7Ecc_1bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier7Ecc_1bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 1b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  Ecc_2bErrInitiateRegister => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrInitiateRegister",
    RegMem => "Reg",
    Address => "31",
    Description => "ECC 2b Error Initiator Register",
    Width => "22",
    Type => "Config",
    Fifo0NewPkts0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Fifo0NewPkts0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "0",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Fifo0NewPkts1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Fifo0NewPkts1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "1",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Fifo1NewPkts0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Fifo1NewPkts0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "2",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    Fifo1NewPkts1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "Fifo1NewPkts1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "3",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpReorderRdFifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpReorderRdFifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "4",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpReorderRdFifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpReorderRdFifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpConnectionTable0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpConnectionTable0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "6",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpConnectionTable1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpConnectionTable1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "7",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    OutPdFifo0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "OutPdFifo0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "8",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    OutPdFifo1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "OutPdFifo1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "9",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchPdMemoryNarrow0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryNarrow0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "10",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchPdMemoryNarrow1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryNarrow1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "11",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchPdMemoryWide0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryWide0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "12",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchPdMemoryWide1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryWide1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "13",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier0Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier0Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "14",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier1Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier1Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "15",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier2Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier2Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "16",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier3Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier3Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "17",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier4Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier4Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "18",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier5Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier5Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "19",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier6Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier6Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "20",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    PpExactMatchVerifier7Ecc_2bErrInitiate => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier7Ecc_2bErrInitiate",
      RegMem => "RegField",
      Description => "When this bit is set, ECC 2b Error will be initiated",
      Width => "1",
      Position => "21",
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  MemProtectErrStatus => { #Structure Type: Reg; Skip Register;
    Name => "MemProtectErrStatus",
    RegMem => "Reg",
    Address => "33",
    Description => "Memory SER protected error status",
    Width => "22",
    Type => "ReadOnly",
    Fifo0NewPkts0ErrInt => { #Structure Type: RegField;
      Name => "Fifo0NewPkts0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "0",
      Type => "Status",
      UsedBy => "SER",
    },
    Fifo0NewPkts1ErrInt => { #Structure Type: RegField;
      Name => "Fifo0NewPkts1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "1",
      Type => "Status",
      UsedBy => "SER",
    },
    Fifo1NewPkts0ErrInt => { #Structure Type: RegField;
      Name => "Fifo1NewPkts0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "2",
      Type => "Status",
      UsedBy => "SER",
    },
    Fifo1NewPkts1ErrInt => { #Structure Type: RegField;
      Name => "Fifo1NewPkts1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "3",
      Type => "Status",
      UsedBy => "SER",
    },
    PpReorderRdFifo0ErrInt => { #Structure Type: RegField;
      Name => "PpReorderRdFifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "4",
      Type => "Status",
      UsedBy => "SER",
    },
    PpReorderRdFifo1ErrInt => { #Structure Type: RegField;
      Name => "PpReorderRdFifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "5",
      Type => "Status",
      UsedBy => "SER",
    },
    PpConnectionTable0ErrInt => { #Structure Type: RegField;
      Name => "PpConnectionTable0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "6",
      Type => "Status",
      UsedBy => "SER",
    },
    PpConnectionTable1ErrInt => { #Structure Type: RegField;
      Name => "PpConnectionTable1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "7",
      Type => "Status",
      UsedBy => "SER",
    },
    OutPdFifo0ErrInt => { #Structure Type: RegField;
      Name => "OutPdFifo0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "8",
      Type => "Status",
      UsedBy => "SER",
    },
    OutPdFifo1ErrInt => { #Structure Type: RegField;
      Name => "OutPdFifo1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "9",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchPdMemoryNarrow0ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryNarrow0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "10",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchPdMemoryNarrow1ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryNarrow1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "11",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchPdMemoryWide0ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryWide0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "12",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchPdMemoryWide1ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchPdMemoryWide1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "13",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchVerifier0ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier0ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "14",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchVerifier1ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier1ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "15",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchVerifier2ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier2ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "16",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchVerifier3ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier3ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "17",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchVerifier4ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier4ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "18",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchVerifier5ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier5ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "19",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchVerifier6ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier6ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "20",
      Type => "Status",
      UsedBy => "SER",
    },
    PpExactMatchVerifier7ErrInt => { #Structure Type: RegField;
      Name => "PpExactMatchVerifier7ErrInt",
      RegMem => "RegField",
      Description => "When this bit is set, SER Error occured",
      Width => "1",
      Position => "21",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SelectedSerErrorInfo => { #Structure Type: Reg; Skip Register;
    Name => "SelectedSerErrorInfo",
    RegMem => "Reg",
    Address => "34",
    Description => "Address and Type of SER error of selected memory",
    Width => "13",
    Type => "ReadOnly",
    MemErrAddr => { #Structure Type: RegField;
      Name => "MemErrAddr",
      RegMem => "RegField",
      Description => "Address of SER error of selected memory",
      Width => "11",
      Position => "10:0",
      Type => "Status",
      UsedBy => "SER",
    },
    MemErrType => { #Structure Type: RegField;
      Name => "MemErrType",
      RegMem => "RegField",
      Description => "0 = ECC 1b, 1 = ECC 2b, 2 = Parity",
      Width => "2",
      Position => "12:11",
      Type => "Status",
      UsedBy => "SER",
    },
  },
  SerErrorDebugConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SerErrorDebugConfiguration",
    RegMem => "Reg",
    Address => "35",
    Description => "Address and Type of SER error of selected memory",
    Width => "6",
    Type => "Config",
    ErroneousMemorySelector => { #Structure Type: RegField;
      Name => "ErroneousMemorySelector",
      RegMem => "RegField",
      Description => "Selects which memory error address and error type to set on the status register",
      Width => "5",
      Position => "4:0",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
    ResetMemoryErrors => { #Structure Type: RegField;
      Name => "ResetMemoryErrors",
      RegMem => "RegField",
      Description => "When set to 1 - all the memory SER errors are reset. Need to set back to 0 to resume error recording",
      Width => "1",
      Position => "5",
      Type => "Config",
      UsedBy => "SER",
      DefaultValue => "b0",
    },
  },
  Ecc_1bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_1bErrDebug",
    RegMem => "Reg",
    Address => "36",
    Description => "ECC 1b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_1bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_1bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 1b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  Ecc_2bErrDebug => { #Structure Type: Reg; Skip Register;
    Name => "Ecc_2bErrDebug",
    RegMem => "Reg",
    Address => "37",
    Description => "ECC 2b Error Counter",
    Width => "16",
    Type => "ReadOnly",
    Ecc_2bErrCounter => { #Structure Type: RegField;
      Name => "Ecc_2bErrCounter",
      RegMem => "RegField",
      Description => "Counts number of ECC 2b errors",
      Width => "16",
      Position => "15:0",
      Type => "Counter",
      UsedBy => "SER",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  MbistPassStatus => { #Structure Type: Reg; Skip Register;
    Name => "MbistPassStatus",
    RegMem => "Reg",
    Address => "39",
    Description => "MBIST pass status",
    Width => "68",
    Type => "ReadOnly",
    BistDonePassOut => { #Structure Type: RegField;
      Name => "BistDonePassOut",
      RegMem => "RegField",
      Description => "When this bit is set, MBIST passed",
      Width => "68",
      Position => "67:0",
      Type => "Status",
      UsedBy => "MEM",
    },
  },
  MbistFailStatus => { #Structure Type: Reg; Skip Register;
    Name => "MbistFailStatus",
    RegMem => "Reg",
    Address => "3A",
    Description => "MBIST fail status",
    Width => "68",
    Type => "ReadOnly",
    BistDoneFailOut => { #Structure Type: RegField;
      Name => "BistDoneFailOut",
      RegMem => "RegField",
      Description => "When this bit is set, MBIST failed",
      Width => "68",
      Position => "67:0",
      Type => "Status",
      UsedBy => "MEM",
    },
  },
  TcamBistStatus => { #Structure Type: Reg; Skip Register;
    Name => "TcamBistStatus",
    RegMem => "Reg",
    Address => "3B",
    Description => "TCAM BIST pass fail status",
    Width => "32",
    Type => "ReadOnly",
    TcamBistDonePassOut => { #Structure Type: RegField;
      Name => "TcamBistDonePassOut",
      RegMem => "RegField",
      Description => "When this bit is set, TCAM BIST passed",
      Width => "16",
      Position => "15:0",
      Type => "Status",
      UsedBy => "TCAM",
    },
    TcamBistDoneFailOut => { #Structure Type: RegField;
      Name => "TcamBistDoneFailOut",
      RegMem => "RegField",
      Description => "When this bit is set, TCAM BIST failed",
      Width => "16",
      Position => "31:16",
      Type => "Status",
      UsedBy => "TCAM",
    },
  },
  TcamScanPeriodCfg => { #Structure Type: Reg; Skip Register;
    Name => "TcamScanPeriodCfg",
    RegMem => "Reg",
    Address => "3C",
    Description => "Configures period of TCAM scan for SER, set 0 to disable",
    Width => "32",
    Type => "Config",
    TcamScanPeriod => { #Structure Type: RegField;
      Name => "TcamScanPeriod",
      RegMem => "RegField",
      Description => "",
      Width => "32",
      Position => "31:0",
      Type => "Config",
      UsedBy => "TCAM",
      DefaultValue => "d120000000",
    },
  },

  CounterTimer => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimer",
    RegMem => "Reg",
    Address => "40",
    Description => "Defines Counter Timer parameters",
    Width => "33", # Excel Formula: =calc_reg_width(E8:E9,F9)
    Type => "Config",
    CounterTimerEnable => { #Structure Type: RegField;
      Name => "CounterTimerEnable",
      RegMem => "RegField",
      Description => "If set, Counter Timer will applied for the counters, otherwise the counters are free running",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
    CounterTimerCycle => { #Structure Type: RegField;
      Name => "CounterTimerCycle",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "32",
      Position => "32:1", # Excel Formula: =calc_position(F8,E9)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h3B9ACA00",
    },
  },
  CounterTimerTriggerReg => { #Structure Type: Reg; Skip Register;
    Name => "CounterTimerTriggerReg",
    RegMem => "Reg",
    Address => "41", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Description => "Activates Counter Timer",
    Width => "1", # Excel Formula: =calc_reg_width(E11:E11,F11)
    Type => "External",
    UsedBy => "CIF",
    CounterTimerTrigger => { #Structure Type: RegField;
      Name => "CounterTimerTrigger",
      RegMem => "RegField",
      Description => "When activated, CounterTimer will count for CounterTimerCycle",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F10,E11,TRUE)
      Type => "External",
      DefaultValue => "b0",
    },
  },
  MemoryAccessTimeout => { #Structure Type: Reg; Skip Register;
    Name => "MemoryAccessTimeout",
    RegMem => "Reg",
    Address => "42", # Excel Formula: =calc_reg_address(C10,A10,G10)
    Description => "Defines parameters for memory access timer expiry",
    Width => "38", # Excel Formula: =calc_reg_width(E13:E15,F15)
    Type => "Config",
    BubbleCounterThr => { #Structure Type: RegField;
      Name => "BubbleCounterThr",
      RegMem => "RegField",
      Description => "When BubbleCounterThr clocks passed from CIF memory access without grant, Bubble Request signal raised towards the block ",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F12,E13,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d256",
    },
    TimeoutCounterThr => { #Structure Type: RegField;
      Name => "TimeoutCounterThr",
      RegMem => "RegField",
      Description => "When TimeoutCounterThr clocks passed from CIF memory access without grant, the access is terminated with error ",
      Width => "16",
      Position => "31:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d4096",
    },
    AnsWindowCounterThr => { #Structure Type: RegField;
      Name => "AnsWindowCounterThr",
      RegMem => "RegField",
      Description => "When memory access is terminated because of  TimeoutCounterThr, the CIF waits AnsWindowCounterThr clocks for access termination",
      Width => "6",
      Position => "37:32", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "d16",
    },
  },
  BroadcastConfigReg => { #Structure Type: Reg; Skip Register;
    Name => "BroadcastConfigReg",
    RegMem => "Reg",
    Address => "43", # Excel Formula: =calc_reg_address(C12,A12,G12)
    Description => "Config Top broadcast parameters",
    Width => "12", # Excel Formula: =calc_reg_width(E17:E17,F17)
    Type => "Config",
    BroadcastId => { #Structure Type: RegField;
      Name => "BroadcastId",
      RegMem => "RegField",
      Description => "Broadcast ID used by Config Top protocol for broadcast messages",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F16,E17,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hFFF",
    },
  },
  MemoryProtBypass => { #Structure Type: Reg; Skip Register;
    Name => "MemoryProtBypass",
    RegMem => "Reg",
    Address => "44", # Excel Formula: =calc_reg_address(C16,A16,G16)
    Description => "Bypass for ECC/Parity, used for debug",
    Width => "3", # Excel Formula: =calc_reg_width(E19:E21,F21)
    Type => "Config",
    DisableEcc => { #Structure Type: RegField;
      Name => "DisableEcc",
      RegMem => "RegField",
      Description => "If set, ECC fix is bypassed and is taken from payload",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F18,E19,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtGenBypass => { #Structure Type: RegField;
      Name => "CifProtGenBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity generation is bypassed and is taken from payload for CIF access",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CifProtFixBypass => { #Structure Type: RegField;
      Name => "CifProtFixBypass",
      RegMem => "RegField",
      Description => "If set, ECC/Parity fix is bypassed and original ECC/Parity is forwarded towards the CIF",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  SoftResetConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "SoftResetConfiguration",
    RegMem => "Reg",
    Address => "45", # Excel Formula: =calc_reg_address(C18,A18,G18)
    Description => "Soft Reset Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E23:E23,F23)
    Type => "Config",
    SoftRstn => { #Structure Type: RegField;
      Name => "SoftRstn",
      RegMem => "RegField",
      Description => "Triggers soft reset signal for the block, active low register",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F22,E23,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
    },
  },
  MbistConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "MbistConfiguration",
    RegMem => "Reg",
    Address => "46", # Excel Formula: =calc_reg_address(C22,A22,G22)
    Description => "MBIST Configuration for the block",
    Width => "3", # Excel Formula: =calc_reg_width(E25:E27,F27)
    Type => "Config",
    CoreBistRprMode => { #Structure Type: RegField;
      Name => "CoreBistRprMode",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F24,E25,TRUE)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistRun => { #Structure Type: RegField;
      Name => "CoreBistRun",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F25,E26)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
    CoreBistPtrnFill => { #Structure Type: RegField;
      Name => "CoreBistPtrnFill",
      RegMem => "RegField",
      Description => "Used by MBIST logic",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F26,E27)
      Type => "Config",
      UsedBy => "MEM",
      DefaultValue => "b0",
    },
  },
  PowerDownConfiguration => { #Structure Type: Reg; Skip Register;
    Name => "PowerDownConfiguration",
    RegMem => "Reg",
    Address => "47", # Excel Formula: =calc_reg_address(C24,A24,G24)
    Description => "Power Down Configuration for the block",
    Width => "1", # Excel Formula: =calc_reg_width(E29:E29,F29)
    Type => "Config",
    PowerDown => { #Structure Type: RegField;
      Name => "PowerDown",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F28,E29,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "b0",
      Comments => "Default value should always be 0",
    },
  },
  SpareReg => { #Structure Type: Reg; Skip Register;
    Name => "SpareReg",
    RegMem => "Reg",
    Address => "48", # Excel Formula: =calc_reg_address(C28,A28,G28)
    Description => "Power Down Configuration for the block",
    Width => "128", # Excel Formula: =calc_reg_width(E31:E31,F31)
    Type => "Config",
    SpareRegister => { #Structure Type: RegField;
      Name => "SpareRegister",
      RegMem => "RegField",
      Description => "If set, disables the clock of the block",
      Width => "128",
      Position => "127:0", # Excel Formula: =calc_position(F30,E31,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "hffffffffffffffff",
    },
  },
  PmroCtrl => { #Structure Type: Reg; Skip Register;
    Name => "PmroCtrl",
    RegMem => "Reg",
    Address => "49", # Excel Formula: =calc_reg_address(C30,A30,G30)
    Width => "39", # Excel Formula: =calc_reg_width(E33:E37,F37)
    Type => "Config",
    PmroExecute => { #Structure Type: RegField;
      Name => "PmroExecute",
      RegMem => "RegField",
      Description => "0->1: execute pmro command.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroCmd => { #Structure Type: RegField;
      Name => "PmroCmd",
      RegMem => "RegField",
      Description => "Pmro command to execute:
0: reset.
1: write.
2: read.
3: invalid.",
      Width => "2",
      Position => "2:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d0",
    },
    PmroSbusReset => { #Structure Type: RegField;
      Name => "PmroSbusReset",
      RegMem => "RegField",
      Description => "Reset pmro sbus chain. Need to set to 0 before starting access to pmro registers.",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F34,E35)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroAddr => { #Structure Type: RegField;
      Name => "PmroAddr",
      RegMem => "RegField",
      Description => "PMRO register address:
0 - control register, 8b, def: 0x0.
1 - SVT Configuration Register, 16b, def: 0xFFFF.
2 - LVT Configuration Register, 16b, def: 0xFFFF.
3 - ULVT Configuration Register, 16b, def: 0xFFFF.
4 - Interconnect Configuration Register, 16b, def: 0xFFFF.
5 - Reference Clock Counter Register, 24b, def: 0xFFF000.
6 - Oscillator Counter Register, 24b, def: 0x000000.
7 - SBus ID register, read as 0x0B.
Set to '0' on reset command.",
      Width => "3",
      Position => "6:4", # Excel Formula: =calc_position(F35,E36)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
    PmroData => { #Structure Type: RegField;
      Name => "PmroData",
      RegMem => "RegField",
      Description => "PMRO data, set to 0x0 on reset and read command.",
      Width => "32",
      Position => "38:7", # Excel Formula: =calc_position(F36,E37)
      Type => "Config",
      UsedBy => "pmro",
      DefaultValue => "d1",
    },
  },
  PmroStatus => { #Structure Type: Reg; Skip Register;
    Name => "PmroStatus",
    RegMem => "Reg",
    Address => "4A", # Excel Formula: =calc_reg_address(C32,A32,G32)
    Width => "34", # Excel Formula: =calc_reg_width(E39:E41,F41)
    Type => "ReadOnly",
    PmroRdata => { #Structure Type: RegField;
      Name => "PmroRdata",
      RegMem => "RegField",
      Description => "Read data from pmro. Valid when PmroFinish=1 and PmroFailed=0.",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F38,E39,TRUE)
      Type => "Capture",
      UsedBy => "pmro",
    },
    PmroFailed => { #Structure Type: RegField;
      Name => "PmroFailed",
      RegMem => "RegField",
      Description => "Pmro command failed. Valid only when PmroFinish=1.",
      Width => "1",
      Position => "32", # Excel Formula: =calc_position(F39,E40)
      Type => "Capture",
      UsedBy => "pmro",
    },
    PmroFinish => { #Structure Type: RegField;
      Name => "PmroFinish",
      RegMem => "RegField",
      Description => "Pmro command finished.",
      Width => "1",
      Position => "33", # Excel Formula: =calc_position(F40,E41)
      Type => "Event",
      UsedBy => "pmro",
    },
  },
  MirrorBusConfReg => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusConfReg",
    RegMem => "Reg",
    Address => "4B", # Excel Formula: =calc_reg_address(C38,A38,G38)
    Description => "aaa",
    Width => "11", # Excel Formula: =calc_reg_width(E43:E44,F44)
    Type => "Config",
    MirrorBusEn => { #Structure Type: RegField;
      Name => "MirrorBusEn",
      RegMem => "RegField",
      Description => "aaa",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F42,E43,TRUE)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
    MirrorBusSel => { #Structure Type: RegField;
      Name => "MirrorBusSel",
      RegMem => "RegField",
      Description => "aaa",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F43,E44)
      Type => "Config",
      UsedBy => "BLOCK",
      DefaultValue => "h0",
    },
  },
  MirrorBusStatus => { #Structure Type: Reg; Skip Register;
    Name => "MirrorBusStatus",
    RegMem => "Reg",
    Address => "4C", # Excel Formula: =calc_reg_address(C42,A42,G42)
    Description => "aaa",
    Width => "32", # Excel Formula: =calc_reg_width(E46:E46,F46)
    Type => "ReadOnly",
    MirrorBus => { #Structure Type: RegField;
      Name => "MirrorBus",
      RegMem => "RegField",
      Description => "aaa",
      Width => "32",
      Position => "31:0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Status",
      UsedBy => "BLOCK",
    },
  },
  DeviceTimeOffsetCfg => { #Structure Type: Reg; Skip Register;
    Name => "DeviceTimeOffsetCfg",
    RegMem => "Reg",
    Address => "4D", # Excel Formula: =calc_reg_address(C45,A45,G45)
    Description => "Define time offset configuration",
    Width => "10", # Excel Formula: =calc_reg_width(E48:E48,F48)
    Type => "Config",
    DeviceTimeOffset => { #Structure Type: RegField;
      Name => "DeviceTimeOffset",
      RegMem => "RegField",
      Description => "Define time offset",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "CIF",
      DefaultValue => "h0",
    },
  },
  ReorderGlobalReg => { #Structure Type: Reg;
    Name => "ReorderGlobalReg",
    RegMem => "Reg",
    Address => "100",
    Width => "1", # Excel Formula: =calc_reg_width(E8:E8,F8)
    Type => "ReadOnly",
    ReorderInitDone => { #Structure Type: RegField;
      Name => "ReorderInitDone",
      RegMem => "RegField",
      Description => "Indicates that all the reorder tables finished the init process",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F7,E8,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  SliceConfiguration => { #Structure Type: Reg;
    Name => "SliceConfiguration",
    RegMem => "Reg",
    Address => "101", # Excel Formula: =calc_reg_address(C7,A7,G7)
    Width => "23", # Excel Formula: =calc_reg_width(E10:E16,F16)
    Type => "Config",
    SliceMySliceNumber => { #Structure Type: RegField;
      Name => "SliceMySliceNumber",
      RegMem => "RegField",
      Description => "The slice number of the block.",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F9,E10,TRUE)
      Type => "Config",
      UsedBy => "SPLIT,MERGER,OUT",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    SliceIfg0MaxSourcePortNumber => { #Structure Type: RegField;
      Name => "SliceIfg0MaxSourcePortNumber",
      RegMem => "RegField",
      Description => "Indicates the maximal port number that belong to IFG 0",
      Width => "6",
      Position => "8:3", # Excel Formula: =calc_position(F10,E11)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d19",
      Comments => "Constant",
    },
    SliceReorderBlockNumOffset => { #Structure Type: RegField;
      Name => "SliceReorderBlockNumOffset",
      RegMem => "RegField",
      Description => "The offset added to the block number selected according to the mode  Slice[n]ReorderBlockSelMode.
Used in SLB mode:
Conf to h0,h0,h0,h0,h2,h4
",
      Width => "3",
      Position => "11:9", # Excel Formula: =calc_position(F11,E12)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Change to global mode that sets these values to ease the SW",
    },
    SliceMode => { #Structure Type: RegField;
      Name => "SliceMode",
      RegMem => "RegField",
      Description => "0  // Linecard mode CRF TS network slice
1  // Linecard mode CRF SN network slice
2  // Linecard mode CRF TS fabric slice
3  // Linecard mode CRF SN fabric slice
4  // TOR mode network slice 
5  // TOR mode fabric slice
6  // FE mode with TS
7  // FE mode with SN
8  // Stand alone
9 // DRAM slice ",
      Width => "4",
      Position => "15:12", # Excel Formula: =calc_position(F12,E13)
      Type => "Config",
      UsedBy => "MERGER,OUT_LOGIC,SPLIT",
      DefaultValue => "d0",
    },
    SliceReorderBlockSelMode => { #Structure Type: RegField;
      Name => "SliceReorderBlockSelMode",
      RegMem => "RegField",
      Description => "Indictes how many blocks participate in the reorder chain:
0 - 2 blocks
1 - 4 blocks
2 - 6 blocks
3 - Selection by IFG",
      Width => "2",
      Position => "17:16", # Excel Formula: =calc_position(F13,E14)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h3",
      Comments => "Change to global mode that sets these values to ease the SW",
    },
    ReorderFullPreventionEnable => { #Structure Type: RegField;
      Name => "ReorderFullPreventionEnable",
      RegMem => "RegField",
      Description => "If set to 1 - the reorder full prevention mechanism is activated.
The mechanism reduces the input rate according to configuration to enable the reorder to empty itself and by that prevent packet dropps due to reorder full.",
      Width => "1",
      Position => "18", # Excel Formula: =calc_position(F14,E15)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Change to global mode that sets these values to ease the SW",
    },
    ReorderFullPreventionRateLimiting => { #Structure Type: RegField;
      Name => "ReorderFullPreventionRateLimiting",
      RegMem => "RegField",
      Description => "Defines the maximal number of PDs that the reorder will insert to the reorder blocks when the reorder is almost full in a time window of 16cc.
If set to 15 - 15 PDs may be inserted in 16cc
If set to 1 - only one PD will be inserted in 16cc.",
      Width => "4",
      Position => "22:19", # Excel Formula: =calc_position(F15,E16)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Change to global mode that sets these values to ease the SW",
    },
  },
  BlockGeneralConfigurations0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 27;
    Name => "BlockGeneralConfigurations[2]",
    RegMem => "Reg",
    Address => "102", # Excel Formula: =calc_reg_address(C9,A9,G9)
    Width => "38", # Excel Formula: =calc_reg_width(E18:E25,F25)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0ReorderBlockNumber => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]ReorderBlockNumber",
      RegMem => "RegField",
      Description => "The reorder block number inside the chain",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant. Consider removing and check if ifluences SLB",
      DefaultValueArray => "h0,h1",
    },
    Block0RdFifoThrToReceiveStrictPrio => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]RdFifoThrToReceiveStrictPrio",
      RegMem => "RegField",
      Description => "When the Rd FIFO reaches this threshold - it receives strict priority over PDs.
This threshold is not needed in PP reorder slices since the FIFO size is above the maximal number of connections.",
      Width => "10",
      Position => "12:3", # Excel Formula: =calc_position(F18,E19)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h3FF",
      Comments => "Default",
    },
    Block0EnableMaskingPdForAssuredReadRd => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]EnableMaskingPdForAssuredReadRd",
      RegMem => "RegField",
      Description => "Enables giving priority to RDs over new packets at the reorder entrance.",
      Width => "1",
      Position => "13", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
      Comments => "Constant",
    },
    Block0PpReorderMinConnectionNumber => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]PpReorderMinConnectionNumber",
      RegMem => "RegField",
      Description => "The minimal connection number associated with PP reorder.
Used for aging and init.",
      Width => "13",
      Position => "26:14", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Block0NumOfReorderBlocks => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]NumOfReorderBlocks",
      RegMem => "RegField",
      Description => "Indicates how many reorder blocks are connected in the chain",
      Width => "3",
      Position => "29:27", # Excel Formula: =calc_position(F21,E22)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    Block0MySliceNumber => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MySliceNumber",
      RegMem => "RegField",
      Description => "Indicates the slice number of the block",
      Width => "3",
      Position => "32:30", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Default value is not suitable - need to configure",
    },
    Block0SliceMode => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]SliceMode",
      RegMem => "RegField",
      Description => "0  // Linecard mode CRF TS network slice
1  // Linecard mode CRF SN network slice
2  // Linecard mode CRF TS fabric slice
3  // Linecard mode CRF SN fabric slice
4  // TOR mode network slice with SLB
5  // TOR mode network slice with PLB --> not supported
6  // TOR mode fabric slice with SLB
7  // TOR mode fabric slice with PLB --> not supported
8  // FE mode with TS
9  // FE mode with SN
10 // DRAM slice ",
      Width => "4",
      Position => "36:33", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d0",
    },
    Slice0PacketLossDetectionUsingSkewEnable => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Slice[n]PacketLossDetectionUsingSkewEnable",
      RegMem => "RegField",
      Description => "If set to 1 - the packet loss detection using the configurable skew is enabled.",
      Width => "1",
      Position => "37", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d1",
      Comments => "ConfigDB",
    },
  },
  BlockGeneralConfigurations1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 27;
    Name => "BlockGeneralConfigurations[2]",
    RegMem => "Reg",
    Address => "103",
    Width => "38", # Excel Formula: =calc_reg_width(E18:E25,F25)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1ReorderBlockNumber => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]ReorderBlockNumber",
      RegMem => "RegField",
      Description => "The reorder block number inside the chain",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F17,E18,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
      Comments => "Constant. Consider removing and check if ifluences SLB",
      DefaultValueArray => "h0,h1",
    },
    Block1RdFifoThrToReceiveStrictPrio => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]RdFifoThrToReceiveStrictPrio",
      RegMem => "RegField",
      Description => "When the Rd FIFO reaches this threshold - it receives strict priority over PDs.
This threshold is not needed in PP reorder slices since the FIFO size is above the maximal number of connections.",
      Width => "10",
      Position => "12:3", # Excel Formula: =calc_position(F18,E19)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h3FF",
      Comments => "Default",
    },
    Block1EnableMaskingPdForAssuredReadRd => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]EnableMaskingPdForAssuredReadRd",
      RegMem => "RegField",
      Description => "Enables giving priority to RDs over new packets at the reorder entrance.",
      Width => "1",
      Position => "13", # Excel Formula: =calc_position(F19,E20)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
      Comments => "Constant",
    },
    Block1PpReorderMinConnectionNumber => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]PpReorderMinConnectionNumber",
      RegMem => "RegField",
      Description => "The minimal connection number associated with PP reorder.
Used for aging and init.",
      Width => "13",
      Position => "26:14", # Excel Formula: =calc_position(F20,E21)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Block1NumOfReorderBlocks => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]NumOfReorderBlocks",
      RegMem => "RegField",
      Description => "Indicates how many reorder blocks are connected in the chain",
      Width => "3",
      Position => "29:27", # Excel Formula: =calc_position(F21,E22)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    Block1MySliceNumber => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MySliceNumber",
      RegMem => "RegField",
      Description => "Indicates the slice number of the block",
      Width => "3",
      Position => "32:30", # Excel Formula: =calc_position(F22,E23)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Default value is not suitable - need to configure",
    },
    Block1SliceMode => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]SliceMode",
      RegMem => "RegField",
      Description => "0  // Linecard mode CRF TS network slice
1  // Linecard mode CRF SN network slice
2  // Linecard mode CRF TS fabric slice
3  // Linecard mode CRF SN fabric slice
4  // TOR mode network slice with SLB
5  // TOR mode network slice with PLB --> not supported
6  // TOR mode fabric slice with SLB
7  // TOR mode fabric slice with PLB --> not supported
8  // FE mode with TS
9  // FE mode with SN
10 // DRAM slice ",
      Width => "4",
      Position => "36:33", # Excel Formula: =calc_position(F23,E24)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d0",
    },
    Slice1PacketLossDetectionUsingSkewEnable => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Slice[n]PacketLossDetectionUsingSkewEnable",
      RegMem => "RegField",
      Description => "If set to 1 - the packet loss detection using the configurable skew is enabled.",
      Width => "1",
      Position => "37", # Excel Formula: =calc_position(F24,E25)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d1",
      Comments => "ConfigDB",
    },
  },
  BlockThresholdsConfiguration0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 29;
    Name => "BlockThresholdsConfiguration[2]",
    RegMem => "Reg",
    Address => "104", # Excel Formula: =calc_reg_address(C17,A17,G17)
    Width => "32", # Excel Formula: =calc_reg_width(E27:E31,F31)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0NewPktsFifoNotReadyThreshold => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]NewPktsFifoNotReadyThreshold",
      RegMem => "RegField",
      Description => "Determines in which fill level the new packets FIFO issues not ready to:
- The MMA (incase of PLB/SLB in FB slice)
- The in PD FIFOs (incase of NW slice)",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h30",
      Comments => "Constant",
    },
    Block0NeighborReorderRdFifoFullThr => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]NeighborReorderRdFifoFullThr",
      RegMem => "RegField",
      Description => "Indicates in which fill level of the Neighbor Reorder RD FIFO we stop inserting new PDs/RDs to the PIPE. This threshold exist to prevent supporting backpressure inside the pipe and ensures that the FIFO will be ready to receive data if needed.",
      Width => "8",
      Position => "14:7", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d170",
      Comments => "Constant.Fix default value",
    },
    Block0OutPdFifoFullThr => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]OutPdFifoFullThr",
      RegMem => "RegField",
      Description => "Indicates in which fill level of the FIFO at the end of the alg pipe we stop inserting new PDs/RDs to the PIPE. This threshold exist to prevent supporting backpressure inside the pipe and ensures that the FIFO will be ready to receive data if needed.",
      Width => "7",
      Position => "21:15", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d46",
      Comments => "Constant. Use FIFO cfg instead of my calc.",
    },
    Block0Stage1RdFifoFullThr => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]Stage1RdFifoFullThr",
      RegMem => "RegField",
      Description => "Indicates in which fill level of the Stage 1 RD FIFO we stop inserting new PDs/RDs to the PIPE. This threshold exist to prevent supporting backpressure inside the pipe and ensures that the FIFO will be ready to receive data if needed.",
      Width => "5",
      Position => "26:22", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hF",
      Comments => "Constant. Use FIFO cfg instead of my calc.",
    },
    Block0Stage2RdFifoFullThr => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]Stage2RdFifoFullThr",
      RegMem => "RegField",
      Description => "Indicates in which fill level of the Stage 2 RD FIFO we stop inserting new PDs/RDs to the PIPE. This threshold exist to prevent supporting backpressure inside the pipe and ensures that the FIFO will be ready to receive data if needed.",
      Width => "5",
      Position => "31:27", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hF",
      Comments => "Constant. Use FIFO cfg instead of my calc.",
    },
  },
  BlockThresholdsConfiguration1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 29;
    Name => "BlockThresholdsConfiguration[2]",
    RegMem => "Reg",
    Address => "105",
    Width => "32", # Excel Formula: =calc_reg_width(E27:E31,F31)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1NewPktsFifoNotReadyThreshold => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]NewPktsFifoNotReadyThreshold",
      RegMem => "RegField",
      Description => "Determines in which fill level the new packets FIFO issues not ready to:
- The MMA (incase of PLB/SLB in FB slice)
- The in PD FIFOs (incase of NW slice)",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F26,E27,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h30",
      Comments => "Constant",
    },
    Block1NeighborReorderRdFifoFullThr => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]NeighborReorderRdFifoFullThr",
      RegMem => "RegField",
      Description => "Indicates in which fill level of the Neighbor Reorder RD FIFO we stop inserting new PDs/RDs to the PIPE. This threshold exist to prevent supporting backpressure inside the pipe and ensures that the FIFO will be ready to receive data if needed.",
      Width => "8",
      Position => "14:7", # Excel Formula: =calc_position(F27,E28)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d170",
      Comments => "Constant.Fix default value",
    },
    Block1OutPdFifoFullThr => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]OutPdFifoFullThr",
      RegMem => "RegField",
      Description => "Indicates in which fill level of the FIFO at the end of the alg pipe we stop inserting new PDs/RDs to the PIPE. This threshold exist to prevent supporting backpressure inside the pipe and ensures that the FIFO will be ready to receive data if needed.",
      Width => "7",
      Position => "21:15", # Excel Formula: =calc_position(F28,E29)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d46",
      Comments => "Constant. Use FIFO cfg instead of my calc.",
    },
    Block1Stage1RdFifoFullThr => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]Stage1RdFifoFullThr",
      RegMem => "RegField",
      Description => "Indicates in which fill level of the Stage 1 RD FIFO we stop inserting new PDs/RDs to the PIPE. This threshold exist to prevent supporting backpressure inside the pipe and ensures that the FIFO will be ready to receive data if needed.",
      Width => "5",
      Position => "26:22", # Excel Formula: =calc_position(F29,E30)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hF",
      Comments => "Constant. Use FIFO cfg instead of my calc.",
    },
    Block1Stage2RdFifoFullThr => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]Stage2RdFifoFullThr",
      RegMem => "RegField",
      Description => "Indicates in which fill level of the Stage 2 RD FIFO we stop inserting new PDs/RDs to the PIPE. This threshold exist to prevent supporting backpressure inside the pipe and ensures that the FIFO will be ready to receive data if needed.",
      Width => "5",
      Position => "31:27", # Excel Formula: =calc_position(F30,E31)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hF",
      Comments => "Constant. Use FIFO cfg instead of my calc.",
    },
  },
  BlockAgingConfiguration0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
    Name => "BlockAgingConfiguration[2]",
    RegMem => "Reg",
    Address => "106", # Excel Formula: =calc_reg_address(C26,A26,G26)
    Width => "8", # Excel Formula: =calc_reg_width(E33:E34,F34)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0AgingEnable => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]AgingEnable",
      RegMem => "RegField",
      Description => "0 - Aging is disabled
1 - Aging is enabled
The aging feature is relevant for SN PLB.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Default.Don't enable aging on SLB.",
    },
    Block0AgingInterval => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]AgingInterval",
      RegMem => "RegField",
      Description => "The aging time interval.",
      Width => "7",
      Position => "7:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h7F",
      Comments => "Default",
    },
  },
  BlockAgingConfiguration1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
    Name => "BlockAgingConfiguration[2]",
    RegMem => "Reg",
    Address => "107",
    Width => "8", # Excel Formula: =calc_reg_width(E33:E34,F34)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1AgingEnable => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]AgingEnable",
      RegMem => "RegField",
      Description => "0 - Aging is disabled
1 - Aging is enabled
The aging feature is relevant for SN PLB.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F32,E33,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Default.Don't enable aging on SLB.",
    },
    Block1AgingInterval => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]AgingInterval",
      RegMem => "RegField",
      Description => "The aging time interval.",
      Width => "7",
      Position => "7:1", # Excel Formula: =calc_position(F33,E34)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h7F",
      Comments => "Default",
    },
  },
  BlockEventsRegister0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 20;
    Name => "BlockEventsRegister[2]",
    RegMem => "Reg",
    Address => "108", # Excel Formula: =calc_reg_address(C32,A32,G32)
    Width => "9", # Excel Formula: =calc_reg_width(E36:E44,F44)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0ConnectionReachedMaxSize => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]ConnectionReachedMaxSize",
      RegMem => "RegField",
      Description => "The connection size in the connection table reached the maximal supported size (all bits are 1).
This should not occur since it will cause a wraparound of the connection size.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F35,E36,TRUE)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block0WriteFailed => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]WriteFailed",
      RegMem => "RegField",
      Description => "The block received write failed from the exact match. Should not occur since in PP reorder and SLB the pipe will not insert new packets when the CAM is almost full thus ensuring there will be no write fail.",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F36,E37)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block0AssuredReadBufferManagerEmpty => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]AssuredReadBufferManagerEmpty",
      RegMem => "RegField",
      Description => "Indicates that the assured read buffer manager was empty.",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F37,E38)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block0ReorderBlockToSnDistNotReady => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]ReorderBlockToSnDistNotReady",
      RegMem => "RegField",
      Description => "Indicates that the reorder block issued not ready to the SN distribution block.",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F38,E39)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block0RdManArbPdFifoFull => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]RdManArbPdFifoFull",
      RegMem => "RegField",
      Description => "Indicates that the RD management arbiter received indication that the out PD FIFO was full",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F39,E40)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block0RdManStage1RdFifoFull => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]RdManStage1RdFifoFull",
      RegMem => "RegField",
      Description => "Indicates that the RD management arbiter received indication that the stage1 RD FIFO was full",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F40,E41)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block0RdManStage2RdFifoFull => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]RdManStage2RdFifoFull",
      RegMem => "RegField",
      Description => "Indicates that the RD management arbiter received indication that the stage1 RD FIFO was full",
      Width => "1",
      Position => "6", # Excel Formula: =calc_position(F41,E42)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block0RdManNeighReorderRdFifoFull => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]RdManNeighReorderRdFifoFull",
      RegMem => "RegField",
      Description => "Indicates that the RD management arbiter received indication that the neighbor reorder block RD FIFO was full",
      Width => "1",
      Position => "7", # Excel Formula: =calc_position(F42,E43)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block0RdManEventChainFifoFull => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]RdManEventChainFifoFull",
      RegMem => "RegField",
      Description => "Indicates that the RD management arbiter received indication that the event chain FIFO is full",
      Width => "1",
      Position => "8", # Excel Formula: =calc_position(F43,E44)
      Type => "Event",
      UsedBy => "DSN",
    },
  },
  BlockEventsRegister1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 20;
    Name => "BlockEventsRegister[2]",
    RegMem => "Reg",
    Address => "109",
    Width => "9", # Excel Formula: =calc_reg_width(E36:E44,F44)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1ConnectionReachedMaxSize => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]ConnectionReachedMaxSize",
      RegMem => "RegField",
      Description => "The connection size in the connection table reached the maximal supported size (all bits are 1).
This should not occur since it will cause a wraparound of the connection size.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F35,E36,TRUE)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block1WriteFailed => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]WriteFailed",
      RegMem => "RegField",
      Description => "The block received write failed from the exact match. Should not occur since in PP reorder and SLB the pipe will not insert new packets when the CAM is almost full thus ensuring there will be no write fail.",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F36,E37)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block1AssuredReadBufferManagerEmpty => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]AssuredReadBufferManagerEmpty",
      RegMem => "RegField",
      Description => "Indicates that the assured read buffer manager was empty.",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F37,E38)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block1ReorderBlockToSnDistNotReady => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]ReorderBlockToSnDistNotReady",
      RegMem => "RegField",
      Description => "Indicates that the reorder block issued not ready to the SN distribution block.",
      Width => "1",
      Position => "3", # Excel Formula: =calc_position(F38,E39)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block1RdManArbPdFifoFull => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]RdManArbPdFifoFull",
      RegMem => "RegField",
      Description => "Indicates that the RD management arbiter received indication that the out PD FIFO was full",
      Width => "1",
      Position => "4", # Excel Formula: =calc_position(F39,E40)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block1RdManStage1RdFifoFull => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]RdManStage1RdFifoFull",
      RegMem => "RegField",
      Description => "Indicates that the RD management arbiter received indication that the stage1 RD FIFO was full",
      Width => "1",
      Position => "5", # Excel Formula: =calc_position(F40,E41)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block1RdManStage2RdFifoFull => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]RdManStage2RdFifoFull",
      RegMem => "RegField",
      Description => "Indicates that the RD management arbiter received indication that the stage1 RD FIFO was full",
      Width => "1",
      Position => "6", # Excel Formula: =calc_position(F41,E42)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block1RdManNeighReorderRdFifoFull => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]RdManNeighReorderRdFifoFull",
      RegMem => "RegField",
      Description => "Indicates that the RD management arbiter received indication that the neighbor reorder block RD FIFO was full",
      Width => "1",
      Position => "7", # Excel Formula: =calc_position(F42,E43)
      Type => "Event",
      UsedBy => "DSN",
    },
    Block1RdManEventChainFifoFull => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]RdManEventChainFifoFull",
      RegMem => "RegField",
      Description => "Indicates that the RD management arbiter received indication that the event chain FIFO is full",
      Width => "1",
      Position => "8", # Excel Formula: =calc_position(F43,E44)
      Type => "Event",
      UsedBy => "DSN",
    },
  },
  SliceEventsRegister => { #Structure Type: Reg;
    Name => "SliceEventsRegister",
    RegMem => "Reg",
    Address => "10A", # Excel Formula: =calc_reg_address(C35,A35,G35)
    Width => "1", # Excel Formula: =calc_reg_width(E46:E46,F46)
    Type => "ReadOnly",
    SliceReorderRateLimiterActivated => { #Structure Type: RegField;
      Name => "SliceReorderRateLimiterActivated",
      RegMem => "RegField",
      Description => "Indicates that the reorder rate limiter was activated",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F45,E46,TRUE)
      Type => "Event",
      UsedBy => "DSN",
    },
  },
  BlockResetConfiguration0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
    Name => "BlockResetConfiguration[2]",
    RegMem => "Reg",
    Address => "10B", # Excel Formula: =calc_reg_address(C45,A45,G45)
    Width => "13", # Excel Formula: =calc_reg_width(E48:E49,F49)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0FullScanResetEnable => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]FullScanResetEnable",
      RegMem => "RegField",
      Description => "When set to 1 the reset process continues regardless of the emptiness of the connection in the blocks",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
    Block0ResetDoneValue => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]ResetDoneValue",
      RegMem => "RegField",
      Description => "The value of the reset done vector in the RD that indcates that all blocks in the chain rechead reset done",
      Width => "12",
      Position => "12:1", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
  },
  BlockResetConfiguration1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
    Name => "BlockResetConfiguration[2]",
    RegMem => "Reg",
    Address => "10C",
    Width => "13", # Excel Formula: =calc_reg_width(E48:E49,F49)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1FullScanResetEnable => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]FullScanResetEnable",
      RegMem => "RegField",
      Description => "When set to 1 the reset process continues regardless of the emptiness of the connection in the blocks",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F47,E48,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
    Block1ResetDoneValue => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]ResetDoneValue",
      RegMem => "RegField",
      Description => "The value of the reset done vector in the RD that indcates that all blocks in the chain rechead reset done",
      Width => "12",
      Position => "12:1", # Excel Formula: =calc_position(F48,E49)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
  },
  BlockAssuredReadConfiguration0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 30;
    Name => "BlockAssuredReadConfiguration[2]",
    RegMem => "Reg",
    Address => "10D", # Excel Formula: =calc_reg_address(C47,A47,G47)
    Width => "25", # Excel Formula: =calc_reg_width(E51:E53,F53)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0AssuredReadCounterThreshold => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]AssuredReadCounterThreshold",
      RegMem => "RegField",
      Description => "Indicates the number of consecutive read look aheads that should indicate that assured read can be performed.
Should be set to: 
(EMDB latency + 1)/ReorderBlocksInChain + 3
Note - should be an odd number so should be rounded up to the closest odd number
This field was used for tuning parameters during the design phase. 
The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F50,E51,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d19",
    },
    Block0AssuredReadTrigValue => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]AssuredReadTrigValue",
      RegMem => "RegField",
      Description => "The bit vector in the RD that indicates that all blocks in the chain reached ",
      Width => "12",
      Position => "16:5", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    Block0AssuredReadSeqNumAddition => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]AssuredReadSeqNumAddition",
      RegMem => "RegField",
      Description => "Should be configured to:
Block[n]AssuredReadCounterThreshold * ReorderBlockInChain
This field was used for tuning parameters during the design phase. 
The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
      Width => "8",
      Position => "24:17", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d19",
    },
  },
  BlockAssuredReadConfiguration1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 30;
    Name => "BlockAssuredReadConfiguration[2]",
    RegMem => "Reg",
    Address => "10E",
    Width => "25", # Excel Formula: =calc_reg_width(E51:E53,F53)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1AssuredReadCounterThreshold => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]AssuredReadCounterThreshold",
      RegMem => "RegField",
      Description => "Indicates the number of consecutive read look aheads that should indicate that assured read can be performed.
Should be set to: 
(EMDB latency + 1)/ReorderBlocksInChain + 3
Note - should be an odd number so should be rounded up to the closest odd number
This field was used for tuning parameters during the design phase. 
The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
      Width => "5",
      Position => "4:0", # Excel Formula: =calc_position(F50,E51,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d19",
    },
    Block1AssuredReadTrigValue => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]AssuredReadTrigValue",
      RegMem => "RegField",
      Description => "The bit vector in the RD that indicates that all blocks in the chain reached ",
      Width => "12",
      Position => "16:5", # Excel Formula: =calc_position(F51,E52)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    Block1AssuredReadSeqNumAddition => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]AssuredReadSeqNumAddition",
      RegMem => "RegField",
      Description => "Should be configured to:
Block[n]AssuredReadCounterThreshold * ReorderBlockInChain
This field was used for tuning parameters during the design phase. 
The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
      Width => "8",
      Position => "24:17", # Excel Formula: =calc_position(F52,E53)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d19",
    },
  },
  BlockInitConfiguration0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 23;
    Name => "BlockInitConfiguration[2]",
    RegMem => "Reg",
    Address => "10F", # Excel Formula: =calc_reg_address(C50,A50,G50)
    Width => "19", # Excel Formula: =calc_reg_width(E55:E56,F56)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0NumOfPktsRequiredForInit => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]NumOfPktsRequiredForInit",
      RegMem => "RegField",
      Description => "The number of packets that are required to determine the connections minimal sequence number in initialization phase.",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h8",
    },
    Block0TimeIntervalRequiredForInit => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]TimeIntervalRequiredForInit",
      RegMem => "RegField",
      Description => "The time interval that is required to determine the connections minimal sequence number in initialization phase.",
      Width => "7",
      Position => "18:12", # Excel Formula: =calc_position(F55,E56)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h3F",
    },
  },
  BlockInitConfiguration1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 23;
    Name => "BlockInitConfiguration[2]",
    RegMem => "Reg",
    Address => "110",
    Width => "19", # Excel Formula: =calc_reg_width(E55:E56,F56)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1NumOfPktsRequiredForInit => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]NumOfPktsRequiredForInit",
      RegMem => "RegField",
      Description => "The number of packets that are required to determine the connections minimal sequence number in initialization phase.",
      Width => "12",
      Position => "11:0", # Excel Formula: =calc_position(F54,E55,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h8",
    },
    Block1TimeIntervalRequiredForInit => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]TimeIntervalRequiredForInit",
      RegMem => "RegField",
      Description => "The time interval that is required to determine the connections minimal sequence number in initialization phase.",
      Width => "7",
      Position => "18:12", # Excel Formula: =calc_position(F55,E56)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h3F",
    },
  },
  BlockSkewConfigurations0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 24;
    Name => "BlockSkewConfigurations[2]",
    RegMem => "Reg",
    Address => "111", # Excel Formula: =calc_reg_address(C54,A54,G54)
    Width => "7", # Excel Formula: =calc_reg_width(E58:E58,F58)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0SkewMeasurementAddition => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]SkewMeasurementAddition",
      RegMem => "RegField",
      Description => "Defines the skew of the block in 512nsec resolution",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F57,E58,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h3F",
    },
  },
  BlockSkewConfigurations1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 24;
    Name => "BlockSkewConfigurations[2]",
    RegMem => "Reg",
    Address => "112",
    Width => "7", # Excel Formula: =calc_reg_width(E58:E58,F58)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1SkewMeasurementAddition => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]SkewMeasurementAddition",
      RegMem => "RegField",
      Description => "Defines the skew of the block in 512nsec resolution",
      Width => "7",
      Position => "6:0", # Excel Formula: =calc_position(F57,E58,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h3F",
    },
  },
  BlockMaxCon0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 12;
    Name => "BlockMaxCon[2]",
    RegMem => "Reg",
    Address => "113", # Excel Formula: =calc_reg_address(C57,A57,G57)
    Description => "Defines the skew of the block",
    Width => "92", # Excel Formula: =calc_reg_width(E60:E67,F67)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0MaxConnection0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxConnection0",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F59,E60,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block0MaxSize0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxSize0",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "15",
      Position => "22:8", # Excel Formula: =calc_position(F60,E61)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block0MaxConnection1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxConnection1",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "8",
      Position => "30:23", # Excel Formula: =calc_position(F61,E62)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block0MaxSize1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxSize1",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "15",
      Position => "45:31", # Excel Formula: =calc_position(F62,E63)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block0MaxConnection2 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxConnection2",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "8",
      Position => "53:46", # Excel Formula: =calc_position(F63,E64)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block0MaxSize2 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxSize2",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "15",
      Position => "68:54", # Excel Formula: =calc_position(F64,E65)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block0MaxConnection3 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxConnection3",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "8",
      Position => "76:69", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block0MaxSize3 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxSize3",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "15",
      Position => "91:77", # Excel Formula: =calc_position(F66,E67)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  BlockMaxCon1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 12;
    Name => "BlockMaxCon[2]",
    RegMem => "Reg",
    Address => "114",
    Description => "Defines the skew of the block",
    Width => "92", # Excel Formula: =calc_reg_width(E60:E67,F67)
    Type => "ReadOnly",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1MaxConnection0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxConnection0",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F59,E60,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block1MaxSize0 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxSize0",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "15",
      Position => "22:8", # Excel Formula: =calc_position(F60,E61)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block1MaxConnection1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxConnection1",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "8",
      Position => "30:23", # Excel Formula: =calc_position(F61,E62)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block1MaxSize1 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxSize1",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "15",
      Position => "45:31", # Excel Formula: =calc_position(F62,E63)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block1MaxConnection2 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxConnection2",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "8",
      Position => "53:46", # Excel Formula: =calc_position(F63,E64)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block1MaxSize2 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxSize2",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "15",
      Position => "68:54", # Excel Formula: =calc_position(F64,E65)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block1MaxConnection3 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxConnection3",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "8",
      Position => "76:69", # Excel Formula: =calc_position(F65,E66)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block1MaxSize3 => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxSize3",
      RegMem => "RegField",
      Description => "Manages 4 sets of maximal sized connections",
      Width => "15",
      Position => "91:77", # Excel Formula: =calc_position(F66,E67)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  BlockStatusReg0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 15;
    Name => "BlockStatusReg[2]",
    RegMem => "Reg",
    Address => "115", # Excel Formula: =calc_reg_address(C59,A59,G59)
    Width => "23", # Excel Formula: =calc_reg_width(E69:E70,F70)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus,MirrorReadAccess",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0MaxReorderConnectionSize => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxReorderConnectionSize",
      RegMem => "RegField",
      Description => "Holds the size of the largest reorder connection that existed since the last time the CPU read this status register.",
      Width => "15",
      Position => "14:0", # Excel Formula: =calc_position(F68,E69,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block0MaxReorderConnection => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxReorderConnection",
      RegMem => "RegField",
      Description => "Holds the largest reorder connection number",
      Width => "8",
      Position => "22:15", # Excel Formula: =calc_position(F69,E70)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  BlockStatusReg1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 15;
    Name => "BlockStatusReg[2]",
    RegMem => "Reg",
    Address => "116",
    Width => "23", # Excel Formula: =calc_reg_width(E69:E70,F70)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus,MirrorReadAccess",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1MaxReorderConnectionSize => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxReorderConnectionSize",
      RegMem => "RegField",
      Description => "Holds the size of the largest reorder connection that existed since the last time the CPU read this status register.",
      Width => "15",
      Position => "14:0", # Excel Formula: =calc_position(F68,E69,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
    Block1MaxReorderConnection => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxReorderConnection",
      RegMem => "RegField",
      Description => "Holds the largest reorder connection number",
      Width => "8",
      Position => "22:15", # Excel Formula: =calc_position(F69,E70)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  BlockDroppedPktConfiguration0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 29;
    Name => "BlockDroppedPktConfiguration[2]",
    RegMem => "Reg",
    Address => "117", # Excel Formula: =calc_reg_address(C68,A68,G68)
    Width => "19", # Excel Formula: =calc_reg_width(E72:E76,F76)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0DropPacketsDuringReset => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DropPacketsDuringReset",
      RegMem => "RegField",
      Description => "Indicates wether the reorder should drop the incoming packets when connection is in reset or should send it out which will cause OOO.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F71,E72,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    Block0DropOldPackets => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DropOldPackets",
      RegMem => "RegField",
      Description => "Indicates wether the reorder should drop packets with sequence number below the expected sequence number or should allow a little out of order.",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F72,E73)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    Block0DropPacketsNotInRange => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DropPacketsNotInRange",
      RegMem => "RegField",
      Description => "Indicates wether the reorder should drop packets with sequence number that is not in the range of the current sequence number range.
Relevant also for init state when the init range was determined and a packet from a different range arrives.",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F73,E74)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    Block0DroppedPacketsWeight => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DroppedPacketsWeight",
      RegMem => "RegField",
      Description => "The weight that should be gived to dropped packets when managing the dropped packets counter. When the counter reaches a threshold - the connection will be reset.",
      Width => "8",
      Position => "10:3", # Excel Formula: =calc_position(F74,E75)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h3",
    },
    Block0MaxDroppedPacketsThreshold => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]MaxDroppedPacketsThreshold",
      RegMem => "RegField",
      Description => "When the drop counter reaches this threshold - the connection will be reset.",
      Width => "8",
      Position => "18:11", # Excel Formula: =calc_position(F75,E76)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hFF",
    },
  },
  BlockDroppedPktConfiguration1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 29;
    Name => "BlockDroppedPktConfiguration[2]",
    RegMem => "Reg",
    Address => "118",
    Width => "19", # Excel Formula: =calc_reg_width(E72:E76,F76)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1DropPacketsDuringReset => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DropPacketsDuringReset",
      RegMem => "RegField",
      Description => "Indicates wether the reorder should drop the incoming packets when connection is in reset or should send it out which will cause OOO.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F71,E72,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    Block1DropOldPackets => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DropOldPackets",
      RegMem => "RegField",
      Description => "Indicates wether the reorder should drop packets with sequence number below the expected sequence number or should allow a little out of order.",
      Width => "1",
      Position => "1", # Excel Formula: =calc_position(F72,E73)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    Block1DropPacketsNotInRange => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DropPacketsNotInRange",
      RegMem => "RegField",
      Description => "Indicates wether the reorder should drop packets with sequence number that is not in the range of the current sequence number range.
Relevant also for init state when the init range was determined and a packet from a different range arrives.",
      Width => "1",
      Position => "2", # Excel Formula: =calc_position(F73,E74)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h1",
    },
    Block1DroppedPacketsWeight => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DroppedPacketsWeight",
      RegMem => "RegField",
      Description => "The weight that should be gived to dropped packets when managing the dropped packets counter. When the counter reaches a threshold - the connection will be reset.",
      Width => "8",
      Position => "10:3", # Excel Formula: =calc_position(F74,E75)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h3",
    },
    Block1MaxDroppedPacketsThreshold => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]MaxDroppedPacketsThreshold",
      RegMem => "RegField",
      Description => "When the drop counter reaches this threshold - the connection will be reset.",
      Width => "8",
      Position => "18:11", # Excel Formula: =calc_position(F75,E76)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hFF",
    },
  },
  BlockDebugFeatures0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 19;
    Name => "BlockDebugFeatures[2]",
    RegMem => "Reg",
    Address => "119", # Excel Formula: =calc_reg_address(C71,A71,G71)
    Width => "52", # Excel Formula: =calc_reg_width(E78:E79,F79)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0SwGeneratedRdTrig => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]SwGeneratedRdTrig",
      RegMem => "RegField",
      Description => "When setting this bit to 1 - a SW generated RD will be triggered",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F77,E78,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Block0SwGeneratedRd => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]SwGeneratedRd",
      RegMem => "RegField",
      Description => "Defines the RD that will be generated by SW",
      Width => "51",
      Position => "51:1", # Excel Formula: =calc_position(F78,E79)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
  },
  BlockDebugFeatures1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 19;
    Name => "BlockDebugFeatures[2]",
    RegMem => "Reg",
    Address => "11A",
    Width => "52", # Excel Formula: =calc_reg_width(E78:E79,F79)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1SwGeneratedRdTrig => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]SwGeneratedRdTrig",
      RegMem => "RegField",
      Description => "When setting this bit to 1 - a SW generated RD will be triggered",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F77,E78,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Block1SwGeneratedRd => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]SwGeneratedRd",
      RegMem => "RegField",
      Description => "Defines the RD that will be generated by SW",
      Width => "51",
      Position => "51:1", # Excel Formula: =calc_position(F78,E79)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
  },
  ReorderLastInPd => { #Structure Type: Reg;
    Name => "ReorderLastInPd",
    RegMem => "Reg",
    Address => "11B", # Excel Formula: =calc_reg_address(C77,A77,G77)
    Width => "16", # Excel Formula: =calc_reg_width(E81:E81,F81)
    Type => "ReadOnly",
    ReorderLastIncomingPd => { #Structure Type: RegField;
      Name => "ReorderLastIncomingPd",
      RegMem => "RegField",
      Description => "Holds the 16 bits of the PD muxed by LastIncomingPdMuxSel",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F80,E81,TRUE)
      Type => "Status",
      UsedBy => "DSN",
    },
  },
  ReorderDebugConf => { #Structure Type: Reg;
    Name => "ReorderDebugConf",
    RegMem => "Reg",
    Address => "11C", # Excel Formula: =calc_reg_address(C80,A80,G80)
    Width => "4", # Excel Formula: =calc_reg_width(E83:E83,F83)
    Type => "Config",
    LastIncomingPdMuxSel => { #Structure Type: RegField;
      Name => "LastIncomingPdMuxSel",
      RegMem => "RegField",
      Description => "Selector for the debug mux of ReorderLastIncomingPd",
      Width => "4",
      Position => "3:0", # Excel Formula: =calc_position(F82,E83,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
    },
  },
  EmFbmConfigReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 15;
    Name => "EmFbmConfigReg[4]",
    RegMem => "Reg",
    Address => "11D", # Excel Formula: =calc_reg_address(C82,A82,G82)
    Width => "54", # Excel Formula: =calc_reg_width(E85:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "4",
    ArrayIndex => "0",
    Em0FbmWorkingMode => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 3;
      Name => "Em[n]FbmWorkingMode",
      RegMem => "RegField",
      Description => "0 - The design is initializing the FBM memory to use all the buffers
1 - The design will not initialize the FBM. Should be init by SW to the relevant buffer. 
Should be set to 1 in FE and FB slice. 
The FBM should be init by SW to have buffer 0 - 255 valid and all others not valid.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F84,E85,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Em0FbmTotalFreeBuffers => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 3;
      Name => "Em[n]FbmTotalFreeBuffers",
      RegMem => "RegField",
      Description => "The total number of free buffers in the FBM.
In FE/FB slices should be configured to 256 buffers and in all other modes to 768",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F85,E86)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d768",
      Comments => "Constant",
    },
    Em0FbmNotEmptyEntry => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 3;
      Name => "Em[n]FbmNotEmptyEntry",
      RegMem => "RegField",
      Description => "A bitmap in the size of the FBM entries. Each bit indicates if there are valid buffers in the corresponding entry.
In FE/FB slice - should be configured to 0xF
In other modes - should be configured to all 1's",
      Width => "12",
      Position => "22:11", # Excel Formula: =calc_position(F86,E87)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hFFF",
      Comments => "Constant",
    },
    Em0FbmInit => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 3;
      Name => "Em[n]FbmInit",
      RegMem => "RegField",
      Description => "If set - initializes FBM logic",
      Width => "1",
      Position => "23", # Excel Formula: =calc_position(F87,E88)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Em0FbmAlmostEmptyThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 3;
      Name => "Em[n]FbmAlmostEmptyThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is almost empty. Will be used to cancel write requests to the EMPD to prevent write failing due to EMPD FBM not having buffers.",
      Width => "10",
      Position => "33:24", # Excel Formula: =calc_position(F88,E89)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d8",
      Comments => "Constant",
    },
    Em0FbmDrainModeThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 3;
      Name => "Em[n]FbmDrainModeThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is in high utilization thus the reorder will try to drain it by declaring each packet that is not found in the data base as lost packet.
This scenaio should not be reached if the PP skew is as expected.
This threshold is compared with the number of free buffers in the FBM",
      Width => "10",
      Position => "43:34", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d50",
      Comments => "Constant",
    },
    Em0FbmRateLimitThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 3;
      Name => "Em[n]FbmRateLimitThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is in high utilization thus the reorder will reduce the input PD rate to enable the block to empty its database.
This threshold is compared with the number of free buffers in the FBM",
      Width => "10",
      Position => "53:44", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d100",
      Comments => "Constant",
    },
  },
  EmFbmConfigReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 15;
    Name => "EmFbmConfigReg[4]",
    RegMem => "Reg",
    Address => "11E",
    Width => "54", # Excel Formula: =calc_reg_width(E85:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "4",
    ArrayIndex => "1",
    Em1FbmWorkingMode => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 3;
      Name => "Em[n]FbmWorkingMode",
      RegMem => "RegField",
      Description => "0 - The design is initializing the FBM memory to use all the buffers
1 - The design will not initialize the FBM. Should be init by SW to the relevant buffer. 
Should be set to 1 in FE and FB slice. 
The FBM should be init by SW to have buffer 0 - 255 valid and all others not valid.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F84,E85,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Em1FbmTotalFreeBuffers => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 3;
      Name => "Em[n]FbmTotalFreeBuffers",
      RegMem => "RegField",
      Description => "The total number of free buffers in the FBM.
In FE/FB slices should be configured to 256 buffers and in all other modes to 768",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F85,E86)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d768",
      Comments => "Constant",
    },
    Em1FbmNotEmptyEntry => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 3;
      Name => "Em[n]FbmNotEmptyEntry",
      RegMem => "RegField",
      Description => "A bitmap in the size of the FBM entries. Each bit indicates if there are valid buffers in the corresponding entry.
In FE/FB slice - should be configured to 0xF
In other modes - should be configured to all 1's",
      Width => "12",
      Position => "22:11", # Excel Formula: =calc_position(F86,E87)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hFFF",
      Comments => "Constant",
    },
    Em1FbmInit => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 3;
      Name => "Em[n]FbmInit",
      RegMem => "RegField",
      Description => "If set - initializes FBM logic",
      Width => "1",
      Position => "23", # Excel Formula: =calc_position(F87,E88)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Em1FbmAlmostEmptyThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 3;
      Name => "Em[n]FbmAlmostEmptyThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is almost empty. Will be used to cancel write requests to the EMPD to prevent write failing due to EMPD FBM not having buffers.",
      Width => "10",
      Position => "33:24", # Excel Formula: =calc_position(F88,E89)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d8",
      Comments => "Constant",
    },
    Em1FbmDrainModeThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 3;
      Name => "Em[n]FbmDrainModeThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is in high utilization thus the reorder will try to drain it by declaring each packet that is not found in the data base as lost packet.
This scenaio should not be reached if the PP skew is as expected.
This threshold is compared with the number of free buffers in the FBM",
      Width => "10",
      Position => "43:34", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d50",
      Comments => "Constant",
    },
    Em1FbmRateLimitThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 3;
      Name => "Em[n]FbmRateLimitThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is in high utilization thus the reorder will reduce the input PD rate to enable the block to empty its database.
This threshold is compared with the number of free buffers in the FBM",
      Width => "10",
      Position => "53:44", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d100",
      Comments => "Constant",
    },
  },
  EmFbmConfigReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 15;
    Name => "EmFbmConfigReg[4]",
    RegMem => "Reg",
    Address => "11F",
    Width => "54", # Excel Formula: =calc_reg_width(E85:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "4",
    ArrayIndex => "2",
    Em2FbmWorkingMode => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 3;
      Name => "Em[n]FbmWorkingMode",
      RegMem => "RegField",
      Description => "0 - The design is initializing the FBM memory to use all the buffers
1 - The design will not initialize the FBM. Should be init by SW to the relevant buffer. 
Should be set to 1 in FE and FB slice. 
The FBM should be init by SW to have buffer 0 - 255 valid and all others not valid.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F84,E85,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Em2FbmTotalFreeBuffers => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 3;
      Name => "Em[n]FbmTotalFreeBuffers",
      RegMem => "RegField",
      Description => "The total number of free buffers in the FBM.
In FE/FB slices should be configured to 256 buffers and in all other modes to 768",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F85,E86)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d768",
      Comments => "Constant",
    },
    Em2FbmNotEmptyEntry => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 3;
      Name => "Em[n]FbmNotEmptyEntry",
      RegMem => "RegField",
      Description => "A bitmap in the size of the FBM entries. Each bit indicates if there are valid buffers in the corresponding entry.
In FE/FB slice - should be configured to 0xF
In other modes - should be configured to all 1's",
      Width => "12",
      Position => "22:11", # Excel Formula: =calc_position(F86,E87)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hFFF",
      Comments => "Constant",
    },
    Em2FbmInit => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 3;
      Name => "Em[n]FbmInit",
      RegMem => "RegField",
      Description => "If set - initializes FBM logic",
      Width => "1",
      Position => "23", # Excel Formula: =calc_position(F87,E88)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Em2FbmAlmostEmptyThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 3;
      Name => "Em[n]FbmAlmostEmptyThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is almost empty. Will be used to cancel write requests to the EMPD to prevent write failing due to EMPD FBM not having buffers.",
      Width => "10",
      Position => "33:24", # Excel Formula: =calc_position(F88,E89)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d8",
      Comments => "Constant",
    },
    Em2FbmDrainModeThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 3;
      Name => "Em[n]FbmDrainModeThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is in high utilization thus the reorder will try to drain it by declaring each packet that is not found in the data base as lost packet.
This scenaio should not be reached if the PP skew is as expected.
This threshold is compared with the number of free buffers in the FBM",
      Width => "10",
      Position => "43:34", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d50",
      Comments => "Constant",
    },
    Em2FbmRateLimitThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 3;
      Name => "Em[n]FbmRateLimitThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is in high utilization thus the reorder will reduce the input PD rate to enable the block to empty its database.
This threshold is compared with the number of free buffers in the FBM",
      Width => "10",
      Position => "53:44", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d100",
      Comments => "Constant",
    },
  },
  EmFbmConfigReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 15;
    Name => "EmFbmConfigReg[4]",
    RegMem => "Reg",
    Address => "120",
    Width => "54", # Excel Formula: =calc_reg_width(E85:E91,F91)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "4",
    ArrayIndex => "3",
    Em3FbmWorkingMode => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 3;
      Name => "Em[n]FbmWorkingMode",
      RegMem => "RegField",
      Description => "0 - The design is initializing the FBM memory to use all the buffers
1 - The design will not initialize the FBM. Should be init by SW to the relevant buffer. 
Should be set to 1 in FE and FB slice. 
The FBM should be init by SW to have buffer 0 - 255 valid and all others not valid.",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F84,E85,TRUE)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Em3FbmTotalFreeBuffers => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 3;
      Name => "Em[n]FbmTotalFreeBuffers",
      RegMem => "RegField",
      Description => "The total number of free buffers in the FBM.
In FE/FB slices should be configured to 256 buffers and in all other modes to 768",
      Width => "10",
      Position => "10:1", # Excel Formula: =calc_position(F85,E86)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d768",
      Comments => "Constant",
    },
    Em3FbmNotEmptyEntry => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 3;
      Name => "Em[n]FbmNotEmptyEntry",
      RegMem => "RegField",
      Description => "A bitmap in the size of the FBM entries. Each bit indicates if there are valid buffers in the corresponding entry.
In FE/FB slice - should be configured to 0xF
In other modes - should be configured to all 1's",
      Width => "12",
      Position => "22:11", # Excel Formula: =calc_position(F86,E87)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "hFFF",
      Comments => "Constant",
    },
    Em3FbmInit => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 3;
      Name => "Em[n]FbmInit",
      RegMem => "RegField",
      Description => "If set - initializes FBM logic",
      Width => "1",
      Position => "23", # Excel Formula: =calc_position(F87,E88)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "h0",
      Comments => "Constant",
    },
    Em3FbmAlmostEmptyThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 3;
      Name => "Em[n]FbmAlmostEmptyThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is almost empty. Will be used to cancel write requests to the EMPD to prevent write failing due to EMPD FBM not having buffers.",
      Width => "10",
      Position => "33:24", # Excel Formula: =calc_position(F88,E89)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d8",
      Comments => "Constant",
    },
    Em3FbmDrainModeThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 3;
      Name => "Em[n]FbmDrainModeThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is in high utilization thus the reorder will try to drain it by declaring each packet that is not found in the data base as lost packet.
This scenaio should not be reached if the PP skew is as expected.
This threshold is compared with the number of free buffers in the FBM",
      Width => "10",
      Position => "43:34", # Excel Formula: =calc_position(F89,E90)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d50",
      Comments => "Constant",
    },
    Em3FbmRateLimitThr => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 3;
      Name => "Em[n]FbmRateLimitThr",
      RegMem => "RegField",
      Description => "Used to indicate that the FBM is in high utilization thus the reorder will reduce the input PD rate to enable the block to empty its database.
This threshold is compared with the number of free buffers in the FBM",
      Width => "10",
      Position => "53:44", # Excel Formula: =calc_position(F90,E91)
      Type => "Config",
      UsedBy => "DSN",
      DefaultValue => "d100",
      Comments => "Constant",
    },
  },
  ReorderBlockDebugCounters0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 26;
    Name => "ReorderBlockDebugCounters[2]",
    RegMem => "Reg",
    Address => "121", # Excel Formula: =calc_reg_address(C84,A84,G84)
    Width => "106", # Excel Formula: =calc_reg_width(E93:E99,F99)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0DuplicatedEntryCounter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DuplicatedEntryCounter",
      RegMem => "RegField",
      Description => "Holds the number of duplicated entries found in the reorder block.",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F92,E93,TRUE)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block0DropCounterSeqNumBelowExp => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DropCounterSeqNumBelowExp",
      RegMem => "RegField",
      Description => "Holds the number of PDs dropped due the packet sequence number being below the expected sequence number",
      Width => "16",
      Position => "25:10", # Excel Formula: =calc_position(F93,E94)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block0DropCounterSeqNumNotInRange => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DropCounterSeqNumNotInRange",
      RegMem => "RegField",
      Description => "Holds the number of PDs dropped due the packet sequence number not being in the range of the current sequence number",
      Width => "16",
      Position => "41:26", # Excel Formula: =calc_position(F94,E95)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block0DropCounterNewPktDuringReset => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DropCounterNewPktDuringReset",
      RegMem => "RegField",
      Description => "Holds the number of new packets dropped when the connection was in reset",
      Width => "16",
      Position => "57:42", # Excel Formula: =calc_position(F95,E96)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block0DropCounterSlbPktFromPrevSegment => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DropCounterSlbPktFromPrevSegment",
      RegMem => "RegField",
      Description => "Holds the number of new packets dropped since it's SSN was one less than the current SSN",
      Width => "16",
      Position => "73:58", # Excel Formula: =calc_position(F96,E97)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block0DropCounterPktFromEmdbDuringReset => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DropCounterPktFromEmdbDuringReset",
      RegMem => "RegField",
      Description => "Holds the number of packets read & dropped from the EMDB during reset.",
      Width => "16",
      Position => "89:74", # Excel Formula: =calc_position(F97,E98)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block0DropNewPacketDueToFbmAlmostEmpty => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]DropNewPacketDueToFbmAlmostEmpty",
      RegMem => "RegField",
      Description => "Holds the number of packets that were dropped because the EMPD FBM was almost empty.",
      Width => "16",
      Position => "105:90", # Excel Formula: =calc_position(F98,E99)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  ReorderBlockDebugCounters1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 26;
    Name => "ReorderBlockDebugCounters[2]",
    RegMem => "Reg",
    Address => "122",
    Width => "106", # Excel Formula: =calc_reg_width(E93:E99,F99)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1DuplicatedEntryCounter => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DuplicatedEntryCounter",
      RegMem => "RegField",
      Description => "Holds the number of duplicated entries found in the reorder block.",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F92,E93,TRUE)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block1DropCounterSeqNumBelowExp => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DropCounterSeqNumBelowExp",
      RegMem => "RegField",
      Description => "Holds the number of PDs dropped due the packet sequence number being below the expected sequence number",
      Width => "16",
      Position => "25:10", # Excel Formula: =calc_position(F93,E94)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block1DropCounterSeqNumNotInRange => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DropCounterSeqNumNotInRange",
      RegMem => "RegField",
      Description => "Holds the number of PDs dropped due the packet sequence number not being in the range of the current sequence number",
      Width => "16",
      Position => "41:26", # Excel Formula: =calc_position(F94,E95)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block1DropCounterNewPktDuringReset => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DropCounterNewPktDuringReset",
      RegMem => "RegField",
      Description => "Holds the number of new packets dropped when the connection was in reset",
      Width => "16",
      Position => "57:42", # Excel Formula: =calc_position(F95,E96)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block1DropCounterSlbPktFromPrevSegment => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DropCounterSlbPktFromPrevSegment",
      RegMem => "RegField",
      Description => "Holds the number of new packets dropped since it's SSN was one less than the current SSN",
      Width => "16",
      Position => "73:58", # Excel Formula: =calc_position(F96,E97)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block1DropCounterPktFromEmdbDuringReset => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DropCounterPktFromEmdbDuringReset",
      RegMem => "RegField",
      Description => "Holds the number of packets read & dropped from the EMDB during reset.",
      Width => "16",
      Position => "89:74", # Excel Formula: =calc_position(F97,E98)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
    Block1DropNewPacketDueToFbmAlmostEmpty => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]DropNewPacketDueToFbmAlmostEmpty",
      RegMem => "RegField",
      Description => "Holds the number of packets that were dropped because the EMPD FBM was almost empty.",
      Width => "16",
      Position => "105:90", # Excel Formula: =calc_position(F98,E99)
      Type => "Counter",
      UsedBy => "DSN",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  ReorderBlockStatusReg0 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
    Name => "ReorderBlockStatusReg[2]",
    RegMem => "Reg",
    Address => "123", # Excel Formula: =calc_reg_address(C92,A92,G92)
    Width => "29", # Excel Formula: =calc_reg_width(E101:E104,F104)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "0",
    Block0RdFifoMaxWmk => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]RdFifoMaxWmk",
      RegMem => "RegField",
      Description => "Max watermark on the RD FIFO fill level",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F100,E101,TRUE)
      Type => "MaxWmk",
      UsedBy => "DSN",
    },
    Block0PdFifo0MaxWmk => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]PdFifo0MaxWmk",
      RegMem => "RegField",
      Description => "Max watermark on the PD FIFO 0 fill level",
      Width => "7",
      Position => "14:8", # Excel Formula: =calc_position(F101,E102)
      Type => "MaxWmk",
      UsedBy => "DSN",
    },
    Block0PdFifo1MaxWmk => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]PdFifo1MaxWmk",
      RegMem => "RegField",
      Description => "Max watermark on the PD FIFO 1 fill level",
      Width => "7",
      Position => "21:15", # Excel Formula: =calc_position(F102,E103)
      Type => "MaxWmk",
      UsedBy => "DSN",
    },
    Block0OutPdFifoFullConsecutiveCcMaxWmk => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 6;
      Name => "Block[n]OutPdFifoFullConsecutiveCcMaxWmk",
      RegMem => "RegField",
      Description => "Holds the maximal number of consecutive cc where the PD FIFO was full",
      Width => "7",
      Position => "28:22", # Excel Formula: =calc_position(F103,E104)
      Type => "MaxWmk",
      UsedBy => "DSN",
    },
  },
  ReorderBlockStatusReg1 => { #Structure Type: Reg; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
    Name => "ReorderBlockStatusReg[2]",
    RegMem => "Reg",
    Address => "124",
    Width => "29", # Excel Formula: =calc_reg_width(E101:E104,F104)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    ArrayLength => "2",
    ArrayIndex => "1",
    Block1RdFifoMaxWmk => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]RdFifoMaxWmk",
      RegMem => "RegField",
      Description => "Max watermark on the RD FIFO fill level",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F100,E101,TRUE)
      Type => "MaxWmk",
      UsedBy => "DSN",
    },
    Block1PdFifo0MaxWmk => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]PdFifo0MaxWmk",
      RegMem => "RegField",
      Description => "Max watermark on the PD FIFO 0 fill level",
      Width => "7",
      Position => "14:8", # Excel Formula: =calc_position(F101,E102)
      Type => "MaxWmk",
      UsedBy => "DSN",
    },
    Block1PdFifo1MaxWmk => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]PdFifo1MaxWmk",
      RegMem => "RegField",
      Description => "Max watermark on the PD FIFO 1 fill level",
      Width => "7",
      Position => "21:15", # Excel Formula: =calc_position(F102,E103)
      Type => "MaxWmk",
      UsedBy => "DSN",
    },
    Block1OutPdFifoFullConsecutiveCcMaxWmk => { #Structure Type: RegField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 6;
      Name => "Block[n]OutPdFifoFullConsecutiveCcMaxWmk",
      RegMem => "RegField",
      Description => "Holds the maximal number of consecutive cc where the PD FIFO was full",
      Width => "7",
      Position => "28:22", # Excel Formula: =calc_position(F103,E104)
      Type => "MaxWmk",
      UsedBy => "DSN",
    },
  },
  Fifo0NewPkts0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 13;
    Name => "Fifo0NewPkts[2]",
    RegMem => "Mem",
    Address => "100000",
    Width => "218", # Excel Formula: =calc_mem_width(E106:E106,M105,F106,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "60",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "209",
    Fifo0Data0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "Fifo0Data[n]",
      RegMem => "MemField",
      Description => "Holds outgoing PD + RD + out slice(2b) + CPS(1b) + EOS(1b)",
      Width => "209",
      Position => "208:0", # Excel Formula: =calc_position(F105,E106,TRUE)
    },
  },
  Fifo0NewPkts1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 13;
    Name => "Fifo0NewPkts[2]",
    RegMem => "Mem",
    Address => "200000",
    Width => "218", # Excel Formula: =calc_mem_width(E106:E106,M105,F106,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "60",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "209",
    Fifo0Data1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "Fifo0Data[n]",
      RegMem => "MemField",
      Description => "Holds outgoing PD + RD + out slice(2b) + CPS(1b) + EOS(1b)",
      Width => "209",
      Position => "208:0", # Excel Formula: =calc_position(F105,E106,TRUE)
    },
  },
  Fifo1NewPkts0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 13;
    Name => "Fifo1NewPkts[2]",
    RegMem => "Mem",
    Address => "300000", # Excel Formula: =calc_mem_address(C105,A105,G107,L107)
    Width => "218", # Excel Formula: =calc_mem_width(E108:E108,M107,F108,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "60",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "209",
    Fifo1Data0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 10;
      Name => "Fifo1Data[n]",
      RegMem => "MemField",
      Description => "Holds outgoing PD + RD + out slice(2b) + CPS(1b) + EOS(1b)",
      Width => "209",
      Position => "208:0", # Excel Formula: =calc_position(F107,E108,TRUE)
    },
  },
  Fifo1NewPkts1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 13;
    Name => "Fifo1NewPkts[2]",
    RegMem => "Mem",
    Address => "400000",
    Width => "218", # Excel Formula: =calc_mem_width(E108:E108,M107,F108,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "60",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "209",
    Fifo1Data1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 10;
      Name => "Fifo1Data[n]",
      RegMem => "MemField",
      Description => "Holds outgoing PD + RD + out slice(2b) + CPS(1b) + EOS(1b)",
      Width => "209",
      Position => "208:0", # Excel Formula: =calc_position(F107,E108,TRUE)
    },
  },
  PpReorderRdFifo0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 16;
    Name => "PpReorderRdFifo[2]",
    RegMem => "Mem",
    Address => "500000", # Excel Formula: =calc_mem_address(C107,A107,G109,L109)
    Width => "58", # Excel Formula: =calc_mem_width(E110:E110,M109,F110,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "194",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "Samples on NW RD FIFO and PP RD FIFO should be identical",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "51",
    PpReorderRdFifoData0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "PpReorderRdFifoData[n]",
      RegMem => "MemField",
      Width => "51",
      Position => "50:0", # Excel Formula: =calc_position(F109,E110,TRUE)
    },
  },
  PpReorderRdFifo1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 16;
    Name => "PpReorderRdFifo[2]",
    RegMem => "Mem",
    Address => "600000",
    Width => "58", # Excel Formula: =calc_mem_width(E110:E110,M109,F110,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "194",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "Samples on NW RD FIFO and PP RD FIFO should be identical",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "51",
    PpReorderRdFifoData1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "PpReorderRdFifoData[n]",
      RegMem => "MemField",
      Width => "51",
      Position => "50:0", # Excel Formula: =calc_position(F109,E110,TRUE)
    },
  },
  PpConnectionTable0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 18;
    Name => "PpConnectionTable[2]",
    RegMem => "Mem",
    Address => "700000", # Excel Formula: =calc_mem_address(C109,A109,G111,L111)
    Width => "120", # Excel Formula: =calc_mem_width(E112:E112,M111,F112,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "Data[87:68] = EntryNum,Data[98] = 1,All other bits are 0 ",
    MemEntries => "160",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,DisableSameAddressErr=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "112",
    PpConnectionTableData0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "PpConnectionTableData[n]",
      RegMem => "MemField",
      Width => "112",
      Position => "111:0", # Excel Formula: =calc_position(F111,E112,TRUE)
    },
  },
  PpConnectionTable1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 18;
    Name => "PpConnectionTable[2]",
    RegMem => "Mem",
    Address => "800000",
    Width => "120", # Excel Formula: =calc_mem_width(E112:E112,M111,F112,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "Data[87:68] = EntryNum,Data[98] = 1,All other bits are 0 ",
    MemEntries => "160",
    MemWrapper => "1R1W",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,DisableSameAddressErr=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "112",
    PpConnectionTableData1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "PpConnectionTableData[n]",
      RegMem => "MemField",
      Width => "112",
      Position => "111:0", # Excel Formula: =calc_position(F111,E112,TRUE)
    },
  },
  OutPdFifo0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 10;
    Name => "OutPdFifo[2]",
    RegMem => "Mem",
    Address => "900000", # Excel Formula: =calc_mem_address(C111,A111,G113,L113)
    Width => "166", # Excel Formula: =calc_mem_width(E114:E114,M113,F114,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "64",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "157",
    OutPdFifoData0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 14;
      Name => "OutPdFifoData[n]",
      RegMem => "MemField",
      Description => "Holds the outgoing PD width + trg slice (3b)",
      Width => "157",
      Position => "156:0", # Excel Formula: =calc_position(F113,E114,TRUE)
    },
  },
  OutPdFifo1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 10;
    Name => "OutPdFifo[2]",
    RegMem => "Mem",
    Address => "A00000",
    Width => "166", # Excel Formula: =calc_mem_width(E114:E114,M113,F114,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "64",
    MemWrapper => "Fifo",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,PackArrayToBus=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "157",
    OutPdFifoData1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 14;
      Name => "OutPdFifoData[n]",
      RegMem => "MemField",
      Description => "Holds the outgoing PD width + trg slice (3b)",
      Width => "157",
      Position => "156:0", # Excel Formula: =calc_position(F113,E114,TRUE)
    },
  },
  ReorderAlgPdFifo0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 17;
    Name => "ReorderAlgPdFifo[2]",
    RegMem => "Mem",
    Address => "B00000", # Excel Formula: =calc_mem_address(C113,A113,G115,L115)
    Width => "154", # Excel Formula: =calc_mem_width(E116:E116,M115,F116,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "16",
    MemWrapper => "Fifo",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=2,SampleReadAfterProt=1,PackArrayToBus=Enabled,FfBased=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "Latency should be the same for PP and NW.",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "154",
    ReorderAlgPdFifoData0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 21;
      Name => "ReorderAlgPdFifoData[n]",
      RegMem => "MemField",
      Description => "Holds the outgoing PD ",
      Width => "154",
      Position => "153:0", # Excel Formula: =calc_position(F115,E116,TRUE)
    },
  },
  ReorderAlgPdFifo1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 17;
    Name => "ReorderAlgPdFifo[2]",
    RegMem => "Mem",
    Address => "C00000",
    Width => "154", # Excel Formula: =calc_mem_width(E116:E116,M115,F116,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "16",
    MemWrapper => "Fifo",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=2,SampleReadAfterProt=1,PackArrayToBus=Enabled,FfBased=Enabled,PortErrPropagate=Disabled,CpuReadAccess=Disabled,CpuWriteAccess=Disabled",
    Comments => "Latency should be the same for PP and NW.",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "154",
    ReorderAlgPdFifoData1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 21;
      Name => "ReorderAlgPdFifoData[n]",
      RegMem => "MemField",
      Description => "Holds the outgoing PD ",
      Width => "154",
      Position => "153:0", # Excel Formula: =calc_position(F115,E116,TRUE)
    },
  },
  PpExactMatchFBM0 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16;
    Name => "PpExactMatchFBM[4]",
    RegMem => "Mem",
    Address => "D00000", # Excel Formula: =calc_mem_address(C115,A115,G117,L117)
    Width => "64", # Excel Formula: =calc_mem_width(E118:E118,M117,F118,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "ffffffffffffffff",
    MemEntries => "12",
    MemWrapper => "1R1W",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,FfBased=Enabled,PortErrPropagate=Disabled",
    Comments => "Must have 2 cc samples",
    ArrayLength => "4",
    ArrayIndex => "0",
    MemLogicalWidth => "64",
    PpExactMatchFBMData0 => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "PpExactMatchFBMData[n]",
      RegMem => "MemField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F117,E118,TRUE)
    },
  },
  PpExactMatchFBM1 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16;
    Name => "PpExactMatchFBM[4]",
    RegMem => "Mem",
    Address => "E00000",
    Width => "64", # Excel Formula: =calc_mem_width(E118:E118,M117,F118,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "ffffffffffffffff",
    MemEntries => "12",
    MemWrapper => "1R1W",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,FfBased=Enabled,PortErrPropagate=Disabled",
    Comments => "Must have 2 cc samples",
    ArrayLength => "4",
    ArrayIndex => "1",
    MemLogicalWidth => "64",
    PpExactMatchFBMData1 => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "PpExactMatchFBMData[n]",
      RegMem => "MemField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F117,E118,TRUE)
    },
  },
  PpExactMatchFBM2 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16;
    Name => "PpExactMatchFBM[4]",
    RegMem => "Mem",
    Address => "F00000",
    Width => "64", # Excel Formula: =calc_mem_width(E118:E118,M117,F118,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "ffffffffffffffff",
    MemEntries => "12",
    MemWrapper => "1R1W",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,FfBased=Enabled,PortErrPropagate=Disabled",
    Comments => "Must have 2 cc samples",
    ArrayLength => "4",
    ArrayIndex => "2",
    MemLogicalWidth => "64",
    PpExactMatchFBMData2 => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "PpExactMatchFBMData[n]",
      RegMem => "MemField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F117,E118,TRUE)
    },
  },
  PpExactMatchFBM3 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16;
    Name => "PpExactMatchFBM[4]",
    RegMem => "Mem",
    Address => "1000000",
    Width => "64", # Excel Formula: =calc_mem_width(E118:E118,M117,F118,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "ffffffffffffffff",
    MemEntries => "12",
    MemWrapper => "1R1W",
    MemProtect => "None",
    AdditionalInfo => "SampleReadBeforeProt=1,SampleReadAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,FfBased=Enabled,PortErrPropagate=Disabled",
    Comments => "Must have 2 cc samples",
    ArrayLength => "4",
    ArrayIndex => "3",
    MemLogicalWidth => "64",
    PpExactMatchFBMData3 => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "PpExactMatchFBMData[n]",
      RegMem => "MemField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F117,E118,TRUE)
    },
  },
  PpExactMatchPdMemoryNarrow0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 27;
    Name => "PpExactMatchPdMemoryNarrow[2]",
    RegMem => "Mem",
    Address => "1100000", # Excel Formula: =calc_mem_address(C117,A117,G119,L119)
    Description => "In FE and FB the PD is significantly wider but the reorder requires less PDs - thus the PD memory is split to a wide part  and a narrow part.",
    Width => "113", # Excel Formula: =calc_mem_width(E120:E120,M119,F120,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "1536",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "Should have the exact read/write latency as the wide pd memory",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "105",
    PpExactMatchPdMemoryDataNarrow0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 31;
      Name => "PpExactMatchPdMemoryDataNarrow[n]",
      RegMem => "MemField",
      Description => "Holds the out PD without the additional TS (additonal TS is relevant for FE and FB slices)",
      Width => "105",
      Position => "104:0", # Excel Formula: =calc_position(F119,E120,TRUE)
    },
  },
  PpExactMatchPdMemoryNarrow1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 27;
    Name => "PpExactMatchPdMemoryNarrow[2]",
    RegMem => "Mem",
    Address => "1200000",
    Description => "In FE and FB the PD is significantly wider but the reorder requires less PDs - thus the PD memory is split to a wide part  and a narrow part.",
    Width => "113", # Excel Formula: =calc_mem_width(E120:E120,M119,F120,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "1536",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "Should have the exact read/write latency as the wide pd memory",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "105",
    PpExactMatchPdMemoryDataNarrow1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 31;
      Name => "PpExactMatchPdMemoryDataNarrow[n]",
      RegMem => "MemField",
      Description => "Holds the out PD without the additional TS (additonal TS is relevant for FE and FB slices)",
      Width => "105",
      Position => "104:0", # Excel Formula: =calc_position(F119,E120,TRUE)
    },
  },
  PpExactMatchPdMemoryWide0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 25;
    Name => "PpExactMatchPdMemoryWide[2]",
    RegMem => "Mem",
    Address => "1300000", # Excel Formula: =calc_mem_address(C119,A119,G121,L121)
    Description => "In FE and FB the PD is significantly wider but the reorde requires less PDs - thus the PD memory is split to a wide part  and a narrow part.",
    Width => "56", # Excel Formula: =calc_mem_width(E122:E122,M121,F122,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "512",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "Should have the exact read/write latency as the narrow pd memory",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "49",
    PpExactMatchPdMemoryDataWide0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 29;
      Name => "PpExactMatchPdMemoryDataWide[n]",
      RegMem => "MemField",
      Description => "Holds the delta between the narrow PD and the out PD ",
      Width => "49",
      Position => "48:0", # Excel Formula: =calc_position(F121,E122,TRUE)
    },
  },
  PpExactMatchPdMemoryWide1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 25;
    Name => "PpExactMatchPdMemoryWide[2]",
    RegMem => "Mem",
    Address => "1400000",
    Description => "In FE and FB the PD is significantly wider but the reorde requires less PDs - thus the PD memory is split to a wide part  and a narrow part.",
    Width => "56", # Excel Formula: =calc_mem_width(E122:E122,M121,F122,-1)
    Type => "Dynamic",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "512",
    MemWrapper => "1P",
    MemProtect => "ECC",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "Should have the exact read/write latency as the narrow pd memory",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "49",
    PpExactMatchPdMemoryDataWide1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 29;
      Name => "PpExactMatchPdMemoryDataWide[n]",
      RegMem => "MemField",
      Description => "Holds the delta between the narrow PD and the out PD ",
      Width => "49",
      Position => "48:0", # Excel Formula: =calc_position(F121,E122,TRUE)
    },
  },
  PpExactMatch0 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 13;
    Name => "PpExactMatch[4]",
    RegMem => "Mem",
    Address => "1300000", # Excel Formula: =calc_mem_address(C121,A121,G123,L123)
    Width => "10", # Excel Formula: =calc_mem_width(E124:E124,M123,F124,-1)
    Type => "DocOnly",
    UsedBy => "DSN",
    MemEntries => "3072",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=20,SourceIdWidth=1,NumberOfBanks=2,NumberOfCamEntries=64,QuickInsert=Enabled,BinSize=3,PackArrayToBus=Enabled,VerifierSampleReadBeforeProt=2,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=25,VrfReadActivityFactor=25,ValidSampleReadBeforeProt=2,ValidCpuReadAccess=Enabled,ValidCpuWriteAccess=Enabled,VldWriteActivityFactor=50,VldReadActivityFactor=50",
    ArrayLength => "4",
    ArrayIndex => "0",
    MemLogicalWidth => "10",
    PpExactMatchData0 => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 17;
      Name => "PpExactMatchData[n]",
      RegMem => "MemField",
      Description => "Payload Width - Pointer to the PD memory",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F123,E124,TRUE)
    },
  },
  PpExactMatch1 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 13;
    Name => "PpExactMatch[4]",
    RegMem => "Mem",
    Address => "1400000",
    Width => "10", # Excel Formula: =calc_mem_width(E124:E124,M123,F124,-1)
    Type => "DocOnly",
    UsedBy => "DSN",
    MemEntries => "3072",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=20,SourceIdWidth=1,NumberOfBanks=2,NumberOfCamEntries=64,QuickInsert=Enabled,BinSize=3,PackArrayToBus=Enabled,VerifierSampleReadBeforeProt=2,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=25,VrfReadActivityFactor=25,ValidSampleReadBeforeProt=2,ValidCpuReadAccess=Enabled,ValidCpuWriteAccess=Enabled,VldWriteActivityFactor=50,VldReadActivityFactor=50",
    ArrayLength => "4",
    ArrayIndex => "1",
    MemLogicalWidth => "10",
    PpExactMatchData1 => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 17;
      Name => "PpExactMatchData[n]",
      RegMem => "MemField",
      Description => "Payload Width - Pointer to the PD memory",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F123,E124,TRUE)
    },
  },
  PpExactMatch2 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 13;
    Name => "PpExactMatch[4]",
    RegMem => "Mem",
    Address => "1500000",
    Width => "10", # Excel Formula: =calc_mem_width(E124:E124,M123,F124,-1)
    Type => "DocOnly",
    UsedBy => "DSN",
    MemEntries => "3072",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=20,SourceIdWidth=1,NumberOfBanks=2,NumberOfCamEntries=64,QuickInsert=Enabled,BinSize=3,PackArrayToBus=Enabled,VerifierSampleReadBeforeProt=2,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=25,VrfReadActivityFactor=25,ValidSampleReadBeforeProt=2,ValidCpuReadAccess=Enabled,ValidCpuWriteAccess=Enabled,VldWriteActivityFactor=50,VldReadActivityFactor=50",
    ArrayLength => "4",
    ArrayIndex => "2",
    MemLogicalWidth => "10",
    PpExactMatchData2 => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 17;
      Name => "PpExactMatchData[n]",
      RegMem => "MemField",
      Description => "Payload Width - Pointer to the PD memory",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F123,E124,TRUE)
    },
  },
  PpExactMatch3 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 13;
    Name => "PpExactMatch[4]",
    RegMem => "Mem",
    Address => "1600000",
    Width => "10", # Excel Formula: =calc_mem_width(E124:E124,M123,F124,-1)
    Type => "DocOnly",
    UsedBy => "DSN",
    MemEntries => "3072",
    MemWrapper => "EM",
    MemProtect => "None",
    AdditionalInfo => "KeyWidth=20,SourceIdWidth=1,NumberOfBanks=2,NumberOfCamEntries=64,QuickInsert=Enabled,BinSize=3,PackArrayToBus=Enabled,VerifierSampleReadBeforeProt=2,VerifierCpuReadAccess=Enabled,VerifierCpuWriteAccess=Enabled,VrfWriteActivityFactor=25,VrfReadActivityFactor=25,ValidSampleReadBeforeProt=2,ValidCpuReadAccess=Enabled,ValidCpuWriteAccess=Enabled,VldWriteActivityFactor=50,VldReadActivityFactor=50",
    ArrayLength => "4",
    ArrayIndex => "3",
    MemLogicalWidth => "10",
    PpExactMatchData3 => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 17;
      Name => "PpExactMatchData[n]",
      RegMem => "MemField",
      Description => "Payload Width - Pointer to the PD memory",
      Width => "10",
      Position => "9:0", # Excel Formula: =calc_position(F123,E124,TRUE)
    },
  },
  ConnectionProfileTable0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 23;
    Name => "ConnectionProfileTable[2]",
    RegMem => "Mem",
    Address => "1500000", # Excel Formula: =calc_mem_address(C121,A121,G125,L125)
    Width => "3", # Excel Formula: =calc_mem_width(E126:E126,M125,F126,-1)
    Type => "Config",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "160",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,FfBased=Enabled,WriteActivityFactor=0,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "Should have the exact read/write latency as the connection table",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "3",
    ProfileNum0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 11;
      Name => "ProfileNum[n]",
      RegMem => "MemField",
      Description => "Holds a profile per connection that will be associated with a PD drop threshold",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F125,E126,TRUE)
    },
  },
  ConnectionProfileTable1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 23;
    Name => "ConnectionProfileTable[2]",
    RegMem => "Mem",
    Address => "1600000",
    Width => "3", # Excel Formula: =calc_mem_width(E126:E126,M125,F126,-1)
    Type => "Config",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "160",
    MemWrapper => "1P",
    MemProtect => "None",
    AdditionalInfo => "SampleReadAccess=1,SampleReadBeforeProt=2,SampleReadAfterProt=1,SampleWriteAfterProt=1,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,FfBased=Enabled,WriteActivityFactor=0,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "Should have the exact read/write latency as the connection table",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "3",
    ProfileNum1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 11;
      Name => "ProfileNum[n]",
      RegMem => "MemField",
      Description => "Holds a profile per connection that will be associated with a PD drop threshold",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F125,E126,TRUE)
    },
  },
  ProfileConfigTable0 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 19;
    Name => "ProfileConfigTable[2]",
    RegMem => "Mem",
    Address => "1700000", # Excel Formula: =calc_mem_address(C125,A125,G127,L127)
    Width => "11", # Excel Formula: =calc_mem_width(E128:E128,M127,F128,-1)
    Type => "Config",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "8",
    MemWrapper => "RegArray",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,PortErrPropagate=Disabled",
    ArrayLength => "2",
    ArrayIndex => "0",
    MemLogicalWidth => "11",
    ConnectionPdThreshold0 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 0; ArrayLocationInName: 22;
      Name => "ConnectionPdThreshold[n]",
      RegMem => "MemField",
      Description => "Defines the max number of PDs that the connection may store before the expected packet is assumed to be lost.
Should be configured according to the RXPP skew and the connection rate.",
      Width => "11",
      Position => "10:0", # Excel Formula: =calc_position(F127,E128,TRUE)
    },
  },
  ProfileConfigTable1 => { #Structure Type: Mem; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 19;
    Name => "ProfileConfigTable[2]",
    RegMem => "Mem",
    Address => "1800000",
    Width => "11", # Excel Formula: =calc_mem_width(E128:E128,M127,F128,-1)
    Type => "Config",
    UsedBy => "DSN",
    DefaultValue => "N/A",
    MemEntries => "8",
    MemWrapper => "RegArray",
    MemProtect => "None",
    AdditionalInfo => "CpuReadAccess=Enabled,CpuWriteAccess=Enabled,PackArrayToBus=Enabled,PortErrPropagate=Disabled",
    ArrayLength => "2",
    ArrayIndex => "1",
    MemLogicalWidth => "11",
    ConnectionPdThreshold1 => { #Structure Type: MemField; ArrayLength: 2; ArrayIndex: 1; ArrayLocationInName: 22;
      Name => "ConnectionPdThreshold[n]",
      RegMem => "MemField",
      Description => "Defines the max number of PDs that the connection may store before the expected packet is assumed to be lost.
Should be configured according to the RXPP skew and the connection rate.",
      Width => "11",
      Position => "10:0", # Excel Formula: =calc_position(F127,E128,TRUE)
    },
  },
  PpExactMatchVerifier0 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchVerifier[8]",
    RegMem => "Mem",
    Address => "1900000", # Excel Formula: =calc_mem_address(C127,A127,G129,L129)
    Width => "81", # Excel Formula: =calc_mem_width(E130:E130,M129,F130,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    MemLogicalWidth => "81",
    PpExactMatchVerifier0Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 21;
      Name => "PpExactMatchVerifier[n]Data",
      RegMem => "MemField",
      Width => "81",
      Position => "80:0", # Excel Formula: =calc_position(F129,E130,TRUE)
    },
  },
  PpExactMatchVerifier1 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchVerifier[8]",
    RegMem => "Mem",
    Address => "1A00000",
    Width => "81", # Excel Formula: =calc_mem_width(E130:E130,M129,F130,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    MemLogicalWidth => "81",
    PpExactMatchVerifier1Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 21;
      Name => "PpExactMatchVerifier[n]Data",
      RegMem => "MemField",
      Width => "81",
      Position => "80:0", # Excel Formula: =calc_position(F129,E130,TRUE)
    },
  },
  PpExactMatchVerifier2 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchVerifier[8]",
    RegMem => "Mem",
    Address => "1B00000",
    Width => "81", # Excel Formula: =calc_mem_width(E130:E130,M129,F130,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    MemLogicalWidth => "81",
    PpExactMatchVerifier2Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 21;
      Name => "PpExactMatchVerifier[n]Data",
      RegMem => "MemField",
      Width => "81",
      Position => "80:0", # Excel Formula: =calc_position(F129,E130,TRUE)
    },
  },
  PpExactMatchVerifier3 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchVerifier[8]",
    RegMem => "Mem",
    Address => "1C00000",
    Width => "81", # Excel Formula: =calc_mem_width(E130:E130,M129,F130,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    MemLogicalWidth => "81",
    PpExactMatchVerifier3Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 21;
      Name => "PpExactMatchVerifier[n]Data",
      RegMem => "MemField",
      Width => "81",
      Position => "80:0", # Excel Formula: =calc_position(F129,E130,TRUE)
    },
  },
  PpExactMatchVerifier4 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchVerifier[8]",
    RegMem => "Mem",
    Address => "1D00000",
    Width => "81", # Excel Formula: =calc_mem_width(E130:E130,M129,F130,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    MemLogicalWidth => "81",
    PpExactMatchVerifier4Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 21;
      Name => "PpExactMatchVerifier[n]Data",
      RegMem => "MemField",
      Width => "81",
      Position => "80:0", # Excel Formula: =calc_position(F129,E130,TRUE)
    },
  },
  PpExactMatchVerifier5 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchVerifier[8]",
    RegMem => "Mem",
    Address => "1E00000",
    Width => "81", # Excel Formula: =calc_mem_width(E130:E130,M129,F130,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    MemLogicalWidth => "81",
    PpExactMatchVerifier5Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 21;
      Name => "PpExactMatchVerifier[n]Data",
      RegMem => "MemField",
      Width => "81",
      Position => "80:0", # Excel Formula: =calc_position(F129,E130,TRUE)
    },
  },
  PpExactMatchVerifier6 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchVerifier[8]",
    RegMem => "Mem",
    Address => "1F00000",
    Width => "81", # Excel Formula: =calc_mem_width(E130:E130,M129,F130,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    MemLogicalWidth => "81",
    PpExactMatchVerifier6Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 21;
      Name => "PpExactMatchVerifier[n]Data",
      RegMem => "MemField",
      Width => "81",
      Position => "80:0", # Excel Formula: =calc_position(F129,E130,TRUE)
    },
  },
  PpExactMatchVerifier7 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchVerifier[8]",
    RegMem => "Mem",
    Address => "2000000",
    Width => "81", # Excel Formula: =calc_mem_width(E130:E130,M129,F130,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1P WriteMask",
    MemProtect => "ExtECC",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=25,ReadActivityFactor=25,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    MemLogicalWidth => "81",
    PpExactMatchVerifier7Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 21;
      Name => "PpExactMatchVerifier[n]Data",
      RegMem => "MemField",
      Width => "81",
      Position => "80:0", # Excel Formula: =calc_position(F129,E130,TRUE)
    },
  },
  PpExactMatchValid0 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18; Skip Register;
    Name => "PpExactMatchValid[8]",
    RegMem => "Mem",
    Address => "2100000", # Excel Formula: =calc_mem_address(C129,A129,G131,L131)
    Width => "3", # Excel Formula: =calc_mem_width(E132:E132,M131,F132,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    MemLogicalWidth => "3",
    PpExactMatchValid0Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 18;
      Name => "PpExactMatchValid[n]Data",
      RegMem => "MemField",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F131,E132,TRUE)
    },
  },
  PpExactMatchValid1 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18; Skip Register;
    Name => "PpExactMatchValid[8]",
    RegMem => "Mem",
    Address => "2200000",
    Width => "3", # Excel Formula: =calc_mem_width(E132:E132,M131,F132,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    MemLogicalWidth => "3",
    PpExactMatchValid1Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 18;
      Name => "PpExactMatchValid[n]Data",
      RegMem => "MemField",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F131,E132,TRUE)
    },
  },
  PpExactMatchValid2 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18; Skip Register;
    Name => "PpExactMatchValid[8]",
    RegMem => "Mem",
    Address => "2300000",
    Width => "3", # Excel Formula: =calc_mem_width(E132:E132,M131,F132,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    MemLogicalWidth => "3",
    PpExactMatchValid2Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 18;
      Name => "PpExactMatchValid[n]Data",
      RegMem => "MemField",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F131,E132,TRUE)
    },
  },
  PpExactMatchValid3 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18; Skip Register;
    Name => "PpExactMatchValid[8]",
    RegMem => "Mem",
    Address => "2400000",
    Width => "3", # Excel Formula: =calc_mem_width(E132:E132,M131,F132,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    MemLogicalWidth => "3",
    PpExactMatchValid3Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 18;
      Name => "PpExactMatchValid[n]Data",
      RegMem => "MemField",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F131,E132,TRUE)
    },
  },
  PpExactMatchValid4 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18; Skip Register;
    Name => "PpExactMatchValid[8]",
    RegMem => "Mem",
    Address => "2500000",
    Width => "3", # Excel Formula: =calc_mem_width(E132:E132,M131,F132,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    MemLogicalWidth => "3",
    PpExactMatchValid4Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 18;
      Name => "PpExactMatchValid[n]Data",
      RegMem => "MemField",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F131,E132,TRUE)
    },
  },
  PpExactMatchValid5 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18; Skip Register;
    Name => "PpExactMatchValid[8]",
    RegMem => "Mem",
    Address => "2600000",
    Width => "3", # Excel Formula: =calc_mem_width(E132:E132,M131,F132,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    MemLogicalWidth => "3",
    PpExactMatchValid5Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 18;
      Name => "PpExactMatchValid[n]Data",
      RegMem => "MemField",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F131,E132,TRUE)
    },
  },
  PpExactMatchValid6 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18; Skip Register;
    Name => "PpExactMatchValid[8]",
    RegMem => "Mem",
    Address => "2700000",
    Width => "3", # Excel Formula: =calc_mem_width(E132:E132,M131,F132,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    MemLogicalWidth => "3",
    PpExactMatchValid6Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 18;
      Name => "PpExactMatchValid[n]Data",
      RegMem => "MemField",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F131,E132,TRUE)
    },
  },
  PpExactMatchValid7 => { #Structure Type: Mem; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18; Skip Register;
    Name => "PpExactMatchValid[8]",
    RegMem => "Mem",
    Address => "2800000",
    Width => "3", # Excel Formula: =calc_mem_width(E132:E132,M131,F132,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "512",
    MemWrapper => "1R1W WriteMask",
    MemProtect => "None",
    AdditionalInfo => "PackArrayToBus=Enabled,SampleReadBeforeProt=2,CpuReadAccess=Enabled,CpuWriteAccess=Enabled,WriteActivityFactor=50,ReadActivityFactor=50,PortErrPropagate=Disabled",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    MemLogicalWidth => "3",
    PpExactMatchValid7Data => { #Structure Type: MemField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 18;
      Name => "PpExactMatchValid[n]Data",
      RegMem => "MemField",
      Width => "3",
      Position => "2:0", # Excel Formula: =calc_position(F131,E132,TRUE)
    },
  },
  PpExactMatchPerBankReg0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 23; Skip Register;
    Name => "PpExactMatchPerBankReg[8]",
    RegMem => "Reg",
    Address => "125", # Excel Formula: =calc_reg_address(C100,A100,G100)
    Width => "42", # Excel Formula: =calc_reg_width(E134:E136,F136)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    PpExactMatchActiveBanks0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 24;
      Name => "PpExactMatchActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F133,E134,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "d1",
    },
    PpExactMatchHashKey0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 20;
      Name => "PpExactMatchHashKey[n]",
      RegMem => "RegField",
      Width => "40",
      Position => "40:1", # Excel Formula: =calc_position(F134,E135)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchUsePrimitiveCrc0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 28;
      Name => "PpExactMatchUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F135,E136)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerBankReg1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 23; Skip Register;
    Name => "PpExactMatchPerBankReg[8]",
    RegMem => "Reg",
    Address => "126",
    Width => "42", # Excel Formula: =calc_reg_width(E134:E136,F136)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    PpExactMatchActiveBanks1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 24;
      Name => "PpExactMatchActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F133,E134,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "d1",
    },
    PpExactMatchHashKey1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 20;
      Name => "PpExactMatchHashKey[n]",
      RegMem => "RegField",
      Width => "40",
      Position => "40:1", # Excel Formula: =calc_position(F134,E135)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchUsePrimitiveCrc1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 28;
      Name => "PpExactMatchUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F135,E136)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerBankReg2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 23; Skip Register;
    Name => "PpExactMatchPerBankReg[8]",
    RegMem => "Reg",
    Address => "127",
    Width => "42", # Excel Formula: =calc_reg_width(E134:E136,F136)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    PpExactMatchActiveBanks2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 24;
      Name => "PpExactMatchActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F133,E134,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "d1",
    },
    PpExactMatchHashKey2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 20;
      Name => "PpExactMatchHashKey[n]",
      RegMem => "RegField",
      Width => "40",
      Position => "40:1", # Excel Formula: =calc_position(F134,E135)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchUsePrimitiveCrc2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 28;
      Name => "PpExactMatchUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F135,E136)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerBankReg3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 23; Skip Register;
    Name => "PpExactMatchPerBankReg[8]",
    RegMem => "Reg",
    Address => "128",
    Width => "42", # Excel Formula: =calc_reg_width(E134:E136,F136)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    PpExactMatchActiveBanks3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 24;
      Name => "PpExactMatchActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F133,E134,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "d1",
    },
    PpExactMatchHashKey3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 20;
      Name => "PpExactMatchHashKey[n]",
      RegMem => "RegField",
      Width => "40",
      Position => "40:1", # Excel Formula: =calc_position(F134,E135)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchUsePrimitiveCrc3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 28;
      Name => "PpExactMatchUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F135,E136)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerBankReg4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 23; Skip Register;
    Name => "PpExactMatchPerBankReg[8]",
    RegMem => "Reg",
    Address => "129",
    Width => "42", # Excel Formula: =calc_reg_width(E134:E136,F136)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    PpExactMatchActiveBanks4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 24;
      Name => "PpExactMatchActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F133,E134,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "d1",
    },
    PpExactMatchHashKey4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 20;
      Name => "PpExactMatchHashKey[n]",
      RegMem => "RegField",
      Width => "40",
      Position => "40:1", # Excel Formula: =calc_position(F134,E135)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchUsePrimitiveCrc4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 28;
      Name => "PpExactMatchUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F135,E136)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerBankReg5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 23; Skip Register;
    Name => "PpExactMatchPerBankReg[8]",
    RegMem => "Reg",
    Address => "12A",
    Width => "42", # Excel Formula: =calc_reg_width(E134:E136,F136)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    PpExactMatchActiveBanks5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 24;
      Name => "PpExactMatchActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F133,E134,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "d1",
    },
    PpExactMatchHashKey5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 20;
      Name => "PpExactMatchHashKey[n]",
      RegMem => "RegField",
      Width => "40",
      Position => "40:1", # Excel Formula: =calc_position(F134,E135)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchUsePrimitiveCrc5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 28;
      Name => "PpExactMatchUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F135,E136)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerBankReg6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 23; Skip Register;
    Name => "PpExactMatchPerBankReg[8]",
    RegMem => "Reg",
    Address => "12B",
    Width => "42", # Excel Formula: =calc_reg_width(E134:E136,F136)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    PpExactMatchActiveBanks6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 24;
      Name => "PpExactMatchActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F133,E134,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "d1",
    },
    PpExactMatchHashKey6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 20;
      Name => "PpExactMatchHashKey[n]",
      RegMem => "RegField",
      Width => "40",
      Position => "40:1", # Excel Formula: =calc_position(F134,E135)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchUsePrimitiveCrc6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 28;
      Name => "PpExactMatchUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F135,E136)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerBankReg7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 23; Skip Register;
    Name => "PpExactMatchPerBankReg[8]",
    RegMem => "Reg",
    Address => "12C",
    Width => "42", # Excel Formula: =calc_reg_width(E134:E136,F136)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    PpExactMatchActiveBanks7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 24;
      Name => "PpExactMatchActiveBanks[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "0", # Excel Formula: =calc_position(F133,E134,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "d1",
    },
    PpExactMatchHashKey7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 20;
      Name => "PpExactMatchHashKey[n]",
      RegMem => "RegField",
      Width => "40",
      Position => "40:1", # Excel Formula: =calc_position(F134,E135)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchUsePrimitiveCrc7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 28;
      Name => "PpExactMatchUsePrimitiveCrc[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "41", # Excel Formula: =calc_position(F135,E136)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerEmReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchPerEmReg[4]",
    RegMem => "Reg",
    Address => "12D", # Excel Formula: =calc_reg_address(C133,A133,G133)
    Width => "33", # Excel Formula: =calc_reg_width(E138:E140,F140)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    PpExactMatchKeyWidth0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 21;
      Name => "PpExactMatchKeyWidth[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F137,E138,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchAutoBubbleReq0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 26;
      Name => "PpExactMatchAutoBubbleReq[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F138,E139)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchBubbleReqThreshold0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 31;
      Name => "PpExactMatchBubbleReqThreshold[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F139,E140)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerEmReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchPerEmReg[4]",
    RegMem => "Reg",
    Address => "12E",
    Width => "33", # Excel Formula: =calc_reg_width(E138:E140,F140)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    PpExactMatchKeyWidth1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 21;
      Name => "PpExactMatchKeyWidth[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F137,E138,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchAutoBubbleReq1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 26;
      Name => "PpExactMatchAutoBubbleReq[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F138,E139)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchBubbleReqThreshold1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 31;
      Name => "PpExactMatchBubbleReqThreshold[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F139,E140)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerEmReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchPerEmReg[4]",
    RegMem => "Reg",
    Address => "12F",
    Width => "33", # Excel Formula: =calc_reg_width(E138:E140,F140)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    PpExactMatchKeyWidth2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 21;
      Name => "PpExactMatchKeyWidth[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F137,E138,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchAutoBubbleReq2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 26;
      Name => "PpExactMatchAutoBubbleReq[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F138,E139)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchBubbleReqThreshold2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 31;
      Name => "PpExactMatchBubbleReqThreshold[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F139,E140)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchPerEmReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 21; Skip Register;
    Name => "PpExactMatchPerEmReg[4]",
    RegMem => "Reg",
    Address => "130",
    Width => "33", # Excel Formula: =calc_reg_width(E138:E140,F140)
    Type => "Config",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    PpExactMatchKeyWidth3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 21;
      Name => "PpExactMatchKeyWidth[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "15:0", # Excel Formula: =calc_position(F137,E138,TRUE)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchAutoBubbleReq3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 26;
      Name => "PpExactMatchAutoBubbleReq[n]",
      RegMem => "RegField",
      Width => "1",
      Position => "16", # Excel Formula: =calc_position(F138,E139)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
    PpExactMatchBubbleReqThreshold3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 31;
      Name => "PpExactMatchBubbleReqThreshold[n]",
      RegMem => "RegField",
      Width => "16",
      Position => "32:17", # Excel Formula: =calc_position(F139,E140)
      Type => "Config",
      UsedBy => "PpExactMatch",
      DefaultValue => "h0",
    },
  },
  PpExactMatchCamWmMaxReg0 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 24; Skip Register;
    Name => "PpExactMatchCamWmMaxReg[4]",
    RegMem => "Reg",
    Address => "131", # Excel Formula: =calc_reg_address(C137,A137,G137)
    Width => "8", # Excel Formula: =calc_reg_width(E142:E142,F142)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    PpExactMatchCamWmMax0 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 21;
      Name => "PpExactMatchCamWmMax[n]",
      RegMem => "RegField",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F141,E142,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchCamWmMaxReg1 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 24; Skip Register;
    Name => "PpExactMatchCamWmMaxReg[4]",
    RegMem => "Reg",
    Address => "132",
    Width => "8", # Excel Formula: =calc_reg_width(E142:E142,F142)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    PpExactMatchCamWmMax1 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 21;
      Name => "PpExactMatchCamWmMax[n]",
      RegMem => "RegField",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F141,E142,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchCamWmMaxReg2 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 24; Skip Register;
    Name => "PpExactMatchCamWmMaxReg[4]",
    RegMem => "Reg",
    Address => "133",
    Width => "8", # Excel Formula: =calc_reg_width(E142:E142,F142)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    PpExactMatchCamWmMax2 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 21;
      Name => "PpExactMatchCamWmMax[n]",
      RegMem => "RegField",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F141,E142,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchCamWmMaxReg3 => { #Structure Type: Reg; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 24; Skip Register;
    Name => "PpExactMatchCamWmMaxReg[4]",
    RegMem => "Reg",
    Address => "134",
    Width => "8", # Excel Formula: =calc_reg_width(E142:E142,F142)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    PpExactMatchCamWmMax3 => { #Structure Type: RegField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 21;
      Name => "PpExactMatchCamWmMax[n]",
      RegMem => "RegField",
      Width => "8",
      Position => "7:0", # Excel Formula: =calc_position(F141,E142,TRUE)
      Type => "MaxWmk",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchBankWriteCntrReg0 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 29; Skip Register;
    Name => "PpExactMatchBankWriteCntrReg[8]",
    RegMem => "Reg",
    Address => "135", # Excel Formula: =calc_reg_address(C141,A141,G141)
    Width => "64", # Excel Formula: =calc_reg_width(E144:E144,F144)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "0",
    PpExactMatchBankWriteCntr0 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 0; ArrayLocationInName: 26;
      Name => "PpExactMatchBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F143,E144,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchBankWriteCntrReg1 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 29; Skip Register;
    Name => "PpExactMatchBankWriteCntrReg[8]",
    RegMem => "Reg",
    Address => "136",
    Width => "64", # Excel Formula: =calc_reg_width(E144:E144,F144)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "1",
    PpExactMatchBankWriteCntr1 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 1; ArrayLocationInName: 26;
      Name => "PpExactMatchBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F143,E144,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchBankWriteCntrReg2 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 29; Skip Register;
    Name => "PpExactMatchBankWriteCntrReg[8]",
    RegMem => "Reg",
    Address => "137",
    Width => "64", # Excel Formula: =calc_reg_width(E144:E144,F144)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "2",
    PpExactMatchBankWriteCntr2 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 2; ArrayLocationInName: 26;
      Name => "PpExactMatchBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F143,E144,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchBankWriteCntrReg3 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 29; Skip Register;
    Name => "PpExactMatchBankWriteCntrReg[8]",
    RegMem => "Reg",
    Address => "138",
    Width => "64", # Excel Formula: =calc_reg_width(E144:E144,F144)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "3",
    PpExactMatchBankWriteCntr3 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 3; ArrayLocationInName: 26;
      Name => "PpExactMatchBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F143,E144,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchBankWriteCntrReg4 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 29; Skip Register;
    Name => "PpExactMatchBankWriteCntrReg[8]",
    RegMem => "Reg",
    Address => "139",
    Width => "64", # Excel Formula: =calc_reg_width(E144:E144,F144)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "4",
    PpExactMatchBankWriteCntr4 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 4; ArrayLocationInName: 26;
      Name => "PpExactMatchBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F143,E144,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchBankWriteCntrReg5 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 29; Skip Register;
    Name => "PpExactMatchBankWriteCntrReg[8]",
    RegMem => "Reg",
    Address => "13A",
    Width => "64", # Excel Formula: =calc_reg_width(E144:E144,F144)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "5",
    PpExactMatchBankWriteCntr5 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 5; ArrayLocationInName: 26;
      Name => "PpExactMatchBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F143,E144,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchBankWriteCntrReg6 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 29; Skip Register;
    Name => "PpExactMatchBankWriteCntrReg[8]",
    RegMem => "Reg",
    Address => "13B",
    Width => "64", # Excel Formula: =calc_reg_width(E144:E144,F144)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "6",
    PpExactMatchBankWriteCntr6 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 6; ArrayLocationInName: 26;
      Name => "PpExactMatchBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F143,E144,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchBankWriteCntrReg7 => { #Structure Type: Reg; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 29; Skip Register;
    Name => "PpExactMatchBankWriteCntrReg[8]",
    RegMem => "Reg",
    Address => "13C",
    Width => "64", # Excel Formula: =calc_reg_width(E144:E144,F144)
    Type => "ReadOnly",
    AdditionalInfo => "PackArrayToBus",
    Comments => "EM Skip Reg",
    ArrayLength => "8",
    ArrayIndex => "7",
    PpExactMatchBankWriteCntr7 => { #Structure Type: RegField; ArrayLength: 8; ArrayIndex: 7; ArrayLocationInName: 26;
      Name => "PpExactMatchBankWriteCntr[n]",
      RegMem => "RegField",
      Width => "64",
      Position => "63:0", # Excel Formula: =calc_position(F143,E144,TRUE)
      Type => "Counter",
      UsedBy => "emdb",
      AdditionalInfo => "CounterIncrWidth=1",
    },
  },
  PpExactMatchCam0 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16; Skip Register;
    Name => "PpExactMatchCam[4]",
    RegMem => "Mem",
    Address => "2900000", # Excel Formula: =calc_mem_address(C131,A131,G145,L145)
    Width => "31", # Excel Formula: =calc_mem_width(E146:E148,"None",F148,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "64",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=10,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "0",
    MemLogicalWidth => "31",
    PpExactMatchCam0_key => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_key",
      RegMem => "MemField",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F145,E146,TRUE)
    },
    PpExactMatchCam0_payload => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_payload",
      RegMem => "MemField",
      Width => "10",
      Position => "29:20", # Excel Formula: =calc_position(F146,E147)
    },
    PpExactMatchCam0_valid => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 0; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_valid",
      RegMem => "MemField",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F147,E148)
    },
  },
  PpExactMatchCam1 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16; Skip Register;
    Name => "PpExactMatchCam[4]",
    RegMem => "Mem",
    Address => "2A00000",
    Width => "31", # Excel Formula: =calc_mem_width(E146:E148,"None",F148,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "64",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=10,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "1",
    MemLogicalWidth => "31",
    PpExactMatchCam1_key => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_key",
      RegMem => "MemField",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F145,E146,TRUE)
    },
    PpExactMatchCam1_payload => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_payload",
      RegMem => "MemField",
      Width => "10",
      Position => "29:20", # Excel Formula: =calc_position(F146,E147)
    },
    PpExactMatchCam1_valid => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 1; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_valid",
      RegMem => "MemField",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F147,E148)
    },
  },
  PpExactMatchCam2 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16; Skip Register;
    Name => "PpExactMatchCam[4]",
    RegMem => "Mem",
    Address => "2B00000",
    Width => "31", # Excel Formula: =calc_mem_width(E146:E148,"None",F148,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "64",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=10,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "2",
    MemLogicalWidth => "31",
    PpExactMatchCam2_key => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_key",
      RegMem => "MemField",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F145,E146,TRUE)
    },
    PpExactMatchCam2_payload => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_payload",
      RegMem => "MemField",
      Width => "10",
      Position => "29:20", # Excel Formula: =calc_position(F146,E147)
    },
    PpExactMatchCam2_valid => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 2; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_valid",
      RegMem => "MemField",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F147,E148)
    },
  },
  PpExactMatchCam3 => { #Structure Type: Mem; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16; Skip Register;
    Name => "PpExactMatchCam[4]",
    RegMem => "Mem",
    Address => "2C00000",
    Width => "31", # Excel Formula: =calc_mem_width(E146:E148,"None",F148,-1)
    Type => "Dynamic",
    UsedBy => "PpExactMatch",
    MemEntries => "64",
    MemWrapper => "TCAM",
    MemProtect => "None",
    AdditionalInfo => "NumOfKeys=1,RegTcamPayloadWidth=10,CAM=Enabled,CpuReadAccess=Enabled,CpuWriteAccess=Enabled",
    Comments => "EM Skip Reg",
    ArrayLength => "4",
    ArrayIndex => "3",
    MemLogicalWidth => "31",
    PpExactMatchCam3_key => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_key",
      RegMem => "MemField",
      Width => "20",
      Position => "19:0", # Excel Formula: =calc_position(F145,E146,TRUE)
    },
    PpExactMatchCam3_payload => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_payload",
      RegMem => "MemField",
      Width => "10",
      Position => "29:20", # Excel Formula: =calc_position(F146,E147)
    },
    PpExactMatchCam3_valid => { #Structure Type: MemField; ArrayLength: 4; ArrayIndex: 3; ArrayLocationInName: 16;
      Name => "PpExactMatchCam[n]_valid",
      RegMem => "MemField",
      Width => "1",
      Position => "30", # Excel Formula: =calc_position(F147,E148)
    },
  },
};
