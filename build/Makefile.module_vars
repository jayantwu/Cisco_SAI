# BEGIN_LEGAL
#
# Copyright (c) 2016-current, Cisco Systems, Inc. ("Cisco"). All Rights Reserved.
#
# This file and all technical concepts, proprietary knowledge, algorithms and
# intellectual property rights it contains (collectively the "Confidential Information"),
# are the sole propriety information of Cisco and shall remain at Cisco's ownership.
# You shall not disclose the Confidential Information to any third party and you
# shall use it solely in connection with operating and/or maintaining of Cisco's
# products and pursuant to the terms and conditions of the license agreement you
# entered into with Cisco.
#
# THE SOURCE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED.
# IN NO EVENT SHALL CISCO BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
# THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# END_LEGAL

# Variable defintion makefile, sourced once per module.
# Common variables such as srcs, objs, library files, application name etc are initialized here.

ifeq ($(PKG),)
    $(error PKG argument not defined)
endif

ifeq ($(PKG-PATH),)
    $(error PKG-PATH argument not defined)
endif

PKG-NAME := $(subst -,_,$(PKG))
ifeq ($(PKG-SWIG-NAME),)
    PKG-SWIG-NAME := $(subst -,_,$(PKG))cli
endif

# Generic module variable definitions
$(PKG)-build-dir := $(BASE_OUTPUT_DIR)/build/$(PKG-PATH)

ifeq ($(PKG-GENERATED-DIR),)
    PKG-GENERATED-DIR := $($(PKG)-build-dir)
endif


ifneq ($(PKG-PY-MODULE-PATH),)
    PKG-PYLIB-OUTPUT-DIR := $(PYLIB_OUTPUT_DIR)/$(PKG-PY-MODULE-PATH)
endif

$(PKG)-generated-cpp-srcs := $(patsubst %.cpp, $(PKG-GENERATED-DIR)/%.cpp, $(PKG-GENERATED-CPP-FILES))
$(PKG)-generated-h-files := $(patsubst %.h, $(PKG-GENERATED-DIR)/%.h, $(PKG-GENERATED-H-FILES))

ifeq ($(ENABLE_SERIALIZATION), 1)
    ifeq ($(PKG-CEREAL-GEN),True)
        # checking that the proper makefiles are loaded
        ifeq ($(cereal-gen-as-dependency),)
            $(error cereal-tool makefile is not loaded! include it from <main_dir>/tools/cereal_gen/Makefile.inc)
        endif
        ifeq ($(cereal-configured),)
            $(error cereal extract makefile is not loaded! include it from <main_dir>/tools/cereal/Makefile.inc)
        endif
        # initializing serialization variables
        $(PKG)-cereal-h-files := \
          $(PKG-EXTRA_H_FILES) \
          $(sort $(wildcard $(PKG-PATH)/*.h)) \
          $(foreach subdir, $(PKG-SUBDIRS), $(sort $(wildcard $(PKG-PATH)/$(subdir)/*.h))) \
          $(foreach dir, $(PKG-CEREAL-EXTRA-DIRS), $(sort $(wildcard $(dir)/*.h)))
        $(PKG)-cereal-module-dirs := \
          $(PKG-PATH) \
          $(foreach subdir, $(PKG-SUBDIRS), $(PKG-PATH)/$(subdir)) \
          $(PKG-CEREAL-EXTRA-DIRS) \
          $(PKG-GENERATED-DIR)
        $(PKG)-cereal-out-file-template := $($(PKG)-build-dir)/$(PKG-NAME)_serialized_%.cpp
        ifneq ($(PKG-CEREAL-CONFIG-FILE),)
            $(PKG)-cereal-config-file := $(PKG-PATH)/$(PKG-CEREAL-CONFIG-FILE)
        endif
        $(PKG)-gen-cereal := $($(PKG)-build-dir)/.serialize_generated
        $(PKG)-cereal-num-generated-files := $(PKG-CEREAL-NUM-OF-GENERATED-FILES)
        $(PKG)-cereal-generated-cpp-files := $(patsubst %,$($(PKG)-cereal-out-file-template),$(call gen_seq1,$(PKG-CEREAL-NUM-OF-GENERATED-FILES)))
    endif
endif


$(PKG)-cpp-srcs := \
  $($(PKG)-cereal-generated-cpp-files) \
  $(PKG-EXTRA_CPPSRCS) \
  $(wildcard $(PKG-PATH)/*.cpp) \
  $(foreach subdir, $(PKG-SUBDIRS), $(wildcard $(PKG-PATH)/$(subdir)/*.cpp)) \
  $($(PKG)-generated-cpp-srcs)

$(PKG)-c-srcs := $(PKG-EXTRA_CSRCS) $(wildcard $(PKG-PATH)/*.c) $(foreach subdir, $(PKG-SUBDIRS), $(wildcard $(PKG-PATH)/$(subdir)/*.c))
$(PKG)-srcs := $($(PKG)-cpp-srcs) $($(PKG)-c-srcs)
$(PKG)-cpp-objs := $(patsubst %.cpp, $(OBJ_OUTPUT_DIR)%$(OBJ_EXT), $($(PKG)-cpp-srcs))
$(PKG)-cereal-generated-objs := $(patsubst %.cpp, $(OBJ_OUTPUT_DIR)%$(OBJ_EXT), $($(PKG)-cereal-generated-cpp-files))
$(PKG)-c-objs := $(patsubst %.c, $(OBJ_OUTPUT_DIR)%$(OBJ_EXT), $($(PKG)-c-srcs))
$(PKG)-objs := $($(PKG)-cpp-objs) $($(PKG)-c-objs)
$(PKG)-deps := $(patsubst %$(OBJ_EXT), %.Td, $($(PKG)-objs))
$(PKG)-py-srcs := $(wildcard $(PKG-PATH)/*.py) $(foreach subdir, $(PKG-SUBDIRS), $(wildcard $(PKG-PATH)/$(subdir)/*.py))
$(PKG)-py-libs := $(patsubst $(PKG-PATH)/%.py, $(PKG-PYLIB-OUTPUT-DIR)/%.py, $($(PKG)-py-srcs))
$(PKG)-py-bins := $(patsubst $(PKG-PATH)/%.py, $(BIN_OUTPUT_DIR)/%.py, $($(PKG)-py-srcs))
$(PKG)-copy-dirs := $(foreach subdir, $(PKG-SUBDIRS), $(PKG-PATH)/$(subdir))
$(PKG)-copy-files := $(foreach subdir, $($(PKG)-copy-dirs), $(call rwildcard, $(subdir)/, *))
$(PKG)-py-tests-status := $(patsubst %.py, $(BUILD_OUTPUT_DIR)%.passed, $(wildcard $(PKG-PATH)/test_*.py $(PKG-PATH)/*/test_*.py $(PKG-PATH)/*/*/test_*.py))
$(PKG)-matilda-py-tests-status := $(patsubst %.py, $(BUILD_OUTPUT_DIR)%.matilda_passed, $(wildcard $(PKG-PATH)/test_*.py $(PKG-PATH)/*/test_*.py $(PKG-PATH)/*/*/test_*.py))
$(PKG)-py-ref-tests-status := $(patsubst %.py, $(BUILD_OUTPUT_DIR)%.ref_passed, $(wildcard $(PKG-PATH)/test_*.py $(PKG-PATH)/*/test_*.py))
$(PKG)-py-test-benchmark = $(patsubst %.py, $(BUILD_OUTPUT_DIR)%.benchmark, $(wildcard $(PKG-PATH)/test_*.py $(PKG-PATH)/*/test_*.py))
$(PKG)-py-test-benchmark-json := $(wildcard $(PKG-PATH)/test_*$(BENCHMARK-PY-JSON-SUFFIX)) $(foreach subdir, $(PKG-SUBDIRS), $(wildcard $(PKG-PATH)/$(subdir)/test_*$(BENCHMARK-PY-JSON-SUFFIX)))
$(PKG)-py-valgrind-tests-status := $(patsubst %.py, $(BUILD_OUTPUT_DIR)%.valgrind_passed, $(wildcard $(PKG-PATH)/test_*.py $(PKG-PATH)/*/test_*.py))
$(PKG)-py-benchmark-compare-tests-status := $(patsubst %_$(BENCHMARK-PY-JSON-SUFFIX_TYPE)_benchmark.json, $(BUILD_OUTPUT_DIR)%.benchmark_compare, $(wildcard $(PKG-PATH)/test_*_$(BENCHMARK-PY-JSON-SUFFIX_TYPE)_benchmark.json $(PKG-PATH)/*/test_*_$(BENCHMARK-PY-JSON-SUFFIX_TYPE)_benchmark.json))
$(PKG)-py-benchmark-save-tests-status := $(patsubst %.py, $(BUILD_OUTPUT_DIR)%.benchmark_save, $(wildcard $(PKG-PATH)/test_*.py $(PKG-PATH)/*/test_*.py))
$(PKG)-py-warmboot-tests-status := $(patsubst %.py, $(BUILD_OUTPUT_DIR)%.warmboot_passed, $(wildcard $(PKG-PATH)/test_*.py $(PKG-PATH)/*/test_*.py $(PKG-PATH)/*/*/test_*.py))
$(PKG)-py-warmboot-upgrade-rollback-tests-status := $(patsubst %.py, $(BUILD_OUTPUT_DIR)%.warmboot_ur_passed, $(wildcard $(PKG-PATH)/warm_boot_upgrade_rollback/test_*.py $(PKG-PATH)/warm_boot_upgrade_rollback/*/test_*.py))
$(PKG)-app-test-status := $($(PKG)-build-dir)/app_$(PKG-NAME).passed
$(PKG)-app-test-ref-status := $($(PKG)-build-dir)/app_$(PKG-NAME).ref_passed
$(PKG)-app-valgrind-test-status := $($(PKG)-build-dir)/app_$(PKG-NAME).valgrind_passed

ifneq ($(DEAD_OR_ALIVE_TESTS),)
ifneq ($(filter $(PKG), test-api), )
    $(PKG)-py-dead-or-alive-tests-status := $(DEAD_OR_ALIVE_TESTS)
endif
endif


ifeq ($(strip $($(PKG)-objs)),)
  $(PKG)-slib :=
  $(PKG)-dlib :=
else
  $(PKG)-slib := $(SLIB_OUTPUT_DIR)/lib$(PKG-NAME)$(ARCHIVE_EXT)
  $(PKG)-dlib := $(DLIB_OUTPUT_DIR)/lib$(PKG-NAME)$(DYNLIB_EXT)
endif

ifneq ($(filter $(PKG-TARGETS), app), )
    $(PKG)-app := $(BIN_OUTPUT_DIR)/app_$(PKG-NAME)
    $(PKG)-as-dependency := $($(PKG)-as-dependency) $($(PKG)-app)
endif

ifneq ($(filter $(PKG-TARGETS), test_app), )
    $(PKG)-app := $(BIN_OUTPUT_DIR)/app_$(PKG-NAME)
    $(PKG)-as-dependency := $($(PKG)-as-dependency) $($(PKG)-app)
endif

ifneq ($(filter $(PKG-TARGETS), swiglib), )
    $(PKG)-swig-wrap-src := $($(PKG)-build-dir)/swig_wrap.cxx
    $(PKG)-swig-wrap-obj := $($(PKG)-build-dir)/swig_wrap$(OBJ_EXT)
    $(PKG)-swig-dlib := $(PKG-PYLIB-OUTPUT-DIR)/_$(PKG-SWIG-NAME)$(PYLIB_EXT)
    $(PKG)-deps := $($(PKG)-deps) $($(PKG)-build-dir)/swig_wrap.cxx.Td $($(PKG)-build-dir)/swig_wrap.Td
    $(PKG)-as-dependency := $($(PKG)-as-dependency) $($(PKG)-swig-dlib)
endif

ifneq ($(filter $(PKG-TARGETS), libs), )
    $(PKG)-as-dependency := $($(PKG)-as-dependency) $($(PKG)-slib) $($(PKG)-dlib)
endif

ifneq ($(filter $(PKG-TARGETS), copy), )
    $(PKG)-as-dependency := $($(PKG)-as-dependency) $(BASE_OUTPUT_DIR)/$(PKG-NAME)
endif

ifneq ($(filter $(PKG-TARGETS), py_app), )
    $(PKG)-as-dependency := $($(PKG)-as-dependency) $($(PKG)-py-bins)
endif

ifneq ($(filter $(PKG-TARGETS), py_lib), )
    $(PKG)-as-dependency := $($(PKG)-as-dependency) $($(PKG)-py-libs)
endif

ifneq ($(filter $(PKG-TARGETS), bin), )
    $(PKG)-as-dependency := $($(PKG)-as-dependency) $(PKG)
endif

ifneq ($(filter $(PKG-TARGETS), test_py), )
    $(PKG)-as-dependency := $($(PKG)-as-dependency) $(PKG-PY-TEST-PREREQS)
endif
