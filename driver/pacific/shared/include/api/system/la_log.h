// BEGIN_LEGAL
//
// Copyright (c) 2017-current, Cisco Systems, Inc. ("Cisco"). All Rights Reserved.
//
// This file and all technical concepts, proprietary knowledge, algorithms and
// intellectual property rights it contains (collectively the "Confidential Information"),
// are the sole propriety information of Cisco and shall remain at Cisco's ownership.
// You shall not disclose the Confidential Information to any third party and you
// shall use it solely in connection with operating and/or maintaining of Cisco's
// products and pursuant to the terms and conditions of the license agreement you
// entered into with Cisco.
//
// THE SOURCE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED.
// IN NO EVENT SHALL CISCO BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
// AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
// THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// END_LEGAL

#ifndef __LA_LOG_H__
#define __LA_LOG_H__

#include "api/types/la_common_types.h"

#include <chrono>

namespace silicon_one
{
constexpr char LOG_INFO_SEPARATOR{'#'};
constexpr char LOG_API_PARAM_SEPARATOR{' '};
constexpr char LOG_STRUCT_START{'('};
constexpr char LOG_STRUCT_END{')'};
constexpr char LOG_STRUCT_SEPARATOR{','};
constexpr char LOG_VEC_START{'['};
constexpr char LOG_VEC_END{']'};
constexpr char LOG_VEC_ELEM_SEPARATOR{';'};
constexpr char LOG_DATA_TYPE_START{'<'};
constexpr char LOG_DATA_TYPE_END{'>'};

/// @brief Log levels.
enum class la_logger_level_e {
    FIRST = 0,
    EMERG = 0, ///< System is unusable.
    ALERT,     ///< Action must be taken immediately.
    CRIT,      ///< Critical conditions.
    ERROR,     ///< Error conditions.
    WARNING,   ///< Warning conditions.
    NOTICE,    ///< Normal, but significant, condition.
    INFO,      ///< Informational message.
    DEBUG,     ///< Debug-level message.
    XDEBUG,    ///< Detailed debug-level message.
    SPAM,      ///< Very detailed debug-level message.
    LAST = SPAM
};

/// @brief Packages that may be logged.
///
enum class la_logger_component_e {
    FIRST = 0,
    COMMON = 0, ///< Message generated by Common component.
    LLD,        ///< Message generated by LLD component.
    AE,         ///< Message generated by Access Engine component.
    AAPL,       ///< Message generated by AAPL component.
    TABLES,     ///< Message generated by Tables component.
    HLD,        ///< Message generated by HLD component.
    MAC_PORT,   ///< Message generated by MAC_PORT component.
    NPLAPI,     ///< Message generated by NPLAPI component.
    API,        ///< Message generated by API call.
    INTERRUPT,  ///< Message generated by Interrupt component.
    RA,         ///< Message generated by RA component.
    SIM,        ///< Message generated by Simulator.
    SOFT_RESET, ///< Message generated by Soft reset sequence.
    COUNTERS,   ///< Message generated by counters.
    RECONNECT,  ///< Message generated by Reconnect component.
    SBIF,       ///< Message generated when accessing SBIF registers and memories.
    ACCESS,     ///< Message generated when accessing non-SBIF registers and memories.
    ALLOCATOR,  ///< Message generated by Memory Allocator.
    APB,        ///< Message generated by APB component.
    CPU2JTAG,   ///< Message generated by CPU2JTAG component.
    PVT,        ///< Message generated by Process-Voltage-Temperature component.
    PCL,        ///< Message generated by PCL component.
    SERDES,     ///< Message generated by SerDes component.
    ARC,        ///< Message generated by ARC CPU component.
    INFO_PHY,   ///< Message generated by inFO-phy component.
    LAST = INFO_PHY
};

/// @brief Callback log function will be called for every log operation.
///
/// @param[in]  device_id        Device id that the log belongs to.
/// @param[in]  component        Component that the log belongs to.
/// @param[in]  severity         Severity level of the log.
/// @param[in]  message          Message to log.
typedef void (*la_log_function_t)(la_device_id_t, la_logger_component_e, la_logger_level_e, const char*);

/// @brief Set log callback function.
///
/// @param[in]  log_func    Logging function to be used by the logger, can be nullptr/None (C++/Python).
void la_set_logger_function(la_log_function_t log_func);

/// @brief Set log file.
///
/// @param[in]  filename    Logging file to be used, can be nullptr/None (C++/Python).
///                         If filename extension is .gz, log will be generated in zipped format.
///
/// @return     true if file is nullptr or file opened successfully; false otherwise.
///
/// @note Log file and log function can be used in tandem, with each printing all messages.
/// @note If old zlib versions are used, even non .gz filenames will be written in gzipped format.
bool la_set_logging_file(const char* filename);

/// @brief Set logging severity for a specific device and component.
///
/// @param[in]  device_id        Device being configured.
/// @param[in]  component        Component being configured.
/// @param[in]  severity         Severity level being configured.
void la_set_logging_level(la_device_id_t device_id, la_logger_component_e component, la_logger_level_e severity);

/// @brief Get logging severity for a specific device and component.
///
/// @param[in]  device_id        Device being configured.
/// @param[in]  component        Component being configured.
///
/// @return     Severity level.
la_logger_level_e la_get_logging_level(la_device_id_t device_id, la_logger_component_e component);

/// @brief Set logging severity for a specific device and all components.
///
/// @param[in]  device_id        Device being configured.
/// @param[in]  severity         Severity level being configured.
void la_set_logging_level(la_device_id_t device_id, la_logger_level_e severity);

/// @brief Add timestamp to log messages.
///
/// @param[in]  enabled   Add timestamps if true.
void la_set_timestamps_enabled(bool enabled);

/// @brief Get timestamp enabled state.
///
/// @return true if timestamps enabled; false otherwise.
bool la_get_timestamps_enabled();

/// @brief Flush log to file.
void la_flush_log();

/// @brief Set log flush period.
///
/// @param[in] period Requested flush frequency in ms.
///
/// @note Actual flush period may be larger than requested, depending on internal implementation.
/// Typically, accuracy should be 100ms.
void la_set_log_flush_period(long period);

/// @brief Get log flush period.
///
/// @return period    Current settings for the period in ms.
long la_get_log_flush_period();

} // namespace silicon_one

#endif /* __LA_LOG_H__ */
