library-name common

# avoid adding enable_shared_from_this as base class in serialization code
skip-base-class std::enable_shared_from_this
# serialization is done manually for bit_vector_dynamic_storage
skip-class silicon_one::bit_vector_dynamic_storage
# skipping template specialization of hash for bit_vector
skip-class std::hash
# skipping template specialization of is_error_code_enum for la_status
skip-class std::is_error_code_enum

skip-field silicon_one::pipe::m_fdr
skip-field silicon_one::pipe::m_fdw
skip-class silicon_one::la_function
# template la_function is manually serialized
skip-class silicon_one::la_function
# la_lock_guard is used as a stack variable only, no need for serializing it
skip-class silicon_one::la_lock_guard
# Skip assert classes as they are not stored as data members
skip-class silicon_one::dassert
skip-class silicon_one::dassert::settings
# No need to serialize delete_operator, it has no state
skip-class silicon_one::delete_operator
# no need to serialize device_id_info, not stored in any class
skip-class silicon_one::device_id_info
# la_profiler is meant to be used within a function block and not to be stored
skip-class silicon_one::la_profiler
skip-class silicon_one::la_profiler::time_union
# la_profile_database uses globals (static data), for now it's okay to lose
# profiling data after warm-boot
skip-class silicon_one::la_profile_database
skip-class silicon_one::la_profile_database::profile_stats
skip-class silicon_one::la_profile_database::profile_description
# la_status is not stored as data member
skip-class la_status
# logger can not be fully restored as it stores user callbacks
# currently it's user's responsibility to restore logger state after warm-boot
skip-class silicon_one::logger
# transactions are used as a stack variable never stored as data member
skip-class silicon_one::transaction
# task_scheduler is callbacks based facility, easier to restore manually in
# warm-boot seuquence la_device_impl::warm_boot_reconnect()
skip-class silicon_one::task_scheduler
skip-class silicon_one::task_scheduler::task_desc
skip-class silicon_one::task_scheduler::task_less_operator
skip-class silicon_one::interruptible_sleep
# Leaba custom allocators are maintaining global state which will
# be reconstructed as new objects are created.
skip-class silicon_one::thread_allocator_manager
skip-class silicon_one::allocator_traits
