# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nsimcli')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nsimcli')
    _nsimcli = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nsimcli', [dirname(__file__)])
        except ImportError:
            import _nsimcli
            return _nsimcli
        try:
            _mod = imp.load_module('_nsimcli', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nsimcli = swig_import_helper()
    del swig_import_helper
else:
    import _nsimcli
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _nsimcli.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _nsimcli.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _nsimcli.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _nsimcli.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _nsimcli.SwigPyIterator_equal(self, x)

    def copy(self):
        return _nsimcli.SwigPyIterator_copy(self)

    def next(self):
        return _nsimcli.SwigPyIterator_next(self)

    def __next__(self):
        return _nsimcli.SwigPyIterator___next__(self)

    def previous(self):
        return _nsimcli.SwigPyIterator_previous(self)

    def advance(self, n):
        return _nsimcli.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _nsimcli.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _nsimcli.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _nsimcli.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _nsimcli.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _nsimcli.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _nsimcli.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _nsimcli.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _nsimcli.SHARED_PTR_DISOWN
class action_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, action_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, action_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.action_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.action_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.action_vector___bool__(self)

    def __len__(self):
        return _nsimcli.action_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.action_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.action_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.action_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.action_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.action_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.action_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.action_vector_pop(self)

    def append(self, x):
        return _nsimcli.action_vector_append(self, x)

    def empty(self):
        return _nsimcli.action_vector_empty(self)

    def size(self):
        return _nsimcli.action_vector_size(self)

    def swap(self, v):
        return _nsimcli.action_vector_swap(self, v)

    def begin(self):
        return _nsimcli.action_vector_begin(self)

    def end(self):
        return _nsimcli.action_vector_end(self)

    def rbegin(self):
        return _nsimcli.action_vector_rbegin(self)

    def rend(self):
        return _nsimcli.action_vector_rend(self)

    def clear(self):
        return _nsimcli.action_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.action_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.action_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.action_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_action_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.action_vector_push_back(self, x)

    def front(self):
        return _nsimcli.action_vector_front(self)

    def back(self):
        return _nsimcli.action_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.action_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.action_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.action_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.action_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.action_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_action_vector
    __del__ = lambda self: None
action_vector_swigregister = _nsimcli.action_vector_swigregister
action_vector_swigregister(action_vector)

class context_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, context_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, context_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.context_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.context_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.context_vector___bool__(self)

    def __len__(self):
        return _nsimcli.context_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.context_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.context_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.context_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.context_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.context_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.context_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.context_vector_pop(self)

    def append(self, x):
        return _nsimcli.context_vector_append(self, x)

    def empty(self):
        return _nsimcli.context_vector_empty(self)

    def size(self):
        return _nsimcli.context_vector_size(self)

    def swap(self, v):
        return _nsimcli.context_vector_swap(self, v)

    def begin(self):
        return _nsimcli.context_vector_begin(self)

    def end(self):
        return _nsimcli.context_vector_end(self)

    def rbegin(self):
        return _nsimcli.context_vector_rbegin(self)

    def rend(self):
        return _nsimcli.context_vector_rend(self)

    def clear(self):
        return _nsimcli.context_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.context_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.context_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.context_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_context_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.context_vector_push_back(self, x)

    def front(self):
        return _nsimcli.context_vector_front(self)

    def back(self):
        return _nsimcli.context_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.context_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.context_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.context_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.context_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.context_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_context_vector
    __del__ = lambda self: None
context_vector_swigregister = _nsimcli.context_vector_swigregister
context_vector_swigregister(context_vector)

class control_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, control_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, control_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.control_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.control_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.control_vector___bool__(self)

    def __len__(self):
        return _nsimcli.control_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.control_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.control_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.control_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.control_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.control_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.control_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.control_vector_pop(self)

    def append(self, x):
        return _nsimcli.control_vector_append(self, x)

    def empty(self):
        return _nsimcli.control_vector_empty(self)

    def size(self):
        return _nsimcli.control_vector_size(self)

    def swap(self, v):
        return _nsimcli.control_vector_swap(self, v)

    def begin(self):
        return _nsimcli.control_vector_begin(self)

    def end(self):
        return _nsimcli.control_vector_end(self)

    def rbegin(self):
        return _nsimcli.control_vector_rbegin(self)

    def rend(self):
        return _nsimcli.control_vector_rend(self)

    def clear(self):
        return _nsimcli.control_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.control_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.control_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.control_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_control_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.control_vector_push_back(self, x)

    def front(self):
        return _nsimcli.control_vector_front(self)

    def back(self):
        return _nsimcli.control_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.control_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.control_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.control_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.control_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.control_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_control_vector
    __del__ = lambda self: None
control_vector_swigregister = _nsimcli.control_vector_swigregister
control_vector_swigregister(control_vector)

class control_statement_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, control_statement_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, control_statement_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.control_statement_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.control_statement_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.control_statement_vector___bool__(self)

    def __len__(self):
        return _nsimcli.control_statement_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.control_statement_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.control_statement_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.control_statement_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.control_statement_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.control_statement_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.control_statement_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.control_statement_vector_pop(self)

    def append(self, x):
        return _nsimcli.control_statement_vector_append(self, x)

    def empty(self):
        return _nsimcli.control_statement_vector_empty(self)

    def size(self):
        return _nsimcli.control_statement_vector_size(self)

    def swap(self, v):
        return _nsimcli.control_statement_vector_swap(self, v)

    def begin(self):
        return _nsimcli.control_statement_vector_begin(self)

    def end(self):
        return _nsimcli.control_statement_vector_end(self)

    def rbegin(self):
        return _nsimcli.control_statement_vector_rbegin(self)

    def rend(self):
        return _nsimcli.control_statement_vector_rend(self)

    def clear(self):
        return _nsimcli.control_statement_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.control_statement_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.control_statement_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.control_statement_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_control_statement_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.control_statement_vector_push_back(self, x)

    def front(self):
        return _nsimcli.control_statement_vector_front(self)

    def back(self):
        return _nsimcli.control_statement_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.control_statement_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.control_statement_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.control_statement_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.control_statement_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.control_statement_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_control_statement_vector
    __del__ = lambda self: None
control_statement_vector_swigregister = _nsimcli.control_statement_vector_swigregister
control_statement_vector_swigregister(control_statement_vector)

class enum_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, enum_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, enum_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.enum_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.enum_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.enum_vector___bool__(self)

    def __len__(self):
        return _nsimcli.enum_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.enum_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.enum_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.enum_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.enum_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.enum_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.enum_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.enum_vector_pop(self)

    def append(self, x):
        return _nsimcli.enum_vector_append(self, x)

    def empty(self):
        return _nsimcli.enum_vector_empty(self)

    def size(self):
        return _nsimcli.enum_vector_size(self)

    def swap(self, v):
        return _nsimcli.enum_vector_swap(self, v)

    def begin(self):
        return _nsimcli.enum_vector_begin(self)

    def end(self):
        return _nsimcli.enum_vector_end(self)

    def rbegin(self):
        return _nsimcli.enum_vector_rbegin(self)

    def rend(self):
        return _nsimcli.enum_vector_rend(self)

    def clear(self):
        return _nsimcli.enum_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.enum_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.enum_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.enum_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_enum_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.enum_vector_push_back(self, x)

    def front(self):
        return _nsimcli.enum_vector_front(self)

    def back(self):
        return _nsimcli.enum_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.enum_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.enum_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.enum_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.enum_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.enum_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_enum_vector
    __del__ = lambda self: None
enum_vector_swigregister = _nsimcli.enum_vector_swigregister
enum_vector_swigregister(enum_vector)

class metadata_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, metadata_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, metadata_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.metadata_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.metadata_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.metadata_vector___bool__(self)

    def __len__(self):
        return _nsimcli.metadata_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.metadata_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.metadata_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.metadata_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.metadata_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.metadata_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.metadata_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.metadata_vector_pop(self)

    def append(self, x):
        return _nsimcli.metadata_vector_append(self, x)

    def empty(self):
        return _nsimcli.metadata_vector_empty(self)

    def size(self):
        return _nsimcli.metadata_vector_size(self)

    def swap(self, v):
        return _nsimcli.metadata_vector_swap(self, v)

    def begin(self):
        return _nsimcli.metadata_vector_begin(self)

    def end(self):
        return _nsimcli.metadata_vector_end(self)

    def rbegin(self):
        return _nsimcli.metadata_vector_rbegin(self)

    def rend(self):
        return _nsimcli.metadata_vector_rend(self)

    def clear(self):
        return _nsimcli.metadata_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.metadata_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.metadata_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.metadata_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_metadata_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.metadata_vector_push_back(self, x)

    def front(self):
        return _nsimcli.metadata_vector_front(self)

    def back(self):
        return _nsimcli.metadata_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.metadata_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.metadata_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.metadata_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.metadata_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.metadata_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_metadata_vector
    __del__ = lambda self: None
metadata_vector_swigregister = _nsimcli.metadata_vector_swigregister
metadata_vector_swigregister(metadata_vector)

class type_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, type_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, type_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.type_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.type_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.type_vector___bool__(self)

    def __len__(self):
        return _nsimcli.type_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.type_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.type_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.type_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.type_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.type_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.type_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.type_vector_pop(self)

    def append(self, x):
        return _nsimcli.type_vector_append(self, x)

    def empty(self):
        return _nsimcli.type_vector_empty(self)

    def size(self):
        return _nsimcli.type_vector_size(self)

    def swap(self, v):
        return _nsimcli.type_vector_swap(self, v)

    def begin(self):
        return _nsimcli.type_vector_begin(self)

    def end(self):
        return _nsimcli.type_vector_end(self)

    def rbegin(self):
        return _nsimcli.type_vector_rbegin(self)

    def rend(self):
        return _nsimcli.type_vector_rend(self)

    def clear(self):
        return _nsimcli.type_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.type_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.type_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.type_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_type_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.type_vector_push_back(self, x)

    def front(self):
        return _nsimcli.type_vector_front(self)

    def back(self):
        return _nsimcli.type_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.type_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.type_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.type_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.type_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.type_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_type_vector
    __del__ = lambda self: None
type_vector_swigregister = _nsimcli.type_vector_swigregister
type_vector_swigregister(type_vector)

class table_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.table_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.table_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.table_vector___bool__(self)

    def __len__(self):
        return _nsimcli.table_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.table_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.table_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.table_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.table_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.table_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.table_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.table_vector_pop(self)

    def append(self, x):
        return _nsimcli.table_vector_append(self, x)

    def empty(self):
        return _nsimcli.table_vector_empty(self)

    def size(self):
        return _nsimcli.table_vector_size(self)

    def swap(self, v):
        return _nsimcli.table_vector_swap(self, v)

    def begin(self):
        return _nsimcli.table_vector_begin(self)

    def end(self):
        return _nsimcli.table_vector_end(self)

    def rbegin(self):
        return _nsimcli.table_vector_rbegin(self)

    def rend(self):
        return _nsimcli.table_vector_rend(self)

    def clear(self):
        return _nsimcli.table_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.table_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.table_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.table_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_table_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.table_vector_push_back(self, x)

    def front(self):
        return _nsimcli.table_vector_front(self)

    def back(self):
        return _nsimcli.table_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.table_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.table_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.table_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.table_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.table_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_table_vector
    __del__ = lambda self: None
table_vector_swigregister = _nsimcli.table_vector_swigregister
table_vector_swigregister(table_vector)

class name_to_bv_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, name_to_bv_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, name_to_bv_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.name_to_bv_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.name_to_bv_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.name_to_bv_vector___bool__(self)

    def __len__(self):
        return _nsimcli.name_to_bv_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.name_to_bv_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.name_to_bv_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.name_to_bv_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.name_to_bv_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.name_to_bv_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.name_to_bv_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.name_to_bv_vector_pop(self)

    def append(self, x):
        return _nsimcli.name_to_bv_vector_append(self, x)

    def empty(self):
        return _nsimcli.name_to_bv_vector_empty(self)

    def size(self):
        return _nsimcli.name_to_bv_vector_size(self)

    def swap(self, v):
        return _nsimcli.name_to_bv_vector_swap(self, v)

    def begin(self):
        return _nsimcli.name_to_bv_vector_begin(self)

    def end(self):
        return _nsimcli.name_to_bv_vector_end(self)

    def rbegin(self):
        return _nsimcli.name_to_bv_vector_rbegin(self)

    def rend(self):
        return _nsimcli.name_to_bv_vector_rend(self)

    def clear(self):
        return _nsimcli.name_to_bv_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.name_to_bv_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.name_to_bv_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.name_to_bv_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_name_to_bv_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.name_to_bv_vector_push_back(self, x)

    def front(self):
        return _nsimcli.name_to_bv_vector_front(self)

    def back(self):
        return _nsimcli.name_to_bv_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.name_to_bv_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.name_to_bv_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.name_to_bv_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.name_to_bv_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.name_to_bv_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_name_to_bv_vector
    __del__ = lambda self: None
name_to_bv_vector_swigregister = _nsimcli.name_to_bv_vector_swigregister
name_to_bv_vector_swigregister(name_to_bv_vector)

class npl_source_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, npl_source_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, npl_source_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.npl_source_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.npl_source_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.npl_source_vector___bool__(self)

    def __len__(self):
        return _nsimcli.npl_source_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.npl_source_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.npl_source_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.npl_source_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.npl_source_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.npl_source_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.npl_source_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.npl_source_vector_pop(self)

    def append(self, x):
        return _nsimcli.npl_source_vector_append(self, x)

    def empty(self):
        return _nsimcli.npl_source_vector_empty(self)

    def size(self):
        return _nsimcli.npl_source_vector_size(self)

    def swap(self, v):
        return _nsimcli.npl_source_vector_swap(self, v)

    def begin(self):
        return _nsimcli.npl_source_vector_begin(self)

    def end(self):
        return _nsimcli.npl_source_vector_end(self)

    def rbegin(self):
        return _nsimcli.npl_source_vector_rbegin(self)

    def rend(self):
        return _nsimcli.npl_source_vector_rend(self)

    def clear(self):
        return _nsimcli.npl_source_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.npl_source_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.npl_source_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.npl_source_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_npl_source_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.npl_source_vector_push_back(self, x)

    def front(self):
        return _nsimcli.npl_source_vector_front(self)

    def back(self):
        return _nsimcli.npl_source_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.npl_source_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.npl_source_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.npl_source_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.npl_source_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.npl_source_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_npl_source_vector
    __del__ = lambda self: None
npl_source_vector_swigregister = _nsimcli.npl_source_vector_swigregister
npl_source_vector_swigregister(npl_source_vector)

class field_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, field_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, field_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.field_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.field_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.field_vector___bool__(self)

    def __len__(self):
        return _nsimcli.field_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.field_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.field_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.field_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.field_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.field_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.field_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.field_vector_pop(self)

    def append(self, x):
        return _nsimcli.field_vector_append(self, x)

    def empty(self):
        return _nsimcli.field_vector_empty(self)

    def size(self):
        return _nsimcli.field_vector_size(self)

    def swap(self, v):
        return _nsimcli.field_vector_swap(self, v)

    def begin(self):
        return _nsimcli.field_vector_begin(self)

    def end(self):
        return _nsimcli.field_vector_end(self)

    def rbegin(self):
        return _nsimcli.field_vector_rbegin(self)

    def rend(self):
        return _nsimcli.field_vector_rend(self)

    def clear(self):
        return _nsimcli.field_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.field_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.field_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.field_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_field_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.field_vector_push_back(self, x)

    def front(self):
        return _nsimcli.field_vector_front(self)

    def back(self):
        return _nsimcli.field_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.field_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.field_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.field_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.field_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.field_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_field_vector
    __del__ = lambda self: None
field_vector_swigregister = _nsimcli.field_vector_swigregister
field_vector_swigregister(field_vector)

class param_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.param_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.param_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.param_vector___bool__(self)

    def __len__(self):
        return _nsimcli.param_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.param_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.param_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.param_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.param_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.param_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.param_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.param_vector_pop(self)

    def append(self, x):
        return _nsimcli.param_vector_append(self, x)

    def empty(self):
        return _nsimcli.param_vector_empty(self)

    def size(self):
        return _nsimcli.param_vector_size(self)

    def swap(self, v):
        return _nsimcli.param_vector_swap(self, v)

    def begin(self):
        return _nsimcli.param_vector_begin(self)

    def end(self):
        return _nsimcli.param_vector_end(self)

    def rbegin(self):
        return _nsimcli.param_vector_rbegin(self)

    def rend(self):
        return _nsimcli.param_vector_rend(self)

    def clear(self):
        return _nsimcli.param_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.param_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.param_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.param_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_param_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.param_vector_push_back(self, x)

    def front(self):
        return _nsimcli.param_vector_front(self)

    def back(self):
        return _nsimcli.param_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.param_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.param_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.param_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.param_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.param_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_param_vector
    __del__ = lambda self: None
param_vector_swigregister = _nsimcli.param_vector_swigregister
param_vector_swigregister(param_vector)

class enum_option_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, enum_option_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, enum_option_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.enum_option_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.enum_option_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.enum_option_vector___bool__(self)

    def __len__(self):
        return _nsimcli.enum_option_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.enum_option_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.enum_option_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.enum_option_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.enum_option_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.enum_option_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.enum_option_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.enum_option_vector_pop(self)

    def append(self, x):
        return _nsimcli.enum_option_vector_append(self, x)

    def empty(self):
        return _nsimcli.enum_option_vector_empty(self)

    def size(self):
        return _nsimcli.enum_option_vector_size(self)

    def swap(self, v):
        return _nsimcli.enum_option_vector_swap(self, v)

    def begin(self):
        return _nsimcli.enum_option_vector_begin(self)

    def end(self):
        return _nsimcli.enum_option_vector_end(self)

    def rbegin(self):
        return _nsimcli.enum_option_vector_rbegin(self)

    def rend(self):
        return _nsimcli.enum_option_vector_rend(self)

    def clear(self):
        return _nsimcli.enum_option_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.enum_option_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.enum_option_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.enum_option_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_enum_option_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.enum_option_vector_push_back(self, x)

    def front(self):
        return _nsimcli.enum_option_vector_front(self)

    def back(self):
        return _nsimcli.enum_option_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.enum_option_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.enum_option_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.enum_option_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.enum_option_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.enum_option_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_enum_option_vector
    __del__ = lambda self: None
enum_option_vector_swigregister = _nsimcli.enum_option_vector_swigregister
enum_option_vector_swigregister(enum_option_vector)

class reads_options_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reads_options_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reads_options_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.reads_options_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.reads_options_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.reads_options_vector___bool__(self)

    def __len__(self):
        return _nsimcli.reads_options_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.reads_options_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.reads_options_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.reads_options_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.reads_options_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.reads_options_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.reads_options_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.reads_options_vector_pop(self)

    def append(self, x):
        return _nsimcli.reads_options_vector_append(self, x)

    def empty(self):
        return _nsimcli.reads_options_vector_empty(self)

    def size(self):
        return _nsimcli.reads_options_vector_size(self)

    def swap(self, v):
        return _nsimcli.reads_options_vector_swap(self, v)

    def begin(self):
        return _nsimcli.reads_options_vector_begin(self)

    def end(self):
        return _nsimcli.reads_options_vector_end(self)

    def rbegin(self):
        return _nsimcli.reads_options_vector_rbegin(self)

    def rend(self):
        return _nsimcli.reads_options_vector_rend(self)

    def clear(self):
        return _nsimcli.reads_options_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.reads_options_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.reads_options_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.reads_options_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_reads_options_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.reads_options_vector_push_back(self, x)

    def front(self):
        return _nsimcli.reads_options_vector_front(self)

    def back(self):
        return _nsimcli.reads_options_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.reads_options_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.reads_options_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.reads_options_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.reads_options_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.reads_options_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_reads_options_vector
    __del__ = lambda self: None
reads_options_vector_swigregister = _nsimcli.reads_options_vector_swigregister
reads_options_vector_swigregister(reads_options_vector)

class string_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.string_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.string_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.string_vector___bool__(self)

    def __len__(self):
        return _nsimcli.string_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.string_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.string_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.string_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.string_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.string_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.string_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.string_vector_pop(self)

    def append(self, x):
        return _nsimcli.string_vector_append(self, x)

    def empty(self):
        return _nsimcli.string_vector_empty(self)

    def size(self):
        return _nsimcli.string_vector_size(self)

    def swap(self, v):
        return _nsimcli.string_vector_swap(self, v)

    def begin(self):
        return _nsimcli.string_vector_begin(self)

    def end(self):
        return _nsimcli.string_vector_end(self)

    def rbegin(self):
        return _nsimcli.string_vector_rbegin(self)

    def rend(self):
        return _nsimcli.string_vector_rend(self)

    def clear(self):
        return _nsimcli.string_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.string_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.string_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.string_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_string_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.string_vector_push_back(self, x)

    def front(self):
        return _nsimcli.string_vector_front(self)

    def back(self):
        return _nsimcli.string_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.string_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.string_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.string_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.string_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.string_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_string_vector
    __del__ = lambda self: None
string_vector_swigregister = _nsimcli.string_vector_swigregister
string_vector_swigregister(string_vector)

class field_match_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, field_match_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, field_match_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.field_match_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.field_match_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.field_match_vector___bool__(self)

    def __len__(self):
        return _nsimcli.field_match_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.field_match_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.field_match_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.field_match_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.field_match_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.field_match_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.field_match_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.field_match_vector_pop(self)

    def append(self, x):
        return _nsimcli.field_match_vector_append(self, x)

    def empty(self):
        return _nsimcli.field_match_vector_empty(self)

    def size(self):
        return _nsimcli.field_match_vector_size(self)

    def swap(self, v):
        return _nsimcli.field_match_vector_swap(self, v)

    def begin(self):
        return _nsimcli.field_match_vector_begin(self)

    def end(self):
        return _nsimcli.field_match_vector_end(self)

    def rbegin(self):
        return _nsimcli.field_match_vector_rbegin(self)

    def rend(self):
        return _nsimcli.field_match_vector_rend(self)

    def clear(self):
        return _nsimcli.field_match_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.field_match_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.field_match_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.field_match_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_field_match_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.field_match_vector_push_back(self, x)

    def front(self):
        return _nsimcli.field_match_vector_front(self)

    def back(self):
        return _nsimcli.field_match_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.field_match_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.field_match_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.field_match_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.field_match_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.field_match_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_field_match_vector
    __del__ = lambda self: None
field_match_vector_swigregister = _nsimcli.field_match_vector_swigregister
field_match_vector_swigregister(field_match_vector)

class selector_fields_pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, selector_fields_pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, selector_fields_pair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_selector_fields_pair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _nsimcli.selector_fields_pair_first_set
    __swig_getmethods__["first"] = _nsimcli.selector_fields_pair_first_get
    if _newclass:
        first = _swig_property(_nsimcli.selector_fields_pair_first_get, _nsimcli.selector_fields_pair_first_set)
    __swig_setmethods__["second"] = _nsimcli.selector_fields_pair_second_set
    __swig_getmethods__["second"] = _nsimcli.selector_fields_pair_second_get
    if _newclass:
        second = _swig_property(_nsimcli.selector_fields_pair_second_get, _nsimcli.selector_fields_pair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _nsimcli.delete_selector_fields_pair
    __del__ = lambda self: None
selector_fields_pair_swigregister = _nsimcli.selector_fields_pair_swigregister
selector_fields_pair_swigregister(selector_fields_pair)

class keys_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, keys_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, keys_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.keys_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.keys_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.keys_vector___bool__(self)

    def __len__(self):
        return _nsimcli.keys_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.keys_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.keys_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.keys_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.keys_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.keys_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.keys_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.keys_vector_pop(self)

    def append(self, x):
        return _nsimcli.keys_vector_append(self, x)

    def empty(self):
        return _nsimcli.keys_vector_empty(self)

    def size(self):
        return _nsimcli.keys_vector_size(self)

    def swap(self, v):
        return _nsimcli.keys_vector_swap(self, v)

    def begin(self):
        return _nsimcli.keys_vector_begin(self)

    def end(self):
        return _nsimcli.keys_vector_end(self)

    def rbegin(self):
        return _nsimcli.keys_vector_rbegin(self)

    def rend(self):
        return _nsimcli.keys_vector_rend(self)

    def clear(self):
        return _nsimcli.keys_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.keys_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.keys_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.keys_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_keys_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.keys_vector_push_back(self, x)

    def front(self):
        return _nsimcli.keys_vector_front(self)

    def back(self):
        return _nsimcli.keys_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.keys_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.keys_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.keys_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.keys_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.keys_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_keys_vector
    __del__ = lambda self: None
keys_vector_swigregister = _nsimcli.keys_vector_swigregister
keys_vector_swigregister(keys_vector)

class bit_vector_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bit_vector_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.bit_vector_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.bit_vector_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.bit_vector_vector___bool__(self)

    def __len__(self):
        return _nsimcli.bit_vector_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.bit_vector_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.bit_vector_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.bit_vector_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.bit_vector_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.bit_vector_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.bit_vector_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.bit_vector_vector_pop(self)

    def append(self, x):
        return _nsimcli.bit_vector_vector_append(self, x)

    def empty(self):
        return _nsimcli.bit_vector_vector_empty(self)

    def size(self):
        return _nsimcli.bit_vector_vector_size(self)

    def swap(self, v):
        return _nsimcli.bit_vector_vector_swap(self, v)

    def begin(self):
        return _nsimcli.bit_vector_vector_begin(self)

    def end(self):
        return _nsimcli.bit_vector_vector_end(self)

    def rbegin(self):
        return _nsimcli.bit_vector_vector_rbegin(self)

    def rend(self):
        return _nsimcli.bit_vector_vector_rend(self)

    def clear(self):
        return _nsimcli.bit_vector_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.bit_vector_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.bit_vector_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.bit_vector_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_bit_vector_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.bit_vector_vector_push_back(self, x)

    def front(self):
        return _nsimcli.bit_vector_vector_front(self)

    def back(self):
        return _nsimcli.bit_vector_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.bit_vector_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.bit_vector_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.bit_vector_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.bit_vector_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.bit_vector_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_bit_vector_vector
    __del__ = lambda self: None
bit_vector_vector_swigregister = _nsimcli.bit_vector_vector_swigregister
bit_vector_vector_swigregister(bit_vector_vector)

class uint32_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.uint32_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.uint32_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.uint32_vector___bool__(self)

    def __len__(self):
        return _nsimcli.uint32_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.uint32_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.uint32_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.uint32_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.uint32_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.uint32_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.uint32_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.uint32_vector_pop(self)

    def append(self, x):
        return _nsimcli.uint32_vector_append(self, x)

    def empty(self):
        return _nsimcli.uint32_vector_empty(self)

    def size(self):
        return _nsimcli.uint32_vector_size(self)

    def swap(self, v):
        return _nsimcli.uint32_vector_swap(self, v)

    def begin(self):
        return _nsimcli.uint32_vector_begin(self)

    def end(self):
        return _nsimcli.uint32_vector_end(self)

    def rbegin(self):
        return _nsimcli.uint32_vector_rbegin(self)

    def rend(self):
        return _nsimcli.uint32_vector_rend(self)

    def clear(self):
        return _nsimcli.uint32_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.uint32_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.uint32_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.uint32_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_uint32_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.uint32_vector_push_back(self, x)

    def front(self):
        return _nsimcli.uint32_vector_front(self)

    def back(self):
        return _nsimcli.uint32_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.uint32_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.uint32_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.uint32_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.uint32_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.uint32_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_uint32_vector
    __del__ = lambda self: None
uint32_vector_swigregister = _nsimcli.uint32_vector_swigregister
uint32_vector_swigregister(uint32_vector)

class table_init_entry_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_init_entry_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_init_entry_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.table_init_entry_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.table_init_entry_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.table_init_entry_vector___bool__(self)

    def __len__(self):
        return _nsimcli.table_init_entry_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.table_init_entry_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.table_init_entry_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.table_init_entry_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.table_init_entry_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.table_init_entry_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.table_init_entry_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.table_init_entry_vector_pop(self)

    def append(self, x):
        return _nsimcli.table_init_entry_vector_append(self, x)

    def empty(self):
        return _nsimcli.table_init_entry_vector_empty(self)

    def size(self):
        return _nsimcli.table_init_entry_vector_size(self)

    def swap(self, v):
        return _nsimcli.table_init_entry_vector_swap(self, v)

    def begin(self):
        return _nsimcli.table_init_entry_vector_begin(self)

    def end(self):
        return _nsimcli.table_init_entry_vector_end(self)

    def rbegin(self):
        return _nsimcli.table_init_entry_vector_rbegin(self)

    def rend(self):
        return _nsimcli.table_init_entry_vector_rend(self)

    def clear(self):
        return _nsimcli.table_init_entry_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.table_init_entry_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.table_init_entry_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.table_init_entry_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_table_init_entry_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.table_init_entry_vector_push_back(self, x)

    def front(self):
        return _nsimcli.table_init_entry_vector_front(self)

    def back(self):
        return _nsimcli.table_init_entry_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.table_init_entry_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.table_init_entry_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.table_init_entry_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.table_init_entry_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.table_init_entry_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_table_init_entry_vector
    __del__ = lambda self: None
table_init_entry_vector_swigregister = _nsimcli.table_init_entry_vector_swigregister
table_init_entry_vector_swigregister(table_init_entry_vector)

class traps_per_macro(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, traps_per_macro, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, traps_per_macro, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.traps_per_macro_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.traps_per_macro___nonzero__(self)

    def __bool__(self):
        return _nsimcli.traps_per_macro___bool__(self)

    def __len__(self):
        return _nsimcli.traps_per_macro___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.traps_per_macro___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.traps_per_macro___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.traps_per_macro___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.traps_per_macro___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.traps_per_macro___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.traps_per_macro___setitem__(self, *args)

    def pop(self):
        return _nsimcli.traps_per_macro_pop(self)

    def append(self, x):
        return _nsimcli.traps_per_macro_append(self, x)

    def empty(self):
        return _nsimcli.traps_per_macro_empty(self)

    def size(self):
        return _nsimcli.traps_per_macro_size(self)

    def swap(self, v):
        return _nsimcli.traps_per_macro_swap(self, v)

    def begin(self):
        return _nsimcli.traps_per_macro_begin(self)

    def end(self):
        return _nsimcli.traps_per_macro_end(self)

    def rbegin(self):
        return _nsimcli.traps_per_macro_rbegin(self)

    def rend(self):
        return _nsimcli.traps_per_macro_rend(self)

    def clear(self):
        return _nsimcli.traps_per_macro_clear(self)

    def get_allocator(self):
        return _nsimcli.traps_per_macro_get_allocator(self)

    def pop_back(self):
        return _nsimcli.traps_per_macro_pop_back(self)

    def erase(self, *args):
        return _nsimcli.traps_per_macro_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_traps_per_macro(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.traps_per_macro_push_back(self, x)

    def front(self):
        return _nsimcli.traps_per_macro_front(self)

    def back(self):
        return _nsimcli.traps_per_macro_back(self)

    def assign(self, n, x):
        return _nsimcli.traps_per_macro_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.traps_per_macro_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.traps_per_macro_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.traps_per_macro_reserve(self, n)

    def capacity(self):
        return _nsimcli.traps_per_macro_capacity(self)
    __swig_destroy__ = _nsimcli.delete_traps_per_macro
    __del__ = lambda self: None
traps_per_macro_swigregister = _nsimcli.traps_per_macro_swigregister
traps_per_macro_swigregister(traps_per_macro)

class map_string_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.map_string_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.map_string_string___nonzero__(self)

    def __bool__(self):
        return _nsimcli.map_string_string___bool__(self)

    def __len__(self):
        return _nsimcli.map_string_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _nsimcli.map_string_string___getitem__(self, key)

    def __delitem__(self, key):
        return _nsimcli.map_string_string___delitem__(self, key)

    def has_key(self, key):
        return _nsimcli.map_string_string_has_key(self, key)

    def keys(self):
        return _nsimcli.map_string_string_keys(self)

    def values(self):
        return _nsimcli.map_string_string_values(self)

    def items(self):
        return _nsimcli.map_string_string_items(self)

    def __contains__(self, key):
        return _nsimcli.map_string_string___contains__(self, key)

    def key_iterator(self):
        return _nsimcli.map_string_string_key_iterator(self)

    def value_iterator(self):
        return _nsimcli.map_string_string_value_iterator(self)

    def __setitem__(self, *args):
        return _nsimcli.map_string_string___setitem__(self, *args)

    def asdict(self):
        return _nsimcli.map_string_string_asdict(self)

    def __init__(self, *args):
        this = _nsimcli.new_map_string_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _nsimcli.map_string_string_empty(self)

    def size(self):
        return _nsimcli.map_string_string_size(self)

    def swap(self, v):
        return _nsimcli.map_string_string_swap(self, v)

    def begin(self):
        return _nsimcli.map_string_string_begin(self)

    def end(self):
        return _nsimcli.map_string_string_end(self)

    def rbegin(self):
        return _nsimcli.map_string_string_rbegin(self)

    def rend(self):
        return _nsimcli.map_string_string_rend(self)

    def clear(self):
        return _nsimcli.map_string_string_clear(self)

    def get_allocator(self):
        return _nsimcli.map_string_string_get_allocator(self)

    def count(self, x):
        return _nsimcli.map_string_string_count(self, x)

    def erase(self, *args):
        return _nsimcli.map_string_string_erase(self, *args)

    def find(self, x):
        return _nsimcli.map_string_string_find(self, x)

    def lower_bound(self, x):
        return _nsimcli.map_string_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _nsimcli.map_string_string_upper_bound(self, x)
    __swig_destroy__ = _nsimcli.delete_map_string_string
    __del__ = lambda self: None
map_string_string_swigregister = _nsimcli.map_string_string_swigregister
map_string_string_swigregister(map_string_string)

class ene_control_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ene_control_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ene_control_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.ene_control_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.ene_control_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.ene_control_vector___bool__(self)

    def __len__(self):
        return _nsimcli.ene_control_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.ene_control_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.ene_control_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.ene_control_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.ene_control_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.ene_control_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.ene_control_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.ene_control_vector_pop(self)

    def append(self, x):
        return _nsimcli.ene_control_vector_append(self, x)

    def empty(self):
        return _nsimcli.ene_control_vector_empty(self)

    def size(self):
        return _nsimcli.ene_control_vector_size(self)

    def swap(self, v):
        return _nsimcli.ene_control_vector_swap(self, v)

    def begin(self):
        return _nsimcli.ene_control_vector_begin(self)

    def end(self):
        return _nsimcli.ene_control_vector_end(self)

    def rbegin(self):
        return _nsimcli.ene_control_vector_rbegin(self)

    def rend(self):
        return _nsimcli.ene_control_vector_rend(self)

    def clear(self):
        return _nsimcli.ene_control_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.ene_control_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.ene_control_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.ene_control_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_ene_control_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.ene_control_vector_push_back(self, x)

    def front(self):
        return _nsimcli.ene_control_vector_front(self)

    def back(self):
        return _nsimcli.ene_control_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.ene_control_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.ene_control_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.ene_control_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.ene_control_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.ene_control_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_ene_control_vector
    __del__ = lambda self: None
ene_control_vector_swigregister = _nsimcli.ene_control_vector_swigregister
ene_control_vector_swigregister(ene_control_vector)

class set_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.set_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.set_string___nonzero__(self)

    def __bool__(self):
        return _nsimcli.set_string___bool__(self)

    def __len__(self):
        return _nsimcli.set_string___len__(self)

    def append(self, x):
        return _nsimcli.set_string_append(self, x)

    def __contains__(self, x):
        return _nsimcli.set_string___contains__(self, x)

    def __getitem__(self, i):
        return _nsimcli.set_string___getitem__(self, i)

    def add(self, x):
        return _nsimcli.set_string_add(self, x)

    def discard(self, x):
        return _nsimcli.set_string_discard(self, x)

    def __init__(self, *args):
        this = _nsimcli.new_set_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _nsimcli.set_string_empty(self)

    def size(self):
        return _nsimcli.set_string_size(self)

    def clear(self):
        return _nsimcli.set_string_clear(self)

    def swap(self, v):
        return _nsimcli.set_string_swap(self, v)

    def count(self, x):
        return _nsimcli.set_string_count(self, x)

    def begin(self):
        return _nsimcli.set_string_begin(self)

    def end(self):
        return _nsimcli.set_string_end(self)

    def rbegin(self):
        return _nsimcli.set_string_rbegin(self)

    def rend(self):
        return _nsimcli.set_string_rend(self)

    def erase(self, *args):
        return _nsimcli.set_string_erase(self, *args)

    def find(self, x):
        return _nsimcli.set_string_find(self, x)

    def lower_bound(self, x):
        return _nsimcli.set_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _nsimcli.set_string_upper_bound(self, x)

    def equal_range(self, x):
        return _nsimcli.set_string_equal_range(self, x)

    def insert(self, __x):
        return _nsimcli.set_string_insert(self, __x)
    __swig_destroy__ = _nsimcli.delete_set_string
    __del__ = lambda self: None
set_string_swigregister = _nsimcli.set_string_swigregister
set_string_swigregister(set_string)

class set_BitVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_BitVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_BitVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.set_BitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.set_BitVector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.set_BitVector___bool__(self)

    def __len__(self):
        return _nsimcli.set_BitVector___len__(self)

    def append(self, x):
        return _nsimcli.set_BitVector_append(self, x)

    def __contains__(self, x):
        return _nsimcli.set_BitVector___contains__(self, x)

    def __getitem__(self, i):
        return _nsimcli.set_BitVector___getitem__(self, i)

    def add(self, x):
        return _nsimcli.set_BitVector_add(self, x)

    def discard(self, x):
        return _nsimcli.set_BitVector_discard(self, x)

    def __init__(self, *args):
        this = _nsimcli.new_set_BitVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _nsimcli.set_BitVector_empty(self)

    def size(self):
        return _nsimcli.set_BitVector_size(self)

    def clear(self):
        return _nsimcli.set_BitVector_clear(self)

    def swap(self, v):
        return _nsimcli.set_BitVector_swap(self, v)

    def count(self, x):
        return _nsimcli.set_BitVector_count(self, x)

    def begin(self):
        return _nsimcli.set_BitVector_begin(self)

    def end(self):
        return _nsimcli.set_BitVector_end(self)

    def rbegin(self):
        return _nsimcli.set_BitVector_rbegin(self)

    def rend(self):
        return _nsimcli.set_BitVector_rend(self)

    def erase(self, *args):
        return _nsimcli.set_BitVector_erase(self, *args)

    def find(self, x):
        return _nsimcli.set_BitVector_find(self, x)

    def lower_bound(self, x):
        return _nsimcli.set_BitVector_lower_bound(self, x)

    def upper_bound(self, x):
        return _nsimcli.set_BitVector_upper_bound(self, x)

    def equal_range(self, x):
        return _nsimcli.set_BitVector_equal_range(self, x)

    def insert(self, __x):
        return _nsimcli.set_BitVector_insert(self, __x)
    __swig_destroy__ = _nsimcli.delete_set_BitVector
    __del__ = lambda self: None
set_BitVector_swigregister = _nsimcli.set_BitVector_swigregister
set_BitVector_swigregister(set_BitVector)

class table_set_OutgoingInterfacePath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_set_OutgoingInterfacePath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_set_OutgoingInterfacePath, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.table_set_OutgoingInterfacePath_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.table_set_OutgoingInterfacePath___nonzero__(self)

    def __bool__(self):
        return _nsimcli.table_set_OutgoingInterfacePath___bool__(self)

    def __len__(self):
        return _nsimcli.table_set_OutgoingInterfacePath___len__(self)

    def append(self, x):
        return _nsimcli.table_set_OutgoingInterfacePath_append(self, x)

    def __contains__(self, x):
        return _nsimcli.table_set_OutgoingInterfacePath___contains__(self, x)

    def __getitem__(self, i):
        return _nsimcli.table_set_OutgoingInterfacePath___getitem__(self, i)

    def add(self, x):
        return _nsimcli.table_set_OutgoingInterfacePath_add(self, x)

    def discard(self, x):
        return _nsimcli.table_set_OutgoingInterfacePath_discard(self, x)

    def __init__(self, *args):
        this = _nsimcli.new_table_set_OutgoingInterfacePath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _nsimcli.table_set_OutgoingInterfacePath_empty(self)

    def size(self):
        return _nsimcli.table_set_OutgoingInterfacePath_size(self)

    def clear(self):
        return _nsimcli.table_set_OutgoingInterfacePath_clear(self)

    def swap(self, v):
        return _nsimcli.table_set_OutgoingInterfacePath_swap(self, v)

    def count(self, x):
        return _nsimcli.table_set_OutgoingInterfacePath_count(self, x)

    def begin(self):
        return _nsimcli.table_set_OutgoingInterfacePath_begin(self)

    def end(self):
        return _nsimcli.table_set_OutgoingInterfacePath_end(self)

    def rbegin(self):
        return _nsimcli.table_set_OutgoingInterfacePath_rbegin(self)

    def rend(self):
        return _nsimcli.table_set_OutgoingInterfacePath_rend(self)

    def erase(self, *args):
        return _nsimcli.table_set_OutgoingInterfacePath_erase(self, *args)

    def find(self, x):
        return _nsimcli.table_set_OutgoingInterfacePath_find(self, x)

    def lower_bound(self, x):
        return _nsimcli.table_set_OutgoingInterfacePath_lower_bound(self, x)

    def upper_bound(self, x):
        return _nsimcli.table_set_OutgoingInterfacePath_upper_bound(self, x)

    def equal_range(self, x):
        return _nsimcli.table_set_OutgoingInterfacePath_equal_range(self, x)

    def insert(self, __x):
        return _nsimcli.table_set_OutgoingInterfacePath_insert(self, __x)
    __swig_destroy__ = _nsimcli.delete_table_set_OutgoingInterfacePath
    __del__ = lambda self: None
table_set_OutgoingInterfacePath_swigregister = _nsimcli.table_set_OutgoingInterfacePath_swigregister
table_set_OutgoingInterfacePath_swigregister(table_set_OutgoingInterfacePath)

APP = _nsimcli.APP
PARSER = _nsimcli.PARSER
TRANS = _nsimcli.TRANS
PLACER = _nsimcli.PLACER
SCOPER = _nsimcli.SCOPER
MACRO = _nsimcli.MACRO
BITVECTOR = _nsimcli.BITVECTOR
CLIST = _nsimcli.CLIST
FI_MODULE = _nsimcli.FI_MODULE
HLSIM = _nsimcli.HLSIM
LLSIM = _nsimcli.LLSIM
MICROCODE = _nsimcli.MICROCODE
API = _nsimcli.API
NSIM_PACKET = _nsimcli.NSIM_PACKET
NSIM_MACRO = _nsimcli.NSIM_MACRO
NSIM_TABLE = _nsimcli.NSIM_TABLE
NSIM_LINE = _nsimcli.NSIM_LINE
NSIM_DEBUG = _nsimcli.NSIM_DEBUG
REF_MODEL = _nsimcli.REF_MODEL
NSIM_DEBUG_ADAPTER = _nsimcli.NSIM_DEBUG_ADAPTER
NPL = _nsimcli.NPL
USER = _nsimcli.USER
NSIM_COUNTER = _nsimcli.NSIM_COUNTER
NUM_MODULES = _nsimcli.NUM_MODULES

def getModuleName(module):
    return _nsimcli.getModuleName(module)
getModuleName = _nsimcli.getModuleName
class nplLogInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nplLogInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nplLogInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nplFileLocation"] = _nsimcli.nplLogInfo_nplFileLocation_set
    __swig_getmethods__["nplFileLocation"] = _nsimcli.nplLogInfo_nplFileLocation_get
    if _newclass:
        nplFileLocation = _swig_property(_nsimcli.nplLogInfo_nplFileLocation_get, _nsimcli.nplLogInfo_nplFileLocation_set)
    __swig_setmethods__["nplLineNumber"] = _nsimcli.nplLogInfo_nplLineNumber_set
    __swig_getmethods__["nplLineNumber"] = _nsimcli.nplLogInfo_nplLineNumber_get
    if _newclass:
        nplLineNumber = _swig_property(_nsimcli.nplLogInfo_nplLineNumber_get, _nsimcli.nplLogInfo_nplLineNumber_set)
    __swig_setmethods__["nplColumnNumber"] = _nsimcli.nplLogInfo_nplColumnNumber_set
    __swig_getmethods__["nplColumnNumber"] = _nsimcli.nplLogInfo_nplColumnNumber_get
    if _newclass:
        nplColumnNumber = _swig_property(_nsimcli.nplLogInfo_nplColumnNumber_get, _nsimcli.nplLogInfo_nplColumnNumber_set)

    def __init__(self, *args):
        this = _nsimcli.new_nplLogInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def to_string(self):
        return _nsimcli.nplLogInfo_to_string(self)
    __swig_destroy__ = _nsimcli.delete_nplLogInfo
    __del__ = lambda self: None
nplLogInfo_swigregister = _nsimcli.nplLogInfo_swigregister
nplLogInfo_swigregister(nplLogInfo)


def GetLogLevelName(level):
    return _nsimcli.GetLogLevelName(level)
GetLogLevelName = _nsimcli.GetLogLevelName
LOG_DIFF_IGNORE_STR = _nsimcli.LOG_DIFF_IGNORE_STR
class Logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_Logger
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _nsimcli.new_Logger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setThreadPrefix = staticmethod(_nsimcli.Logger_setThreadPrefix)
    else:
        setThreadPrefix = _nsimcli.Logger_setThreadPrefix
    if _newclass:
        getThreadPrefix = staticmethod(_nsimcli.Logger_getThreadPrefix)
    else:
        getThreadPrefix = _nsimcli.Logger_getThreadPrefix
    if _newclass:
        InitDefaultLogger = staticmethod(_nsimcli.Logger_InitDefaultLogger)
    else:
        InitDefaultLogger = _nsimcli.Logger_InitDefaultLogger

    def SetLogFilePath(self, outputFolderPath, logPrefixEnabled, logFileName, maxLogSize, maxLogFiles, compress):
        return _nsimcli.Logger_SetLogFilePath(self, outputFolderPath, logPrefixEnabled, logFileName, maxLogSize, maxLogFiles, compress)

    def SetModuleFileLogLevel(self, module, newLevel):
        return _nsimcli.Logger_SetModuleFileLogLevel(self, module, newLevel)

    def SetFileLogLevelForAll(self, newLevel):
        return _nsimcli.Logger_SetFileLogLevelForAll(self, newLevel)

    def SetModuleStdOutLogLevel(self, module, newLevel):
        return _nsimcli.Logger_SetModuleStdOutLogLevel(self, module, newLevel)

    def SetStdOutLogLevelForAll(self, newLevel):
        return _nsimcli.Logger_SetStdOutLogLevelForAll(self, newLevel)

    def SetIsSynchronousLogger(self, isSynchronous):
        return _nsimcli.Logger_SetIsSynchronousLogger(self, isSynchronous)

    def SetMsgPrefix(self, msgPrefix):
        return _nsimcli.Logger_SetMsgPrefix(self, msgPrefix)

    def IsLogLevelEnabled(self, module, level):
        return _nsimcli.Logger_IsLogLevelEnabled(self, module, level)

    def Flush(self):
        return _nsimcli.Logger_Flush(self)

    def StopLoggingThread(self):
        return _nsimcli.Logger_StopLoggingThread(self)

    def Log(self, *args):
        return _nsimcli.Logger_Log(self, *args)

    def GetNumLogMessages(self, level):
        return _nsimcli.Logger_GetNumLogMessages(self, level)
    if _newclass:
        IsDefaultLoggerInitialized = staticmethod(_nsimcli.Logger_IsDefaultLoggerInitialized)
    else:
        IsDefaultLoggerInitialized = _nsimcli.Logger_IsDefaultLoggerInitialized
    if _newclass:
        GetDefaultLogger = staticmethod(_nsimcli.Logger_GetDefaultLogger)
    else:
        GetDefaultLogger = _nsimcli.Logger_GetDefaultLogger
    if _newclass:
        RedirectDefaultLogger = staticmethod(_nsimcli.Logger_RedirectDefaultLogger)
    else:
        RedirectDefaultLogger = _nsimcli.Logger_RedirectDefaultLogger
    if _newclass:
        RestoreDefualtLogger = staticmethod(_nsimcli.Logger_RestoreDefualtLogger)
    else:
        RestoreDefualtLogger = _nsimcli.Logger_RestoreDefualtLogger
    if _newclass:
        FlushAndStopLoggingThreads = staticmethod(_nsimcli.Logger_FlushAndStopLoggingThreads)
    else:
        FlushAndStopLoggingThreads = _nsimcli.Logger_FlushAndStopLoggingThreads

    def GetErrorsVector(self):
        return _nsimcli.Logger_GetErrorsVector(self)

    def register_log_message_callback(self, level, callback):
        return _nsimcli.Logger_register_log_message_callback(self, level, callback)

    def unregister_log_message_callback(self, client_handle):
        return _nsimcli.Logger_unregister_log_message_callback(self, client_handle)
Logger_swigregister = _nsimcli.Logger_swigregister
Logger_swigregister(Logger)

def Logger_setThreadPrefix(tname):
    return _nsimcli.Logger_setThreadPrefix(tname)
Logger_setThreadPrefix = _nsimcli.Logger_setThreadPrefix

def Logger_getThreadPrefix():
    return _nsimcli.Logger_getThreadPrefix()
Logger_getThreadPrefix = _nsimcli.Logger_getThreadPrefix

def Logger_InitDefaultLogger(outputFolderPath, logPrefixEnabled, logFileName):
    return _nsimcli.Logger_InitDefaultLogger(outputFolderPath, logPrefixEnabled, logFileName)
Logger_InitDefaultLogger = _nsimcli.Logger_InitDefaultLogger

def Logger_IsDefaultLoggerInitialized():
    return _nsimcli.Logger_IsDefaultLoggerInitialized()
Logger_IsDefaultLoggerInitialized = _nsimcli.Logger_IsDefaultLoggerInitialized

def Logger_GetDefaultLogger():
    return _nsimcli.Logger_GetDefaultLogger()
Logger_GetDefaultLogger = _nsimcli.Logger_GetDefaultLogger

def Logger_RedirectDefaultLogger(logger):
    return _nsimcli.Logger_RedirectDefaultLogger(logger)
Logger_RedirectDefaultLogger = _nsimcli.Logger_RedirectDefaultLogger

def Logger_RestoreDefualtLogger():
    return _nsimcli.Logger_RestoreDefualtLogger()
Logger_RestoreDefualtLogger = _nsimcli.Logger_RestoreDefualtLogger

def Logger_FlushAndStopLoggingThreads():
    return _nsimcli.Logger_FlushAndStopLoggingThreads()
Logger_FlushAndStopLoggingThreads = _nsimcli.Logger_FlushAndStopLoggingThreads

class nsim_port_info_lane_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_port_info_lane_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_port_info_lane_t, name)
    __repr__ = _swig_repr

    def __eq__(self, rhs):
        return _nsimcli.nsim_port_info_lane_t___eq__(self, rhs)

    def __ne__(self, rhs):
        return _nsimcli.nsim_port_info_lane_t___ne__(self, rhs)
    __swig_setmethods__["lane_base"] = _nsimcli.nsim_port_info_lane_t_lane_base_set
    __swig_getmethods__["lane_base"] = _nsimcli.nsim_port_info_lane_t_lane_base_get
    if _newclass:
        lane_base = _swig_property(_nsimcli.nsim_port_info_lane_t_lane_base_get, _nsimcli.nsim_port_info_lane_t_lane_base_set)
    __swig_setmethods__["lane_size"] = _nsimcli.nsim_port_info_lane_t_lane_size_set
    __swig_getmethods__["lane_size"] = _nsimcli.nsim_port_info_lane_t_lane_size_get
    if _newclass:
        lane_size = _swig_property(_nsimcli.nsim_port_info_lane_t_lane_size_get, _nsimcli.nsim_port_info_lane_t_lane_size_set)

    def __init__(self):
        this = _nsimcli.new_nsim_port_info_lane_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_nsim_port_info_lane_t
    __del__ = lambda self: None
nsim_port_info_lane_t_swigregister = _nsimcli.nsim_port_info_lane_t_swigregister
nsim_port_info_lane_t_swigregister(nsim_port_info_lane_t)

class nsim_port_pif_config_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_port_pif_config_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_port_pif_config_t, name)
    __repr__ = _swig_repr

    def __eq__(self, rhs):
        return _nsimcli.nsim_port_pif_config_t___eq__(self, rhs)

    def __ne__(self, rhs):
        return _nsimcli.nsim_port_pif_config_t___ne__(self, rhs)
    __swig_setmethods__["valid"] = _nsimcli.nsim_port_pif_config_t_valid_set
    __swig_getmethods__["valid"] = _nsimcli.nsim_port_pif_config_t_valid_get
    if _newclass:
        valid = _swig_property(_nsimcli.nsim_port_pif_config_t_valid_get, _nsimcli.nsim_port_pif_config_t_valid_set)
    __swig_setmethods__["pif"] = _nsimcli.nsim_port_pif_config_t_pif_set
    __swig_getmethods__["pif"] = _nsimcli.nsim_port_pif_config_t_pif_get
    if _newclass:
        pif = _swig_property(_nsimcli.nsim_port_pif_config_t_pif_get, _nsimcli.nsim_port_pif_config_t_pif_set)
    __swig_setmethods__["tx"] = _nsimcli.nsim_port_pif_config_t_tx_set
    __swig_getmethods__["tx"] = _nsimcli.nsim_port_pif_config_t_tx_get
    if _newclass:
        tx = _swig_property(_nsimcli.nsim_port_pif_config_t_tx_get, _nsimcli.nsim_port_pif_config_t_tx_set)
    __swig_setmethods__["rx"] = _nsimcli.nsim_port_pif_config_t_rx_set
    __swig_getmethods__["rx"] = _nsimcli.nsim_port_pif_config_t_rx_get
    if _newclass:
        rx = _swig_property(_nsimcli.nsim_port_pif_config_t_rx_get, _nsimcli.nsim_port_pif_config_t_rx_set)

    def __init__(self):
        this = _nsimcli.new_nsim_port_pif_config_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_nsim_port_pif_config_t
    __del__ = lambda self: None
nsim_port_pif_config_t_swigregister = _nsimcli.nsim_port_pif_config_t_swigregister
nsim_port_pif_config_t_swigregister(nsim_port_pif_config_t)

class nsim_port_config_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_port_config_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_port_config_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["slice"] = _nsimcli.nsim_port_config_t_slice_set
    __swig_getmethods__["slice"] = _nsimcli.nsim_port_config_t_slice_get
    if _newclass:
        slice = _swig_property(_nsimcli.nsim_port_config_t_slice_get, _nsimcli.nsim_port_config_t_slice_set)
    __swig_setmethods__["ifg"] = _nsimcli.nsim_port_config_t_ifg_set
    __swig_getmethods__["ifg"] = _nsimcli.nsim_port_config_t_ifg_get
    if _newclass:
        ifg = _swig_property(_nsimcli.nsim_port_config_t_ifg_get, _nsimcli.nsim_port_config_t_ifg_set)
    __swig_setmethods__["pif_config"] = _nsimcli.nsim_port_config_t_pif_config_set
    __swig_getmethods__["pif_config"] = _nsimcli.nsim_port_config_t_pif_config_get
    if _newclass:
        pif_config = _swig_property(_nsimcli.nsim_port_config_t_pif_config_get, _nsimcli.nsim_port_config_t_pif_config_set)

    def __init__(self):
        this = _nsimcli.new_nsim_port_config_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_nsim_port_config_t
    __del__ = lambda self: None
nsim_port_config_t_swigregister = _nsimcli.nsim_port_config_t_swigregister
nsim_port_config_t_swigregister(nsim_port_config_t)

class DeviceEngineInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceEngineInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceEngineInfo, name)
    __repr__ = _swig_repr
    INVALID_ENGINE_ID = _nsimcli.DeviceEngineInfo_INVALID_ENGINE_ID
    __swig_setmethods__["ENGINE_NAME_TERMINATION"] = _nsimcli.DeviceEngineInfo_ENGINE_NAME_TERMINATION_set
    __swig_getmethods__["ENGINE_NAME_TERMINATION"] = _nsimcli.DeviceEngineInfo_ENGINE_NAME_TERMINATION_get
    if _newclass:
        ENGINE_NAME_TERMINATION = _swig_property(_nsimcli.DeviceEngineInfo_ENGINE_NAME_TERMINATION_get, _nsimcli.DeviceEngineInfo_ENGINE_NAME_TERMINATION_set)
    __swig_setmethods__["ENGINE_NAME_FORWARDING"] = _nsimcli.DeviceEngineInfo_ENGINE_NAME_FORWARDING_set
    __swig_getmethods__["ENGINE_NAME_FORWARDING"] = _nsimcli.DeviceEngineInfo_ENGINE_NAME_FORWARDING_get
    if _newclass:
        ENGINE_NAME_FORWARDING = _swig_property(_nsimcli.DeviceEngineInfo_ENGINE_NAME_FORWARDING_get, _nsimcli.DeviceEngineInfo_ENGINE_NAME_FORWARDING_set)
    __swig_setmethods__["ENGINE_NAME_TRANSMIT"] = _nsimcli.DeviceEngineInfo_ENGINE_NAME_TRANSMIT_set
    __swig_getmethods__["ENGINE_NAME_TRANSMIT"] = _nsimcli.DeviceEngineInfo_ENGINE_NAME_TRANSMIT_get
    if _newclass:
        ENGINE_NAME_TRANSMIT = _swig_property(_nsimcli.DeviceEngineInfo_ENGINE_NAME_TRANSMIT_get, _nsimcli.DeviceEngineInfo_ENGINE_NAME_TRANSMIT_set)
    __swig_setmethods__["ENGINE_NAME_NPU_HOST"] = _nsimcli.DeviceEngineInfo_ENGINE_NAME_NPU_HOST_set
    __swig_getmethods__["ENGINE_NAME_NPU_HOST"] = _nsimcli.DeviceEngineInfo_ENGINE_NAME_NPU_HOST_get
    if _newclass:
        ENGINE_NAME_NPU_HOST = _swig_property(_nsimcli.DeviceEngineInfo_ENGINE_NAME_NPU_HOST_get, _nsimcli.DeviceEngineInfo_ENGINE_NAME_NPU_HOST_set)
    __swig_setmethods__["ENGINE_TYPE_NPE"] = _nsimcli.DeviceEngineInfo_ENGINE_TYPE_NPE_set
    __swig_getmethods__["ENGINE_TYPE_NPE"] = _nsimcli.DeviceEngineInfo_ENGINE_TYPE_NPE_get
    if _newclass:
        ENGINE_TYPE_NPE = _swig_property(_nsimcli.DeviceEngineInfo_ENGINE_TYPE_NPE_get, _nsimcli.DeviceEngineInfo_ENGINE_TYPE_NPE_set)
    __swig_setmethods__["ENGINE_TYPE_FPP"] = _nsimcli.DeviceEngineInfo_ENGINE_TYPE_FPP_set
    __swig_getmethods__["ENGINE_TYPE_FPP"] = _nsimcli.DeviceEngineInfo_ENGINE_TYPE_FPP_get
    if _newclass:
        ENGINE_TYPE_FPP = _swig_property(_nsimcli.DeviceEngineInfo_ENGINE_TYPE_FPP_get, _nsimcli.DeviceEngineInfo_ENGINE_TYPE_FPP_set)
    __swig_setmethods__["id"] = _nsimcli.DeviceEngineInfo_id_set
    __swig_getmethods__["id"] = _nsimcli.DeviceEngineInfo_id_get
    if _newclass:
        id = _swig_property(_nsimcli.DeviceEngineInfo_id_get, _nsimcli.DeviceEngineInfo_id_set)
    __swig_setmethods__["name"] = _nsimcli.DeviceEngineInfo_name_set
    __swig_getmethods__["name"] = _nsimcli.DeviceEngineInfo_name_get
    if _newclass:
        name = _swig_property(_nsimcli.DeviceEngineInfo_name_get, _nsimcli.DeviceEngineInfo_name_set)
    __swig_setmethods__["lowerCaseName"] = _nsimcli.DeviceEngineInfo_lowerCaseName_set
    __swig_getmethods__["lowerCaseName"] = _nsimcli.DeviceEngineInfo_lowerCaseName_get
    if _newclass:
        lowerCaseName = _swig_property(_nsimcli.DeviceEngineInfo_lowerCaseName_get, _nsimcli.DeviceEngineInfo_lowerCaseName_set)
    __swig_setmethods__["lvrName"] = _nsimcli.DeviceEngineInfo_lvrName_set
    __swig_getmethods__["lvrName"] = _nsimcli.DeviceEngineInfo_lvrName_get
    if _newclass:
        lvrName = _swig_property(_nsimcli.DeviceEngineInfo_lvrName_get, _nsimcli.DeviceEngineInfo_lvrName_set)
    __swig_setmethods__["type"] = _nsimcli.DeviceEngineInfo_type_set
    __swig_getmethods__["type"] = _nsimcli.DeviceEngineInfo_type_get
    if _newclass:
        type = _swig_property(_nsimcli.DeviceEngineInfo_type_get, _nsimcli.DeviceEngineInfo_type_set)
    __swig_setmethods__["engineBits"] = _nsimcli.DeviceEngineInfo_engineBits_set
    __swig_getmethods__["engineBits"] = _nsimcli.DeviceEngineInfo_engineBits_get
    if _newclass:
        engineBits = _swig_property(_nsimcli.DeviceEngineInfo_engineBits_get, _nsimcli.DeviceEngineInfo_engineBits_set)
    __swig_setmethods__["recycleEngineBits"] = _nsimcli.DeviceEngineInfo_recycleEngineBits_set
    __swig_getmethods__["recycleEngineBits"] = _nsimcli.DeviceEngineInfo_recycleEngineBits_get
    if _newclass:
        recycleEngineBits = _swig_property(_nsimcli.DeviceEngineInfo_recycleEngineBits_get, _nsimcli.DeviceEngineInfo_recycleEngineBits_set)
    __swig_setmethods__["canSetNextToEneMacro"] = _nsimcli.DeviceEngineInfo_canSetNextToEneMacro_set
    __swig_getmethods__["canSetNextToEneMacro"] = _nsimcli.DeviceEngineInfo_canSetNextToEneMacro_get
    if _newclass:
        canSetNextToEneMacro = _swig_property(_nsimcli.DeviceEngineInfo_canSetNextToEneMacro_get, _nsimcli.DeviceEngineInfo_canSetNextToEneMacro_set)

    def __init__(self):
        this = _nsimcli.new_DeviceEngineInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_DeviceEngineInfo
    __del__ = lambda self: None
DeviceEngineInfo_swigregister = _nsimcli.DeviceEngineInfo_swigregister
DeviceEngineInfo_swigregister(DeviceEngineInfo)
cvar = _nsimcli.cvar

class EngineManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EngineManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EngineManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        GetEnginesInCurrentDevice = staticmethod(_nsimcli.EngineManager_GetEnginesInCurrentDevice)
    else:
        GetEnginesInCurrentDevice = _nsimcli.EngineManager_GetEnginesInCurrentDevice
    if _newclass:
        GetNumberOfEnginesInCurrentDevice = staticmethod(_nsimcli.EngineManager_GetNumberOfEnginesInCurrentDevice)
    else:
        GetNumberOfEnginesInCurrentDevice = _nsimcli.EngineManager_GetNumberOfEnginesInCurrentDevice
    if _newclass:
        GetEngineIdByName = staticmethod(_nsimcli.EngineManager_GetEngineIdByName)
    else:
        GetEngineIdByName = _nsimcli.EngineManager_GetEngineIdByName
    if _newclass:
        GetEngineInfoById = staticmethod(_nsimcli.EngineManager_GetEngineInfoById)
    else:
        GetEngineInfoById = _nsimcli.EngineManager_GetEngineInfoById
    if _newclass:
        GetEngineInfoByName = staticmethod(_nsimcli.EngineManager_GetEngineInfoByName)
    else:
        GetEngineInfoByName = _nsimcli.EngineManager_GetEngineInfoByName
    if _newclass:
        CanEngineSetNextToMacroInEngine = staticmethod(_nsimcli.EngineManager_CanEngineSetNextToMacroInEngine)
    else:
        CanEngineSetNextToMacroInEngine = _nsimcli.EngineManager_CanEngineSetNextToMacroInEngine
    __swig_destroy__ = _nsimcli.delete_EngineManager
    __del__ = lambda self: None
EngineManager_swigregister = _nsimcli.EngineManager_swigregister
EngineManager_swigregister(EngineManager)

def EngineManager_GetEnginesInCurrentDevice():
    return _nsimcli.EngineManager_GetEnginesInCurrentDevice()
EngineManager_GetEnginesInCurrentDevice = _nsimcli.EngineManager_GetEnginesInCurrentDevice

def EngineManager_GetNumberOfEnginesInCurrentDevice():
    return _nsimcli.EngineManager_GetNumberOfEnginesInCurrentDevice()
EngineManager_GetNumberOfEnginesInCurrentDevice = _nsimcli.EngineManager_GetNumberOfEnginesInCurrentDevice

def EngineManager_GetEngineIdByName(name):
    return _nsimcli.EngineManager_GetEngineIdByName(name)
EngineManager_GetEngineIdByName = _nsimcli.EngineManager_GetEngineIdByName

def EngineManager_GetEngineInfoById(id):
    return _nsimcli.EngineManager_GetEngineInfoById(id)
EngineManager_GetEngineInfoById = _nsimcli.EngineManager_GetEngineInfoById

def EngineManager_GetEngineInfoByName(name):
    return _nsimcli.EngineManager_GetEngineInfoByName(name)
EngineManager_GetEngineInfoByName = _nsimcli.EngineManager_GetEngineInfoByName

def EngineManager_CanEngineSetNextToMacroInEngine(invokerEngine, invokedEngine, isRxRecycle=False):
    return _nsimcli.EngineManager_CanEngineSetNextToMacroInEngine(invokerEngine, invokedEngine, isRxRecycle)
EngineManager_CanEngineSetNextToMacroInEngine = _nsimcli.EngineManager_CanEngineSetNextToMacroInEngine

NPU_HOST_PLACEMENT = _nsimcli.NPU_HOST_PLACEMENT
SLICE_PLACEMENT = _nsimcli.SLICE_PLACEMENT
NUM_CONTEXT_PLACEMENTS = _nsimcli.NUM_CONTEXT_PLACEMENTS

def GetContextPlacementNameById(contextPlacement):
    return _nsimcli.GetContextPlacementNameById(contextPlacement)
GetContextPlacementNameById = _nsimcli.GetContextPlacementNameById

def GetContextPlacementIdByName(name):
    return _nsimcli.GetContextPlacementIdByName(name)
GetContextPlacementIdByName = _nsimcli.GetContextPlacementIdByName

def IsEngineAllowedInContextPlacement(engine, contextPlacement):
    return _nsimcli.IsEngineAllowedInContextPlacement(engine, contextPlacement)
IsEngineAllowedInContextPlacement = _nsimcli.IsEngineAllowedInContextPlacement
class Operators(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Operators, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Operators, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    OP_OR = _nsimcli.Operators_OP_OR
    OP_AND = _nsimcli.Operators_OP_AND
    OP_BIT_OR = _nsimcli.Operators_OP_BIT_OR
    OP_BIT_AND = _nsimcli.Operators_OP_BIT_AND
    OP_EQ = _nsimcli.Operators_OP_EQ
    OP_LT = _nsimcli.Operators_OP_LT
    OP_LE = _nsimcli.Operators_OP_LE
    OP_GT = _nsimcli.Operators_OP_GT
    OP_GE = _nsimcli.Operators_OP_GE
    OP_NE = _nsimcli.Operators_OP_NE
    OP_NOT = _nsimcli.Operators_OP_NOT
    OP_MULT = _nsimcli.Operators_OP_MULT
    OP_DIV = _nsimcli.Operators_OP_DIV
    OP_PLUS = _nsimcli.Operators_OP_PLUS
    OP_MINUS = _nsimcli.Operators_OP_MINUS
    OP_CONCAT = _nsimcli.Operators_OP_CONCAT
    OP_NUM_OPERATORS = _nsimcli.Operators_OP_NUM_OPERATORS
    if _newclass:
        GetName = staticmethod(_nsimcli.Operators_GetName)
    else:
        GetName = _nsimcli.Operators_GetName
    if _newclass:
        InvertRelationalOperator = staticmethod(_nsimcli.Operators_InvertRelationalOperator)
    else:
        InvertRelationalOperator = _nsimcli.Operators_InvertRelationalOperator
    __swig_destroy__ = _nsimcli.delete_Operators
    __del__ = lambda self: None
Operators_swigregister = _nsimcli.Operators_swigregister
Operators_swigregister(Operators)

def Operators_GetName(op):
    return _nsimcli.Operators_GetName(op)
Operators_GetName = _nsimcli.Operators_GetName

def Operators_InvertRelationalOperator(op):
    return _nsimcli.Operators_InvertRelationalOperator(op)
Operators_InvertRelationalOperator = _nsimcli.Operators_InvertRelationalOperator

Alignment_NOT_APPLICABLE_ALIGNMENT = _nsimcli.Alignment_NOT_APPLICABLE_ALIGNMENT
Alignment_ALIGN_TO_MSB = _nsimcli.Alignment_ALIGN_TO_MSB
Alignment_ALIGN_TO_LSB = _nsimcli.Alignment_ALIGN_TO_LSB
Alignment_NUM_ALIGNMENTS = _nsimcli.Alignment_NUM_ALIGNMENTS
class TableType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableType, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    TABLE_TYPE_UNKNOWN = _nsimcli.TableType_TABLE_TYPE_UNKNOWN
    TABLE_TYPE_DIRECT = _nsimcli.TableType_TABLE_TYPE_DIRECT
    TABLE_TYPE_TCAM = _nsimcli.TableType_TABLE_TYPE_TCAM
    TABLE_TYPE_LPM = _nsimcli.TableType_TABLE_TYPE_LPM
    TABLE_TYPE_EM = _nsimcli.TableType_TABLE_TYPE_EM
    TABLE_TYPE_COMPOUND = _nsimcli.TableType_TABLE_TYPE_COMPOUND
    TABLE_TYPE_PACK = _nsimcli.TableType_TABLE_TYPE_PACK
    TABLE_TYPE_NUM_TYPES = _nsimcli.TableType_TABLE_TYPE_NUM_TYPES
    if _newclass:
        GetName = staticmethod(_nsimcli.TableType_GetName)
    else:
        GetName = _nsimcli.TableType_GetName
    if _newclass:
        NameToEnum = staticmethod(_nsimcli.TableType_NameToEnum)
    else:
        NameToEnum = _nsimcli.TableType_NameToEnum
    __swig_destroy__ = _nsimcli.delete_TableType
    __del__ = lambda self: None
TableType_swigregister = _nsimcli.TableType_swigregister
TableType_swigregister(TableType)

def TableType_GetName(tl):
    return _nsimcli.TableType_GetName(tl)
TableType_GetName = _nsimcli.TableType_GetName

def TableType_NameToEnum(name):
    return _nsimcli.TableType_NameToEnum(name)
TableType_NameToEnum = _nsimcli.TableType_NameToEnum

class Comment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Comment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Comment, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber):
        this = _nsimcli.new_Comment(fileName, lineNumber)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_Comment
    __del__ = lambda self: None

    def GetSourceLocation(self):
        return _nsimcli.Comment_GetSourceLocation(self)

    def GetFileName(self):
        return _nsimcli.Comment_GetFileName(self)

    def GetLineNumber(self):
        return _nsimcli.Comment_GetLineNumber(self)

    def GetEndLineNumber(self):
        return _nsimcli.Comment_GetEndLineNumber(self)

    def GetCommentContent(self):
        return _nsimcli.Comment_GetCommentContent(self)

    def IsAssigned(self):
        return _nsimcli.Comment_IsAssigned(self)

    def IsMultilineComment(self):
        return _nsimcli.Comment_IsMultilineComment(self)

    def AppendContent(self, content):
        return _nsimcli.Comment_AppendContent(self, content)

    def MarkAssigned(self):
        return _nsimcli.Comment_MarkAssigned(self)
Comment_swigregister = _nsimcli.Comment_swigregister
Comment_swigregister(Comment)

class CommentableItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommentableItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommentableItem, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber):
        this = _nsimcli.new_CommentableItem(fileName, lineNumber)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_CommentableItem
    __del__ = lambda self: None

    def GetFileName(self):
        return _nsimcli.CommentableItem_GetFileName(self)

    def GetLineNumber(self):
        return _nsimcli.CommentableItem_GetLineNumber(self)

    def GetSourceLocation(self):
        return _nsimcli.CommentableItem_GetSourceLocation(self)

    def GetDocComment(self):
        return _nsimcli.CommentableItem_GetDocComment(self)

    def SetDocComment(self, comment):
        return _nsimcli.CommentableItem_SetDocComment(self, comment)

    def AddSingleCommentableItemToLineMap(self, lineMap, logger):
        return _nsimcli.CommentableItem_AddSingleCommentableItemToLineMap(self, lineMap, logger)

    def AddCommentableItemsToLineMap(self, lineMap, arg3):
        return _nsimcli.CommentableItem_AddCommentableItemsToLineMap(self, lineMap, arg3)
CommentableItem_swigregister = _nsimcli.CommentableItem_swigregister
CommentableItem_swigregister(CommentableItem)

class ParsedItem(CommentableItem):
    __swig_setmethods__ = {}
    for _s in [CommentableItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParsedItem, name, value)
    __swig_getmethods__ = {}
    for _s in [CommentableItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParsedItem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_ParsedItem
    __del__ = lambda self: None

    def MarkIsReferenced(self):
        return _nsimcli.ParsedItem_MarkIsReferenced(self)

    def IsReferenced(self):
        return _nsimcli.ParsedItem_IsReferenced(self)

    def CheckIsReferenced(self, logger):
        return _nsimcli.ParsedItem_CheckIsReferenced(self, logger)

    def PostParsingProcessingAndValidation(self, parsedItemsContainer, logger, inScopeOfControlFunction):
        return _nsimcli.ParsedItem_PostParsingProcessingAndValidation(self, parsedItemsContainer, logger, inScopeOfControlFunction)

    def CloneParsedItem(self):
        return _nsimcli.ParsedItem_CloneParsedItem(self)

    def SpecializeForTemplateBinding(self, parsedItemsContainer, callMap, logger):
        return _nsimcli.ParsedItem_SpecializeForTemplateBinding(self, parsedItemsContainer, callMap, logger)

    def GetName(self):
        return _nsimcli.ParsedItem_GetName(self)

    def SetComment(self, comment):
        return _nsimcli.ParsedItem_SetComment(self, comment)

    def GetComment(self):
        return _nsimcli.ParsedItem_GetComment(self)

    def IsImplicit(self):
        return _nsimcli.ParsedItem_IsImplicit(self)

    def DumpToFile(self, treeDumper, logger):
        return _nsimcli.ParsedItem_DumpToFile(self, treeDumper, logger)

    def IsHardwareNpl(self):
        return _nsimcli.ParsedItem_IsHardwareNpl(self)
ParsedItem_swigregister = _nsimcli.ParsedItem_swigregister
ParsedItem_swigregister(ParsedItem)

class Statement(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Statement, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Statement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_Statement
    __del__ = lambda self: None
Statement_swigregister = _nsimcli.Statement_swigregister
Statement_swigregister(Statement)

PRIMITIVE_ACTION_ADD = _nsimcli.PRIMITIVE_ACTION_ADD
PRIMITIVE_ACTION_SUBTRACT = _nsimcli.PRIMITIVE_ACTION_SUBTRACT
PRIMITIVE_ACTION_MODIFY_FIELD = _nsimcli.PRIMITIVE_ACTION_MODIFY_FIELD
PRIMITIVE_ACTION_MASK_FIELD = _nsimcli.PRIMITIVE_ACTION_MASK_FIELD
PRIMITIVE_ACTION_MUX_FIELD = _nsimcli.PRIMITIVE_ACTION_MUX_FIELD
PRIMITIVE_ACTION_SELECT_FIELD = _nsimcli.PRIMITIVE_ACTION_SELECT_FIELD
PRIMITIVE_ACTION_SET_NEXT_MACRO = _nsimcli.PRIMITIVE_ACTION_SET_NEXT_MACRO
PRIMITIVE_ACTION_CALC_UPDATED_IPV4_CHECKSUM = _nsimcli.PRIMITIVE_ACTION_CALC_UPDATED_IPV4_CHECKSUM
PRIMITIVE_ACTION_CONCAT = _nsimcli.PRIMITIVE_ACTION_CONCAT
PRIMITIVE_ACTION_PUSH_PAYLOAD = _nsimcli.PRIMITIVE_ACTION_PUSH_PAYLOAD
PRIMITIVE_ACTION_ASSIGN_BOOLEAN_EXPRESSION = _nsimcli.PRIMITIVE_ACTION_ASSIGN_BOOLEAN_EXPRESSION
PRIMITIVE_ACTION_ASSIGN_TERNARY_EXPRESSION = _nsimcli.PRIMITIVE_ACTION_ASSIGN_TERNARY_EXPRESSION
PRIMITIVE_ACTION_NONE = _nsimcli.PRIMITIVE_ACTION_NONE
class ActionStatement(Statement):
    __swig_setmethods__ = {}
    for _s in [Statement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActionStatement, name, value)
    __swig_getmethods__ = {}
    for _s in [Statement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActionStatement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_ActionStatement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_ActionStatement
    __del__ = lambda self: None

    def AddParamValueStatement(self, valueStatement):
        return _nsimcli.ActionStatement_AddParamValueStatement(self, valueStatement)

    def GetParamValueStatements(self):
        return _nsimcli.ActionStatement_GetParamValueStatements(self)

    def SetLevel(self, level):
        return _nsimcli.ActionStatement_SetLevel(self, level)

    def GetArgs(self):
        return _nsimcli.ActionStatement_GetArgs(self)

    def IsPrimitive(self):
        return _nsimcli.ActionStatement_IsPrimitive(self)

    def GetPrimitiveActionType(self):
        return _nsimcli.ActionStatement_GetPrimitiveActionType(self)

    def GetPrimitiveActionTypeAsString(self):
        return _nsimcli.ActionStatement_GetPrimitiveActionTypeAsString(self)

    def GetAction(self):
        return _nsimcli.ActionStatement_GetAction(self)

    def GetLevel(self):
        return _nsimcli.ActionStatement_GetLevel(self)

    def SetName(self, newName):
        return _nsimcli.ActionStatement_SetName(self, newName)

    def GetValueArg(self, index):
        return _nsimcli.ActionStatement_GetValueArg(self, index)

    def GetValueWidths(self):
        return _nsimcli.ActionStatement_GetValueWidths(self)
ActionStatement_swigregister = _nsimcli.ActionStatement_swigregister
ActionStatement_swigregister(ActionStatement)

NO_OP_ACTION_NAME = _nsimcli.NO_OP_ACTION_NAME
class Action(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Action, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, tableName, isImplicit):
        this = _nsimcli.new_Action(fileName, lineNumber, comment, name, tableName, isImplicit)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_Action
    __del__ = lambda self: None

    def AddParam(self, name, widthInBits, lineno):
        return _nsimcli.Action_AddParam(self, name, widthInBits, lineno)

    def AddActionStatement(self, actionStatement):
        return _nsimcli.Action_AddActionStatement(self, actionStatement)

    def HasParam(self, paramName):
        return _nsimcli.Action_HasParam(self, paramName)

    def SetParamWidthAndType(self, paramName, paramWidth, paramWidthInAPI, type, propertiesSource, logger):
        return _nsimcli.Action_SetParamWidthAndType(self, paramName, paramWidth, paramWidthInAPI, type, propertiesSource, logger)

    def GetParamWidth(self, paramName):
        return _nsimcli.Action_GetParamWidth(self, paramName)

    def GetParamsWidthInBits(self):
        return _nsimcli.Action_GetParamsWidthInBits(self)

    def SetEndOfActionLineNumber(self, lineNumber):
        return _nsimcli.Action_SetEndOfActionLineNumber(self, lineNumber)

    def GetEndOfActionLineNumber(self):
        return _nsimcli.Action_GetEndOfActionLineNumber(self)

    def GetActionStatements(self):
        return _nsimcli.Action_GetActionStatements(self)

    def MarkParamIsReferenced(self, paramName):
        return _nsimcli.Action_MarkParamIsReferenced(self, paramName)

    def IsHardwired(self):
        return _nsimcli.Action_IsHardwired(self)

    def IsHardwiredPrintLn(self):
        return _nsimcli.Action_IsHardwiredPrintLn(self)

    def MarkAsVariadic(self):
        return _nsimcli.Action_MarkAsVariadic(self)

    def IsVariadic(self):
        return _nsimcli.Action_IsVariadic(self)

    def SetAllowInAppNpl(self):
        return _nsimcli.Action_SetAllowInAppNpl(self)

    def IsAllowedInAppNpl(self):
        return _nsimcli.Action_IsAllowedInAppNpl(self)

    def RemoveActionFromParsedItems(self, parsedItemsContainer):
        return _nsimcli.Action_RemoveActionFromParsedItems(self, parsedItemsContainer)
    if _newclass:
        MangledNameForTable = staticmethod(_nsimcli.Action_MangledNameForTable)
    else:
        MangledNameForTable = _nsimcli.Action_MangledNameForTable

    def GetTableName(self):
        return _nsimcli.Action_GetTableName(self)

    def GetUnmangledName(self):
        return _nsimcli.Action_GetUnmangledName(self)

    def RemangleNameForNewTable(self, tableName, items):
        return _nsimcli.Action_RemangleNameForNewTable(self, tableName, items)

    def GetParams(self):
        return _nsimcli.Action_GetParams(self)
Action_swigregister = _nsimcli.Action_swigregister
Action_swigregister(Action)

def Action_MangledNameForTable(name, tableName):
    return _nsimcli.Action_MangledNameForTable(name, tableName)
Action_MangledNameForTable = _nsimcli.Action_MangledNameForTable

class Param(CommentableItem):
    __swig_setmethods__ = {}
    for _s in [CommentableItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param, name, value)
    __swig_getmethods__ = {}
    for _s in [CommentableItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["paramName"] = _nsimcli.Param_paramName_set
    __swig_getmethods__["paramName"] = _nsimcli.Param_paramName_get
    if _newclass:
        paramName = _swig_property(_nsimcli.Param_paramName_get, _nsimcli.Param_paramName_set)
    __swig_setmethods__["paramWidthInBits"] = _nsimcli.Param_paramWidthInBits_set
    __swig_getmethods__["paramWidthInBits"] = _nsimcli.Param_paramWidthInBits_get
    if _newclass:
        paramWidthInBits = _swig_property(_nsimcli.Param_paramWidthInBits_get, _nsimcli.Param_paramWidthInBits_set)
    __swig_setmethods__["paramWidthInBitsInAPI"] = _nsimcli.Param_paramWidthInBitsInAPI_set
    __swig_getmethods__["paramWidthInBitsInAPI"] = _nsimcli.Param_paramWidthInBitsInAPI_get
    if _newclass:
        paramWidthInBitsInAPI = _swig_property(_nsimcli.Param_paramWidthInBitsInAPI_get, _nsimcli.Param_paramWidthInBitsInAPI_set)
    __swig_setmethods__["paramType"] = _nsimcli.Param_paramType_set
    __swig_getmethods__["paramType"] = _nsimcli.Param_paramType_get
    if _newclass:
        paramType = _swig_property(_nsimcli.Param_paramType_get, _nsimcli.Param_paramType_set)
    __swig_setmethods__["isReferenced"] = _nsimcli.Param_isReferenced_set
    __swig_getmethods__["isReferenced"] = _nsimcli.Param_isReferenced_get
    if _newclass:
        isReferenced = _swig_property(_nsimcli.Param_isReferenced_get, _nsimcli.Param_isReferenced_set)
    __swig_setmethods__["isPadding"] = _nsimcli.Param_isPadding_set
    __swig_getmethods__["isPadding"] = _nsimcli.Param_isPadding_get
    if _newclass:
        isPadding = _swig_property(_nsimcli.Param_isPadding_get, _nsimcli.Param_isPadding_set)
    __swig_setmethods__["propertiesSource"] = _nsimcli.Param_propertiesSource_set
    __swig_getmethods__["propertiesSource"] = _nsimcli.Param_propertiesSource_get
    if _newclass:
        propertiesSource = _swig_property(_nsimcli.Param_propertiesSource_get, _nsimcli.Param_propertiesSource_set)

    def __init__(self, fileName, lineno):
        this = _nsimcli.new_Param(fileName, lineno)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_Param
    __del__ = lambda self: None
Param_swigregister = _nsimcli.Param_swigregister
Param_swigregister(Param)

class Constant(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constant, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constant, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, value):
        this = _nsimcli.new_Constant(fileName, lineNumber, comment, name, value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetConstantValueBitVector(self):
        return _nsimcli.Constant_GetConstantValueBitVector(self)
    __swig_destroy__ = _nsimcli.delete_Constant
    __del__ = lambda self: None
Constant_swigregister = _nsimcli.Constant_swigregister
Constant_swigregister(Constant)

class ControlStatement(Statement):
    __swig_setmethods__ = {}
    for _s in [Statement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlStatement, name, value)
    __swig_getmethods__ = {}
    for _s in [Statement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlStatement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    StatementTypes_CALL_CONTROL_OR_ACTION = _nsimcli.ControlStatement_StatementTypes_CALL_CONTROL_OR_ACTION
    StatementTypes_APPLY_TABLE = _nsimcli.ControlStatement_StatementTypes_APPLY_TABLE
    StatementTypes_CALL_CONTROL = _nsimcli.ControlStatement_StatementTypes_CALL_CONTROL
    StatementTypes_WHILE_STATEMENT = _nsimcli.ControlStatement_StatementTypes_WHILE_STATEMENT
    StatementTypes_CONDITIONAL_STATEMENT = _nsimcli.ControlStatement_StatementTypes_CONDITIONAL_STATEMENT

    def SetControlStatementContainer(self, container):
        return _nsimcli.ControlStatement_SetControlStatementContainer(self, container)

    def ResolveCallControlOrActions(self, parsedItemsContainer, logger):
        return _nsimcli.ControlStatement_ResolveCallControlOrActions(self, parsedItemsContainer, logger)

    def GetControlStatementType(self):
        return _nsimcli.ControlStatement_GetControlStatementType(self)

    def CloneParsedItem(self):
        return _nsimcli.ControlStatement_CloneParsedItem(self)
    if _newclass:
        GetStrFromControlStatementType = staticmethod(_nsimcli.ControlStatement_GetStrFromControlStatementType)
    else:
        GetStrFromControlStatementType = _nsimcli.ControlStatement_GetStrFromControlStatementType

    def get_apply_table(self):
        return _nsimcli.ControlStatement_get_apply_table(self)

    def get_call_control(self):
        return _nsimcli.ControlStatement_get_call_control(self)

    def get_call_control_or_action(self):
        return _nsimcli.ControlStatement_get_call_control_or_action(self)

    def get_conditional_statement(self):
        return _nsimcli.ControlStatement_get_conditional_statement(self)
    __swig_destroy__ = _nsimcli.delete_ControlStatement
    __del__ = lambda self: None
ControlStatement_swigregister = _nsimcli.ControlStatement_swigregister
ControlStatement_swigregister(ControlStatement)

def ControlStatement_GetStrFromControlStatementType(controlStatementType):
    return _nsimcli.ControlStatement_GetStrFromControlStatementType(controlStatementType)
ControlStatement_GetStrFromControlStatementType = _nsimcli.ControlStatement_GetStrFromControlStatementType

class ControlStatementContainer(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlStatementContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlStatementContainer, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, nameOfItemHoldingThisContainer):
        this = _nsimcli.new_ControlStatementContainer(fileName, lineNumber, comment, nameOfItemHoldingThisContainer)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CloneParsedItem(self):
        return _nsimcli.ControlStatementContainer_CloneParsedItem(self)

    def AddControlStatement(self, controlStatement):
        return _nsimcli.ControlStatementContainer_AddControlStatement(self, controlStatement)

    def ResolveCallControlOrActions(self, parsedItemsContainer, logger):
        return _nsimcli.ControlStatementContainer_ResolveCallControlOrActions(self, parsedItemsContainer, logger)

    def GetNumStatements(self):
        return _nsimcli.ControlStatementContainer_GetNumStatements(self)

    def GetControlStatements(self, *args):
        return _nsimcli.ControlStatementContainer_GetControlStatements(self, *args)

    def DropOwnershipOfAndClearStatements(self):
        return _nsimcli.ControlStatementContainer_DropOwnershipOfAndClearStatements(self)

    def GetAllAppliedTables(self):
        return _nsimcli.ControlStatementContainer_GetAllAppliedTables(self)

    def DeleteAllControlStatements(self, parsedItemsContainer):
        return _nsimcli.ControlStatementContainer_DeleteAllControlStatements(self, parsedItemsContainer)

    def get_statements(self):
        return _nsimcli.ControlStatementContainer_get_statements(self)
    __swig_destroy__ = _nsimcli.delete_ControlStatementContainer
    __del__ = lambda self: None
ControlStatementContainer_swigregister = _nsimcli.ControlStatementContainer_swigregister
ControlStatementContainer_swigregister(ControlStatementContainer)

FW_DONE_MACRO_NAME = _nsimcli.FW_DONE_MACRO_NAME
RX_RECYCLE_SUFFIX = _nsimcli.RX_RECYCLE_SUFFIX
class ControlFunction(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlFunction, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, isMacroStart, isSynchronized, isTemplate):
        this = _nsimcli.new_ControlFunction(fileName, lineNumber, comment, name, isMacroStart, isSynchronized, isTemplate)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CloneControlFunction(self, name):
        return _nsimcli.ControlFunction_CloneControlFunction(self, name)

    def GetControlStatementContainer(self, *args):
        return _nsimcli.ControlFunction_GetControlStatementContainer(self, *args)

    def ResolveCallControlOrActions(self, parsedItemsContainer, logger):
        return _nsimcli.ControlFunction_ResolveCallControlOrActions(self, parsedItemsContainer, logger)

    def DumpHeaderOnlyToFile(self, treeDumper):
        return _nsimcli.ControlFunction_DumpHeaderOnlyToFile(self, treeDumper)

    def GetContextNamesAsString(self):
        return _nsimcli.ControlFunction_GetContextNamesAsString(self)

    def IsMacroStart(self):
        return _nsimcli.ControlFunction_IsMacroStart(self)

    def GetContextNames(self):
        return _nsimcli.ControlFunction_GetContextNames(self)

    def IsInContext(self, contextName):
        return _nsimcli.ControlFunction_IsInContext(self, contextName)

    def IsForwardingDoneMacro(self):
        return _nsimcli.ControlFunction_IsForwardingDoneMacro(self)

    def IsSynchronized(self):
        return _nsimcli.ControlFunction_IsSynchronized(self)

    def IsTemplate(self):
        return _nsimcli.ControlFunction_IsTemplate(self)

    def AddTemplateParameter(self, name, type, isEnumOption):
        return _nsimcli.ControlFunction_AddTemplateParameter(self, name, type, isEnumOption)

    def GetTemplateParameters(self):
        return _nsimcli.ControlFunction_GetTemplateParameters(self)

    def SetOriginTemplatedControl(self, templateFunction):
        return _nsimcli.ControlFunction_SetOriginTemplatedControl(self, templateFunction)

    def SetEndOfControlLineNumber(self, lineNumber):
        return _nsimcli.ControlFunction_SetEndOfControlLineNumber(self, lineNumber)

    def GetEndOfControlLineNumber(self):
        return _nsimcli.ControlFunction_GetEndOfControlLineNumber(self)

    def GetEngineInfo(self):
        return _nsimcli.ControlFunction_GetEngineInfo(self)

    def SetMacroId(self, macroId, logger):
        return _nsimcli.ControlFunction_SetMacroId(self, macroId, logger)

    def GetMacroId(self):
        return _nsimcli.ControlFunction_GetMacroId(self)

    def GetFullMacroId(self):
        return _nsimcli.ControlFunction_GetFullMacroId(self)

    def GetFullMacroIdBV(self):
        return _nsimcli.ControlFunction_GetFullMacroIdBV(self)

    def GetFullRecycleMacroId(self):
        return _nsimcli.ControlFunction_GetFullRecycleMacroId(self)

    def GetRecycleMacroName(self):
        return _nsimcli.ControlFunction_GetRecycleMacroName(self)

    def IsMacroRecyclable(self):
        return _nsimcli.ControlFunction_IsMacroRecyclable(self)

    def GetFullRecycleMacroIdBV(self):
        return _nsimcli.ControlFunction_GetFullRecycleMacroIdBV(self)

    def CalledFromOtherControl(self, otherControl):
        return _nsimcli.ControlFunction_CalledFromOtherControl(self, otherControl)

    def GetCallingControls(self):
        return _nsimcli.ControlFunction_GetCallingControls(self)

    def SetTableThisControlIsCompoundControlOf(self, compoundTable):
        return _nsimcli.ControlFunction_SetTableThisControlIsCompoundControlOf(self, compoundTable)

    def GetTableThisControlIsCompoundControlOf(self):
        return _nsimcli.ControlFunction_GetTableThisControlIsCompoundControlOf(self)

    def GetCallingMacros(self, ret):
        return _nsimcli.ControlFunction_GetCallingMacros(self, ret)

    def GetContextToSetOfEnginesMapUsedAt(self, ret):
        return _nsimcli.ControlFunction_GetContextToSetOfEnginesMapUsedAt(self, ret)

    def AddContext(self, contextName):
        return _nsimcli.ControlFunction_AddContext(self, contextName)

    def SetEngine(self, engine):
        return _nsimcli.ControlFunction_SetEngine(self, engine)

    def SetSynchronizationName(self, synchronizationName):
        return _nsimcli.ControlFunction_SetSynchronizationName(self, synchronizationName)

    def GetSynchronizationName(self):
        return _nsimcli.ControlFunction_GetSynchronizationName(self)

    def AddUdkCalculatedFieldsAndMarkAsUdkMacro(self, keySizeType, tableCalculatedFields, parsedItemsContainer, udkTableId):
        return _nsimcli.ControlFunction_AddUdkCalculatedFieldsAndMarkAsUdkMacro(self, keySizeType, tableCalculatedFields, parsedItemsContainer, udkTableId)

    def IsUdkMacro(self):
        return _nsimcli.ControlFunction_IsUdkMacro(self)

    def VisitDirectAndIndirectCallers(self, *args):
        return _nsimcli.ControlFunction_VisitDirectAndIndirectCallers(self, *args)

    def GetFullMacroIdWidth(self):
        return _nsimcli.ControlFunction_GetFullMacroIdWidth(self)
    __swig_destroy__ = _nsimcli.delete_ControlFunction
    __del__ = lambda self: None
ControlFunction_swigregister = _nsimcli.ControlFunction_swigregister
ControlFunction_swigregister(ControlFunction)

class NPLContext(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NPLContext, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NPLContext, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name):
        this = _nsimcli.new_NPLContext(fileName, lineNumber, comment, name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetContextIndex(self, contextIndex):
        return _nsimcli.NPLContext_SetContextIndex(self, contextIndex)

    def GetContextPlacement(self):
        return _nsimcli.NPLContext_GetContextPlacement(self)

    def SetContextPlacement(self, contextPlacement):
        return _nsimcli.NPLContext_SetContextPlacement(self, contextPlacement)

    def AddMacro(self, macro):
        return _nsimcli.NPLContext_AddMacro(self, macro)

    def AddEneMacro(self, macro):
        return _nsimcli.NPLContext_AddEneMacro(self, macro)

    def GetContextId(self):
        return _nsimcli.NPLContext_GetContextId(self)
    __swig_destroy__ = _nsimcli.delete_NPLContext
    __del__ = lambda self: None
NPLContext_swigregister = _nsimcli.NPLContext_swigregister
NPLContext_swigregister(NPLContext)

class Type(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Type, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetWidthInBits(self):
        return _nsimcli.Type_GetWidthInBits(self)

    def get_enum_type(self):
        return _nsimcli.Type_get_enum_type(self)

    def get_header_type(self):
        return _nsimcli.Type_get_header_type(self)
    __swig_destroy__ = _nsimcli.delete_Type
    __del__ = lambda self: None
Type_swigregister = _nsimcli.Type_swigregister
Type_swigregister(Type)

class EnumType(Type):
    __swig_setmethods__ = {}
    for _s in [Type]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnumType, name, value)
    __swig_getmethods__ = {}
    for _s in [Type]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnumType, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name):
        this = _nsimcli.new_EnumType(fileName, lineNumber, comment, name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddOption(self, *args):
        return _nsimcli.EnumType_AddOption(self, *args)

    def SetValueOfLastOption(self, vs):
        return _nsimcli.EnumType_SetValueOfLastOption(self, vs)

    def GetOptionWithName(self, name):
        return _nsimcli.EnumType_GetOptionWithName(self, name)

    def CasesAreUnique(self):
        return _nsimcli.EnumType_CasesAreUnique(self)

    def GetCommonPrefix(self, withType):
        return _nsimcli.EnumType_GetCommonPrefix(self, withType)

    def GetOptions(self):
        return _nsimcli.EnumType_GetOptions(self)
    __swig_destroy__ = _nsimcli.delete_EnumType
    __del__ = lambda self: None
EnumType_swigregister = _nsimcli.EnumType_swigregister
EnumType_swigregister(EnumType)

class EnumOption(CommentableItem):
    __swig_setmethods__ = {}
    for _s in [CommentableItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnumOption, name, value)
    __swig_getmethods__ = {}
    for _s in [CommentableItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnumOption, name)
    __repr__ = _swig_repr
    __swig_setmethods__["optionName"] = _nsimcli.EnumOption_optionName_set
    __swig_getmethods__["optionName"] = _nsimcli.EnumOption_optionName_get
    if _newclass:
        optionName = _swig_property(_nsimcli.EnumOption_optionName_get, _nsimcli.EnumOption_optionName_set)
    __swig_setmethods__["value"] = _nsimcli.EnumOption_value_set
    __swig_getmethods__["value"] = _nsimcli.EnumOption_value_get
    if _newclass:
        value = _swig_property(_nsimcli.EnumOption_value_get, _nsimcli.EnumOption_value_set)
    __swig_setmethods__["valueStatement"] = _nsimcli.EnumOption_valueStatement_set
    __swig_getmethods__["valueStatement"] = _nsimcli.EnumOption_valueStatement_get
    if _newclass:
        valueStatement = _swig_property(_nsimcli.EnumOption_valueStatement_get, _nsimcli.EnumOption_valueStatement_set)

    def __init__(self, *args):
        this = _nsimcli.new_EnumOption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_EnumOption
    __del__ = lambda self: None
EnumOption_swigregister = _nsimcli.EnumOption_swigregister
EnumOption_swigregister(EnumOption)

class Field(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def CalcWidthInBits(self, logger):
        return _nsimcli.Field_CalcWidthInBits(self, logger)

    def GetWidthInBits(self):
        return _nsimcli.Field_GetWidthInBits(self)

    def GetType(self):
        return _nsimcli.Field_GetType(self)

    def GetTypeStr(self):
        return _nsimcli.Field_GetTypeStr(self)

    def IsPadding(self):
        return _nsimcli.Field_IsPadding(self)

    def FindFieldInInnerStructures(self, parsedItemsContainer, paths, currentPath, fieldName):
        return _nsimcli.Field_FindFieldInInnerStructures(self, parsedItemsContainer, paths, currentPath, fieldName)

    def MarkIsReferenced(self, markSubNodes):
        return _nsimcli.Field_MarkIsReferenced(self, markSubNodes)

    def SetUnionFieldAlignment(self, unionFieldAlignment):
        return _nsimcli.Field_SetUnionFieldAlignment(self, unionFieldAlignment)

    def GetUnionFieldAlignment(self):
        return _nsimcli.Field_GetUnionFieldAlignment(self)

    def CheckRecursiveHeaderTypeDefinition(self, recursionHeaderTypeStack, recursionFieldStack):
        return _nsimcli.Field_CheckRecursiveHeaderTypeDefinition(self, recursionHeaderTypeStack, recursionFieldStack)

    def GetUnionFieldAlignmentString(self):
        return _nsimcli.Field_GetUnionFieldAlignmentString(self)

    def get_typed_field(self):
        return _nsimcli.Field_get_typed_field(self)

    def get_type(self):
        return _nsimcli.Field_get_type(self)
    __swig_destroy__ = _nsimcli.delete_Field
    __del__ = lambda self: None
Field_swigregister = _nsimcli.Field_swigregister
Field_swigregister(Field)

PACKET_METADATA_NAME = _nsimcli.PACKET_METADATA_NAME
PACKET_TYPE_NAME = _nsimcli.PACKET_TYPE_NAME
PROTOCOL_LAYER_FIELD_NAME = _nsimcli.PROTOCOL_LAYER_FIELD_NAME
PROTOCOL_LAYER_TYPE_NAME = _nsimcli.PROTOCOL_LAYER_TYPE_NAME
HEADER_FIELD_NAME = _nsimcli.HEADER_FIELD_NAME
HEADER_TYPE_NAME = _nsimcli.HEADER_TYPE_NAME
PACKET_DATA_FIELD_NAME = _nsimcli.PACKET_DATA_FIELD_NAME
HEADER_INFO_FIELD_NAME = _nsimcli.HEADER_INFO_FIELD_NAME
HEADER_INFO_TYPE_NAME = _nsimcli.HEADER_INFO_TYPE_NAME
APP_FIELDS_FIELD_NAME = _nsimcli.APP_FIELDS_FIELD_NAME
LEABA_FIELDS_FIELD_NAME = _nsimcli.LEABA_FIELDS_FIELD_NAME
PADDING_FIELD_NAME = _nsimcli.PADDING_FIELD_NAME
PD_RX_DATA_FIELD_NAME = _nsimcli.PD_RX_DATA_FIELD_NAME
PD_RX_NW_DATA_FIELD_NAME = _nsimcli.PD_RX_NW_DATA_FIELD_NAME
PD_RX_FABRIC_DATA_FIELD_NAME = _nsimcli.PD_RX_FABRIC_DATA_FIELD_NAME
PD_TX_DATA_FIELD_NAME = _nsimcli.PD_TX_DATA_FIELD_NAME
PD_TX_NW_DATA_FIELD_NAME = _nsimcli.PD_TX_NW_DATA_FIELD_NAME
PD_TX_FABRIC_DATA_FIELD_NAME = _nsimcli.PD_TX_FABRIC_DATA_FIELD_NAME
PD_NPU_HOST_DATA_FIELD_NAME = _nsimcli.PD_NPU_HOST_DATA_FIELD_NAME
PD_NPU_HOST_LEARN_DATA_FIELD_NAME = _nsimcli.PD_NPU_HOST_LEARN_DATA_FIELD_NAME
PD_NPU_HOST_INJECT_DATA_FIELD_NAME = _nsimcli.PD_NPU_HOST_INJECT_DATA_FIELD_NAME
COMMON_RX_LEABA_FIELDS_HEADER_TYPE_NAME = _nsimcli.COMMON_RX_LEABA_FIELDS_HEADER_TYPE_NAME
COMMON_RX_LEABA_FIELDS_FIELD_NAME = _nsimcli.COMMON_RX_LEABA_FIELDS_FIELD_NAME
COMMON_TX_LEABA_FIELDS_HEADER_TYPE_NAME = _nsimcli.COMMON_TX_LEABA_FIELDS_HEADER_TYPE_NAME
COMMON_TX_LEABA_FIELDS_FIELD_NAME = _nsimcli.COMMON_TX_LEABA_FIELDS_FIELD_NAME
COMMON_TX_NPUH_LEABA_FIELDS_HEADER_TYPE_NAME = _nsimcli.COMMON_TX_NPUH_LEABA_FIELDS_HEADER_TYPE_NAME
COMMON_TX_NPUH_LEABA_FIELDS_FIELD_NAME = _nsimcli.COMMON_TX_NPUH_LEABA_FIELDS_FIELD_NAME
COMMON_NPUH_LEABA_FIELDS_HEADER_TYPE_NAME = _nsimcli.COMMON_NPUH_LEABA_FIELDS_HEADER_TYPE_NAME
COMMON_NPUH_LEABA_FIELDS_FIELD_NAME = _nsimcli.COMMON_NPUH_LEABA_FIELDS_FIELD_NAME
COMMON_LEABA_FIELDS_HEADER_TYPE_NAME = _nsimcli.COMMON_LEABA_FIELDS_HEADER_TYPE_NAME
COMMON_LEABA_FIELDS_FIELD_NAME = _nsimcli.COMMON_LEABA_FIELDS_FIELD_NAME
ENE_DATA_ON_NPU_HEADER_HEADER_TYPE_NAME = _nsimcli.ENE_DATA_ON_NPU_HEADER_HEADER_TYPE_NAME
ENE_DATA_FROM_NPU_HEADER_METADATA_NAME = _nsimcli.ENE_DATA_FROM_NPU_HEADER_METADATA_NAME
NPUH_LEABA_FIELDS_FIELD_NAME = _nsimcli.NPUH_LEABA_FIELDS_FIELD_NAME
class HeaderType(Type):
    __swig_setmethods__ = {}
    for _s in [Type]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeaderType, name, value)
    __swig_getmethods__ = {}
    for _s in [Type]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeaderType, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, isUnion, isAnonymous, isToForceExposureInAPI):
        this = _nsimcli.new_HeaderType(fileName, lineNumber, comment, name, isUnion, isAnonymous, isToForceExposureInAPI)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetAsUnion(self):
        return _nsimcli.HeaderType_SetAsUnion(self)

    def AddField(self, field):
        return _nsimcli.HeaderType_AddField(self, field)

    def AddFieldBefore(self, field, beforeFieldWithName):
        return _nsimcli.HeaderType_AddFieldBefore(self, field, beforeFieldWithName)

    def ReplaceField(self, newField, replacedField):
        return _nsimcli.HeaderType_ReplaceField(self, newField, replacedField)

    def FindField(self, fieldName):
        return _nsimcli.HeaderType_FindField(self, fieldName)

    def GetNextField(self, currentFieldName):
        return _nsimcli.HeaderType_GetNextField(self, currentFieldName)

    def GetPrevField(self, currentFieldName):
        return _nsimcli.HeaderType_GetPrevField(self, currentFieldName)

    def GetMsbOffsetOfField(self, field):
        return _nsimcli.HeaderType_GetMsbOffsetOfField(self, field)

    def SetExplicitWidth(self, widthInBits):
        return _nsimcli.HeaderType_SetExplicitWidth(self, widthInBits)

    def CalcWidthInBitsAndAddAutoPadding(self, logger):
        return _nsimcli.HeaderType_CalcWidthInBitsAndAddAutoPadding(self, logger)

    def IsUnion(self):
        return _nsimcli.HeaderType_IsUnion(self)

    def GetFields(self):
        return _nsimcli.HeaderType_GetFields(self)

    def HeaderFailureDump(self, logger, correctWidth):
        return _nsimcli.HeaderType_HeaderFailureDump(self, logger, correctWidth)

    def FindFieldInInnerStructures(self, parsedItemsContainer, paths, currentPath, fieldName):
        return _nsimcli.HeaderType_FindFieldInInnerStructures(self, parsedItemsContainer, paths, currentPath, fieldName)

    def MarkFieldsIsReferenced(self):
        return _nsimcli.HeaderType_MarkFieldsIsReferenced(self)

    def CheckFieldsAreReferenced(self, logger):
        return _nsimcli.HeaderType_CheckFieldsAreReferenced(self, logger)

    def ContainsUnions(self):
        return _nsimcli.HeaderType_ContainsUnions(self)

    def IsAnonymous(self):
        return _nsimcli.HeaderType_IsAnonymous(self)

    def IsToForceExposureInAPI(self):
        return _nsimcli.HeaderType_IsToForceExposureInAPI(self)

    def CheckRecursiveHeaderTypeDefinition(self, recursionHeaderTypeStack, recursionFieldStack):
        return _nsimcli.HeaderType_CheckRecursiveHeaderTypeDefinition(self, recursionHeaderTypeStack, recursionFieldStack)

    def SetHeaderAlignmnent(self, headerAlignment):
        return _nsimcli.HeaderType_SetHeaderAlignmnent(self, headerAlignment)

    def GetHeaderAlignment(self):
        return _nsimcli.HeaderType_GetHeaderAlignment(self)

    def GetTotalWidthOfMemberFields(self):
        return _nsimcli.HeaderType_GetTotalWidthOfMemberFields(self)

    def IsExplicitWidthSet(self):
        return _nsimcli.HeaderType_IsExplicitWidthSet(self)

    def IsOverloadUnion(self):
        return _nsimcli.HeaderType_IsOverloadUnion(self)

    def SetOverloadingField(self, targetHeaderTypeName, targetFieldName):
        return _nsimcli.HeaderType_SetOverloadingField(self, targetHeaderTypeName, targetFieldName)

    def ValidateAndOverloadField(self, parsedItemsContainer, logger):
        return _nsimcli.HeaderType_ValidateAndOverloadField(self, parsedItemsContainer, logger)

    def ReplaceTypeOfFieldPlaceholderWithTargetField(self, parsedItemsContainer, TypeOfField, logger):
        return _nsimcli.HeaderType_ReplaceTypeOfFieldPlaceholderWithTargetField(self, parsedItemsContainer, TypeOfField, logger)
    __swig_destroy__ = _nsimcli.delete_HeaderType
    __del__ = lambda self: None
HeaderType_swigregister = _nsimcli.HeaderType_swigregister
HeaderType_swigregister(HeaderType)

class TypedField(Field):
    __swig_setmethods__ = {}
    for _s in [Field]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedField, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypedField, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, typeName, logger):
        this = _nsimcli.new_TypedField(fileName, lineNumber, comment, name, typeName, logger)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ResolveTypeOf(self, parsedItemsContainer, logger, inScopeOfControlFunction):
        return _nsimcli.TypedField_ResolveTypeOf(self, parsedItemsContainer, logger, inScopeOfControlFunction)

    def TypeOfLocateTargetField(self, parsedItemsContainer, typeOf, logger):
        return _nsimcli.TypedField_TypeOfLocateTargetField(self, parsedItemsContainer, typeOf, logger)

    def TypeOfLocateTargetFieldInternalSearch(self, parsedItemsContainer, typeOf, fieldPath, currentHeaderField, logger):
        return _nsimcli.TypedField_TypeOfLocateTargetFieldInternalSearch(self, parsedItemsContainer, typeOf, fieldPath, currentHeaderField, logger)

    def GetEnumType(self):
        return _nsimcli.TypedField_GetEnumType(self)

    def GetHeaderType(self):
        return _nsimcli.TypedField_GetHeaderType(self)

    def GetTypeString(self):
        return _nsimcli.TypedField_GetTypeString(self)

    def IsTypeOf(self):
        return _nsimcli.TypedField_IsTypeOf(self)

    def IsTypeOfResolved(self):
        return _nsimcli.TypedField_IsTypeOfResolved(self)

    def MarkTypeOf(self, typeOf):
        return _nsimcli.TypedField_MarkTypeOf(self, typeOf)

    def GetTypeOfContent(self):
        return _nsimcli.TypedField_GetTypeOfContent(self)

    def GetTypeOfContentBasicWidth(self):
        return _nsimcli.TypedField_GetTypeOfContentBasicWidth(self)

    def IsArray(self):
        return _nsimcli.TypedField_IsArray(self)

    def GetArraySize(self):
        return _nsimcli.TypedField_GetArraySize(self)
    __swig_destroy__ = _nsimcli.delete_TypedField
    __del__ = lambda self: None
TypedField_swigregister = _nsimcli.TypedField_swigregister
TypedField_swigregister(TypedField)

class FieldRef(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldRef, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_FieldRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_FieldRef
    __del__ = lambda self: None

    def GetRefStringPart(self):
        return _nsimcli.FieldRef_GetRefStringPart(self)

    def GetRefStringPartNoIndex(self):
        return _nsimcli.FieldRef_GetRefStringPartNoIndex(self)

    def GetFullRefString(self):
        return _nsimcli.FieldRef_GetFullRefString(self)

    def GetRecursiveFullRefString(self):
        return _nsimcli.FieldRef_GetRecursiveFullRefString(self)

    def GetWidthInBits(self):
        return _nsimcli.FieldRef_GetWidthInBits(self)

    def GetWidthInBitsIgnoreRange(self):
        return _nsimcli.FieldRef_GetWidthInBitsIgnoreRange(self)

    def GetDumpString(self):
        return _nsimcli.FieldRef_GetDumpString(self)

    def GetNextFieldRef(self):
        return _nsimcli.FieldRef_GetNextFieldRef(self)

    def GetLastFieldRefInChain(self):
        return _nsimcli.FieldRef_GetLastFieldRefInChain(self)

    def IsRangeSpecified(self):
        return _nsimcli.FieldRef_IsRangeSpecified(self)

    def GetRangeHighBit(self):
        return _nsimcli.FieldRef_GetRangeHighBit(self)

    def GetRangeLowBit(self):
        return _nsimcli.FieldRef_GetRangeLowBit(self)

    def GetMsbOffsetInMetadata(self):
        return _nsimcli.FieldRef_GetMsbOffsetInMetadata(self)

    def MarkFieldIsReferenced(self):
        return _nsimcli.FieldRef_MarkFieldIsReferenced(self)

    def GetField(self):
        return _nsimcli.FieldRef_GetField(self)

    def GetType(self):
        return _nsimcli.FieldRef_GetType(self)

    def GetControlFunction(self):
        return _nsimcli.FieldRef_GetControlFunction(self)

    def GetEneControl(self):
        return _nsimcli.FieldRef_GetEneControl(self)

    def GetMetadata(self):
        return _nsimcli.FieldRef_GetMetadata(self)

    def GetHeaderType(self):
        return _nsimcli.FieldRef_GetHeaderType(self)

    def SetIsModified(self, logger):
        return _nsimcli.FieldRef_SetIsModified(self, logger)

    def IsPointingToHitBit(self):
        return _nsimcli.FieldRef_IsPointingToHitBit(self)

    def ContainsUnions(self):
        return _nsimcli.FieldRef_ContainsUnions(self)

    def IsUdk(self, logger, isRecursiveCall):
        return _nsimcli.FieldRef_IsUdk(self, logger, isRecursiveCall)

    def GetAbsoluteIndex(self):
        return _nsimcli.FieldRef_GetAbsoluteIndex(self)

    def IsUsingAbsoluteIndex(self):
        return _nsimcli.FieldRef_IsUsingAbsoluteIndex(self)
    if _newclass:
        ReplaceUserPlaceableFieldsPrefixWithTheirMapping = staticmethod(_nsimcli.FieldRef_ReplaceUserPlaceableFieldsPrefixWithTheirMapping)
    else:
        ReplaceUserPlaceableFieldsPrefixWithTheirMapping = _nsimcli.FieldRef_ReplaceUserPlaceableFieldsPrefixWithTheirMapping
    if _newclass:
        ExtractAliasIfUsed = staticmethod(_nsimcli.FieldRef_ExtractAliasIfUsed)
    else:
        ExtractAliasIfUsed = _nsimcli.FieldRef_ExtractAliasIfUsed
FieldRef_swigregister = _nsimcli.FieldRef_swigregister
FieldRef_swigregister(FieldRef)

def FieldRef_ReplaceUserPlaceableFieldsPrefixWithTheirMapping(parsedItemsContainer, FieldRefString, logger):
    return _nsimcli.FieldRef_ReplaceUserPlaceableFieldsPrefixWithTheirMapping(parsedItemsContainer, FieldRefString, logger)
FieldRef_ReplaceUserPlaceableFieldsPrefixWithTheirMapping = _nsimcli.FieldRef_ReplaceUserPlaceableFieldsPrefixWithTheirMapping

def FieldRef_ExtractAliasIfUsed(parsedItemsContainer, FieldRefString, logger):
    return _nsimcli.FieldRef_ExtractAliasIfUsed(parsedItemsContainer, FieldRefString, logger)
FieldRef_ExtractAliasIfUsed = _nsimcli.FieldRef_ExtractAliasIfUsed

class FieldMatch(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldMatch, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldMatch, name)
    __repr__ = _swig_repr
    EXACT = _nsimcli.FieldMatch_EXACT
    TERNARY = _nsimcli.FieldMatch_TERNARY
    LPM = _nsimcli.FieldMatch_LPM
    SIZED_CHUNK_START = _nsimcli.FieldMatch_SIZED_CHUNK_START
    SIZED_CHUNK_END = _nsimcli.FieldMatch_SIZED_CHUNK_END
    NUM_MATCH_TYPES = _nsimcli.FieldMatch_NUM_MATCH_TYPES

    def __init__(self, *args):
        this = _nsimcli.new_FieldMatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clone(self):
        return _nsimcli.FieldMatch_Clone(self)

    def SetWidthOfSizedChunk(self, width):
        return _nsimcli.FieldMatch_SetWidthOfSizedChunk(self, width)

    def GetWidthOfSizedChunk(self):
        return _nsimcli.FieldMatch_GetWidthOfSizedChunk(self)

    def ReplaceSizedChunkStartWithPadding(self, logger, fieldMatchType, width):
        return _nsimcli.FieldMatch_ReplaceSizedChunkStartWithPadding(self, logger, fieldMatchType, width)

    def GetWidthInBits(self):
        return _nsimcli.FieldMatch_GetWidthInBits(self)
    if _newclass:
        GetMatchTypeName = staticmethod(_nsimcli.FieldMatch_GetMatchTypeName)
    else:
        GetMatchTypeName = _nsimcli.FieldMatch_GetMatchTypeName

    def GetFieldRef(self):
        return _nsimcli.FieldMatch_GetFieldRef(self)

    def GetDeepestFieldRef(self):
        return _nsimcli.FieldMatch_GetDeepestFieldRef(self)

    def GetValue(self):
        return _nsimcli.FieldMatch_GetValue(self)

    def GetFieldRefForApi(self):
        return _nsimcli.FieldMatch_GetFieldRefForApi(self)

    def GetDeepestFieldRefForApi(self):
        return _nsimcli.FieldMatch_GetDeepestFieldRefForApi(self)

    def GetValueForApi(self):
        return _nsimcli.FieldMatch_GetValueForApi(self)

    def SetValueForApi(self, *args):
        return _nsimcli.FieldMatch_SetValueForApi(self, *args)

    def GetMatchType(self):
        return _nsimcli.FieldMatch_GetMatchType(self)

    def GetAlias(self):
        return _nsimcli.FieldMatch_GetAlias(self)

    def UnmarkIsLastInGroup(self):
        return _nsimcli.FieldMatch_UnmarkIsLastInGroup(self)

    def MarkIsLastInGroup(self):
        return _nsimcli.FieldMatch_MarkIsLastInGroup(self)

    def MarkInGroup(self):
        return _nsimcli.FieldMatch_MarkInGroup(self)

    def IsInGroup(self):
        return _nsimcli.FieldMatch_IsInGroup(self)

    def IsLastInGroup(self):
        return _nsimcli.FieldMatch_IsLastInGroup(self)

    def IsUdk(self):
        return _nsimcli.FieldMatch_IsUdk(self)

    def SetSeparatesAPIs(self, value):
        return _nsimcli.FieldMatch_SetSeparatesAPIs(self, value)

    def GetSeparatesAPIs(self):
        return _nsimcli.FieldMatch_GetSeparatesAPIs(self)

    def AddAttribute(self, name):
        return _nsimcli.FieldMatch_AddAttribute(self, name)

    def AddAttributeArg(self, argStr):
        return _nsimcli.FieldMatch_AddAttributeArg(self, argStr)

    def CheckFieldMatchAttributes(self, logger):
        return _nsimcli.FieldMatch_CheckFieldMatchAttributes(self, logger)

    def GetAttributes(self):
        return _nsimcli.FieldMatch_GetAttributes(self)
    __swig_destroy__ = _nsimcli.delete_FieldMatch
    __del__ = lambda self: None
FieldMatch_swigregister = _nsimcli.FieldMatch_swigregister
FieldMatch_swigregister(FieldMatch)

def FieldMatch_GetMatchTypeName(matchType):
    return _nsimcli.FieldMatch_GetMatchTypeName(matchType)
FieldMatch_GetMatchTypeName = _nsimcli.FieldMatch_GetMatchTypeName

class Attribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Attribute, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _nsimcli.Attribute_name_set
    __swig_getmethods__["name"] = _nsimcli.Attribute_name_get
    if _newclass:
        name = _swig_property(_nsimcli.Attribute_name_get, _nsimcli.Attribute_name_set)
    __swig_setmethods__["argumentStrs"] = _nsimcli.Attribute_argumentStrs_set
    __swig_getmethods__["argumentStrs"] = _nsimcli.Attribute_argumentStrs_get
    if _newclass:
        argumentStrs = _swig_property(_nsimcli.Attribute_argumentStrs_get, _nsimcli.Attribute_argumentStrs_set)

    def __init__(self):
        this = _nsimcli.new_Attribute()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_Attribute
    __del__ = lambda self: None
Attribute_swigregister = _nsimcli.Attribute_swigregister
Attribute_swigregister(Attribute)

class Table(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    __repr__ = _swig_repr
    TableUsedInNotUsed = _nsimcli.Table_TableUsedInNotUsed
    TableUsedInEne = _nsimcli.Table_TableUsedInEne
    TableUsedInNpEngine = _nsimcli.Table_TableUsedInNpEngine

    def __init__(self, fileName, lineNumber, comment, name, isImplicit, compoundTableControlName, compoundInstanceName, isLeabaDefined):
        this = _nsimcli.new_Table(fileName, lineNumber, comment, name, isImplicit, compoundTableControlName, compoundInstanceName, isLeabaDefined)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddFieldMatch(self, fileName, lineNumber, comment, refString, matchTypeStr, alias):
        return _nsimcli.Table_AddFieldMatch(self, fileName, lineNumber, comment, refString, matchTypeStr, alias)

    def AddValueFromVariableFieldMatch(self, fileName, lineNumber, comment, refString, matchTypeStr, value):
        return _nsimcli.Table_AddValueFromVariableFieldMatch(self, fileName, lineNumber, comment, refString, matchTypeStr, value)

    def AddFieldMatchAttribute(self, name):
        return _nsimcli.Table_AddFieldMatchAttribute(self, name)

    def AddFieldMatchAttributeArg(self, argStr):
        return _nsimcli.Table_AddFieldMatchAttributeArg(self, argStr)

    def StartSizedChunkInKey(self, fileName, lineNumber, comment):
        return _nsimcli.Table_StartSizedChunkInKey(self, fileName, lineNumber, comment)

    def EndSizedChunkInKey(self, fileName, lineNumber, comment, chunkSize):
        return _nsimcli.Table_EndSizedChunkInKey(self, fileName, lineNumber, comment, chunkSize)

    def AddDummyFieldMatchForUdkApi(self, refString, matchTypeStr, alias):
        return _nsimcli.Table_AddDummyFieldMatchForUdkApi(self, refString, matchTypeStr, alias)

    def AddValueFieldMatch(self, fileName, lineNumber, comment, valueStr, matchTypeStr, alias):
        return _nsimcli.Table_AddValueFieldMatch(self, fileName, lineNumber, comment, valueStr, matchTypeStr, alias)

    def AddValueFieldGroup(self):
        return _nsimcli.Table_AddValueFieldGroup(self)

    def AddReadsOption(self, fileName, lineNumber, comment, optionStr, isValue, logger):
        return _nsimcli.Table_AddReadsOption(self, fileName, lineNumber, comment, optionStr, isValue, logger)

    def AddActionRef(self, fileName, lineNumber, comment, name):
        return _nsimcli.Table_AddActionRef(self, fileName, lineNumber, comment, name)

    def AddMissActionRef(self, fileName, lineNumber, comment, name):
        return _nsimcli.Table_AddMissActionRef(self, fileName, lineNumber, comment, name)

    def AddProperty(self, fileName, lineNumber, comment, name, value):
        return _nsimcli.Table_AddProperty(self, fileName, lineNumber, comment, name, value)

    def AddDefaultActionStatement(self, das):
        return _nsimcli.Table_AddDefaultActionStatement(self, das)

    def SetWritesFieldRef(self, fileName, lineNumber, comment, refString, alias):
        return _nsimcli.Table_SetWritesFieldRef(self, fileName, lineNumber, comment, refString, alias)

    def AddWritesHitFieldRef(self, fileName, lineNumber, comment, refString):
        return _nsimcli.Table_AddWritesHitFieldRef(self, fileName, lineNumber, comment, refString)

    def SetEnePushNumBytes(self, valueStr):
        return _nsimcli.Table_SetEnePushNumBytes(self, valueStr)

    def SetKeySelectorFieldRef(self, fileName, lineNumber, comment, refString):
        return _nsimcli.Table_SetKeySelectorFieldRef(self, fileName, lineNumber, comment, refString)

    def SetTableInitializer(self, tableConfig):
        return _nsimcli.Table_SetTableInitializer(self, tableConfig)

    def CheckAllFieldsHaveAliases(self, requireKeyFieldAliases, requirePayloadFieldAliases, logger):
        return _nsimcli.Table_CheckAllFieldsHaveAliases(self, requireKeyFieldAliases, requirePayloadFieldAliases, logger)

    def HasActionRef(self, actionName):
        return _nsimcli.Table_HasActionRef(self, actionName)

    def GetReadsOptionsForApi(self):
        return _nsimcli.Table_GetReadsOptionsForApi(self)

    def GetActionRefs(self):
        return _nsimcli.Table_GetActionRefs(self)

    def GetActions(self):
        return _nsimcli.Table_GetActions(self)

    def GetProperties(self):
        return _nsimcli.Table_GetProperties(self)

    def GetProperty(self, name):
        return _nsimcli.Table_GetProperty(self, name)

    def HasProperty(self, name):
        return _nsimcli.Table_HasProperty(self, name)

    def GetWritesFieldRef(self):
        return _nsimcli.Table_GetWritesFieldRef(self)

    def GetWritesFieldRefAlias(self):
        return _nsimcli.Table_GetWritesFieldRefAlias(self)

    def GetKeySelectorFieldRef(self):
        return _nsimcli.Table_GetKeySelectorFieldRef(self)

    def GetEnePushNumBytes(self):
        return _nsimcli.Table_GetEnePushNumBytes(self)

    def GetPayloadWidth(self):
        return _nsimcli.Table_GetPayloadWidth(self)

    def GetPayloadWidthWithoutActionBits(self):
        return _nsimcli.Table_GetPayloadWidthWithoutActionBits(self)

    def GetKeyWidth(self):
        return _nsimcli.Table_GetKeyWidth(self)

    def GetKeyWidthForApi(self):
        return _nsimcli.Table_GetKeyWidthForApi(self)

    def GetKeyPartVecSize(self):
        return _nsimcli.Table_GetKeyPartVecSize(self)

    def GetKeyPartsWidth(self):
        return _nsimcli.Table_GetKeyPartsWidth(self)

    def GetKeyPartWidth(self, key):
        return _nsimcli.Table_GetKeyPartWidth(self, key)

    def GetMissActionRef(self):
        return _nsimcli.Table_GetMissActionRef(self)

    def GetDefaultActionStatement(self):
        return _nsimcli.Table_GetDefaultActionStatement(self)

    def GetDatabase(self):
        return _nsimcli.Table_GetDatabase(self)

    def GetOutgoingInterface(self):
        return _nsimcli.Table_GetOutgoingInterface(self)

    def HasOutgoingInterface(self):
        return _nsimcli.Table_HasOutgoingInterface(self)

    def GetFirstIncomingInterface(self):
        return _nsimcli.Table_GetFirstIncomingInterface(self)

    def GetTableType(self):
        return _nsimcli.Table_GetTableType(self)

    def GetTableInitializer(self):
        return _nsimcli.Table_GetTableInitializer(self)

    def HasHitIndication(self):
        return _nsimcli.Table_HasHitIndication(self)

    def IsOffsetCalculationTable(self):
        return _nsimcli.Table_IsOffsetCalculationTable(self)

    def IsMaskFieldTable(self):
        return _nsimcli.Table_IsMaskFieldTable(self)

    def IsWaivingSourceValidityCheck(self):
        return _nsimcli.Table_IsWaivingSourceValidityCheck(self)

    def IsWaivingActionSourcesValidityCheck(self):
        return _nsimcli.Table_IsWaivingActionSourcesValidityCheck(self)

    def IsCompoundTable(self):
        return _nsimcli.Table_IsCompoundTable(self)

    def IsPackTable(self):
        return _nsimcli.Table_IsPackTable(self)

    def ContainGroupedFields(self):
        return _nsimcli.Table_ContainGroupedFields(self)

    def GetCompoundTableControlFunction(self):
        return _nsimcli.Table_GetCompoundTableControlFunction(self)

    def GetOffsetCalculatedFieldRefs(self):
        return _nsimcli.Table_GetOffsetCalculatedFieldRefs(self)

    def GetUserDefinedLogicalTableId(self):
        return _nsimcli.Table_GetUserDefinedLogicalTableId(self)

    def GetUpdateEntryIfTrue(self):
        return _nsimcli.Table_GetUpdateEntryIfTrue(self)

    def GetUpdateEntrySrc(self):
        return _nsimcli.Table_GetUpdateEntrySrc(self)

    def HasSizeOption(self):
        return _nsimcli.Table_HasSizeOption(self)

    def GetSizeOption(self):
        return _nsimcli.Table_GetSizeOption(self)

    def AppliedAtControl(self, controlFunction, parsedItemsContainer):
        return _nsimcli.Table_AppliedAtControl(self, controlFunction, parsedItemsContainer)

    def GetCallingMacros(self, ret):
        return _nsimcli.Table_GetCallingMacros(self, ret)

    def GetContextToSetOfEnginesMapUsedAt(self, ret):
        return _nsimcli.Table_GetContextToSetOfEnginesMapUsedAt(self, ret)

    def GetTableUsedIn(self):
        return _nsimcli.Table_GetTableUsedIn(self)

    def GetTableUsedInString(self):
        return _nsimcli.Table_GetTableUsedInString(self)

    def SetTableUsedIn(self, usedIn):
        return _nsimcli.Table_SetTableUsedIn(self, usedIn)

    def IsUdkTable(self):
        return _nsimcli.Table_IsUdkTable(self)

    def GetWidthOfConstPartOfKey(self):
        return _nsimcli.Table_GetWidthOfConstPartOfKey(self)

    def GetUdkTableId(self):
        return _nsimcli.Table_GetUdkTableId(self)

    def ClearTableContentsAndRemoveFromParsedItems(self, parsedItemsContainer):
        return _nsimcli.Table_ClearTableContentsAndRemoveFromParsedItems(self, parsedItemsContainer)

    def IsMultiResultPartsTable(self):
        return _nsimcli.Table_IsMultiResultPartsTable(self)

    def GetResultPartsSizesForCompoundTables(self):
        return _nsimcli.Table_GetResultPartsSizesForCompoundTables(self)

    def GetWriteHitFieldRefs(self):
        return _nsimcli.Table_GetWriteHitFieldRefs(self)

    def ConnectPackApplyTableToUdkApplyTable(self, logger):
        return _nsimcli.Table_ConnectPackApplyTableToUdkApplyTable(self, logger)

    def AddUdkCaculatedFieldsAndMarkUdkMacroRecursively(self, parsedItemsContainer, control):
        return _nsimcli.Table_AddUdkCaculatedFieldsAndMarkUdkMacroRecursively(self, parsedItemsContainer, control)

    def GetCalculatedFieldsPerKeyPart(self):
        return _nsimcli.Table_GetCalculatedFieldsPerKeyPart(self)

    def SetUdkTableIdForPackTable(self, innerTable, logger):
        return _nsimcli.Table_SetUdkTableIdForPackTable(self, innerTable, logger)

    def IsLeabaDefined(self):
        return _nsimcli.Table_IsLeabaDefined(self)

    def GetAllAccessingInterfacePaths(self):
        return _nsimcli.Table_GetAllAccessingInterfacePaths(self)

    def GetAllAccessingContexts(self):
        return _nsimcli.Table_GetAllAccessingContexts(self)
    if _newclass:
        MangledNameForCompound = staticmethod(_nsimcli.Table_MangledNameForCompound)
    else:
        MangledNameForCompound = _nsimcli.Table_MangledNameForCompound

    def GetCompoundInstance(self, parsedItemsContainer, logger):
        return _nsimcli.Table_GetCompoundInstance(self, parsedItemsContainer, logger)

    def GetCompoundInstanceName(self):
        return _nsimcli.Table_GetCompoundInstanceName(self)

    def GetUnmangledName(self):
        return _nsimcli.Table_GetUnmangledName(self)

    def UnmangleNameAndDropModifiers(self, items):
        return _nsimcli.Table_UnmangleNameAndDropModifiers(self, items)

    def CanUnifyWithTable(self, other, logger):
        return _nsimcli.Table_CanUnifyWithTable(self, other, logger)

    def SetUnifiedParent(self, v):
        return _nsimcli.Table_SetUnifiedParent(self, v)

    def GetUnifiedParent(self):
        return _nsimcli.Table_GetUnifiedParent(self)

    def GetUnifiedChildren(self):
        return _nsimcli.Table_GetUnifiedChildren(self)

    def CheckForAndCreateMultiAPIChildren(self, logger):
        return _nsimcli.Table_CheckForAndCreateMultiAPIChildren(self, logger)

    def GetMultiAPIInfo(self):
        return _nsimcli.Table_GetMultiAPIInfo(self)

    def GetMultiAPIChildren(self):
        return _nsimcli.Table_GetMultiAPIChildren(self)

    def GetMultiAPIParent(self):
        return _nsimcli.Table_GetMultiAPIParent(self)

    def IsImplicitOrOtherwiseHasNoAPI(self):
        return _nsimcli.Table_IsImplicitOrOtherwiseHasNoAPI(self)

    def SetPackTableOfInnerUdkTable(self, packTable):
        return _nsimcli.Table_SetPackTableOfInnerUdkTable(self, packTable)

    def GetUdkPackTableOfInnerApply(self):
        return _nsimcli.Table_GetUdkPackTableOfInnerApply(self)

    def VisitDirectCallers(self, visitor):
        return _nsimcli.Table_VisitDirectCallers(self, visitor)

    def VisitDirectAndIndirectCallers(self, *args):
        return _nsimcli.Table_VisitDirectAndIndirectCallers(self, *args)

    def get_key_selector(self):
        return _nsimcli.Table_get_key_selector(self)

    def get_actions(self):
        return _nsimcli.Table_get_actions(self)

    def get_reads_options(self):
        return _nsimcli.Table_get_reads_options(self)

    def get_logical_table_id_width(self):
        return _nsimcli.Table_get_logical_table_id_width(self)

    def get_logical_table_id_value(self):
        return _nsimcli.Table_get_logical_table_id_value(self)
    __swig_destroy__ = _nsimcli.delete_Table
    __del__ = lambda self: None
Table_swigregister = _nsimcli.Table_swigregister
Table_swigregister(Table)

def Table_MangledNameForCompound(name, instanceName):
    return _nsimcli.Table_MangledNameForCompound(name, instanceName)
Table_MangledNameForCompound = _nsimcli.Table_MangledNameForCompound

class ReadsOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadsOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadsOption, name)
    __repr__ = _swig_repr

    def __init__(self, givenOptionStr, givenOptionValue):
        this = _nsimcli.new_ReadsOption(givenOptionStr, givenOptionValue)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["optionStr"] = _nsimcli.ReadsOption_optionStr_set
    __swig_getmethods__["optionStr"] = _nsimcli.ReadsOption_optionStr_get
    if _newclass:
        optionStr = _swig_property(_nsimcli.ReadsOption_optionStr_get, _nsimcli.ReadsOption_optionStr_set)
    __swig_setmethods__["optionValue"] = _nsimcli.ReadsOption_optionValue_set
    __swig_getmethods__["optionValue"] = _nsimcli.ReadsOption_optionValue_get
    if _newclass:
        optionValue = _swig_property(_nsimcli.ReadsOption_optionValue_get, _nsimcli.ReadsOption_optionValue_set)
    __swig_setmethods__["fieldMatches"] = _nsimcli.ReadsOption_fieldMatches_set
    __swig_getmethods__["fieldMatches"] = _nsimcli.ReadsOption_fieldMatches_get
    if _newclass:
        fieldMatches = _swig_property(_nsimcli.ReadsOption_fieldMatches_get, _nsimcli.ReadsOption_fieldMatches_set)
    __swig_destroy__ = _nsimcli.delete_ReadsOption
    __del__ = lambda self: None
ReadsOption_swigregister = _nsimcli.ReadsOption_swigregister
ReadsOption_swigregister(ReadsOption)

class MultiAPIInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiAPIInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiAPIInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["match"] = _nsimcli.MultiAPIInfo_match_set
    __swig_getmethods__["match"] = _nsimcli.MultiAPIInfo_match_get
    if _newclass:
        match = _swig_property(_nsimcli.MultiAPIInfo_match_get, _nsimcli.MultiAPIInfo_match_set)
    __swig_setmethods__["type"] = _nsimcli.MultiAPIInfo_type_set
    __swig_getmethods__["type"] = _nsimcli.MultiAPIInfo_type_get
    if _newclass:
        type = _swig_property(_nsimcli.MultiAPIInfo_type_get, _nsimcli.MultiAPIInfo_type_set)
    __swig_setmethods__["range"] = _nsimcli.MultiAPIInfo_range_set
    __swig_getmethods__["range"] = _nsimcli.MultiAPIInfo_range_get
    if _newclass:
        range = _swig_property(_nsimcli.MultiAPIInfo_range_get, _nsimcli.MultiAPIInfo_range_set)

    def IsUsed(self):
        return _nsimcli.MultiAPIInfo_IsUsed(self)

    def __init__(self):
        this = _nsimcli.new_MultiAPIInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_MultiAPIInfo
    __del__ = lambda self: None
MultiAPIInfo_swigregister = _nsimcli.MultiAPIInfo_swigregister
MultiAPIInfo_swigregister(MultiAPIInfo)

class AccessingInterfaceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccessingInterfaceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccessingInterfaceInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _nsimcli.AccessingInterfaceInfo_name_set
    __swig_getmethods__["name"] = _nsimcli.AccessingInterfaceInfo_name_get
    if _newclass:
        name = _swig_property(_nsimcli.AccessingInterfaceInfo_name_get, _nsimcli.AccessingInterfaceInfo_name_set)
    __swig_setmethods__["parts"] = _nsimcli.AccessingInterfaceInfo_parts_set
    __swig_getmethods__["parts"] = _nsimcli.AccessingInterfaceInfo_parts_get
    if _newclass:
        parts = _swig_property(_nsimcli.AccessingInterfaceInfo_parts_get, _nsimcli.AccessingInterfaceInfo_parts_set)

    def GetIsValid(self):
        return _nsimcli.AccessingInterfaceInfo_GetIsValid(self)

    def __lt__(self, o):
        return _nsimcli.AccessingInterfaceInfo___lt__(self, o)

    def __init__(self):
        this = _nsimcli.new_AccessingInterfaceInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_AccessingInterfaceInfo
    __del__ = lambda self: None
AccessingInterfaceInfo_swigregister = _nsimcli.AccessingInterfaceInfo_swigregister
AccessingInterfaceInfo_swigregister(AccessingInterfaceInfo)

class AccessingInterfacePath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccessingInterfacePath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccessingInterfacePath, name)
    __repr__ = _swig_repr
    __swig_setmethods__["outgoing"] = _nsimcli.AccessingInterfacePath_outgoing_set
    __swig_getmethods__["outgoing"] = _nsimcli.AccessingInterfacePath_outgoing_get
    if _newclass:
        outgoing = _swig_property(_nsimcli.AccessingInterfacePath_outgoing_get, _nsimcli.AccessingInterfacePath_outgoing_set)
    __swig_setmethods__["firstIncoming"] = _nsimcli.AccessingInterfacePath_firstIncoming_set
    __swig_getmethods__["firstIncoming"] = _nsimcli.AccessingInterfacePath_firstIncoming_get
    if _newclass:
        firstIncoming = _swig_property(_nsimcli.AccessingInterfacePath_firstIncoming_get, _nsimcli.AccessingInterfacePath_firstIncoming_set)
    __swig_setmethods__["viaCompound"] = _nsimcli.AccessingInterfacePath_viaCompound_set
    __swig_getmethods__["viaCompound"] = _nsimcli.AccessingInterfacePath_viaCompound_get
    if _newclass:
        viaCompound = _swig_property(_nsimcli.AccessingInterfacePath_viaCompound_get, _nsimcli.AccessingInterfacePath_viaCompound_set)

    def GetIsValid(self):
        return _nsimcli.AccessingInterfacePath_GetIsValid(self)

    def __lt__(self, o):
        return _nsimcli.AccessingInterfacePath___lt__(self, o)

    def __init__(self):
        this = _nsimcli.new_AccessingInterfacePath()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_AccessingInterfacePath
    __del__ = lambda self: None
AccessingInterfacePath_swigregister = _nsimcli.AccessingInterfacePath_swigregister
AccessingInterfacePath_swigregister(AccessingInterfacePath)

class TableInitializerEntry(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableInitializerEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableInitializerEntry, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, parentTableInitializer, name):
        this = _nsimcli.new_TableInitializerEntry(fileName, lineNumber, comment, parentTableInitializer, name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddParam(self, paramName, value):
        return _nsimcli.TableInitializerEntry_AddParam(self, paramName, value)

    def GetParams(self):
        return _nsimcli.TableInitializerEntry_GetParams(self)
    __swig_destroy__ = _nsimcli.delete_TableInitializerEntry
    __del__ = lambda self: None
TableInitializerEntry_swigregister = _nsimcli.TableInitializerEntry_swigregister
TableInitializerEntry_swigregister(TableInitializerEntry)

class TableInitializer(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableInitializer, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TableInitializer, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name):
        this = _nsimcli.new_TableInitializer(fileName, lineNumber, comment, name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddEntry(self, entry):
        return _nsimcli.TableInitializer_AddEntry(self, entry)

    def GetTable(self):
        return _nsimcli.TableInitializer_GetTable(self)

    def GetEntries(self):
        return _nsimcli.TableInitializer_GetEntries(self)
    __swig_destroy__ = _nsimcli.delete_TableInitializer
    __del__ = lambda self: None
TableInitializer_swigregister = _nsimcli.TableInitializer_swigregister
TableInitializer_swigregister(TableInitializer)

class TableInitializerLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableInitializerLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableInitializerLine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Key"] = _nsimcli.TableInitializerLine_Key_set
    __swig_getmethods__["Key"] = _nsimcli.TableInitializerLine_Key_get
    if _newclass:
        Key = _swig_property(_nsimcli.TableInitializerLine_Key_get, _nsimcli.TableInitializerLine_Key_set)
    __swig_setmethods__["Mask"] = _nsimcli.TableInitializerLine_Mask_set
    __swig_getmethods__["Mask"] = _nsimcli.TableInitializerLine_Mask_get
    if _newclass:
        Mask = _swig_property(_nsimcli.TableInitializerLine_Mask_get, _nsimcli.TableInitializerLine_Mask_set)
    __swig_setmethods__["Value"] = _nsimcli.TableInitializerLine_Value_set
    __swig_getmethods__["Value"] = _nsimcli.TableInitializerLine_Value_get
    if _newclass:
        Value = _swig_property(_nsimcli.TableInitializerLine_Value_get, _nsimcli.TableInitializerLine_Value_set)

    def __init__(self):
        this = _nsimcli.new_TableInitializerLine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_TableInitializerLine
    __del__ = lambda self: None
TableInitializerLine_swigregister = _nsimcli.TableInitializerLine_swigregister
TableInitializerLine_swigregister(TableInitializerLine)

class Metadata(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metadata, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Metadata, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, type, isDefinedAsShared):
        this = _nsimcli.new_Metadata(fileName, lineNumber, comment, name, type, isDefinedAsShared)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PostParsingProcessingAndValidationSecondPass(self, parsedItemsContainer, logger, inScopeOfControlFunction):
        return _nsimcli.Metadata_PostParsingProcessingAndValidationSecondPass(self, parsedItemsContainer, logger, inScopeOfControlFunction)

    def GetHeaderType(self):
        return _nsimcli.Metadata_GetHeaderType(self)

    def GetTypeStr(self):
        return _nsimcli.Metadata_GetTypeStr(self)

    def GetWidthInBits(self):
        return _nsimcli.Metadata_GetWidthInBits(self)

    def MarkIsReferenced(self, markSubNodes):
        return _nsimcli.Metadata_MarkIsReferenced(self, markSubNodes)

    def IsDefinedAsShared(self):
        return _nsimcli.Metadata_IsDefinedAsShared(self)
    __swig_destroy__ = _nsimcli.delete_Metadata
    __del__ = lambda self: None
Metadata_swigregister = _nsimcli.Metadata_swigregister
Metadata_swigregister(Metadata)

class Alias(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Alias, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Alias, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, aliasOf):
        this = _nsimcli.new_Alias(fileName, lineNumber, comment, name, aliasOf)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetAliasOf(self):
        return _nsimcli.Alias_GetAliasOf(self)
    __swig_destroy__ = _nsimcli.delete_Alias
    __del__ = lambda self: None
Alias_swigregister = _nsimcli.Alias_swigregister
Alias_swigregister(Alias)

class ApplyTable(ControlStatement):
    __swig_setmethods__ = {}
    for _s in [ControlStatement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplyTable, name, value)
    __swig_getmethods__ = {}
    for _s in [ControlStatement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplyTable, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, tableName):
        this = _nsimcli.new_ApplyTable(fileName, lineNumber, comment, tableName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CloneParsedItem(self):
        return _nsimcli.ApplyTable_CloneParsedItem(self)

    def AddCase(self, fileName, lineNumber, comment, caseName, logger):
        return _nsimcli.ApplyTable_AddCase(self, fileName, lineNumber, comment, caseName, logger)

    def RemoveCase(self, caseName):
        return _nsimcli.ApplyTable_RemoveCase(self, caseName)

    def GetTableName(self):
        return _nsimcli.ApplyTable_GetTableName(self)

    def GetTable(self, *args):
        return _nsimcli.ApplyTable_GetTable(self, *args)

    def GetCases(self):
        return _nsimcli.ApplyTable_GetCases(self)
    __swig_destroy__ = _nsimcli.delete_ApplyTable
    __del__ = lambda self: None
ApplyTable_swigregister = _nsimcli.ApplyTable_swigregister
ApplyTable_swigregister(ApplyTable)

class CallControl(ControlStatement):
    __swig_setmethods__ = {}
    for _s in [ControlStatement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallControl, name, value)
    __swig_getmethods__ = {}
    for _s in [ControlStatement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallControl, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, controlName):
        this = _nsimcli.new_CallControl(fileName, lineNumber, comment, controlName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetControlFunctionName(self):
        return _nsimcli.CallControl_GetControlFunctionName(self)

    def GetControlFunction(self, *args):
        return _nsimcli.CallControl_GetControlFunction(self, *args)

    def GetAllAppliedTables(self):
        return _nsimcli.CallControl_GetAllAppliedTables(self)
    __swig_destroy__ = _nsimcli.delete_CallControl
    __del__ = lambda self: None
CallControl_swigregister = _nsimcli.CallControl_swigregister
CallControl_swigregister(CallControl)

class CallControlOrAction(ControlStatement):
    __swig_setmethods__ = {}
    for _s in [ControlStatement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallControlOrAction, name, value)
    __swig_getmethods__ = {}
    for _s in [ControlStatement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallControlOrAction, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name):
        this = _nsimcli.new_CallControlOrAction(fileName, lineNumber, comment, name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CloneParsedItem(self):
        return _nsimcli.CallControlOrAction_CloneParsedItem(self)

    def AddParamValueStatement(self, valueStatement):
        return _nsimcli.CallControlOrAction_AddParamValueStatement(self, valueStatement)

    def GetControlStatement(self, csc, parsedItemsContainer, logger):
        return _nsimcli.CallControlOrAction_GetControlStatement(self, csc, parsedItemsContainer, logger)

    def AddCallTemplateParameter(self, name, type):
        return _nsimcli.CallControlOrAction_AddCallTemplateParameter(self, name, type)

    def PreTemplateProcessingAndValidation(self, parsedItemsContainer, logger):
        return _nsimcli.CallControlOrAction_PreTemplateProcessingAndValidation(self, parsedItemsContainer, logger)

    def SpecializeTemplateCall(self, parsedItemsContainer, logger):
        return _nsimcli.CallControlOrAction_SpecializeTemplateCall(self, parsedItemsContainer, logger)

    def GetTemplateCallParamMap(self):
        return _nsimcli.CallControlOrAction_GetTemplateCallParamMap(self)
    __swig_destroy__ = _nsimcli.delete_CallControlOrAction
    __del__ = lambda self: None
CallControlOrAction_swigregister = _nsimcli.CallControlOrAction_swigregister
CallControlOrAction_swigregister(CallControlOrAction)

class Expression(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expression, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Expression, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_Expression
    __del__ = lambda self: None

    def CloneParsedItem(self):
        return _nsimcli.Expression_CloneParsedItem(self)

    def EvaluateTemplateExpression(self, parsedItemsContainer, callMap, logger):
        return _nsimcli.Expression_EvaluateTemplateExpression(self, parsedItemsContainer, callMap, logger)

    def ResolveTo(self, parsedItemsContainer, logger):
        return _nsimcli.Expression_ResolveTo(self, parsedItemsContainer, logger)

    def GetWidthInBits(self):
        return _nsimcli.Expression_GetWidthInBits(self)

    def GetMask(self):
        return _nsimcli.Expression_GetMask(self)

    def GetFieldRef(self):
        return _nsimcli.Expression_GetFieldRef(self)

    def GetConstValue(self):
        return _nsimcli.Expression_GetConstValue(self)

    def get_field_ref_expression(self):
        return _nsimcli.Expression_get_field_ref_expression(self)

    def get_operator_based_expression(self):
        return _nsimcli.Expression_get_operator_based_expression(self)

    def get_value_expression(self):
        return _nsimcli.Expression_get_value_expression(self)
Expression_swigregister = _nsimcli.Expression_swigregister
Expression_swigregister(Expression)

class BoolExpression(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoolExpression, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    BOOLEXP_FALSE = _nsimcli.BoolExpression_BOOLEXP_FALSE
    BOOLEXP_TRUE = _nsimcli.BoolExpression_BOOLEXP_TRUE
    BOOLEXP_UNKNOWN = _nsimcli.BoolExpression_BOOLEXP_UNKNOWN
    BoolExpressionType_LOGICAL = _nsimcli.BoolExpression_BoolExpressionType_LOGICAL
    BoolExpressionType_PREPROCESSOR_IS_DEFINED = _nsimcli.BoolExpression_BoolExpressionType_PREPROCESSOR_IS_DEFINED
    BoolExpressionType_REL = _nsimcli.BoolExpression_BoolExpressionType_REL
    BoolExpressionType_VALUE = _nsimcli.BoolExpression_BoolExpressionType_VALUE
    BoolExpressionType_IS_ALIAS_DEF = _nsimcli.BoolExpression_BoolExpressionType_IS_ALIAS_DEF
    __swig_destroy__ = _nsimcli.delete_BoolExpression
    __del__ = lambda self: None

    def CloneParsedItem(self):
        return _nsimcli.BoolExpression_CloneParsedItem(self)

    def EvaluateTemplateCondition(self, parsedItemsContainer, callMap, logger):
        return _nsimcli.BoolExpression_EvaluateTemplateCondition(self, parsedItemsContainer, callMap, logger)

    def EvaluateCondition(self, parsedItemsContainer, logger):
        return _nsimcli.BoolExpression_EvaluateCondition(self, parsedItemsContainer, logger)
    if _newclass:
        BooleanToBoolExpressionResult = staticmethod(_nsimcli.BoolExpression_BooleanToBoolExpressionResult)
    else:
        BooleanToBoolExpressionResult = _nsimcli.BoolExpression_BooleanToBoolExpressionResult
    if _newclass:
        EvaluateOperationResult = staticmethod(_nsimcli.BoolExpression_EvaluateOperationResult)
    else:
        EvaluateOperationResult = _nsimcli.BoolExpression_EvaluateOperationResult

    def GetBoolExpressionTypeAsString(self):
        return _nsimcli.BoolExpression_GetBoolExpressionTypeAsString(self)

    def GetBoolExpressionType(self):
        return _nsimcli.BoolExpression_GetBoolExpressionType(self)

    def get_logical_bool_expression(self):
        return _nsimcli.BoolExpression_get_logical_bool_expression(self)

    def get_rel_bool_expression(self):
        return _nsimcli.BoolExpression_get_rel_bool_expression(self)

    def get_value_bool_expression(self):
        return _nsimcli.BoolExpression_get_value_bool_expression(self)
BoolExpression_swigregister = _nsimcli.BoolExpression_swigregister
BoolExpression_swigregister(BoolExpression)

def BoolExpression_BooleanToBoolExpressionResult(boolean):
    return _nsimcli.BoolExpression_BooleanToBoolExpressionResult(boolean)
BoolExpression_BooleanToBoolExpressionResult = _nsimcli.BoolExpression_BooleanToBoolExpressionResult

def BoolExpression_EvaluateOperationResult(left, op, right):
    return _nsimcli.BoolExpression_EvaluateOperationResult(left, op, right)
BoolExpression_EvaluateOperationResult = _nsimcli.BoolExpression_EvaluateOperationResult

CONDITIONAL_STATEMENT_TYPE_BOOLEAN = _nsimcli.CONDITIONAL_STATEMENT_TYPE_BOOLEAN
CONDITIONAL_STATEMENT_TYPE_CONTEXT = _nsimcli.CONDITIONAL_STATEMENT_TYPE_CONTEXT
CONDITIONAL_STATEMENT_TYPE_DEVICE = _nsimcli.CONDITIONAL_STATEMENT_TYPE_DEVICE
CONDITIONAL_STATEMENT_TYPE_UNKNOWN = _nsimcli.CONDITIONAL_STATEMENT_TYPE_UNKNOWN
class ConditionalStatement(ControlStatement):
    __swig_setmethods__ = {}
    for _s in [ControlStatement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConditionalStatement, name, value)
    __swig_getmethods__ = {}
    for _s in [ControlStatement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConditionalStatement, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, isRegular):
        this = _nsimcli.new_ConditionalStatement(fileName, lineNumber, comment, isRegular)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CloneParsedItem(self):
        return _nsimcli.ConditionalStatement_CloneParsedItem(self)

    def SetBoolExpression(self, boolExpression):
        return _nsimcli.ConditionalStatement_SetBoolExpression(self, boolExpression)

    def GetBoolExpression(self, *args):
        return _nsimcli.ConditionalStatement_GetBoolExpression(self, *args)

    def GetThenContainer(self, *args):
        return _nsimcli.ConditionalStatement_GetThenContainer(self, *args)

    def GetElseContainer(self, *args):
        return _nsimcli.ConditionalStatement_GetElseContainer(self, *args)

    def AddDeviceToConditionalStatement(self, deviceName):
        return _nsimcli.ConditionalStatement_AddDeviceToConditionalStatement(self, deviceName)

    def RemoveDeviceFromConditionalStatement(self, deviceName):
        return _nsimcli.ConditionalStatement_RemoveDeviceFromConditionalStatement(self, deviceName)

    def AddContextToConditionalStatement(self, contextName):
        return _nsimcli.ConditionalStatement_AddContextToConditionalStatement(self, contextName)

    def RemoveContextFromConditionalStatement(self, contextName):
        return _nsimcli.ConditionalStatement_RemoveContextFromConditionalStatement(self, contextName)

    def IsInContext(self, contextName):
        return _nsimcli.ConditionalStatement_IsInContext(self, contextName)

    def IsInDevice(self, deviceName):
        return _nsimcli.ConditionalStatement_IsInDevice(self, deviceName)

    def GetType(self):
        return _nsimcli.ConditionalStatement_GetType(self)
    __swig_destroy__ = _nsimcli.delete_ConditionalStatement
    __del__ = lambda self: None
ConditionalStatement_swigregister = _nsimcli.ConditionalStatement_swigregister
ConditionalStatement_swigregister(ConditionalStatement)

class LogicalBoolExpression(BoolExpression):
    __swig_setmethods__ = {}
    for _s in [BoolExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogicalBoolExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogicalBoolExpression, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, left, right, op):
        this = _nsimcli.new_LogicalBoolExpression(fileName, lineNumber, comment, left, right, op)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_LogicalBoolExpression
    __del__ = lambda self: None

    def CloneParsedItem(self):
        return _nsimcli.LogicalBoolExpression_CloneParsedItem(self)

    def GetRightBoolExpression(self):
        return _nsimcli.LogicalBoolExpression_GetRightBoolExpression(self)

    def GetLeftBoolExpression(self):
        return _nsimcli.LogicalBoolExpression_GetLeftBoolExpression(self)

    def GetOperator(self):
        return _nsimcli.LogicalBoolExpression_GetOperator(self)
LogicalBoolExpression_swigregister = _nsimcli.LogicalBoolExpression_swigregister
LogicalBoolExpression_swigregister(LogicalBoolExpression)

class ValueExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValueExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ValueExpression, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_ValueExpression(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CloneParsedItem(self):
        return _nsimcli.ValueExpression_CloneParsedItem(self)

    def GetValueStr(self):
        return _nsimcli.ValueExpression_GetValueStr(self)
    __swig_destroy__ = _nsimcli.delete_ValueExpression
    __del__ = lambda self: None
ValueExpression_swigregister = _nsimcli.ValueExpression_swigregister
ValueExpression_swigregister(ValueExpression)

class RelBoolExpression(BoolExpression):
    __swig_setmethods__ = {}
    for _s in [BoolExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelBoolExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelBoolExpression, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, left, right, op, level):
        this = _nsimcli.new_RelBoolExpression(fileName, lineNumber, comment, left, right, op, level)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_RelBoolExpression
    __del__ = lambda self: None

    def CloneParsedItem(self):
        return _nsimcli.RelBoolExpression_CloneParsedItem(self)

    def GetRightExpression(self):
        return _nsimcli.RelBoolExpression_GetRightExpression(self)

    def GetLeftExpression(self):
        return _nsimcli.RelBoolExpression_GetLeftExpression(self)

    def GetOperator(self):
        return _nsimcli.RelBoolExpression_GetOperator(self)

    def GetLevel(self):
        return _nsimcli.RelBoolExpression_GetLevel(self)

    def CompareExpressionsIntBased(self, parsedItemsContainer, left, op, right, logger):
        return _nsimcli.RelBoolExpression_CompareExpressionsIntBased(self, parsedItemsContainer, left, op, right, logger)
RelBoolExpression_swigregister = _nsimcli.RelBoolExpression_swigregister
RelBoolExpression_swigregister(RelBoolExpression)

class ValueBoolExpression(BoolExpression):
    __swig_setmethods__ = {}
    for _s in [BoolExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValueBoolExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ValueBoolExpression, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, value):
        this = _nsimcli.new_ValueBoolExpression(fileName, lineNumber, comment, value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CloneParsedItem(self):
        return _nsimcli.ValueBoolExpression_CloneParsedItem(self)

    def GetValue(self):
        return _nsimcli.ValueBoolExpression_GetValue(self)
    __swig_destroy__ = _nsimcli.delete_ValueBoolExpression
    __del__ = lambda self: None
ValueBoolExpression_swigregister = _nsimcli.ValueBoolExpression_swigregister
ValueBoolExpression_swigregister(ValueBoolExpression)

class IsAliasDefBoolExpression(ValueBoolExpression):
    __swig_setmethods__ = {}
    for _s in [ValueBoolExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsAliasDefBoolExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [ValueBoolExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsAliasDefBoolExpression, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, content):
        this = _nsimcli.new_IsAliasDefBoolExpression(fileName, lineNumber, comment, content)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CloneParsedItem(self):
        return _nsimcli.IsAliasDefBoolExpression_CloneParsedItem(self)

    def GetContent(self):
        return _nsimcli.IsAliasDefBoolExpression_GetContent(self)
    __swig_destroy__ = _nsimcli.delete_IsAliasDefBoolExpression
    __del__ = lambda self: None
IsAliasDefBoolExpression_swigregister = _nsimcli.IsAliasDefBoolExpression_swigregister
IsAliasDefBoolExpression_swigregister(IsAliasDefBoolExpression)

class FieldRefExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldRefExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldRefExpression, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, fieldRefStr):
        this = _nsimcli.new_FieldRefExpression(fileName, lineNumber, comment, fieldRefStr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CloneParsedItem(self):
        return _nsimcli.FieldRefExpression_CloneParsedItem(self)
    __swig_destroy__ = _nsimcli.delete_FieldRefExpression
    __del__ = lambda self: None
FieldRefExpression_swigregister = _nsimcli.FieldRefExpression_swigregister
FieldRefExpression_swigregister(FieldRefExpression)

class OperatorBasedExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorBasedExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorBasedExpression, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, left, right, op):
        this = _nsimcli.new_OperatorBasedExpression(fileName, lineNumber, comment, left, right, op)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_OperatorBasedExpression
    __del__ = lambda self: None

    def CloneParsedItem(self):
        return _nsimcli.OperatorBasedExpression_CloneParsedItem(self)

    def GetLeftExpression(self):
        return _nsimcli.OperatorBasedExpression_GetLeftExpression(self)

    def GetRightExpression(self):
        return _nsimcli.OperatorBasedExpression_GetRightExpression(self)
OperatorBasedExpression_swigregister = _nsimcli.OperatorBasedExpression_swigregister
OperatorBasedExpression_swigregister(OperatorBasedExpression)

class CompoundDefinition(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompoundDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompoundDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, isCompoundEmbedableCode):
        this = _nsimcli.new_CompoundDefinition(fileName, lineNumber, comment, name, isCompoundEmbedableCode)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddControlBitParam(self, name, width):
        return _nsimcli.CompoundDefinition_AddControlBitParam(self, name, width)

    def AddTypeParam(self, name, width):
        return _nsimcli.CompoundDefinition_AddTypeParam(self, name, width)

    def AddTableParam(self, name):
        return _nsimcli.CompoundDefinition_AddTableParam(self, name)

    def AddLineToCompoundImplementation(self, line):
        return _nsimcli.CompoundDefinition_AddLineToCompoundImplementation(self, line)

    def GetControlBitsDefinitions(self):
        return _nsimcli.CompoundDefinition_GetControlBitsDefinitions(self)

    def GetTypesDefinitions(self):
        return _nsimcli.CompoundDefinition_GetTypesDefinitions(self)

    def GetTablesDefinitions(self):
        return _nsimcli.CompoundDefinition_GetTablesDefinitions(self)

    def GetCompoundBody(self):
        return _nsimcli.CompoundDefinition_GetCompoundBody(self)

    def IsCompoundEmbedableCode(self):
        return _nsimcli.CompoundDefinition_IsCompoundEmbedableCode(self)
    __swig_destroy__ = _nsimcli.delete_CompoundDefinition
    __del__ = lambda self: None
CompoundDefinition_swigregister = _nsimcli.CompoundDefinition_swigregister
CompoundDefinition_swigregister(CompoundDefinition)

class CompoundInstance(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompoundInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompoundInstance, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, compoundTypeName):
        this = _nsimcli.new_CompoundInstance(fileName, lineNumber, comment, name, compoundTypeName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_CompoundInstance
    __del__ = lambda self: None

    def StartNewTypeMapping(self, typeName, logger):
        return _nsimcli.CompoundInstance_StartNewTypeMapping(self, typeName, logger)

    def AddFieldToTypeMapping(self, fieldName, typeOrValue, isConst, logger, lineno):
        return _nsimcli.CompoundInstance_AddFieldToTypeMapping(self, fieldName, typeOrValue, isConst, logger, lineno)

    def AddFieldAttributeToTypeMapping(self, fieldName, logger):
        return _nsimcli.CompoundInstance_AddFieldAttributeToTypeMapping(self, fieldName, logger)

    def AddFieldAttributeArgToTypeMapping(self, attrArg, logger):
        return _nsimcli.CompoundInstance_AddFieldAttributeArgToTypeMapping(self, attrArg, logger)

    def EndTypeMapping(self, logger):
        return _nsimcli.CompoundInstance_EndTypeMapping(self, logger)

    def AddControlBitMapping(self, name, value, isParsedAsValue, logger):
        return _nsimcli.CompoundInstance_AddControlBitMapping(self, name, value, isParsedAsValue, logger)

    def StartNewTableMapping(self, tableName, logger):
        return _nsimcli.CompoundInstance_StartNewTableMapping(self, tableName, logger)

    def AddParamToTableMapping(self, name, value, logger):
        return _nsimcli.CompoundInstance_AddParamToTableMapping(self, name, value, logger)

    def EndTableMapping(self, logger):
        return _nsimcli.CompoundInstance_EndTableMapping(self, logger)

    def VerifyParamsAndInitializeCode(self, parsedItemsContainer, logger):
        return _nsimcli.CompoundInstance_VerifyParamsAndInitializeCode(self, parsedItemsContainer, logger)

    def DumpExpandedCompound(self, pathToWrite, logger):
        return _nsimcli.CompoundInstance_DumpExpandedCompound(self, pathToWrite, logger)

    def GetGeneratedCode(self):
        return _nsimcli.CompoundInstance_GetGeneratedCode(self)

    def SetInterfaceProperties(self, properties):
        return _nsimcli.CompoundInstance_SetInterfaceProperties(self, properties)

    def GetInterfaceProperties(self):
        return _nsimcli.CompoundInstance_GetInterfaceProperties(self)

    def SetLookupInterface(self, lookupInterface):
        return _nsimcli.CompoundInstance_SetLookupInterface(self, lookupInterface)

    def GetLookupInterface(self):
        return _nsimcli.CompoundInstance_GetLookupInterface(self)

    def GetHeaderForTypeParameter(self, name):
        return _nsimcli.CompoundInstance_GetHeaderForTypeParameter(self, name)

    def GetHeadersForTypeParameters(self):
        return _nsimcli.CompoundInstance_GetHeadersForTypeParameters(self)
CompoundInstance_swigregister = _nsimcli.CompoundInstance_swigregister
CompoundInstance_swigregister(CompoundInstance)

class LookupInterface(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LookupInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LookupInterface, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, compoundDefinedIn):
        this = _nsimcli.new_LookupInterface(fileName, lineNumber, comment, name, compoundDefinedIn)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_LookupInterface
    __del__ = lambda self: None

    def StartParsingInterface(self, isOutgoingBucket):
        return _nsimcli.LookupInterface_StartParsingInterface(self, isOutgoingBucket)

    def AddBucket(self, name, logger):
        return _nsimcli.LookupInterface_AddBucket(self, name, logger)

    def FinishParsingBucket(self):
        return _nsimcli.LookupInterface_FinishParsingBucket(self)

    def AddFieldToBucket(self, name, typeOrValue, isConst, lineno, logger):
        return _nsimcli.LookupInterface_AddFieldToBucket(self, name, typeOrValue, isConst, lineno, logger)

    def AddTypeParameterToBucket(self, name, logger, lineno):
        return _nsimcli.LookupInterface_AddTypeParameterToBucket(self, name, logger, lineno)

    def StartSizedChunk(self, logger, lineno):
        return _nsimcli.LookupInterface_StartSizedChunk(self, logger, lineno)

    def EndSizedChunk(self, width, logger, lineno):
        return _nsimcli.LookupInterface_EndSizedChunk(self, width, logger, lineno)

    def AddParamToBucket(self, name, value, logger, lineno):
        return _nsimcli.LookupInterface_AddParamToBucket(self, name, value, logger, lineno)

    def VerifyParamsAndGenerateCode(self, parsedItemsContainer, logger):
        return _nsimcli.LookupInterface_VerifyParamsAndGenerateCode(self, parsedItemsContainer, logger)

    def DumpGeneratedCode(self, pathToWrite, logger):
        return _nsimcli.LookupInterface_DumpGeneratedCode(self, pathToWrite, logger)

    def GetGeneratedCode(self):
        return _nsimcli.LookupInterface_GetGeneratedCode(self)

    def SetProperties(self, properties):
        return _nsimcli.LookupInterface_SetProperties(self, properties)

    def GetIncommingBucketsResultMetadatas(self):
        return _nsimcli.LookupInterface_GetIncommingBucketsResultMetadatas(self)
LookupInterface_swigregister = _nsimcli.LookupInterface_swigregister
LookupInterface_swigregister(LookupInterface)

class EneStatement(Statement):
    __swig_setmethods__ = {}
    for _s in [Statement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EneStatement, name, value)
    __swig_getmethods__ = {}
    for _s in [Statement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EneStatement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    EneStatementType_ENE_LABEL = _nsimcli.EneStatement_EneStatementType_ENE_LABEL
    EneStatementType_ENE_ACTION = _nsimcli.EneStatement_EneStatementType_ENE_ACTION
    EneStatementType_ENE_IF = _nsimcli.EneStatement_EneStatementType_ENE_IF

    def GetEneStatementType(self):
        return _nsimcli.EneStatement_GetEneStatementType(self)

    def GetEneStatementTypeAsString(self):
        return _nsimcli.EneStatement_GetEneStatementTypeAsString(self)
    __swig_destroy__ = _nsimcli.delete_EneStatement
    __del__ = lambda self: None
EneStatement_swigregister = _nsimcli.EneStatement_swigregister
EneStatement_swigregister(EneStatement)

class EneStatementContainer(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EneStatementContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EneStatementContainer, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, control):
        this = _nsimcli.new_EneStatementContainer(fileName, lineNumber, comment, name, control)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddEneStatement(self, eneStatement):
        return _nsimcli.EneStatementContainer_AddEneStatement(self, eneStatement)

    def GetEneStatements(self):
        return _nsimcli.EneStatementContainer_GetEneStatements(self)

    def GetControl(self):
        return _nsimcli.EneStatementContainer_GetControl(self)

    def DeleteAllEneStatements(self, parsedItemsContainer):
        return _nsimcli.EneStatementContainer_DeleteAllEneStatements(self, parsedItemsContainer)

    def get_ene_statements(self):
        return _nsimcli.EneStatementContainer_get_ene_statements(self)

    def get_ene_jump_field_ref_to_enum_option_map(self):
        return _nsimcli.EneStatementContainer_get_ene_jump_field_ref_to_enum_option_map(self)
    __swig_destroy__ = _nsimcli.delete_EneStatementContainer
    __del__ = lambda self: None
EneStatementContainer_swigregister = _nsimcli.EneStatementContainer_swigregister
EneStatementContainer_swigregister(EneStatementContainer)

ENE_IF_STATEMENT_TYPE_BOOLEAN = _nsimcli.ENE_IF_STATEMENT_TYPE_BOOLEAN
ENE_IF_STATEMENT_TYPE_CONTEXT = _nsimcli.ENE_IF_STATEMENT_TYPE_CONTEXT
ENE_IF_STATEMENT_TYPE_DEVICE = _nsimcli.ENE_IF_STATEMENT_TYPE_DEVICE
ENE_IF_STATEMENT_TYPE_UNKNOWN = _nsimcli.ENE_IF_STATEMENT_TYPE_UNKNOWN
class EneIfStatement(EneStatement):
    __swig_setmethods__ = {}
    for _s in [EneStatement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EneIfStatement, name, value)
    __swig_getmethods__ = {}
    for _s in [EneStatement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EneIfStatement, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, name, logger, isIfInContext):
        this = _nsimcli.new_EneIfStatement(fileName, lineNumber, comment, name, logger, isIfInContext)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetThenContainer(self, *args):
        return _nsimcli.EneIfStatement_GetThenContainer(self, *args)

    def GetElseContainer(self, *args):
        return _nsimcli.EneIfStatement_GetElseContainer(self, *args)

    def GetBoolExpression(self):
        return _nsimcli.EneIfStatement_GetBoolExpression(self)

    def SetBoolExpression(self, boolExpression):
        return _nsimcli.EneIfStatement_SetBoolExpression(self, boolExpression)

    def AddContextToEneIfStatement(self, contextName):
        return _nsimcli.EneIfStatement_AddContextToEneIfStatement(self, contextName)

    def RemoveContextFromEneIfStatement(self, contextName):
        return _nsimcli.EneIfStatement_RemoveContextFromEneIfStatement(self, contextName)

    def AddDeviceToEneIfStatement(self, deviceName):
        return _nsimcli.EneIfStatement_AddDeviceToEneIfStatement(self, deviceName)

    def RemoveDeviceFromEneIfStatement(self, deviceName):
        return _nsimcli.EneIfStatement_RemoveDeviceFromEneIfStatement(self, deviceName)

    def IsInContext(self, contextName):
        return _nsimcli.EneIfStatement_IsInContext(self, contextName)

    def IsInDevice(self, deviceName):
        return _nsimcli.EneIfStatement_IsInDevice(self, deviceName)

    def GetType(self):
        return _nsimcli.EneIfStatement_GetType(self)

    def IsIfInContext(self):
        return _nsimcli.EneIfStatement_IsIfInContext(self)

    def GetEneIfStatementTypeAsString(self):
        return _nsimcli.EneIfStatement_GetEneIfStatementTypeAsString(self)
    __swig_destroy__ = _nsimcli.delete_EneIfStatement
    __del__ = lambda self: None
EneIfStatement_swigregister = _nsimcli.EneIfStatement_swigregister
EneIfStatement_swigregister(EneIfStatement)

ENE_NOP_MACRO_NAME = _nsimcli.ENE_NOP_MACRO_NAME
class EneControl(ParsedItem):
    __swig_setmethods__ = {}
    for _s in [ParsedItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EneControl, name, value)
    __swig_getmethods__ = {}
    for _s in [ParsedItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EneControl, name)
    __repr__ = _swig_repr

    def __init__(self, fileName, lineNumber, comment, controlName):
        this = _nsimcli.new_EneControl(fileName, lineNumber, comment, controlName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddContext(self, contextName):
        return _nsimcli.EneControl_AddContext(self, contextName)

    def GetContextsByName(self):
        return _nsimcli.EneControl_GetContextsByName(self)

    def GetContextNames(self):
        return _nsimcli.EneControl_GetContextNames(self)

    def GetControlName(self):
        return _nsimcli.EneControl_GetControlName(self)

    def GetEneStatementContainer(self, *args):
        return _nsimcli.EneControl_GetEneStatementContainer(self, *args)

    def SetEndOfEneControlLineNumber(self, lineNumber):
        return _nsimcli.EneControl_SetEndOfEneControlLineNumber(self, lineNumber)

    def GetEndOfEneControlLineNumber(self):
        return _nsimcli.EneControl_GetEndOfEneControlLineNumber(self)

    def SetMacroId(self, macroId, idFieldWidth):
        return _nsimcli.EneControl_SetMacroId(self, macroId, idFieldWidth)

    def GetMacroId(self):
        return _nsimcli.EneControl_GetMacroId(self)

    def GetFullMacroIdBV(self):
        return _nsimcli.EneControl_GetFullMacroIdBV(self)

    def MarkAsNeverFirst(self):
        return _nsimcli.EneControl_MarkAsNeverFirst(self)

    def IsMarkedAsNeverFirst(self):
        return _nsimcli.EneControl_IsMarkedAsNeverFirst(self)
    __swig_destroy__ = _nsimcli.delete_EneControl
    __del__ = lambda self: None
EneControl_swigregister = _nsimcli.EneControl_swigregister
EneControl_swigregister(EneControl)

COMPILER_DEFINED_FIELD_TYPE_REGULAR = _nsimcli.COMPILER_DEFINED_FIELD_TYPE_REGULAR
COMPILER_DEFINED_FIELD_PD_UPDATE_WITH_HARDWIRED_LOGIC = _nsimcli.COMPILER_DEFINED_FIELD_PD_UPDATE_WITH_HARDWIRED_LOGIC
COMPILER_DEFINED_FIELD_TYPE_USER_PLACED = _nsimcli.COMPILER_DEFINED_FIELD_TYPE_USER_PLACED
COMPILER_DEFINED_FIELD_TYPE_UNKNOWN = _nsimcli.COMPILER_DEFINED_FIELD_TYPE_UNKNOWN
class CompilerDefinedField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompilerDefinedField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompilerDefinedField, name)
    __repr__ = _swig_repr

    def __init__(self, fieldName, fieldDescription):
        this = _nsimcli.new_CompilerDefinedField(fieldName, fieldDescription)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_CompilerDefinedField
    __del__ = lambda self: None

    def PostParsingProcessingAndValidation(self, parsedItemsContainer, logger):
        return _nsimcli.CompilerDefinedField_PostParsingProcessingAndValidation(self, parsedItemsContainer, logger)

    def CheckNoForbiddenIntersectionsExist(self, parsedItemsContainer, logger):
        return _nsimcli.CompilerDefinedField_CheckNoForbiddenIntersectionsExist(self, parsedItemsContainer, logger)

    def GetName(self):
        return _nsimcli.CompilerDefinedField_GetName(self)

    def GetFieldRef(self):
        return _nsimcli.CompilerDefinedField_GetFieldRef(self)

    def GetEnginesAccessibleIn(self):
        return _nsimcli.CompilerDefinedField_GetEnginesAccessibleIn(self)

    def GetType(self):
        return _nsimcli.CompilerDefinedField_GetType(self)

    def GetGroup(self):
        return _nsimcli.CompilerDefinedField_GetGroup(self)

    def GetGroupInternalOrder(self):
        return _nsimcli.CompilerDefinedField_GetGroupInternalOrder(self)

    def GetDefaultValue(self):
        return _nsimcli.CompilerDefinedField_GetDefaultValue(self)

    def GetIntAttributeValue(self, attributeName, defaultValue):
        return _nsimcli.CompilerDefinedField_GetIntAttributeValue(self, attributeName, defaultValue)

    def GetCompilerDefinedRequirement(self, requirement):
        return _nsimcli.CompilerDefinedField_GetCompilerDefinedRequirement(self, requirement)
CompilerDefinedField_swigregister = _nsimcli.CompilerDefinedField_swigregister
CompilerDefinedField_swigregister(CompilerDefinedField)

class CompilerDefinedFieldGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompilerDefinedFieldGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompilerDefinedFieldGroup, name)
    __repr__ = _swig_repr

    def __init__(self, fieldName):
        this = _nsimcli.new_CompilerDefinedFieldGroup(fieldName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetName(self):
        return _nsimcli.CompilerDefinedFieldGroup_GetName(self)

    def AddCompilerField(self, field, groupInternalOrder):
        return _nsimcli.CompilerDefinedFieldGroup_AddCompilerField(self, field, groupInternalOrder)

    def AddHardwareField(self, fieldName, fieldSize):
        return _nsimcli.CompilerDefinedFieldGroup_AddHardwareField(self, fieldName, fieldSize)

    def FindCompilerField(self, fieldName):
        return _nsimcli.CompilerDefinedFieldGroup_FindCompilerField(self, fieldName)

    def FindHardwareFieldSize(self, fieldName):
        return _nsimcli.CompilerDefinedFieldGroup_FindHardwareFieldSize(self, fieldName)

    def GetCompilerFields(self):
        return _nsimcli.CompilerDefinedFieldGroup_GetCompilerFields(self)

    def GetHardwareFields(self):
        return _nsimcli.CompilerDefinedFieldGroup_GetHardwareFields(self)
    __swig_destroy__ = _nsimcli.delete_CompilerDefinedFieldGroup
    __del__ = lambda self: None
CompilerDefinedFieldGroup_swigregister = _nsimcli.CompilerDefinedFieldGroup_swigregister
CompilerDefinedFieldGroup_swigregister(CompilerDefinedFieldGroup)

NPSUITE_FILE_TYPE_NPL = _nsimcli.NPSUITE_FILE_TYPE_NPL
NPSUITE_FILE_TYPE_PYTHON = _nsimcli.NPSUITE_FILE_TYPE_PYTHON
NPSUITE_FILE_TYPE_JSON = _nsimcli.NPSUITE_FILE_TYPE_JSON
NPSUITE_FILE_TYPE_UNKNOWN = _nsimcli.NPSUITE_FILE_TYPE_UNKNOWN
class NplSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NplSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NplSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_NplSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetBasePath(self):
        return _nsimcli.NplSource_GetBasePath(self)

    def GetPathFromBase(self):
        return _nsimcli.NplSource_GetPathFromBase(self)

    def GetFileName(self):
        return _nsimcli.NplSource_GetFileName(self)

    def GetFileNameAndPathFromBase(self):
        return _nsimcli.NplSource_GetFileNameAndPathFromBase(self)

    def GetFileNameAndCompletePath(self):
        return _nsimcli.NplSource_GetFileNameAndCompletePath(self)

    def IsLeabaDefined(self):
        return _nsimcli.NplSource_IsLeabaDefined(self)

    def WriteFileToDisk(self, *args):
        return _nsimcli.NplSource_WriteFileToDisk(self, *args)

    def SerializeToFile(self, outfile):
        return _nsimcli.NplSource_SerializeToFile(self, outfile)

    def DeserializeFromFile(self, infile, remaining_file):
        return _nsimcli.NplSource_DeserializeFromFile(self, infile, remaining_file)

    def GetFileType(self):
        return _nsimcli.NplSource_GetFileType(self)

    def GetWholeFile(self):
        return _nsimcli.NplSource_GetWholeFile(self)

    def GetLineByValue(self, lineno):
        return _nsimcli.NplSource_GetLineByValue(self, lineno)

    def GetLine(self, *args):
        return _nsimcli.NplSource_GetLine(self, *args)

    def GetLineLength(self, lineno):
        return _nsimcli.NplSource_GetLineLength(self, lineno)

    def SetLine(self, lineNumber, line):
        return _nsimcli.NplSource_SetLine(self, lineNumber, line)

    def SetLines(self, lines):
        return _nsimcli.NplSource_SetLines(self, lines)

    def AppendLine(self, line):
        return _nsimcli.NplSource_AppendLine(self, line)

    def RearrangeFile(self):
        return _nsimcli.NplSource_RearrangeFile(self)

    def HadErrors(self):
        return _nsimcli.NplSource_HadErrors(self)

    def IsFile(self):
        return _nsimcli.NplSource_IsFile(self)

    def GetNumOfLines(self):
        return _nsimcli.NplSource_GetNumOfLines(self)

    def FinishInitLines(self):
        return _nsimcli.NplSource_FinishInitLines(self)
    __swig_destroy__ = _nsimcli.delete_NplSource
    __del__ = lambda self: None
NplSource_swigregister = _nsimcli.NplSource_swigregister
NplSource_swigregister(NplSource)

class EnumAndDefinesValueMappingWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnumAndDefinesValueMappingWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnumAndDefinesValueMappingWrapper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enumsAndDefinesValueMapping"] = _nsimcli.EnumAndDefinesValueMappingWrapper_enumsAndDefinesValueMapping_set
    __swig_getmethods__["enumsAndDefinesValueMapping"] = _nsimcli.EnumAndDefinesValueMappingWrapper_enumsAndDefinesValueMapping_get
    if _newclass:
        enumsAndDefinesValueMapping = _swig_property(_nsimcli.EnumAndDefinesValueMappingWrapper_enumsAndDefinesValueMapping_get, _nsimcli.EnumAndDefinesValueMappingWrapper_enumsAndDefinesValueMapping_set)

    def getEnumValue(self, valueStr):
        return _nsimcli.EnumAndDefinesValueMappingWrapper_getEnumValue(self, valueStr)

    def __init__(self):
        this = _nsimcli.new_EnumAndDefinesValueMappingWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_EnumAndDefinesValueMappingWrapper
    __del__ = lambda self: None
EnumAndDefinesValueMappingWrapper_swigregister = _nsimcli.EnumAndDefinesValueMappingWrapper_swigregister
EnumAndDefinesValueMappingWrapper_swigregister(EnumAndDefinesValueMappingWrapper)

class ParsedItemsContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParsedItemsContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParsedItemsContainer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["contexts"] = _nsimcli.ParsedItemsContainer_contexts_set
    __swig_getmethods__["contexts"] = _nsimcli.ParsedItemsContainer_contexts_get
    if _newclass:
        contexts = _swig_property(_nsimcli.ParsedItemsContainer_contexts_get, _nsimcli.ParsedItemsContainer_contexts_set)
    __swig_setmethods__["headerTypes"] = _nsimcli.ParsedItemsContainer_headerTypes_set
    __swig_getmethods__["headerTypes"] = _nsimcli.ParsedItemsContainer_headerTypes_get
    if _newclass:
        headerTypes = _swig_property(_nsimcli.ParsedItemsContainer_headerTypes_get, _nsimcli.ParsedItemsContainer_headerTypes_set)
    __swig_setmethods__["enumTypes"] = _nsimcli.ParsedItemsContainer_enumTypes_set
    __swig_getmethods__["enumTypes"] = _nsimcli.ParsedItemsContainer_enumTypes_get
    if _newclass:
        enumTypes = _swig_property(_nsimcli.ParsedItemsContainer_enumTypes_get, _nsimcli.ParsedItemsContainer_enumTypes_set)
    __swig_setmethods__["typeOfTypes"] = _nsimcli.ParsedItemsContainer_typeOfTypes_set
    __swig_getmethods__["typeOfTypes"] = _nsimcli.ParsedItemsContainer_typeOfTypes_get
    if _newclass:
        typeOfTypes = _swig_property(_nsimcli.ParsedItemsContainer_typeOfTypes_get, _nsimcli.ParsedItemsContainer_typeOfTypes_set)
    __swig_setmethods__["metadatas"] = _nsimcli.ParsedItemsContainer_metadatas_set
    __swig_getmethods__["metadatas"] = _nsimcli.ParsedItemsContainer_metadatas_get
    if _newclass:
        metadatas = _swig_property(_nsimcli.ParsedItemsContainer_metadatas_get, _nsimcli.ParsedItemsContainer_metadatas_set)
    __swig_setmethods__["aliases"] = _nsimcli.ParsedItemsContainer_aliases_set
    __swig_getmethods__["aliases"] = _nsimcli.ParsedItemsContainer_aliases_get
    if _newclass:
        aliases = _swig_property(_nsimcli.ParsedItemsContainer_aliases_get, _nsimcli.ParsedItemsContainer_aliases_set)
    __swig_setmethods__["actions"] = _nsimcli.ParsedItemsContainer_actions_set
    __swig_getmethods__["actions"] = _nsimcli.ParsedItemsContainer_actions_get
    if _newclass:
        actions = _swig_property(_nsimcli.ParsedItemsContainer_actions_get, _nsimcli.ParsedItemsContainer_actions_set)
    __swig_setmethods__["tables"] = _nsimcli.ParsedItemsContainer_tables_set
    __swig_getmethods__["tables"] = _nsimcli.ParsedItemsContainer_tables_get
    if _newclass:
        tables = _swig_property(_nsimcli.ParsedItemsContainer_tables_get, _nsimcli.ParsedItemsContainer_tables_set)
    __swig_setmethods__["templateCalls"] = _nsimcli.ParsedItemsContainer_templateCalls_set
    __swig_getmethods__["templateCalls"] = _nsimcli.ParsedItemsContainer_templateCalls_get
    if _newclass:
        templateCalls = _swig_property(_nsimcli.ParsedItemsContainer_templateCalls_get, _nsimcli.ParsedItemsContainer_templateCalls_set)
    __swig_setmethods__["templateFunctions"] = _nsimcli.ParsedItemsContainer_templateFunctions_set
    __swig_getmethods__["templateFunctions"] = _nsimcli.ParsedItemsContainer_templateFunctions_get
    if _newclass:
        templateFunctions = _swig_property(_nsimcli.ParsedItemsContainer_templateFunctions_get, _nsimcli.ParsedItemsContainer_templateFunctions_set)
    __swig_setmethods__["controlFunctions"] = _nsimcli.ParsedItemsContainer_controlFunctions_set
    __swig_getmethods__["controlFunctions"] = _nsimcli.ParsedItemsContainer_controlFunctions_get
    if _newclass:
        controlFunctions = _swig_property(_nsimcli.ParsedItemsContainer_controlFunctions_get, _nsimcli.ParsedItemsContainer_controlFunctions_set)
    __swig_setmethods__["macroStartControlFunctions"] = _nsimcli.ParsedItemsContainer_macroStartControlFunctions_set
    __swig_getmethods__["macroStartControlFunctions"] = _nsimcli.ParsedItemsContainer_macroStartControlFunctions_get
    if _newclass:
        macroStartControlFunctions = _swig_property(_nsimcli.ParsedItemsContainer_macroStartControlFunctions_get, _nsimcli.ParsedItemsContainer_macroStartControlFunctions_set)
    __swig_setmethods__["enumsAndDefinesValueMappingWrapper"] = _nsimcli.ParsedItemsContainer_enumsAndDefinesValueMappingWrapper_set
    __swig_getmethods__["enumsAndDefinesValueMappingWrapper"] = _nsimcli.ParsedItemsContainer_enumsAndDefinesValueMappingWrapper_get
    if _newclass:
        enumsAndDefinesValueMappingWrapper = _swig_property(_nsimcli.ParsedItemsContainer_enumsAndDefinesValueMappingWrapper_get, _nsimcli.ParsedItemsContainer_enumsAndDefinesValueMappingWrapper_set)
    __swig_setmethods__["mConstants"] = _nsimcli.ParsedItemsContainer_mConstants_set
    __swig_getmethods__["mConstants"] = _nsimcli.ParsedItemsContainer_mConstants_get
    if _newclass:
        mConstants = _swig_property(_nsimcli.ParsedItemsContainer_mConstants_get, _nsimcli.ParsedItemsContainer_mConstants_set)
    __swig_setmethods__["eneControls"] = _nsimcli.ParsedItemsContainer_eneControls_set
    __swig_getmethods__["eneControls"] = _nsimcli.ParsedItemsContainer_eneControls_get
    if _newclass:
        eneControls = _swig_property(_nsimcli.ParsedItemsContainer_eneControls_get, _nsimcli.ParsedItemsContainer_eneControls_set)
    __swig_setmethods__["compilerDefinedFields"] = _nsimcli.ParsedItemsContainer_compilerDefinedFields_set
    __swig_getmethods__["compilerDefinedFields"] = _nsimcli.ParsedItemsContainer_compilerDefinedFields_get
    if _newclass:
        compilerDefinedFields = _swig_property(_nsimcli.ParsedItemsContainer_compilerDefinedFields_get, _nsimcli.ParsedItemsContainer_compilerDefinedFields_set)
    __swig_setmethods__["compilerDefinedFieldsGroups"] = _nsimcli.ParsedItemsContainer_compilerDefinedFieldsGroups_set
    __swig_getmethods__["compilerDefinedFieldsGroups"] = _nsimcli.ParsedItemsContainer_compilerDefinedFieldsGroups_get
    if _newclass:
        compilerDefinedFieldsGroups = _swig_property(_nsimcli.ParsedItemsContainer_compilerDefinedFieldsGroups_get, _nsimcli.ParsedItemsContainer_compilerDefinedFieldsGroups_set)
    __swig_setmethods__["tableInitializers"] = _nsimcli.ParsedItemsContainer_tableInitializers_set
    __swig_getmethods__["tableInitializers"] = _nsimcli.ParsedItemsContainer_tableInitializers_get
    if _newclass:
        tableInitializers = _swig_property(_nsimcli.ParsedItemsContainer_tableInitializers_get, _nsimcli.ParsedItemsContainer_tableInitializers_set)
    __swig_setmethods__["macroIdToCalculatedFieldsInfo"] = _nsimcli.ParsedItemsContainer_macroIdToCalculatedFieldsInfo_set
    __swig_getmethods__["macroIdToCalculatedFieldsInfo"] = _nsimcli.ParsedItemsContainer_macroIdToCalculatedFieldsInfo_get
    if _newclass:
        macroIdToCalculatedFieldsInfo = _swig_property(_nsimcli.ParsedItemsContainer_macroIdToCalculatedFieldsInfo_get, _nsimcli.ParsedItemsContainer_macroIdToCalculatedFieldsInfo_set)
    __swig_setmethods__["udkTables"] = _nsimcli.ParsedItemsContainer_udkTables_set
    __swig_getmethods__["udkTables"] = _nsimcli.ParsedItemsContainer_udkTables_get
    if _newclass:
        udkTables = _swig_property(_nsimcli.ParsedItemsContainer_udkTables_get, _nsimcli.ParsedItemsContainer_udkTables_set)
    __swig_setmethods__["macroIdToUdkTableIds"] = _nsimcli.ParsedItemsContainer_macroIdToUdkTableIds_set
    __swig_getmethods__["macroIdToUdkTableIds"] = _nsimcli.ParsedItemsContainer_macroIdToUdkTableIds_get
    if _newclass:
        macroIdToUdkTableIds = _swig_property(_nsimcli.ParsedItemsContainer_macroIdToUdkTableIds_get, _nsimcli.ParsedItemsContainer_macroIdToUdkTableIds_set)
    __swig_setmethods__["tableConfigFiles"] = _nsimcli.ParsedItemsContainer_tableConfigFiles_set
    __swig_getmethods__["tableConfigFiles"] = _nsimcli.ParsedItemsContainer_tableConfigFiles_get
    if _newclass:
        tableConfigFiles = _swig_property(_nsimcli.ParsedItemsContainer_tableConfigFiles_get, _nsimcli.ParsedItemsContainer_tableConfigFiles_set)
    __swig_setmethods__["compoundDefinitions"] = _nsimcli.ParsedItemsContainer_compoundDefinitions_set
    __swig_getmethods__["compoundDefinitions"] = _nsimcli.ParsedItemsContainer_compoundDefinitions_get
    if _newclass:
        compoundDefinitions = _swig_property(_nsimcli.ParsedItemsContainer_compoundDefinitions_get, _nsimcli.ParsedItemsContainer_compoundDefinitions_set)
    __swig_setmethods__["compoundInstances"] = _nsimcli.ParsedItemsContainer_compoundInstances_set
    __swig_getmethods__["compoundInstances"] = _nsimcli.ParsedItemsContainer_compoundInstances_get
    if _newclass:
        compoundInstances = _swig_property(_nsimcli.ParsedItemsContainer_compoundInstances_get, _nsimcli.ParsedItemsContainer_compoundInstances_set)
    __swig_setmethods__["lookupInterfaces"] = _nsimcli.ParsedItemsContainer_lookupInterfaces_set
    __swig_getmethods__["lookupInterfaces"] = _nsimcli.ParsedItemsContainer_lookupInterfaces_get
    if _newclass:
        lookupInterfaces = _swig_property(_nsimcli.ParsedItemsContainer_lookupInterfaces_get, _nsimcli.ParsedItemsContainer_lookupInterfaces_set)
    __swig_setmethods__["parsedItemsJsonString"] = _nsimcli.ParsedItemsContainer_parsedItemsJsonString_set
    __swig_getmethods__["parsedItemsJsonString"] = _nsimcli.ParsedItemsContainer_parsedItemsJsonString_get
    if _newclass:
        parsedItemsJsonString = _swig_property(_nsimcli.ParsedItemsContainer_parsedItemsJsonString_get, _nsimcli.ParsedItemsContainer_parsedItemsJsonString_set)
    __swig_setmethods__["parsedItemsTxtString"] = _nsimcli.ParsedItemsContainer_parsedItemsTxtString_set
    __swig_getmethods__["parsedItemsTxtString"] = _nsimcli.ParsedItemsContainer_parsedItemsTxtString_get
    if _newclass:
        parsedItemsTxtString = _swig_property(_nsimcli.ParsedItemsContainer_parsedItemsTxtString_get, _nsimcli.ParsedItemsContainer_parsedItemsTxtString_set)
    __swig_destroy__ = _nsimcli.delete_ParsedItemsContainer
    __del__ = lambda self: None

    def Clear(self):
        return _nsimcli.ParsedItemsContainer_Clear(self)

    def FindAction(self, actionName, tableThatActionCanBeInlineInIt):
        return _nsimcli.ParsedItemsContainer_FindAction(self, actionName, tableThatActionCanBeInlineInIt)

    def FindEnumType(self, enumName):
        return _nsimcli.ParsedItemsContainer_FindEnumType(self, enumName)

    def FindEnumTypeByEnumOption(self, enumOption):
        return _nsimcli.ParsedItemsContainer_FindEnumTypeByEnumOption(self, enumOption)

    def GetConstant(self, name):
        return _nsimcli.ParsedItemsContainer_GetConstant(self, name)

    def ResolveConstTypeAndValue(self, logger, constStr):
        return _nsimcli.ParsedItemsContainer_ResolveConstTypeAndValue(self, logger, constStr)

    def get_actions(self):
        return _nsimcli.ParsedItemsContainer_get_actions(self)

    def get_contexts(self):
        return _nsimcli.ParsedItemsContainer_get_contexts(self)

    def get_controls(self):
        return _nsimcli.ParsedItemsContainer_get_controls(self)

    def GetCalculatedFields(self, macroId):
        return _nsimcli.ParsedItemsContainer_GetCalculatedFields(self, macroId)

    def GetUdkTableName(self, udk_table_id):
        return _nsimcli.ParsedItemsContainer_GetUdkTableName(self, udk_table_id)

    def GetUdkTableIds(self, macro_id):
        return _nsimcli.ParsedItemsContainer_GetUdkTableIds(self, macro_id)

    def get_enums(self):
        return _nsimcli.ParsedItemsContainer_get_enums(self)

    def get_types(self):
        return _nsimcli.ParsedItemsContainer_get_types(self)

    def get_tables(self):
        return _nsimcli.ParsedItemsContainer_get_tables(self)

    def get_metadatas(self):
        return _nsimcli.ParsedItemsContainer_get_metadatas(self)

    def get_constants(self):
        return _nsimcli.ParsedItemsContainer_get_constants(self)

    def get_static_table_config_files(self):
        return _nsimcli.ParsedItemsContainer_get_static_table_config_files(self)

    def get_ene_controls(self):
        return _nsimcli.ParsedItemsContainer_get_ene_controls(self)

    def get_alias_map(self):
        return _nsimcli.ParsedItemsContainer_get_alias_map(self)

    def __init__(self):
        this = _nsimcli.new_ParsedItemsContainer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ParsedItemsContainer_swigregister = _nsimcli.ParsedItemsContainer_swigregister
ParsedItemsContainer_swigregister(ParsedItemsContainer)

class CalculatedFieldsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculatedFieldsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalculatedFieldsInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tablesCalculatedFieldsPerKeyPart"] = _nsimcli.CalculatedFieldsInfo_tablesCalculatedFieldsPerKeyPart_set
    __swig_getmethods__["tablesCalculatedFieldsPerKeyPart"] = _nsimcli.CalculatedFieldsInfo_tablesCalculatedFieldsPerKeyPart_get
    if _newclass:
        tablesCalculatedFieldsPerKeyPart = _swig_property(_nsimcli.CalculatedFieldsInfo_tablesCalculatedFieldsPerKeyPart_get, _nsimcli.CalculatedFieldsInfo_tablesCalculatedFieldsPerKeyPart_set)
    __swig_setmethods__["allMacroCalculatedFields"] = _nsimcli.CalculatedFieldsInfo_allMacroCalculatedFields_set
    __swig_getmethods__["allMacroCalculatedFields"] = _nsimcli.CalculatedFieldsInfo_allMacroCalculatedFields_get
    if _newclass:
        allMacroCalculatedFields = _swig_property(_nsimcli.CalculatedFieldsInfo_allMacroCalculatedFields_get, _nsimcli.CalculatedFieldsInfo_allMacroCalculatedFields_set)

    def __init__(self):
        this = _nsimcli.new_CalculatedFieldsInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_CalculatedFieldsInfo
    __del__ = lambda self: None
CalculatedFieldsInfo_swigregister = _nsimcli.CalculatedFieldsInfo_swigregister
CalculatedFieldsInfo_swigregister(CalculatedFieldsInfo)

class ConstTypeAndValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstTypeAndValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstTypeAndValue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _nsimcli.ConstTypeAndValue_type_set
    __swig_getmethods__["type"] = _nsimcli.ConstTypeAndValue_type_get
    if _newclass:
        type = _swig_property(_nsimcli.ConstTypeAndValue_type_get, _nsimcli.ConstTypeAndValue_type_set)
    __swig_setmethods__["width"] = _nsimcli.ConstTypeAndValue_width_set
    __swig_getmethods__["width"] = _nsimcli.ConstTypeAndValue_width_get
    if _newclass:
        width = _swig_property(_nsimcli.ConstTypeAndValue_width_get, _nsimcli.ConstTypeAndValue_width_set)
    __swig_setmethods__["value"] = _nsimcli.ConstTypeAndValue_value_set
    __swig_getmethods__["value"] = _nsimcli.ConstTypeAndValue_value_get
    if _newclass:
        value = _swig_property(_nsimcli.ConstTypeAndValue_value_get, _nsimcli.ConstTypeAndValue_value_set)

    def IsValid(self):
        return _nsimcli.ConstTypeAndValue_IsValid(self)

    def __init__(self):
        this = _nsimcli.new_ConstTypeAndValue()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_ConstTypeAndValue
    __del__ = lambda self: None
ConstTypeAndValue_swigregister = _nsimcli.ConstTypeAndValue_swigregister
ConstTypeAndValue_swigregister(ConstTypeAndValue)

class RxRecycleMacroChecker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RxRecycleMacroChecker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RxRecycleMacroChecker, name)
    __repr__ = _swig_repr

    def __init__(self, macroName):
        this = _nsimcli.new_RxRecycleMacroChecker(macroName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, macroPair):
        return _nsimcli.RxRecycleMacroChecker___call__(self, macroPair)
    __swig_destroy__ = _nsimcli.delete_RxRecycleMacroChecker
    __del__ = lambda self: None
RxRecycleMacroChecker_swigregister = _nsimcli.RxRecycleMacroChecker_swigregister
RxRecycleMacroChecker_swigregister(RxRecycleMacroChecker)


def FindRxRecycleMacroControlFunction(pi, macroName):
    return _nsimcli.FindRxRecycleMacroControlFunction(pi, macroName)
FindRxRecycleMacroControlFunction = _nsimcli.FindRxRecycleMacroControlFunction
LEABA_DEPENDENCY_CHECK_DEFAULT = _nsimcli.LEABA_DEPENDENCY_CHECK_DEFAULT
LEABA_DEPENDENCY_CHECK_ENABLED = _nsimcli.LEABA_DEPENDENCY_CHECK_ENABLED
LEABA_DEPENDENCY_CHECK_DISABLED = _nsimcli.LEABA_DEPENDENCY_CHECK_DISABLED
class NPLParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NPLParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NPLParser, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nsimcli.new_NPLParser()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_NPLParser
    __del__ = lambda self: None

    def Parse(self, originalSourceFolder, folderToParse, mainSourceFile, leabaDefinedFolder, logger, additionalParams):
        return _nsimcli.NPLParser_Parse(self, originalSourceFolder, folderToParse, mainSourceFile, leabaDefinedFolder, logger, additionalParams)

    def CreateNSIMArchive(self, originalSourceFolder, folderToParse, mainSourceFile, leabaDefinedFolder, nsimArchiveFilename, logger, additionalParams):
        return _nsimcli.NPLParser_CreateNSIMArchive(self, originalSourceFolder, folderToParse, mainSourceFile, leabaDefinedFolder, nsimArchiveFilename, logger, additionalParams)

    def get_npl_sources(self):
        return _nsimcli.NPLParser_get_npl_sources(self)

    def LogParseError(self, message):
        return _nsimcli.NPLParser_LogParseError(self, message)

    def AddIncludeFile(self, includeFile, isLbrFile=False):
        return _nsimcli.NPLParser_AddIncludeFile(self, includeFile, isLbrFile)

    def GetParsedItemsContainer(self):
        return _nsimcli.NPLParser_GetParsedItemsContainer(self)

    def GetNplVersion(self):
        return _nsimcli.NPLParser_GetNplVersion(self)

    def GetEngineIdAndFullMacroIdToMacroNameMap(self):
        return _nsimcli.NPLParser_GetEngineIdAndFullMacroIdToMacroNameMap(self)

    def GetLogger(self):
        return _nsimcli.NPLParser_GetLogger(self)

    def IsLeabaDependencyCheck(self):
        return _nsimcli.NPLParser_IsLeabaDependencyCheck(self)

    def StartPreprocessorAddDefine(self):
        return _nsimcli.NPLParser_StartPreprocessorAddDefine(self)

    def PreprocessorDefineAppendString(self, str, isParsedAsValue):
        return _nsimcli.NPLParser_PreprocessorDefineAppendString(self, str, isParsedAsValue)

    def EndPreprocessorAddDefine(self, name):
        return _nsimcli.NPLParser_EndPreprocessorAddDefine(self, name)

    def PreprocessorUndefine(self, name):
        return _nsimcli.NPLParser_PreprocessorUndefine(self, name)

    def PreprocessorWarnOrError(self, kind, body):
        return _nsimcli.NPLParser_PreprocessorWarnOrError(self, kind, body)

    def StartPreprocessorIf(self):
        return _nsimcli.NPLParser_StartPreprocessorIf(self)

    def EndPreprocessorIf(self):
        return _nsimcli.NPLParser_EndPreprocessorIf(self)

    def StartPreprocessorElseIf(self):
        return _nsimcli.NPLParser_StartPreprocessorElseIf(self)

    def EndPreprocessorElseIf(self):
        return _nsimcli.NPLParser_EndPreprocessorElseIf(self)

    def PreprocessorElse(self):
        return _nsimcli.NPLParser_PreprocessorElse(self)

    def PreprocessorEndIf(self):
        return _nsimcli.NPLParser_PreprocessorEndIf(self)

    def AddPreprocessorIsDefinedBoolExpression(self, name):
        return _nsimcli.NPLParser_AddPreprocessorIsDefinedBoolExpression(self, name)

    def AddPreprocessedLine(self, line, startLine, stopLine):
        return _nsimcli.NPLParser_AddPreprocessedLine(self, line, startLine, stopLine)

    def RegisterComment(self, comment, lineno):
        return _nsimcli.NPLParser_RegisterComment(self, comment, lineno)

    def AddContext(self, name):
        return _nsimcli.NPLParser_AddContext(self, name)

    def AddContextEntry(self, name, value):
        return _nsimcli.NPLParser_AddContextEntry(self, name, value)

    def FinishedParsingContext(self):
        return _nsimcli.NPLParser_FinishedParsingContext(self)

    def AddOverloadHeaderType(self, name):
        return _nsimcli.NPLParser_AddOverloadHeaderType(self, name)

    def AddHeaderType(self, name, isUnion, isToForceExposureInAPI):
        return _nsimcli.NPLParser_AddHeaderType(self, name, isUnion, isToForceExposureInAPI)

    def SetHeaderTypeAsUnion(self):
        return _nsimcli.NPLParser_SetHeaderTypeAsUnion(self)

    def SetUnionWidth(self, widthInBits):
        return _nsimcli.NPLParser_SetUnionWidth(self, widthInBits)

    def SetHeaderWidth(self, widthInBits, headerAlignment):
        return _nsimcli.NPLParser_SetHeaderWidth(self, widthInBits, headerAlignment)

    def AddFieldToHeaderType(self, field, headerType, unionFieldAlignment):
        return _nsimcli.NPLParser_AddFieldToHeaderType(self, field, headerType, unionFieldAlignment)

    def AddBasicFieldToHeaderType(self, name, widthInbits, unionFieldAlignment):
        return _nsimcli.NPLParser_AddBasicFieldToHeaderType(self, name, widthInbits, unionFieldAlignment)

    def AddTypedFieldToHeaderType(self, name, type, unionFieldAlignment):
        return _nsimcli.NPLParser_AddTypedFieldToHeaderType(self, name, type, unionFieldAlignment)

    def AddTypedOfFieldToHeaderType(self, name, type, unionFieldAlignment):
        return _nsimcli.NPLParser_AddTypedOfFieldToHeaderType(self, name, type, unionFieldAlignment)

    def AddUnionToHeaderType(self, name, unionFieldAlignment):
        return _nsimcli.NPLParser_AddUnionToHeaderType(self, name, unionFieldAlignment)

    def FinishedParsingUnion(self):
        return _nsimcli.NPLParser_FinishedParsingUnion(self)

    def FinishedParsingHeaderType(self):
        return _nsimcli.NPLParser_FinishedParsingHeaderType(self)

    def AddTypeOfType(self, name):
        return _nsimcli.NPLParser_AddTypeOfType(self, name)

    def AddEnumType(self, name):
        return _nsimcli.NPLParser_AddEnumType(self, name)

    def AddOptionToEnumType(self, option):
        return _nsimcli.NPLParser_AddOptionToEnumType(self, option)

    def AddOptionValueToEnumType(self):
        return _nsimcli.NPLParser_AddOptionValueToEnumType(self)

    def FinishedParsingEnumType(self):
        return _nsimcli.NPLParser_FinishedParsingEnumType(self)

    def AddConstant(self, name, value):
        return _nsimcli.NPLParser_AddConstant(self, name, value)

    def AddMetadata(self, type, name, isDefinedAsShared):
        return _nsimcli.NPLParser_AddMetadata(self, type, name, isDefinedAsShared)

    def AddRegisterMetadata(self, type, name, isArray):
        return _nsimcli.NPLParser_AddRegisterMetadata(self, type, name, isArray)

    def AddAlias(self, name, aliasOf):
        return _nsimcli.NPLParser_AddAlias(self, name, aliasOf)

    def AddActionFunctionDeclaration(self, name, isImplicit):
        return _nsimcli.NPLParser_AddActionFunctionDeclaration(self, name, isImplicit)

    def AddHardwiredActionFunctionDeclaration(self, name, isImplicit):
        return _nsimcli.NPLParser_AddHardwiredActionFunctionDeclaration(self, name, isImplicit)

    def AllowHardwiredActionInAppNpl(self):
        return _nsimcli.NPLParser_AllowHardwiredActionInAppNpl(self)

    def AddInlineActionFunctionDeclaration(self, name):
        return _nsimcli.NPLParser_AddInlineActionFunctionDeclaration(self, name)

    def AddActionFunctionDeclarationParam(self, name, widthInbits):
        return _nsimcli.NPLParser_AddActionFunctionDeclarationParam(self, name, widthInbits)

    def MarkActionFunctionAsVariadic(self):
        return _nsimcli.NPLParser_MarkActionFunctionAsVariadic(self)

    def AddActionStatement(self):
        return _nsimcli.NPLParser_AddActionStatement(self)

    def AddHardwiredActionStatement(self):
        return _nsimcli.NPLParser_AddHardwiredActionStatement(self)

    def AddValueStatementParamToActionStatement(self):
        return _nsimcli.NPLParser_AddValueStatementParamToActionStatement(self)

    def SetLevelOfAction(self, level):
        return _nsimcli.NPLParser_SetLevelOfAction(self, level)

    def FinishedParsingActionStatement(self, name):
        return _nsimcli.NPLParser_FinishedParsingActionStatement(self, name)

    def FinishedParsingHardwiredActionStatement(self, name):
        return _nsimcli.NPLParser_FinishedParsingHardwiredActionStatement(self, name)

    def FinishedParsingActionFunctionDeclaration(self):
        return _nsimcli.NPLParser_FinishedParsingActionFunctionDeclaration(self)

    def AddTable(self, name, isImplicit, compundTableControlName):
        return _nsimcli.NPLParser_AddTable(self, name, isImplicit, compundTableControlName)

    def AddTableKeySelector(self, fieldRef):
        return _nsimcli.NPLParser_AddTableKeySelector(self, fieldRef)

    def AddTableReadsOption(self, optionStr, isConstValue):
        return _nsimcli.NPLParser_AddTableReadsOption(self, optionStr, isConstValue)

    def AddTableReadFieldMatch(self, fieldRef, matchType, alias):
        return _nsimcli.NPLParser_AddTableReadFieldMatch(self, fieldRef, matchType, alias)

    def AddTableReadValueFromVariableFieldMatch(self, fieldRef, valueStr, matchType):
        return _nsimcli.NPLParser_AddTableReadValueFromVariableFieldMatch(self, fieldRef, valueStr, matchType)

    def AddTableReadValueFieldMatch(self, valueStr, matchType, alias):
        return _nsimcli.NPLParser_AddTableReadValueFieldMatch(self, valueStr, matchType, alias)

    def AddFieldMatchAttribute(self, attrStr):
        return _nsimcli.NPLParser_AddFieldMatchAttribute(self, attrStr)

    def AddFieldMatchAttributeArg(self, attrStr):
        return _nsimcli.NPLParser_AddFieldMatchAttributeArg(self, attrStr)

    def AddTableReadValueFieldGroup(self):
        return _nsimcli.NPLParser_AddTableReadValueFieldGroup(self)

    def CheckAddTableReadValueFieldGroup(self):
        return _nsimcli.NPLParser_CheckAddTableReadValueFieldGroup(self)

    def StartTableSizedChunkInKey(self):
        return _nsimcli.NPLParser_StartTableSizedChunkInKey(self)

    def EndTableSizedChunkInKey(self, width):
        return _nsimcli.NPLParser_EndTableSizedChunkInKey(self, width)

    def AddTableActionRef(self, actionName):
        return _nsimcli.NPLParser_AddTableActionRef(self, actionName)

    def SetWritesFieldRef(self, fieldRef, alias):
        return _nsimcli.NPLParser_SetWritesFieldRef(self, fieldRef, alias)

    def AddWriteHitFieldToTable(self, fieldRef):
        return _nsimcli.NPLParser_AddWriteHitFieldToTable(self, fieldRef)

    def AddTableProperty(self, name, value):
        return _nsimcli.NPLParser_AddTableProperty(self, name, value)

    def FinishedParsingTable(self):
        return _nsimcli.NPLParser_FinishedParsingTable(self)

    def AddTableInitializer(self, name):
        return _nsimcli.NPLParser_AddTableInitializer(self, name)

    def AddTableInitializerEntry(self, name):
        return _nsimcli.NPLParser_AddTableInitializerEntry(self, name)

    def AddTableInitializerEntryParam(self, name):
        return _nsimcli.NPLParser_AddTableInitializerEntryParam(self, name)

    def FinishedParsingTableInitializerEntry(self):
        return _nsimcli.NPLParser_FinishedParsingTableInitializerEntry(self)

    def FinishedParsingTableInitializer(self):
        return _nsimcli.NPLParser_FinishedParsingTableInitializer(self)

    def AddTemplateControlFunction(self, name):
        return _nsimcli.NPLParser_AddTemplateControlFunction(self, name)

    def AddParameterToTemplateControlFunction(self, name, type, isEnumOption):
        return _nsimcli.NPLParser_AddParameterToTemplateControlFunction(self, name, type, isEnumOption)

    def FinishedTemplateControlParameters(self):
        return _nsimcli.NPLParser_FinishedTemplateControlParameters(self)

    def AddControlFunction(self, name):
        return _nsimcli.NPLParser_AddControlFunction(self, name)

    def AddMacroStartControlFunction(self, name):
        return _nsimcli.NPLParser_AddMacroStartControlFunction(self, name)

    def AddSynchronizedControlFunction(self, name):
        return _nsimcli.NPLParser_AddSynchronizedControlFunction(self, name)

    def FinishedParsingControlFunction(self):
        return _nsimcli.NPLParser_FinishedParsingControlFunction(self)

    def AddContextToControl(self, contextName):
        return _nsimcli.NPLParser_AddContextToControl(self, contextName)

    def AddEngineIdToControl(self, engineName):
        return _nsimcli.NPLParser_AddEngineIdToControl(self, engineName)

    def AddSynchronizationName(self, synchronizeName):
        return _nsimcli.NPLParser_AddSynchronizationName(self, synchronizeName)

    def AddContextToConditionalStatement(self, contextName):
        return _nsimcli.NPLParser_AddContextToConditionalStatement(self, contextName)

    def RemoveContextFromConditionalStatement(self, contextName):
        return _nsimcli.NPLParser_RemoveContextFromConditionalStatement(self, contextName)

    def AddDeviceToConditionalStatement(self, deviceName):
        return _nsimcli.NPLParser_AddDeviceToConditionalStatement(self, deviceName)

    def RemoveDeviceFromConditionalStatement(self, deviceName):
        return _nsimcli.NPLParser_RemoveDeviceFromConditionalStatement(self, deviceName)

    def AddIsAliasDefinedBoolExpression(self, name):
        return _nsimcli.NPLParser_AddIsAliasDefinedBoolExpression(self, name)

    def AddApplyTable(self, tableName):
        return _nsimcli.NPLParser_AddApplyTable(self, tableName)

    def AddApplyTableAndSelect(self, tableName):
        return _nsimcli.NPLParser_AddApplyTableAndSelect(self, tableName)

    def AddApplyTableCase(self, caseName):
        return _nsimcli.NPLParser_AddApplyTableCase(self, caseName)

    def FinishedParsingApplyTableAndSelect(self):
        return _nsimcli.NPLParser_FinishedParsingApplyTableAndSelect(self)

    def AddApplyNoTable(self):
        return _nsimcli.NPLParser_AddApplyNoTable(self)

    def FinishedParsingApplyNoTable(self):
        return _nsimcli.NPLParser_FinishedParsingApplyNoTable(self)

    def AddCallControlOrAction(self, name):
        return _nsimcli.NPLParser_AddCallControlOrAction(self, name)

    def FinishedParsingCallControlOrAction(self):
        return _nsimcli.NPLParser_FinishedParsingCallControlOrAction(self)

    def AddCallTemplateControl(self, name):
        return _nsimcli.NPLParser_AddCallTemplateControl(self, name)

    def AddParameterToCallTemplateControl(self, name, type):
        return _nsimcli.NPLParser_AddParameterToCallTemplateControl(self, name, type)

    def FinishedParsingCallTemplateControl(self):
        return _nsimcli.NPLParser_FinishedParsingCallTemplateControl(self)

    def AddConditionalStatement(self, isIfInContext):
        return _nsimcli.NPLParser_AddConditionalStatement(self, isIfInContext)

    def FinishedParsingBoolExpressionOfConditionalStatement(self):
        return _nsimcli.NPLParser_FinishedParsingBoolExpressionOfConditionalStatement(self)

    def FinishedParsingIfDefConditionalStatement(self):
        return _nsimcli.NPLParser_FinishedParsingIfDefConditionalStatement(self)

    def StartParsingElseStatement(self):
        return _nsimcli.NPLParser_StartParsingElseStatement(self)

    def FinishedParsingConditionalStatement(self):
        return _nsimcli.NPLParser_FinishedParsingConditionalStatement(self)

    def AddLogicalBoolExpression(self, op):
        return _nsimcli.NPLParser_AddLogicalBoolExpression(self, op)

    def AddRelBoolExpression(self, op, level):
        return _nsimcli.NPLParser_AddRelBoolExpression(self, op, level)

    def AddValueBoolExpression(self, value):
        return _nsimcli.NPLParser_AddValueBoolExpression(self, value)

    def AddOperatorBasedExpression(self, op):
        return _nsimcli.NPLParser_AddOperatorBasedExpression(self, op)

    def AddTempStringExpression(self, valueStr, isParsedAsValue):
        return _nsimcli.NPLParser_AddTempStringExpression(self, valueStr, isParsedAsValue)

    def AddValueStatementConst(self, valueStr):
        return _nsimcli.NPLParser_AddValueStatementConst(self, valueStr)

    def AddValueStatementString(self, valueStr, isStringValue):
        return _nsimcli.NPLParser_AddValueStatementString(self, valueStr, isStringValue)

    def AddValueStatementSizeof(self, refString):
        return _nsimcli.NPLParser_AddValueStatementSizeof(self, refString)

    def AddValueStatementOperatorBased(self, op):
        return _nsimcli.NPLParser_AddValueStatementOperatorBased(self, op)

    def AddValueStatementBoolExpression(self):
        return _nsimcli.NPLParser_AddValueStatementBoolExpression(self)

    def AddEneControl(self, name):
        return _nsimcli.NPLParser_AddEneControl(self, name)

    def AddContextToEneControl(self, contextName):
        return _nsimcli.NPLParser_AddContextToEneControl(self, contextName)

    def MarkEneControlAsNeverFirst(self):
        return _nsimcli.NPLParser_MarkEneControlAsNeverFirst(self)

    def StartParsingEneControlStatements(self):
        return _nsimcli.NPLParser_StartParsingEneControlStatements(self)

    def AddEneActionStatement(self, actionName):
        return _nsimcli.NPLParser_AddEneActionStatement(self, actionName)

    def AddValueStatementParamToEneActionStatement(self):
        return _nsimcli.NPLParser_AddValueStatementParamToEneActionStatement(self)

    def FinishedParsingEneActionStatement(self):
        return _nsimcli.NPLParser_FinishedParsingEneActionStatement(self)

    def AddApplyTableEneActionStatement(self, tableName):
        return _nsimcli.NPLParser_AddApplyTableEneActionStatement(self, tableName)

    def AddEneLabelStatement(self, labelName):
        return _nsimcli.NPLParser_AddEneLabelStatement(self, labelName)

    def AddEneIfStatement(self, isIfInContext):
        return _nsimcli.NPLParser_AddEneIfStatement(self, isIfInContext)

    def AddContextToEneIfStatement(self, contextName):
        return _nsimcli.NPLParser_AddContextToEneIfStatement(self, contextName)

    def RemoveContextFromEneIfStatement(self, contextName):
        return _nsimcli.NPLParser_RemoveContextFromEneIfStatement(self, contextName)

    def AddDeviceToEneIfStatement(self, contextName):
        return _nsimcli.NPLParser_AddDeviceToEneIfStatement(self, contextName)

    def RemoveDeviceFromEneIfStatement(self, contextName):
        return _nsimcli.NPLParser_RemoveDeviceFromEneIfStatement(self, contextName)

    def FinishedParsingBoolExpressionOfEneIfStatement(self):
        return _nsimcli.NPLParser_FinishedParsingBoolExpressionOfEneIfStatement(self)

    def FinishedParsingIfDefOfEneIfStatement(self):
        return _nsimcli.NPLParser_FinishedParsingIfDefOfEneIfStatement(self)

    def StartParsingEneElseStatement(self):
        return _nsimcli.NPLParser_StartParsingEneElseStatement(self)

    def FinishedParsingEneIfStatement(self):
        return _nsimcli.NPLParser_FinishedParsingEneIfStatement(self)

    def FinishedParsingEneControl(self):
        return _nsimcli.NPLParser_FinishedParsingEneControl(self)

    def StartCompoundDefinition(self, compoundName, isCompoundEmbedableCode):
        return _nsimcli.NPLParser_StartCompoundDefinition(self, compoundName, isCompoundEmbedableCode)

    def StartCompoundParamsDefinition(self):
        return _nsimcli.NPLParser_StartCompoundParamsDefinition(self)

    def AddCompoundLogicControlBit(self, name, width):
        return _nsimcli.NPLParser_AddCompoundLogicControlBit(self, name, width)

    def AddCompoundLogicType(self, name, width):
        return _nsimcli.NPLParser_AddCompoundLogicType(self, name, width)

    def AddCompoundLogicTable(self, name):
        return _nsimcli.NPLParser_AddCompoundLogicTable(self, name)

    def EndCompoundParamsDefinition(self):
        return _nsimcli.NPLParser_EndCompoundParamsDefinition(self)

    def StartCompoundImplmenetationDefinition(self):
        return _nsimcli.NPLParser_StartCompoundImplmenetationDefinition(self)

    def EndCompoundDefinition(self):
        return _nsimcli.NPLParser_EndCompoundDefinition(self)

    def AddLineToCompoundImplementation(self, line):
        return _nsimcli.NPLParser_AddLineToCompoundImplementation(self, line)

    def StartCompoundInstance(self, name, compoundType):
        return _nsimcli.NPLParser_StartCompoundInstance(self, name, compoundType)

    def StartCompoundInstanceTypeMapping(self, typeName):
        return _nsimcli.NPLParser_StartCompoundInstanceTypeMapping(self, typeName)

    def AddFieldToCompoundTypeMapping(self, name, typeOrValue, isConst):
        return _nsimcli.NPLParser_AddFieldToCompoundTypeMapping(self, name, typeOrValue, isConst)

    def AddFieldAttributeToCompoundTypeMapping(self, name):
        return _nsimcli.NPLParser_AddFieldAttributeToCompoundTypeMapping(self, name)

    def AddFieldAttributeArgToCompoundTypeMapping(self, attrArg):
        return _nsimcli.NPLParser_AddFieldAttributeArgToCompoundTypeMapping(self, attrArg)

    def EndCompoundInstanceTypeMapping(self):
        return _nsimcli.NPLParser_EndCompoundInstanceTypeMapping(self)

    def AddControlBitMapping(self, name, value, isParsedAsValue):
        return _nsimcli.NPLParser_AddControlBitMapping(self, name, value, isParsedAsValue)

    def StartCompoundInstanceTableMapping(self, tableName):
        return _nsimcli.NPLParser_StartCompoundInstanceTableMapping(self, tableName)

    def AddParamToCompoundTableMapping(self, name, value):
        return _nsimcli.NPLParser_AddParamToCompoundTableMapping(self, name, value)

    def EndCompoundInstanceTableMapping(self):
        return _nsimcli.NPLParser_EndCompoundInstanceTableMapping(self)

    def EndCompoundInstance(self):
        return _nsimcli.NPLParser_EndCompoundInstance(self)

    def StartLookupInterface(self, name):
        return _nsimcli.NPLParser_StartLookupInterface(self, name)

    def StartLookupInterfaceParsingInterface(self, isOutgoingBucket):
        return _nsimcli.NPLParser_StartLookupInterfaceParsingInterface(self, isOutgoingBucket)

    def AddLookupInterfaceBucket(self, bucket):
        return _nsimcli.NPLParser_AddLookupInterfaceBucket(self, bucket)

    def AddFieldToLookupInterfaceBucket(self, name, type, isConst):
        return _nsimcli.NPLParser_AddFieldToLookupInterfaceBucket(self, name, type, isConst)

    def AddTypeParameterToLookupInterfaceBucket(self, typeName):
        return _nsimcli.NPLParser_AddTypeParameterToLookupInterfaceBucket(self, typeName)

    def StartInterfaceSizedChunkInKey(self):
        return _nsimcli.NPLParser_StartInterfaceSizedChunkInKey(self)

    def EndInterfaceSizedChunkInKey(self, width):
        return _nsimcli.NPLParser_EndInterfaceSizedChunkInKey(self, width)

    def AddParamToLookupInterfaceBucket(self, name, value):
        return _nsimcli.NPLParser_AddParamToLookupInterfaceBucket(self, name, value)

    def FinishLookupInterfaceBucket(self):
        return _nsimcli.NPLParser_FinishLookupInterfaceBucket(self)

    def StartLookupInterfaceProperties(self):
        return _nsimcli.NPLParser_StartLookupInterfaceProperties(self)

    def AddInterfaceProperty(self, name, value):
        return _nsimcli.NPLParser_AddInterfaceProperty(self, name, value)

    def StartInterfacePropertyExtendInterface(self, name):
        return _nsimcli.NPLParser_StartInterfacePropertyExtendInterface(self, name)

    def FinishInterfacePropertyExtendInterface(self):
        return _nsimcli.NPLParser_FinishInterfacePropertyExtendInterface(self)

    def EndLookupInterfaceProperties(self):
        return _nsimcli.NPLParser_EndLookupInterfaceProperties(self)

    def EndLookupInterface(self):
        return _nsimcli.NPLParser_EndLookupInterface(self)

    def AddWhileStatement(self):
        return _nsimcli.NPLParser_AddWhileStatement(self)

    def FinishedParsingBoolExpressionOfWhileStatement(self):
        return _nsimcli.NPLParser_FinishedParsingBoolExpressionOfWhileStatement(self)

    def FinishedParsingWhileStatement(self):
        return _nsimcli.NPLParser_FinishedParsingWhileStatement(self)

    def InitializeCompilerDefinedFields(self):
        return _nsimcli.NPLParser_InitializeCompilerDefinedFields(self)

    def InitializeHardwareDefinedGroups(self):
        return _nsimcli.NPLParser_InitializeHardwareDefinedGroups(self)

    def UnifyCompoundInstantiatedTables(self, logger):
        return _nsimcli.NPLParser_UnifyCompoundInstantiatedTables(self, logger)

    def HandleSplitTableAPIs(self, logger):
        return _nsimcli.NPLParser_HandleSplitTableAPIs(self, logger)

    def HWDefinitions_GetUint16GeneralDef(self, generalAttributeName):
        return _nsimcli.NPLParser_HWDefinitions_GetUint16GeneralDef(self, generalAttributeName)

    def HWDefinitions_GetInt32GeneralDef(self, generalAttributeName):
        return _nsimcli.NPLParser_HWDefinitions_GetInt32GeneralDef(self, generalAttributeName)

    def HWDefinitions_GetJsonElement(self, *args):
        return _nsimcli.NPLParser_HWDefinitions_GetJsonElement(self, *args)

    def HWDefinitions_GetJsonForJsonElement(self, path):
        return _nsimcli.NPLParser_HWDefinitions_GetJsonForJsonElement(self, path)
NPLParser_swigregister = _nsimcli.NPLParser_swigregister
NPLParser_swigregister(NPLParser)


def GetNextAutoTableNumber():
    return _nsimcli.GetNextAutoTableNumber()
GetNextAutoTableNumber = _nsimcli.GetNextAutoTableNumber
class HWDefinitions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HWDefinitions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HWDefinitions, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        GetJsonElement = staticmethod(_nsimcli.HWDefinitions_GetJsonElement)
    else:
        GetJsonElement = _nsimcli.HWDefinitions_GetJsonElement
    if _newclass:
        GetUint16GeneralDef = staticmethod(_nsimcli.HWDefinitions_GetUint16GeneralDef)
    else:
        GetUint16GeneralDef = _nsimcli.HWDefinitions_GetUint16GeneralDef
    if _newclass:
        GetInt32GeneralDef = staticmethod(_nsimcli.HWDefinitions_GetInt32GeneralDef)
    else:
        GetInt32GeneralDef = _nsimcli.HWDefinitions_GetInt32GeneralDef
    if _newclass:
        GetUint32FromJsonHexString = staticmethod(_nsimcli.HWDefinitions_GetUint32FromJsonHexString)
    else:
        GetUint32FromJsonHexString = _nsimcli.HWDefinitions_GetUint32FromJsonHexString
    if _newclass:
        GetStringGeneralDef = staticmethod(_nsimcli.HWDefinitions_GetStringGeneralDef)
    else:
        GetStringGeneralDef = _nsimcli.HWDefinitions_GetStringGeneralDef
    if _newclass:
        GetGeneralVecStringValue = staticmethod(_nsimcli.HWDefinitions_GetGeneralVecStringValue)
    else:
        GetGeneralVecStringValue = _nsimcli.HWDefinitions_GetGeneralVecStringValue
    if _newclass:
        GetRevisionSpecific = staticmethod(_nsimcli.HWDefinitions_GetRevisionSpecific)
    else:
        GetRevisionSpecific = _nsimcli.HWDefinitions_GetRevisionSpecific
    if _newclass:
        Clear = staticmethod(_nsimcli.HWDefinitions_Clear)
    else:
        Clear = _nsimcli.HWDefinitions_Clear
    __swig_destroy__ = _nsimcli.delete_HWDefinitions
    __del__ = lambda self: None
HWDefinitions_swigregister = _nsimcli.HWDefinitions_swigregister
HWDefinitions_swigregister(HWDefinitions)

def HWDefinitions_GetJsonElement(*args):
    return _nsimcli.HWDefinitions_GetJsonElement(*args)
HWDefinitions_GetJsonElement = _nsimcli.HWDefinitions_GetJsonElement

def HWDefinitions_GetUint16GeneralDef(generalAttributeName):
    return _nsimcli.HWDefinitions_GetUint16GeneralDef(generalAttributeName)
HWDefinitions_GetUint16GeneralDef = _nsimcli.HWDefinitions_GetUint16GeneralDef

def HWDefinitions_GetInt32GeneralDef(generalAttributeName):
    return _nsimcli.HWDefinitions_GetInt32GeneralDef(generalAttributeName)
HWDefinitions_GetInt32GeneralDef = _nsimcli.HWDefinitions_GetInt32GeneralDef

def HWDefinitions_GetUint32FromJsonHexString(valueStr):
    return _nsimcli.HWDefinitions_GetUint32FromJsonHexString(valueStr)
HWDefinitions_GetUint32FromJsonHexString = _nsimcli.HWDefinitions_GetUint32FromJsonHexString

def HWDefinitions_GetStringGeneralDef(generalAttributeName):
    return _nsimcli.HWDefinitions_GetStringGeneralDef(generalAttributeName)
HWDefinitions_GetStringGeneralDef = _nsimcli.HWDefinitions_GetStringGeneralDef

def HWDefinitions_GetGeneralVecStringValue(generalAttributeName, default_value):
    return _nsimcli.HWDefinitions_GetGeneralVecStringValue(generalAttributeName, default_value)
HWDefinitions_GetGeneralVecStringValue = _nsimcli.HWDefinitions_GetGeneralVecStringValue

def HWDefinitions_GetRevisionSpecific(attributeName, deviceRevision):
    return _nsimcli.HWDefinitions_GetRevisionSpecific(attributeName, deviceRevision)
HWDefinitions_GetRevisionSpecific = _nsimcli.HWDefinitions_GetRevisionSpecific

def HWDefinitions_Clear():
    return _nsimcli.HWDefinitions_Clear()
HWDefinitions_Clear = _nsimcli.HWDefinitions_Clear

class ActionParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActionParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActionParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _nsimcli.ActionParam_name_set
    __swig_getmethods__["name"] = _nsimcli.ActionParam_name_get
    if _newclass:
        name = _swig_property(_nsimcli.ActionParam_name_get, _nsimcli.ActionParam_name_set)
    __swig_setmethods__["width_in_bits"] = _nsimcli.ActionParam_width_in_bits_set
    __swig_getmethods__["width_in_bits"] = _nsimcli.ActionParam_width_in_bits_get
    if _newclass:
        width_in_bits = _swig_property(_nsimcli.ActionParam_width_in_bits_get, _nsimcli.ActionParam_width_in_bits_set)
    __swig_setmethods__["type"] = _nsimcli.ActionParam_type_set
    __swig_getmethods__["type"] = _nsimcli.ActionParam_type_get
    if _newclass:
        type = _swig_property(_nsimcli.ActionParam_type_get, _nsimcli.ActionParam_type_set)
    __swig_setmethods__["is_referenced"] = _nsimcli.ActionParam_is_referenced_set
    __swig_getmethods__["is_referenced"] = _nsimcli.ActionParam_is_referenced_get
    if _newclass:
        is_referenced = _swig_property(_nsimcli.ActionParam_is_referenced_get, _nsimcli.ActionParam_is_referenced_set)
    __swig_setmethods__["is_padding"] = _nsimcli.ActionParam_is_padding_set
    __swig_getmethods__["is_padding"] = _nsimcli.ActionParam_is_padding_get
    if _newclass:
        is_padding = _swig_property(_nsimcli.ActionParam_is_padding_get, _nsimcli.ActionParam_is_padding_set)

    def __init__(self):
        this = _nsimcli.new_ActionParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_ActionParam
    __del__ = lambda self: None
ActionParam_swigregister = _nsimcli.ActionParam_swigregister
ActionParam_swigregister(ActionParam)

class EnumTypeOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnumTypeOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnumTypeOption, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _nsimcli.EnumTypeOption_name_set
    __swig_getmethods__["name"] = _nsimcli.EnumTypeOption_name_get
    if _newclass:
        name = _swig_property(_nsimcli.EnumTypeOption_name_get, _nsimcli.EnumTypeOption_name_set)
    __swig_setmethods__["has_value"] = _nsimcli.EnumTypeOption_has_value_set
    __swig_getmethods__["has_value"] = _nsimcli.EnumTypeOption_has_value_get
    if _newclass:
        has_value = _swig_property(_nsimcli.EnumTypeOption_has_value_get, _nsimcli.EnumTypeOption_has_value_set)
    __swig_setmethods__["value"] = _nsimcli.EnumTypeOption_value_set
    __swig_getmethods__["value"] = _nsimcli.EnumTypeOption_value_get
    if _newclass:
        value = _swig_property(_nsimcli.EnumTypeOption_value_get, _nsimcli.EnumTypeOption_value_set)

    def __init__(self):
        this = _nsimcli.new_EnumTypeOption()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_EnumTypeOption
    __del__ = lambda self: None
EnumTypeOption_swigregister = _nsimcli.EnumTypeOption_swigregister
EnumTypeOption_swigregister(EnumTypeOption)

class TableReadsOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableReadsOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableReadsOption, name)
    __repr__ = _swig_repr
    __swig_setmethods__["optionStr"] = _nsimcli.TableReadsOption_optionStr_set
    __swig_getmethods__["optionStr"] = _nsimcli.TableReadsOption_optionStr_get
    if _newclass:
        optionStr = _swig_property(_nsimcli.TableReadsOption_optionStr_get, _nsimcli.TableReadsOption_optionStr_set)
    __swig_setmethods__["optionValue"] = _nsimcli.TableReadsOption_optionValue_set
    __swig_getmethods__["optionValue"] = _nsimcli.TableReadsOption_optionValue_get
    if _newclass:
        optionValue = _swig_property(_nsimcli.TableReadsOption_optionValue_get, _nsimcli.TableReadsOption_optionValue_set)
    __swig_setmethods__["fieldMatches"] = _nsimcli.TableReadsOption_fieldMatches_set
    __swig_getmethods__["fieldMatches"] = _nsimcli.TableReadsOption_fieldMatches_get
    if _newclass:
        fieldMatches = _swig_property(_nsimcli.TableReadsOption_fieldMatches_get, _nsimcli.TableReadsOption_fieldMatches_set)

    def __init__(self):
        this = _nsimcli.new_TableReadsOption()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_TableReadsOption
    __del__ = lambda self: None
TableReadsOption_swigregister = _nsimcli.TableReadsOption_swigregister
TableReadsOption_swigregister(TableReadsOption)

class NameToBitVectorMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NameToBitVectorMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NameToBitVectorMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _nsimcli.NameToBitVectorMap_name_set
    __swig_getmethods__["name"] = _nsimcli.NameToBitVectorMap_name_get
    if _newclass:
        name = _swig_property(_nsimcli.NameToBitVectorMap_name_get, _nsimcli.NameToBitVectorMap_name_set)
    __swig_setmethods__["value"] = _nsimcli.NameToBitVectorMap_value_set
    __swig_getmethods__["value"] = _nsimcli.NameToBitVectorMap_value_get
    if _newclass:
        value = _swig_property(_nsimcli.NameToBitVectorMap_value_get, _nsimcli.NameToBitVectorMap_value_set)
    __swig_setmethods__["width_in_bits"] = _nsimcli.NameToBitVectorMap_width_in_bits_set
    __swig_getmethods__["width_in_bits"] = _nsimcli.NameToBitVectorMap_width_in_bits_get
    if _newclass:
        width_in_bits = _swig_property(_nsimcli.NameToBitVectorMap_width_in_bits_get, _nsimcli.NameToBitVectorMap_width_in_bits_set)

    def __init__(self):
        this = _nsimcli.new_NameToBitVectorMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_NameToBitVectorMap
    __del__ = lambda self: None
NameToBitVectorMap_swigregister = _nsimcli.NameToBitVectorMap_swigregister
NameToBitVectorMap_swigregister(NameToBitVectorMap)

class map_string_uint8_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_uint8_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_uint8_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.map_string_uint8_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.map_string_uint8_t___nonzero__(self)

    def __bool__(self):
        return _nsimcli.map_string_uint8_t___bool__(self)

    def __len__(self):
        return _nsimcli.map_string_uint8_t___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _nsimcli.map_string_uint8_t___getitem__(self, key)

    def __delitem__(self, key):
        return _nsimcli.map_string_uint8_t___delitem__(self, key)

    def has_key(self, key):
        return _nsimcli.map_string_uint8_t_has_key(self, key)

    def keys(self):
        return _nsimcli.map_string_uint8_t_keys(self)

    def values(self):
        return _nsimcli.map_string_uint8_t_values(self)

    def items(self):
        return _nsimcli.map_string_uint8_t_items(self)

    def __contains__(self, key):
        return _nsimcli.map_string_uint8_t___contains__(self, key)

    def key_iterator(self):
        return _nsimcli.map_string_uint8_t_key_iterator(self)

    def value_iterator(self):
        return _nsimcli.map_string_uint8_t_value_iterator(self)

    def __setitem__(self, *args):
        return _nsimcli.map_string_uint8_t___setitem__(self, *args)

    def asdict(self):
        return _nsimcli.map_string_uint8_t_asdict(self)

    def __init__(self, *args):
        this = _nsimcli.new_map_string_uint8_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _nsimcli.map_string_uint8_t_empty(self)

    def size(self):
        return _nsimcli.map_string_uint8_t_size(self)

    def swap(self, v):
        return _nsimcli.map_string_uint8_t_swap(self, v)

    def begin(self):
        return _nsimcli.map_string_uint8_t_begin(self)

    def end(self):
        return _nsimcli.map_string_uint8_t_end(self)

    def rbegin(self):
        return _nsimcli.map_string_uint8_t_rbegin(self)

    def rend(self):
        return _nsimcli.map_string_uint8_t_rend(self)

    def clear(self):
        return _nsimcli.map_string_uint8_t_clear(self)

    def get_allocator(self):
        return _nsimcli.map_string_uint8_t_get_allocator(self)

    def count(self, x):
        return _nsimcli.map_string_uint8_t_count(self, x)

    def erase(self, *args):
        return _nsimcli.map_string_uint8_t_erase(self, *args)

    def find(self, x):
        return _nsimcli.map_string_uint8_t_find(self, x)

    def lower_bound(self, x):
        return _nsimcli.map_string_uint8_t_lower_bound(self, x)

    def upper_bound(self, x):
        return _nsimcli.map_string_uint8_t_upper_bound(self, x)
    __swig_destroy__ = _nsimcli.delete_map_string_uint8_t
    __del__ = lambda self: None
map_string_uint8_t_swigregister = _nsimcli.map_string_uint8_t_swigregister
map_string_uint8_t_swigregister(map_string_uint8_t)

class udk_component_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_component_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_component_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.udk_component_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.udk_component_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.udk_component_vector___bool__(self)

    def __len__(self):
        return _nsimcli.udk_component_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.udk_component_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.udk_component_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.udk_component_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.udk_component_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.udk_component_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.udk_component_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.udk_component_vector_pop(self)

    def append(self, x):
        return _nsimcli.udk_component_vector_append(self, x)

    def empty(self):
        return _nsimcli.udk_component_vector_empty(self)

    def size(self):
        return _nsimcli.udk_component_vector_size(self)

    def swap(self, v):
        return _nsimcli.udk_component_vector_swap(self, v)

    def begin(self):
        return _nsimcli.udk_component_vector_begin(self)

    def end(self):
        return _nsimcli.udk_component_vector_end(self)

    def rbegin(self):
        return _nsimcli.udk_component_vector_rbegin(self)

    def rend(self):
        return _nsimcli.udk_component_vector_rend(self)

    def clear(self):
        return _nsimcli.udk_component_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.udk_component_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.udk_component_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.udk_component_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_udk_component_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.udk_component_vector_push_back(self, x)

    def front(self):
        return _nsimcli.udk_component_vector_front(self)

    def back(self):
        return _nsimcli.udk_component_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.udk_component_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.udk_component_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.udk_component_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.udk_component_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.udk_component_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_udk_component_vector
    __del__ = lambda self: None
udk_component_vector_swigregister = _nsimcli.udk_component_vector_swigregister
udk_component_vector_swigregister(udk_component_vector)

class udk_table_components_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_table_components_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_table_components_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.udk_table_components_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.udk_table_components_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.udk_table_components_vector___bool__(self)

    def __len__(self):
        return _nsimcli.udk_table_components_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.udk_table_components_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.udk_table_components_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.udk_table_components_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.udk_table_components_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.udk_table_components_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.udk_table_components_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.udk_table_components_vector_pop(self)

    def append(self, x):
        return _nsimcli.udk_table_components_vector_append(self, x)

    def empty(self):
        return _nsimcli.udk_table_components_vector_empty(self)

    def size(self):
        return _nsimcli.udk_table_components_vector_size(self)

    def swap(self, v):
        return _nsimcli.udk_table_components_vector_swap(self, v)

    def begin(self):
        return _nsimcli.udk_table_components_vector_begin(self)

    def end(self):
        return _nsimcli.udk_table_components_vector_end(self)

    def rbegin(self):
        return _nsimcli.udk_table_components_vector_rbegin(self)

    def rend(self):
        return _nsimcli.udk_table_components_vector_rend(self)

    def clear(self):
        return _nsimcli.udk_table_components_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.udk_table_components_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.udk_table_components_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.udk_table_components_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_udk_table_components_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.udk_table_components_vector_push_back(self, x)

    def front(self):
        return _nsimcli.udk_table_components_vector_front(self)

    def back(self):
        return _nsimcli.udk_table_components_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.udk_table_components_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.udk_table_components_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.udk_table_components_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.udk_table_components_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.udk_table_components_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_udk_table_components_vector
    __del__ = lambda self: None
udk_table_components_vector_swigregister = _nsimcli.udk_table_components_vector_swigregister
udk_table_components_vector_swigregister(udk_table_components_vector)

class udk_component_internal_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_component_internal_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_component_internal_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.udk_component_internal_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.udk_component_internal_vector___nonzero__(self)

    def __bool__(self):
        return _nsimcli.udk_component_internal_vector___bool__(self)

    def __len__(self):
        return _nsimcli.udk_component_internal_vector___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.udk_component_internal_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.udk_component_internal_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.udk_component_internal_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.udk_component_internal_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.udk_component_internal_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.udk_component_internal_vector___setitem__(self, *args)

    def pop(self):
        return _nsimcli.udk_component_internal_vector_pop(self)

    def append(self, x):
        return _nsimcli.udk_component_internal_vector_append(self, x)

    def empty(self):
        return _nsimcli.udk_component_internal_vector_empty(self)

    def size(self):
        return _nsimcli.udk_component_internal_vector_size(self)

    def swap(self, v):
        return _nsimcli.udk_component_internal_vector_swap(self, v)

    def begin(self):
        return _nsimcli.udk_component_internal_vector_begin(self)

    def end(self):
        return _nsimcli.udk_component_internal_vector_end(self)

    def rbegin(self):
        return _nsimcli.udk_component_internal_vector_rbegin(self)

    def rend(self):
        return _nsimcli.udk_component_internal_vector_rend(self)

    def clear(self):
        return _nsimcli.udk_component_internal_vector_clear(self)

    def get_allocator(self):
        return _nsimcli.udk_component_internal_vector_get_allocator(self)

    def pop_back(self):
        return _nsimcli.udk_component_internal_vector_pop_back(self)

    def erase(self, *args):
        return _nsimcli.udk_component_internal_vector_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_udk_component_internal_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.udk_component_internal_vector_push_back(self, x)

    def front(self):
        return _nsimcli.udk_component_internal_vector_front(self)

    def back(self):
        return _nsimcli.udk_component_internal_vector_back(self)

    def assign(self, n, x):
        return _nsimcli.udk_component_internal_vector_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.udk_component_internal_vector_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.udk_component_internal_vector_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.udk_component_internal_vector_reserve(self, n)

    def capacity(self):
        return _nsimcli.udk_component_internal_vector_capacity(self)
    __swig_destroy__ = _nsimcli.delete_udk_component_internal_vector
    __del__ = lambda self: None
udk_component_internal_vector_swigregister = _nsimcli.udk_component_internal_vector_swigregister
udk_component_internal_vector_swigregister(udk_component_internal_vector)

class placement_output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, placement_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, placement_output, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.placement_output_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.placement_output___nonzero__(self)

    def __bool__(self):
        return _nsimcli.placement_output___bool__(self)

    def __len__(self):
        return _nsimcli.placement_output___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.placement_output___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.placement_output___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.placement_output___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.placement_output___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.placement_output___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.placement_output___setitem__(self, *args)

    def pop(self):
        return _nsimcli.placement_output_pop(self)

    def append(self, x):
        return _nsimcli.placement_output_append(self, x)

    def empty(self):
        return _nsimcli.placement_output_empty(self)

    def size(self):
        return _nsimcli.placement_output_size(self)

    def swap(self, v):
        return _nsimcli.placement_output_swap(self, v)

    def begin(self):
        return _nsimcli.placement_output_begin(self)

    def end(self):
        return _nsimcli.placement_output_end(self)

    def rbegin(self):
        return _nsimcli.placement_output_rbegin(self)

    def rend(self):
        return _nsimcli.placement_output_rend(self)

    def clear(self):
        return _nsimcli.placement_output_clear(self)

    def get_allocator(self):
        return _nsimcli.placement_output_get_allocator(self)

    def pop_back(self):
        return _nsimcli.placement_output_pop_back(self)

    def erase(self, *args):
        return _nsimcli.placement_output_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_placement_output(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.placement_output_push_back(self, x)

    def front(self):
        return _nsimcli.placement_output_front(self)

    def back(self):
        return _nsimcli.placement_output_back(self)

    def assign(self, n, x):
        return _nsimcli.placement_output_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.placement_output_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.placement_output_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.placement_output_reserve(self, n)

    def capacity(self):
        return _nsimcli.placement_output_capacity(self)
    __swig_destroy__ = _nsimcli.delete_placement_output
    __del__ = lambda self: None
placement_output_swigregister = _nsimcli.placement_output_swigregister
placement_output_swigregister(placement_output)

class field_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, field_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, field_vec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.field_vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.field_vec___nonzero__(self)

    def __bool__(self):
        return _nsimcli.field_vec___bool__(self)

    def __len__(self):
        return _nsimcli.field_vec___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.field_vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.field_vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.field_vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.field_vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.field_vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.field_vec___setitem__(self, *args)

    def pop(self):
        return _nsimcli.field_vec_pop(self)

    def append(self, x):
        return _nsimcli.field_vec_append(self, x)

    def empty(self):
        return _nsimcli.field_vec_empty(self)

    def size(self):
        return _nsimcli.field_vec_size(self)

    def swap(self, v):
        return _nsimcli.field_vec_swap(self, v)

    def begin(self):
        return _nsimcli.field_vec_begin(self)

    def end(self):
        return _nsimcli.field_vec_end(self)

    def rbegin(self):
        return _nsimcli.field_vec_rbegin(self)

    def rend(self):
        return _nsimcli.field_vec_rend(self)

    def clear(self):
        return _nsimcli.field_vec_clear(self)

    def get_allocator(self):
        return _nsimcli.field_vec_get_allocator(self)

    def pop_back(self):
        return _nsimcli.field_vec_pop_back(self)

    def erase(self, *args):
        return _nsimcli.field_vec_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_field_vec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.field_vec_push_back(self, x)

    def front(self):
        return _nsimcli.field_vec_front(self)

    def back(self):
        return _nsimcli.field_vec_back(self)

    def assign(self, n, x):
        return _nsimcli.field_vec_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.field_vec_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.field_vec_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.field_vec_reserve(self, n)

    def capacity(self):
        return _nsimcli.field_vec_capacity(self)
    __swig_destroy__ = _nsimcli.delete_field_vec
    __del__ = lambda self: None
field_vec_swigregister = _nsimcli.field_vec_swigregister
field_vec_swigregister(field_vec)

class placement_buckets_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, placement_buckets_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, placement_buckets_vec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.placement_buckets_vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.placement_buckets_vec___nonzero__(self)

    def __bool__(self):
        return _nsimcli.placement_buckets_vec___bool__(self)

    def __len__(self):
        return _nsimcli.placement_buckets_vec___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.placement_buckets_vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.placement_buckets_vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.placement_buckets_vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.placement_buckets_vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.placement_buckets_vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.placement_buckets_vec___setitem__(self, *args)

    def pop(self):
        return _nsimcli.placement_buckets_vec_pop(self)

    def append(self, x):
        return _nsimcli.placement_buckets_vec_append(self, x)

    def empty(self):
        return _nsimcli.placement_buckets_vec_empty(self)

    def size(self):
        return _nsimcli.placement_buckets_vec_size(self)

    def swap(self, v):
        return _nsimcli.placement_buckets_vec_swap(self, v)

    def begin(self):
        return _nsimcli.placement_buckets_vec_begin(self)

    def end(self):
        return _nsimcli.placement_buckets_vec_end(self)

    def rbegin(self):
        return _nsimcli.placement_buckets_vec_rbegin(self)

    def rend(self):
        return _nsimcli.placement_buckets_vec_rend(self)

    def clear(self):
        return _nsimcli.placement_buckets_vec_clear(self)

    def get_allocator(self):
        return _nsimcli.placement_buckets_vec_get_allocator(self)

    def pop_back(self):
        return _nsimcli.placement_buckets_vec_pop_back(self)

    def erase(self, *args):
        return _nsimcli.placement_buckets_vec_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_placement_buckets_vec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.placement_buckets_vec_push_back(self, x)

    def front(self):
        return _nsimcli.placement_buckets_vec_front(self)

    def back(self):
        return _nsimcli.placement_buckets_vec_back(self)

    def assign(self, n, x):
        return _nsimcli.placement_buckets_vec_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.placement_buckets_vec_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.placement_buckets_vec_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.placement_buckets_vec_reserve(self, n)

    def capacity(self):
        return _nsimcli.placement_buckets_vec_capacity(self)
    __swig_destroy__ = _nsimcli.delete_placement_buckets_vec
    __del__ = lambda self: None
placement_buckets_vec_swigregister = _nsimcli.placement_buckets_vec_swigregister
placement_buckets_vec_swigregister(placement_buckets_vec)

class calculated_fields_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calculated_fields_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calculated_fields_info_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.calculated_fields_info_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.calculated_fields_info_t___nonzero__(self)

    def __bool__(self):
        return _nsimcli.calculated_fields_info_t___bool__(self)

    def __len__(self):
        return _nsimcli.calculated_fields_info_t___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.calculated_fields_info_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.calculated_fields_info_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.calculated_fields_info_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.calculated_fields_info_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.calculated_fields_info_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.calculated_fields_info_t___setitem__(self, *args)

    def pop(self):
        return _nsimcli.calculated_fields_info_t_pop(self)

    def append(self, x):
        return _nsimcli.calculated_fields_info_t_append(self, x)

    def empty(self):
        return _nsimcli.calculated_fields_info_t_empty(self)

    def size(self):
        return _nsimcli.calculated_fields_info_t_size(self)

    def swap(self, v):
        return _nsimcli.calculated_fields_info_t_swap(self, v)

    def begin(self):
        return _nsimcli.calculated_fields_info_t_begin(self)

    def end(self):
        return _nsimcli.calculated_fields_info_t_end(self)

    def rbegin(self):
        return _nsimcli.calculated_fields_info_t_rbegin(self)

    def rend(self):
        return _nsimcli.calculated_fields_info_t_rend(self)

    def clear(self):
        return _nsimcli.calculated_fields_info_t_clear(self)

    def get_allocator(self):
        return _nsimcli.calculated_fields_info_t_get_allocator(self)

    def pop_back(self):
        return _nsimcli.calculated_fields_info_t_pop_back(self)

    def erase(self, *args):
        return _nsimcli.calculated_fields_info_t_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_calculated_fields_info_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.calculated_fields_info_t_push_back(self, x)

    def front(self):
        return _nsimcli.calculated_fields_info_t_front(self)

    def back(self):
        return _nsimcli.calculated_fields_info_t_back(self)

    def assign(self, n, x):
        return _nsimcli.calculated_fields_info_t_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.calculated_fields_info_t_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.calculated_fields_info_t_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.calculated_fields_info_t_reserve(self, n)

    def capacity(self):
        return _nsimcli.calculated_fields_info_t_capacity(self)
    __swig_destroy__ = _nsimcli.delete_calculated_fields_info_t
    __del__ = lambda self: None
calculated_fields_info_t_swigregister = _nsimcli.calculated_fields_info_t_swigregister
calculated_fields_info_t_swigregister(calculated_fields_info_t)

class uc_pointers_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uc_pointers_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uc_pointers_vec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.uc_pointers_vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.uc_pointers_vec___nonzero__(self)

    def __bool__(self):
        return _nsimcli.uc_pointers_vec___bool__(self)

    def __len__(self):
        return _nsimcli.uc_pointers_vec___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.uc_pointers_vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.uc_pointers_vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.uc_pointers_vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.uc_pointers_vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.uc_pointers_vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.uc_pointers_vec___setitem__(self, *args)

    def pop(self):
        return _nsimcli.uc_pointers_vec_pop(self)

    def append(self, x):
        return _nsimcli.uc_pointers_vec_append(self, x)

    def empty(self):
        return _nsimcli.uc_pointers_vec_empty(self)

    def size(self):
        return _nsimcli.uc_pointers_vec_size(self)

    def swap(self, v):
        return _nsimcli.uc_pointers_vec_swap(self, v)

    def begin(self):
        return _nsimcli.uc_pointers_vec_begin(self)

    def end(self):
        return _nsimcli.uc_pointers_vec_end(self)

    def rbegin(self):
        return _nsimcli.uc_pointers_vec_rbegin(self)

    def rend(self):
        return _nsimcli.uc_pointers_vec_rend(self)

    def clear(self):
        return _nsimcli.uc_pointers_vec_clear(self)

    def get_allocator(self):
        return _nsimcli.uc_pointers_vec_get_allocator(self)

    def pop_back(self):
        return _nsimcli.uc_pointers_vec_pop_back(self)

    def erase(self, *args):
        return _nsimcli.uc_pointers_vec_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_uc_pointers_vec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.uc_pointers_vec_push_back(self, x)

    def front(self):
        return _nsimcli.uc_pointers_vec_front(self)

    def back(self):
        return _nsimcli.uc_pointers_vec_back(self)

    def assign(self, n, x):
        return _nsimcli.uc_pointers_vec_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.uc_pointers_vec_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.uc_pointers_vec_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.uc_pointers_vec_reserve(self, n)

    def capacity(self):
        return _nsimcli.uc_pointers_vec_capacity(self)
    __swig_destroy__ = _nsimcli.delete_uc_pointers_vec
    __del__ = lambda self: None
uc_pointers_vec_swigregister = _nsimcli.uc_pointers_vec_swigregister
uc_pointers_vec_swigregister(uc_pointers_vec)

class udk_properties_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_properties_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_properties_map, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.udk_properties_map_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.udk_properties_map___nonzero__(self)

    def __bool__(self):
        return _nsimcli.udk_properties_map___bool__(self)

    def __len__(self):
        return _nsimcli.udk_properties_map___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _nsimcli.udk_properties_map___getitem__(self, key)

    def __delitem__(self, key):
        return _nsimcli.udk_properties_map___delitem__(self, key)

    def has_key(self, key):
        return _nsimcli.udk_properties_map_has_key(self, key)

    def keys(self):
        return _nsimcli.udk_properties_map_keys(self)

    def values(self):
        return _nsimcli.udk_properties_map_values(self)

    def items(self):
        return _nsimcli.udk_properties_map_items(self)

    def __contains__(self, key):
        return _nsimcli.udk_properties_map___contains__(self, key)

    def key_iterator(self):
        return _nsimcli.udk_properties_map_key_iterator(self)

    def value_iterator(self):
        return _nsimcli.udk_properties_map_value_iterator(self)

    def __setitem__(self, *args):
        return _nsimcli.udk_properties_map___setitem__(self, *args)

    def asdict(self):
        return _nsimcli.udk_properties_map_asdict(self)

    def __init__(self, *args):
        this = _nsimcli.new_udk_properties_map(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _nsimcli.udk_properties_map_empty(self)

    def size(self):
        return _nsimcli.udk_properties_map_size(self)

    def swap(self, v):
        return _nsimcli.udk_properties_map_swap(self, v)

    def begin(self):
        return _nsimcli.udk_properties_map_begin(self)

    def end(self):
        return _nsimcli.udk_properties_map_end(self)

    def rbegin(self):
        return _nsimcli.udk_properties_map_rbegin(self)

    def rend(self):
        return _nsimcli.udk_properties_map_rend(self)

    def clear(self):
        return _nsimcli.udk_properties_map_clear(self)

    def get_allocator(self):
        return _nsimcli.udk_properties_map_get_allocator(self)

    def count(self, x):
        return _nsimcli.udk_properties_map_count(self, x)

    def erase(self, *args):
        return _nsimcli.udk_properties_map_erase(self, *args)

    def find(self, x):
        return _nsimcli.udk_properties_map_find(self, x)

    def lower_bound(self, x):
        return _nsimcli.udk_properties_map_lower_bound(self, x)

    def upper_bound(self, x):
        return _nsimcli.udk_properties_map_upper_bound(self, x)
    __swig_destroy__ = _nsimcli.delete_udk_properties_map
    __del__ = lambda self: None
udk_properties_map_swigregister = _nsimcli.udk_properties_map_swigregister
udk_properties_map_swigregister(udk_properties_map)

class trans_info_vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trans_info_vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trans_info_vec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.trans_info_vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.trans_info_vec___nonzero__(self)

    def __bool__(self):
        return _nsimcli.trans_info_vec___bool__(self)

    def __len__(self):
        return _nsimcli.trans_info_vec___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.trans_info_vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.trans_info_vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.trans_info_vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.trans_info_vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.trans_info_vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.trans_info_vec___setitem__(self, *args)

    def pop(self):
        return _nsimcli.trans_info_vec_pop(self)

    def append(self, x):
        return _nsimcli.trans_info_vec_append(self, x)

    def empty(self):
        return _nsimcli.trans_info_vec_empty(self)

    def size(self):
        return _nsimcli.trans_info_vec_size(self)

    def swap(self, v):
        return _nsimcli.trans_info_vec_swap(self, v)

    def begin(self):
        return _nsimcli.trans_info_vec_begin(self)

    def end(self):
        return _nsimcli.trans_info_vec_end(self)

    def rbegin(self):
        return _nsimcli.trans_info_vec_rbegin(self)

    def rend(self):
        return _nsimcli.trans_info_vec_rend(self)

    def clear(self):
        return _nsimcli.trans_info_vec_clear(self)

    def get_allocator(self):
        return _nsimcli.trans_info_vec_get_allocator(self)

    def pop_back(self):
        return _nsimcli.trans_info_vec_pop_back(self)

    def erase(self, *args):
        return _nsimcli.trans_info_vec_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_trans_info_vec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.trans_info_vec_push_back(self, x)

    def front(self):
        return _nsimcli.trans_info_vec_front(self)

    def back(self):
        return _nsimcli.trans_info_vec_back(self)

    def assign(self, n, x):
        return _nsimcli.trans_info_vec_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.trans_info_vec_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.trans_info_vec_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.trans_info_vec_reserve(self, n)

    def capacity(self):
        return _nsimcli.trans_info_vec_capacity(self)
    __swig_destroy__ = _nsimcli.delete_trans_info_vec
    __del__ = lambda self: None
trans_info_vec_swigregister = _nsimcli.trans_info_vec_swigregister
trans_info_vec_swigregister(trans_info_vec)

class udk_resources_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_resources_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_resources_map, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.udk_resources_map_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.udk_resources_map___nonzero__(self)

    def __bool__(self):
        return _nsimcli.udk_resources_map___bool__(self)

    def __len__(self):
        return _nsimcli.udk_resources_map___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _nsimcli.udk_resources_map___getitem__(self, key)

    def __delitem__(self, key):
        return _nsimcli.udk_resources_map___delitem__(self, key)

    def has_key(self, key):
        return _nsimcli.udk_resources_map_has_key(self, key)

    def keys(self):
        return _nsimcli.udk_resources_map_keys(self)

    def values(self):
        return _nsimcli.udk_resources_map_values(self)

    def items(self):
        return _nsimcli.udk_resources_map_items(self)

    def __contains__(self, key):
        return _nsimcli.udk_resources_map___contains__(self, key)

    def key_iterator(self):
        return _nsimcli.udk_resources_map_key_iterator(self)

    def value_iterator(self):
        return _nsimcli.udk_resources_map_value_iterator(self)

    def __setitem__(self, *args):
        return _nsimcli.udk_resources_map___setitem__(self, *args)

    def asdict(self):
        return _nsimcli.udk_resources_map_asdict(self)

    def __init__(self, *args):
        this = _nsimcli.new_udk_resources_map(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _nsimcli.udk_resources_map_empty(self)

    def size(self):
        return _nsimcli.udk_resources_map_size(self)

    def swap(self, v):
        return _nsimcli.udk_resources_map_swap(self, v)

    def begin(self):
        return _nsimcli.udk_resources_map_begin(self)

    def end(self):
        return _nsimcli.udk_resources_map_end(self)

    def rbegin(self):
        return _nsimcli.udk_resources_map_rbegin(self)

    def rend(self):
        return _nsimcli.udk_resources_map_rend(self)

    def clear(self):
        return _nsimcli.udk_resources_map_clear(self)

    def get_allocator(self):
        return _nsimcli.udk_resources_map_get_allocator(self)

    def count(self, x):
        return _nsimcli.udk_resources_map_count(self, x)

    def erase(self, *args):
        return _nsimcli.udk_resources_map_erase(self, *args)

    def find(self, x):
        return _nsimcli.udk_resources_map_find(self, x)

    def lower_bound(self, x):
        return _nsimcli.udk_resources_map_lower_bound(self, x)

    def upper_bound(self, x):
        return _nsimcli.udk_resources_map_upper_bound(self, x)
    __swig_destroy__ = _nsimcli.delete_udk_resources_map
    __del__ = lambda self: None
udk_resources_map_swigregister = _nsimcli.udk_resources_map_swigregister
udk_resources_map_swigregister(udk_resources_map)

class nsim_macro_execution_flow_log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_macro_execution_flow_log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_macro_execution_flow_log, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.nsim_macro_execution_flow_log_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.nsim_macro_execution_flow_log___nonzero__(self)

    def __bool__(self):
        return _nsimcli.nsim_macro_execution_flow_log___bool__(self)

    def __len__(self):
        return _nsimcli.nsim_macro_execution_flow_log___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.nsim_macro_execution_flow_log___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.nsim_macro_execution_flow_log___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.nsim_macro_execution_flow_log___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.nsim_macro_execution_flow_log___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.nsim_macro_execution_flow_log___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.nsim_macro_execution_flow_log___setitem__(self, *args)

    def pop(self):
        return _nsimcli.nsim_macro_execution_flow_log_pop(self)

    def append(self, x):
        return _nsimcli.nsim_macro_execution_flow_log_append(self, x)

    def empty(self):
        return _nsimcli.nsim_macro_execution_flow_log_empty(self)

    def size(self):
        return _nsimcli.nsim_macro_execution_flow_log_size(self)

    def swap(self, v):
        return _nsimcli.nsim_macro_execution_flow_log_swap(self, v)

    def begin(self):
        return _nsimcli.nsim_macro_execution_flow_log_begin(self)

    def end(self):
        return _nsimcli.nsim_macro_execution_flow_log_end(self)

    def rbegin(self):
        return _nsimcli.nsim_macro_execution_flow_log_rbegin(self)

    def rend(self):
        return _nsimcli.nsim_macro_execution_flow_log_rend(self)

    def clear(self):
        return _nsimcli.nsim_macro_execution_flow_log_clear(self)

    def get_allocator(self):
        return _nsimcli.nsim_macro_execution_flow_log_get_allocator(self)

    def pop_back(self):
        return _nsimcli.nsim_macro_execution_flow_log_pop_back(self)

    def erase(self, *args):
        return _nsimcli.nsim_macro_execution_flow_log_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_nsim_macro_execution_flow_log(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.nsim_macro_execution_flow_log_push_back(self, x)

    def front(self):
        return _nsimcli.nsim_macro_execution_flow_log_front(self)

    def back(self):
        return _nsimcli.nsim_macro_execution_flow_log_back(self)

    def assign(self, n, x):
        return _nsimcli.nsim_macro_execution_flow_log_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.nsim_macro_execution_flow_log_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.nsim_macro_execution_flow_log_insert(self, *args)

    def reserve(self, n):
        return _nsimcli.nsim_macro_execution_flow_log_reserve(self, n)

    def capacity(self):
        return _nsimcli.nsim_macro_execution_flow_log_capacity(self)
    __swig_destroy__ = _nsimcli.delete_nsim_macro_execution_flow_log
    __del__ = lambda self: None
nsim_macro_execution_flow_log_swigregister = _nsimcli.nsim_macro_execution_flow_log_swigregister
nsim_macro_execution_flow_log_swigregister(nsim_macro_execution_flow_log)

class string_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.string_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.string_list___nonzero__(self)

    def __bool__(self):
        return _nsimcli.string_list___bool__(self)

    def __len__(self):
        return _nsimcli.string_list___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.string_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.string_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.string_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.string_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.string_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.string_list___setitem__(self, *args)

    def pop(self):
        return _nsimcli.string_list_pop(self)

    def append(self, x):
        return _nsimcli.string_list_append(self, x)

    def empty(self):
        return _nsimcli.string_list_empty(self)

    def size(self):
        return _nsimcli.string_list_size(self)

    def swap(self, v):
        return _nsimcli.string_list_swap(self, v)

    def begin(self):
        return _nsimcli.string_list_begin(self)

    def end(self):
        return _nsimcli.string_list_end(self)

    def rbegin(self):
        return _nsimcli.string_list_rbegin(self)

    def rend(self):
        return _nsimcli.string_list_rend(self)

    def clear(self):
        return _nsimcli.string_list_clear(self)

    def get_allocator(self):
        return _nsimcli.string_list_get_allocator(self)

    def pop_back(self):
        return _nsimcli.string_list_pop_back(self)

    def erase(self, *args):
        return _nsimcli.string_list_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_string_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.string_list_push_back(self, x)

    def front(self):
        return _nsimcli.string_list_front(self)

    def back(self):
        return _nsimcli.string_list_back(self)

    def assign(self, n, x):
        return _nsimcli.string_list_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.string_list_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.string_list_insert(self, *args)

    def pop_front(self):
        return _nsimcli.string_list_pop_front(self)

    def push_front(self, x):
        return _nsimcli.string_list_push_front(self, x)

    def reverse(self):
        return _nsimcli.string_list_reverse(self)
    __swig_destroy__ = _nsimcli.delete_string_list
    __del__ = lambda self: None
string_list_swigregister = _nsimcli.string_list_swigregister
string_list_swigregister(string_list)

class packet_database_access_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_database_access_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_database_access_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.packet_database_access_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.packet_database_access_list___nonzero__(self)

    def __bool__(self):
        return _nsimcli.packet_database_access_list___bool__(self)

    def __len__(self):
        return _nsimcli.packet_database_access_list___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.packet_database_access_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.packet_database_access_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.packet_database_access_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.packet_database_access_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.packet_database_access_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.packet_database_access_list___setitem__(self, *args)

    def pop(self):
        return _nsimcli.packet_database_access_list_pop(self)

    def append(self, x):
        return _nsimcli.packet_database_access_list_append(self, x)

    def empty(self):
        return _nsimcli.packet_database_access_list_empty(self)

    def size(self):
        return _nsimcli.packet_database_access_list_size(self)

    def swap(self, v):
        return _nsimcli.packet_database_access_list_swap(self, v)

    def begin(self):
        return _nsimcli.packet_database_access_list_begin(self)

    def end(self):
        return _nsimcli.packet_database_access_list_end(self)

    def rbegin(self):
        return _nsimcli.packet_database_access_list_rbegin(self)

    def rend(self):
        return _nsimcli.packet_database_access_list_rend(self)

    def clear(self):
        return _nsimcli.packet_database_access_list_clear(self)

    def get_allocator(self):
        return _nsimcli.packet_database_access_list_get_allocator(self)

    def pop_back(self):
        return _nsimcli.packet_database_access_list_pop_back(self)

    def erase(self, *args):
        return _nsimcli.packet_database_access_list_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_packet_database_access_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.packet_database_access_list_push_back(self, x)

    def front(self):
        return _nsimcli.packet_database_access_list_front(self)

    def back(self):
        return _nsimcli.packet_database_access_list_back(self)

    def assign(self, n, x):
        return _nsimcli.packet_database_access_list_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.packet_database_access_list_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.packet_database_access_list_insert(self, *args)

    def pop_front(self):
        return _nsimcli.packet_database_access_list_pop_front(self)

    def push_front(self, x):
        return _nsimcli.packet_database_access_list_push_front(self, x)

    def reverse(self):
        return _nsimcli.packet_database_access_list_reverse(self)
    __swig_destroy__ = _nsimcli.delete_packet_database_access_list
    __del__ = lambda self: None
packet_database_access_list_swigregister = _nsimcli.packet_database_access_list_swigregister
packet_database_access_list_swigregister(packet_database_access_list)

class packet_macro_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_macro_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_macro_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.packet_macro_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.packet_macro_list___nonzero__(self)

    def __bool__(self):
        return _nsimcli.packet_macro_list___bool__(self)

    def __len__(self):
        return _nsimcli.packet_macro_list___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.packet_macro_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.packet_macro_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.packet_macro_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.packet_macro_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.packet_macro_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.packet_macro_list___setitem__(self, *args)

    def pop(self):
        return _nsimcli.packet_macro_list_pop(self)

    def append(self, x):
        return _nsimcli.packet_macro_list_append(self, x)

    def empty(self):
        return _nsimcli.packet_macro_list_empty(self)

    def size(self):
        return _nsimcli.packet_macro_list_size(self)

    def swap(self, v):
        return _nsimcli.packet_macro_list_swap(self, v)

    def begin(self):
        return _nsimcli.packet_macro_list_begin(self)

    def end(self):
        return _nsimcli.packet_macro_list_end(self)

    def rbegin(self):
        return _nsimcli.packet_macro_list_rbegin(self)

    def rend(self):
        return _nsimcli.packet_macro_list_rend(self)

    def clear(self):
        return _nsimcli.packet_macro_list_clear(self)

    def get_allocator(self):
        return _nsimcli.packet_macro_list_get_allocator(self)

    def pop_back(self):
        return _nsimcli.packet_macro_list_pop_back(self)

    def erase(self, *args):
        return _nsimcli.packet_macro_list_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_packet_macro_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.packet_macro_list_push_back(self, x)

    def front(self):
        return _nsimcli.packet_macro_list_front(self)

    def back(self):
        return _nsimcli.packet_macro_list_back(self)

    def assign(self, n, x):
        return _nsimcli.packet_macro_list_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.packet_macro_list_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.packet_macro_list_insert(self, *args)

    def pop_front(self):
        return _nsimcli.packet_macro_list_pop_front(self)

    def push_front(self, x):
        return _nsimcli.packet_macro_list_push_front(self, x)

    def reverse(self):
        return _nsimcli.packet_macro_list_reverse(self)
    __swig_destroy__ = _nsimcli.delete_packet_macro_list
    __del__ = lambda self: None
packet_macro_list_swigregister = _nsimcli.packet_macro_list_swigregister
packet_macro_list_swigregister(packet_macro_list)

class packet_engine_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_engine_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_engine_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.packet_engine_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.packet_engine_list___nonzero__(self)

    def __bool__(self):
        return _nsimcli.packet_engine_list___bool__(self)

    def __len__(self):
        return _nsimcli.packet_engine_list___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.packet_engine_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.packet_engine_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.packet_engine_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.packet_engine_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.packet_engine_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.packet_engine_list___setitem__(self, *args)

    def pop(self):
        return _nsimcli.packet_engine_list_pop(self)

    def append(self, x):
        return _nsimcli.packet_engine_list_append(self, x)

    def empty(self):
        return _nsimcli.packet_engine_list_empty(self)

    def size(self):
        return _nsimcli.packet_engine_list_size(self)

    def swap(self, v):
        return _nsimcli.packet_engine_list_swap(self, v)

    def begin(self):
        return _nsimcli.packet_engine_list_begin(self)

    def end(self):
        return _nsimcli.packet_engine_list_end(self)

    def rbegin(self):
        return _nsimcli.packet_engine_list_rbegin(self)

    def rend(self):
        return _nsimcli.packet_engine_list_rend(self)

    def clear(self):
        return _nsimcli.packet_engine_list_clear(self)

    def get_allocator(self):
        return _nsimcli.packet_engine_list_get_allocator(self)

    def pop_back(self):
        return _nsimcli.packet_engine_list_pop_back(self)

    def erase(self, *args):
        return _nsimcli.packet_engine_list_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_packet_engine_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.packet_engine_list_push_back(self, x)

    def front(self):
        return _nsimcli.packet_engine_list_front(self)

    def back(self):
        return _nsimcli.packet_engine_list_back(self)

    def assign(self, n, x):
        return _nsimcli.packet_engine_list_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.packet_engine_list_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.packet_engine_list_insert(self, *args)

    def pop_front(self):
        return _nsimcli.packet_engine_list_pop_front(self)

    def push_front(self, x):
        return _nsimcli.packet_engine_list_push_front(self, x)

    def reverse(self):
        return _nsimcli.packet_engine_list_reverse(self)
    __swig_destroy__ = _nsimcli.delete_packet_engine_list
    __del__ = lambda self: None
packet_engine_list_swigregister = _nsimcli.packet_engine_list_swigregister
packet_engine_list_swigregister(packet_engine_list)

class packet_pass_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_pass_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_pass_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.packet_pass_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.packet_pass_list___nonzero__(self)

    def __bool__(self):
        return _nsimcli.packet_pass_list___bool__(self)

    def __len__(self):
        return _nsimcli.packet_pass_list___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.packet_pass_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.packet_pass_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.packet_pass_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.packet_pass_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.packet_pass_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.packet_pass_list___setitem__(self, *args)

    def pop(self):
        return _nsimcli.packet_pass_list_pop(self)

    def append(self, x):
        return _nsimcli.packet_pass_list_append(self, x)

    def empty(self):
        return _nsimcli.packet_pass_list_empty(self)

    def size(self):
        return _nsimcli.packet_pass_list_size(self)

    def swap(self, v):
        return _nsimcli.packet_pass_list_swap(self, v)

    def begin(self):
        return _nsimcli.packet_pass_list_begin(self)

    def end(self):
        return _nsimcli.packet_pass_list_end(self)

    def rbegin(self):
        return _nsimcli.packet_pass_list_rbegin(self)

    def rend(self):
        return _nsimcli.packet_pass_list_rend(self)

    def clear(self):
        return _nsimcli.packet_pass_list_clear(self)

    def get_allocator(self):
        return _nsimcli.packet_pass_list_get_allocator(self)

    def pop_back(self):
        return _nsimcli.packet_pass_list_pop_back(self)

    def erase(self, *args):
        return _nsimcli.packet_pass_list_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_packet_pass_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.packet_pass_list_push_back(self, x)

    def front(self):
        return _nsimcli.packet_pass_list_front(self)

    def back(self):
        return _nsimcli.packet_pass_list_back(self)

    def assign(self, n, x):
        return _nsimcli.packet_pass_list_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.packet_pass_list_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.packet_pass_list_insert(self, *args)

    def pop_front(self):
        return _nsimcli.packet_pass_list_pop_front(self)

    def push_front(self, x):
        return _nsimcli.packet_pass_list_push_front(self, x)

    def reverse(self):
        return _nsimcli.packet_pass_list_reverse(self)
    __swig_destroy__ = _nsimcli.delete_packet_pass_list
    __del__ = lambda self: None
packet_pass_list_swigregister = _nsimcli.packet_pass_list_swigregister
packet_pass_list_swigregister(packet_pass_list)

class packet_statistics_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_statistics_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_statistics_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.packet_statistics_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.packet_statistics_list___nonzero__(self)

    def __bool__(self):
        return _nsimcli.packet_statistics_list___bool__(self)

    def __len__(self):
        return _nsimcli.packet_statistics_list___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.packet_statistics_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.packet_statistics_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.packet_statistics_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.packet_statistics_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.packet_statistics_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.packet_statistics_list___setitem__(self, *args)

    def pop(self):
        return _nsimcli.packet_statistics_list_pop(self)

    def append(self, x):
        return _nsimcli.packet_statistics_list_append(self, x)

    def empty(self):
        return _nsimcli.packet_statistics_list_empty(self)

    def size(self):
        return _nsimcli.packet_statistics_list_size(self)

    def swap(self, v):
        return _nsimcli.packet_statistics_list_swap(self, v)

    def begin(self):
        return _nsimcli.packet_statistics_list_begin(self)

    def end(self):
        return _nsimcli.packet_statistics_list_end(self)

    def rbegin(self):
        return _nsimcli.packet_statistics_list_rbegin(self)

    def rend(self):
        return _nsimcli.packet_statistics_list_rend(self)

    def clear(self):
        return _nsimcli.packet_statistics_list_clear(self)

    def get_allocator(self):
        return _nsimcli.packet_statistics_list_get_allocator(self)

    def pop_back(self):
        return _nsimcli.packet_statistics_list_pop_back(self)

    def erase(self, *args):
        return _nsimcli.packet_statistics_list_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_packet_statistics_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.packet_statistics_list_push_back(self, x)

    def front(self):
        return _nsimcli.packet_statistics_list_front(self)

    def back(self):
        return _nsimcli.packet_statistics_list_back(self)

    def assign(self, n, x):
        return _nsimcli.packet_statistics_list_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.packet_statistics_list_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.packet_statistics_list_insert(self, *args)

    def pop_front(self):
        return _nsimcli.packet_statistics_list_pop_front(self)

    def push_front(self, x):
        return _nsimcli.packet_statistics_list_push_front(self, x)

    def reverse(self):
        return _nsimcli.packet_statistics_list_reverse(self)
    __swig_destroy__ = _nsimcli.delete_packet_statistics_list
    __del__ = lambda self: None
packet_statistics_list_swigregister = _nsimcli.packet_statistics_list_swigregister
packet_statistics_list_swigregister(packet_statistics_list)

class packet_info_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_info_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_info_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.packet_info_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.packet_info_list___nonzero__(self)

    def __bool__(self):
        return _nsimcli.packet_info_list___bool__(self)

    def __len__(self):
        return _nsimcli.packet_info_list___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.packet_info_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.packet_info_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.packet_info_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.packet_info_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.packet_info_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.packet_info_list___setitem__(self, *args)

    def pop(self):
        return _nsimcli.packet_info_list_pop(self)

    def append(self, x):
        return _nsimcli.packet_info_list_append(self, x)

    def empty(self):
        return _nsimcli.packet_info_list_empty(self)

    def size(self):
        return _nsimcli.packet_info_list_size(self)

    def swap(self, v):
        return _nsimcli.packet_info_list_swap(self, v)

    def begin(self):
        return _nsimcli.packet_info_list_begin(self)

    def end(self):
        return _nsimcli.packet_info_list_end(self)

    def rbegin(self):
        return _nsimcli.packet_info_list_rbegin(self)

    def rend(self):
        return _nsimcli.packet_info_list_rend(self)

    def clear(self):
        return _nsimcli.packet_info_list_clear(self)

    def get_allocator(self):
        return _nsimcli.packet_info_list_get_allocator(self)

    def pop_back(self):
        return _nsimcli.packet_info_list_pop_back(self)

    def erase(self, *args):
        return _nsimcli.packet_info_list_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_packet_info_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.packet_info_list_push_back(self, x)

    def front(self):
        return _nsimcli.packet_info_list_front(self)

    def back(self):
        return _nsimcli.packet_info_list_back(self)

    def assign(self, n, x):
        return _nsimcli.packet_info_list_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.packet_info_list_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.packet_info_list_insert(self, *args)

    def pop_front(self):
        return _nsimcli.packet_info_list_pop_front(self)

    def push_front(self, x):
        return _nsimcli.packet_info_list_push_front(self, x)

    def reverse(self):
        return _nsimcli.packet_info_list_reverse(self)
    __swig_destroy__ = _nsimcli.delete_packet_info_list
    __del__ = lambda self: None
packet_info_list_swigregister = _nsimcli.packet_info_list_swigregister
packet_info_list_swigregister(packet_info_list)

class event_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, event_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, event_list, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nsimcli.event_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nsimcli.event_list___nonzero__(self)

    def __bool__(self):
        return _nsimcli.event_list___bool__(self)

    def __len__(self):
        return _nsimcli.event_list___len__(self)

    def __getslice__(self, i, j):
        return _nsimcli.event_list___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nsimcli.event_list___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nsimcli.event_list___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nsimcli.event_list___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nsimcli.event_list___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nsimcli.event_list___setitem__(self, *args)

    def pop(self):
        return _nsimcli.event_list_pop(self)

    def append(self, x):
        return _nsimcli.event_list_append(self, x)

    def empty(self):
        return _nsimcli.event_list_empty(self)

    def size(self):
        return _nsimcli.event_list_size(self)

    def swap(self, v):
        return _nsimcli.event_list_swap(self, v)

    def begin(self):
        return _nsimcli.event_list_begin(self)

    def end(self):
        return _nsimcli.event_list_end(self)

    def rbegin(self):
        return _nsimcli.event_list_rbegin(self)

    def rend(self):
        return _nsimcli.event_list_rend(self)

    def clear(self):
        return _nsimcli.event_list_clear(self)

    def get_allocator(self):
        return _nsimcli.event_list_get_allocator(self)

    def pop_back(self):
        return _nsimcli.event_list_pop_back(self)

    def erase(self, *args):
        return _nsimcli.event_list_erase(self, *args)

    def __init__(self, *args):
        this = _nsimcli.new_event_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _nsimcli.event_list_push_back(self, x)

    def front(self):
        return _nsimcli.event_list_front(self)

    def back(self):
        return _nsimcli.event_list_back(self)

    def assign(self, n, x):
        return _nsimcli.event_list_assign(self, n, x)

    def resize(self, *args):
        return _nsimcli.event_list_resize(self, *args)

    def insert(self, *args):
        return _nsimcli.event_list_insert(self, *args)

    def pop_front(self):
        return _nsimcli.event_list_pop_front(self)

    def push_front(self, x):
        return _nsimcli.event_list_push_front(self, x)

    def reverse(self):
        return _nsimcli.event_list_reverse(self)
    __swig_destroy__ = _nsimcli.delete_event_list
    __del__ = lambda self: None
event_list_swigregister = _nsimcli.event_list_swigregister
event_list_swigregister(event_list)

JSON_SKIP_NEW_KEYS = _nsimcli.JSON_SKIP_NEW_KEYS
JSON_SKIP_OLD_KEYS = _nsimcli.JSON_SKIP_OLD_KEYS
JSON_SAME_TYPE_ONLY = _nsimcli.JSON_SAME_TYPE_ONLY
JSON_EXTEND_ARRAY = _nsimcli.JSON_EXTEND_ARRAY
JSON_DEEP_IN_ARRAY = _nsimcli.JSON_DEEP_IN_ARRAY

def json_load_file_strip_comments(path, flags, error):
    return _nsimcli.json_load_file_strip_comments(path, flags, error)
json_load_file_strip_comments = _nsimcli.json_load_file_strip_comments

def json_load_from_string_vector_strip_comments(stringVec, flags, error):
    return _nsimcli.json_load_from_string_vector_strip_comments(stringVec, flags, error)
json_load_from_string_vector_strip_comments = _nsimcli.json_load_from_string_vector_strip_comments

def json_load_from_string_vector(stringVec, flags, error):
    return _nsimcli.json_load_from_string_vector(stringVec, flags, error)
json_load_from_string_vector = _nsimcli.json_load_from_string_vector

def json_deep_copy_and_assert(object):
    return _nsimcli.json_deep_copy_and_assert(object)
json_deep_copy_and_assert = _nsimcli.json_deep_copy_and_assert

def json_get_sub_element_recursively(root, path, error):
    return _nsimcli.json_get_sub_element_recursively(root, path, error)
json_get_sub_element_recursively = _nsimcli.json_get_sub_element_recursively

def json_is_sub_element_defined(root, path):
    return _nsimcli.json_is_sub_element_defined(root, path)
json_is_sub_element_defined = _nsimcli.json_is_sub_element_defined

def json_get_sub_element_recursively_and_assert(root, path):
    return _nsimcli.json_get_sub_element_recursively_and_assert(root, path)
json_get_sub_element_recursively_and_assert = _nsimcli.json_get_sub_element_recursively_and_assert

def json_get_sub_element_recursively_and_assert_cast_bool(root, path):
    return _nsimcli.json_get_sub_element_recursively_and_assert_cast_bool(root, path)
json_get_sub_element_recursively_and_assert_cast_bool = _nsimcli.json_get_sub_element_recursively_and_assert_cast_bool

def json_get_sub_element_recursively_and_assert_cast_int(root, path):
    return _nsimcli.json_get_sub_element_recursively_and_assert_cast_int(root, path)
json_get_sub_element_recursively_and_assert_cast_int = _nsimcli.json_get_sub_element_recursively_and_assert_cast_int

def json_get_sub_element_recursively_and_assert_cast_uint16_t(root, path):
    return _nsimcli.json_get_sub_element_recursively_and_assert_cast_uint16_t(root, path)
json_get_sub_element_recursively_and_assert_cast_uint16_t = _nsimcli.json_get_sub_element_recursively_and_assert_cast_uint16_t

def json_get_sub_element_recursively_and_assert_cast_char(root, path):
    return _nsimcli.json_get_sub_element_recursively_and_assert_cast_char(root, path)
json_get_sub_element_recursively_and_assert_cast_char = _nsimcli.json_get_sub_element_recursively_and_assert_cast_char

def json_get_sub_element_recursively_and_assert_cast_uint8_t(root, path):
    return _nsimcli.json_get_sub_element_recursively_and_assert_cast_uint8_t(root, path)
json_get_sub_element_recursively_and_assert_cast_uint8_t = _nsimcli.json_get_sub_element_recursively_and_assert_cast_uint8_t

def json_get_sub_element_recursively_if_exists(root, path, out_value):
    return _nsimcli.json_get_sub_element_recursively_if_exists(root, path, out_value)
json_get_sub_element_recursively_if_exists = _nsimcli.json_get_sub_element_recursively_if_exists

def json_get_sub_element_recursively_if_exists_cast_bool(root, path, out_value):
    return _nsimcli.json_get_sub_element_recursively_if_exists_cast_bool(root, path, out_value)
json_get_sub_element_recursively_if_exists_cast_bool = _nsimcli.json_get_sub_element_recursively_if_exists_cast_bool

def json_get_sub_element_recursively_if_exists_cast_int(root, path, out_value):
    return _nsimcli.json_get_sub_element_recursively_if_exists_cast_int(root, path, out_value)
json_get_sub_element_recursively_if_exists_cast_int = _nsimcli.json_get_sub_element_recursively_if_exists_cast_int

def json_get_sub_element_recursively_if_exists_cast_uint16_t(root, path, out_value):
    return _nsimcli.json_get_sub_element_recursively_if_exists_cast_uint16_t(root, path, out_value)
json_get_sub_element_recursively_if_exists_cast_uint16_t = _nsimcli.json_get_sub_element_recursively_if_exists_cast_uint16_t

def json_get_sub_element_recursively_if_exists_cast_char(root, path, out_value):
    return _nsimcli.json_get_sub_element_recursively_if_exists_cast_char(root, path, out_value)
json_get_sub_element_recursively_if_exists_cast_char = _nsimcli.json_get_sub_element_recursively_if_exists_cast_char

def json_get_sub_element_recursively_if_exists_cast_uint8_t(root, path, out_value):
    return _nsimcli.json_get_sub_element_recursively_if_exists_cast_uint8_t(root, path, out_value)
json_get_sub_element_recursively_if_exists_cast_uint8_t = _nsimcli.json_get_sub_element_recursively_if_exists_cast_uint8_t

def json_array_deep_update(array, other, flags, error, arrayName):
    return _nsimcli.json_array_deep_update(array, other, flags, error, arrayName)
json_array_deep_update = _nsimcli.json_array_deep_update

def json_object_deep_update(object, other, flags, error):
    return _nsimcli.json_object_deep_update(object, other, flags, error)
json_object_deep_update = _nsimcli.json_object_deep_update

def json_get_sub_object_sub_elements_names(object):
    return _nsimcli.json_get_sub_object_sub_elements_names(object)
json_get_sub_object_sub_elements_names = _nsimcli.json_get_sub_object_sub_elements_names

def json_unpretty(stringVec):
    return _nsimcli.json_unpretty(stringVec)
json_unpretty = _nsimcli.json_unpretty

def json_set_string_value_for_key_in_whole_tree(key_string, target_value, root):
    return _nsimcli.json_set_string_value_for_key_in_whole_tree(key_string, target_value, root)
json_set_string_value_for_key_in_whole_tree = _nsimcli.json_set_string_value_for_key_in_whole_tree

def json_object_multiple_update(object, other):
    return _nsimcli.json_object_multiple_update(object, other)
json_object_multiple_update = _nsimcli.json_object_multiple_update
class bit_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bit_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_bit_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def is_zero(self):
        return _nsimcli.bit_vector_is_zero(self)

    def is_true(self):
        return _nsimcli.bit_vector_is_true(self)

    def get_value(self):
        return _nsimcli.bit_vector_get_value(self)

    def set_value(self, value):
        return _nsimcli.bit_vector_set_value(self, value)

    def bit(self, pos):
        return _nsimcli.bit_vector_bit(self, pos)

    def reset(self):
        return _nsimcli.bit_vector_reset(self)

    def get_width(self):
        return _nsimcli.bit_vector_get_width(self)

    def get_minimal_width(self):
        return _nsimcli.bit_vector_get_minimal_width(self)

    def get_width_in_bytes(self):
        return _nsimcli.bit_vector_get_width_in_bytes(self)

    def bits(self, *args):
        return _nsimcli.bit_vector_bits(self, *args)

    def bits_from_msb(self, *args):
        return _nsimcli.bit_vector_bits_from_msb(self, *args)

    def bits_as_uint64_t(self, msb, lsb):
        return _nsimcli.bit_vector_bits_as_uint64_t(self, msb, lsb)

    def bits_from_msb_as_uint64_t(self, offset, width):
        return _nsimcli.bit_vector_bits_from_msb_as_uint64_t(self, offset, width)

    def set_bit(self, pos, val):
        return _nsimcli.bit_vector_set_bit(self, pos, val)

    def set_bits(self, *args):
        return _nsimcli.bit_vector_set_bits(self, *args)

    def set_bits_from_msb(self, *args):
        return _nsimcli.bit_vector_set_bits_from_msb(self, *args)

    def set_bits_from_uint64_t(self, *args):
        return _nsimcli.bit_vector_set_bits_from_uint64_t(self, *args)

    def set_bits_from_msb_from_uint64_t(self, offset, width, value):
        return _nsimcli.bit_vector_set_bits_from_msb_from_uint64_t(self, offset, width, value)

    def __invert__(self):
        return _nsimcli.bit_vector___invert__(self)

    def __or__(self, other):
        return _nsimcli.bit_vector___or__(self, other)

    def __and__(self, other):
        return _nsimcli.bit_vector___and__(self, other)

    def __xor__(self, other):
        return _nsimcli.bit_vector___xor__(self, other)

    def __lshift__(self, shift):
        return _nsimcli.bit_vector___lshift__(self, shift)

    def __add__(self, other):
        return _nsimcli.bit_vector___add__(self, other)

    def __mul__(self, other):
        return _nsimcli.bit_vector___mul__(self, other)

    def __ior__(self, other):
        return _nsimcli.bit_vector___ior__(self, other)

    def __iand__(self, other):
        return _nsimcli.bit_vector___iand__(self, other)

    def __ixor__(self, other):
        return _nsimcli.bit_vector___ixor__(self, other)

    def __ilshift__(self, shift):
        return _nsimcli.bit_vector___ilshift__(self, shift)

    def __iadd__(self, other):
        return _nsimcli.bit_vector___iadd__(self, other)

    def __eq__(self, *args):
        return _nsimcli.bit_vector___eq__(self, *args)

    def __ne__(self, other):
        return _nsimcli.bit_vector___ne__(self, other)

    def __lt__(self, other):
        return _nsimcli.bit_vector___lt__(self, other)

    def __le__(self, other):
        return _nsimcli.bit_vector___le__(self, other)

    def __gt__(self, other):
        return _nsimcli.bit_vector___gt__(self, other)

    def __ge__(self, other):
        return _nsimcli.bit_vector___ge__(self, other)

    def to_string(self):
        return _nsimcli.bit_vector_to_string(self)

    def to_string_without_leading_0(self):
        return _nsimcli.bit_vector_to_string_without_leading_0(self)

    def to_string_without_leading_0x(self):
        return _nsimcli.bit_vector_to_string_without_leading_0x(self)

    def clear(self):
        return _nsimcli.bit_vector_clear(self)

    def resize(self, *args):
        return _nsimcli.bit_vector_resize(self, *args)

    def byte_array(self, *args):
        return _nsimcli.bit_vector_byte_array(self, *args)
    if _newclass:
        ones = staticmethod(_nsimcli.bit_vector_ones)
    else:
        ones = _nsimcli.bit_vector_ones

    def add_fixed_width(self, first, second):
        return _nsimcli.bit_vector_add_fixed_width(self, first, second)

    def sub_fixed_width(self, first, second):
        return _nsimcli.bit_vector_sub_fixed_width(self, first, second)

    def and_or_mask(self, and_value, or_value):
        return _nsimcli.bit_vector_and_or_mask(self, and_value, or_value)

    def get(self, bits, width):
        return _nsimcli.bit_vector_get(self, bits, width)

    def set(self, bits, width):
        return _nsimcli.bit_vector_set(self, bits, width)
    __swig_destroy__ = _nsimcli.delete_bit_vector
    __del__ = lambda self: None
bit_vector_swigregister = _nsimcli.bit_vector_swigregister
bit_vector_swigregister(bit_vector)

def bit_vector_ones(width):
    return _nsimcli.bit_vector_ones(width)
bit_vector_ones = _nsimcli.bit_vector_ones

NPSUITE_LOG_LEVEL_TRACE = _nsimcli.NPSUITE_LOG_LEVEL_TRACE
NPSUITE_LOG_LEVEL_DEBUG = _nsimcli.NPSUITE_LOG_LEVEL_DEBUG
NPSUITE_LOG_LEVEL_INFO = _nsimcli.NPSUITE_LOG_LEVEL_INFO
NPSUITE_LOG_LEVEL_PROGRESS = _nsimcli.NPSUITE_LOG_LEVEL_PROGRESS
NPSUITE_LOG_LEVEL_WARNING = _nsimcli.NPSUITE_LOG_LEVEL_WARNING
NPSUITE_LOG_LEVEL_ESSENTIAL = _nsimcli.NPSUITE_LOG_LEVEL_ESSENTIAL
NPSUITE_LOG_LEVEL_ERROR = _nsimcli.NPSUITE_LOG_LEVEL_ERROR
NPSUITE_LOG_LEVEL_FATAL = _nsimcli.NPSUITE_LOG_LEVEL_FATAL
NPSUITE_LOG_LEVEL_NUM_LEVELS = _nsimcli.NPSUITE_LOG_LEVEL_NUM_LEVELS

def npsuite_log_level_e_to_string(e):
    return _nsimcli.npsuite_log_level_e_to_string(e)
npsuite_log_level_e_to_string = _nsimcli.npsuite_log_level_e_to_string
class npsuite_logger_message_callback_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, npsuite_logger_message_callback_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, npsuite_logger_message_callback_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["level"] = _nsimcli.npsuite_logger_message_callback_data_t_level_set
    __swig_getmethods__["level"] = _nsimcli.npsuite_logger_message_callback_data_t_level_get
    if _newclass:
        level = _swig_property(_nsimcli.npsuite_logger_message_callback_data_t_level_get, _nsimcli.npsuite_logger_message_callback_data_t_level_set)
    __swig_setmethods__["thread_prefix"] = _nsimcli.npsuite_logger_message_callback_data_t_thread_prefix_set
    __swig_getmethods__["thread_prefix"] = _nsimcli.npsuite_logger_message_callback_data_t_thread_prefix_get
    if _newclass:
        thread_prefix = _swig_property(_nsimcli.npsuite_logger_message_callback_data_t_thread_prefix_get, _nsimcli.npsuite_logger_message_callback_data_t_thread_prefix_set)
    __swig_setmethods__["msg_prefix"] = _nsimcli.npsuite_logger_message_callback_data_t_msg_prefix_set
    __swig_getmethods__["msg_prefix"] = _nsimcli.npsuite_logger_message_callback_data_t_msg_prefix_get
    if _newclass:
        msg_prefix = _swig_property(_nsimcli.npsuite_logger_message_callback_data_t_msg_prefix_get, _nsimcli.npsuite_logger_message_callback_data_t_msg_prefix_set)
    __swig_setmethods__["file"] = _nsimcli.npsuite_logger_message_callback_data_t_file_set
    __swig_getmethods__["file"] = _nsimcli.npsuite_logger_message_callback_data_t_file_get
    if _newclass:
        file = _swig_property(_nsimcli.npsuite_logger_message_callback_data_t_file_get, _nsimcli.npsuite_logger_message_callback_data_t_file_set)
    __swig_setmethods__["line"] = _nsimcli.npsuite_logger_message_callback_data_t_line_set
    __swig_getmethods__["line"] = _nsimcli.npsuite_logger_message_callback_data_t_line_get
    if _newclass:
        line = _swig_property(_nsimcli.npsuite_logger_message_callback_data_t_line_get, _nsimcli.npsuite_logger_message_callback_data_t_line_set)
    __swig_setmethods__["msg"] = _nsimcli.npsuite_logger_message_callback_data_t_msg_set
    __swig_getmethods__["msg"] = _nsimcli.npsuite_logger_message_callback_data_t_msg_get
    if _newclass:
        msg = _swig_property(_nsimcli.npsuite_logger_message_callback_data_t_msg_get, _nsimcli.npsuite_logger_message_callback_data_t_msg_set)

    def __init__(self):
        this = _nsimcli.new_npsuite_logger_message_callback_data_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_npsuite_logger_message_callback_data_t
    __del__ = lambda self: None
npsuite_logger_message_callback_data_t_swigregister = _nsimcli.npsuite_logger_message_callback_data_t_swigregister
npsuite_logger_message_callback_data_t_swigregister(npsuite_logger_message_callback_data_t)

class packet_statistics_database_access_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_statistics_database_access_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_statistics_database_access_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_packet_statistics_database_access_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_table_name"] = _nsimcli.packet_statistics_database_access_t_m_table_name_set
    __swig_getmethods__["m_table_name"] = _nsimcli.packet_statistics_database_access_t_m_table_name_get
    if _newclass:
        m_table_name = _swig_property(_nsimcli.packet_statistics_database_access_t_m_table_name_get, _nsimcli.packet_statistics_database_access_t_m_table_name_set)
    __swig_setmethods__["m_database_name"] = _nsimcli.packet_statistics_database_access_t_m_database_name_set
    __swig_getmethods__["m_database_name"] = _nsimcli.packet_statistics_database_access_t_m_database_name_get
    if _newclass:
        m_database_name = _swig_property(_nsimcli.packet_statistics_database_access_t_m_database_name_get, _nsimcli.packet_statistics_database_access_t_m_database_name_set)
    __swig_setmethods__["m_incoming_interface"] = _nsimcli.packet_statistics_database_access_t_m_incoming_interface_set
    __swig_getmethods__["m_incoming_interface"] = _nsimcli.packet_statistics_database_access_t_m_incoming_interface_get
    if _newclass:
        m_incoming_interface = _swig_property(_nsimcli.packet_statistics_database_access_t_m_incoming_interface_get, _nsimcli.packet_statistics_database_access_t_m_incoming_interface_set)
    __swig_setmethods__["m_outgoing_interface"] = _nsimcli.packet_statistics_database_access_t_m_outgoing_interface_set
    __swig_getmethods__["m_outgoing_interface"] = _nsimcli.packet_statistics_database_access_t_m_outgoing_interface_get
    if _newclass:
        m_outgoing_interface = _swig_property(_nsimcli.packet_statistics_database_access_t_m_outgoing_interface_get, _nsimcli.packet_statistics_database_access_t_m_outgoing_interface_set)
    __swig_destroy__ = _nsimcli.delete_packet_statistics_database_access_t
    __del__ = lambda self: None
packet_statistics_database_access_t_swigregister = _nsimcli.packet_statistics_database_access_t_swigregister
packet_statistics_database_access_t_swigregister(packet_statistics_database_access_t)

class packet_statistics_macro_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_statistics_macro_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_statistics_macro_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_packet_statistics_macro_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def insert_table_lookup(self, table_name, database_name, incoming_interface, outgoing_interface):
        return _nsimcli.packet_statistics_macro_t_insert_table_lookup(self, table_name, database_name, incoming_interface, outgoing_interface)
    __swig_setmethods__["m_macro_name"] = _nsimcli.packet_statistics_macro_t_m_macro_name_set
    __swig_getmethods__["m_macro_name"] = _nsimcli.packet_statistics_macro_t_m_macro_name_get
    if _newclass:
        m_macro_name = _swig_property(_nsimcli.packet_statistics_macro_t_m_macro_name_get, _nsimcli.packet_statistics_macro_t_m_macro_name_set)
    __swig_setmethods__["m_database_accesses"] = _nsimcli.packet_statistics_macro_t_m_database_accesses_set
    __swig_getmethods__["m_database_accesses"] = _nsimcli.packet_statistics_macro_t_m_database_accesses_get
    if _newclass:
        m_database_accesses = _swig_property(_nsimcli.packet_statistics_macro_t_m_database_accesses_get, _nsimcli.packet_statistics_macro_t_m_database_accesses_set)
    __swig_destroy__ = _nsimcli.delete_packet_statistics_macro_t
    __del__ = lambda self: None
packet_statistics_macro_t_swigregister = _nsimcli.packet_statistics_macro_t_swigregister
packet_statistics_macro_t_swigregister(packet_statistics_macro_t)

class packet_statistics_engine_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_statistics_engine_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_statistics_engine_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_packet_statistics_engine_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def insert_macro(self, name):
        return _nsimcli.packet_statistics_engine_t_insert_macro(self, name)

    def insert_table_lookup(self, table_name, database_name, incoming_interface, outgoing_interface):
        return _nsimcli.packet_statistics_engine_t_insert_table_lookup(self, table_name, database_name, incoming_interface, outgoing_interface)
    __swig_setmethods__["m_engine_name"] = _nsimcli.packet_statistics_engine_t_m_engine_name_set
    __swig_getmethods__["m_engine_name"] = _nsimcli.packet_statistics_engine_t_m_engine_name_get
    if _newclass:
        m_engine_name = _swig_property(_nsimcli.packet_statistics_engine_t_m_engine_name_get, _nsimcli.packet_statistics_engine_t_m_engine_name_set)
    __swig_setmethods__["m_is_hardware_npl"] = _nsimcli.packet_statistics_engine_t_m_is_hardware_npl_set
    __swig_getmethods__["m_is_hardware_npl"] = _nsimcli.packet_statistics_engine_t_m_is_hardware_npl_get
    if _newclass:
        m_is_hardware_npl = _swig_property(_nsimcli.packet_statistics_engine_t_m_is_hardware_npl_get, _nsimcli.packet_statistics_engine_t_m_is_hardware_npl_set)
    __swig_setmethods__["m_executed_macros"] = _nsimcli.packet_statistics_engine_t_m_executed_macros_set
    __swig_getmethods__["m_executed_macros"] = _nsimcli.packet_statistics_engine_t_m_executed_macros_get
    if _newclass:
        m_executed_macros = _swig_property(_nsimcli.packet_statistics_engine_t_m_executed_macros_get, _nsimcli.packet_statistics_engine_t_m_executed_macros_set)
    __swig_destroy__ = _nsimcli.delete_packet_statistics_engine_t
    __del__ = lambda self: None
packet_statistics_engine_t_swigregister = _nsimcli.packet_statistics_engine_t_swigregister
packet_statistics_engine_t_swigregister(packet_statistics_engine_t)

class packet_statistics_pass_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_statistics_pass_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_statistics_pass_t, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nsimcli.new_packet_statistics_pass_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def insert_macro(self, name, engine_name, is_hardware_npl):
        return _nsimcli.packet_statistics_pass_t_insert_macro(self, name, engine_name, is_hardware_npl)

    def insert_table_lookup(self, table_name, database_name, incoming_interface, outgoing_interface):
        return _nsimcli.packet_statistics_pass_t_insert_table_lookup(self, table_name, database_name, incoming_interface, outgoing_interface)
    __swig_setmethods__["m_engines"] = _nsimcli.packet_statistics_pass_t_m_engines_set
    __swig_getmethods__["m_engines"] = _nsimcli.packet_statistics_pass_t_m_engines_get
    if _newclass:
        m_engines = _swig_property(_nsimcli.packet_statistics_pass_t_m_engines_get, _nsimcli.packet_statistics_pass_t_m_engines_set)
    __swig_destroy__ = _nsimcli.delete_packet_statistics_pass_t
    __del__ = lambda self: None
packet_statistics_pass_t_swigregister = _nsimcli.packet_statistics_pass_t_swigregister
packet_statistics_pass_t_swigregister(packet_statistics_pass_t)

class packet_statistics_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_statistics_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_statistics_t, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nsimcli.new_packet_statistics_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def insert_macro(self, name, engine_name):
        return _nsimcli.packet_statistics_t_insert_macro(self, name, engine_name)

    def insert_hw_npl_control(self, name, file_name):
        return _nsimcli.packet_statistics_t_insert_hw_npl_control(self, name, file_name)

    def insert_ene_control(self, name):
        return _nsimcli.packet_statistics_t_insert_ene_control(self, name)

    def insert_table_lookup(self, table_name, database_name, incoming_interface, outgoing_interface):
        return _nsimcli.packet_statistics_t_insert_table_lookup(self, table_name, database_name, incoming_interface, outgoing_interface)

    def mark_recycle(self):
        return _nsimcli.packet_statistics_t_mark_recycle(self)

    def clear_stats(self):
        return _nsimcli.packet_statistics_t_clear_stats(self)

    def set_ingress_packet_id(self, thread_id, packet_id):
        return _nsimcli.packet_statistics_t_set_ingress_packet_id(self, thread_id, packet_id)

    def get_ingress_packet_id(self):
        return _nsimcli.packet_statistics_t_get_ingress_packet_id(self)
    __swig_setmethods__["m_thread_id"] = _nsimcli.packet_statistics_t_m_thread_id_set
    __swig_getmethods__["m_thread_id"] = _nsimcli.packet_statistics_t_m_thread_id_get
    if _newclass:
        m_thread_id = _swig_property(_nsimcli.packet_statistics_t_m_thread_id_get, _nsimcli.packet_statistics_t_m_thread_id_set)
    __swig_setmethods__["m_packet_id"] = _nsimcli.packet_statistics_t_m_packet_id_set
    __swig_getmethods__["m_packet_id"] = _nsimcli.packet_statistics_t_m_packet_id_get
    if _newclass:
        m_packet_id = _swig_property(_nsimcli.packet_statistics_t_m_packet_id_get, _nsimcli.packet_statistics_t_m_packet_id_set)
    __swig_setmethods__["m_passes"] = _nsimcli.packet_statistics_t_m_passes_set
    __swig_getmethods__["m_passes"] = _nsimcli.packet_statistics_t_m_passes_get
    if _newclass:
        m_passes = _swig_property(_nsimcli.packet_statistics_t_m_passes_get, _nsimcli.packet_statistics_t_m_passes_set)
    __swig_destroy__ = _nsimcli.delete_packet_statistics_t
    __del__ = lambda self: None
packet_statistics_t_swigregister = _nsimcli.packet_statistics_t_swigregister
packet_statistics_t_swigregister(packet_statistics_t)

NPU_HOST_SLICE = _nsimcli.NPU_HOST_SLICE
class nsim_config_interface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_config_interface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_config_interface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_nsim_config_interface
    __del__ = lambda self: None

    def insert_entry(self, table_name, index, key, payload):
        return _nsimcli.nsim_config_interface_insert_entry(self, table_name, index, key, payload)

    def insert_ternary_entry(self, table_name, index, line, key, mask, payload):
        return _nsimcli.nsim_config_interface_insert_ternary_entry(self, table_name, index, line, key, mask, payload)

    def insert_lpm_entry(self, table_name, index, key, length, payload):
        return _nsimcli.nsim_config_interface_insert_lpm_entry(self, table_name, index, key, length, payload)

    def erase_entry(self, table_name, index, key):
        return _nsimcli.nsim_config_interface_erase_entry(self, table_name, index, key)

    def erase_ternary_entry(self, table_name, index, line):
        return _nsimcli.nsim_config_interface_erase_ternary_entry(self, table_name, index, line)

    def erase_lpm_entry(self, table_name, index, key, length):
        return _nsimcli.nsim_config_interface_erase_lpm_entry(self, table_name, index, key, length)

    def get_entry(self, table_name, index, key, out_payload):
        return _nsimcli.nsim_config_interface_get_entry(self, table_name, index, key, out_payload)

    def get_ternary_entry(self, table_name, index, line, out_key, out_mask, out_payload):
        return _nsimcli.nsim_config_interface_get_ternary_entry(self, table_name, index, line, out_key, out_mask, out_payload)

    def get_lpm_entry(self, table_name, index, key, length, out_payload):
        return _nsimcli.nsim_config_interface_get_lpm_entry(self, table_name, index, key, length, out_payload)

    def update_entry(self, table_name, index, key, new_payload):
        return _nsimcli.nsim_config_interface_update_entry(self, table_name, index, key, new_payload)

    def update_ternary_entry(self, table_name, index, line, new_payload):
        return _nsimcli.nsim_config_interface_update_ternary_entry(self, table_name, index, line, new_payload)

    def update_lpm_entry(self, table_name, index, key, length, new_payload):
        return _nsimcli.nsim_config_interface_update_lpm_entry(self, table_name, index, key, length, new_payload)

    def place_udk(self, macro_id, table_components):
        return _nsimcli.nsim_config_interface_place_udk(self, macro_id, table_components)

    def set_counter(self, block_id, counter_index, value):
        return _nsimcli.nsim_config_interface_set_counter(self, block_id, counter_index, value)

    def get_counter(self, block_id, counter_index, clear_counter):
        return _nsimcli.nsim_config_interface_get_counter(self, block_id, counter_index, clear_counter)

    def get_sorted_table_names(self):
        return _nsimcli.nsim_config_interface_get_sorted_table_names(self)

    def get_table_id_by_name(self, table_name):
        return _nsimcli.nsim_config_interface_get_table_id_by_name(self, table_name)

    def subscribe_listener_to_table(self, table_listener, table_name, registration_id, type):
        return _nsimcli.nsim_config_interface_subscribe_listener_to_table(self, table_listener, table_name, registration_id, type)

    def unsubscribe_table_listener_from_table(self, table_name, table_listener, type):
        return _nsimcli.nsim_config_interface_unsubscribe_table_listener_from_table(self, table_name, table_listener, type)

    def unsubscribe_table_listener_from_all_tables(self, *args):
        return _nsimcli.nsim_config_interface_unsubscribe_table_listener_from_all_tables(self, *args)

    def subscribe_timer_listener(self, timer_listener, out_nsim_timer_resolution_ms, out_num_sim_sec_per_hw_sec):
        return _nsimcli.nsim_config_interface_subscribe_timer_listener(self, timer_listener, out_nsim_timer_resolution_ms, out_num_sim_sec_per_hw_sec)

    def unsubscribe_timer_listener(self, timer_listener):
        return _nsimcli.nsim_config_interface_unsubscribe_timer_listener(self, timer_listener)
nsim_config_interface_swigregister = _nsimcli.nsim_config_interface_swigregister
nsim_config_interface_swigregister(nsim_config_interface)

class nsim_source_location_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_source_location_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_source_location_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_scope"] = _nsimcli.nsim_source_location_info_t_m_scope_set
    __swig_getmethods__["m_scope"] = _nsimcli.nsim_source_location_info_t_m_scope_get
    if _newclass:
        m_scope = _swig_property(_nsimcli.nsim_source_location_info_t_m_scope_get, _nsimcli.nsim_source_location_info_t_m_scope_set)
    __swig_setmethods__["m_file_name"] = _nsimcli.nsim_source_location_info_t_m_file_name_set
    __swig_getmethods__["m_file_name"] = _nsimcli.nsim_source_location_info_t_m_file_name_get
    if _newclass:
        m_file_name = _swig_property(_nsimcli.nsim_source_location_info_t_m_file_name_get, _nsimcli.nsim_source_location_info_t_m_file_name_set)
    __swig_setmethods__["m_line_number"] = _nsimcli.nsim_source_location_info_t_m_line_number_set
    __swig_getmethods__["m_line_number"] = _nsimcli.nsim_source_location_info_t_m_line_number_get
    if _newclass:
        m_line_number = _swig_property(_nsimcli.nsim_source_location_info_t_m_line_number_get, _nsimcli.nsim_source_location_info_t_m_line_number_set)

    def __init__(self):
        this = _nsimcli.new_nsim_source_location_info_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_nsim_source_location_info_t
    __del__ = lambda self: None
nsim_source_location_info_t_swigregister = _nsimcli.nsim_source_location_info_t_swigregister
nsim_source_location_info_t_swigregister(nsim_source_location_info_t)

OVERSUBSCRIBED_INTERFACES_DETECTION_DISABLED = _nsimcli.OVERSUBSCRIBED_INTERFACES_DETECTION_DISABLED
OVERSUBSCRIBED_INTERFACES_DETECTION_WARN = _nsimcli.OVERSUBSCRIBED_INTERFACES_DETECTION_WARN
OVERSUBSCRIBED_INTERFACES_DETECTION_DROP = _nsimcli.OVERSUBSCRIBED_INTERFACES_DETECTION_DROP
class packet_statistics_filter_map_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, packet_statistics_filter_map_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, packet_statistics_filter_map_t, name)
    __repr__ = _swig_repr

    def __init__(self, v):
        this = _nsimcli.new_packet_statistics_filter_map_t(v)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __ior__(self, other):
        return _nsimcli.packet_statistics_filter_map_t___ior__(self, other)

    def __and__(self, other):
        return _nsimcli.packet_statistics_filter_map_t___and__(self, other)

    def __ne__(self, other):
        return _nsimcli.packet_statistics_filter_map_t___ne__(self, other)
    __swig_destroy__ = _nsimcli.delete_packet_statistics_filter_map_t
    __del__ = lambda self: None
packet_statistics_filter_map_t_swigregister = _nsimcli.packet_statistics_filter_map_t_swigregister
packet_statistics_filter_map_t_swigregister(packet_statistics_filter_map_t)

class nsim_control_interface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_control_interface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_control_interface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_nsim_control_interface
    __del__ = lambda self: None

    def is_nsim_standalone_mode(self):
        return _nsimcli.nsim_control_interface_is_nsim_standalone_mode(self)

    def step(self):
        return _nsimcli.nsim_control_interface_step(self)

    def step_macro(self):
        return _nsimcli.nsim_control_interface_step_macro(self)

    def step_packet(self):
        return _nsimcli.nsim_control_interface_step_packet(self)

    def reset_state(self):
        return _nsimcli.nsim_control_interface_reset_state(self)

    def get_current_packet_id(self):
        return _nsimcli.nsim_control_interface_get_current_packet_id(self)

    def packet_dma_enable(self, enable):
        return _nsimcli.nsim_control_interface_packet_dma_enable(self, enable)

    def is_packet_dma_enabled(self):
        return _nsimcli.nsim_control_interface_is_packet_dma_enabled(self)

    def get_device_name(self):
        return _nsimcli.nsim_control_interface_get_device_name(self)

    def get_device_revision(self):
        return _nsimcli.nsim_control_interface_get_device_revision(self)

    def get_current_npuh_time(self):
        return _nsimcli.nsim_control_interface_get_current_npuh_time(self)

    def get_input_queue_size(self):
        return _nsimcli.nsim_control_interface_get_input_queue_size(self)

    def get_output_queue_size(self):
        return _nsimcli.nsim_control_interface_get_output_queue_size(self)

    def is_port_up(self, slice_id, ifg, pif):
        return _nsimcli.nsim_control_interface_is_port_up(self, slice_id, ifg, pif)

    def register_port_state_change_cb(self, cb, opaque=None):
        return _nsimcli.nsim_control_interface_register_port_state_change_cb(self, cb, opaque)

    def unregister_port_state_change_cb(self, cb, opaque=None):
        return _nsimcli.nsim_control_interface_unregister_port_state_change_cb(self, cb, opaque)

    def get_port_config(self, slice_id, ifg, pif):
        return _nsimcli.nsim_control_interface_get_port_config(self, slice_id, ifg, pif)

    def register_port_config_change_cb(self, cb, opaque=None):
        return _nsimcli.nsim_control_interface_register_port_config_change_cb(self, cb, opaque)

    def unregister_port_config_change_cb(self, cb, opaque=None):
        return _nsimcli.nsim_control_interface_unregister_port_config_change_cb(self, cb, opaque)
nsim_control_interface_swigregister = _nsimcli.nsim_control_interface_swigregister
nsim_control_interface_swigregister(nsim_control_interface)
PACKET_STATISTICS_NO_FILTERS = cvar.PACKET_STATISTICS_NO_FILTERS
PACKET_STATISTICS_INCLUDE_HW_NPL = cvar.PACKET_STATISTICS_INCLUDE_HW_NPL
PACKET_STATISTICS_INVALID_FILTER = cvar.PACKET_STATISTICS_INVALID_FILTER

DB_TRIGGER_TYPE_RMEP = _nsimcli.DB_TRIGGER_TYPE_RMEP
DB_TRIGGER_TYPE_MP = _nsimcli.DB_TRIGGER_TYPE_MP
DB_TRIGGER_MP_TABLE_TYPE_INVALID = _nsimcli.DB_TRIGGER_MP_TABLE_TYPE_INVALID
DB_TRIGGER_MP_TABLE_TYPE_INJECT_CCM = _nsimcli.DB_TRIGGER_MP_TABLE_TYPE_INJECT_CCM
DB_TRIGGER_MP_TABLE_TYPE_INJECT_DMM = _nsimcli.DB_TRIGGER_MP_TABLE_TYPE_INJECT_DMM
DB_TRIGGER_MP_TABLE_TYPE_INJECT_LMM = _nsimcli.DB_TRIGGER_MP_TABLE_TYPE_INJECT_LMM
class nsim_packet_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_packet_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_packet_info_t, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nsimcli.new_nsim_packet_info_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_args(self, bytes, slice_id, ifg, pif):
        return _nsimcli.nsim_packet_info_t_set_args(self, bytes, slice_id, ifg, pif)
    __swig_setmethods__["m_packet_data"] = _nsimcli.nsim_packet_info_t_m_packet_data_set
    __swig_getmethods__["m_packet_data"] = _nsimcli.nsim_packet_info_t_m_packet_data_get
    if _newclass:
        m_packet_data = _swig_property(_nsimcli.nsim_packet_info_t_m_packet_data_get, _nsimcli.nsim_packet_info_t_m_packet_data_set)
    __swig_setmethods__["m_slice_id"] = _nsimcli.nsim_packet_info_t_m_slice_id_set
    __swig_getmethods__["m_slice_id"] = _nsimcli.nsim_packet_info_t_m_slice_id_get
    if _newclass:
        m_slice_id = _swig_property(_nsimcli.nsim_packet_info_t_m_slice_id_get, _nsimcli.nsim_packet_info_t_m_slice_id_set)
    __swig_setmethods__["m_ifg"] = _nsimcli.nsim_packet_info_t_m_ifg_set
    __swig_getmethods__["m_ifg"] = _nsimcli.nsim_packet_info_t_m_ifg_get
    if _newclass:
        m_ifg = _swig_property(_nsimcli.nsim_packet_info_t_m_ifg_get, _nsimcli.nsim_packet_info_t_m_ifg_set)
    __swig_setmethods__["m_pif"] = _nsimcli.nsim_packet_info_t_m_pif_set
    __swig_getmethods__["m_pif"] = _nsimcli.nsim_packet_info_t_m_pif_get
    if _newclass:
        m_pif = _swig_property(_nsimcli.nsim_packet_info_t_m_pif_get, _nsimcli.nsim_packet_info_t_m_pif_set)
    __swig_setmethods__["m_should_dump_state"] = _nsimcli.nsim_packet_info_t_m_should_dump_state_set
    __swig_getmethods__["m_should_dump_state"] = _nsimcli.nsim_packet_info_t_m_should_dump_state_get
    if _newclass:
        m_should_dump_state = _swig_property(_nsimcli.nsim_packet_info_t_m_should_dump_state_get, _nsimcli.nsim_packet_info_t_m_should_dump_state_set)
    __swig_setmethods__["m_packet_statistics"] = _nsimcli.nsim_packet_info_t_m_packet_statistics_set
    __swig_getmethods__["m_packet_statistics"] = _nsimcli.nsim_packet_info_t_m_packet_statistics_get
    if _newclass:
        m_packet_statistics = _swig_property(_nsimcli.nsim_packet_info_t_m_packet_statistics_get, _nsimcli.nsim_packet_info_t_m_packet_statistics_set)

    def set_args_and_dump(self, bytes, slice_id, ifg, pif, dump_state):
        return _nsimcli.nsim_packet_info_t_set_args_and_dump(self, bytes, slice_id, ifg, pif, dump_state)
    __swig_destroy__ = _nsimcli.delete_nsim_packet_info_t
    __del__ = lambda self: None
nsim_packet_info_t_swigregister = _nsimcli.nsim_packet_info_t_swigregister
nsim_packet_info_t_swigregister(nsim_packet_info_t)

class nsim_db_trigger_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_db_trigger_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_db_trigger_info_t, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nsimcli.new_nsim_db_trigger_info_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_args(self, line_id, trigger_type, mp_type):
        return _nsimcli.nsim_db_trigger_info_t_set_args(self, line_id, trigger_type, mp_type)
    __swig_setmethods__["m_line_id"] = _nsimcli.nsim_db_trigger_info_t_m_line_id_set
    __swig_getmethods__["m_line_id"] = _nsimcli.nsim_db_trigger_info_t_m_line_id_get
    if _newclass:
        m_line_id = _swig_property(_nsimcli.nsim_db_trigger_info_t_m_line_id_get, _nsimcli.nsim_db_trigger_info_t_m_line_id_set)
    __swig_setmethods__["m_trigger_type"] = _nsimcli.nsim_db_trigger_info_t_m_trigger_type_set
    __swig_getmethods__["m_trigger_type"] = _nsimcli.nsim_db_trigger_info_t_m_trigger_type_get
    if _newclass:
        m_trigger_type = _swig_property(_nsimcli.nsim_db_trigger_info_t_m_trigger_type_get, _nsimcli.nsim_db_trigger_info_t_m_trigger_type_set)
    __swig_setmethods__["m_mp_type"] = _nsimcli.nsim_db_trigger_info_t_m_mp_type_set
    __swig_getmethods__["m_mp_type"] = _nsimcli.nsim_db_trigger_info_t_m_mp_type_get
    if _newclass:
        m_mp_type = _swig_property(_nsimcli.nsim_db_trigger_info_t_m_mp_type_get, _nsimcli.nsim_db_trigger_info_t_m_mp_type_set)
    __swig_destroy__ = _nsimcli.delete_nsim_db_trigger_info_t
    __del__ = lambda self: None
nsim_db_trigger_info_t_swigregister = _nsimcli.nsim_db_trigger_info_t_swigregister
nsim_db_trigger_info_t_swigregister(nsim_db_trigger_info_t)

class nsim_data_interface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_data_interface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_data_interface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_nsim_data_interface
    __del__ = lambda self: None

    def inject_packet(self, packet_info, initial_values):
        return _nsimcli.nsim_data_interface_inject_packet(self, packet_info, initial_values)

    def inject_db_trigger(self, trigger_info):
        return _nsimcli.nsim_data_interface_inject_db_trigger(self, trigger_info)

    def trigger_lrc_fifo(self):
        return _nsimcli.nsim_data_interface_trigger_lrc_fifo(self)

    def get_and_clear_output_packets(self, *args):
        return _nsimcli.nsim_data_interface_get_and_clear_output_packets(self, *args)

    def get_and_clear_packet_dma_extract_n(self, ctx_id, packets_avail, bytes_avail):
        return _nsimcli.nsim_data_interface_get_and_clear_packet_dma_extract_n(self, ctx_id, packets_avail, bytes_avail)

    def get_and_clear_packet_dma_extract_queue(self, *args):
        return _nsimcli.nsim_data_interface_get_and_clear_packet_dma_extract_queue(self, *args)

    def get_and_clear_event_queue(self):
        return _nsimcli.nsim_data_interface_get_and_clear_event_queue(self)

    def get_event_queue_write_ptr(self):
        return _nsimcli.nsim_data_interface_get_event_queue_write_ptr(self)

    def get_event_queue_read_ptr(self):
        return _nsimcli.nsim_data_interface_get_event_queue_read_ptr(self)

    def get_event_queue_entry(self, read_address):
        return _nsimcli.nsim_data_interface_get_event_queue_entry(self, read_address)

    def update_event_queue_read_ptr(self, address):
        return _nsimcli.nsim_data_interface_update_event_queue_read_ptr(self, address)
nsim_data_interface_swigregister = _nsimcli.nsim_data_interface_swigregister
nsim_data_interface_swigregister(nsim_data_interface)

MAX_LOG_DISABLED = _nsimcli.MAX_LOG_DISABLED
LOG_FILE_COMPRESSION_DISABLED = _nsimcli.LOG_FILE_COMPRESSION_DISABLED
NSIM_LOG_NONE = _nsimcli.NSIM_LOG_NONE
NSIM_LOG_TABLE = _nsimcli.NSIM_LOG_TABLE
NSIM_LOG_USER = _nsimcli.NSIM_LOG_USER
NSIM_LOG_FULL = _nsimcli.NSIM_LOG_FULL

def nsim_log_module_e_to_string(e):
    return _nsimcli.nsim_log_module_e_to_string(e)
nsim_log_module_e_to_string = _nsimcli.nsim_log_module_e_to_string
class nsim_log_interface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_log_interface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_log_interface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_nsim_log_interface
    __del__ = lambda self: None

    def set_log_level(self, module):
        return _nsimcli.nsim_log_interface_set_log_level(self, module)

    def set_module_file_log_level(self, module, level):
        return _nsimcli.nsim_log_interface_set_module_file_log_level(self, module, level)

    def set_module_stdout_log_level(self, module, level):
        return _nsimcli.nsim_log_interface_set_module_stdout_log_level(self, module, level)

    def set_log_file(self, *args):
        return _nsimcli.nsim_log_interface_set_log_file(self, *args)

    def nsim_log_message(self, loglevel, user_prefix_identifier, message):
        return _nsimcli.nsim_log_interface_nsim_log_message(self, loglevel, user_prefix_identifier, message)
nsim_log_interface_swigregister = _nsimcli.nsim_log_interface_swigregister
nsim_log_interface_swigregister(nsim_log_interface)


def nsim_create_and_init(source_path, leaba_defined_path, additional_params):
    return _nsimcli.nsim_create_and_init(source_path, leaba_defined_path, additional_params)
nsim_create_and_init = _nsimcli.nsim_create_and_init

def nsim_create(source_path, leaba_defined_path):
    return _nsimcli.nsim_create(source_path, leaba_defined_path)
nsim_create = _nsimcli.nsim_create

def nsim_log_message(opaque, nsim_log_level, user_prefix_identifier, message):
    return _nsimcli.nsim_log_message(opaque, nsim_log_level, user_prefix_identifier, message)
nsim_log_message = _nsimcli.nsim_log_message
class nsim_core(nsim_log_interface, nsim_config_interface, nsim_control_interface, nsim_data_interface):
    __swig_setmethods__ = {}
    for _s in [nsim_log_interface, nsim_config_interface, nsim_control_interface, nsim_data_interface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_core, name, value)
    __swig_getmethods__ = {}
    for _s in [nsim_log_interface, nsim_config_interface, nsim_control_interface, nsim_data_interface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_core, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_nsim_core
    __del__ = lambda self: None

    def initialize(self):
        return _nsimcli.nsim_core_initialize(self)

    def register_nsim_holder(self, holder):
        return _nsimcli.nsim_core_register_nsim_holder(self, holder)

    def unregister_nsim_holder(self, holder):
        return _nsimcli.nsim_core_unregister_nsim_holder(self, holder)

    def set_slice_context(self, slice_id, context_id):
        return _nsimcli.nsim_core_set_slice_context(self, slice_id, context_id)

    def get_release_version(self):
        return _nsimcli.nsim_core_get_release_version(self)

    def get_num_of_packet_processing_threads(self):
        return _nsimcli.nsim_core_get_num_of_packet_processing_threads(self)
nsim_core_swigregister = _nsimcli.nsim_core_swigregister
nsim_core_swigregister(nsim_core)

class nsim_holder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_holder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_holder, name)
    __repr__ = _swig_repr

    def __init__(self, nsim):
        this = _nsimcli.new_nsim_holder(nsim)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_nsim_holder
    __del__ = lambda self: None

    def remove_pointer_to_nsim(self):
        return _nsimcli.nsim_holder_remove_pointer_to_nsim(self)

    def get_nsim(self):
        return _nsimcli.nsim_holder_get_nsim(self)
nsim_holder_swigregister = _nsimcli.nsim_holder_swigregister
nsim_holder_swigregister(nsim_holder)

DATA_NOTIFICATION_EVENT_READ = _nsimcli.DATA_NOTIFICATION_EVENT_READ
DATA_NOTIFICATION_EVENT_PRE_WRITE = _nsimcli.DATA_NOTIFICATION_EVENT_PRE_WRITE
DATA_NOTIFICATION_EVENT_POST_WRITE = _nsimcli.DATA_NOTIFICATION_EVENT_POST_WRITE
DATA_NOTIFICATION_EVENT_VALUE_CHANGED = _nsimcli.DATA_NOTIFICATION_EVENT_VALUE_CHANGED
DATA_NOTIFICATION_EVENT_ALL = _nsimcli.DATA_NOTIFICATION_EVENT_ALL
DATA_NOTIFICATION_EVENT_TYPE_READ = _nsimcli.DATA_NOTIFICATION_EVENT_TYPE_READ
DATA_NOTIFICATION_EVENT_TYPE_PRE_WRITE = _nsimcli.DATA_NOTIFICATION_EVENT_TYPE_PRE_WRITE
DATA_NOTIFICATION_EVENT_TYPE_POST_WRITE = _nsimcli.DATA_NOTIFICATION_EVENT_TYPE_POST_WRITE
DATA_NOTIFICATION_EVENT_TYPE_VALUE_CHANGED = _nsimcli.DATA_NOTIFICATION_EVENT_TYPE_VALUE_CHANGED
class nsim_data_listener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_data_listener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_data_listener, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_nsim_data_listener
    __del__ = lambda self: None

    def notify(self, fd, type):
        return _nsimcli.nsim_data_listener_notify(self, fd, type)

    def subscribe_to_data_notifications(self, *args):
        return _nsimcli.nsim_data_listener_subscribe_to_data_notifications(self, *args)

    def unsubscribe_from_data_notifications(self, *args):
        return _nsimcli.nsim_data_listener_unsubscribe_from_data_notifications(self, *args)

    def unsubscribe_from_all_data_notifications(self):
        return _nsimcli.nsim_data_listener_unsubscribe_from_all_data_notifications(self)
nsim_data_listener_swigregister = _nsimcli.nsim_data_listener_swigregister
nsim_data_listener_swigregister(nsim_data_listener)

NSIM_BITS_PER_BYTE = _nsimcli.NSIM_BITS_PER_BYTE
NSIM_FIELD_DESC_TYPE_REGULAR = _nsimcli.NSIM_FIELD_DESC_TYPE_REGULAR
NSIM_FIELD_DESC_TYPE_PD_PACKET = _nsimcli.NSIM_FIELD_DESC_TYPE_PD_PACKET
NSIM_FIELD_DESC_TYPE_PD_HEADER_INFO = _nsimcli.NSIM_FIELD_DESC_TYPE_PD_HEADER_INFO
NSIM_FIELD_DESC_TYPE_PACKET_DATA = _nsimcli.NSIM_FIELD_DESC_TYPE_PACKET_DATA
NSIM_FIELD_DESC_TYPE_PACKET_SIZE = _nsimcli.NSIM_FIELD_DESC_TYPE_PACKET_SIZE
NSIM_FIELD_DESC_TYPE_FULL_PACKET = _nsimcli.NSIM_FIELD_DESC_TYPE_FULL_PACKET
NSIM_FIELD_DESC_TYPE_SHARED_METADATA_HIT = _nsimcli.NSIM_FIELD_DESC_TYPE_SHARED_METADATA_HIT
nsim_table_line_op_type_e_NSIM_TABLE_LINE_OP_TYPE_INSERT = _nsimcli.nsim_table_line_op_type_e_NSIM_TABLE_LINE_OP_TYPE_INSERT
nsim_table_line_op_type_e_NSIM_TABLE_LINE_OP_TYPE_UPDATE = _nsimcli.nsim_table_line_op_type_e_NSIM_TABLE_LINE_OP_TYPE_UPDATE
nsim_table_line_op_type_e_NSIM_TABLE_LINE_OP_TYPE_DELETE = _nsimcli.nsim_table_line_op_type_e_NSIM_TABLE_LINE_OP_TYPE_DELETE
nsim_table_line_op_type_e_NSIM_TABLE_LINE_OP_TYPE_INVALID = _nsimcli.nsim_table_line_op_type_e_NSIM_TABLE_LINE_OP_TYPE_INVALID
class nsim_pd_packet_data_and_info_access_vars_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_pd_packet_data_and_info_access_vars_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_pd_packet_data_and_info_access_vars_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_nsim_pd_packet_data_and_info_access_vars_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_protocol_layer_array_access"] = _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_protocol_layer_array_access_set
    __swig_getmethods__["m_protocol_layer_array_access"] = _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_protocol_layer_array_access_get
    if _newclass:
        m_protocol_layer_array_access = _swig_property(_nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_protocol_layer_array_access_get, _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_protocol_layer_array_access_set)
    __swig_setmethods__["m_absolute_protocol_layer"] = _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_absolute_protocol_layer_set
    __swig_getmethods__["m_absolute_protocol_layer"] = _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_absolute_protocol_layer_get
    if _newclass:
        m_absolute_protocol_layer = _swig_property(_nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_absolute_protocol_layer_get, _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_absolute_protocol_layer_set)
    __swig_setmethods__["m_protocol_layer_index"] = _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_protocol_layer_index_set
    __swig_getmethods__["m_protocol_layer_index"] = _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_protocol_layer_index_get
    if _newclass:
        m_protocol_layer_index = _swig_property(_nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_protocol_layer_index_get, _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_protocol_layer_index_set)
    __swig_setmethods__["m_header_info_index"] = _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_header_info_index_set
    __swig_getmethods__["m_header_info_index"] = _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_header_info_index_get
    if _newclass:
        m_header_info_index = _swig_property(_nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_header_info_index_get, _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_m_header_info_index_set)
    __swig_destroy__ = _nsimcli.delete_nsim_pd_packet_data_and_info_access_vars_t
    __del__ = lambda self: None
nsim_pd_packet_data_and_info_access_vars_t_swigregister = _nsimcli.nsim_pd_packet_data_and_info_access_vars_t_swigregister
nsim_pd_packet_data_and_info_access_vars_t_swigregister(nsim_pd_packet_data_and_info_access_vars_t)

class nsim_field_desc_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_field_desc_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_field_desc_t, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nsimcli.new_nsim_field_desc_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_name"] = _nsimcli.nsim_field_desc_t_m_name_set
    __swig_getmethods__["m_name"] = _nsimcli.nsim_field_desc_t_m_name_get
    if _newclass:
        m_name = _swig_property(_nsimcli.nsim_field_desc_t_m_name_get, _nsimcli.nsim_field_desc_t_m_name_set)
    __swig_setmethods__["m_metadata_name"] = _nsimcli.nsim_field_desc_t_m_metadata_name_set
    __swig_getmethods__["m_metadata_name"] = _nsimcli.nsim_field_desc_t_m_metadata_name_get
    if _newclass:
        m_metadata_name = _swig_property(_nsimcli.nsim_field_desc_t_m_metadata_name_get, _nsimcli.nsim_field_desc_t_m_metadata_name_set)
    __swig_setmethods__["m_metadata_index"] = _nsimcli.nsim_field_desc_t_m_metadata_index_set
    __swig_getmethods__["m_metadata_index"] = _nsimcli.nsim_field_desc_t_m_metadata_index_get
    if _newclass:
        m_metadata_index = _swig_property(_nsimcli.nsim_field_desc_t_m_metadata_index_get, _nsimcli.nsim_field_desc_t_m_metadata_index_set)
    __swig_setmethods__["m_offset"] = _nsimcli.nsim_field_desc_t_m_offset_set
    __swig_getmethods__["m_offset"] = _nsimcli.nsim_field_desc_t_m_offset_get
    if _newclass:
        m_offset = _swig_property(_nsimcli.nsim_field_desc_t_m_offset_get, _nsimcli.nsim_field_desc_t_m_offset_set)
    __swig_setmethods__["m_width"] = _nsimcli.nsim_field_desc_t_m_width_set
    __swig_getmethods__["m_width"] = _nsimcli.nsim_field_desc_t_m_width_get
    if _newclass:
        m_width = _swig_property(_nsimcli.nsim_field_desc_t_m_width_get, _nsimcli.nsim_field_desc_t_m_width_set)
    __swig_setmethods__["m_field_desc_type"] = _nsimcli.nsim_field_desc_t_m_field_desc_type_set
    __swig_getmethods__["m_field_desc_type"] = _nsimcli.nsim_field_desc_t_m_field_desc_type_get
    if _newclass:
        m_field_desc_type = _swig_property(_nsimcli.nsim_field_desc_t_m_field_desc_type_get, _nsimcli.nsim_field_desc_t_m_field_desc_type_set)
    __swig_setmethods__["m_packet_data_and_info_access_vars"] = _nsimcli.nsim_field_desc_t_m_packet_data_and_info_access_vars_set
    __swig_getmethods__["m_packet_data_and_info_access_vars"] = _nsimcli.nsim_field_desc_t_m_packet_data_and_info_access_vars_get
    if _newclass:
        m_packet_data_and_info_access_vars = _swig_property(_nsimcli.nsim_field_desc_t_m_packet_data_and_info_access_vars_get, _nsimcli.nsim_field_desc_t_m_packet_data_and_info_access_vars_set)
    __swig_destroy__ = _nsimcli.delete_nsim_field_desc_t
    __del__ = lambda self: None
nsim_field_desc_t_swigregister = _nsimcli.nsim_field_desc_t_swigregister
nsim_field_desc_t_swigregister(nsim_field_desc_t)

class single_metadata_listener_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, single_metadata_listener_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, single_metadata_listener_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_listener"] = _nsimcli.single_metadata_listener_t_m_listener_set
    __swig_getmethods__["m_listener"] = _nsimcli.single_metadata_listener_t_m_listener_get
    if _newclass:
        m_listener = _swig_property(_nsimcli.single_metadata_listener_t_m_listener_get, _nsimcli.single_metadata_listener_t_m_listener_set)
    __swig_setmethods__["m_metadata_notification_type"] = _nsimcli.single_metadata_listener_t_m_metadata_notification_type_set
    __swig_getmethods__["m_metadata_notification_type"] = _nsimcli.single_metadata_listener_t_m_metadata_notification_type_get
    if _newclass:
        m_metadata_notification_type = _swig_property(_nsimcli.single_metadata_listener_t_m_metadata_notification_type_get, _nsimcli.single_metadata_listener_t_m_metadata_notification_type_set)
    __swig_setmethods__["m_field_desc"] = _nsimcli.single_metadata_listener_t_m_field_desc_set
    __swig_getmethods__["m_field_desc"] = _nsimcli.single_metadata_listener_t_m_field_desc_get
    if _newclass:
        m_field_desc = _swig_property(_nsimcli.single_metadata_listener_t_m_field_desc_get, _nsimcli.single_metadata_listener_t_m_field_desc_set)

    def __init__(self, listener, metadata_notification_type, field_desc):
        this = _nsimcli.new_single_metadata_listener_t(listener, metadata_notification_type, field_desc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_single_metadata_listener_t
    __del__ = lambda self: None
single_metadata_listener_t_swigregister = _nsimcli.single_metadata_listener_t_swigregister
single_metadata_listener_t_swigregister(single_metadata_listener_t)

class single_metadata_holder_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, single_metadata_holder_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, single_metadata_holder_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _nsimcli.single_metadata_holder_t_data_set
    __swig_getmethods__["data"] = _nsimcli.single_metadata_holder_t_data_get
    if _newclass:
        data = _swig_property(_nsimcli.single_metadata_holder_t_data_get, _nsimcli.single_metadata_holder_t_data_set)
    __swig_setmethods__["read_ptr"] = _nsimcli.single_metadata_holder_t_read_ptr_set
    __swig_getmethods__["read_ptr"] = _nsimcli.single_metadata_holder_t_read_ptr_get
    if _newclass:
        read_ptr = _swig_property(_nsimcli.single_metadata_holder_t_read_ptr_get, _nsimcli.single_metadata_holder_t_read_ptr_set)
    __swig_setmethods__["write_ptr"] = _nsimcli.single_metadata_holder_t_write_ptr_set
    __swig_getmethods__["write_ptr"] = _nsimcli.single_metadata_holder_t_write_ptr_get
    if _newclass:
        write_ptr = _swig_property(_nsimcli.single_metadata_holder_t_write_ptr_get, _nsimcli.single_metadata_holder_t_write_ptr_set)
    __swig_setmethods__["single_metadata_listeners"] = _nsimcli.single_metadata_holder_t_single_metadata_listeners_set
    __swig_getmethods__["single_metadata_listeners"] = _nsimcli.single_metadata_holder_t_single_metadata_listeners_get
    if _newclass:
        single_metadata_listeners = _swig_property(_nsimcli.single_metadata_holder_t_single_metadata_listeners_get, _nsimcli.single_metadata_holder_t_single_metadata_listeners_set)

    def __init__(self, *args):
        this = _nsimcli.new_single_metadata_holder_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_single_metadata_holder_t
    __del__ = lambda self: None
single_metadata_holder_t_swigregister = _nsimcli.single_metadata_holder_t_swigregister
single_metadata_holder_t_swigregister(single_metadata_holder_t)

class npl_utils_descriptors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, npl_utils_descriptors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, npl_utils_descriptors, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nsimcli.new_npl_utils_descriptors()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_current_protocol_layer_desc"] = _nsimcli.npl_utils_descriptors_m_current_protocol_layer_desc_set
    __swig_getmethods__["m_current_protocol_layer_desc"] = _nsimcli.npl_utils_descriptors_m_current_protocol_layer_desc_get
    if _newclass:
        m_current_protocol_layer_desc = _swig_property(_nsimcli.npl_utils_descriptors_m_current_protocol_layer_desc_get, _nsimcli.npl_utils_descriptors_m_current_protocol_layer_desc_set)
    __swig_setmethods__["m_pd_raw_packet"] = _nsimcli.npl_utils_descriptors_m_pd_raw_packet_set
    __swig_getmethods__["m_pd_raw_packet"] = _nsimcli.npl_utils_descriptors_m_pd_raw_packet_get
    if _newclass:
        m_pd_raw_packet = _swig_property(_nsimcli.npl_utils_descriptors_m_pd_raw_packet_get, _nsimcli.npl_utils_descriptors_m_pd_raw_packet_set)
    __swig_setmethods__["m_pkt_desc"] = _nsimcli.npl_utils_descriptors_m_pkt_desc_set
    __swig_getmethods__["m_pkt_desc"] = _nsimcli.npl_utils_descriptors_m_pkt_desc_get
    if _newclass:
        m_pkt_desc = _swig_property(_nsimcli.npl_utils_descriptors_m_pkt_desc_get, _nsimcli.npl_utils_descriptors_m_pkt_desc_set)
    __swig_setmethods__["m_pkt_size_desc"] = _nsimcli.npl_utils_descriptors_m_pkt_size_desc_set
    __swig_getmethods__["m_pkt_size_desc"] = _nsimcli.npl_utils_descriptors_m_pkt_size_desc_get
    if _newclass:
        m_pkt_size_desc = _swig_property(_nsimcli.npl_utils_descriptors_m_pkt_size_desc_get, _nsimcli.npl_utils_descriptors_m_pkt_size_desc_set)
    __swig_setmethods__["m_header_info_array"] = _nsimcli.npl_utils_descriptors_m_header_info_array_set
    __swig_getmethods__["m_header_info_array"] = _nsimcli.npl_utils_descriptors_m_header_info_array_get
    if _newclass:
        m_header_info_array = _swig_property(_nsimcli.npl_utils_descriptors_m_header_info_array_get, _nsimcli.npl_utils_descriptors_m_header_info_array_set)
    __swig_setmethods__["m_header_info_array_offset"] = _nsimcli.npl_utils_descriptors_m_header_info_array_offset_set
    __swig_getmethods__["m_header_info_array_offset"] = _nsimcli.npl_utils_descriptors_m_header_info_array_offset_get
    if _newclass:
        m_header_info_array_offset = _swig_property(_nsimcli.npl_utils_descriptors_m_header_info_array_offset_get, _nsimcli.npl_utils_descriptors_m_header_info_array_offset_set)
    __swig_setmethods__["m_protocol_layer_bitmap"] = _nsimcli.npl_utils_descriptors_m_protocol_layer_bitmap_set
    __swig_getmethods__["m_protocol_layer_bitmap"] = _nsimcli.npl_utils_descriptors_m_protocol_layer_bitmap_get
    if _newclass:
        m_protocol_layer_bitmap = _swig_property(_nsimcli.npl_utils_descriptors_m_protocol_layer_bitmap_get, _nsimcli.npl_utils_descriptors_m_protocol_layer_bitmap_set)
    __swig_destroy__ = _nsimcli.delete_npl_utils_descriptors
    __del__ = lambda self: None
npl_utils_descriptors_swigregister = _nsimcli.npl_utils_descriptors_swigregister
npl_utils_descriptors_swigregister(npl_utils_descriptors)

class npl_utils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, npl_utils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, npl_utils, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nsimcli.new_npl_utils()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_compound_table_result_list(self, compound_table, ignore_multi_results_parts_table_check=False):
        return _nsimcli.npl_utils_get_compound_table_result_list(self, compound_table, ignore_multi_results_parts_table_check)

    def get_compound_table_result_hit_list(self, compound_table):
        return _nsimcli.npl_utils_get_compound_table_result_hit_list(self, compound_table)

    def get_npl_utils_descriptors(self):
        return _nsimcli.npl_utils_get_npl_utils_descriptors(self)

    def calc_table_key_size(self, table):
        return _nsimcli.npl_utils_calc_table_key_size(self, table)

    def calc_table_payload_size(self, table, include_action_bits):
        return _nsimcli.npl_utils_calc_table_payload_size(self, table, include_action_bits)
    if _newclass:
        calc_lpm_start_bit_and_width_for_lpm_table = staticmethod(_nsimcli.npl_utils_calc_lpm_start_bit_and_width_for_lpm_table)
    else:
        calc_lpm_start_bit_and_width_for_lpm_table = _nsimcli.npl_utils_calc_lpm_start_bit_and_width_for_lpm_table
    if _newclass:
        calc_table_initial_size = staticmethod(_nsimcli.npl_utils_calc_table_initial_size)
    else:
        calc_table_initial_size = _nsimcli.npl_utils_calc_table_initial_size

    def get_field_descriptor(self, *args):
        return _nsimcli.npl_utils_get_field_descriptor(self, *args)

    def get_array_field_descriptors(self, *args):
        return _nsimcli.npl_utils_get_array_field_descriptors(self, *args)

    def get_field_subfields(self, field, leafs_only, recursive):
        return _nsimcli.npl_utils_get_field_subfields(self, field, leafs_only, recursive)

    def get_metadatas(self):
        return _nsimcli.npl_utils_get_metadatas(self)

    def get_field_value(self, *args):
        return _nsimcli.npl_utils_get_field_value(self, *args)

    def get_field_value_optimized(self, field, execution_context, stack):
        return _nsimcli.npl_utils_get_field_value_optimized(self, field, execution_context, stack)

    def set_field_value(self, *args):
        return _nsimcli.npl_utils_set_field_value(self, *args)

    def set_field_value_optimized(self, field, execution_context, stack, value):
        return _nsimcli.npl_utils_set_field_value_optimized(self, field, execution_context, stack, value)

    def get_header_info_index(self, metadata, desc):
        return _nsimcli.npl_utils_get_header_info_index(self, metadata, desc)

    def calc_checksum(self, bytes, header_size, clear_checksum_field, checksum_field_offset):
        return _nsimcli.npl_utils_calc_checksum(self, bytes, header_size, clear_checksum_field, checksum_field_offset)

    def calc_checksum_base16(self, *args):
        return _nsimcli.npl_utils_calc_checksum_base16(self, *args)

    def initialize(self, pic, logger):
        return _nsimcli.npl_utils_initialize(self, pic, logger)

    def get_metadata_template(self):
        return _nsimcli.npl_utils_get_metadata_template(self)

    def metadata_name_to_metadata_index(self, metadata_name):
        return _nsimcli.npl_utils_metadata_name_to_metadata_index(self, metadata_name)

    def metadata_index_to_metadata_name(self, metadata_index):
        return _nsimcli.npl_utils_metadata_index_to_metadata_name(self, metadata_index)

    def get_parsed_items(self):
        return _nsimcli.npl_utils_get_parsed_items(self)
    if _newclass:
        split = staticmethod(_nsimcli.npl_utils_split)
    else:
        split = _nsimcli.npl_utils_split
    if _newclass:
        bit_vector_to_json_object = staticmethod(_nsimcli.npl_utils_bit_vector_to_json_object)
    else:
        bit_vector_to_json_object = _nsimcli.npl_utils_bit_vector_to_json_object
    if _newclass:
        json_object_to_bit_vector = staticmethod(_nsimcli.npl_utils_json_object_to_bit_vector)
    else:
        json_object_to_bit_vector = _nsimcli.npl_utils_json_object_to_bit_vector
    if _newclass:
        get_nsim_table_line_op_type = staticmethod(_nsimcli.npl_utils_get_nsim_table_line_op_type)
    else:
        get_nsim_table_line_op_type = _nsimcli.npl_utils_get_nsim_table_line_op_type

    def get_simple_field_desc_value(self, metadata, fd):
        return _nsimcli.npl_utils_get_simple_field_desc_value(self, metadata, fd)

    def set_simple_field_desc_value(self, metadata, fd, value):
        return _nsimcli.npl_utils_set_simple_field_desc_value(self, metadata, fd, value)

    def get_logger(self):
        return _nsimcli.npl_utils_get_logger(self)
    __swig_destroy__ = _nsimcli.delete_npl_utils
    __del__ = lambda self: None
npl_utils_swigregister = _nsimcli.npl_utils_swigregister
npl_utils_swigregister(npl_utils)

def npl_utils_calc_lpm_start_bit_and_width_for_lpm_table(table):
    return _nsimcli.npl_utils_calc_lpm_start_bit_and_width_for_lpm_table(table)
npl_utils_calc_lpm_start_bit_and_width_for_lpm_table = _nsimcli.npl_utils_calc_lpm_start_bit_and_width_for_lpm_table

def npl_utils_calc_table_initial_size(table):
    return _nsimcli.npl_utils_calc_table_initial_size(table)
npl_utils_calc_table_initial_size = _nsimcli.npl_utils_calc_table_initial_size

def npl_utils_split(str, delimiter):
    return _nsimcli.npl_utils_split(str, delimiter)
npl_utils_split = _nsimcli.npl_utils_split

def npl_utils_bit_vector_to_json_object(bv):
    return _nsimcli.npl_utils_bit_vector_to_json_object(bv)
npl_utils_bit_vector_to_json_object = _nsimcli.npl_utils_bit_vector_to_json_object

def npl_utils_json_object_to_bit_vector(object):
    return _nsimcli.npl_utils_json_object_to_bit_vector(object)
npl_utils_json_object_to_bit_vector = _nsimcli.npl_utils_json_object_to_bit_vector

def npl_utils_get_nsim_table_line_op_type(operation):
    return _nsimcli.npl_utils_get_nsim_table_line_op_type(operation)
npl_utils_get_nsim_table_line_op_type = _nsimcli.npl_utils_get_nsim_table_line_op_type

NPL_TABLES_STATUS_SUCCESS = _nsimcli.NPL_TABLES_STATUS_SUCCESS
NPL_TABLES_STATUS_EDIFFERENT_DEVS = _nsimcli.NPL_TABLES_STATUS_EDIFFERENT_DEVS
NPL_TABLES_STATUS_ERESOURCE = _nsimcli.NPL_TABLES_STATUS_ERESOURCE
NPL_TABLES_STATUS_EOUTOFMEMORY = _nsimcli.NPL_TABLES_STATUS_EOUTOFMEMORY
NPL_TABLES_STATUS_ENOTFOUND = _nsimcli.NPL_TABLES_STATUS_ENOTFOUND
NPL_TABLES_STATUS_ENOTIMPLEMENTED = _nsimcli.NPL_TABLES_STATUS_ENOTIMPLEMENTED
NPL_TABLES_STATUS_EUNKNOWN = _nsimcli.NPL_TABLES_STATUS_EUNKNOWN
NPL_TABLES_STATUS_EEXIST = _nsimcli.NPL_TABLES_STATUS_EEXIST
NPL_TABLES_STATUS_EOUTOFRANGE = _nsimcli.NPL_TABLES_STATUS_EOUTOFRANGE
NPL_TABLES_STATUS_ENOTINITIALIZED = _nsimcli.NPL_TABLES_STATUS_ENOTINITIALIZED
class nsim_error_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_error_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_error_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error_num"] = _nsimcli.nsim_error_t_error_num_set
    __swig_getmethods__["error_num"] = _nsimcli.nsim_error_t_error_num_get
    if _newclass:
        error_num = _swig_property(_nsimcli.nsim_error_t_error_num_get, _nsimcli.nsim_error_t_error_num_set)
    __swig_setmethods__["description"] = _nsimcli.nsim_error_t_description_set
    __swig_getmethods__["description"] = _nsimcli.nsim_error_t_description_get
    if _newclass:
        description = _swig_property(_nsimcli.nsim_error_t_description_get, _nsimcli.nsim_error_t_description_set)

    def __init__(self):
        this = _nsimcli.new_nsim_error_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_nsim_error_t
    __del__ = lambda self: None
nsim_error_t_swigregister = _nsimcli.nsim_error_t_swigregister
nsim_error_t_swigregister(nsim_error_t)

class nsim_errors_handler_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_errors_handler_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_errors_handler_t, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        set_error = staticmethod(_nsimcli.nsim_errors_handler_t_set_error)
    else:
        set_error = _nsimcli.nsim_errors_handler_t_set_error
    if _newclass:
        get_last_error = staticmethod(_nsimcli.nsim_errors_handler_t_get_last_error)
    else:
        get_last_error = _nsimcli.nsim_errors_handler_t_get_last_error
nsim_errors_handler_t_swigregister = _nsimcli.nsim_errors_handler_t_swigregister
nsim_errors_handler_t_swigregister(nsim_errors_handler_t)

def nsim_errors_handler_t_set_error(err_status, err_description):
    return _nsimcli.nsim_errors_handler_t_set_error(err_status, err_description)
nsim_errors_handler_t_set_error = _nsimcli.nsim_errors_handler_t_set_error

def nsim_errors_handler_t_get_last_error():
    return _nsimcli.nsim_errors_handler_t_get_last_error()
nsim_errors_handler_t_get_last_error = _nsimcli.nsim_errors_handler_t_get_last_error

DSIM_STATUS_SUCCESS = _nsimcli.DSIM_STATUS_SUCCESS
DSIM_STATUS_EEXIST = _nsimcli.DSIM_STATUS_EEXIST
DSIM_STATUS_EINVAL = _nsimcli.DSIM_STATUS_EINVAL
DSIM_STATUS_ENOTFOUND = _nsimcli.DSIM_STATUS_ENOTFOUND
DSIM_STATUS_ENOTIMPLEMENTED = _nsimcli.DSIM_STATUS_ENOTIMPLEMENTED
DSIM_STATUS_EUNKNOWN = _nsimcli.DSIM_STATUS_EUNKNOWN
DSIM_STATUS_ESIZE = _nsimcli.DSIM_STATUS_ESIZE
DSIM_STATUS_ENOTINITIALIZED = _nsimcli.DSIM_STATUS_ENOTINITIALIZED
DSIM_STATUS_EVERSION = _nsimcli.DSIM_STATUS_EVERSION
DSIM_STATUS_ESERIALIZE = _nsimcli.DSIM_STATUS_ESERIALIZE
DSIM_STATUS_EDESERIALIZE = _nsimcli.DSIM_STATUS_EDESERIALIZE

def to_string(v):
    return _nsimcli.to_string(v)
to_string = _nsimcli.to_string
class dsim_config_interface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dsim_config_interface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dsim_config_interface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_dsim_config_interface
    __del__ = lambda self: None

    def write_register(self, block_id, reg_address, reg_width, count, in_val):
        return _nsimcli.dsim_config_interface_write_register(self, block_id, reg_address, reg_width, count, in_val)

    def write_register_by_name(self, name, reg_index, reg_width, count, in_val):
        return _nsimcli.dsim_config_interface_write_register_by_name(self, name, reg_index, reg_width, count, in_val)

    def read_register(self, block_id, reg_address, reg_width, count, out_val):
        return _nsimcli.dsim_config_interface_read_register(self, block_id, reg_address, reg_width, count, out_val)

    def read_register_by_name(self, name, reg_index, reg_width, count, out_val):
        return _nsimcli.dsim_config_interface_read_register_by_name(self, name, reg_index, reg_width, count, out_val)

    def write_memory(self, block_id, mem_address, mem_width, mem_entries, in_val):
        return _nsimcli.dsim_config_interface_write_memory(self, block_id, mem_address, mem_width, mem_entries, in_val)

    def write_memory_by_name(self, mem_name, mem_index, mem_entry, mem_width, mem_entries, in_val):
        return _nsimcli.dsim_config_interface_write_memory_by_name(self, mem_name, mem_index, mem_entry, mem_width, mem_entries, in_val)

    def read_memory(self, block_id, mem_address, mem_width, mem_entries, out_val):
        return _nsimcli.dsim_config_interface_read_memory(self, block_id, mem_address, mem_width, mem_entries, out_val)

    def read_memory_by_name(self, mem_name, mem_index, mem_entry, mem_width, mem_entries, out_val):
        return _nsimcli.dsim_config_interface_read_memory_by_name(self, mem_name, mem_index, mem_entry, mem_width, mem_entries, out_val)

    def add_property(self, key, value):
        return _nsimcli.dsim_config_interface_add_property(self, key, value)
dsim_config_interface_swigregister = _nsimcli.dsim_config_interface_swigregister
dsim_config_interface_swigregister(dsim_config_interface)
MEMORY_BASE_ADDRESS = cvar.MEMORY_BASE_ADDRESS

class dsim_rpc_interface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dsim_rpc_interface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dsim_rpc_interface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_dsim_rpc_interface
    __del__ = lambda self: None

    def rpc_ping(self):
        return _nsimcli.dsim_rpc_interface_rpc_ping(self)

    def rpc_destroy_simulator(self):
        return _nsimcli.dsim_rpc_interface_rpc_destroy_simulator(self)

    def rpc_set_server_log_file(self, log_file_path, logPrefixEnabled):
        return _nsimcli.dsim_rpc_interface_rpc_set_server_log_file(self, log_file_path, logPrefixEnabled)

    def rpc_set_server_log_level(self, arg2):
        return _nsimcli.dsim_rpc_interface_rpc_set_server_log_level(self, arg2)

    def rpc_packet_dma_enable(self, arg2):
        return _nsimcli.dsim_rpc_interface_rpc_packet_dma_enable(self, arg2)

    def rpc_inject_packet_desc(self, packet, initial_values):
        return _nsimcli.dsim_rpc_interface_rpc_inject_packet_desc(self, packet, initial_values)

    def rpc_inject_packet(self, packet, slice_id, ifg, pif, initial_values):
        return _nsimcli.dsim_rpc_interface_rpc_inject_packet(self, packet, slice_id, ifg, pif, initial_values)

    def rpc_step_packet(self):
        return _nsimcli.dsim_rpc_interface_rpc_step_packet(self)

    def rpc_step_macro(self):
        return _nsimcli.dsim_rpc_interface_rpc_step_macro(self)

    def rpc_step(self):
        return _nsimcli.dsim_rpc_interface_rpc_step(self)

    def rpc_trigger_lrc_fifo(self):
        return _nsimcli.dsim_rpc_interface_rpc_trigger_lrc_fifo(self)

    def rpc_get_packet(self, arg2):
        return _nsimcli.dsim_rpc_interface_rpc_get_packet(self, arg2)

    def rpc_get_packets(self, arg2):
        return _nsimcli.dsim_rpc_interface_rpc_get_packets(self, arg2)

    def rpc_get_and_clear_output_packets(self, timeout_in_milliseconds, num_of_packets):
        return _nsimcli.dsim_rpc_interface_rpc_get_and_clear_output_packets(self, timeout_in_milliseconds, num_of_packets)

    def rpc_inject_db_trigger(self, trigger):
        return _nsimcli.dsim_rpc_interface_rpc_inject_db_trigger(self, trigger)

    def rpc_get_connection_handle(self, arg2):
        return _nsimcli.dsim_rpc_interface_rpc_get_connection_handle(self, arg2)

    def rpc_get_device_name(self):
        return _nsimcli.dsim_rpc_interface_rpc_get_device_name(self)

    def rpc_set_expose_npu_host(self):
        return _nsimcli.dsim_rpc_interface_rpc_set_expose_npu_host(self)

    def rpc_set_slice_context(self, slice_id, context_id):
        return _nsimcli.dsim_rpc_interface_rpc_set_slice_context(self, slice_id, context_id)

    def rpc_get_and_clear_event_queue(self):
        return _nsimcli.dsim_rpc_interface_rpc_get_and_clear_event_queue(self)

    def rpc_set_module_file_log_level(self, module, level):
        return _nsimcli.dsim_rpc_interface_rpc_set_module_file_log_level(self, module, level)

    def rpc_set_module_stdout_log_level(self, module, level):
        return _nsimcli.dsim_rpc_interface_rpc_set_module_stdout_log_level(self, module, level)

    def rpc_clear_all_device_state(self):
        return _nsimcli.dsim_rpc_interface_rpc_clear_all_device_state(self)

    def rpc_get_num_packet_waiting_to_be_injected(self):
        return _nsimcli.dsim_rpc_interface_rpc_get_num_packet_waiting_to_be_injected(self)

    def rpc_get_num_log_messages(self, level):
        return _nsimcli.dsim_rpc_interface_rpc_get_num_log_messages(self, level)

    def rpc_get_entry(self, table_name, index, key, out_payload):
        return _nsimcli.dsim_rpc_interface_rpc_get_entry(self, table_name, index, key, out_payload)

    def rpc_get_lpm_entry(self, table_name, index, key, length, out_payload):
        return _nsimcli.dsim_rpc_interface_rpc_get_lpm_entry(self, table_name, index, key, length, out_payload)

    def rpc_get_ternary_entry(self, table_name, index, line, out_key, out_mask, out_payload):
        return _nsimcli.dsim_rpc_interface_rpc_get_ternary_entry(self, table_name, index, line, out_key, out_mask, out_payload)

    def rpc_set_oversubscribed_interfaces_detection_mode(self, arg2):
        return _nsimcli.dsim_rpc_interface_rpc_set_oversubscribed_interfaces_detection_mode(self, arg2)

    def rpc_is_port_up(self, slice_id, ifg, pif):
        return _nsimcli.dsim_rpc_interface_rpc_is_port_up(self, slice_id, ifg, pif)

    def rpc_get_port_config(self, slice_id, ifg, pif):
        return _nsimcli.dsim_rpc_interface_rpc_get_port_config(self, slice_id, ifg, pif)

    def rpc_get_event_queue_write_ptr(self):
        return _nsimcli.dsim_rpc_interface_rpc_get_event_queue_write_ptr(self)

    def rpc_get_event_queue_read_ptr(self):
        return _nsimcli.dsim_rpc_interface_rpc_get_event_queue_read_ptr(self)

    def rpc_get_table_id_by_name(self, name):
        return _nsimcli.dsim_rpc_interface_rpc_get_table_id_by_name(self, name)
dsim_rpc_interface_swigregister = _nsimcli.dsim_rpc_interface_swigregister
dsim_rpc_interface_swigregister(dsim_rpc_interface)

CHAR_BIT = _nsimcli.CHAR_BIT

def default_version_handshake_callback(npsuite_version, sdk_version, opaque_data):
    return _nsimcli.default_version_handshake_callback(npsuite_version, sdk_version, opaque_data)
default_version_handshake_callback = _nsimcli.default_version_handshake_callback
class device_simulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, device_simulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, device_simulator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _nsimcli.delete_device_simulator
    __del__ = lambda self: None

    def get_connection_handle(self):
        return _nsimcli.device_simulator_get_connection_handle(self)

    def get_port(self):
        return _nsimcli.device_simulator_get_port(self)

    def get_logger(self):
        return _nsimcli.device_simulator_get_logger(self)

    def get_nsim(self):
        return _nsimcli.device_simulator_get_nsim(self)
    if _newclass:
        create_and_run_simulator_server = staticmethod(_nsimcli.device_simulator_create_and_run_simulator_server)
    else:
        create_and_run_simulator_server = _nsimcli.device_simulator_create_and_run_simulator_server
    if _newclass:
        create_and_run_simulator_server_default = staticmethod(_nsimcli.device_simulator_create_and_run_simulator_server_default)
    else:
        create_and_run_simulator_server_default = _nsimcli.device_simulator_create_and_run_simulator_server_default

    def set_log_level(self, module):
        return _nsimcli.device_simulator_set_log_level(self, module)

    def set_log_file(self, log_file_path, logPrefixEnabled):
        return _nsimcli.device_simulator_set_log_file(self, log_file_path, logPrefixEnabled)

    def register_version_handshake_callback(self, ver_handshake_cb, opaque_data):
        return _nsimcli.device_simulator_register_version_handshake_callback(self, ver_handshake_cb, opaque_data)

    def unregister_version_handshake_callback(self, ver_handshake_cb, opaque_data):
        return _nsimcli.device_simulator_unregister_version_handshake_callback(self, ver_handshake_cb, opaque_data)

    def version_validation(self, npsuite_version, sdk_version):
        return _nsimcli.device_simulator_version_validation(self, npsuite_version, sdk_version)

    def dump_debug_info(self, log):
        return _nsimcli.device_simulator_dump_debug_info(self, log)

    def is_running(self):
        return _nsimcli.device_simulator_is_running(self)

    def client_keepalive_event(self):
        return _nsimcli.device_simulator_client_keepalive_event(self)

    def destroy(self):
        return _nsimcli.device_simulator_destroy(self)
device_simulator_swigregister = _nsimcli.device_simulator_swigregister
device_simulator_swigregister(device_simulator)

def device_simulator_create_and_run_simulator_server(*args):
    return _nsimcli.device_simulator_create_and_run_simulator_server(*args)
device_simulator_create_and_run_simulator_server = _nsimcli.device_simulator_create_and_run_simulator_server

def device_simulator_create_and_run_simulator_server_default(*args):
    return _nsimcli.device_simulator_create_and_run_simulator_server_default(*args)
device_simulator_create_and_run_simulator_server_default = _nsimcli.device_simulator_create_and_run_simulator_server_default


def create_and_run_simulator_server(*args):
    return _nsimcli.create_and_run_simulator_server(*args)
create_and_run_simulator_server = _nsimcli.create_and_run_simulator_server

def create_and_run_simulator_server_default(*args):
    return _nsimcli.create_and_run_simulator_server_default(*args)
create_and_run_simulator_server_default = _nsimcli.create_and_run_simulator_server_default

def destroy_simulator(server):
    return _nsimcli.destroy_simulator(server)
destroy_simulator = _nsimcli.destroy_simulator

def set_log_level(arg1, module):
    return _nsimcli.set_log_level(arg1, module)
set_log_level = _nsimcli.set_log_level

def get_device_name(arg1, out):
    return _nsimcli.get_device_name(arg1, out)
get_device_name = _nsimcli.get_device_name

def get_connection_handle(arg1, out):
    return _nsimcli.get_connection_handle(arg1, out)
get_connection_handle = _nsimcli.get_connection_handle

def inject_packet(arg1, packet_info, initial_values):
    return _nsimcli.inject_packet(arg1, packet_info, initial_values)
inject_packet = _nsimcli.inject_packet

def step_packet(arg1):
    return _nsimcli.step_packet(arg1)
step_packet = _nsimcli.step_packet

def step_macro(arg1):
    return _nsimcli.step_macro(arg1)
step_macro = _nsimcli.step_macro

def step(arg1):
    return _nsimcli.step(arg1)
step = _nsimcli.step

def trigger_lrc_fifo(arg1):
    return _nsimcli.trigger_lrc_fifo(arg1)
trigger_lrc_fifo = _nsimcli.trigger_lrc_fifo

def packet_dma_enable(arg1, arg2):
    return _nsimcli.packet_dma_enable(arg1, arg2)
packet_dma_enable = _nsimcli.packet_dma_enable

def set_log_file(arg1, p, logPrefixEnabled):
    return _nsimcli.set_log_file(arg1, p, logPrefixEnabled)
set_log_file = _nsimcli.set_log_file

def inject_db_trigger(arg1, trigger_info):
    return _nsimcli.inject_db_trigger(arg1, trigger_info)
inject_db_trigger = _nsimcli.inject_db_trigger

def get_and_clear_output_packets(arg1, out):
    return _nsimcli.get_and_clear_output_packets(arg1, out)
get_and_clear_output_packets = _nsimcli.get_and_clear_output_packets

def set_expose_npu_host(arg1):
    return _nsimcli.set_expose_npu_host(arg1)
set_expose_npu_host = _nsimcli.set_expose_npu_host

def set_slice_context(arg1, slice_id, context_id):
    return _nsimcli.set_slice_context(arg1, slice_id, context_id)
set_slice_context = _nsimcli.set_slice_context

def get_and_clear_event_queue(arg1, out):
    return _nsimcli.get_and_clear_event_queue(arg1, out)
get_and_clear_event_queue = _nsimcli.get_and_clear_event_queue
class device_simulator_apis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, device_simulator_apis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, device_simulator_apis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_create_and_run_simulator_server"] = _nsimcli.device_simulator_apis_m_create_and_run_simulator_server_set
    __swig_getmethods__["m_create_and_run_simulator_server"] = _nsimcli.device_simulator_apis_m_create_and_run_simulator_server_get
    if _newclass:
        m_create_and_run_simulator_server = _swig_property(_nsimcli.device_simulator_apis_m_create_and_run_simulator_server_get, _nsimcli.device_simulator_apis_m_create_and_run_simulator_server_set)
    __swig_setmethods__["m_destroy_simulator"] = _nsimcli.device_simulator_apis_m_destroy_simulator_set
    __swig_getmethods__["m_destroy_simulator"] = _nsimcli.device_simulator_apis_m_destroy_simulator_get
    if _newclass:
        m_destroy_simulator = _swig_property(_nsimcli.device_simulator_apis_m_destroy_simulator_get, _nsimcli.device_simulator_apis_m_destroy_simulator_set)
    __swig_setmethods__["m_set_log_level"] = _nsimcli.device_simulator_apis_m_set_log_level_set
    __swig_getmethods__["m_set_log_level"] = _nsimcli.device_simulator_apis_m_set_log_level_get
    if _newclass:
        m_set_log_level = _swig_property(_nsimcli.device_simulator_apis_m_set_log_level_get, _nsimcli.device_simulator_apis_m_set_log_level_set)
    __swig_setmethods__["m_get_device_name"] = _nsimcli.device_simulator_apis_m_get_device_name_set
    __swig_getmethods__["m_get_device_name"] = _nsimcli.device_simulator_apis_m_get_device_name_get
    if _newclass:
        m_get_device_name = _swig_property(_nsimcli.device_simulator_apis_m_get_device_name_get, _nsimcli.device_simulator_apis_m_get_device_name_set)
    __swig_setmethods__["m_get_connection_handle"] = _nsimcli.device_simulator_apis_m_get_connection_handle_set
    __swig_getmethods__["m_get_connection_handle"] = _nsimcli.device_simulator_apis_m_get_connection_handle_get
    if _newclass:
        m_get_connection_handle = _swig_property(_nsimcli.device_simulator_apis_m_get_connection_handle_get, _nsimcli.device_simulator_apis_m_get_connection_handle_set)
    __swig_setmethods__["m_inject_packet"] = _nsimcli.device_simulator_apis_m_inject_packet_set
    __swig_getmethods__["m_inject_packet"] = _nsimcli.device_simulator_apis_m_inject_packet_get
    if _newclass:
        m_inject_packet = _swig_property(_nsimcli.device_simulator_apis_m_inject_packet_get, _nsimcli.device_simulator_apis_m_inject_packet_set)
    __swig_setmethods__["m_step_packet"] = _nsimcli.device_simulator_apis_m_step_packet_set
    __swig_getmethods__["m_step_packet"] = _nsimcli.device_simulator_apis_m_step_packet_get
    if _newclass:
        m_step_packet = _swig_property(_nsimcli.device_simulator_apis_m_step_packet_get, _nsimcli.device_simulator_apis_m_step_packet_set)
    __swig_setmethods__["m_step_macro"] = _nsimcli.device_simulator_apis_m_step_macro_set
    __swig_getmethods__["m_step_macro"] = _nsimcli.device_simulator_apis_m_step_macro_get
    if _newclass:
        m_step_macro = _swig_property(_nsimcli.device_simulator_apis_m_step_macro_get, _nsimcli.device_simulator_apis_m_step_macro_set)
    __swig_setmethods__["m_step"] = _nsimcli.device_simulator_apis_m_step_set
    __swig_getmethods__["m_step"] = _nsimcli.device_simulator_apis_m_step_get
    if _newclass:
        m_step = _swig_property(_nsimcli.device_simulator_apis_m_step_get, _nsimcli.device_simulator_apis_m_step_set)
    __swig_setmethods__["m_trigger_lrc_fifo"] = _nsimcli.device_simulator_apis_m_trigger_lrc_fifo_set
    __swig_getmethods__["m_trigger_lrc_fifo"] = _nsimcli.device_simulator_apis_m_trigger_lrc_fifo_get
    if _newclass:
        m_trigger_lrc_fifo = _swig_property(_nsimcli.device_simulator_apis_m_trigger_lrc_fifo_get, _nsimcli.device_simulator_apis_m_trigger_lrc_fifo_set)
    __swig_setmethods__["m_packet_dma_enable"] = _nsimcli.device_simulator_apis_m_packet_dma_enable_set
    __swig_getmethods__["m_packet_dma_enable"] = _nsimcli.device_simulator_apis_m_packet_dma_enable_get
    if _newclass:
        m_packet_dma_enable = _swig_property(_nsimcli.device_simulator_apis_m_packet_dma_enable_get, _nsimcli.device_simulator_apis_m_packet_dma_enable_set)
    __swig_setmethods__["m_get_and_clear_output_packets"] = _nsimcli.device_simulator_apis_m_get_and_clear_output_packets_set
    __swig_getmethods__["m_get_and_clear_output_packets"] = _nsimcli.device_simulator_apis_m_get_and_clear_output_packets_get
    if _newclass:
        m_get_and_clear_output_packets = _swig_property(_nsimcli.device_simulator_apis_m_get_and_clear_output_packets_get, _nsimcli.device_simulator_apis_m_get_and_clear_output_packets_set)
    __swig_setmethods__["m_set_log_file"] = _nsimcli.device_simulator_apis_m_set_log_file_set
    __swig_getmethods__["m_set_log_file"] = _nsimcli.device_simulator_apis_m_set_log_file_get
    if _newclass:
        m_set_log_file = _swig_property(_nsimcli.device_simulator_apis_m_set_log_file_get, _nsimcli.device_simulator_apis_m_set_log_file_set)
    __swig_setmethods__["m_inject_db_trigger"] = _nsimcli.device_simulator_apis_m_inject_db_trigger_set
    __swig_getmethods__["m_inject_db_trigger"] = _nsimcli.device_simulator_apis_m_inject_db_trigger_get
    if _newclass:
        m_inject_db_trigger = _swig_property(_nsimcli.device_simulator_apis_m_inject_db_trigger_get, _nsimcli.device_simulator_apis_m_inject_db_trigger_set)
    __swig_setmethods__["m_set_expose_npu_host"] = _nsimcli.device_simulator_apis_m_set_expose_npu_host_set
    __swig_getmethods__["m_set_expose_npu_host"] = _nsimcli.device_simulator_apis_m_set_expose_npu_host_get
    if _newclass:
        m_set_expose_npu_host = _swig_property(_nsimcli.device_simulator_apis_m_set_expose_npu_host_get, _nsimcli.device_simulator_apis_m_set_expose_npu_host_set)
    __swig_setmethods__["m_set_slice_context"] = _nsimcli.device_simulator_apis_m_set_slice_context_set
    __swig_getmethods__["m_set_slice_context"] = _nsimcli.device_simulator_apis_m_set_slice_context_get
    if _newclass:
        m_set_slice_context = _swig_property(_nsimcli.device_simulator_apis_m_set_slice_context_get, _nsimcli.device_simulator_apis_m_set_slice_context_set)
    __swig_setmethods__["m_get_and_clear_event_queue"] = _nsimcli.device_simulator_apis_m_get_and_clear_event_queue_set
    __swig_getmethods__["m_get_and_clear_event_queue"] = _nsimcli.device_simulator_apis_m_get_and_clear_event_queue_get
    if _newclass:
        m_get_and_clear_event_queue = _swig_property(_nsimcli.device_simulator_apis_m_get_and_clear_event_queue_get, _nsimcli.device_simulator_apis_m_get_and_clear_event_queue_set)

    def __init__(self):
        this = _nsimcli.new_device_simulator_apis()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_device_simulator_apis
    __del__ = lambda self: None
device_simulator_apis_swigregister = _nsimcli.device_simulator_apis_swigregister
device_simulator_apis_swigregister(device_simulator_apis)


def calc_bytes_from_bits(bits):
    return _nsimcli.calc_bytes_from_bits(bits)
calc_bytes_from_bits = _nsimcli.calc_bytes_from_bits
class command(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, command, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, command, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmd_type"] = _nsimcli.command_cmd_type_set
    __swig_getmethods__["cmd_type"] = _nsimcli.command_cmd_type_get
    if _newclass:
        cmd_type = _swig_property(_nsimcli.command_cmd_type_get, _nsimcli.command_cmd_type_set)
    __swig_setmethods__["table_id"] = _nsimcli.command_table_id_set
    __swig_getmethods__["table_id"] = _nsimcli.command_table_id_get
    if _newclass:
        table_id = _swig_property(_nsimcli.command_table_id_get, _nsimcli.command_table_id_set)
    __swig_setmethods__["slice_idx"] = _nsimcli.command_slice_idx_set
    __swig_getmethods__["slice_idx"] = _nsimcli.command_slice_idx_get
    if _newclass:
        slice_idx = _swig_property(_nsimcli.command_slice_idx_get, _nsimcli.command_slice_idx_set)
    __swig_setmethods__["key_len"] = _nsimcli.command_key_len_set
    __swig_getmethods__["key_len"] = _nsimcli.command_key_len_get
    if _newclass:
        key_len = _swig_property(_nsimcli.command_key_len_get, _nsimcli.command_key_len_set)
    __swig_setmethods__["value_len"] = _nsimcli.command_value_len_set
    __swig_getmethods__["value_len"] = _nsimcli.command_value_len_get
    if _newclass:
        value_len = _swig_property(_nsimcli.command_value_len_get, _nsimcli.command_value_len_set)
    __swig_setmethods__["values"] = _nsimcli.command_values_set
    __swig_getmethods__["values"] = _nsimcli.command_values_get
    if _newclass:
        values = _swig_property(_nsimcli.command_values_get, _nsimcli.command_values_set)

    def __init__(self, *args):
        this = _nsimcli.new_command(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_command
    __del__ = lambda self: None
command_swigregister = _nsimcli.command_swigregister
command_swigregister(command)
MAX_RAW_DATA_FIELD_LEN_BYTES = cvar.MAX_RAW_DATA_FIELD_LEN_BYTES
NSIM_COMMAND_TYPE_TABLE_INSERT = cvar.NSIM_COMMAND_TYPE_TABLE_INSERT
NSIM_COMMAND_TYPE_TABLE_ERASE = cvar.NSIM_COMMAND_TYPE_TABLE_ERASE
NSIM_COMMAND_TYPE_TABLE_UPDATE = cvar.NSIM_COMMAND_TYPE_TABLE_UPDATE
NSIM_COMMAND_TYPE_LPM_TABLE_INSERT = cvar.NSIM_COMMAND_TYPE_LPM_TABLE_INSERT
NSIM_COMMAND_TYPE_LPM_TABLE_ERASE = cvar.NSIM_COMMAND_TYPE_LPM_TABLE_ERASE
NSIM_COMMAND_TYPE_LPM_TABLE_UPDATE = cvar.NSIM_COMMAND_TYPE_LPM_TABLE_UPDATE
NSIM_COMMAND_TYPE_TERNARY_TABLE_INSERT = cvar.NSIM_COMMAND_TYPE_TERNARY_TABLE_INSERT
NSIM_COMMAND_TYPE_TERNARY_TABLE_ERASE = cvar.NSIM_COMMAND_TYPE_TERNARY_TABLE_ERASE
NSIM_COMMAND_TYPE_TERNARY_TABLE_UPDATE = cvar.NSIM_COMMAND_TYPE_TERNARY_TABLE_UPDATE
NSIM_COMMAND_TYPE_ERROR = cvar.NSIM_COMMAND_TYPE_ERROR


def calculate_command_len(cmd):
    return _nsimcli.calculate_command_len(cmd)
calculate_command_len = _nsimcli.calculate_command_len

def log_user_message(opaque, nsim_log_level, user_prefix_identifier, message):
    return _nsimcli.log_user_message(opaque, nsim_log_level, user_prefix_identifier, message)
log_user_message = _nsimcli.log_user_message
class dsim_client(dsim_config_interface, nsim_log_interface, dsim_rpc_interface):
    __swig_setmethods__ = {}
    for _s in [dsim_config_interface, nsim_log_interface, dsim_rpc_interface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, dsim_client, name, value)
    __swig_getmethods__ = {}
    for _s in [dsim_config_interface, nsim_log_interface, dsim_rpc_interface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, dsim_client, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nsimcli.new_dsim_client(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_dsim_client
    __del__ = lambda self: None

    def initialize(self, socket_addr, port, sdk_version=None):
        return _nsimcli.dsim_client_initialize(self, socket_addr, port, sdk_version)

    def reset_state(self):
        return _nsimcli.dsim_client_reset_state(self)

    def flush(self):
        return _nsimcli.dsim_client_flush(self)

    def get_release_version(self):
        return _nsimcli.dsim_client_get_release_version(self)

    def get_num_of_connection_retries(self):
        return _nsimcli.dsim_client_get_num_of_connection_retries(self)

    def set_num_of_connection_retries(self, num_connection_retries):
        return _nsimcli.dsim_client_set_num_of_connection_retries(self, num_connection_retries)

    def get_timeout_between_retries(self):
        return _nsimcli.dsim_client_get_timeout_between_retries(self)

    def set_timeout_between_retries(self, timeout_in_sec):
        return _nsimcli.dsim_client_set_timeout_between_retries(self, timeout_in_sec)

    def set_log_file(self, *args):
        return _nsimcli.dsim_client_set_log_file(self, *args)

    def register_log_message_callback(self, *args):
        return _nsimcli.dsim_client_register_log_message_callback(self, *args)

    def unregister_log_message_callback(self, client_handle):
        return _nsimcli.dsim_client_unregister_log_message_callback(self, client_handle)

    def get_device_name(self):
        return _nsimcli.dsim_client_get_device_name(self)

    def get_device_revision(self):
        return _nsimcli.dsim_client_get_device_revision(self)

    def get_sim_access_block_id(self):
        return _nsimcli.dsim_client_get_sim_access_block_id(self)

    def get_sim_access_mem_address_place_udk(self):
        return _nsimcli.dsim_client_get_sim_access_mem_address_place_udk(self)

    def get_sim_access_nsim_command_mem_address(self):
        return _nsimcli.dsim_client_get_sim_access_nsim_command_mem_address(self)

    def dump_debug_info(self, *args):
        return _nsimcli.dsim_client_dump_debug_info(self, *args)

    def read_max_counters_cache(self, mem_address, mem_width, mem_entries, out_val):
        return _nsimcli.dsim_client_read_max_counters_cache(self, mem_address, mem_width, mem_entries, out_val)

    def write_register(self, *args):
        return _nsimcli.dsim_client_write_register(self, *args)

    def write_register_by_name(self, *args):
        return _nsimcli.dsim_client_write_register_by_name(self, *args)

    def read_register(self, *args):
        return _nsimcli.dsim_client_read_register(self, *args)

    def read_register_by_name(self, *args):
        return _nsimcli.dsim_client_read_register_by_name(self, *args)

    def read_memory(self, *args):
        return _nsimcli.dsim_client_read_memory(self, *args)

    def read_memory_by_name(self, *args):
        return _nsimcli.dsim_client_read_memory_by_name(self, *args)

    def write_memory(self, *args):
        return _nsimcli.dsim_client_write_memory(self, *args)

    def write_memory_by_name(self, *args):
        return _nsimcli.dsim_client_write_memory_by_name(self, *args)

    def read_modify_write_memory(self, *args):
        return _nsimcli.dsim_client_read_modify_write_memory(self, *args)
dsim_client_swigregister = _nsimcli.dsim_client_swigregister
dsim_client_swigregister(dsim_client)

MAX_NUMBER_OF_UDK_COMPONENTS = _nsimcli.MAX_NUMBER_OF_UDK_COMPONENTS
UDK_MAX_DATA_SIZE = _nsimcli.UDK_MAX_DATA_SIZE
UDK_MAX_TABLES_PER_PLACEMENT = _nsimcli.UDK_MAX_TABLES_PER_PLACEMENT
CHANNEL_WIDTH = _nsimcli.CHANNEL_WIDTH
UCODE_WIDTH_PER_CHANNEL_IN_SCOPER_MACRO_TABLE = _nsimcli.UCODE_WIDTH_PER_CHANNEL_IN_SCOPER_MACRO_TABLE
OFFSET_ON_PD_ENUM_WIDTH = _nsimcli.OFFSET_ON_PD_ENUM_WIDTH
COMPONENT_FRAGMENT_MIN_WIDTH_IN_BITS = _nsimcli.COMPONENT_FRAGMENT_MIN_WIDTH_IN_BITS

def get_num_of_key_parts(key_size):
    return _nsimcli.get_num_of_key_parts(key_size)
get_num_of_key_parts = _nsimcli.get_num_of_key_parts

def get_key_size_type(num_key_parts):
    return _nsimcli.get_key_size_type(num_key_parts)
get_key_size_type = _nsimcli.get_key_size_type
class field_select_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, field_select_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, field_select_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fs_index"] = _nsimcli.field_select_info_fs_index_set
    __swig_getmethods__["fs_index"] = _nsimcli.field_select_info_fs_index_get
    if _newclass:
        fs_index = _swig_property(_nsimcli.field_select_info_fs_index_get, _nsimcli.field_select_info_fs_index_set)
    __swig_setmethods__["fs_allocated_width"] = _nsimcli.field_select_info_fs_allocated_width_set
    __swig_getmethods__["fs_allocated_width"] = _nsimcli.field_select_info_fs_allocated_width_get
    if _newclass:
        fs_allocated_width = _swig_property(_nsimcli.field_select_info_fs_allocated_width_get, _nsimcli.field_select_info_fs_allocated_width_set)
    __swig_setmethods__["offset_in_ucode"] = _nsimcli.field_select_info_offset_in_ucode_set
    __swig_getmethods__["offset_in_ucode"] = _nsimcli.field_select_info_offset_in_ucode_get
    if _newclass:
        offset_in_ucode = _swig_property(_nsimcli.field_select_info_offset_in_ucode_get, _nsimcli.field_select_info_offset_in_ucode_set)
    __swig_setmethods__["num_of_bits_in_ucode"] = _nsimcli.field_select_info_num_of_bits_in_ucode_set
    __swig_getmethods__["num_of_bits_in_ucode"] = _nsimcli.field_select_info_num_of_bits_in_ucode_get
    if _newclass:
        num_of_bits_in_ucode = _swig_property(_nsimcli.field_select_info_num_of_bits_in_ucode_get, _nsimcli.field_select_info_num_of_bits_in_ucode_set)
    __swig_setmethods__["first_channel"] = _nsimcli.field_select_info_first_channel_set
    __swig_getmethods__["first_channel"] = _nsimcli.field_select_info_first_channel_get
    if _newclass:
        first_channel = _swig_property(_nsimcli.field_select_info_first_channel_get, _nsimcli.field_select_info_first_channel_set)

    def __init__(self, *args):
        this = _nsimcli.new_field_select_info(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_field_select_info
    __del__ = lambda self: None
field_select_info_swigregister = _nsimcli.field_select_info_swigregister
field_select_info_swigregister(field_select_info)
UDK_KEY_SIZE_160 = cvar.UDK_KEY_SIZE_160
UDK_KEY_SIZE_320 = cvar.UDK_KEY_SIZE_320
UDK_KEY_SIZE_NUM_SIZES = cvar.UDK_KEY_SIZE_NUM_SIZES
UDK_KEY_SIZE_FIRST = cvar.UDK_KEY_SIZE_FIRST
UDK_KEY_SIZE_ERROR = cvar.UDK_KEY_SIZE_ERROR

class table_line_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_line_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_line_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["line_num"] = _nsimcli.table_line_info_t_line_num_set
    __swig_getmethods__["line_num"] = _nsimcli.table_line_info_t_line_num_get
    if _newclass:
        line_num = _swig_property(_nsimcli.table_line_info_t_line_num_get, _nsimcli.table_line_info_t_line_num_set)
    __swig_setmethods__["calculated_field_id_to_fs_index"] = _nsimcli.table_line_info_t_calculated_field_id_to_fs_index_set
    __swig_getmethods__["calculated_field_id_to_fs_index"] = _nsimcli.table_line_info_t_calculated_field_id_to_fs_index_get
    if _newclass:
        calculated_field_id_to_fs_index = _swig_property(_nsimcli.table_line_info_t_calculated_field_id_to_fs_index_get, _nsimcli.table_line_info_t_calculated_field_id_to_fs_index_set)
    __swig_setmethods__["calculated_field_id_to_fs_index_per_row"] = _nsimcli.table_line_info_t_calculated_field_id_to_fs_index_per_row_set
    __swig_getmethods__["calculated_field_id_to_fs_index_per_row"] = _nsimcli.table_line_info_t_calculated_field_id_to_fs_index_per_row_get
    if _newclass:
        calculated_field_id_to_fs_index_per_row = _swig_property(_nsimcli.table_line_info_t_calculated_field_id_to_fs_index_per_row_get, _nsimcli.table_line_info_t_calculated_field_id_to_fs_index_per_row_set)

    def __init__(self, *args):
        this = _nsimcli.new_table_line_info_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_table_line_info_t
    __del__ = lambda self: None
table_line_info_t_swigregister = _nsimcli.table_line_info_t_swigregister
table_line_info_t_swigregister(table_line_info_t)

class microcode_pointers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, microcode_pointers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, microcode_pointers, name)
    __repr__ = _swig_repr
    __swig_setmethods__["block_name"] = _nsimcli.microcode_pointers_block_name_set
    __swig_getmethods__["block_name"] = _nsimcli.microcode_pointers_block_name_get
    if _newclass:
        block_name = _swig_property(_nsimcli.microcode_pointers_block_name_get, _nsimcli.microcode_pointers_block_name_set)
    __swig_setmethods__["table_name"] = _nsimcli.microcode_pointers_table_name_set
    __swig_getmethods__["table_name"] = _nsimcli.microcode_pointers_table_name_get
    if _newclass:
        table_name = _swig_property(_nsimcli.microcode_pointers_table_name_get, _nsimcli.microcode_pointers_table_name_set)
    __swig_setmethods__["array_index"] = _nsimcli.microcode_pointers_array_index_set
    __swig_getmethods__["array_index"] = _nsimcli.microcode_pointers_array_index_get
    if _newclass:
        array_index = _swig_property(_nsimcli.microcode_pointers_array_index_get, _nsimcli.microcode_pointers_array_index_set)
    __swig_setmethods__["table_lines"] = _nsimcli.microcode_pointers_table_lines_set
    __swig_getmethods__["table_lines"] = _nsimcli.microcode_pointers_table_lines_get
    if _newclass:
        table_lines = _swig_property(_nsimcli.microcode_pointers_table_lines_get, _nsimcli.microcode_pointers_table_lines_set)

    def __init__(self, *args):
        this = _nsimcli.new_microcode_pointers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_microcode_pointers
    __del__ = lambda self: None
microcode_pointers_swigregister = _nsimcli.microcode_pointers_swigregister
microcode_pointers_swigregister(microcode_pointers)

class calculated_field_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calculated_field_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calculated_field_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["field_width"] = _nsimcli.calculated_field_info_t_field_width_set
    __swig_getmethods__["field_width"] = _nsimcli.calculated_field_info_t_field_width_get
    if _newclass:
        field_width = _swig_property(_nsimcli.calculated_field_info_t_field_width_get, _nsimcli.calculated_field_info_t_field_width_set)
    __swig_setmethods__["key_part_index"] = _nsimcli.calculated_field_info_t_key_part_index_set
    __swig_getmethods__["key_part_index"] = _nsimcli.calculated_field_info_t_key_part_index_get
    if _newclass:
        key_part_index = _swig_property(_nsimcli.calculated_field_info_t_key_part_index_get, _nsimcli.calculated_field_info_t_key_part_index_set)

    def __init__(self, *args):
        this = _nsimcli.new_calculated_field_info_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_calculated_field_info_t
    __del__ = lambda self: None
calculated_field_info_t_swigregister = _nsimcli.calculated_field_info_t_swigregister
calculated_field_info_t_swigregister(calculated_field_info_t)

class udk_table_properties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_table_properties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_table_properties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max_number_of_field_selects_for_each_key_part"] = _nsimcli.udk_table_properties_max_number_of_field_selects_for_each_key_part_set
    __swig_getmethods__["max_number_of_field_selects_for_each_key_part"] = _nsimcli.udk_table_properties_max_number_of_field_selects_for_each_key_part_get
    if _newclass:
        max_number_of_field_selects_for_each_key_part = _swig_property(_nsimcli.udk_table_properties_max_number_of_field_selects_for_each_key_part_get, _nsimcli.udk_table_properties_max_number_of_field_selects_for_each_key_part_set)
    __swig_setmethods__["m_key_sizes_per_key_part"] = _nsimcli.udk_table_properties_m_key_sizes_per_key_part_set
    __swig_getmethods__["m_key_sizes_per_key_part"] = _nsimcli.udk_table_properties_m_key_sizes_per_key_part_get
    if _newclass:
        m_key_sizes_per_key_part = _swig_property(_nsimcli.udk_table_properties_m_key_sizes_per_key_part_get, _nsimcli.udk_table_properties_m_key_sizes_per_key_part_set)
    __swig_setmethods__["m_constant_bits_per_key_part"] = _nsimcli.udk_table_properties_m_constant_bits_per_key_part_set
    __swig_getmethods__["m_constant_bits_per_key_part"] = _nsimcli.udk_table_properties_m_constant_bits_per_key_part_get
    if _newclass:
        m_constant_bits_per_key_part = _swig_property(_nsimcli.udk_table_properties_m_constant_bits_per_key_part_get, _nsimcli.udk_table_properties_m_constant_bits_per_key_part_set)
    __swig_setmethods__["lookup_keys_construction_table_pointers"] = _nsimcli.udk_table_properties_lookup_keys_construction_table_pointers_set
    __swig_getmethods__["lookup_keys_construction_table_pointers"] = _nsimcli.udk_table_properties_lookup_keys_construction_table_pointers_get
    if _newclass:
        lookup_keys_construction_table_pointers = _swig_property(_nsimcli.udk_table_properties_lookup_keys_construction_table_pointers_get, _nsimcli.udk_table_properties_lookup_keys_construction_table_pointers_set)
    __swig_setmethods__["table_calculated_fields"] = _nsimcli.udk_table_properties_table_calculated_fields_set
    __swig_getmethods__["table_calculated_fields"] = _nsimcli.udk_table_properties_table_calculated_fields_get
    if _newclass:
        table_calculated_fields = _swig_property(_nsimcli.udk_table_properties_table_calculated_fields_get, _nsimcli.udk_table_properties_table_calculated_fields_set)

    def __init__(self):
        this = _nsimcli.new_udk_table_properties()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_udk_table_properties
    __del__ = lambda self: None
udk_table_properties_swigregister = _nsimcli.udk_table_properties_swigregister
udk_table_properties_swigregister(udk_table_properties)

class udk_resources(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_resources, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_resources, name)
    __repr__ = _swig_repr
    __swig_setmethods__["macro_id"] = _nsimcli.udk_resources_macro_id_set
    __swig_getmethods__["macro_id"] = _nsimcli.udk_resources_macro_id_get
    if _newclass:
        macro_id = _swig_property(_nsimcli.udk_resources_macro_id_get, _nsimcli.udk_resources_macro_id_set)
    __swig_setmethods__["field_selects"] = _nsimcli.udk_resources_field_selects_set
    __swig_getmethods__["field_selects"] = _nsimcli.udk_resources_field_selects_get
    if _newclass:
        field_selects = _swig_property(_nsimcli.udk_resources_field_selects_get, _nsimcli.udk_resources_field_selects_set)
    __swig_setmethods__["tables_properties"] = _nsimcli.udk_resources_tables_properties_set
    __swig_getmethods__["tables_properties"] = _nsimcli.udk_resources_tables_properties_get
    if _newclass:
        tables_properties = _swig_property(_nsimcli.udk_resources_tables_properties_get, _nsimcli.udk_resources_tables_properties_set)
    __swig_setmethods__["scoper_macro_table_pointer"] = _nsimcli.udk_resources_scoper_macro_table_pointer_set
    __swig_getmethods__["scoper_macro_table_pointer"] = _nsimcli.udk_resources_scoper_macro_table_pointer_get
    if _newclass:
        scoper_macro_table_pointer = _swig_property(_nsimcli.udk_resources_scoper_macro_table_pointer_get, _nsimcli.udk_resources_scoper_macro_table_pointer_set)
    __swig_setmethods__["lookup_keys_construction_macro_table_pointer"] = _nsimcli.udk_resources_lookup_keys_construction_macro_table_pointer_set
    __swig_getmethods__["lookup_keys_construction_macro_table_pointer"] = _nsimcli.udk_resources_lookup_keys_construction_macro_table_pointer_get
    if _newclass:
        lookup_keys_construction_macro_table_pointer = _swig_property(_nsimcli.udk_resources_lookup_keys_construction_macro_table_pointer_get, _nsimcli.udk_resources_lookup_keys_construction_macro_table_pointer_set)
    __swig_setmethods__["field_select_index_width_in_bits"] = _nsimcli.udk_resources_field_select_index_width_in_bits_set
    __swig_getmethods__["field_select_index_width_in_bits"] = _nsimcli.udk_resources_field_select_index_width_in_bits_get
    if _newclass:
        field_select_index_width_in_bits = _swig_property(_nsimcli.udk_resources_field_select_index_width_in_bits_get, _nsimcli.udk_resources_field_select_index_width_in_bits_set)
    __swig_setmethods__["field_select_not_used_value"] = _nsimcli.udk_resources_field_select_not_used_value_set
    __swig_getmethods__["field_select_not_used_value"] = _nsimcli.udk_resources_field_select_not_used_value_get
    if _newclass:
        field_select_not_used_value = _swig_property(_nsimcli.udk_resources_field_select_not_used_value_get, _nsimcli.udk_resources_field_select_not_used_value_set)
    __swig_setmethods__["offset_of_field_selects_in_key_construction_microcode_line"] = _nsimcli.udk_resources_offset_of_field_selects_in_key_construction_microcode_line_set
    __swig_getmethods__["offset_of_field_selects_in_key_construction_microcode_line"] = _nsimcli.udk_resources_offset_of_field_selects_in_key_construction_microcode_line_get
    if _newclass:
        offset_of_field_selects_in_key_construction_microcode_line = _swig_property(_nsimcli.udk_resources_offset_of_field_selects_in_key_construction_microcode_line_get, _nsimcli.udk_resources_offset_of_field_selects_in_key_construction_microcode_line_set)
    __swig_setmethods__["first_lsb_channel_with_no_pd_support"] = _nsimcli.udk_resources_first_lsb_channel_with_no_pd_support_set
    __swig_getmethods__["first_lsb_channel_with_no_pd_support"] = _nsimcli.udk_resources_first_lsb_channel_with_no_pd_support_get
    if _newclass:
        first_lsb_channel_with_no_pd_support = _swig_property(_nsimcli.udk_resources_first_lsb_channel_with_no_pd_support_get, _nsimcli.udk_resources_first_lsb_channel_with_no_pd_support_set)
    __swig_setmethods__["first_bypass_channel_with_pd_support"] = _nsimcli.udk_resources_first_bypass_channel_with_pd_support_set
    __swig_getmethods__["first_bypass_channel_with_pd_support"] = _nsimcli.udk_resources_first_bypass_channel_with_pd_support_get
    if _newclass:
        first_bypass_channel_with_pd_support = _swig_property(_nsimcli.udk_resources_first_bypass_channel_with_pd_support_get, _nsimcli.udk_resources_first_bypass_channel_with_pd_support_set)

    def __init__(self, *args):
        this = _nsimcli.new_udk_resources(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_udk_resources
    __del__ = lambda self: None
udk_resources_swigregister = _nsimcli.udk_resources_swigregister
udk_resources_swigregister(udk_resources)

class microcode_write(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, microcode_write, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, microcode_write, name)
    __repr__ = _swig_repr
    __swig_setmethods__["block"] = _nsimcli.microcode_write_block_set
    __swig_getmethods__["block"] = _nsimcli.microcode_write_block_get
    if _newclass:
        block = _swig_property(_nsimcli.microcode_write_block_get, _nsimcli.microcode_write_block_set)
    __swig_setmethods__["name"] = _nsimcli.microcode_write_name_set
    __swig_getmethods__["name"] = _nsimcli.microcode_write_name_get
    if _newclass:
        name = _swig_property(_nsimcli.microcode_write_name_get, _nsimcli.microcode_write_name_set)
    __swig_setmethods__["array_index"] = _nsimcli.microcode_write_array_index_set
    __swig_getmethods__["array_index"] = _nsimcli.microcode_write_array_index_get
    if _newclass:
        array_index = _swig_property(_nsimcli.microcode_write_array_index_get, _nsimcli.microcode_write_array_index_set)
    __swig_setmethods__["line"] = _nsimcli.microcode_write_line_set
    __swig_getmethods__["line"] = _nsimcli.microcode_write_line_get
    if _newclass:
        line = _swig_property(_nsimcli.microcode_write_line_get, _nsimcli.microcode_write_line_set)
    __swig_setmethods__["offset"] = _nsimcli.microcode_write_offset_set
    __swig_getmethods__["offset"] = _nsimcli.microcode_write_offset_get
    if _newclass:
        offset = _swig_property(_nsimcli.microcode_write_offset_get, _nsimcli.microcode_write_offset_set)
    __swig_setmethods__["width"] = _nsimcli.microcode_write_width_set
    __swig_getmethods__["width"] = _nsimcli.microcode_write_width_get
    if _newclass:
        width = _swig_property(_nsimcli.microcode_write_width_get, _nsimcli.microcode_write_width_set)
    __swig_setmethods__["data"] = _nsimcli.microcode_write_data_set
    __swig_getmethods__["data"] = _nsimcli.microcode_write_data_get
    if _newclass:
        data = _swig_property(_nsimcli.microcode_write_data_get, _nsimcli.microcode_write_data_set)

    def get_width_in_bytes(self):
        return _nsimcli.microcode_write_get_width_in_bytes(self)

    def __init__(self, *args):
        this = _nsimcli.new_microcode_write(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_microcode_write
    __del__ = lambda self: None
microcode_write_swigregister = _nsimcli.microcode_write_swigregister
microcode_write_swigregister(microcode_write)
UDK_COMPONENT_TYPE_UDF_FROM_PACKET = cvar.UDK_COMPONENT_TYPE_UDF_FROM_PACKET
UDK_COMPONENT_TYPE_UDF_FROM_PD = cvar.UDK_COMPONENT_TYPE_UDF_FROM_PD
UDK_COMPONENT_TYPE_CALCULATED_FIELD = cvar.UDK_COMPONENT_TYPE_CALCULATED_FIELD
UDK_COMPONENT_TYPE_RANGE_COMPRESSION_RESULT = cvar.UDK_COMPONENT_TYPE_RANGE_COMPRESSION_RESULT

PLACE_UDK_RES_OK = _nsimcli.PLACE_UDK_RES_OK
PLACE_UDK_RES_ENO_PLACEMENT = _nsimcli.PLACE_UDK_RES_ENO_PLACEMENT
PLACE_UDK_RES_EWRONG_ARGS = _nsimcli.PLACE_UDK_RES_EWRONG_ARGS
PLACE_UDK_RES_EWRONG_KEY_SIZE = _nsimcli.PLACE_UDK_RES_EWRONG_KEY_SIZE
PLACE_UDK_RES_ENOTIMPLEMENTED = _nsimcli.PLACE_UDK_RES_ENOTIMPLEMENTED
PLACE_UDK_RES_EUNKNOWN = _nsimcli.PLACE_UDK_RES_EUNKNOWN
class udk_component(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_component, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_udk_type"] = _nsimcli.udk_component_m_udk_type_set
    __swig_getmethods__["m_udk_type"] = _nsimcli.udk_component_m_udk_type_get
    if _newclass:
        m_udk_type = _swig_property(_nsimcli.udk_component_m_udk_type_get, _nsimcli.udk_component_m_udk_type_set)
    __swig_setmethods__["m_data"] = _nsimcli.udk_component_m_data_set
    __swig_getmethods__["m_data"] = _nsimcli.udk_component_m_data_get
    if _newclass:
        m_data = _swig_property(_nsimcli.udk_component_m_data_get, _nsimcli.udk_component_m_data_set)
    __swig_setmethods__["m_width_in_bits"] = _nsimcli.udk_component_m_width_in_bits_set
    __swig_getmethods__["m_width_in_bits"] = _nsimcli.udk_component_m_width_in_bits_get
    if _newclass:
        m_width_in_bits = _swig_property(_nsimcli.udk_component_m_width_in_bits_get, _nsimcli.udk_component_m_width_in_bits_set)
    __swig_setmethods__["offset_in_bits"] = _nsimcli.udk_component_offset_in_bits_set
    __swig_getmethods__["offset_in_bits"] = _nsimcli.udk_component_offset_in_bits_get
    if _newclass:
        offset_in_bits = _swig_property(_nsimcli.udk_component_offset_in_bits_get, _nsimcli.udk_component_offset_in_bits_set)
    __swig_setmethods__["m_description"] = _nsimcli.udk_component_m_description_set
    __swig_getmethods__["m_description"] = _nsimcli.udk_component_m_description_get
    if _newclass:
        m_description = _swig_property(_nsimcli.udk_component_m_description_get, _nsimcli.udk_component_m_description_set)

    def __init__(self, *args):
        this = _nsimcli.new_udk_component(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_width_in_bits(self):
        return _nsimcli.udk_component_get_width_in_bits(self)

    def get_width_on_key_in_bits(self):
        return _nsimcli.udk_component_get_width_on_key_in_bits(self)

    def is_intersecting(self, _component):
        return _nsimcli.udk_component_is_intersecting(self, _component)

    def set_description(self, comment):
        return _nsimcli.udk_component_set_description(self, comment)

    def generate_udk_component_to_string(self):
        return _nsimcli.udk_component_generate_udk_component_to_string(self)
    __swig_destroy__ = _nsimcli.delete_udk_component
    __del__ = lambda self: None
udk_component_swigregister = _nsimcli.udk_component_swigregister
udk_component_swigregister(udk_component)
MAX_COMPONENT_DESCRIPTION_SIZE = cvar.MAX_COMPONENT_DESCRIPTION_SIZE

class udf_from_packet_desc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udf_from_packet_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udf_from_packet_desc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["protocol_layer"] = _nsimcli.udf_from_packet_desc_protocol_layer_set
    __swig_getmethods__["protocol_layer"] = _nsimcli.udf_from_packet_desc_protocol_layer_get
    if _newclass:
        protocol_layer = _swig_property(_nsimcli.udf_from_packet_desc_protocol_layer_get, _nsimcli.udf_from_packet_desc_protocol_layer_set)
    __swig_setmethods__["header"] = _nsimcli.udf_from_packet_desc_header_set
    __swig_getmethods__["header"] = _nsimcli.udf_from_packet_desc_header_get
    if _newclass:
        header = _swig_property(_nsimcli.udf_from_packet_desc_header_get, _nsimcli.udf_from_packet_desc_header_set)
    __swig_setmethods__["is_relative"] = _nsimcli.udf_from_packet_desc_is_relative_set
    __swig_getmethods__["is_relative"] = _nsimcli.udf_from_packet_desc_is_relative_get
    if _newclass:
        is_relative = _swig_property(_nsimcli.udf_from_packet_desc_is_relative_get, _nsimcli.udf_from_packet_desc_is_relative_set)

    def __init__(self):
        this = _nsimcli.new_udf_from_packet_desc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_udf_from_packet_desc
    __del__ = lambda self: None
udf_from_packet_desc_swigregister = _nsimcli.udf_from_packet_desc_swigregister
udf_from_packet_desc_swigregister(udf_from_packet_desc)

class data_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data_u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["udf_from_packet_instance"] = _nsimcli.data_u_udf_from_packet_instance_set
    __swig_getmethods__["udf_from_packet_instance"] = _nsimcli.data_u_udf_from_packet_instance_get
    if _newclass:
        udf_from_packet_instance = _swig_property(_nsimcli.data_u_udf_from_packet_instance_get, _nsimcli.data_u_udf_from_packet_instance_set)
    __swig_setmethods__["m_calculated_field_instance"] = _nsimcli.data_u_m_calculated_field_instance_set
    __swig_getmethods__["m_calculated_field_instance"] = _nsimcli.data_u_m_calculated_field_instance_get
    if _newclass:
        m_calculated_field_instance = _swig_property(_nsimcli.data_u_m_calculated_field_instance_get, _nsimcli.data_u_m_calculated_field_instance_set)

    def __init__(self):
        this = _nsimcli.new_data_u()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_data_u
    __del__ = lambda self: None
data_u_swigregister = _nsimcli.data_u_swigregister
data_u_swigregister(data_u)

class calculated_field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calculated_field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calculated_field, name)
    __repr__ = _swig_repr
    __swig_setmethods__["field_id"] = _nsimcli.calculated_field_field_id_set
    __swig_getmethods__["field_id"] = _nsimcli.calculated_field_field_id_get
    if _newclass:
        field_id = _swig_property(_nsimcli.calculated_field_field_id_get, _nsimcli.calculated_field_field_id_set)
    __swig_setmethods__["field_select_index"] = _nsimcli.calculated_field_field_select_index_set
    __swig_getmethods__["field_select_index"] = _nsimcli.calculated_field_field_select_index_get
    if _newclass:
        field_select_index = _swig_property(_nsimcli.calculated_field_field_select_index_get, _nsimcli.calculated_field_field_select_index_set)
    __swig_setmethods__["key_part_index"] = _nsimcli.calculated_field_key_part_index_set
    __swig_getmethods__["key_part_index"] = _nsimcli.calculated_field_key_part_index_get
    if _newclass:
        key_part_index = _swig_property(_nsimcli.calculated_field_key_part_index_get, _nsimcli.calculated_field_key_part_index_set)

    def __init__(self):
        this = _nsimcli.new_calculated_field()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_calculated_field
    __del__ = lambda self: None
calculated_field_swigregister = _nsimcli.calculated_field_swigregister
calculated_field_swigregister(calculated_field)

class udk_table_id_and_components(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_table_id_and_components, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_table_id_and_components, name)
    __repr__ = _swig_repr
    __swig_setmethods__["udk_table_id"] = _nsimcli.udk_table_id_and_components_udk_table_id_set
    __swig_getmethods__["udk_table_id"] = _nsimcli.udk_table_id_and_components_udk_table_id_get
    if _newclass:
        udk_table_id = _swig_property(_nsimcli.udk_table_id_and_components_udk_table_id_get, _nsimcli.udk_table_id_and_components_udk_table_id_set)
    __swig_setmethods__["udk_components"] = _nsimcli.udk_table_id_and_components_udk_components_set
    __swig_getmethods__["udk_components"] = _nsimcli.udk_table_id_and_components_udk_components_get
    if _newclass:
        udk_components = _swig_property(_nsimcli.udk_table_id_and_components_udk_components_get, _nsimcli.udk_table_id_and_components_udk_components_set)

    def __init__(self, *args):
        this = _nsimcli.new_udk_table_id_and_components(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_udk_table_id_and_components
    __del__ = lambda self: None
udk_table_id_and_components_swigregister = _nsimcli.udk_table_id_and_components_swigregister
udk_table_id_and_components_swigregister(udk_table_id_and_components)

class place_udk_info_per_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, place_udk_info_per_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, place_udk_info_per_table, name)
    __repr__ = _swig_repr
    __swig_setmethods__["udk_table_id"] = _nsimcli.place_udk_info_per_table_udk_table_id_set
    __swig_getmethods__["udk_table_id"] = _nsimcli.place_udk_info_per_table_udk_table_id_get
    if _newclass:
        udk_table_id = _swig_property(_nsimcli.place_udk_info_per_table_udk_table_id_get, _nsimcli.place_udk_info_per_table_udk_table_id_set)
    __swig_setmethods__["number_of_udk_components"] = _nsimcli.place_udk_info_per_table_number_of_udk_components_set
    __swig_getmethods__["number_of_udk_components"] = _nsimcli.place_udk_info_per_table_number_of_udk_components_get
    if _newclass:
        number_of_udk_components = _swig_property(_nsimcli.place_udk_info_per_table_number_of_udk_components_get, _nsimcli.place_udk_info_per_table_number_of_udk_components_set)

    def __init__(self, *args):
        this = _nsimcli.new_place_udk_info_per_table(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_place_udk_info_per_table
    __del__ = lambda self: None
place_udk_info_per_table_swigregister = _nsimcli.place_udk_info_per_table_swigregister
place_udk_info_per_table_swigregister(place_udk_info_per_table)

class place_udk_command(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, place_udk_command, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, place_udk_command, name)
    __repr__ = _swig_repr
    __swig_setmethods__["macro_id"] = _nsimcli.place_udk_command_macro_id_set
    __swig_getmethods__["macro_id"] = _nsimcli.place_udk_command_macro_id_get
    if _newclass:
        macro_id = _swig_property(_nsimcli.place_udk_command_macro_id_get, _nsimcli.place_udk_command_macro_id_set)
    __swig_setmethods__["number_of_udk_tables"] = _nsimcli.place_udk_command_number_of_udk_tables_set
    __swig_getmethods__["number_of_udk_tables"] = _nsimcli.place_udk_command_number_of_udk_tables_get
    if _newclass:
        number_of_udk_tables = _swig_property(_nsimcli.place_udk_command_number_of_udk_tables_get, _nsimcli.place_udk_command_number_of_udk_tables_set)
    __swig_setmethods__["number_of_udk_components"] = _nsimcli.place_udk_command_number_of_udk_components_set
    __swig_getmethods__["number_of_udk_components"] = _nsimcli.place_udk_command_number_of_udk_components_get
    if _newclass:
        number_of_udk_components = _swig_property(_nsimcli.place_udk_command_number_of_udk_components_get, _nsimcli.place_udk_command_number_of_udk_components_set)
    __swig_setmethods__["place_udk_tables_info"] = _nsimcli.place_udk_command_place_udk_tables_info_set
    __swig_getmethods__["place_udk_tables_info"] = _nsimcli.place_udk_command_place_udk_tables_info_get
    if _newclass:
        place_udk_tables_info = _swig_property(_nsimcli.place_udk_command_place_udk_tables_info_get, _nsimcli.place_udk_command_place_udk_tables_info_set)
    __swig_setmethods__["values"] = _nsimcli.place_udk_command_values_set
    __swig_getmethods__["values"] = _nsimcli.place_udk_command_values_get
    if _newclass:
        values = _swig_property(_nsimcli.place_udk_command_values_get, _nsimcli.place_udk_command_values_set)

    def __init__(self, *args):
        this = _nsimcli.new_place_udk_command(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_command_len(self):
        return _nsimcli.place_udk_command_get_command_len(self)
    __swig_destroy__ = _nsimcli.delete_place_udk_command
    __del__ = lambda self: None
place_udk_command_swigregister = _nsimcli.place_udk_command_swigregister
place_udk_command_swigregister(place_udk_command)

class udk_translation_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_translation_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_translation_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["placement_info"] = _nsimcli.udk_translation_info_placement_info_set
    __swig_getmethods__["placement_info"] = _nsimcli.udk_translation_info_placement_info_get
    if _newclass:
        placement_info = _swig_property(_nsimcli.udk_translation_info_placement_info_get, _nsimcli.udk_translation_info_placement_info_set)
    __swig_setmethods__["number_of_components"] = _nsimcli.udk_translation_info_number_of_components_set
    __swig_getmethods__["number_of_components"] = _nsimcli.udk_translation_info_number_of_components_get
    if _newclass:
        number_of_components = _swig_property(_nsimcli.udk_translation_info_number_of_components_get, _nsimcli.udk_translation_info_number_of_components_set)
    __swig_setmethods__["physical_key_width"] = _nsimcli.udk_translation_info_physical_key_width_set
    __swig_getmethods__["physical_key_width"] = _nsimcli.udk_translation_info_physical_key_width_get
    if _newclass:
        physical_key_width = _swig_property(_nsimcli.udk_translation_info_physical_key_width_get, _nsimcli.udk_translation_info_physical_key_width_set)
    __swig_setmethods__["constant_bits_per_key_part"] = _nsimcli.udk_translation_info_constant_bits_per_key_part_set
    __swig_getmethods__["constant_bits_per_key_part"] = _nsimcli.udk_translation_info_constant_bits_per_key_part_get
    if _newclass:
        constant_bits_per_key_part = _swig_property(_nsimcli.udk_translation_info_constant_bits_per_key_part_get, _nsimcli.udk_translation_info_constant_bits_per_key_part_set)

    def __init__(self):
        this = _nsimcli.new_udk_translation_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_udk_component_offset_on_key_in_bits(self, component_index):
        return _nsimcli.udk_translation_info_get_udk_component_offset_on_key_in_bits(self, component_index)

    def get_udk_component_width_in_bits(self, component_index):
        return _nsimcli.udk_translation_info_get_udk_component_width_in_bits(self, component_index)

    def get_key_info(self, key):
        return _nsimcli.udk_translation_info_get_key_info(self, key)

    def clean(self):
        return _nsimcli.udk_translation_info_clean(self)
    __swig_destroy__ = _nsimcli.delete_udk_translation_info
    __del__ = lambda self: None
udk_translation_info_swigregister = _nsimcli.udk_translation_info_swigregister
udk_translation_info_swigregister(udk_translation_info)

class placement_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, placement_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, placement_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fragments_vec"] = _nsimcli.placement_info_t_fragments_vec_set
    __swig_getmethods__["fragments_vec"] = _nsimcli.placement_info_t_fragments_vec_get
    if _newclass:
        fragments_vec = _swig_property(_nsimcli.placement_info_t_fragments_vec_get, _nsimcli.placement_info_t_fragments_vec_set)
    __swig_setmethods__["description"] = _nsimcli.placement_info_t_description_set
    __swig_getmethods__["description"] = _nsimcli.placement_info_t_description_get
    if _newclass:
        description = _swig_property(_nsimcli.placement_info_t_description_get, _nsimcli.placement_info_t_description_set)
    __swig_setmethods__["minimal_offset"] = _nsimcli.placement_info_t_minimal_offset_set
    __swig_getmethods__["minimal_offset"] = _nsimcli.placement_info_t_minimal_offset_get
    if _newclass:
        minimal_offset = _swig_property(_nsimcli.placement_info_t_minimal_offset_get, _nsimcli.placement_info_t_minimal_offset_set)
    __swig_setmethods__["total_width"] = _nsimcli.placement_info_t_total_width_set
    __swig_getmethods__["total_width"] = _nsimcli.placement_info_t_total_width_get
    if _newclass:
        total_width = _swig_property(_nsimcli.placement_info_t_total_width_get, _nsimcli.placement_info_t_total_width_set)

    def __init__(self):
        this = _nsimcli.new_placement_info_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add_placement_info(self, _offset, _width, _processed_index, offset_in_component, _description):
        return _nsimcli.placement_info_t_add_placement_info(self, _offset, _width, _processed_index, offset_in_component, _description)
    __swig_destroy__ = _nsimcli.delete_placement_info_t
    __del__ = lambda self: None
placement_info_t_swigregister = _nsimcli.placement_info_t_swigregister
placement_info_t_swigregister(placement_info_t)

class fragment_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fragment_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fragment_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["offset"] = _nsimcli.fragment_info_t_offset_set
    __swig_getmethods__["offset"] = _nsimcli.fragment_info_t_offset_get
    if _newclass:
        offset = _swig_property(_nsimcli.fragment_info_t_offset_get, _nsimcli.fragment_info_t_offset_set)
    __swig_setmethods__["width"] = _nsimcli.fragment_info_t_width_set
    __swig_getmethods__["width"] = _nsimcli.fragment_info_t_width_get
    if _newclass:
        width = _swig_property(_nsimcli.fragment_info_t_width_get, _nsimcli.fragment_info_t_width_set)
    __swig_setmethods__["processed_index"] = _nsimcli.fragment_info_t_processed_index_set
    __swig_getmethods__["processed_index"] = _nsimcli.fragment_info_t_processed_index_get
    if _newclass:
        processed_index = _swig_property(_nsimcli.fragment_info_t_processed_index_get, _nsimcli.fragment_info_t_processed_index_set)
    __swig_setmethods__["offset_in_component"] = _nsimcli.fragment_info_t_offset_in_component_set
    __swig_getmethods__["offset_in_component"] = _nsimcli.fragment_info_t_offset_in_component_get
    if _newclass:
        offset_in_component = _swig_property(_nsimcli.fragment_info_t_offset_in_component_get, _nsimcli.fragment_info_t_offset_in_component_set)

    def __init__(self, *args):
        this = _nsimcli.new_fragment_info_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_fragment_info_t
    __del__ = lambda self: None
fragment_info_t_swigregister = _nsimcli.fragment_info_t_swigregister
fragment_info_t_swigregister(fragment_info_t)

UDK_PLACEMENT_BUCKET_TYPE_PACKET_AND_PD = _nsimcli.UDK_PLACEMENT_BUCKET_TYPE_PACKET_AND_PD
UDK_PLACEMENT_BUCKET_TYPE_PACKET_ONLY = _nsimcli.UDK_PLACEMENT_BUCKET_TYPE_PACKET_ONLY
UDK_PLACEMENT_BUCKET_TYPE_CALCULATED_ONLY = _nsimcli.UDK_PLACEMENT_BUCKET_TYPE_CALCULATED_ONLY
class runtime_flexibility_library(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, runtime_flexibility_library, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, runtime_flexibility_library, name)
    __repr__ = _swig_repr

    def __init__(self, cback_print_func, is_placing_for_nsim, library_id, is_placing_for_hw=True):
        this = _nsimcli.new_runtime_flexibility_library(cback_print_func, is_placing_for_nsim, library_id, is_placing_for_hw)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_callback_print(self, cback_print_func):
        return _nsimcli.runtime_flexibility_library_set_callback_print(self, cback_print_func)

    def place_udk(self, resources, udk_components, placement_output, trans_info):
        return _nsimcli.runtime_flexibility_library_place_udk(self, resources, udk_components, placement_output, trans_info)
    __swig_destroy__ = _nsimcli.delete_runtime_flexibility_library
    __del__ = lambda self: None

    def get_last_udk_placement(self, table_index, key_part_idx):
        return _nsimcli.runtime_flexibility_library_get_last_udk_placement(self, table_index, key_part_idx)

    def get_last_udk_placement_str(self):
        return _nsimcli.runtime_flexibility_library_get_last_udk_placement_str(self)

    def set_is_placing_for_nsim(self, is_placing_for_nsim):
        return _nsimcli.runtime_flexibility_library_set_is_placing_for_nsim(self, is_placing_for_nsim)

    def set_is_placing_for_hw(self, is_placing_for_hw):
        return _nsimcli.runtime_flexibility_library_set_is_placing_for_hw(self, is_placing_for_hw)

    def get_udk_data_output_str(self):
        return _nsimcli.runtime_flexibility_library_get_udk_data_output_str(self)

    def set_verbose(self, verbose):
        return _nsimcli.runtime_flexibility_library_set_verbose(self, verbose)

    def set_components_fragmentization(self, enable_fragment):
        return _nsimcli.runtime_flexibility_library_set_components_fragmentization(self, enable_fragment)

    def set_log_level(self, log_level):
        return _nsimcli.runtime_flexibility_library_set_log_level(self, log_level)

    def get_log_level(self):
        return _nsimcli.runtime_flexibility_library_get_log_level(self)

    def check_log_level(self, log_level):
        return _nsimcli.runtime_flexibility_library_check_log_level(self, log_level)
runtime_flexibility_library_swigregister = _nsimcli.runtime_flexibility_library_swigregister
runtime_flexibility_library_swigregister(runtime_flexibility_library)

class udk_component_internal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_component_internal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_component_internal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["component"] = _nsimcli.udk_component_internal_component_set
    __swig_getmethods__["component"] = _nsimcli.udk_component_internal_component_get
    if _newclass:
        component = _swig_property(_nsimcli.udk_component_internal_component_get, _nsimcli.udk_component_internal_component_set)
    __swig_setmethods__["index"] = _nsimcli.udk_component_internal_index_set
    __swig_getmethods__["index"] = _nsimcli.udk_component_internal_index_get
    if _newclass:
        index = _swig_property(_nsimcli.udk_component_internal_index_get, _nsimcli.udk_component_internal_index_set)
    __swig_setmethods__["component_index_in_place_udk_vec_per_table"] = _nsimcli.udk_component_internal_component_index_in_place_udk_vec_per_table_set
    __swig_getmethods__["component_index_in_place_udk_vec_per_table"] = _nsimcli.udk_component_internal_component_index_in_place_udk_vec_per_table_get
    if _newclass:
        component_index_in_place_udk_vec_per_table = _swig_property(_nsimcli.udk_component_internal_component_index_in_place_udk_vec_per_table_get, _nsimcli.udk_component_internal_component_index_in_place_udk_vec_per_table_set)
    __swig_setmethods__["component_fragment_offset"] = _nsimcli.udk_component_internal_component_fragment_offset_set
    __swig_getmethods__["component_fragment_offset"] = _nsimcli.udk_component_internal_component_fragment_offset_get
    if _newclass:
        component_fragment_offset = _swig_property(_nsimcli.udk_component_internal_component_fragment_offset_get, _nsimcli.udk_component_internal_component_fragment_offset_set)
    __swig_setmethods__["number_of_tables_used_in"] = _nsimcli.udk_component_internal_number_of_tables_used_in_set
    __swig_getmethods__["number_of_tables_used_in"] = _nsimcli.udk_component_internal_number_of_tables_used_in_get
    if _newclass:
        number_of_tables_used_in = _swig_property(_nsimcli.udk_component_internal_number_of_tables_used_in_get, _nsimcli.udk_component_internal_number_of_tables_used_in_set)
    __swig_setmethods__["fragmented_component_parent_skip_placement"] = _nsimcli.udk_component_internal_fragmented_component_parent_skip_placement_set
    __swig_getmethods__["fragmented_component_parent_skip_placement"] = _nsimcli.udk_component_internal_fragmented_component_parent_skip_placement_get
    if _newclass:
        fragmented_component_parent_skip_placement = _swig_property(_nsimcli.udk_component_internal_fragmented_component_parent_skip_placement_get, _nsimcli.udk_component_internal_fragmented_component_parent_skip_placement_set)
    __swig_setmethods__["fragmented_component_child"] = _nsimcli.udk_component_internal_fragmented_component_child_set
    __swig_getmethods__["fragmented_component_child"] = _nsimcli.udk_component_internal_fragmented_component_child_get
    if _newclass:
        fragmented_component_child = _swig_property(_nsimcli.udk_component_internal_fragmented_component_child_get, _nsimcli.udk_component_internal_fragmented_component_child_set)
    __swig_setmethods__["lsb_penalty"] = _nsimcli.udk_component_internal_lsb_penalty_set
    __swig_getmethods__["lsb_penalty"] = _nsimcli.udk_component_internal_lsb_penalty_get
    if _newclass:
        lsb_penalty = _swig_property(_nsimcli.udk_component_internal_lsb_penalty_get, _nsimcli.udk_component_internal_lsb_penalty_set)

    def may_share_channel(self, rhs_component):
        return _nsimcli.udk_component_internal_may_share_channel(self, rhs_component)

    def is_intersecting(self, rhs_component):
        return _nsimcli.udk_component_internal_is_intersecting(self, rhs_component)

    def __init__(self, *args):
        this = _nsimcli.new_udk_component_internal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_split_set_of_tables(self):
        return _nsimcli.udk_component_internal_get_split_set_of_tables(self)

    def fragment_internal_component_split_list_init(self, split_combinations_vec):
        return _nsimcli.udk_component_internal_fragment_internal_component_split_list_init(self, split_combinations_vec)

    def fragment_internal_component_vec_gen(self, fragments_start_index, comb, fragments_vec):
        return _nsimcli.udk_component_internal_fragment_internal_component_vec_gen(self, fragments_start_index, comb, fragments_vec)

    def get_msb_penalty(self):
        return _nsimcli.udk_component_internal_get_msb_penalty(self)

    def get_width_with_lsb_penalty(self):
        return _nsimcli.udk_component_internal_get_width_with_lsb_penalty(self)

    def get_offset_to_lsb_with_penalty(self):
        return _nsimcli.udk_component_internal_get_offset_to_lsb_with_penalty(self)
    if _newclass:
        get_lsb_penalty = staticmethod(_nsimcli.udk_component_internal_get_lsb_penalty)
    else:
        get_lsb_penalty = _nsimcli.udk_component_internal_get_lsb_penalty
    __swig_destroy__ = _nsimcli.delete_udk_component_internal
    __del__ = lambda self: None
udk_component_internal_swigregister = _nsimcli.udk_component_internal_swigregister
udk_component_internal_swigregister(udk_component_internal)

def udk_component_internal_get_lsb_penalty(_component):
    return _nsimcli.udk_component_internal_get_lsb_penalty(_component)
udk_component_internal_get_lsb_penalty = _nsimcli.udk_component_internal_get_lsb_penalty

class udk_components_group(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_components_group, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_components_group, name)
    __repr__ = _swig_repr
    __swig_setmethods__["components"] = _nsimcli.udk_components_group_components_set
    __swig_getmethods__["components"] = _nsimcli.udk_components_group_components_get
    if _newclass:
        components = _swig_property(_nsimcli.udk_components_group_components_get, _nsimcli.udk_components_group_components_set)
    __swig_setmethods__["msb_offset"] = _nsimcli.udk_components_group_msb_offset_set
    __swig_getmethods__["msb_offset"] = _nsimcli.udk_components_group_msb_offset_get
    if _newclass:
        msb_offset = _swig_property(_nsimcli.udk_components_group_msb_offset_get, _nsimcli.udk_components_group_msb_offset_set)
    __swig_setmethods__["offset_to_lsb_with_penalty"] = _nsimcli.udk_components_group_offset_to_lsb_with_penalty_set
    __swig_getmethods__["offset_to_lsb_with_penalty"] = _nsimcli.udk_components_group_offset_to_lsb_with_penalty_get
    if _newclass:
        offset_to_lsb_with_penalty = _swig_property(_nsimcli.udk_components_group_offset_to_lsb_with_penalty_get, _nsimcli.udk_components_group_offset_to_lsb_with_penalty_set)

    def get_msb_penalty(self):
        return _nsimcli.udk_components_group_get_msb_penalty(self)

    def add_component_on_lsb(self, component):
        return _nsimcli.udk_components_group_add_component_on_lsb(self, component)

    def get_additional_width_to_place_if_adjacent(self, other_component):
        return _nsimcli.udk_components_group_get_additional_width_to_place_if_adjacent(self, other_component)

    def get_group_width(self):
        return _nsimcli.udk_components_group_get_group_width(self)

    def __init__(self, *args):
        this = _nsimcli.new_udk_components_group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_udk_components_group
    __del__ = lambda self: None
udk_components_group_swigregister = _nsimcli.udk_components_group_swigregister
udk_components_group_swigregister(udk_components_group)

class udk_placement_bucket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_placement_bucket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_placement_bucket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["available_width"] = _nsimcli.udk_placement_bucket_available_width_set
    __swig_getmethods__["available_width"] = _nsimcli.udk_placement_bucket_available_width_get
    if _newclass:
        available_width = _swig_property(_nsimcli.udk_placement_bucket_available_width_get, _nsimcli.udk_placement_bucket_available_width_set)
    __swig_setmethods__["used_width"] = _nsimcli.udk_placement_bucket_used_width_set
    __swig_getmethods__["used_width"] = _nsimcli.udk_placement_bucket_used_width_get
    if _newclass:
        used_width = _swig_property(_nsimcli.udk_placement_bucket_used_width_get, _nsimcli.udk_placement_bucket_used_width_set)
    __swig_setmethods__["field_select"] = _nsimcli.udk_placement_bucket_field_select_set
    __swig_getmethods__["field_select"] = _nsimcli.udk_placement_bucket_field_select_get
    if _newclass:
        field_select = _swig_property(_nsimcli.udk_placement_bucket_field_select_get, _nsimcli.udk_placement_bucket_field_select_set)
    __swig_setmethods__["bucket_type"] = _nsimcli.udk_placement_bucket_bucket_type_set
    __swig_getmethods__["bucket_type"] = _nsimcli.udk_placement_bucket_bucket_type_get
    if _newclass:
        bucket_type = _swig_property(_nsimcli.udk_placement_bucket_bucket_type_get, _nsimcli.udk_placement_bucket_bucket_type_set)
    __swig_setmethods__["placed_fields"] = _nsimcli.udk_placement_bucket_placed_fields_set
    __swig_getmethods__["placed_fields"] = _nsimcli.udk_placement_bucket_placed_fields_get
    if _newclass:
        placed_fields = _swig_property(_nsimcli.udk_placement_bucket_placed_fields_get, _nsimcli.udk_placement_bucket_placed_fields_set)
    __swig_setmethods__["placed_component_groups"] = _nsimcli.udk_placement_bucket_placed_component_groups_set
    __swig_getmethods__["placed_component_groups"] = _nsimcli.udk_placement_bucket_placed_component_groups_get
    if _newclass:
        placed_component_groups = _swig_property(_nsimcli.udk_placement_bucket_placed_component_groups_get, _nsimcli.udk_placement_bucket_placed_component_groups_set)
    __swig_setmethods__["max_msb_penalty"] = _nsimcli.udk_placement_bucket_max_msb_penalty_set
    __swig_getmethods__["max_msb_penalty"] = _nsimcli.udk_placement_bucket_max_msb_penalty_get
    if _newclass:
        max_msb_penalty = _swig_property(_nsimcli.udk_placement_bucket_max_msb_penalty_get, _nsimcli.udk_placement_bucket_max_msb_penalty_set)
    __swig_setmethods__["tables_in"] = _nsimcli.udk_placement_bucket_tables_in_set
    __swig_getmethods__["tables_in"] = _nsimcli.udk_placement_bucket_tables_in_get
    if _newclass:
        tables_in = _swig_property(_nsimcli.udk_placement_bucket_tables_in_get, _nsimcli.udk_placement_bucket_tables_in_set)
    __swig_setmethods__["bucket_index"] = _nsimcli.udk_placement_bucket_bucket_index_set
    __swig_getmethods__["bucket_index"] = _nsimcli.udk_placement_bucket_bucket_index_get
    if _newclass:
        bucket_index = _swig_property(_nsimcli.udk_placement_bucket_bucket_index_get, _nsimcli.udk_placement_bucket_bucket_index_set)

    def __init__(self, *args):
        this = _nsimcli.new_udk_placement_bucket(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def restructure_component_groups(self):
        return _nsimcli.udk_placement_bucket_restructure_component_groups(self)

    def split_components_into_groups(self, sorted_placed_fields):
        return _nsimcli.udk_placement_bucket_split_components_into_groups(self, sorted_placed_fields)
    __swig_destroy__ = _nsimcli.delete_udk_placement_bucket
    __del__ = lambda self: None
udk_placement_bucket_swigregister = _nsimcli.udk_placement_bucket_swigregister
udk_placement_bucket_swigregister(udk_placement_bucket)

class key_part(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, key_part, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, key_part, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max_width"] = _nsimcli.key_part_max_width_set
    __swig_getmethods__["max_width"] = _nsimcli.key_part_max_width_get
    if _newclass:
        max_width = _swig_property(_nsimcli.key_part_max_width_get, _nsimcli.key_part_max_width_set)
    __swig_setmethods__["used_width"] = _nsimcli.key_part_used_width_set
    __swig_getmethods__["used_width"] = _nsimcli.key_part_used_width_get
    if _newclass:
        used_width = _swig_property(_nsimcli.key_part_used_width_get, _nsimcli.key_part_used_width_set)
    __swig_setmethods__["udk_placement_buckets_indices"] = _nsimcli.key_part_udk_placement_buckets_indices_set
    __swig_getmethods__["udk_placement_buckets_indices"] = _nsimcli.key_part_udk_placement_buckets_indices_get
    if _newclass:
        udk_placement_buckets_indices = _swig_property(_nsimcli.key_part_udk_placement_buckets_indices_get, _nsimcli.key_part_udk_placement_buckets_indices_set)
    __swig_setmethods__["udk_placement_buckets"] = _nsimcli.key_part_udk_placement_buckets_set
    __swig_getmethods__["udk_placement_buckets"] = _nsimcli.key_part_udk_placement_buckets_get
    if _newclass:
        udk_placement_buckets = _swig_property(_nsimcli.key_part_udk_placement_buckets_get, _nsimcli.key_part_udk_placement_buckets_set)
    __swig_setmethods__["range_compression_components"] = _nsimcli.key_part_range_compression_components_set
    __swig_getmethods__["range_compression_components"] = _nsimcli.key_part_range_compression_components_get
    if _newclass:
        range_compression_components = _swig_property(_nsimcli.key_part_range_compression_components_get, _nsimcli.key_part_range_compression_components_set)
    __swig_setmethods__["number_of_buckets_supporting_udf"] = _nsimcli.key_part_number_of_buckets_supporting_udf_set
    __swig_getmethods__["number_of_buckets_supporting_udf"] = _nsimcli.key_part_number_of_buckets_supporting_udf_get
    if _newclass:
        number_of_buckets_supporting_udf = _swig_property(_nsimcli.key_part_number_of_buckets_supporting_udf_get, _nsimcli.key_part_number_of_buckets_supporting_udf_set)
    __swig_setmethods__["number_of_constant_bits"] = _nsimcli.key_part_number_of_constant_bits_set
    __swig_getmethods__["number_of_constant_bits"] = _nsimcli.key_part_number_of_constant_bits_get
    if _newclass:
        number_of_constant_bits = _swig_property(_nsimcli.key_part_number_of_constant_bits_get, _nsimcli.key_part_number_of_constant_bits_set)
    __swig_setmethods__["max_number_of_buckets"] = _nsimcli.key_part_max_number_of_buckets_set
    __swig_getmethods__["max_number_of_buckets"] = _nsimcli.key_part_max_number_of_buckets_get
    if _newclass:
        max_number_of_buckets = _swig_property(_nsimcli.key_part_max_number_of_buckets_get, _nsimcli.key_part_max_number_of_buckets_set)

    def get_available_width(self):
        return _nsimcli.key_part_get_available_width(self)

    def additional_buckets_available(self):
        return _nsimcli.key_part_additional_buckets_available(self)

    def __init__(self, *args):
        this = _nsimcli.new_key_part(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_key_part
    __del__ = lambda self: None
key_part_swigregister = _nsimcli.key_part_swigregister
key_part_swigregister(key_part)

class udk_component_pointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, udk_component_pointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, udk_component_pointer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["original_index"] = _nsimcli.udk_component_pointer_original_index_set
    __swig_getmethods__["original_index"] = _nsimcli.udk_component_pointer_original_index_get
    if _newclass:
        original_index = _swig_property(_nsimcli.udk_component_pointer_original_index_get, _nsimcli.udk_component_pointer_original_index_set)
    __swig_setmethods__["offset_to_add"] = _nsimcli.udk_component_pointer_offset_to_add_set
    __swig_getmethods__["offset_to_add"] = _nsimcli.udk_component_pointer_offset_to_add_get
    if _newclass:
        offset_to_add = _swig_property(_nsimcli.udk_component_pointer_offset_to_add_get, _nsimcli.udk_component_pointer_offset_to_add_set)
    __swig_setmethods__["width"] = _nsimcli.udk_component_pointer_width_set
    __swig_getmethods__["width"] = _nsimcli.udk_component_pointer_width_get
    if _newclass:
        width = _swig_property(_nsimcli.udk_component_pointer_width_get, _nsimcli.udk_component_pointer_width_set)

    def __init__(self, *args):
        this = _nsimcli.new_udk_component_pointer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_udk_component_pointer
    __del__ = lambda self: None
udk_component_pointer_swigregister = _nsimcli.udk_component_pointer_swigregister
udk_component_pointer_swigregister(udk_component_pointer)

class nsim_impl(nsim_core):
    __swig_setmethods__ = {}
    for _s in [nsim_core]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsim_impl, name, value)
    __swig_getmethods__ = {}
    for _s in [nsim_core]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, nsim_impl, name)
    __repr__ = _swig_repr

    def __init__(self, source_path, leaba_defined_path):
        this = _nsimcli.new_nsim_impl(source_path, leaba_defined_path)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nsimcli.delete_nsim_impl
    __del__ = lambda self: None

    def set_additional_params(self, additional_params):
        return _nsimcli.nsim_impl_set_additional_params(self, additional_params)

    def set_log_file(self, *args):
        return _nsimcli.nsim_impl_set_log_file(self, *args)

    def set_expose_npu_host(self):
        return _nsimcli.nsim_impl_set_expose_npu_host(self)

    def set_oversubscribed_interfaces_detection_mode(self, mode):
        return _nsimcli.nsim_impl_set_oversubscribed_interfaces_detection_mode(self, mode)

    def set_num_of_duplications_to_inject_on_reload(self, num_of_duplications):
        return _nsimcli.nsim_impl_set_num_of_duplications_to_inject_on_reload(self, num_of_duplications)

    def set_memory_container_and_initialize_reference_execution_blocks(self):
        return _nsimcli.nsim_impl_set_memory_container_and_initialize_reference_execution_blocks(self)

    def inject_packet(self, *args):
        return _nsimcli.nsim_impl_inject_packet(self, *args)

    def inject_mac_aged(self, aged_entries):
        return _nsimcli.nsim_impl_inject_mac_aged(self, aged_entries)

    def get_and_clear_output_packets(self, *args):
        return _nsimcli.nsim_impl_get_and_clear_output_packets(self, *args)

    def get_and_clear_packet_dma_extract_queue(self, *args):
        return _nsimcli.nsim_impl_get_and_clear_packet_dma_extract_queue(self, *args)

    def get_num_packet_waiting_to_be_injected(self):
        return _nsimcli.nsim_impl_get_num_packet_waiting_to_be_injected(self)

    def clear_all_device_state(self):
        return _nsimcli.nsim_impl_clear_all_device_state(self)

    def get_counter_if_modified(self, block_id, counter_index, clear_counter):
        return _nsimcli.nsim_impl_get_counter_if_modified(self, block_id, counter_index, clear_counter)

    def open_file(self, path, flags):
        return _nsimcli.nsim_impl_open_file(self, path, flags)

    def get_register_container(self):
        return _nsimcli.nsim_impl_get_register_container(self)

    def get_memory_container(self):
        return _nsimcli.nsim_impl_get_memory_container(self)

    def register_port_state_change_cb(self, cb, opaque=None):
        return _nsimcli.nsim_impl_register_port_state_change_cb(self, cb, opaque)

    def unregister_port_state_change_cb(self, cb, opaque=None):
        return _nsimcli.nsim_impl_unregister_port_state_change_cb(self, cb, opaque)

    def register_port_config_change_cb(self, cb, opaque=None):
        return _nsimcli.nsim_impl_register_port_config_change_cb(self, cb, opaque)

    def unregister_port_config_change_cb(self, cb, opaque=None):
        return _nsimcli.nsim_impl_unregister_port_config_change_cb(self, cb, opaque)

    def get_parser(self):
        return _nsimcli.nsim_impl_get_parser(self)

    def get_logger(self):
        return _nsimcli.nsim_impl_get_logger(self)

    def dump_macro_execution_json_to_file(self):
        return _nsimcli.nsim_impl_dump_macro_execution_json_to_file(self)

    def subscribe_listener_to_table(self, *args):
        return _nsimcli.nsim_impl_subscribe_listener_to_table(self, *args)

    def unsubscribe_table_listener_from_table(self, *args):
        return _nsimcli.nsim_impl_unsubscribe_table_listener_from_table(self, *args)

    def unsubscribe_table_listener_from_all_tables(self, *args):
        return _nsimcli.nsim_impl_unsubscribe_table_listener_from_all_tables(self, *args)

    def subscribe_to_data_notifications(self, *args):
        return _nsimcli.nsim_impl_subscribe_to_data_notifications(self, *args)

    def unsubscribe_from_data_notifications(self, *args):
        return _nsimcli.nsim_impl_unsubscribe_from_data_notifications(self, *args)

    def unsubscribe_from_all_data_notifications(self, data_listener):
        return _nsimcli.nsim_impl_unsubscribe_from_all_data_notifications(self, data_listener)

    def get_connection_handle(self):
        return _nsimcli.nsim_impl_get_connection_handle(self)

    def set_connection_handle(self, handle):
        return _nsimcli.nsim_impl_set_connection_handle(self, handle)

    def add_to_dropped_packet_statistics(self, dps):
        return _nsimcli.nsim_impl_add_to_dropped_packet_statistics(self, dps)

    def set_counter_listener(self, counter_listener):
        return _nsimcli.nsim_impl_set_counter_listener(self, counter_listener)

    def get_counter_listener(self):
        return _nsimcli.nsim_impl_get_counter_listener(self)
nsim_impl_swigregister = _nsimcli.nsim_impl_swigregister
nsim_impl_swigregister(nsim_impl)


def nsim_core_to_nsim_impl(sim):
    return _nsimcli.nsim_core_to_nsim_impl(sim)
nsim_core_to_nsim_impl = _nsimcli.nsim_core_to_nsim_impl

def calc_lpm_start_bit_for_lpm_table(table):
    return _nsimcli.calc_lpm_start_bit_for_lpm_table(table)
calc_lpm_start_bit_for_lpm_table = _nsimcli.calc_lpm_start_bit_for_lpm_table

def calc_lpm_width_for_lpm_table(table):
    return _nsimcli.calc_lpm_width_for_lpm_table(table)
calc_lpm_width_for_lpm_table = _nsimcli.calc_lpm_width_for_lpm_table
# This file is compatible with both classic and new-style classes.


