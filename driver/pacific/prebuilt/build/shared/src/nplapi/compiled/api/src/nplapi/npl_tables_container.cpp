
// This file has been automatically generated using nplc.py. Do not edit it manually.
// Version: 1.76.2_0.0.0.0 generated on devsrv15.leaba.local at 2021-05-12 16:09:15


#include "nplapi/npl_tables_container.h"

namespace silicon_one {
    
    npl_tables_t::npl_tables_t()
    {
        acl_map_fi_header_type_to_protocol_number_table.resize(7);
        additional_labels_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            additional_labels_table[instance_index].set_is_external();
        }
        
        all_reachable_vector.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            all_reachable_vector[instance_index].set_is_external();
        }
        
        bfd_desired_tx_interval_table.resize(7);
        bfd_detection_multiple_table.resize(7);
        bfd_event_queue_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            bfd_event_queue_table[instance_index].set_is_external();
        }
        
        bfd_inject_inner_da_high_table.resize(7);
        bfd_inject_inner_da_low_table.resize(7);
        bfd_inject_inner_ethernet_header_static_table.resize(7);
        bfd_inject_ttl_static_table.resize(7);
        bfd_ipv6_sip_A_table.resize(7);
        bfd_ipv6_sip_B_table.resize(7);
        bfd_ipv6_sip_C_table.resize(7);
        bfd_ipv6_sip_D_table.resize(7);
        bfd_punt_encap_static_table.resize(7);
        bfd_required_tx_interval_table.resize(7);
        bfd_rx_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            bfd_rx_table[instance_index].set_is_external();
        }
        
        bfd_set_inject_type_static_table.resize(7);
        bfd_udp_port_map_static_table.resize(7);
        bfd_udp_port_static_table.resize(7);
        bitmap_oqg_map_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            bitmap_oqg_map_table[instance_index].set_is_external();
        }
        
        bvn_tc_map_table.resize(7);
        calc_checksum_enable_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            calc_checksum_enable_table[instance_index].set_is_external();
        }
        
        ccm_flags_table.resize(7);
        cif2npa_c_lri_macro.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            cif2npa_c_lri_macro[instance_index].set_is_external();
        }
        
        cif2npa_c_mps_macro.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            cif2npa_c_mps_macro[instance_index].set_is_external();
        }
        
        counters_block_config_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            counters_block_config_table[instance_index].set_is_external();
        }
        
        counters_voq_block_map_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            counters_voq_block_map_table[instance_index].set_is_external();
        }
        
        cud_is_multicast_bitmap.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            cud_is_multicast_bitmap[instance_index].set_is_external();
        }
        
        cud_narrow_hw_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            cud_narrow_hw_table[instance_index].set_is_external();
        }
        
        cud_wide_hw_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            cud_wide_hw_table[instance_index].set_is_external();
        }
        
        default_egress_ipv4_sec_acl_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            default_egress_ipv4_sec_acl_table[instance_index].set_is_external();
        }
        
        default_egress_ipv6_acl_sec_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            default_egress_ipv6_acl_sec_table[instance_index].set_is_external();
        }
        
        dest_slice_voq_map_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            dest_slice_voq_map_table[instance_index].set_is_external();
        }
        
        destination_decoding_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            destination_decoding_table[instance_index].set_is_external();
        }
        
        device_mode_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            device_mode_table[instance_index].set_is_external();
        }
        
        dsp_l2_attributes_table.resize(7);
        dsp_l3_attributes_table.resize(7);
        dummy_dip_index_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            dummy_dip_index_table[instance_index].set_is_external();
        }
        
        ecn_remark_static_table.resize(7);
        egress_mac_ipv4_sec_acl_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            egress_mac_ipv4_sec_acl_table[instance_index].set_is_external();
        }
        
        egress_nh_and_svi_direct0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            egress_nh_and_svi_direct0_table[instance_index].set_is_external();
        }
        
        egress_nh_and_svi_direct1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            egress_nh_and_svi_direct1_table[instance_index].set_is_external();
        }
        
        em_mp_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            em_mp_table[instance_index].set_is_external();
        }
        
        em_pfc_cong_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            em_pfc_cong_table[instance_index].set_is_external();
        }
        
        ene_byte_addition_static_table.resize(7);
        ene_macro_code_tpid_profile_static_table.resize(7);
        erpp_fabric_counters_offset_table.resize(7);
        erpp_fabric_counters_table.resize(7);
        eth_meter_profile_mapping_table.resize(7);
        eth_oam_set_da_mc2_static_table.resize(7);
        eth_oam_set_da_mc_static_table.resize(7);
        eth_rtf_conf_set_mapping_table.resize(7);
        eve_byte_addition_static_table.resize(7);
        eve_to_ethernet_ene_static_table.resize(7);
        event_queue_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            event_queue_table[instance_index].set_is_external();
        }
        
        external_aux_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            external_aux_table[instance_index].set_is_external();
        }
        
        fabric_and_tm_header_size_static_table.resize(7);
        fabric_header_ene_macro_table.resize(7);
        fabric_header_types_static_table.resize(7);
        fabric_headers_type_table.resize(7);
        fabric_init_cfg.resize(7);
        fabric_npuh_size_calculation_static_table.resize(7);
        fabric_out_color_map_table.resize(7);
        fabric_rx_fwd_error_handling_counter_table.resize(7);
        fabric_rx_fwd_error_handling_destination_table.resize(7);
        fabric_rx_term_error_handling_counter_table.resize(7);
        fabric_rx_term_error_handling_destination_table.resize(7);
        fabric_scaled_mc_map_to_netork_slice_static_table.resize(7);
        fabric_smcid_threshold_table.resize(7);
        fabric_term_error_checker_static_table.resize(7);
        fabric_tm_headers_table.resize(7);
        fabric_transmit_error_checker_static_table.resize(7);
        fb_link_2_link_bundle_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            fb_link_2_link_bundle_table[instance_index].set_is_external();
        }
        
        fe_broadcast_bmp_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            fe_broadcast_bmp_table[instance_index].set_is_external();
        }
        
        fe_rlb_uc_tx_fb_link_to_oq_map_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            fe_rlb_uc_tx_fb_link_to_oq_map_table[instance_index].set_is_external();
        }
        
        fe_smcid_threshold_table.resize(7);
        fe_smcid_to_mcid_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            fe_smcid_to_mcid_table[instance_index].set_is_external();
        }
        
        fe_uc_link_bundle_desc_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            fe_uc_link_bundle_desc_table[instance_index].set_is_external();
        }
        
        fi_core_tcam_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            fi_core_tcam_table[instance_index].set_is_external();
        }
        
        fi_macro_config_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            fi_macro_config_table[instance_index].set_is_external();
        }
        
        filb_voq_mapping.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            filb_voq_mapping[instance_index].set_is_external();
        }
        
        first_ene_static_table.resize(7);
        frm_db_fabric_routing_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            frm_db_fabric_routing_table[instance_index].set_is_external();
        }
        
        fwd_destination_to_tm_result_data.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            fwd_destination_to_tm_result_data[instance_index].set_is_external();
        }
        
        fwd_type_to_ive_enable_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            fwd_type_to_ive_enable_table[instance_index].set_is_external();
        }
        
        get_ecm_meter_ptr_table.resize(7);
        get_ingress_ptp_info_and_is_slp_dm_static_table.resize(7);
        get_l2_rtf_conf_set_and_init_stages.resize(7);
        get_non_comp_mc_value_static_table.resize(7);
        gre_proto_static_table.resize(7);
        hmc_cgm_cgm_lut_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            hmc_cgm_cgm_lut_table[instance_index].set_is_external();
        }
        
        hmc_cgm_profile_global_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            hmc_cgm_profile_global_table[instance_index].set_is_external();
        }
        
        ibm_cmd_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ibm_cmd_table[instance_index].set_is_external();
        }
        
        ibm_mc_cmd_to_encap_data_table.resize(7);
        ibm_uc_cmd_to_encap_data_table.resize(7);
        ifgb_tc_lut_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ifgb_tc_lut_table[instance_index].set_is_external();
        }
        
        ingress_ip_qos_mapping_table.resize(7);
        ingress_rtf_eth_db1_160_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_eth_db1_160_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_eth_db2_160_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_eth_db2_160_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db1_160_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db1_160_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db1_160_f1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db1_160_f1_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db1_320_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db1_320_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db2_160_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db2_160_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db2_160_f1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db2_160_f1_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db2_320_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db2_320_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db3_160_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db3_160_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db3_160_f1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db3_160_f1_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db3_320_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db3_320_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db4_160_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db4_160_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db4_160_f1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db4_160_f1_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv4_db4_320_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv4_db4_320_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db1_160_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db1_160_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db1_160_f1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db1_160_f1_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db1_320_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db1_320_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db2_160_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db2_160_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db2_160_f1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db2_160_f1_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db2_320_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db2_320_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db3_160_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db3_160_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db3_160_f1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db3_160_f1_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db3_320_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db3_320_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db4_160_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db4_160_f0_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db4_160_f1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db4_160_f1_table[instance_index].set_is_external();
        }
        
        ingress_rtf_ipv6_db4_320_f0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ingress_rtf_ipv6_db4_320_f0_table[instance_index].set_is_external();
        }
        
        inject_down_select_ene_static_table.resize(7);
        inject_down_tx_redirect_counter_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            inject_down_tx_redirect_counter_table[instance_index].set_is_external();
        }
        
        inject_mact_ldb_to_output_lr.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            inject_mact_ldb_to_output_lr[instance_index].set_is_external();
        }
        
        inject_up_pif_ifg_init_data_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            inject_up_pif_ifg_init_data_table[instance_index].set_is_external();
        }
        
        inject_up_ssp_init_data_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            inject_up_ssp_init_data_table[instance_index].set_is_external();
        }
        
        inner_tpid_table.resize(7);
        ip_fwd_header_mapping_to_ethtype_static_table.resize(7);
        ip_ingress_cmp_mcid_static_table.resize(7);
        ip_mc_local_inject_type_static_table.resize(7);
        ip_mc_next_macro_static_table.resize(7);
        ip_meter_profile_mapping_table.resize(7);
        ip_prefix_destination_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ip_prefix_destination_table[instance_index].set_is_external();
        }
        
        ip_relay_to_vni_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            ip_relay_to_vni_table[instance_index].set_is_external();
        }
        
        ip_rx_global_counter_table.resize(7);
        ip_ver_mc_static_table.resize(7);
        ipv4_acl_map_protocol_type_to_protocol_number_table.resize(7);
        ipv4_acl_sport_static_table.resize(7);
        ipv4_ip_tunnel_termination_dip_index_tt0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ipv4_ip_tunnel_termination_dip_index_tt0_table[instance_index].set_is_external();
        }
        
        ipv4_ip_tunnel_termination_sip_dip_index_tt0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ipv4_ip_tunnel_termination_sip_dip_index_tt0_table[instance_index].set_is_external();
        }
        
        ipv4_ip_tunnel_termination_sip_dip_index_tt1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ipv4_ip_tunnel_termination_sip_dip_index_tt1_table[instance_index].set_is_external();
        }
        
        ipv4_lpm_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ipv4_lpm_table[instance_index].set_is_external();
        }
        
        ipv4_lpts_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ipv4_lpts_table[instance_index].set_is_external();
        }
        
        ipv4_og_pcl_em_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ipv4_og_pcl_em_table[instance_index].set_is_external();
        }
        
        ipv4_og_pcl_lpm_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ipv4_og_pcl_lpm_table[instance_index].set_is_external();
        }
        
        ipv4_rtf_conf_set_mapping_table.resize(7);
        ipv4_vrf_dip_em_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ipv4_vrf_dip_em_table[instance_index].set_is_external();
        }
        
        ipv4_vrf_s_g_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ipv4_vrf_s_g_table[instance_index].set_is_external();
        }
        
        ipv6_acl_sport_static_table.resize(7);
        ipv6_first_fragment_static_table.resize(7);
        ipv6_lpm_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ipv6_lpm_table[instance_index].set_is_external();
        }
        
        ipv6_lpts_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ipv6_lpts_table[instance_index].set_is_external();
        }
        
        ipv6_mc_select_qos_id.resize(7);
        ipv6_og_pcl_em_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ipv6_og_pcl_em_table[instance_index].set_is_external();
        }
        
        ipv6_og_pcl_lpm_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ipv6_og_pcl_lpm_table[instance_index].set_is_external();
        }
        
        ipv6_rtf_conf_set_mapping_table.resize(7);
        ipv6_sip_compression_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ipv6_sip_compression_table[instance_index].set_is_external();
        }
        
        ipv6_vrf_dip_em_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ipv6_vrf_dip_em_table[instance_index].set_is_external();
        }
        
        ipv6_vrf_s_g_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            ipv6_vrf_s_g_table[instance_index].set_is_external();
        }
        
        is_pacific_b1_static_table.resize(7);
        l2_dlp_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            l2_dlp_table[instance_index].set_is_external();
        }
        
        l2_lp_profile_filter_table.resize(7);
        l2_lpts_ctrl_fields_static_table.resize(7);
        l2_lpts_ip_fragment_static_table.resize(7);
        l2_lpts_ipv4_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            l2_lpts_ipv4_table[instance_index].set_is_external();
        }
        
        l2_lpts_ipv6_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            l2_lpts_ipv6_table[instance_index].set_is_external();
        }
        
        l2_lpts_mac_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            l2_lpts_mac_table[instance_index].set_is_external();
        }
        
        l2_lpts_next_macro_static_table.resize(7);
        l2_lpts_protocol_table.resize(7);
        l2_lpts_skip_p2p_static_table.resize(7);
        l2_termination_next_macro_static_table.resize(7);
        l2_tunnel_term_next_macro_static_table.resize(7);
        l3_dlp_p_counter_offset_table.resize(7);
        l3_dlp_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            l3_dlp_table[instance_index].set_is_external();
        }
        
        l3_termination_classify_ip_tunnels_table.resize(7);
        l3_termination_next_macro_static_table.resize(7);
        l3_tunnel_termination_next_macro_static_table.resize(7);
        l3_vxlan_overlay_sa_table.resize(7);
        large_encap_global_lsp_prefix_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            large_encap_global_lsp_prefix_table[instance_index].set_is_external();
        }
        
        large_encap_ip_tunnel_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            large_encap_ip_tunnel_table[instance_index].set_is_external();
        }
        
        large_encap_mpls_he_no_ldp_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            large_encap_mpls_he_no_ldp_table[instance_index].set_is_external();
        }
        
        large_encap_mpls_ldp_over_te_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            large_encap_mpls_ldp_over_te_table[instance_index].set_is_external();
        }
        
        large_encap_te_he_tunnel_id_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            large_encap_te_he_tunnel_id_table[instance_index].set_is_external();
        }
        
        latest_learn_records_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            latest_learn_records_table[instance_index].set_is_external();
        }
        
        learn_manager_cfg_max_learn_type_reg.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            learn_manager_cfg_max_learn_type_reg[instance_index].set_is_external();
        }
        
        learn_record_fifo_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            learn_record_fifo_table[instance_index].set_is_external();
        }
        
        light_fi_fabric_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            light_fi_fabric_table[instance_index].set_is_external();
        }
        
        light_fi_npu_base_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            light_fi_npu_base_table[instance_index].set_is_external();
        }
        
        light_fi_npu_encap_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            light_fi_npu_encap_table[instance_index].set_is_external();
        }
        
        light_fi_nw_0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            light_fi_nw_0_table[instance_index].set_is_external();
        }
        
        light_fi_nw_1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            light_fi_nw_1_table[instance_index].set_is_external();
        }
        
        light_fi_nw_2_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            light_fi_nw_2_table[instance_index].set_is_external();
        }
        
        light_fi_nw_3_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            light_fi_nw_3_table[instance_index].set_is_external();
        }
        
        light_fi_stages_cfg_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            light_fi_stages_cfg_table[instance_index].set_is_external();
        }
        
        light_fi_tm_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            light_fi_tm_table[instance_index].set_is_external();
        }
        
        link_relay_attributes_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            link_relay_attributes_table[instance_index].set_is_external();
        }
        
        link_up_vector.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            link_up_vector[instance_index].set_is_external();
        }
        
        lp_over_lag_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            lp_over_lag_table[instance_index].set_is_external();
        }
        
        lpm_destination_prefix_map_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            lpm_destination_prefix_map_table[instance_index].set_is_external();
        }
        
        lpts_2nd_lookup_table.resize(7);
        lpts_meter_table.resize(7);
        lpts_og_application_table.resize(7);
        lr_filter_write_ptr_reg.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            lr_filter_write_ptr_reg[instance_index].set_is_external();
        }
        
        lr_write_ptr_reg.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            lr_write_ptr_reg[instance_index].set_is_external();
        }
        
        mac_af_npp_attributes_table.resize(7);
        mac_da_table.resize(7);
        mac_ethernet_rate_limit_type_static_table.resize(7);
        mac_forwarding_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            mac_forwarding_table[instance_index].set_is_external();
        }
        
        mac_mc_em_termination_attributes_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mac_mc_em_termination_attributes_table[instance_index].set_is_external();
        }
        
        mac_mc_tcam_termination_attributes_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mac_mc_tcam_termination_attributes_table[instance_index].set_is_external();
        }
        
        mac_qos_mapping_table.resize(7);
        mac_relay_g_ipv4_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            mac_relay_g_ipv4_table[instance_index].set_is_external();
        }
        
        mac_relay_g_ipv6_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            mac_relay_g_ipv6_table[instance_index].set_is_external();
        }
        
        mac_relay_to_vni_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            mac_relay_to_vni_table[instance_index].set_is_external();
        }
        
        mac_termination_em_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mac_termination_em_table[instance_index].set_is_external();
        }
        
        mac_termination_next_macro_static_table.resize(7);
        mac_termination_no_da_em_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mac_termination_no_da_em_table[instance_index].set_is_external();
        }
        
        mac_termination_tcam_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mac_termination_tcam_table[instance_index].set_is_external();
        }
        
        map_ene_subcode_to8bit_static_table.resize(7);
        map_inject_ccm_macro_static_table.resize(7);
        map_more_labels_static_table.resize(7);
        map_recyle_tx_to_rx_data_on_pd_static_table.resize(7);
        map_tm_dp_ecn_to_wa_ecn_dp_static_table.resize(7);
        map_tx_punt_next_macro_static_table.resize(7);
        map_tx_punt_rcy_next_macro_static_table.resize(7);
        mc_bitmap_base_voq_lookup_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mc_bitmap_base_voq_lookup_table[instance_index].set_is_external();
        }
        
        mc_bitmap_tc_map_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mc_bitmap_tc_map_table[instance_index].set_is_external();
        }
        
        mc_copy_id_map.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mc_copy_id_map[instance_index].set_is_external();
        }
        
        mc_cud_is_wide_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mc_cud_is_wide_table[instance_index].set_is_external();
        }
        
        mc_em_db.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            mc_em_db[instance_index].set_is_external();
        }
        
        mc_emdb_tc_map_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mc_emdb_tc_map_table[instance_index].set_is_external();
        }
        
        mc_fe_links_bmp.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            mc_fe_links_bmp[instance_index].set_is_external();
        }
        
        mc_ibm_cud_mapping_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mc_ibm_cud_mapping_table[instance_index].set_is_external();
        }
        
        mc_slice_bitmap_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mc_slice_bitmap_table[instance_index].set_is_external();
        }
        
        meg_id_format_table.resize(7);
        mep_address_prefix_table.resize(7);
        mii_loopback_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mii_loopback_table[instance_index].set_is_external();
        }
        
        mirror_code_hw_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mirror_code_hw_table[instance_index].set_is_external();
        }
        
        mirror_egress_attributes_table.resize(7);
        mirror_to_dsp_in_npu_soft_header_table.resize(7);
        mldp_protection_enabled_static_table.resize(7);
        mldp_protection_table.resize(7);
        mp_aux_data_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mp_aux_data_table[instance_index].set_is_external();
        }
        
        mp_data_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mp_data_table[instance_index].set_is_external();
        }
        
        mpls_encap_control_static_table.resize(7);
        mpls_forwarding_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            mpls_forwarding_table[instance_index].set_is_external();
        }
        
        mpls_header_offset_in_bytes_static_table.resize(7);
        mpls_l3_lsp_static_table.resize(7);
        mpls_labels_1_to_4_jump_offset_static_table.resize(7);
        mpls_lsp_labels_config_static_table.resize(7);
        mpls_qos_mapping_table.resize(7);
        mpls_resolve_service_labels_static_table.resize(7);
        mpls_termination_em0_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mpls_termination_em0_table[instance_index].set_is_external();
        }
        
        mpls_termination_em1_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            mpls_termination_em1_table[instance_index].set_is_external();
        }
        
        mpls_vpn_enabled_static_table.resize(7);
        ms_voq_fabric_context_offset_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ms_voq_fabric_context_offset_table[instance_index].set_is_external();
        }
        
        my_ipv4_table.resize(7);
        native_ce_ptr_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            native_ce_ptr_table[instance_index].set_is_external();
        }
        
        native_fec_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            native_fec_table[instance_index].set_is_external();
        }
        
        native_fec_type_decoding_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            native_fec_type_decoding_table[instance_index].set_is_external();
        }
        
        native_frr_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            native_frr_table[instance_index].set_is_external();
        }
        
        native_frr_type_decoding_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            native_frr_type_decoding_table[instance_index].set_is_external();
        }
        
        native_l2_lp_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            native_l2_lp_table[instance_index].set_is_external();
        }
        
        native_l2_lp_type_decoding_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            native_l2_lp_type_decoding_table[instance_index].set_is_external();
        }
        
        native_lb_group_size_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            native_lb_group_size_table[instance_index].set_is_external();
        }
        
        native_lb_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            native_lb_table[instance_index].set_is_external();
        }
        
        native_lb_type_decoding_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            native_lb_type_decoding_table[instance_index].set_is_external();
        }
        
        native_lp_is_pbts_prefix_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            native_lp_is_pbts_prefix_table[instance_index].set_is_external();
        }
        
        native_lp_pbts_map_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            native_lp_pbts_map_table[instance_index].set_is_external();
        }
        
        native_protection_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            native_protection_table[instance_index].set_is_external();
        }
        
        next_header_1_is_l4_over_ipv4_static_table.resize(7);
        nh_macro_code_to_id_l6_static_table.resize(7);
        nhlfe_type_mapping_static_table.resize(7);
        null_rtf_next_macro_static_table.resize(7);
        nw_smcid_threshold_table.resize(7);
        oamp_drop_destination_static_table.resize(7);
        oamp_event_queue_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            oamp_event_queue_table[instance_index].set_is_external();
        }
        
        oamp_redirect_get_counter_table.resize(7);
        oamp_redirect_punt_eth_hdr_1_table.resize(7);
        oamp_redirect_punt_eth_hdr_2_table.resize(7);
        oamp_redirect_punt_eth_hdr_3_table.resize(7);
        oamp_redirect_punt_eth_hdr_4_table.resize(7);
        oamp_redirect_table.resize(7);
        obm_next_macro_static_table.resize(7);
        og_next_macro_static_table.resize(7);
        outer_tpid_table.resize(7);
        overlay_ipv4_sip_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            overlay_ipv4_sip_table[instance_index].set_is_external();
        }
        
        pad_mtu_inj_check_static_table.resize(7);
        path_lb_type_decoding_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            path_lb_type_decoding_table[instance_index].set_is_external();
        }
        
        path_lp_is_pbts_prefix_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            path_lp_is_pbts_prefix_table[instance_index].set_is_external();
        }
        
        path_lp_pbts_map_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            path_lp_pbts_map_table[instance_index].set_is_external();
        }
        
        path_lp_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            path_lp_table[instance_index].set_is_external();
        }
        
        path_lp_type_decoding_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            path_lp_type_decoding_table[instance_index].set_is_external();
        }
        
        path_protection_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            path_protection_table[instance_index].set_is_external();
        }
        
        pdoq_oq_ifc_mapping.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            pdoq_oq_ifc_mapping[instance_index].set_is_external();
        }
        
        pdvoq_bank_pair_offset_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            pdvoq_bank_pair_offset_table[instance_index].set_is_external();
        }
        
        pdvoq_slice_voq_properties_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            pdvoq_slice_voq_properties_table[instance_index].set_is_external();
        }
        
        per_asbr_and_dpe_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            per_asbr_and_dpe_table[instance_index].set_is_external();
        }
        
        per_pe_and_prefix_vpn_key_large_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            per_pe_and_prefix_vpn_key_large_table[instance_index].set_is_external();
        }
        
        per_pe_and_vrf_vpn_key_large_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            per_pe_and_vrf_vpn_key_large_table[instance_index].set_is_external();
        }
        
        per_port_destination_table.resize(7);
        per_vrf_mpls_forwarding_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            per_vrf_mpls_forwarding_table[instance_index].set_is_external();
        }
        
        pfc_destination_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            pfc_destination_table[instance_index].set_is_external();
        }
        
        pfc_event_queue_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            pfc_event_queue_table[instance_index].set_is_external();
        }
        
        pfc_filter_wd_table.resize(7);
        pfc_offset_from_vector_static_table.resize(7);
        pfc_ssp_slice_map_table.resize(7);
        pfc_tc_latency_table.resize(7);
        pfc_tc_table.resize(7);
        pfc_tc_wrap_latency_table.resize(7);
        pfc_vector_static_table.resize(7);
        pin_start_offset_macros.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            pin_start_offset_macros[instance_index].set_is_external();
        }
        
        pma_loopback_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            pma_loopback_table[instance_index].set_is_external();
        }
        
        port_dspa_group_size_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            port_dspa_group_size_table[instance_index].set_is_external();
        }
        
        port_dspa_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            port_dspa_table[instance_index].set_is_external();
        }
        
        port_dspa_type_decoding_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            port_dspa_type_decoding_table[instance_index].set_is_external();
        }
        
        port_npp_protection_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            port_npp_protection_table[instance_index].set_is_external();
        }
        
        port_npp_protection_type_decoding_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            port_npp_protection_type_decoding_table[instance_index].set_is_external();
        }
        
        port_protection_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            port_protection_table[instance_index].set_is_external();
        }
        
        punt_ethertype_static_table.resize(7);
        punt_rcy_inject_header_ene_encap_table.resize(7);
        punt_select_nw_ene_static_table.resize(7);
        punt_tunnel_transport_encap_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            punt_tunnel_transport_encap_table[instance_index].set_is_external();
        }
        
        punt_tunnel_transport_extended_encap_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            punt_tunnel_transport_extended_encap_table[instance_index].set_is_external();
        }
        
        punt_tunnel_transport_extended_encap_table2.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            punt_tunnel_transport_extended_encap_table2[instance_index].set_is_external();
        }
        
        pwe_label_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            pwe_label_table[instance_index].set_is_external();
        }
        
        pwe_to_l3_dest_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            pwe_to_l3_dest_table[instance_index].set_is_external();
        }
        
        pwe_vpls_label_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            pwe_vpls_label_table[instance_index].set_is_external();
        }
        
        pwe_vpls_tunnel_label_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            pwe_vpls_tunnel_label_table[instance_index].set_is_external();
        }
        
        reassembly_source_port_map_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            reassembly_source_port_map_table[instance_index].set_is_external();
        }
        
        recycle_override_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            recycle_override_table[instance_index].set_is_external();
        }
        
        recycled_inject_up_info_table.resize(7);
        redirect_destination_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            redirect_destination_table[instance_index].set_is_external();
        }
        
        redirect_table.resize(7);
        resolution_pfc_select_table.resize(7);
        resolution_set_next_macro_table.resize(7);
        rewrite_sa_prefix_index_table.resize(7);
        rmep_last_time_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rmep_last_time_table[instance_index].set_is_external();
        }
        
        rmep_state_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rmep_state_table[instance_index].set_is_external();
        }
        
        rpf_fec_access_map_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rpf_fec_access_map_table[instance_index].set_is_external();
        }
        
        rpf_fec_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rpf_fec_table[instance_index].set_is_external();
        }
        
        rtf_conf_set_to_og_pcl_compress_bits_mapping_table.resize(7);
        rtf_conf_set_to_og_pcl_ids_mapping_table.resize(7);
        rtf_conf_set_to_post_fwd_stage_mapping_table.resize(7);
        rtf_next_macro_static_table.resize(7);
        rx_counters_block_config_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rx_counters_block_config_table[instance_index].set_is_external();
        }
        
        rx_fwd_error_handling_counter_table.resize(7);
        rx_fwd_error_handling_destination_table.resize(7);
        rx_ip_p_counter_offset_static_table.resize(7);
        rx_map_npp_to_ssp_table.resize(7);
        rx_meter_block_meter_attribute_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            rx_meter_block_meter_attribute_table[instance_index].set_is_external();
        }
        
        rx_meter_block_meter_profile_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rx_meter_block_meter_profile_table[instance_index].set_is_external();
        }
        
        rx_meter_block_meter_shaper_configuration_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            rx_meter_block_meter_shaper_configuration_table[instance_index].set_is_external();
        }
        
        rx_meter_distributed_meter_profile_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            rx_meter_distributed_meter_profile_table[instance_index].set_is_external();
        }
        
        rx_meter_exact_meter_decision_mapping_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rx_meter_exact_meter_decision_mapping_table[instance_index].set_is_external();
        }
        
        rx_meter_meter_profile_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            rx_meter_meter_profile_table[instance_index].set_is_external();
        }
        
        rx_meter_meter_shaper_configuration_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            rx_meter_meter_shaper_configuration_table[instance_index].set_is_external();
        }
        
        rx_meter_meters_attribute_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            rx_meter_meters_attribute_table[instance_index].set_is_external();
        }
        
        rx_meter_rate_limiter_shaper_configuration_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            rx_meter_rate_limiter_shaper_configuration_table[instance_index].set_is_external();
        }
        
        rx_meter_stat_meter_decision_mapping_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rx_meter_stat_meter_decision_mapping_table[instance_index].set_is_external();
        }
        
        rx_npu_to_tm_dest_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rx_npu_to_tm_dest_table[instance_index].set_is_external();
        }
        
        rx_obm_code_table.resize(7);
        rx_obm_punt_src_and_code_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rx_obm_punt_src_and_code_table[instance_index].set_is_external();
        }
        
        rx_redirect_code_ext_table.resize(7);
        rx_redirect_code_table.resize(7);
        rx_redirect_next_macro_static_table.resize(7);
        rx_term_error_handling_counter_table.resize(7);
        rx_term_error_handling_destination_table.resize(7);
        rxpdr_dsp_lookup_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            rxpdr_dsp_lookup_table[instance_index].set_is_external();
        }
        
        rxpdr_dsp_tc_map.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            rxpdr_dsp_tc_map[instance_index].set_is_external();
        }
        
        sch_oqse_cfg.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            sch_oqse_cfg[instance_index].set_is_external();
        }
        
        second_ene_static_table.resize(7);
        select_inject_next_macro_static_table.resize(7);
        service_lp_attributes_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            service_lp_attributes_table[instance_index].set_is_external();
        }
        
        service_mapping_em0_ac_port_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            service_mapping_em0_ac_port_table[instance_index].set_is_external();
        }
        
        service_mapping_em0_ac_port_tag_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            service_mapping_em0_ac_port_tag_table[instance_index].set_is_external();
        }
        
        service_mapping_em0_ac_port_tag_tag_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            service_mapping_em0_ac_port_tag_tag_table[instance_index].set_is_external();
        }
        
        service_mapping_em0_pwe_tag_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            service_mapping_em0_pwe_tag_table[instance_index].set_is_external();
        }
        
        service_mapping_em1_ac_port_tag_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            service_mapping_em1_ac_port_tag_table[instance_index].set_is_external();
        }
        
        service_mapping_tcam_ac_port_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            service_mapping_tcam_ac_port_table[instance_index].set_is_external();
        }
        
        service_mapping_tcam_ac_port_tag_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            service_mapping_tcam_ac_port_tag_table[instance_index].set_is_external();
        }
        
        service_mapping_tcam_ac_port_tag_tag_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            service_mapping_tcam_ac_port_tag_tag_table[instance_index].set_is_external();
        }
        
        service_mapping_tcam_pwe_tag_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            service_mapping_tcam_pwe_tag_table[instance_index].set_is_external();
        }
        
        service_relay_attributes_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            service_relay_attributes_table[instance_index].set_is_external();
        }
        
        set_ene_macro_and_bytes_to_remove_table.resize(7);
        sgacl_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            sgacl_table[instance_index].set_is_external();
        }
        
        sip_index_table.resize(7);
        slice_modes_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            slice_modes_table[instance_index].set_is_external();
        }
        
        slp_based_forwarding_table.resize(1);
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            slp_based_forwarding_table[instance_index].set_is_external();
        }
        
        small_encap_mpls_he_asbr_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            small_encap_mpls_he_asbr_table[instance_index].set_is_external();
        }
        
        small_encap_mpls_he_te_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            small_encap_mpls_he_te_table[instance_index].set_is_external();
        }
        
        snoop_code_hw_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            snoop_code_hw_table[instance_index].set_is_external();
        }
        
        snoop_table.resize(7);
        snoop_to_dsp_in_npu_soft_header_table.resize(7);
        source_pif_hw_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            source_pif_hw_table[instance_index].set_is_external();
        }
        
        stage2_lb_group_size_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            stage2_lb_group_size_table[instance_index].set_is_external();
        }
        
        stage2_lb_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            stage2_lb_table[instance_index].set_is_external();
        }
        
        stage3_lb_group_size_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            stage3_lb_group_size_table[instance_index].set_is_external();
        }
        
        stage3_lb_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            stage3_lb_table[instance_index].set_is_external();
        }
        
        stage3_lb_type_decoding_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            stage3_lb_type_decoding_table[instance_index].set_is_external();
        }
        
        svl_next_macro_static_table.resize(7);
        te_headend_lsp_counter_offset_table.resize(7);
        termination_to_forwarding_fi_hardwired_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            termination_to_forwarding_fi_hardwired_table[instance_index].set_is_external();
        }
        
        tm_ibm_cmd_to_destination.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            tm_ibm_cmd_to_destination[instance_index].set_is_external();
        }
        
        ts_cmd_hw_static_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            ts_cmd_hw_static_table[instance_index].set_is_external();
        }
        
        tunnel_dlp_p_counter_offset_table.resize(7);
        tunnel_qos_static_table.resize(7);
        tx_counters_block_config_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            tx_counters_block_config_table[instance_index].set_is_external();
        }
        
        tx_error_handling_counter_table.resize(7);
        tx_punt_eth_encap_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            tx_punt_eth_encap_table[instance_index].set_is_external();
        }
        
        tx_redirect_code_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            tx_redirect_code_table[instance_index].set_is_external();
        }
        
        txpdr_mc_list_size_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            txpdr_mc_list_size_table[instance_index].set_is_external();
        }
        
        txpdr_tc_map_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            txpdr_tc_map_table[instance_index].set_is_external();
        }
        
        txpp_dlp_profile_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            txpp_dlp_profile_table[instance_index].set_is_external();
        }
        
        txpp_encap_qos_mapping_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            txpp_encap_qos_mapping_table[instance_index].set_is_external();
        }
        
        txpp_first_enc_type_to_second_enc_type_offset.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            txpp_first_enc_type_to_second_enc_type_offset[instance_index].set_is_external();
        }
        
        txpp_fwd_header_type_is_l2_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            txpp_fwd_header_type_is_l2_table[instance_index].set_is_external();
        }
        
        txpp_fwd_qos_mapping_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            txpp_fwd_qos_mapping_table[instance_index].set_is_external();
        }
        
        txpp_ibm_enables_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            txpp_ibm_enables_table[instance_index].set_is_external();
        }
        
        txpp_initial_npe_macro_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            txpp_initial_npe_macro_table[instance_index].set_is_external();
        }
        
        txpp_mapping_qos_tag_table.resize(7);
        uc_ibm_tc_map_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            uc_ibm_tc_map_table[instance_index].set_is_external();
        }
        
        urpf_ipsa_dest_is_lpts_static_table.resize(7);
        vlan_edit_tpid1_profile_hw_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            vlan_edit_tpid1_profile_hw_table[instance_index].set_is_external();
        }
        
        vlan_edit_tpid2_profile_hw_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            vlan_edit_tpid2_profile_hw_table[instance_index].set_is_external();
        }
        
        vlan_format_table.resize(7);
        vni_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            vni_table[instance_index].set_is_external();
        }
        
        voq_cgm_slice_buffers_consumption_lut_for_enq_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            voq_cgm_slice_buffers_consumption_lut_for_enq_table[instance_index].set_is_external();
        }
        
        voq_cgm_slice_dram_cgm_profile_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            voq_cgm_slice_dram_cgm_profile_table[instance_index].set_is_external();
        }
        
        voq_cgm_slice_pd_consumption_lut_for_enq_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            voq_cgm_slice_pd_consumption_lut_for_enq_table[instance_index].set_is_external();
        }
        
        voq_cgm_slice_profile_buff_region_thresholds_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            voq_cgm_slice_profile_buff_region_thresholds_table[instance_index].set_is_external();
        }
        
        voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table[instance_index].set_is_external();
        }
        
        voq_cgm_slice_profile_pkt_region_thresholds_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            voq_cgm_slice_profile_pkt_region_thresholds_table[instance_index].set_is_external();
        }
        
        voq_cgm_slice_slice_cgm_profile_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            voq_cgm_slice_slice_cgm_profile_table[instance_index].set_is_external();
        }
        
        vsid_table.resize(6);
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            vsid_table[instance_index].set_is_external();
        }
        
        vxlan_l2_dlp_table.resize(3);
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            vxlan_l2_dlp_table[instance_index].set_is_external();
        }
        
    }
    
    npl_tables_status_e npl_tables_t::init(size_t instance_index, npl_context_e context)
    {
        if (instance_index >= 7) {
            return NPL_TABLES_STATUS_EINVAL;
        }
        npl_tables_status_e status;
        
        status = acl_map_fi_header_type_to_protocol_number_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_desired_tx_interval_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_detection_multiple_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_inject_inner_da_high_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_inject_inner_da_low_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_inject_inner_ethernet_header_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_inject_ttl_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_ipv6_sip_A_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_ipv6_sip_B_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_ipv6_sip_C_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_ipv6_sip_D_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_punt_encap_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_required_tx_interval_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_set_inject_type_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_udp_port_map_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bfd_udp_port_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bvn_tc_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ccm_flags_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = dsp_l2_attributes_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = dsp_l3_attributes_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ecn_remark_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ene_byte_addition_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ene_macro_code_tpid_profile_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = erpp_fabric_counters_offset_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = erpp_fabric_counters_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = eth_meter_profile_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = eth_oam_set_da_mc2_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = eth_oam_set_da_mc_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = eth_rtf_conf_set_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = eve_byte_addition_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = eve_to_ethernet_ene_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_and_tm_header_size_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_header_ene_macro_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_header_types_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_headers_type_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_init_cfg[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_npuh_size_calculation_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_out_color_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_rx_fwd_error_handling_counter_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_rx_fwd_error_handling_destination_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_rx_term_error_handling_counter_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_rx_term_error_handling_destination_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_scaled_mc_map_to_netork_slice_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_smcid_threshold_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_term_error_checker_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_tm_headers_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fabric_transmit_error_checker_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fe_smcid_threshold_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = first_ene_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = get_ecm_meter_ptr_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = get_ingress_ptp_info_and_is_slp_dm_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = get_l2_rtf_conf_set_and_init_stages[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = get_non_comp_mc_value_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = gre_proto_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ibm_mc_cmd_to_encap_data_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ibm_uc_cmd_to_encap_data_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_ip_qos_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = inject_down_select_ene_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = inner_tpid_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ip_fwd_header_mapping_to_ethtype_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ip_ingress_cmp_mcid_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ip_mc_local_inject_type_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ip_mc_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ip_meter_profile_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ip_rx_global_counter_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ip_ver_mc_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv4_acl_map_protocol_type_to_protocol_number_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv4_acl_sport_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv4_rtf_conf_set_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv6_acl_sport_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv6_first_fragment_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv6_mc_select_qos_id[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv6_rtf_conf_set_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = is_pacific_b1_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_lp_profile_filter_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_lpts_ctrl_fields_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_lpts_ip_fragment_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_lpts_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_lpts_protocol_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_lpts_skip_p2p_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_termination_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_tunnel_term_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l3_dlp_p_counter_offset_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l3_termination_classify_ip_tunnels_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l3_termination_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l3_tunnel_termination_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l3_vxlan_overlay_sa_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = lpts_2nd_lookup_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = lpts_meter_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = lpts_og_application_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mac_af_npp_attributes_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mac_da_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mac_ethernet_rate_limit_type_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mac_qos_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mac_termination_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = map_ene_subcode_to8bit_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = map_inject_ccm_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = map_more_labels_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = map_recyle_tx_to_rx_data_on_pd_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = map_tm_dp_ecn_to_wa_ecn_dp_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = map_tx_punt_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = map_tx_punt_rcy_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = meg_id_format_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mep_address_prefix_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mirror_egress_attributes_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mirror_to_dsp_in_npu_soft_header_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mldp_protection_enabled_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mldp_protection_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mpls_encap_control_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mpls_header_offset_in_bytes_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mpls_l3_lsp_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mpls_labels_1_to_4_jump_offset_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mpls_lsp_labels_config_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mpls_qos_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mpls_resolve_service_labels_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mpls_vpn_enabled_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = my_ipv4_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = next_header_1_is_l4_over_ipv4_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = nh_macro_code_to_id_l6_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = nhlfe_type_mapping_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = null_rtf_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = nw_smcid_threshold_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = oamp_drop_destination_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = oamp_redirect_get_counter_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = oamp_redirect_punt_eth_hdr_1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = oamp_redirect_punt_eth_hdr_2_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = oamp_redirect_punt_eth_hdr_3_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = oamp_redirect_punt_eth_hdr_4_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = oamp_redirect_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = obm_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = og_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = outer_tpid_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pad_mtu_inj_check_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = per_port_destination_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pfc_filter_wd_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pfc_offset_from_vector_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pfc_ssp_slice_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pfc_tc_latency_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pfc_tc_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pfc_tc_wrap_latency_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pfc_vector_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = punt_ethertype_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = punt_rcy_inject_header_ene_encap_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = punt_select_nw_ene_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = recycled_inject_up_info_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = redirect_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = resolution_pfc_select_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = resolution_set_next_macro_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rewrite_sa_prefix_index_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rtf_conf_set_to_og_pcl_compress_bits_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rtf_conf_set_to_og_pcl_ids_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rtf_conf_set_to_post_fwd_stage_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rtf_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_fwd_error_handling_counter_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_fwd_error_handling_destination_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_ip_p_counter_offset_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_map_npp_to_ssp_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_obm_code_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_redirect_code_ext_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_redirect_code_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_redirect_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_term_error_handling_counter_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_term_error_handling_destination_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = second_ene_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = select_inject_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = set_ene_macro_and_bytes_to_remove_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = sip_index_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = snoop_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = snoop_to_dsp_in_npu_soft_header_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = svl_next_macro_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = te_headend_lsp_counter_offset_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = tunnel_dlp_p_counter_offset_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = tunnel_qos_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = tx_error_handling_counter_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = txpp_mapping_qos_tag_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = urpf_ipsa_dest_is_lpts_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = vlan_format_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        if (instance_index >= 6) {
            return NPL_TABLES_STATUS_SUCCESS;
        }
        
        // configuring external per-context tables
        status = bfd_event_queue_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = bitmap_oqg_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = calc_checksum_enable_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = cif2npa_c_lri_macro[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = cif2npa_c_mps_macro[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = counters_voq_block_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = cud_is_multicast_bitmap[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = cud_narrow_hw_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = cud_wide_hw_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = default_egress_ipv4_sec_acl_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = default_egress_ipv6_acl_sec_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = dest_slice_voq_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = dummy_dip_index_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = egress_mac_ipv4_sec_acl_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = egress_nh_and_svi_direct0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = egress_nh_and_svi_direct1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = em_mp_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = em_pfc_cong_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = event_queue_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = external_aux_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fb_link_2_link_bundle_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fe_rlb_uc_tx_fb_link_to_oq_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fe_uc_link_bundle_desc_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fi_core_tcam_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fi_macro_config_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = filb_voq_mapping[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fwd_destination_to_tm_result_data[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = fwd_type_to_ive_enable_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ibm_cmd_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ifgb_tc_lut_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_eth_db1_160_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_eth_db2_160_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db1_160_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db1_160_f1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db1_320_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db2_160_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db2_160_f1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db2_320_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db3_160_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db3_160_f1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db3_320_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db4_160_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db4_160_f1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv4_db4_320_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db1_160_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db1_160_f1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db1_320_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db2_160_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db2_160_f1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db2_320_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db3_160_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db3_160_f1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db3_320_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db4_160_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db4_160_f1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ingress_rtf_ipv6_db4_320_f0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = inject_down_tx_redirect_counter_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = inject_mact_ldb_to_output_lr[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = inject_up_pif_ifg_init_data_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = inject_up_ssp_init_data_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv4_ip_tunnel_termination_dip_index_tt0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv4_ip_tunnel_termination_sip_dip_index_tt0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv4_ip_tunnel_termination_sip_dip_index_tt1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv4_lpts_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv6_lpts_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ipv6_sip_compression_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_lpts_ipv4_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_lpts_ipv6_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = l2_lpts_mac_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = latest_learn_records_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = light_fi_fabric_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = light_fi_npu_base_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = light_fi_npu_encap_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = light_fi_nw_0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = light_fi_nw_1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = light_fi_nw_2_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = light_fi_nw_3_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = light_fi_stages_cfg_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = light_fi_tm_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = link_relay_attributes_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mac_mc_em_termination_attributes_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mac_mc_tcam_termination_attributes_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mac_termination_em_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mac_termination_no_da_em_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mac_termination_tcam_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mc_bitmap_base_voq_lookup_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mc_bitmap_tc_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mc_copy_id_map[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mc_cud_is_wide_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mc_emdb_tc_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mc_ibm_cud_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mc_slice_bitmap_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mii_loopback_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mirror_code_hw_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mp_aux_data_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mp_data_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mpls_termination_em0_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = mpls_termination_em1_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ms_voq_fabric_context_offset_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = native_fec_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = native_frr_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = native_lb_group_size_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = native_lb_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = native_protection_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = oamp_event_queue_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = overlay_ipv4_sip_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = path_protection_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pdoq_oq_ifc_mapping[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pdvoq_slice_voq_properties_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pfc_event_queue_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pin_start_offset_macros[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = pma_loopback_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = port_dspa_group_size_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = port_dspa_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = port_npp_protection_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = port_protection_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = punt_tunnel_transport_extended_encap_table2[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = reassembly_source_port_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = recycle_override_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = redirect_destination_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rmep_last_time_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rmep_state_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rpf_fec_access_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rpf_fec_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_counters_block_config_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_meter_block_meter_profile_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_meter_exact_meter_decision_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_meter_stat_meter_decision_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_npu_to_tm_dest_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rx_obm_punt_src_and_code_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = rxpdr_dsp_tc_map[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = sch_oqse_cfg[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = service_mapping_em0_ac_port_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = service_mapping_em0_ac_port_tag_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = service_mapping_em0_ac_port_tag_tag_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = service_mapping_em0_pwe_tag_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = service_mapping_em1_ac_port_tag_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = service_mapping_tcam_ac_port_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = service_mapping_tcam_ac_port_tag_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = service_mapping_tcam_ac_port_tag_tag_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = service_mapping_tcam_pwe_tag_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = sgacl_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = snoop_code_hw_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = source_pif_hw_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = stage2_lb_group_size_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = stage2_lb_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = stage3_lb_group_size_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = stage3_lb_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = termination_to_forwarding_fi_hardwired_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = tm_ibm_cmd_to_destination[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = ts_cmd_hw_static_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = tx_counters_block_config_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = tx_punt_eth_encap_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = txpdr_mc_list_size_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = txpdr_tc_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = txpp_dlp_profile_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = txpp_encap_qos_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = txpp_first_enc_type_to_second_enc_type_offset[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = txpp_fwd_header_type_is_l2_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = txpp_fwd_qos_mapping_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = txpp_ibm_enables_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = txpp_initial_npe_macro_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = uc_ibm_tc_map_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = vlan_edit_tpid1_profile_hw_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = vlan_edit_tpid2_profile_hw_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = vni_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = voq_cgm_slice_buffers_consumption_lut_for_enq_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = voq_cgm_slice_dram_cgm_profile_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = voq_cgm_slice_pd_consumption_lut_for_enq_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = voq_cgm_slice_profile_buff_region_thresholds_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = voq_cgm_slice_profile_pkt_region_thresholds_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = voq_cgm_slice_slice_cgm_profile_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        status = vsid_table[instance_index].initialize(instance_index, context);
        if (status != NPL_TABLES_STATUS_SUCCESS) {
            return status;
        }
        
        return NPL_TABLES_STATUS_SUCCESS;
    }
    
    npl_tables_status_e npl_tables_t::init_externals()
    {
        npl_tables_status_e status;
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = additional_labels_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = all_reachable_vector[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = bfd_event_queue_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = bfd_rx_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = bitmap_oqg_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = calc_checksum_enable_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = cif2npa_c_lri_macro[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = cif2npa_c_mps_macro[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = counters_block_config_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = counters_voq_block_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = cud_is_multicast_bitmap[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = cud_narrow_hw_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = cud_wide_hw_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = default_egress_ipv4_sec_acl_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = default_egress_ipv6_acl_sec_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = dest_slice_voq_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = destination_decoding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = device_mode_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = dummy_dip_index_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = egress_mac_ipv4_sec_acl_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = egress_nh_and_svi_direct0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = egress_nh_and_svi_direct1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = em_mp_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = em_pfc_cong_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = event_queue_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = external_aux_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = fb_link_2_link_bundle_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = fe_broadcast_bmp_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = fe_rlb_uc_tx_fb_link_to_oq_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = fe_smcid_to_mcid_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = fe_uc_link_bundle_desc_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = fi_core_tcam_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = fi_macro_config_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = filb_voq_mapping[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = frm_db_fabric_routing_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = fwd_destination_to_tm_result_data[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = fwd_type_to_ive_enable_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = hmc_cgm_cgm_lut_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = hmc_cgm_profile_global_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ibm_cmd_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ifgb_tc_lut_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_eth_db1_160_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_eth_db2_160_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db1_160_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db1_160_f1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db1_320_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db2_160_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db2_160_f1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db2_320_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db3_160_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db3_160_f1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db3_320_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db4_160_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db4_160_f1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv4_db4_320_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db1_160_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db1_160_f1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db1_320_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db2_160_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db2_160_f1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db2_320_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db3_160_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db3_160_f1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db3_320_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db4_160_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db4_160_f1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ingress_rtf_ipv6_db4_320_f0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = inject_down_tx_redirect_counter_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = inject_mact_ldb_to_output_lr[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = inject_up_pif_ifg_init_data_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = inject_up_ssp_init_data_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ip_prefix_destination_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = ip_relay_to_vni_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ipv4_ip_tunnel_termination_dip_index_tt0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ipv4_ip_tunnel_termination_sip_dip_index_tt0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ipv4_ip_tunnel_termination_sip_dip_index_tt1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ipv4_lpm_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ipv4_lpts_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ipv4_og_pcl_em_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ipv4_og_pcl_lpm_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ipv4_vrf_dip_em_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ipv4_vrf_s_g_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ipv6_lpm_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ipv6_lpts_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ipv6_og_pcl_em_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ipv6_og_pcl_lpm_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ipv6_sip_compression_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ipv6_vrf_dip_em_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = ipv6_vrf_s_g_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = l2_dlp_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = l2_lpts_ipv4_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = l2_lpts_ipv6_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = l2_lpts_mac_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = l3_dlp_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = large_encap_global_lsp_prefix_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = large_encap_ip_tunnel_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = large_encap_mpls_he_no_ldp_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = large_encap_mpls_ldp_over_te_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = large_encap_te_he_tunnel_id_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = latest_learn_records_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = learn_manager_cfg_max_learn_type_reg[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = learn_record_fifo_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = light_fi_fabric_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = light_fi_npu_base_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = light_fi_npu_encap_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = light_fi_nw_0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = light_fi_nw_1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = light_fi_nw_2_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = light_fi_nw_3_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = light_fi_stages_cfg_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = light_fi_tm_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = link_relay_attributes_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = link_up_vector[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = lp_over_lag_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = lpm_destination_prefix_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = lr_filter_write_ptr_reg[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = lr_write_ptr_reg[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = mac_forwarding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mac_mc_em_termination_attributes_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mac_mc_tcam_termination_attributes_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = mac_relay_g_ipv4_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = mac_relay_g_ipv6_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = mac_relay_to_vni_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mac_termination_em_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mac_termination_no_da_em_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mac_termination_tcam_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mc_bitmap_base_voq_lookup_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mc_bitmap_tc_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mc_copy_id_map[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mc_cud_is_wide_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = mc_em_db[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mc_emdb_tc_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = mc_fe_links_bmp[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mc_ibm_cud_mapping_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mc_slice_bitmap_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mii_loopback_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mirror_code_hw_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mp_aux_data_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mp_data_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = mpls_forwarding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mpls_termination_em0_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = mpls_termination_em1_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ms_voq_fabric_context_offset_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = native_ce_ptr_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = native_fec_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = native_fec_type_decoding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = native_frr_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = native_frr_type_decoding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = native_l2_lp_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = native_l2_lp_type_decoding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = native_lb_group_size_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = native_lb_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = native_lb_type_decoding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = native_lp_is_pbts_prefix_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = native_lp_pbts_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = native_protection_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = oamp_event_queue_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = overlay_ipv4_sip_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = path_lb_type_decoding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = path_lp_is_pbts_prefix_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = path_lp_pbts_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = path_lp_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = path_lp_type_decoding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = path_protection_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = pdoq_oq_ifc_mapping[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = pdvoq_bank_pair_offset_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = pdvoq_slice_voq_properties_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = per_asbr_and_dpe_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = per_pe_and_prefix_vpn_key_large_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = per_pe_and_vrf_vpn_key_large_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = per_vrf_mpls_forwarding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = pfc_destination_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = pfc_event_queue_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = pin_start_offset_macros[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = pma_loopback_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = port_dspa_group_size_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = port_dspa_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = port_dspa_type_decoding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = port_npp_protection_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = port_npp_protection_type_decoding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = port_protection_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = punt_tunnel_transport_encap_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = punt_tunnel_transport_extended_encap_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = punt_tunnel_transport_extended_encap_table2[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = pwe_label_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = pwe_to_l3_dest_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = pwe_vpls_label_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = pwe_vpls_tunnel_label_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = reassembly_source_port_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = recycle_override_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = redirect_destination_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rmep_last_time_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rmep_state_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rpf_fec_access_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rpf_fec_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rx_counters_block_config_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = rx_meter_block_meter_attribute_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rx_meter_block_meter_profile_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = rx_meter_block_meter_shaper_configuration_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = rx_meter_distributed_meter_profile_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rx_meter_exact_meter_decision_mapping_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = rx_meter_meter_profile_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = rx_meter_meter_shaper_configuration_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = rx_meter_meters_attribute_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = rx_meter_rate_limiter_shaper_configuration_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rx_meter_stat_meter_decision_mapping_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rx_npu_to_tm_dest_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rx_obm_punt_src_and_code_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = rxpdr_dsp_lookup_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = rxpdr_dsp_tc_map[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = sch_oqse_cfg[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = service_lp_attributes_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = service_mapping_em0_ac_port_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = service_mapping_em0_ac_port_tag_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = service_mapping_em0_ac_port_tag_tag_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = service_mapping_em0_pwe_tag_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = service_mapping_em1_ac_port_tag_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = service_mapping_tcam_ac_port_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = service_mapping_tcam_ac_port_tag_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = service_mapping_tcam_ac_port_tag_tag_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = service_mapping_tcam_pwe_tag_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = service_relay_attributes_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = sgacl_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = slice_modes_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 1; ++instance_index) {
            status = slp_based_forwarding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = small_encap_mpls_he_asbr_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = small_encap_mpls_he_te_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = snoop_code_hw_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = source_pif_hw_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = stage2_lb_group_size_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = stage2_lb_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = stage3_lb_group_size_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = stage3_lb_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = stage3_lb_type_decoding_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = termination_to_forwarding_fi_hardwired_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = tm_ibm_cmd_to_destination[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = ts_cmd_hw_static_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = tx_counters_block_config_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = tx_punt_eth_encap_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = tx_redirect_code_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = txpdr_mc_list_size_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = txpdr_tc_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = txpp_dlp_profile_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = txpp_encap_qos_mapping_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = txpp_first_enc_type_to_second_enc_type_offset[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = txpp_fwd_header_type_is_l2_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = txpp_fwd_qos_mapping_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = txpp_ibm_enables_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = txpp_initial_npe_macro_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = uc_ibm_tc_map_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = vlan_edit_tpid1_profile_hw_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = vlan_edit_tpid2_profile_hw_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = vni_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = voq_cgm_slice_buffers_consumption_lut_for_enq_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = voq_cgm_slice_dram_cgm_profile_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = voq_cgm_slice_pd_consumption_lut_for_enq_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = voq_cgm_slice_profile_buff_region_thresholds_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = voq_cgm_slice_profile_pkt_region_thresholds_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = voq_cgm_slice_slice_cgm_profile_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 6; ++instance_index) {
            status = vsid_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        for (size_t instance_index = 0; instance_index < 3; ++instance_index) {
            status = vxlan_l2_dlp_table[instance_index].initialize(instance_index, NPL_NONE_CONTEXT);
            if (status != NPL_TABLES_STATUS_SUCCESS) {
                return status;
            }
        }
        
        return NPL_TABLES_STATUS_SUCCESS;
    }
    
    npl_tables_status_e npl_tables_t::insert_table_entry(const char* table_name, size_t instance_index, void* key, void* value) {
        if (strcmp(table_name, "acl_map_fi_header_type_to_protocol_number_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_acl_map_fi_header_type_to_protocol_number_table_t::key_type k(*(npl_acl_map_fi_header_type_to_protocol_number_table_t::key_type*)key);
            npl_acl_map_fi_header_type_to_protocol_number_table_t::value_type v(*(npl_acl_map_fi_header_type_to_protocol_number_table_t::value_type*)value);
            npl_acl_map_fi_header_type_to_protocol_number_table_t::entry_pointer_type entry_pointer;
            return acl_map_fi_header_type_to_protocol_number_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "additional_labels_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_additional_labels_table_t::key_type k(*(npl_additional_labels_table_t::key_type*)key);
            npl_additional_labels_table_t::value_type v(*(npl_additional_labels_table_t::value_type*)value);
            npl_additional_labels_table_t::entry_pointer_type entry_pointer;
            return additional_labels_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "all_reachable_vector") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_all_reachable_vector_t::key_type k(*(npl_all_reachable_vector_t::key_type*)key);
            npl_all_reachable_vector_t::value_type v(*(npl_all_reachable_vector_t::value_type*)value);
            npl_all_reachable_vector_t::entry_pointer_type entry_pointer;
            return all_reachable_vector[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_desired_tx_interval_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_desired_tx_interval_table_t::key_type k(*(npl_bfd_desired_tx_interval_table_t::key_type*)key);
            npl_bfd_desired_tx_interval_table_t::value_type v(*(npl_bfd_desired_tx_interval_table_t::value_type*)value);
            npl_bfd_desired_tx_interval_table_t::entry_pointer_type entry_pointer;
            return bfd_desired_tx_interval_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_detection_multiple_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_detection_multiple_table_t::key_type k(*(npl_bfd_detection_multiple_table_t::key_type*)key);
            npl_bfd_detection_multiple_table_t::value_type v(*(npl_bfd_detection_multiple_table_t::value_type*)value);
            npl_bfd_detection_multiple_table_t::entry_pointer_type entry_pointer;
            return bfd_detection_multiple_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_event_queue_table_t::key_type k(*(npl_bfd_event_queue_table_t::key_type*)key);
            npl_bfd_event_queue_table_t::value_type v(*(npl_bfd_event_queue_table_t::value_type*)value);
            npl_bfd_event_queue_table_t::entry_pointer_type entry_pointer;
            return bfd_event_queue_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_da_high_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_inner_da_high_table_t::key_type k(*(npl_bfd_inject_inner_da_high_table_t::key_type*)key);
            npl_bfd_inject_inner_da_high_table_t::value_type v(*(npl_bfd_inject_inner_da_high_table_t::value_type*)value);
            npl_bfd_inject_inner_da_high_table_t::entry_pointer_type entry_pointer;
            return bfd_inject_inner_da_high_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_da_low_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_inner_da_low_table_t::key_type k(*(npl_bfd_inject_inner_da_low_table_t::key_type*)key);
            npl_bfd_inject_inner_da_low_table_t::value_type v(*(npl_bfd_inject_inner_da_low_table_t::value_type*)value);
            npl_bfd_inject_inner_da_low_table_t::entry_pointer_type entry_pointer;
            return bfd_inject_inner_da_low_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_ethernet_header_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_inner_ethernet_header_static_table_t::key_type k(*(npl_bfd_inject_inner_ethernet_header_static_table_t::key_type*)key);
            npl_bfd_inject_inner_ethernet_header_static_table_t::value_type v(*(npl_bfd_inject_inner_ethernet_header_static_table_t::value_type*)value);
            npl_bfd_inject_inner_ethernet_header_static_table_t::entry_pointer_type entry_pointer;
            return bfd_inject_inner_ethernet_header_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_inject_ttl_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_ttl_static_table_t::key_type k(*(npl_bfd_inject_ttl_static_table_t::key_type*)key);
            npl_bfd_inject_ttl_static_table_t::value_type v(*(npl_bfd_inject_ttl_static_table_t::value_type*)value);
            npl_bfd_inject_ttl_static_table_t::entry_pointer_type entry_pointer;
            return bfd_inject_ttl_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_A_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_A_table_t::key_type k(*(npl_bfd_ipv6_sip_A_table_t::key_type*)key);
            npl_bfd_ipv6_sip_A_table_t::value_type v(*(npl_bfd_ipv6_sip_A_table_t::value_type*)value);
            npl_bfd_ipv6_sip_A_table_t::entry_pointer_type entry_pointer;
            return bfd_ipv6_sip_A_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_B_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_B_table_t::key_type k(*(npl_bfd_ipv6_sip_B_table_t::key_type*)key);
            npl_bfd_ipv6_sip_B_table_t::value_type v(*(npl_bfd_ipv6_sip_B_table_t::value_type*)value);
            npl_bfd_ipv6_sip_B_table_t::entry_pointer_type entry_pointer;
            return bfd_ipv6_sip_B_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_C_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_C_table_t::key_type k(*(npl_bfd_ipv6_sip_C_table_t::key_type*)key);
            npl_bfd_ipv6_sip_C_table_t::value_type v(*(npl_bfd_ipv6_sip_C_table_t::value_type*)value);
            npl_bfd_ipv6_sip_C_table_t::entry_pointer_type entry_pointer;
            return bfd_ipv6_sip_C_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_D_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_D_table_t::key_type k(*(npl_bfd_ipv6_sip_D_table_t::key_type*)key);
            npl_bfd_ipv6_sip_D_table_t::value_type v(*(npl_bfd_ipv6_sip_D_table_t::value_type*)value);
            npl_bfd_ipv6_sip_D_table_t::entry_pointer_type entry_pointer;
            return bfd_ipv6_sip_D_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_punt_encap_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_punt_encap_static_table_t::key_type k(*(npl_bfd_punt_encap_static_table_t::key_type*)key);
            npl_bfd_punt_encap_static_table_t::value_type v(*(npl_bfd_punt_encap_static_table_t::value_type*)value);
            npl_bfd_punt_encap_static_table_t::entry_pointer_type entry_pointer;
            return bfd_punt_encap_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_required_tx_interval_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_required_tx_interval_table_t::key_type k(*(npl_bfd_required_tx_interval_table_t::key_type*)key);
            npl_bfd_required_tx_interval_table_t::value_type v(*(npl_bfd_required_tx_interval_table_t::value_type*)value);
            npl_bfd_required_tx_interval_table_t::entry_pointer_type entry_pointer;
            return bfd_required_tx_interval_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_rx_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_rx_table_t::key_type k(*(npl_bfd_rx_table_t::key_type*)key);
            npl_bfd_rx_table_t::value_type v(*(npl_bfd_rx_table_t::value_type*)value);
            npl_bfd_rx_table_t::entry_pointer_type entry_pointer;
            return bfd_rx_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_set_inject_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_set_inject_type_static_table_t::key_type k(*(npl_bfd_set_inject_type_static_table_t::key_type*)key);
            npl_bfd_set_inject_type_static_table_t::value_type v(*(npl_bfd_set_inject_type_static_table_t::value_type*)value);
            npl_bfd_set_inject_type_static_table_t::entry_pointer_type entry_pointer;
            return bfd_set_inject_type_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bfd_udp_port_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_udp_port_static_table_t::key_type k(*(npl_bfd_udp_port_static_table_t::key_type*)key);
            npl_bfd_udp_port_static_table_t::value_type v(*(npl_bfd_udp_port_static_table_t::value_type*)value);
            npl_bfd_udp_port_static_table_t::entry_pointer_type entry_pointer;
            return bfd_udp_port_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bitmap_oqg_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bitmap_oqg_map_table_t::key_type k(*(npl_bitmap_oqg_map_table_t::key_type*)key);
            npl_bitmap_oqg_map_table_t::value_type v(*(npl_bitmap_oqg_map_table_t::value_type*)value);
            npl_bitmap_oqg_map_table_t::entry_pointer_type entry_pointer;
            return bitmap_oqg_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "bvn_tc_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bvn_tc_map_table_t::key_type k(*(npl_bvn_tc_map_table_t::key_type*)key);
            npl_bvn_tc_map_table_t::value_type v(*(npl_bvn_tc_map_table_t::value_type*)value);
            npl_bvn_tc_map_table_t::entry_pointer_type entry_pointer;
            return bvn_tc_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "calc_checksum_enable_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_calc_checksum_enable_table_t::key_type k(*(npl_calc_checksum_enable_table_t::key_type*)key);
            npl_calc_checksum_enable_table_t::value_type v(*(npl_calc_checksum_enable_table_t::value_type*)value);
            npl_calc_checksum_enable_table_t::entry_pointer_type entry_pointer;
            return calc_checksum_enable_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ccm_flags_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ccm_flags_table_t::key_type k(*(npl_ccm_flags_table_t::key_type*)key);
            npl_ccm_flags_table_t::value_type v(*(npl_ccm_flags_table_t::value_type*)value);
            npl_ccm_flags_table_t::entry_pointer_type entry_pointer;
            return ccm_flags_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "cif2npa_c_lri_macro") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cif2npa_c_lri_macro_t::key_type k(*(npl_cif2npa_c_lri_macro_t::key_type*)key);
            npl_cif2npa_c_lri_macro_t::value_type v(*(npl_cif2npa_c_lri_macro_t::value_type*)value);
            npl_cif2npa_c_lri_macro_t::entry_pointer_type entry_pointer;
            return cif2npa_c_lri_macro[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "cif2npa_c_mps_macro") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cif2npa_c_mps_macro_t::key_type k(*(npl_cif2npa_c_mps_macro_t::key_type*)key);
            npl_cif2npa_c_mps_macro_t::value_type v(*(npl_cif2npa_c_mps_macro_t::value_type*)value);
            npl_cif2npa_c_mps_macro_t::entry_pointer_type entry_pointer;
            return cif2npa_c_mps_macro[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "counters_block_config_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_counters_block_config_table_t::key_type k(*(npl_counters_block_config_table_t::key_type*)key);
            npl_counters_block_config_table_t::value_type v(*(npl_counters_block_config_table_t::value_type*)value);
            npl_counters_block_config_table_t::entry_pointer_type entry_pointer;
            return counters_block_config_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "counters_voq_block_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_counters_voq_block_map_table_t::key_type k(*(npl_counters_voq_block_map_table_t::key_type*)key);
            npl_counters_voq_block_map_table_t::value_type v(*(npl_counters_voq_block_map_table_t::value_type*)value);
            npl_counters_voq_block_map_table_t::entry_pointer_type entry_pointer;
            return counters_voq_block_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "cud_is_multicast_bitmap") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cud_is_multicast_bitmap_t::key_type k(*(npl_cud_is_multicast_bitmap_t::key_type*)key);
            npl_cud_is_multicast_bitmap_t::value_type v(*(npl_cud_is_multicast_bitmap_t::value_type*)value);
            npl_cud_is_multicast_bitmap_t::entry_pointer_type entry_pointer;
            return cud_is_multicast_bitmap[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "cud_narrow_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cud_narrow_hw_table_t::key_type k(*(npl_cud_narrow_hw_table_t::key_type*)key);
            npl_cud_narrow_hw_table_t::value_type v(*(npl_cud_narrow_hw_table_t::value_type*)value);
            npl_cud_narrow_hw_table_t::entry_pointer_type entry_pointer;
            return cud_narrow_hw_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "cud_wide_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cud_wide_hw_table_t::key_type k(*(npl_cud_wide_hw_table_t::key_type*)key);
            npl_cud_wide_hw_table_t::value_type v(*(npl_cud_wide_hw_table_t::value_type*)value);
            npl_cud_wide_hw_table_t::entry_pointer_type entry_pointer;
            return cud_wide_hw_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "dest_slice_voq_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dest_slice_voq_map_table_t::key_type k(*(npl_dest_slice_voq_map_table_t::key_type*)key);
            npl_dest_slice_voq_map_table_t::value_type v(*(npl_dest_slice_voq_map_table_t::value_type*)value);
            npl_dest_slice_voq_map_table_t::entry_pointer_type entry_pointer;
            return dest_slice_voq_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "destination_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_destination_decoding_table_t::key_type k(*(npl_destination_decoding_table_t::key_type*)key);
            npl_destination_decoding_table_t::value_type v(*(npl_destination_decoding_table_t::value_type*)value);
            npl_destination_decoding_table_t::entry_pointer_type entry_pointer;
            return destination_decoding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "device_mode_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_device_mode_table_t::key_type k(*(npl_device_mode_table_t::key_type*)key);
            npl_device_mode_table_t::value_type v(*(npl_device_mode_table_t::value_type*)value);
            npl_device_mode_table_t::entry_pointer_type entry_pointer;
            return device_mode_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "dsp_l2_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dsp_l2_attributes_table_t::key_type k(*(npl_dsp_l2_attributes_table_t::key_type*)key);
            npl_dsp_l2_attributes_table_t::value_type v(*(npl_dsp_l2_attributes_table_t::value_type*)value);
            npl_dsp_l2_attributes_table_t::entry_pointer_type entry_pointer;
            return dsp_l2_attributes_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "dsp_l3_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dsp_l3_attributes_table_t::key_type k(*(npl_dsp_l3_attributes_table_t::key_type*)key);
            npl_dsp_l3_attributes_table_t::value_type v(*(npl_dsp_l3_attributes_table_t::value_type*)value);
            npl_dsp_l3_attributes_table_t::entry_pointer_type entry_pointer;
            return dsp_l3_attributes_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "dummy_dip_index_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dummy_dip_index_table_t::key_type k(*(npl_dummy_dip_index_table_t::key_type*)key);
            npl_dummy_dip_index_table_t::value_type v(*(npl_dummy_dip_index_table_t::value_type*)value);
            npl_dummy_dip_index_table_t::entry_pointer_type entry_pointer;
            return dummy_dip_index_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "egress_nh_and_svi_direct0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_egress_nh_and_svi_direct0_table_t::key_type k(*(npl_egress_nh_and_svi_direct0_table_t::key_type*)key);
            npl_egress_nh_and_svi_direct0_table_t::value_type v(*(npl_egress_nh_and_svi_direct0_table_t::value_type*)value);
            npl_egress_nh_and_svi_direct0_table_t::entry_pointer_type entry_pointer;
            return egress_nh_and_svi_direct0_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "egress_nh_and_svi_direct1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_egress_nh_and_svi_direct1_table_t::key_type k(*(npl_egress_nh_and_svi_direct1_table_t::key_type*)key);
            npl_egress_nh_and_svi_direct1_table_t::value_type v(*(npl_egress_nh_and_svi_direct1_table_t::value_type*)value);
            npl_egress_nh_and_svi_direct1_table_t::entry_pointer_type entry_pointer;
            return egress_nh_and_svi_direct1_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "em_mp_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_em_mp_table_t::key_type k(*(npl_em_mp_table_t::key_type*)key);
            npl_em_mp_table_t::value_type v(*(npl_em_mp_table_t::value_type*)value);
            npl_em_mp_table_t::entry_pointer_type entry_pointer;
            return em_mp_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "em_pfc_cong_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_em_pfc_cong_table_t::key_type k(*(npl_em_pfc_cong_table_t::key_type*)key);
            npl_em_pfc_cong_table_t::value_type v(*(npl_em_pfc_cong_table_t::value_type*)value);
            npl_em_pfc_cong_table_t::entry_pointer_type entry_pointer;
            return em_pfc_cong_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ene_macro_code_tpid_profile_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ene_macro_code_tpid_profile_static_table_t::key_type k(*(npl_ene_macro_code_tpid_profile_static_table_t::key_type*)key);
            npl_ene_macro_code_tpid_profile_static_table_t::value_type v(*(npl_ene_macro_code_tpid_profile_static_table_t::value_type*)value);
            npl_ene_macro_code_tpid_profile_static_table_t::entry_pointer_type entry_pointer;
            return ene_macro_code_tpid_profile_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "eth_meter_profile_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_meter_profile_mapping_table_t::key_type k(*(npl_eth_meter_profile_mapping_table_t::key_type*)key);
            npl_eth_meter_profile_mapping_table_t::value_type v(*(npl_eth_meter_profile_mapping_table_t::value_type*)value);
            npl_eth_meter_profile_mapping_table_t::entry_pointer_type entry_pointer;
            return eth_meter_profile_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "eth_oam_set_da_mc2_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_oam_set_da_mc2_static_table_t::key_type k(*(npl_eth_oam_set_da_mc2_static_table_t::key_type*)key);
            npl_eth_oam_set_da_mc2_static_table_t::value_type v(*(npl_eth_oam_set_da_mc2_static_table_t::value_type*)value);
            npl_eth_oam_set_da_mc2_static_table_t::entry_pointer_type entry_pointer;
            return eth_oam_set_da_mc2_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "eth_oam_set_da_mc_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_oam_set_da_mc_static_table_t::key_type k(*(npl_eth_oam_set_da_mc_static_table_t::key_type*)key);
            npl_eth_oam_set_da_mc_static_table_t::value_type v(*(npl_eth_oam_set_da_mc_static_table_t::value_type*)value);
            npl_eth_oam_set_da_mc_static_table_t::entry_pointer_type entry_pointer;
            return eth_oam_set_da_mc_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "eth_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_rtf_conf_set_mapping_table_t::key_type k(*(npl_eth_rtf_conf_set_mapping_table_t::key_type*)key);
            npl_eth_rtf_conf_set_mapping_table_t::value_type v(*(npl_eth_rtf_conf_set_mapping_table_t::value_type*)value);
            npl_eth_rtf_conf_set_mapping_table_t::entry_pointer_type entry_pointer;
            return eth_rtf_conf_set_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "eve_byte_addition_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eve_byte_addition_static_table_t::key_type k(*(npl_eve_byte_addition_static_table_t::key_type*)key);
            npl_eve_byte_addition_static_table_t::value_type v(*(npl_eve_byte_addition_static_table_t::value_type*)value);
            npl_eve_byte_addition_static_table_t::entry_pointer_type entry_pointer;
            return eve_byte_addition_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "eve_to_ethernet_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eve_to_ethernet_ene_static_table_t::key_type k(*(npl_eve_to_ethernet_ene_static_table_t::key_type*)key);
            npl_eve_to_ethernet_ene_static_table_t::value_type v(*(npl_eve_to_ethernet_ene_static_table_t::value_type*)value);
            npl_eve_to_ethernet_ene_static_table_t::entry_pointer_type entry_pointer;
            return eve_to_ethernet_ene_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_event_queue_table_t::key_type k(*(npl_event_queue_table_t::key_type*)key);
            npl_event_queue_table_t::value_type v(*(npl_event_queue_table_t::value_type*)value);
            npl_event_queue_table_t::entry_pointer_type entry_pointer;
            return event_queue_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "external_aux_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_external_aux_table_t::key_type k(*(npl_external_aux_table_t::key_type*)key);
            npl_external_aux_table_t::value_type v(*(npl_external_aux_table_t::value_type*)value);
            npl_external_aux_table_t::entry_pointer_type entry_pointer;
            return external_aux_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_header_types_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_header_types_static_table_t::key_type k(*(npl_fabric_header_types_static_table_t::key_type*)key);
            npl_fabric_header_types_static_table_t::value_type v(*(npl_fabric_header_types_static_table_t::value_type*)value);
            npl_fabric_header_types_static_table_t::entry_pointer_type entry_pointer;
            return fabric_header_types_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_rx_fwd_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_fwd_error_handling_counter_table_t::key_type k(*(npl_fabric_rx_fwd_error_handling_counter_table_t::key_type*)key);
            npl_fabric_rx_fwd_error_handling_counter_table_t::value_type v(*(npl_fabric_rx_fwd_error_handling_counter_table_t::value_type*)value);
            npl_fabric_rx_fwd_error_handling_counter_table_t::entry_pointer_type entry_pointer;
            return fabric_rx_fwd_error_handling_counter_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_rx_fwd_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_fwd_error_handling_destination_table_t::key_type k(*(npl_fabric_rx_fwd_error_handling_destination_table_t::key_type*)key);
            npl_fabric_rx_fwd_error_handling_destination_table_t::value_type v(*(npl_fabric_rx_fwd_error_handling_destination_table_t::value_type*)value);
            npl_fabric_rx_fwd_error_handling_destination_table_t::entry_pointer_type entry_pointer;
            return fabric_rx_fwd_error_handling_destination_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_rx_term_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_term_error_handling_counter_table_t::key_type k(*(npl_fabric_rx_term_error_handling_counter_table_t::key_type*)key);
            npl_fabric_rx_term_error_handling_counter_table_t::value_type v(*(npl_fabric_rx_term_error_handling_counter_table_t::value_type*)value);
            npl_fabric_rx_term_error_handling_counter_table_t::entry_pointer_type entry_pointer;
            return fabric_rx_term_error_handling_counter_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_rx_term_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_term_error_handling_destination_table_t::key_type k(*(npl_fabric_rx_term_error_handling_destination_table_t::key_type*)key);
            npl_fabric_rx_term_error_handling_destination_table_t::value_type v(*(npl_fabric_rx_term_error_handling_destination_table_t::value_type*)value);
            npl_fabric_rx_term_error_handling_destination_table_t::entry_pointer_type entry_pointer;
            return fabric_rx_term_error_handling_destination_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_scaled_mc_map_to_netork_slice_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::key_type k(*(npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::key_type*)key);
            npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::value_type v(*(npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::value_type*)value);
            npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::entry_pointer_type entry_pointer;
            return fabric_scaled_mc_map_to_netork_slice_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_smcid_threshold_table_t::key_type k(*(npl_fabric_smcid_threshold_table_t::key_type*)key);
            npl_fabric_smcid_threshold_table_t::value_type v(*(npl_fabric_smcid_threshold_table_t::value_type*)value);
            npl_fabric_smcid_threshold_table_t::entry_pointer_type entry_pointer;
            return fabric_smcid_threshold_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_tm_headers_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_tm_headers_table_t::key_type k(*(npl_fabric_tm_headers_table_t::key_type*)key);
            npl_fabric_tm_headers_table_t::value_type v(*(npl_fabric_tm_headers_table_t::value_type*)value);
            npl_fabric_tm_headers_table_t::entry_pointer_type entry_pointer;
            return fabric_tm_headers_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fb_link_2_link_bundle_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fb_link_2_link_bundle_table_t::key_type k(*(npl_fb_link_2_link_bundle_table_t::key_type*)key);
            npl_fb_link_2_link_bundle_table_t::value_type v(*(npl_fb_link_2_link_bundle_table_t::value_type*)value);
            npl_fb_link_2_link_bundle_table_t::entry_pointer_type entry_pointer;
            return fb_link_2_link_bundle_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fe_broadcast_bmp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_broadcast_bmp_table_t::key_type k(*(npl_fe_broadcast_bmp_table_t::key_type*)key);
            npl_fe_broadcast_bmp_table_t::value_type v(*(npl_fe_broadcast_bmp_table_t::value_type*)value);
            npl_fe_broadcast_bmp_table_t::entry_pointer_type entry_pointer;
            return fe_broadcast_bmp_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fe_rlb_uc_tx_fb_link_to_oq_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::key_type k(*(npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::key_type*)key);
            npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::value_type v(*(npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::value_type*)value);
            npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::entry_pointer_type entry_pointer;
            return fe_rlb_uc_tx_fb_link_to_oq_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fe_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_smcid_threshold_table_t::key_type k(*(npl_fe_smcid_threshold_table_t::key_type*)key);
            npl_fe_smcid_threshold_table_t::value_type v(*(npl_fe_smcid_threshold_table_t::value_type*)value);
            npl_fe_smcid_threshold_table_t::entry_pointer_type entry_pointer;
            return fe_smcid_threshold_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fe_smcid_to_mcid_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_smcid_to_mcid_table_t::key_type k(*(npl_fe_smcid_to_mcid_table_t::key_type*)key);
            npl_fe_smcid_to_mcid_table_t::value_type v(*(npl_fe_smcid_to_mcid_table_t::value_type*)value);
            npl_fe_smcid_to_mcid_table_t::entry_pointer_type entry_pointer;
            return fe_smcid_to_mcid_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fe_uc_link_bundle_desc_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_uc_link_bundle_desc_table_t::key_type k(*(npl_fe_uc_link_bundle_desc_table_t::key_type*)key);
            npl_fe_uc_link_bundle_desc_table_t::value_type v(*(npl_fe_uc_link_bundle_desc_table_t::value_type*)value);
            npl_fe_uc_link_bundle_desc_table_t::entry_pointer_type entry_pointer;
            return fe_uc_link_bundle_desc_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fi_macro_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fi_macro_config_table_t::key_type k(*(npl_fi_macro_config_table_t::key_type*)key);
            npl_fi_macro_config_table_t::value_type v(*(npl_fi_macro_config_table_t::value_type*)value);
            npl_fi_macro_config_table_t::entry_pointer_type entry_pointer;
            return fi_macro_config_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "filb_voq_mapping") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_filb_voq_mapping_t::key_type k(*(npl_filb_voq_mapping_t::key_type*)key);
            npl_filb_voq_mapping_t::value_type v(*(npl_filb_voq_mapping_t::value_type*)value);
            npl_filb_voq_mapping_t::entry_pointer_type entry_pointer;
            return filb_voq_mapping[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "first_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_first_ene_static_table_t::key_type k(*(npl_first_ene_static_table_t::key_type*)key);
            npl_first_ene_static_table_t::value_type v(*(npl_first_ene_static_table_t::value_type*)value);
            npl_first_ene_static_table_t::entry_pointer_type entry_pointer;
            return first_ene_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "frm_db_fabric_routing_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_frm_db_fabric_routing_table_t::key_type k(*(npl_frm_db_fabric_routing_table_t::key_type*)key);
            npl_frm_db_fabric_routing_table_t::value_type v(*(npl_frm_db_fabric_routing_table_t::value_type*)value);
            npl_frm_db_fabric_routing_table_t::entry_pointer_type entry_pointer;
            return frm_db_fabric_routing_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fwd_destination_to_tm_result_data") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fwd_destination_to_tm_result_data_t::key_type k(*(npl_fwd_destination_to_tm_result_data_t::key_type*)key);
            npl_fwd_destination_to_tm_result_data_t::value_type v(*(npl_fwd_destination_to_tm_result_data_t::value_type*)value);
            npl_fwd_destination_to_tm_result_data_t::entry_pointer_type entry_pointer;
            return fwd_destination_to_tm_result_data[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fwd_type_to_ive_enable_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fwd_type_to_ive_enable_table_t::key_type k(*(npl_fwd_type_to_ive_enable_table_t::key_type*)key);
            npl_fwd_type_to_ive_enable_table_t::value_type v(*(npl_fwd_type_to_ive_enable_table_t::value_type*)value);
            npl_fwd_type_to_ive_enable_table_t::entry_pointer_type entry_pointer;
            return fwd_type_to_ive_enable_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "get_ecm_meter_ptr_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_ecm_meter_ptr_table_t::key_type k(*(npl_get_ecm_meter_ptr_table_t::key_type*)key);
            npl_get_ecm_meter_ptr_table_t::value_type v(*(npl_get_ecm_meter_ptr_table_t::value_type*)value);
            npl_get_ecm_meter_ptr_table_t::entry_pointer_type entry_pointer;
            return get_ecm_meter_ptr_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "get_ingress_ptp_info_and_is_slp_dm_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::key_type k(*(npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::key_type*)key);
            npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::value_type v(*(npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::value_type*)value);
            npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::entry_pointer_type entry_pointer;
            return get_ingress_ptp_info_and_is_slp_dm_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "get_l2_rtf_conf_set_and_init_stages") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_l2_rtf_conf_set_and_init_stages_t::key_type k(*(npl_get_l2_rtf_conf_set_and_init_stages_t::key_type*)key);
            npl_get_l2_rtf_conf_set_and_init_stages_t::value_type v(*(npl_get_l2_rtf_conf_set_and_init_stages_t::value_type*)value);
            npl_get_l2_rtf_conf_set_and_init_stages_t::entry_pointer_type entry_pointer;
            return get_l2_rtf_conf_set_and_init_stages[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "get_non_comp_mc_value_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_non_comp_mc_value_static_table_t::key_type k(*(npl_get_non_comp_mc_value_static_table_t::key_type*)key);
            npl_get_non_comp_mc_value_static_table_t::value_type v(*(npl_get_non_comp_mc_value_static_table_t::value_type*)value);
            npl_get_non_comp_mc_value_static_table_t::entry_pointer_type entry_pointer;
            return get_non_comp_mc_value_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "gre_proto_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_gre_proto_static_table_t::key_type k(*(npl_gre_proto_static_table_t::key_type*)key);
            npl_gre_proto_static_table_t::value_type v(*(npl_gre_proto_static_table_t::value_type*)value);
            npl_gre_proto_static_table_t::entry_pointer_type entry_pointer;
            return gre_proto_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "hmc_cgm_cgm_lut_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_hmc_cgm_cgm_lut_table_t::key_type k(*(npl_hmc_cgm_cgm_lut_table_t::key_type*)key);
            npl_hmc_cgm_cgm_lut_table_t::value_type v(*(npl_hmc_cgm_cgm_lut_table_t::value_type*)value);
            npl_hmc_cgm_cgm_lut_table_t::entry_pointer_type entry_pointer;
            return hmc_cgm_cgm_lut_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "hmc_cgm_profile_global_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_hmc_cgm_profile_global_table_t::key_type k(*(npl_hmc_cgm_profile_global_table_t::key_type*)key);
            npl_hmc_cgm_profile_global_table_t::value_type v(*(npl_hmc_cgm_profile_global_table_t::value_type*)value);
            npl_hmc_cgm_profile_global_table_t::entry_pointer_type entry_pointer;
            return hmc_cgm_profile_global_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ibm_cmd_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ibm_cmd_table_t::key_type k(*(npl_ibm_cmd_table_t::key_type*)key);
            npl_ibm_cmd_table_t::value_type v(*(npl_ibm_cmd_table_t::value_type*)value);
            npl_ibm_cmd_table_t::entry_pointer_type entry_pointer;
            return ibm_cmd_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ibm_mc_cmd_to_encap_data_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ibm_mc_cmd_to_encap_data_table_t::key_type k(*(npl_ibm_mc_cmd_to_encap_data_table_t::key_type*)key);
            npl_ibm_mc_cmd_to_encap_data_table_t::value_type v(*(npl_ibm_mc_cmd_to_encap_data_table_t::value_type*)value);
            npl_ibm_mc_cmd_to_encap_data_table_t::entry_pointer_type entry_pointer;
            return ibm_mc_cmd_to_encap_data_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ibm_uc_cmd_to_encap_data_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ibm_uc_cmd_to_encap_data_table_t::key_type k(*(npl_ibm_uc_cmd_to_encap_data_table_t::key_type*)key);
            npl_ibm_uc_cmd_to_encap_data_table_t::value_type v(*(npl_ibm_uc_cmd_to_encap_data_table_t::value_type*)value);
            npl_ibm_uc_cmd_to_encap_data_table_t::entry_pointer_type entry_pointer;
            return ibm_uc_cmd_to_encap_data_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ifgb_tc_lut_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ifgb_tc_lut_table_t::key_type k(*(npl_ifgb_tc_lut_table_t::key_type*)key);
            npl_ifgb_tc_lut_table_t::value_type v(*(npl_ifgb_tc_lut_table_t::value_type*)value);
            npl_ifgb_tc_lut_table_t::entry_pointer_type entry_pointer;
            return ifgb_tc_lut_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_ip_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_ip_qos_mapping_table_t::key_type k(*(npl_ingress_ip_qos_mapping_table_t::key_type*)key);
            npl_ingress_ip_qos_mapping_table_t::value_type v(*(npl_ingress_ip_qos_mapping_table_t::value_type*)value);
            npl_ingress_ip_qos_mapping_table_t::entry_pointer_type entry_pointer;
            return ingress_ip_qos_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "inject_down_tx_redirect_counter_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_down_tx_redirect_counter_table_t::key_type k(*(npl_inject_down_tx_redirect_counter_table_t::key_type*)key);
            npl_inject_down_tx_redirect_counter_table_t::value_type v(*(npl_inject_down_tx_redirect_counter_table_t::value_type*)value);
            npl_inject_down_tx_redirect_counter_table_t::entry_pointer_type entry_pointer;
            return inject_down_tx_redirect_counter_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "inject_mact_ldb_to_output_lr") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_mact_ldb_to_output_lr_t::key_type k(*(npl_inject_mact_ldb_to_output_lr_t::key_type*)key);
            npl_inject_mact_ldb_to_output_lr_t::value_type v(*(npl_inject_mact_ldb_to_output_lr_t::value_type*)value);
            npl_inject_mact_ldb_to_output_lr_t::entry_pointer_type entry_pointer;
            return inject_mact_ldb_to_output_lr[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "inject_up_pif_ifg_init_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_up_pif_ifg_init_data_table_t::key_type k(*(npl_inject_up_pif_ifg_init_data_table_t::key_type*)key);
            npl_inject_up_pif_ifg_init_data_table_t::value_type v(*(npl_inject_up_pif_ifg_init_data_table_t::value_type*)value);
            npl_inject_up_pif_ifg_init_data_table_t::entry_pointer_type entry_pointer;
            return inject_up_pif_ifg_init_data_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "inject_up_ssp_init_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_up_ssp_init_data_table_t::key_type k(*(npl_inject_up_ssp_init_data_table_t::key_type*)key);
            npl_inject_up_ssp_init_data_table_t::value_type v(*(npl_inject_up_ssp_init_data_table_t::value_type*)value);
            npl_inject_up_ssp_init_data_table_t::entry_pointer_type entry_pointer;
            return inject_up_ssp_init_data_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "inner_tpid_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inner_tpid_table_t::key_type k(*(npl_inner_tpid_table_t::key_type*)key);
            npl_inner_tpid_table_t::value_type v(*(npl_inner_tpid_table_t::value_type*)value);
            npl_inner_tpid_table_t::entry_pointer_type entry_pointer;
            return inner_tpid_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ip_fwd_header_mapping_to_ethtype_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_fwd_header_mapping_to_ethtype_static_table_t::key_type k(*(npl_ip_fwd_header_mapping_to_ethtype_static_table_t::key_type*)key);
            npl_ip_fwd_header_mapping_to_ethtype_static_table_t::value_type v(*(npl_ip_fwd_header_mapping_to_ethtype_static_table_t::value_type*)value);
            npl_ip_fwd_header_mapping_to_ethtype_static_table_t::entry_pointer_type entry_pointer;
            return ip_fwd_header_mapping_to_ethtype_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ip_mc_local_inject_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_mc_local_inject_type_static_table_t::key_type k(*(npl_ip_mc_local_inject_type_static_table_t::key_type*)key);
            npl_ip_mc_local_inject_type_static_table_t::value_type v(*(npl_ip_mc_local_inject_type_static_table_t::value_type*)value);
            npl_ip_mc_local_inject_type_static_table_t::entry_pointer_type entry_pointer;
            return ip_mc_local_inject_type_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ip_mc_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_mc_next_macro_static_table_t::key_type k(*(npl_ip_mc_next_macro_static_table_t::key_type*)key);
            npl_ip_mc_next_macro_static_table_t::value_type v(*(npl_ip_mc_next_macro_static_table_t::value_type*)value);
            npl_ip_mc_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return ip_mc_next_macro_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ip_meter_profile_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_meter_profile_mapping_table_t::key_type k(*(npl_ip_meter_profile_mapping_table_t::key_type*)key);
            npl_ip_meter_profile_mapping_table_t::value_type v(*(npl_ip_meter_profile_mapping_table_t::value_type*)value);
            npl_ip_meter_profile_mapping_table_t::entry_pointer_type entry_pointer;
            return ip_meter_profile_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ip_prefix_destination_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_prefix_destination_table_t::key_type k(*(npl_ip_prefix_destination_table_t::key_type*)key);
            npl_ip_prefix_destination_table_t::value_type v(*(npl_ip_prefix_destination_table_t::value_type*)value);
            npl_ip_prefix_destination_table_t::entry_pointer_type entry_pointer;
            return ip_prefix_destination_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ip_relay_to_vni_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_relay_to_vni_table_t::key_type k(*(npl_ip_relay_to_vni_table_t::key_type*)key);
            npl_ip_relay_to_vni_table_t::value_type v(*(npl_ip_relay_to_vni_table_t::value_type*)value);
            npl_ip_relay_to_vni_table_t::entry_pointer_type entry_pointer;
            return ip_relay_to_vni_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ip_rx_global_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_rx_global_counter_table_t::key_type k(*(npl_ip_rx_global_counter_table_t::key_type*)key);
            npl_ip_rx_global_counter_table_t::value_type v(*(npl_ip_rx_global_counter_table_t::value_type*)value);
            npl_ip_rx_global_counter_table_t::entry_pointer_type entry_pointer;
            return ip_rx_global_counter_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_acl_sport_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_acl_sport_static_table_t::key_type k(*(npl_ipv4_acl_sport_static_table_t::key_type*)key);
            npl_ipv4_acl_sport_static_table_t::value_type v(*(npl_ipv4_acl_sport_static_table_t::value_type*)value);
            npl_ipv4_acl_sport_static_table_t::entry_pointer_type entry_pointer;
            return ipv4_acl_sport_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_dip_index_tt0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::key_type k(*(npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::key_type*)key);
            npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::value_type v(*(npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::value_type*)value);
            npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::entry_pointer_type entry_pointer;
            return ipv4_ip_tunnel_termination_dip_index_tt0_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_sip_dip_index_tt0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::key_type k(*(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::key_type*)key);
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::value_type v(*(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::value_type*)value);
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::entry_pointer_type entry_pointer;
            return ipv4_ip_tunnel_termination_sip_dip_index_tt0_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_sip_dip_index_tt1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::key_type k(*(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::key_type*)key);
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::value_type v(*(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::value_type*)value);
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::entry_pointer_type entry_pointer;
            return ipv4_ip_tunnel_termination_sip_dip_index_tt1_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_og_pcl_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_og_pcl_em_table_t::key_type k(*(npl_ipv4_og_pcl_em_table_t::key_type*)key);
            npl_ipv4_og_pcl_em_table_t::value_type v(*(npl_ipv4_og_pcl_em_table_t::value_type*)value);
            npl_ipv4_og_pcl_em_table_t::entry_pointer_type entry_pointer;
            return ipv4_og_pcl_em_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_rtf_conf_set_mapping_table_t::key_type k(*(npl_ipv4_rtf_conf_set_mapping_table_t::key_type*)key);
            npl_ipv4_rtf_conf_set_mapping_table_t::value_type v(*(npl_ipv4_rtf_conf_set_mapping_table_t::value_type*)value);
            npl_ipv4_rtf_conf_set_mapping_table_t::entry_pointer_type entry_pointer;
            return ipv4_rtf_conf_set_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_vrf_dip_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_vrf_dip_em_table_t::key_type k(*(npl_ipv4_vrf_dip_em_table_t::key_type*)key);
            npl_ipv4_vrf_dip_em_table_t::value_type v(*(npl_ipv4_vrf_dip_em_table_t::value_type*)value);
            npl_ipv4_vrf_dip_em_table_t::entry_pointer_type entry_pointer;
            return ipv4_vrf_dip_em_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_vrf_s_g_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_vrf_s_g_table_t::key_type k(*(npl_ipv4_vrf_s_g_table_t::key_type*)key);
            npl_ipv4_vrf_s_g_table_t::value_type v(*(npl_ipv4_vrf_s_g_table_t::value_type*)value);
            npl_ipv4_vrf_s_g_table_t::entry_pointer_type entry_pointer;
            return ipv4_vrf_s_g_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_acl_sport_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_acl_sport_static_table_t::key_type k(*(npl_ipv6_acl_sport_static_table_t::key_type*)key);
            npl_ipv6_acl_sport_static_table_t::value_type v(*(npl_ipv6_acl_sport_static_table_t::value_type*)value);
            npl_ipv6_acl_sport_static_table_t::entry_pointer_type entry_pointer;
            return ipv6_acl_sport_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_mc_select_qos_id") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_mc_select_qos_id_t::key_type k(*(npl_ipv6_mc_select_qos_id_t::key_type*)key);
            npl_ipv6_mc_select_qos_id_t::value_type v(*(npl_ipv6_mc_select_qos_id_t::value_type*)value);
            npl_ipv6_mc_select_qos_id_t::entry_pointer_type entry_pointer;
            return ipv6_mc_select_qos_id[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_og_pcl_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_og_pcl_em_table_t::key_type k(*(npl_ipv6_og_pcl_em_table_t::key_type*)key);
            npl_ipv6_og_pcl_em_table_t::value_type v(*(npl_ipv6_og_pcl_em_table_t::value_type*)value);
            npl_ipv6_og_pcl_em_table_t::entry_pointer_type entry_pointer;
            return ipv6_og_pcl_em_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_rtf_conf_set_mapping_table_t::key_type k(*(npl_ipv6_rtf_conf_set_mapping_table_t::key_type*)key);
            npl_ipv6_rtf_conf_set_mapping_table_t::value_type v(*(npl_ipv6_rtf_conf_set_mapping_table_t::value_type*)value);
            npl_ipv6_rtf_conf_set_mapping_table_t::entry_pointer_type entry_pointer;
            return ipv6_rtf_conf_set_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_vrf_dip_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_vrf_dip_em_table_t::key_type k(*(npl_ipv6_vrf_dip_em_table_t::key_type*)key);
            npl_ipv6_vrf_dip_em_table_t::value_type v(*(npl_ipv6_vrf_dip_em_table_t::value_type*)value);
            npl_ipv6_vrf_dip_em_table_t::entry_pointer_type entry_pointer;
            return ipv6_vrf_dip_em_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_vrf_s_g_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_vrf_s_g_table_t::key_type k(*(npl_ipv6_vrf_s_g_table_t::key_type*)key);
            npl_ipv6_vrf_s_g_table_t::value_type v(*(npl_ipv6_vrf_s_g_table_t::value_type*)value);
            npl_ipv6_vrf_s_g_table_t::entry_pointer_type entry_pointer;
            return ipv6_vrf_s_g_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "is_pacific_b1_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_is_pacific_b1_static_table_t::key_type k(*(npl_is_pacific_b1_static_table_t::key_type*)key);
            npl_is_pacific_b1_static_table_t::value_type v(*(npl_is_pacific_b1_static_table_t::value_type*)value);
            npl_is_pacific_b1_static_table_t::entry_pointer_type entry_pointer;
            return is_pacific_b1_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_dlp_table_t::key_type k(*(npl_l2_dlp_table_t::key_type*)key);
            npl_l2_dlp_table_t::value_type v(*(npl_l2_dlp_table_t::value_type*)value);
            npl_l2_dlp_table_t::entry_pointer_type entry_pointer;
            return l2_dlp_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_lp_profile_filter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lp_profile_filter_table_t::key_type k(*(npl_l2_lp_profile_filter_table_t::key_type*)key);
            npl_l2_lp_profile_filter_table_t::value_type v(*(npl_l2_lp_profile_filter_table_t::value_type*)value);
            npl_l2_lp_profile_filter_table_t::entry_pointer_type entry_pointer;
            return l2_lp_profile_filter_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_lpts_ip_fragment_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_ip_fragment_static_table_t::key_type k(*(npl_l2_lpts_ip_fragment_static_table_t::key_type*)key);
            npl_l2_lpts_ip_fragment_static_table_t::value_type v(*(npl_l2_lpts_ip_fragment_static_table_t::value_type*)value);
            npl_l2_lpts_ip_fragment_static_table_t::entry_pointer_type entry_pointer;
            return l2_lpts_ip_fragment_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_lpts_skip_p2p_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_skip_p2p_static_table_t::key_type k(*(npl_l2_lpts_skip_p2p_static_table_t::key_type*)key);
            npl_l2_lpts_skip_p2p_static_table_t::value_type v(*(npl_l2_lpts_skip_p2p_static_table_t::value_type*)value);
            npl_l2_lpts_skip_p2p_static_table_t::entry_pointer_type entry_pointer;
            return l2_lpts_skip_p2p_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_tunnel_term_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_tunnel_term_next_macro_static_table_t::key_type k(*(npl_l2_tunnel_term_next_macro_static_table_t::key_type*)key);
            npl_l2_tunnel_term_next_macro_static_table_t::value_type v(*(npl_l2_tunnel_term_next_macro_static_table_t::value_type*)value);
            npl_l2_tunnel_term_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return l2_tunnel_term_next_macro_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l3_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_dlp_table_t::key_type k(*(npl_l3_dlp_table_t::key_type*)key);
            npl_l3_dlp_table_t::value_type v(*(npl_l3_dlp_table_t::value_type*)value);
            npl_l3_dlp_table_t::entry_pointer_type entry_pointer;
            return l3_dlp_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l3_vxlan_overlay_sa_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_vxlan_overlay_sa_table_t::key_type k(*(npl_l3_vxlan_overlay_sa_table_t::key_type*)key);
            npl_l3_vxlan_overlay_sa_table_t::value_type v(*(npl_l3_vxlan_overlay_sa_table_t::value_type*)value);
            npl_l3_vxlan_overlay_sa_table_t::entry_pointer_type entry_pointer;
            return l3_vxlan_overlay_sa_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "large_encap_global_lsp_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_global_lsp_prefix_table_t::key_type k(*(npl_large_encap_global_lsp_prefix_table_t::key_type*)key);
            npl_large_encap_global_lsp_prefix_table_t::value_type v(*(npl_large_encap_global_lsp_prefix_table_t::value_type*)value);
            npl_large_encap_global_lsp_prefix_table_t::entry_pointer_type entry_pointer;
            return large_encap_global_lsp_prefix_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "large_encap_ip_tunnel_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_ip_tunnel_table_t::key_type k(*(npl_large_encap_ip_tunnel_table_t::key_type*)key);
            npl_large_encap_ip_tunnel_table_t::value_type v(*(npl_large_encap_ip_tunnel_table_t::value_type*)value);
            npl_large_encap_ip_tunnel_table_t::entry_pointer_type entry_pointer;
            return large_encap_ip_tunnel_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "large_encap_mpls_he_no_ldp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_mpls_he_no_ldp_table_t::key_type k(*(npl_large_encap_mpls_he_no_ldp_table_t::key_type*)key);
            npl_large_encap_mpls_he_no_ldp_table_t::value_type v(*(npl_large_encap_mpls_he_no_ldp_table_t::value_type*)value);
            npl_large_encap_mpls_he_no_ldp_table_t::entry_pointer_type entry_pointer;
            return large_encap_mpls_he_no_ldp_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "large_encap_mpls_ldp_over_te_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_mpls_ldp_over_te_table_t::key_type k(*(npl_large_encap_mpls_ldp_over_te_table_t::key_type*)key);
            npl_large_encap_mpls_ldp_over_te_table_t::value_type v(*(npl_large_encap_mpls_ldp_over_te_table_t::value_type*)value);
            npl_large_encap_mpls_ldp_over_te_table_t::entry_pointer_type entry_pointer;
            return large_encap_mpls_ldp_over_te_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "large_encap_te_he_tunnel_id_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_te_he_tunnel_id_table_t::key_type k(*(npl_large_encap_te_he_tunnel_id_table_t::key_type*)key);
            npl_large_encap_te_he_tunnel_id_table_t::value_type v(*(npl_large_encap_te_he_tunnel_id_table_t::value_type*)value);
            npl_large_encap_te_he_tunnel_id_table_t::entry_pointer_type entry_pointer;
            return large_encap_te_he_tunnel_id_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "latest_learn_records_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_latest_learn_records_table_t::key_type k(*(npl_latest_learn_records_table_t::key_type*)key);
            npl_latest_learn_records_table_t::value_type v(*(npl_latest_learn_records_table_t::value_type*)value);
            npl_latest_learn_records_table_t::entry_pointer_type entry_pointer;
            return latest_learn_records_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "learn_manager_cfg_max_learn_type_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_learn_manager_cfg_max_learn_type_reg_t::key_type k(*(npl_learn_manager_cfg_max_learn_type_reg_t::key_type*)key);
            npl_learn_manager_cfg_max_learn_type_reg_t::value_type v(*(npl_learn_manager_cfg_max_learn_type_reg_t::value_type*)value);
            npl_learn_manager_cfg_max_learn_type_reg_t::entry_pointer_type entry_pointer;
            return learn_manager_cfg_max_learn_type_reg[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "learn_record_fifo_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_learn_record_fifo_table_t::key_type k(*(npl_learn_record_fifo_table_t::key_type*)key);
            npl_learn_record_fifo_table_t::value_type v(*(npl_learn_record_fifo_table_t::value_type*)value);
            npl_learn_record_fifo_table_t::entry_pointer_type entry_pointer;
            return learn_record_fifo_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "light_fi_fabric_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_fabric_table_t::key_type k(*(npl_light_fi_fabric_table_t::key_type*)key);
            npl_light_fi_fabric_table_t::value_type v(*(npl_light_fi_fabric_table_t::value_type*)value);
            npl_light_fi_fabric_table_t::entry_pointer_type entry_pointer;
            return light_fi_fabric_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "light_fi_npu_base_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_npu_base_table_t::key_type k(*(npl_light_fi_npu_base_table_t::key_type*)key);
            npl_light_fi_npu_base_table_t::value_type v(*(npl_light_fi_npu_base_table_t::value_type*)value);
            npl_light_fi_npu_base_table_t::entry_pointer_type entry_pointer;
            return light_fi_npu_base_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "light_fi_npu_encap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_npu_encap_table_t::key_type k(*(npl_light_fi_npu_encap_table_t::key_type*)key);
            npl_light_fi_npu_encap_table_t::value_type v(*(npl_light_fi_npu_encap_table_t::value_type*)value);
            npl_light_fi_npu_encap_table_t::entry_pointer_type entry_pointer;
            return light_fi_npu_encap_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "light_fi_stages_cfg_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_stages_cfg_table_t::key_type k(*(npl_light_fi_stages_cfg_table_t::key_type*)key);
            npl_light_fi_stages_cfg_table_t::value_type v(*(npl_light_fi_stages_cfg_table_t::value_type*)value);
            npl_light_fi_stages_cfg_table_t::entry_pointer_type entry_pointer;
            return light_fi_stages_cfg_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "light_fi_tm_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_tm_table_t::key_type k(*(npl_light_fi_tm_table_t::key_type*)key);
            npl_light_fi_tm_table_t::value_type v(*(npl_light_fi_tm_table_t::value_type*)value);
            npl_light_fi_tm_table_t::entry_pointer_type entry_pointer;
            return light_fi_tm_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "link_relay_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_link_relay_attributes_table_t::key_type k(*(npl_link_relay_attributes_table_t::key_type*)key);
            npl_link_relay_attributes_table_t::value_type v(*(npl_link_relay_attributes_table_t::value_type*)value);
            npl_link_relay_attributes_table_t::entry_pointer_type entry_pointer;
            return link_relay_attributes_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "link_up_vector") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_link_up_vector_t::key_type k(*(npl_link_up_vector_t::key_type*)key);
            npl_link_up_vector_t::value_type v(*(npl_link_up_vector_t::value_type*)value);
            npl_link_up_vector_t::entry_pointer_type entry_pointer;
            return link_up_vector[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "lp_over_lag_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lp_over_lag_table_t::key_type k(*(npl_lp_over_lag_table_t::key_type*)key);
            npl_lp_over_lag_table_t::value_type v(*(npl_lp_over_lag_table_t::value_type*)value);
            npl_lp_over_lag_table_t::entry_pointer_type entry_pointer;
            return lp_over_lag_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "lpm_destination_prefix_map_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpm_destination_prefix_map_table_t::key_type k(*(npl_lpm_destination_prefix_map_table_t::key_type*)key);
            npl_lpm_destination_prefix_map_table_t::value_type v(*(npl_lpm_destination_prefix_map_table_t::value_type*)value);
            npl_lpm_destination_prefix_map_table_t::entry_pointer_type entry_pointer;
            return lpm_destination_prefix_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "lpts_2nd_lookup_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpts_2nd_lookup_table_t::key_type k(*(npl_lpts_2nd_lookup_table_t::key_type*)key);
            npl_lpts_2nd_lookup_table_t::value_type v(*(npl_lpts_2nd_lookup_table_t::value_type*)value);
            npl_lpts_2nd_lookup_table_t::entry_pointer_type entry_pointer;
            return lpts_2nd_lookup_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "lpts_meter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpts_meter_table_t::key_type k(*(npl_lpts_meter_table_t::key_type*)key);
            npl_lpts_meter_table_t::value_type v(*(npl_lpts_meter_table_t::value_type*)value);
            npl_lpts_meter_table_t::entry_pointer_type entry_pointer;
            return lpts_meter_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "lr_filter_write_ptr_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lr_filter_write_ptr_reg_t::key_type k(*(npl_lr_filter_write_ptr_reg_t::key_type*)key);
            npl_lr_filter_write_ptr_reg_t::value_type v(*(npl_lr_filter_write_ptr_reg_t::value_type*)value);
            npl_lr_filter_write_ptr_reg_t::entry_pointer_type entry_pointer;
            return lr_filter_write_ptr_reg[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "lr_write_ptr_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lr_write_ptr_reg_t::key_type k(*(npl_lr_write_ptr_reg_t::key_type*)key);
            npl_lr_write_ptr_reg_t::value_type v(*(npl_lr_write_ptr_reg_t::value_type*)value);
            npl_lr_write_ptr_reg_t::entry_pointer_type entry_pointer;
            return lr_write_ptr_reg[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_af_npp_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_af_npp_attributes_table_t::key_type k(*(npl_mac_af_npp_attributes_table_t::key_type*)key);
            npl_mac_af_npp_attributes_table_t::value_type v(*(npl_mac_af_npp_attributes_table_t::value_type*)value);
            npl_mac_af_npp_attributes_table_t::entry_pointer_type entry_pointer;
            return mac_af_npp_attributes_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_forwarding_table_t::key_type k(*(npl_mac_forwarding_table_t::key_type*)key);
            npl_mac_forwarding_table_t::value_type v(*(npl_mac_forwarding_table_t::value_type*)value);
            npl_mac_forwarding_table_t::entry_pointer_type entry_pointer;
            return mac_forwarding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_mc_em_termination_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_mc_em_termination_attributes_table_t::key_type k(*(npl_mac_mc_em_termination_attributes_table_t::key_type*)key);
            npl_mac_mc_em_termination_attributes_table_t::value_type v(*(npl_mac_mc_em_termination_attributes_table_t::value_type*)value);
            npl_mac_mc_em_termination_attributes_table_t::entry_pointer_type entry_pointer;
            return mac_mc_em_termination_attributes_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_qos_mapping_table_t::key_type k(*(npl_mac_qos_mapping_table_t::key_type*)key);
            npl_mac_qos_mapping_table_t::value_type v(*(npl_mac_qos_mapping_table_t::value_type*)value);
            npl_mac_qos_mapping_table_t::entry_pointer_type entry_pointer;
            return mac_qos_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_relay_g_ipv4_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_relay_g_ipv4_table_t::key_type k(*(npl_mac_relay_g_ipv4_table_t::key_type*)key);
            npl_mac_relay_g_ipv4_table_t::value_type v(*(npl_mac_relay_g_ipv4_table_t::value_type*)value);
            npl_mac_relay_g_ipv4_table_t::entry_pointer_type entry_pointer;
            return mac_relay_g_ipv4_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_relay_g_ipv6_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_relay_g_ipv6_table_t::key_type k(*(npl_mac_relay_g_ipv6_table_t::key_type*)key);
            npl_mac_relay_g_ipv6_table_t::value_type v(*(npl_mac_relay_g_ipv6_table_t::value_type*)value);
            npl_mac_relay_g_ipv6_table_t::entry_pointer_type entry_pointer;
            return mac_relay_g_ipv6_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_relay_to_vni_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_relay_to_vni_table_t::key_type k(*(npl_mac_relay_to_vni_table_t::key_type*)key);
            npl_mac_relay_to_vni_table_t::value_type v(*(npl_mac_relay_to_vni_table_t::value_type*)value);
            npl_mac_relay_to_vni_table_t::entry_pointer_type entry_pointer;
            return mac_relay_to_vni_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_termination_em_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_termination_em_table_t::key_type k(*(npl_mac_termination_em_table_t::key_type*)key);
            npl_mac_termination_em_table_t::value_type v(*(npl_mac_termination_em_table_t::value_type*)value);
            npl_mac_termination_em_table_t::entry_pointer_type entry_pointer;
            return mac_termination_em_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_termination_no_da_em_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_termination_no_da_em_table_t::key_type k(*(npl_mac_termination_no_da_em_table_t::key_type*)key);
            npl_mac_termination_no_da_em_table_t::value_type v(*(npl_mac_termination_no_da_em_table_t::value_type*)value);
            npl_mac_termination_no_da_em_table_t::entry_pointer_type entry_pointer;
            return mac_termination_no_da_em_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "map_ene_subcode_to8bit_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_ene_subcode_to8bit_static_table_t::key_type k(*(npl_map_ene_subcode_to8bit_static_table_t::key_type*)key);
            npl_map_ene_subcode_to8bit_static_table_t::value_type v(*(npl_map_ene_subcode_to8bit_static_table_t::value_type*)value);
            npl_map_ene_subcode_to8bit_static_table_t::entry_pointer_type entry_pointer;
            return map_ene_subcode_to8bit_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "map_more_labels_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_more_labels_static_table_t::key_type k(*(npl_map_more_labels_static_table_t::key_type*)key);
            npl_map_more_labels_static_table_t::value_type v(*(npl_map_more_labels_static_table_t::value_type*)value);
            npl_map_more_labels_static_table_t::entry_pointer_type entry_pointer;
            return map_more_labels_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "map_recyle_tx_to_rx_data_on_pd_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::key_type k(*(npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::key_type*)key);
            npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::value_type v(*(npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::value_type*)value);
            npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::entry_pointer_type entry_pointer;
            return map_recyle_tx_to_rx_data_on_pd_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "map_tm_dp_ecn_to_wa_ecn_dp_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::key_type k(*(npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::key_type*)key);
            npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::value_type v(*(npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::value_type*)value);
            npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::entry_pointer_type entry_pointer;
            return map_tm_dp_ecn_to_wa_ecn_dp_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mc_bitmap_base_voq_lookup_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_bitmap_base_voq_lookup_table_t::key_type k(*(npl_mc_bitmap_base_voq_lookup_table_t::key_type*)key);
            npl_mc_bitmap_base_voq_lookup_table_t::value_type v(*(npl_mc_bitmap_base_voq_lookup_table_t::value_type*)value);
            npl_mc_bitmap_base_voq_lookup_table_t::entry_pointer_type entry_pointer;
            return mc_bitmap_base_voq_lookup_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mc_bitmap_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_bitmap_tc_map_table_t::key_type k(*(npl_mc_bitmap_tc_map_table_t::key_type*)key);
            npl_mc_bitmap_tc_map_table_t::value_type v(*(npl_mc_bitmap_tc_map_table_t::value_type*)value);
            npl_mc_bitmap_tc_map_table_t::entry_pointer_type entry_pointer;
            return mc_bitmap_tc_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mc_copy_id_map") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_copy_id_map_t::key_type k(*(npl_mc_copy_id_map_t::key_type*)key);
            npl_mc_copy_id_map_t::value_type v(*(npl_mc_copy_id_map_t::value_type*)value);
            npl_mc_copy_id_map_t::entry_pointer_type entry_pointer;
            return mc_copy_id_map[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mc_cud_is_wide_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_cud_is_wide_table_t::key_type k(*(npl_mc_cud_is_wide_table_t::key_type*)key);
            npl_mc_cud_is_wide_table_t::value_type v(*(npl_mc_cud_is_wide_table_t::value_type*)value);
            npl_mc_cud_is_wide_table_t::entry_pointer_type entry_pointer;
            return mc_cud_is_wide_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mc_em_db") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_em_db_t::key_type k(*(npl_mc_em_db_t::key_type*)key);
            npl_mc_em_db_t::value_type v(*(npl_mc_em_db_t::value_type*)value);
            npl_mc_em_db_t::entry_pointer_type entry_pointer;
            return mc_em_db[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mc_emdb_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_emdb_tc_map_table_t::key_type k(*(npl_mc_emdb_tc_map_table_t::key_type*)key);
            npl_mc_emdb_tc_map_table_t::value_type v(*(npl_mc_emdb_tc_map_table_t::value_type*)value);
            npl_mc_emdb_tc_map_table_t::entry_pointer_type entry_pointer;
            return mc_emdb_tc_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mc_fe_links_bmp") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_fe_links_bmp_t::key_type k(*(npl_mc_fe_links_bmp_t::key_type*)key);
            npl_mc_fe_links_bmp_t::value_type v(*(npl_mc_fe_links_bmp_t::value_type*)value);
            npl_mc_fe_links_bmp_t::entry_pointer_type entry_pointer;
            return mc_fe_links_bmp[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mc_ibm_cud_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_ibm_cud_mapping_table_t::key_type k(*(npl_mc_ibm_cud_mapping_table_t::key_type*)key);
            npl_mc_ibm_cud_mapping_table_t::value_type v(*(npl_mc_ibm_cud_mapping_table_t::value_type*)value);
            npl_mc_ibm_cud_mapping_table_t::entry_pointer_type entry_pointer;
            return mc_ibm_cud_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mc_slice_bitmap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_slice_bitmap_table_t::key_type k(*(npl_mc_slice_bitmap_table_t::key_type*)key);
            npl_mc_slice_bitmap_table_t::value_type v(*(npl_mc_slice_bitmap_table_t::value_type*)value);
            npl_mc_slice_bitmap_table_t::entry_pointer_type entry_pointer;
            return mc_slice_bitmap_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mep_address_prefix_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mep_address_prefix_table_t::key_type k(*(npl_mep_address_prefix_table_t::key_type*)key);
            npl_mep_address_prefix_table_t::value_type v(*(npl_mep_address_prefix_table_t::value_type*)value);
            npl_mep_address_prefix_table_t::entry_pointer_type entry_pointer;
            return mep_address_prefix_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mii_loopback_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mii_loopback_table_t::key_type k(*(npl_mii_loopback_table_t::key_type*)key);
            npl_mii_loopback_table_t::value_type v(*(npl_mii_loopback_table_t::value_type*)value);
            npl_mii_loopback_table_t::entry_pointer_type entry_pointer;
            return mii_loopback_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mirror_code_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mirror_code_hw_table_t::key_type k(*(npl_mirror_code_hw_table_t::key_type*)key);
            npl_mirror_code_hw_table_t::value_type v(*(npl_mirror_code_hw_table_t::value_type*)value);
            npl_mirror_code_hw_table_t::entry_pointer_type entry_pointer;
            return mirror_code_hw_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mirror_egress_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mirror_egress_attributes_table_t::key_type k(*(npl_mirror_egress_attributes_table_t::key_type*)key);
            npl_mirror_egress_attributes_table_t::value_type v(*(npl_mirror_egress_attributes_table_t::value_type*)value);
            npl_mirror_egress_attributes_table_t::entry_pointer_type entry_pointer;
            return mirror_egress_attributes_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mirror_to_dsp_in_npu_soft_header_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mirror_to_dsp_in_npu_soft_header_table_t::key_type k(*(npl_mirror_to_dsp_in_npu_soft_header_table_t::key_type*)key);
            npl_mirror_to_dsp_in_npu_soft_header_table_t::value_type v(*(npl_mirror_to_dsp_in_npu_soft_header_table_t::value_type*)value);
            npl_mirror_to_dsp_in_npu_soft_header_table_t::entry_pointer_type entry_pointer;
            return mirror_to_dsp_in_npu_soft_header_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mldp_protection_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mldp_protection_table_t::key_type k(*(npl_mldp_protection_table_t::key_type*)key);
            npl_mldp_protection_table_t::value_type v(*(npl_mldp_protection_table_t::value_type*)value);
            npl_mldp_protection_table_t::entry_pointer_type entry_pointer;
            return mldp_protection_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mp_aux_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mp_aux_data_table_t::key_type k(*(npl_mp_aux_data_table_t::key_type*)key);
            npl_mp_aux_data_table_t::value_type v(*(npl_mp_aux_data_table_t::value_type*)value);
            npl_mp_aux_data_table_t::entry_pointer_type entry_pointer;
            return mp_aux_data_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mp_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mp_data_table_t::key_type k(*(npl_mp_data_table_t::key_type*)key);
            npl_mp_data_table_t::value_type v(*(npl_mp_data_table_t::value_type*)value);
            npl_mp_data_table_t::entry_pointer_type entry_pointer;
            return mp_data_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_encap_control_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_encap_control_static_table_t::key_type k(*(npl_mpls_encap_control_static_table_t::key_type*)key);
            npl_mpls_encap_control_static_table_t::value_type v(*(npl_mpls_encap_control_static_table_t::value_type*)value);
            npl_mpls_encap_control_static_table_t::entry_pointer_type entry_pointer;
            return mpls_encap_control_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_forwarding_table_t::key_type k(*(npl_mpls_forwarding_table_t::key_type*)key);
            npl_mpls_forwarding_table_t::value_type v(*(npl_mpls_forwarding_table_t::value_type*)value);
            npl_mpls_forwarding_table_t::entry_pointer_type entry_pointer;
            return mpls_forwarding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_header_offset_in_bytes_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_header_offset_in_bytes_static_table_t::key_type k(*(npl_mpls_header_offset_in_bytes_static_table_t::key_type*)key);
            npl_mpls_header_offset_in_bytes_static_table_t::value_type v(*(npl_mpls_header_offset_in_bytes_static_table_t::value_type*)value);
            npl_mpls_header_offset_in_bytes_static_table_t::entry_pointer_type entry_pointer;
            return mpls_header_offset_in_bytes_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_l3_lsp_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_l3_lsp_static_table_t::key_type k(*(npl_mpls_l3_lsp_static_table_t::key_type*)key);
            npl_mpls_l3_lsp_static_table_t::value_type v(*(npl_mpls_l3_lsp_static_table_t::value_type*)value);
            npl_mpls_l3_lsp_static_table_t::entry_pointer_type entry_pointer;
            return mpls_l3_lsp_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_labels_1_to_4_jump_offset_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_labels_1_to_4_jump_offset_static_table_t::key_type k(*(npl_mpls_labels_1_to_4_jump_offset_static_table_t::key_type*)key);
            npl_mpls_labels_1_to_4_jump_offset_static_table_t::value_type v(*(npl_mpls_labels_1_to_4_jump_offset_static_table_t::value_type*)value);
            npl_mpls_labels_1_to_4_jump_offset_static_table_t::entry_pointer_type entry_pointer;
            return mpls_labels_1_to_4_jump_offset_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_lsp_labels_config_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_lsp_labels_config_static_table_t::key_type k(*(npl_mpls_lsp_labels_config_static_table_t::key_type*)key);
            npl_mpls_lsp_labels_config_static_table_t::value_type v(*(npl_mpls_lsp_labels_config_static_table_t::value_type*)value);
            npl_mpls_lsp_labels_config_static_table_t::entry_pointer_type entry_pointer;
            return mpls_lsp_labels_config_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_qos_mapping_table_t::key_type k(*(npl_mpls_qos_mapping_table_t::key_type*)key);
            npl_mpls_qos_mapping_table_t::value_type v(*(npl_mpls_qos_mapping_table_t::value_type*)value);
            npl_mpls_qos_mapping_table_t::entry_pointer_type entry_pointer;
            return mpls_qos_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_termination_em0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_termination_em0_table_t::key_type k(*(npl_mpls_termination_em0_table_t::key_type*)key);
            npl_mpls_termination_em0_table_t::value_type v(*(npl_mpls_termination_em0_table_t::value_type*)value);
            npl_mpls_termination_em0_table_t::entry_pointer_type entry_pointer;
            return mpls_termination_em0_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_termination_em1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_termination_em1_table_t::key_type k(*(npl_mpls_termination_em1_table_t::key_type*)key);
            npl_mpls_termination_em1_table_t::value_type v(*(npl_mpls_termination_em1_table_t::value_type*)value);
            npl_mpls_termination_em1_table_t::entry_pointer_type entry_pointer;
            return mpls_termination_em1_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ms_voq_fabric_context_offset_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ms_voq_fabric_context_offset_table_t::key_type k(*(npl_ms_voq_fabric_context_offset_table_t::key_type*)key);
            npl_ms_voq_fabric_context_offset_table_t::value_type v(*(npl_ms_voq_fabric_context_offset_table_t::value_type*)value);
            npl_ms_voq_fabric_context_offset_table_t::entry_pointer_type entry_pointer;
            return ms_voq_fabric_context_offset_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_ce_ptr_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_ce_ptr_table_t::key_type k(*(npl_native_ce_ptr_table_t::key_type*)key);
            npl_native_ce_ptr_table_t::value_type v(*(npl_native_ce_ptr_table_t::value_type*)value);
            npl_native_ce_ptr_table_t::entry_pointer_type entry_pointer;
            return native_ce_ptr_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_fec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_fec_table_t::key_type k(*(npl_native_fec_table_t::key_type*)key);
            npl_native_fec_table_t::value_type v(*(npl_native_fec_table_t::value_type*)value);
            npl_native_fec_table_t::entry_pointer_type entry_pointer;
            return native_fec_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_fec_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_fec_type_decoding_table_t::key_type k(*(npl_native_fec_type_decoding_table_t::key_type*)key);
            npl_native_fec_type_decoding_table_t::value_type v(*(npl_native_fec_type_decoding_table_t::value_type*)value);
            npl_native_fec_type_decoding_table_t::entry_pointer_type entry_pointer;
            return native_fec_type_decoding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_frr_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_frr_table_t::key_type k(*(npl_native_frr_table_t::key_type*)key);
            npl_native_frr_table_t::value_type v(*(npl_native_frr_table_t::value_type*)value);
            npl_native_frr_table_t::entry_pointer_type entry_pointer;
            return native_frr_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_frr_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_frr_type_decoding_table_t::key_type k(*(npl_native_frr_type_decoding_table_t::key_type*)key);
            npl_native_frr_type_decoding_table_t::value_type v(*(npl_native_frr_type_decoding_table_t::value_type*)value);
            npl_native_frr_type_decoding_table_t::entry_pointer_type entry_pointer;
            return native_frr_type_decoding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_l2_lp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_l2_lp_table_t::key_type k(*(npl_native_l2_lp_table_t::key_type*)key);
            npl_native_l2_lp_table_t::value_type v(*(npl_native_l2_lp_table_t::value_type*)value);
            npl_native_l2_lp_table_t::entry_pointer_type entry_pointer;
            return native_l2_lp_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_l2_lp_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_l2_lp_type_decoding_table_t::key_type k(*(npl_native_l2_lp_type_decoding_table_t::key_type*)key);
            npl_native_l2_lp_type_decoding_table_t::value_type v(*(npl_native_l2_lp_type_decoding_table_t::value_type*)value);
            npl_native_l2_lp_type_decoding_table_t::entry_pointer_type entry_pointer;
            return native_l2_lp_type_decoding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lb_group_size_table_t::key_type k(*(npl_native_lb_group_size_table_t::key_type*)key);
            npl_native_lb_group_size_table_t::value_type v(*(npl_native_lb_group_size_table_t::value_type*)value);
            npl_native_lb_group_size_table_t::entry_pointer_type entry_pointer;
            return native_lb_group_size_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lb_table_t::key_type k(*(npl_native_lb_table_t::key_type*)key);
            npl_native_lb_table_t::value_type v(*(npl_native_lb_table_t::value_type*)value);
            npl_native_lb_table_t::entry_pointer_type entry_pointer;
            return native_lb_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lb_type_decoding_table_t::key_type k(*(npl_native_lb_type_decoding_table_t::key_type*)key);
            npl_native_lb_type_decoding_table_t::value_type v(*(npl_native_lb_type_decoding_table_t::value_type*)value);
            npl_native_lb_type_decoding_table_t::entry_pointer_type entry_pointer;
            return native_lb_type_decoding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_lp_is_pbts_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lp_is_pbts_prefix_table_t::key_type k(*(npl_native_lp_is_pbts_prefix_table_t::key_type*)key);
            npl_native_lp_is_pbts_prefix_table_t::value_type v(*(npl_native_lp_is_pbts_prefix_table_t::value_type*)value);
            npl_native_lp_is_pbts_prefix_table_t::entry_pointer_type entry_pointer;
            return native_lp_is_pbts_prefix_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_lp_pbts_map_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lp_pbts_map_table_t::key_type k(*(npl_native_lp_pbts_map_table_t::key_type*)key);
            npl_native_lp_pbts_map_table_t::value_type v(*(npl_native_lp_pbts_map_table_t::value_type*)value);
            npl_native_lp_pbts_map_table_t::entry_pointer_type entry_pointer;
            return native_lp_pbts_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "native_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_protection_table_t::key_type k(*(npl_native_protection_table_t::key_type*)key);
            npl_native_protection_table_t::value_type v(*(npl_native_protection_table_t::value_type*)value);
            npl_native_protection_table_t::entry_pointer_type entry_pointer;
            return native_protection_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "next_header_1_is_l4_over_ipv4_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_next_header_1_is_l4_over_ipv4_static_table_t::key_type k(*(npl_next_header_1_is_l4_over_ipv4_static_table_t::key_type*)key);
            npl_next_header_1_is_l4_over_ipv4_static_table_t::value_type v(*(npl_next_header_1_is_l4_over_ipv4_static_table_t::value_type*)value);
            npl_next_header_1_is_l4_over_ipv4_static_table_t::entry_pointer_type entry_pointer;
            return next_header_1_is_l4_over_ipv4_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "nh_macro_code_to_id_l6_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_nh_macro_code_to_id_l6_static_table_t::key_type k(*(npl_nh_macro_code_to_id_l6_static_table_t::key_type*)key);
            npl_nh_macro_code_to_id_l6_static_table_t::value_type v(*(npl_nh_macro_code_to_id_l6_static_table_t::value_type*)value);
            npl_nh_macro_code_to_id_l6_static_table_t::entry_pointer_type entry_pointer;
            return nh_macro_code_to_id_l6_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "nhlfe_type_mapping_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_nhlfe_type_mapping_static_table_t::key_type k(*(npl_nhlfe_type_mapping_static_table_t::key_type*)key);
            npl_nhlfe_type_mapping_static_table_t::value_type v(*(npl_nhlfe_type_mapping_static_table_t::value_type*)value);
            npl_nhlfe_type_mapping_static_table_t::entry_pointer_type entry_pointer;
            return nhlfe_type_mapping_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "nw_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_nw_smcid_threshold_table_t::key_type k(*(npl_nw_smcid_threshold_table_t::key_type*)key);
            npl_nw_smcid_threshold_table_t::value_type v(*(npl_nw_smcid_threshold_table_t::value_type*)value);
            npl_nw_smcid_threshold_table_t::entry_pointer_type entry_pointer;
            return nw_smcid_threshold_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "oamp_drop_destination_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_drop_destination_static_table_t::key_type k(*(npl_oamp_drop_destination_static_table_t::key_type*)key);
            npl_oamp_drop_destination_static_table_t::value_type v(*(npl_oamp_drop_destination_static_table_t::value_type*)value);
            npl_oamp_drop_destination_static_table_t::entry_pointer_type entry_pointer;
            return oamp_drop_destination_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "oamp_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_event_queue_table_t::key_type k(*(npl_oamp_event_queue_table_t::key_type*)key);
            npl_oamp_event_queue_table_t::value_type v(*(npl_oamp_event_queue_table_t::value_type*)value);
            npl_oamp_event_queue_table_t::entry_pointer_type entry_pointer;
            return oamp_event_queue_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "oamp_redirect_get_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_get_counter_table_t::key_type k(*(npl_oamp_redirect_get_counter_table_t::key_type*)key);
            npl_oamp_redirect_get_counter_table_t::value_type v(*(npl_oamp_redirect_get_counter_table_t::value_type*)value);
            npl_oamp_redirect_get_counter_table_t::entry_pointer_type entry_pointer;
            return oamp_redirect_get_counter_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_1_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_1_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_1_table_t::key_type*)key);
            npl_oamp_redirect_punt_eth_hdr_1_table_t::value_type v(*(npl_oamp_redirect_punt_eth_hdr_1_table_t::value_type*)value);
            npl_oamp_redirect_punt_eth_hdr_1_table_t::entry_pointer_type entry_pointer;
            return oamp_redirect_punt_eth_hdr_1_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_2_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_2_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_2_table_t::key_type*)key);
            npl_oamp_redirect_punt_eth_hdr_2_table_t::value_type v(*(npl_oamp_redirect_punt_eth_hdr_2_table_t::value_type*)value);
            npl_oamp_redirect_punt_eth_hdr_2_table_t::entry_pointer_type entry_pointer;
            return oamp_redirect_punt_eth_hdr_2_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_3_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_3_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_3_table_t::key_type*)key);
            npl_oamp_redirect_punt_eth_hdr_3_table_t::value_type v(*(npl_oamp_redirect_punt_eth_hdr_3_table_t::value_type*)value);
            npl_oamp_redirect_punt_eth_hdr_3_table_t::entry_pointer_type entry_pointer;
            return oamp_redirect_punt_eth_hdr_3_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_4_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_4_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_4_table_t::key_type*)key);
            npl_oamp_redirect_punt_eth_hdr_4_table_t::value_type v(*(npl_oamp_redirect_punt_eth_hdr_4_table_t::value_type*)value);
            npl_oamp_redirect_punt_eth_hdr_4_table_t::entry_pointer_type entry_pointer;
            return oamp_redirect_punt_eth_hdr_4_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "oamp_redirect_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_table_t::key_type k(*(npl_oamp_redirect_table_t::key_type*)key);
            npl_oamp_redirect_table_t::value_type v(*(npl_oamp_redirect_table_t::value_type*)value);
            npl_oamp_redirect_table_t::entry_pointer_type entry_pointer;
            return oamp_redirect_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "outer_tpid_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_outer_tpid_table_t::key_type k(*(npl_outer_tpid_table_t::key_type*)key);
            npl_outer_tpid_table_t::value_type v(*(npl_outer_tpid_table_t::value_type*)value);
            npl_outer_tpid_table_t::entry_pointer_type entry_pointer;
            return outer_tpid_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "overlay_ipv4_sip_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_overlay_ipv4_sip_table_t::key_type k(*(npl_overlay_ipv4_sip_table_t::key_type*)key);
            npl_overlay_ipv4_sip_table_t::value_type v(*(npl_overlay_ipv4_sip_table_t::value_type*)value);
            npl_overlay_ipv4_sip_table_t::entry_pointer_type entry_pointer;
            return overlay_ipv4_sip_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "path_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lb_type_decoding_table_t::key_type k(*(npl_path_lb_type_decoding_table_t::key_type*)key);
            npl_path_lb_type_decoding_table_t::value_type v(*(npl_path_lb_type_decoding_table_t::value_type*)value);
            npl_path_lb_type_decoding_table_t::entry_pointer_type entry_pointer;
            return path_lb_type_decoding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "path_lp_is_pbts_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_is_pbts_prefix_table_t::key_type k(*(npl_path_lp_is_pbts_prefix_table_t::key_type*)key);
            npl_path_lp_is_pbts_prefix_table_t::value_type v(*(npl_path_lp_is_pbts_prefix_table_t::value_type*)value);
            npl_path_lp_is_pbts_prefix_table_t::entry_pointer_type entry_pointer;
            return path_lp_is_pbts_prefix_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "path_lp_pbts_map_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_pbts_map_table_t::key_type k(*(npl_path_lp_pbts_map_table_t::key_type*)key);
            npl_path_lp_pbts_map_table_t::value_type v(*(npl_path_lp_pbts_map_table_t::value_type*)value);
            npl_path_lp_pbts_map_table_t::entry_pointer_type entry_pointer;
            return path_lp_pbts_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "path_lp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_table_t::key_type k(*(npl_path_lp_table_t::key_type*)key);
            npl_path_lp_table_t::value_type v(*(npl_path_lp_table_t::value_type*)value);
            npl_path_lp_table_t::entry_pointer_type entry_pointer;
            return path_lp_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "path_lp_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_type_decoding_table_t::key_type k(*(npl_path_lp_type_decoding_table_t::key_type*)key);
            npl_path_lp_type_decoding_table_t::value_type v(*(npl_path_lp_type_decoding_table_t::value_type*)value);
            npl_path_lp_type_decoding_table_t::entry_pointer_type entry_pointer;
            return path_lp_type_decoding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "path_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_protection_table_t::key_type k(*(npl_path_protection_table_t::key_type*)key);
            npl_path_protection_table_t::value_type v(*(npl_path_protection_table_t::value_type*)value);
            npl_path_protection_table_t::entry_pointer_type entry_pointer;
            return path_protection_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pdoq_oq_ifc_mapping") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pdoq_oq_ifc_mapping_t::key_type k(*(npl_pdoq_oq_ifc_mapping_t::key_type*)key);
            npl_pdoq_oq_ifc_mapping_t::value_type v(*(npl_pdoq_oq_ifc_mapping_t::value_type*)value);
            npl_pdoq_oq_ifc_mapping_t::entry_pointer_type entry_pointer;
            return pdoq_oq_ifc_mapping[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pdvoq_bank_pair_offset_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pdvoq_bank_pair_offset_table_t::key_type k(*(npl_pdvoq_bank_pair_offset_table_t::key_type*)key);
            npl_pdvoq_bank_pair_offset_table_t::value_type v(*(npl_pdvoq_bank_pair_offset_table_t::value_type*)value);
            npl_pdvoq_bank_pair_offset_table_t::entry_pointer_type entry_pointer;
            return pdvoq_bank_pair_offset_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pdvoq_slice_voq_properties_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pdvoq_slice_voq_properties_table_t::key_type k(*(npl_pdvoq_slice_voq_properties_table_t::key_type*)key);
            npl_pdvoq_slice_voq_properties_table_t::value_type v(*(npl_pdvoq_slice_voq_properties_table_t::value_type*)value);
            npl_pdvoq_slice_voq_properties_table_t::entry_pointer_type entry_pointer;
            return pdvoq_slice_voq_properties_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "per_asbr_and_dpe_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_asbr_and_dpe_table_t::key_type k(*(npl_per_asbr_and_dpe_table_t::key_type*)key);
            npl_per_asbr_and_dpe_table_t::value_type v(*(npl_per_asbr_and_dpe_table_t::value_type*)value);
            npl_per_asbr_and_dpe_table_t::entry_pointer_type entry_pointer;
            return per_asbr_and_dpe_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "per_pe_and_prefix_vpn_key_large_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_pe_and_prefix_vpn_key_large_table_t::key_type k(*(npl_per_pe_and_prefix_vpn_key_large_table_t::key_type*)key);
            npl_per_pe_and_prefix_vpn_key_large_table_t::value_type v(*(npl_per_pe_and_prefix_vpn_key_large_table_t::value_type*)value);
            npl_per_pe_and_prefix_vpn_key_large_table_t::entry_pointer_type entry_pointer;
            return per_pe_and_prefix_vpn_key_large_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "per_pe_and_vrf_vpn_key_large_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_pe_and_vrf_vpn_key_large_table_t::key_type k(*(npl_per_pe_and_vrf_vpn_key_large_table_t::key_type*)key);
            npl_per_pe_and_vrf_vpn_key_large_table_t::value_type v(*(npl_per_pe_and_vrf_vpn_key_large_table_t::value_type*)value);
            npl_per_pe_and_vrf_vpn_key_large_table_t::entry_pointer_type entry_pointer;
            return per_pe_and_vrf_vpn_key_large_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "per_port_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_port_destination_table_t::key_type k(*(npl_per_port_destination_table_t::key_type*)key);
            npl_per_port_destination_table_t::value_type v(*(npl_per_port_destination_table_t::value_type*)value);
            npl_per_port_destination_table_t::entry_pointer_type entry_pointer;
            return per_port_destination_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "per_vrf_mpls_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_vrf_mpls_forwarding_table_t::key_type k(*(npl_per_vrf_mpls_forwarding_table_t::key_type*)key);
            npl_per_vrf_mpls_forwarding_table_t::value_type v(*(npl_per_vrf_mpls_forwarding_table_t::value_type*)value);
            npl_per_vrf_mpls_forwarding_table_t::entry_pointer_type entry_pointer;
            return per_vrf_mpls_forwarding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pfc_destination_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_destination_table_t::key_type k(*(npl_pfc_destination_table_t::key_type*)key);
            npl_pfc_destination_table_t::value_type v(*(npl_pfc_destination_table_t::value_type*)value);
            npl_pfc_destination_table_t::entry_pointer_type entry_pointer;
            return pfc_destination_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pfc_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_event_queue_table_t::key_type k(*(npl_pfc_event_queue_table_t::key_type*)key);
            npl_pfc_event_queue_table_t::value_type v(*(npl_pfc_event_queue_table_t::value_type*)value);
            npl_pfc_event_queue_table_t::entry_pointer_type entry_pointer;
            return pfc_event_queue_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pfc_tc_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_tc_table_t::key_type k(*(npl_pfc_tc_table_t::key_type*)key);
            npl_pfc_tc_table_t::value_type v(*(npl_pfc_tc_table_t::value_type*)value);
            npl_pfc_tc_table_t::entry_pointer_type entry_pointer;
            return pfc_tc_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pfc_vector_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_vector_static_table_t::key_type k(*(npl_pfc_vector_static_table_t::key_type*)key);
            npl_pfc_vector_static_table_t::value_type v(*(npl_pfc_vector_static_table_t::value_type*)value);
            npl_pfc_vector_static_table_t::entry_pointer_type entry_pointer;
            return pfc_vector_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pin_start_offset_macros") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pin_start_offset_macros_t::key_type k(*(npl_pin_start_offset_macros_t::key_type*)key);
            npl_pin_start_offset_macros_t::value_type v(*(npl_pin_start_offset_macros_t::value_type*)value);
            npl_pin_start_offset_macros_t::entry_pointer_type entry_pointer;
            return pin_start_offset_macros[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pma_loopback_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pma_loopback_table_t::key_type k(*(npl_pma_loopback_table_t::key_type*)key);
            npl_pma_loopback_table_t::value_type v(*(npl_pma_loopback_table_t::value_type*)value);
            npl_pma_loopback_table_t::entry_pointer_type entry_pointer;
            return pma_loopback_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "port_dspa_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_dspa_group_size_table_t::key_type k(*(npl_port_dspa_group_size_table_t::key_type*)key);
            npl_port_dspa_group_size_table_t::value_type v(*(npl_port_dspa_group_size_table_t::value_type*)value);
            npl_port_dspa_group_size_table_t::entry_pointer_type entry_pointer;
            return port_dspa_group_size_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "port_dspa_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_dspa_table_t::key_type k(*(npl_port_dspa_table_t::key_type*)key);
            npl_port_dspa_table_t::value_type v(*(npl_port_dspa_table_t::value_type*)value);
            npl_port_dspa_table_t::entry_pointer_type entry_pointer;
            return port_dspa_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "port_dspa_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_dspa_type_decoding_table_t::key_type k(*(npl_port_dspa_type_decoding_table_t::key_type*)key);
            npl_port_dspa_type_decoding_table_t::value_type v(*(npl_port_dspa_type_decoding_table_t::value_type*)value);
            npl_port_dspa_type_decoding_table_t::entry_pointer_type entry_pointer;
            return port_dspa_type_decoding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "port_npp_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_npp_protection_table_t::key_type k(*(npl_port_npp_protection_table_t::key_type*)key);
            npl_port_npp_protection_table_t::value_type v(*(npl_port_npp_protection_table_t::value_type*)value);
            npl_port_npp_protection_table_t::entry_pointer_type entry_pointer;
            return port_npp_protection_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "port_npp_protection_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_npp_protection_type_decoding_table_t::key_type k(*(npl_port_npp_protection_type_decoding_table_t::key_type*)key);
            npl_port_npp_protection_type_decoding_table_t::value_type v(*(npl_port_npp_protection_type_decoding_table_t::value_type*)value);
            npl_port_npp_protection_type_decoding_table_t::entry_pointer_type entry_pointer;
            return port_npp_protection_type_decoding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "port_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_protection_table_t::key_type k(*(npl_port_protection_table_t::key_type*)key);
            npl_port_protection_table_t::value_type v(*(npl_port_protection_table_t::value_type*)value);
            npl_port_protection_table_t::entry_pointer_type entry_pointer;
            return port_protection_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "punt_rcy_inject_header_ene_encap_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_rcy_inject_header_ene_encap_table_t::key_type k(*(npl_punt_rcy_inject_header_ene_encap_table_t::key_type*)key);
            npl_punt_rcy_inject_header_ene_encap_table_t::value_type v(*(npl_punt_rcy_inject_header_ene_encap_table_t::value_type*)value);
            npl_punt_rcy_inject_header_ene_encap_table_t::entry_pointer_type entry_pointer;
            return punt_rcy_inject_header_ene_encap_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "punt_select_nw_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_select_nw_ene_static_table_t::key_type k(*(npl_punt_select_nw_ene_static_table_t::key_type*)key);
            npl_punt_select_nw_ene_static_table_t::value_type v(*(npl_punt_select_nw_ene_static_table_t::value_type*)value);
            npl_punt_select_nw_ene_static_table_t::entry_pointer_type entry_pointer;
            return punt_select_nw_ene_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_encap_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_tunnel_transport_encap_table_t::key_type k(*(npl_punt_tunnel_transport_encap_table_t::key_type*)key);
            npl_punt_tunnel_transport_encap_table_t::value_type v(*(npl_punt_tunnel_transport_encap_table_t::value_type*)value);
            npl_punt_tunnel_transport_encap_table_t::entry_pointer_type entry_pointer;
            return punt_tunnel_transport_encap_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_extended_encap_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_tunnel_transport_extended_encap_table_t::key_type k(*(npl_punt_tunnel_transport_extended_encap_table_t::key_type*)key);
            npl_punt_tunnel_transport_extended_encap_table_t::value_type v(*(npl_punt_tunnel_transport_extended_encap_table_t::value_type*)value);
            npl_punt_tunnel_transport_extended_encap_table_t::entry_pointer_type entry_pointer;
            return punt_tunnel_transport_extended_encap_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_extended_encap_table2") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_tunnel_transport_extended_encap_table2_t::key_type k(*(npl_punt_tunnel_transport_extended_encap_table2_t::key_type*)key);
            npl_punt_tunnel_transport_extended_encap_table2_t::value_type v(*(npl_punt_tunnel_transport_extended_encap_table2_t::value_type*)value);
            npl_punt_tunnel_transport_extended_encap_table2_t::entry_pointer_type entry_pointer;
            return punt_tunnel_transport_extended_encap_table2[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pwe_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_label_table_t::key_type k(*(npl_pwe_label_table_t::key_type*)key);
            npl_pwe_label_table_t::value_type v(*(npl_pwe_label_table_t::value_type*)value);
            npl_pwe_label_table_t::entry_pointer_type entry_pointer;
            return pwe_label_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pwe_to_l3_dest_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_to_l3_dest_table_t::key_type k(*(npl_pwe_to_l3_dest_table_t::key_type*)key);
            npl_pwe_to_l3_dest_table_t::value_type v(*(npl_pwe_to_l3_dest_table_t::value_type*)value);
            npl_pwe_to_l3_dest_table_t::entry_pointer_type entry_pointer;
            return pwe_to_l3_dest_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pwe_vpls_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_vpls_label_table_t::key_type k(*(npl_pwe_vpls_label_table_t::key_type*)key);
            npl_pwe_vpls_label_table_t::value_type v(*(npl_pwe_vpls_label_table_t::value_type*)value);
            npl_pwe_vpls_label_table_t::entry_pointer_type entry_pointer;
            return pwe_vpls_label_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pwe_vpls_tunnel_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_vpls_tunnel_label_table_t::key_type k(*(npl_pwe_vpls_tunnel_label_table_t::key_type*)key);
            npl_pwe_vpls_tunnel_label_table_t::value_type v(*(npl_pwe_vpls_tunnel_label_table_t::value_type*)value);
            npl_pwe_vpls_tunnel_label_table_t::entry_pointer_type entry_pointer;
            return pwe_vpls_tunnel_label_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "reassembly_source_port_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_reassembly_source_port_map_table_t::key_type k(*(npl_reassembly_source_port_map_table_t::key_type*)key);
            npl_reassembly_source_port_map_table_t::value_type v(*(npl_reassembly_source_port_map_table_t::value_type*)value);
            npl_reassembly_source_port_map_table_t::entry_pointer_type entry_pointer;
            return reassembly_source_port_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "recycle_override_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_recycle_override_table_t::key_type k(*(npl_recycle_override_table_t::key_type*)key);
            npl_recycle_override_table_t::value_type v(*(npl_recycle_override_table_t::value_type*)value);
            npl_recycle_override_table_t::entry_pointer_type entry_pointer;
            return recycle_override_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "recycled_inject_up_info_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_recycled_inject_up_info_table_t::key_type k(*(npl_recycled_inject_up_info_table_t::key_type*)key);
            npl_recycled_inject_up_info_table_t::value_type v(*(npl_recycled_inject_up_info_table_t::value_type*)value);
            npl_recycled_inject_up_info_table_t::entry_pointer_type entry_pointer;
            return recycled_inject_up_info_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "redirect_destination_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_redirect_destination_table_t::key_type k(*(npl_redirect_destination_table_t::key_type*)key);
            npl_redirect_destination_table_t::value_type v(*(npl_redirect_destination_table_t::value_type*)value);
            npl_redirect_destination_table_t::entry_pointer_type entry_pointer;
            return redirect_destination_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "resolution_set_next_macro_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_resolution_set_next_macro_table_t::key_type k(*(npl_resolution_set_next_macro_table_t::key_type*)key);
            npl_resolution_set_next_macro_table_t::value_type v(*(npl_resolution_set_next_macro_table_t::value_type*)value);
            npl_resolution_set_next_macro_table_t::entry_pointer_type entry_pointer;
            return resolution_set_next_macro_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rewrite_sa_prefix_index_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rewrite_sa_prefix_index_table_t::key_type k(*(npl_rewrite_sa_prefix_index_table_t::key_type*)key);
            npl_rewrite_sa_prefix_index_table_t::value_type v(*(npl_rewrite_sa_prefix_index_table_t::value_type*)value);
            npl_rewrite_sa_prefix_index_table_t::entry_pointer_type entry_pointer;
            return rewrite_sa_prefix_index_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rmep_last_time_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rmep_last_time_table_t::key_type k(*(npl_rmep_last_time_table_t::key_type*)key);
            npl_rmep_last_time_table_t::value_type v(*(npl_rmep_last_time_table_t::value_type*)value);
            npl_rmep_last_time_table_t::entry_pointer_type entry_pointer;
            return rmep_last_time_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rmep_state_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rmep_state_table_t::key_type k(*(npl_rmep_state_table_t::key_type*)key);
            npl_rmep_state_table_t::value_type v(*(npl_rmep_state_table_t::value_type*)value);
            npl_rmep_state_table_t::entry_pointer_type entry_pointer;
            return rmep_state_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rpf_fec_access_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rpf_fec_access_map_table_t::key_type k(*(npl_rpf_fec_access_map_table_t::key_type*)key);
            npl_rpf_fec_access_map_table_t::value_type v(*(npl_rpf_fec_access_map_table_t::value_type*)value);
            npl_rpf_fec_access_map_table_t::entry_pointer_type entry_pointer;
            return rpf_fec_access_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rpf_fec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rpf_fec_table_t::key_type k(*(npl_rpf_fec_table_t::key_type*)key);
            npl_rpf_fec_table_t::value_type v(*(npl_rpf_fec_table_t::value_type*)value);
            npl_rpf_fec_table_t::entry_pointer_type entry_pointer;
            return rpf_fec_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_og_pcl_compress_bits_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::key_type k(*(npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::key_type*)key);
            npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::value_type v(*(npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::value_type*)value);
            npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::entry_pointer_type entry_pointer;
            return rtf_conf_set_to_og_pcl_compress_bits_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_og_pcl_ids_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::key_type k(*(npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::key_type*)key);
            npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::value_type v(*(npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::value_type*)value);
            npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::entry_pointer_type entry_pointer;
            return rtf_conf_set_to_og_pcl_ids_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_post_fwd_stage_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::key_type k(*(npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::key_type*)key);
            npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::value_type v(*(npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::value_type*)value);
            npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::entry_pointer_type entry_pointer;
            return rtf_conf_set_to_post_fwd_stage_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_counters_block_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_counters_block_config_table_t::key_type k(*(npl_rx_counters_block_config_table_t::key_type*)key);
            npl_rx_counters_block_config_table_t::value_type v(*(npl_rx_counters_block_config_table_t::value_type*)value);
            npl_rx_counters_block_config_table_t::entry_pointer_type entry_pointer;
            return rx_counters_block_config_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_fwd_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_fwd_error_handling_counter_table_t::key_type k(*(npl_rx_fwd_error_handling_counter_table_t::key_type*)key);
            npl_rx_fwd_error_handling_counter_table_t::value_type v(*(npl_rx_fwd_error_handling_counter_table_t::value_type*)value);
            npl_rx_fwd_error_handling_counter_table_t::entry_pointer_type entry_pointer;
            return rx_fwd_error_handling_counter_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_fwd_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_fwd_error_handling_destination_table_t::key_type k(*(npl_rx_fwd_error_handling_destination_table_t::key_type*)key);
            npl_rx_fwd_error_handling_destination_table_t::value_type v(*(npl_rx_fwd_error_handling_destination_table_t::value_type*)value);
            npl_rx_fwd_error_handling_destination_table_t::entry_pointer_type entry_pointer;
            return rx_fwd_error_handling_destination_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_ip_p_counter_offset_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_ip_p_counter_offset_static_table_t::key_type k(*(npl_rx_ip_p_counter_offset_static_table_t::key_type*)key);
            npl_rx_ip_p_counter_offset_static_table_t::value_type v(*(npl_rx_ip_p_counter_offset_static_table_t::value_type*)value);
            npl_rx_ip_p_counter_offset_static_table_t::entry_pointer_type entry_pointer;
            return rx_ip_p_counter_offset_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_map_npp_to_ssp_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_map_npp_to_ssp_table_t::key_type k(*(npl_rx_map_npp_to_ssp_table_t::key_type*)key);
            npl_rx_map_npp_to_ssp_table_t::value_type v(*(npl_rx_map_npp_to_ssp_table_t::value_type*)value);
            npl_rx_map_npp_to_ssp_table_t::entry_pointer_type entry_pointer;
            return rx_map_npp_to_ssp_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_attribute_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_block_meter_attribute_table_t::key_type k(*(npl_rx_meter_block_meter_attribute_table_t::key_type*)key);
            npl_rx_meter_block_meter_attribute_table_t::value_type v(*(npl_rx_meter_block_meter_attribute_table_t::value_type*)value);
            npl_rx_meter_block_meter_attribute_table_t::entry_pointer_type entry_pointer;
            return rx_meter_block_meter_attribute_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_block_meter_profile_table_t::key_type k(*(npl_rx_meter_block_meter_profile_table_t::key_type*)key);
            npl_rx_meter_block_meter_profile_table_t::value_type v(*(npl_rx_meter_block_meter_profile_table_t::value_type*)value);
            npl_rx_meter_block_meter_profile_table_t::entry_pointer_type entry_pointer;
            return rx_meter_block_meter_profile_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_block_meter_shaper_configuration_table_t::key_type k(*(npl_rx_meter_block_meter_shaper_configuration_table_t::key_type*)key);
            npl_rx_meter_block_meter_shaper_configuration_table_t::value_type v(*(npl_rx_meter_block_meter_shaper_configuration_table_t::value_type*)value);
            npl_rx_meter_block_meter_shaper_configuration_table_t::entry_pointer_type entry_pointer;
            return rx_meter_block_meter_shaper_configuration_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_meter_distributed_meter_profile_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_distributed_meter_profile_table_t::key_type k(*(npl_rx_meter_distributed_meter_profile_table_t::key_type*)key);
            npl_rx_meter_distributed_meter_profile_table_t::value_type v(*(npl_rx_meter_distributed_meter_profile_table_t::value_type*)value);
            npl_rx_meter_distributed_meter_profile_table_t::entry_pointer_type entry_pointer;
            return rx_meter_distributed_meter_profile_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_meter_exact_meter_decision_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_exact_meter_decision_mapping_table_t::key_type k(*(npl_rx_meter_exact_meter_decision_mapping_table_t::key_type*)key);
            npl_rx_meter_exact_meter_decision_mapping_table_t::value_type v(*(npl_rx_meter_exact_meter_decision_mapping_table_t::value_type*)value);
            npl_rx_meter_exact_meter_decision_mapping_table_t::entry_pointer_type entry_pointer;
            return rx_meter_exact_meter_decision_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_meter_meter_profile_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_meter_profile_table_t::key_type k(*(npl_rx_meter_meter_profile_table_t::key_type*)key);
            npl_rx_meter_meter_profile_table_t::value_type v(*(npl_rx_meter_meter_profile_table_t::value_type*)value);
            npl_rx_meter_meter_profile_table_t::entry_pointer_type entry_pointer;
            return rx_meter_meter_profile_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_meter_meter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_meter_shaper_configuration_table_t::key_type k(*(npl_rx_meter_meter_shaper_configuration_table_t::key_type*)key);
            npl_rx_meter_meter_shaper_configuration_table_t::value_type v(*(npl_rx_meter_meter_shaper_configuration_table_t::value_type*)value);
            npl_rx_meter_meter_shaper_configuration_table_t::entry_pointer_type entry_pointer;
            return rx_meter_meter_shaper_configuration_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_meter_meters_attribute_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_meters_attribute_table_t::key_type k(*(npl_rx_meter_meters_attribute_table_t::key_type*)key);
            npl_rx_meter_meters_attribute_table_t::value_type v(*(npl_rx_meter_meters_attribute_table_t::value_type*)value);
            npl_rx_meter_meters_attribute_table_t::entry_pointer_type entry_pointer;
            return rx_meter_meters_attribute_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_meter_rate_limiter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_rate_limiter_shaper_configuration_table_t::key_type k(*(npl_rx_meter_rate_limiter_shaper_configuration_table_t::key_type*)key);
            npl_rx_meter_rate_limiter_shaper_configuration_table_t::value_type v(*(npl_rx_meter_rate_limiter_shaper_configuration_table_t::value_type*)value);
            npl_rx_meter_rate_limiter_shaper_configuration_table_t::entry_pointer_type entry_pointer;
            return rx_meter_rate_limiter_shaper_configuration_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_meter_stat_meter_decision_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_stat_meter_decision_mapping_table_t::key_type k(*(npl_rx_meter_stat_meter_decision_mapping_table_t::key_type*)key);
            npl_rx_meter_stat_meter_decision_mapping_table_t::value_type v(*(npl_rx_meter_stat_meter_decision_mapping_table_t::value_type*)value);
            npl_rx_meter_stat_meter_decision_mapping_table_t::entry_pointer_type entry_pointer;
            return rx_meter_stat_meter_decision_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_npu_to_tm_dest_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_npu_to_tm_dest_table_t::key_type k(*(npl_rx_npu_to_tm_dest_table_t::key_type*)key);
            npl_rx_npu_to_tm_dest_table_t::value_type v(*(npl_rx_npu_to_tm_dest_table_t::value_type*)value);
            npl_rx_npu_to_tm_dest_table_t::entry_pointer_type entry_pointer;
            return rx_npu_to_tm_dest_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_obm_code_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_obm_code_table_t::key_type k(*(npl_rx_obm_code_table_t::key_type*)key);
            npl_rx_obm_code_table_t::value_type v(*(npl_rx_obm_code_table_t::value_type*)value);
            npl_rx_obm_code_table_t::entry_pointer_type entry_pointer;
            return rx_obm_code_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_obm_punt_src_and_code_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_obm_punt_src_and_code_table_t::key_type k(*(npl_rx_obm_punt_src_and_code_table_t::key_type*)key);
            npl_rx_obm_punt_src_and_code_table_t::value_type v(*(npl_rx_obm_punt_src_and_code_table_t::value_type*)value);
            npl_rx_obm_punt_src_and_code_table_t::entry_pointer_type entry_pointer;
            return rx_obm_punt_src_and_code_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_redirect_code_ext_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_redirect_code_ext_table_t::key_type k(*(npl_rx_redirect_code_ext_table_t::key_type*)key);
            npl_rx_redirect_code_ext_table_t::value_type v(*(npl_rx_redirect_code_ext_table_t::value_type*)value);
            npl_rx_redirect_code_ext_table_t::entry_pointer_type entry_pointer;
            return rx_redirect_code_ext_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_redirect_code_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_redirect_code_table_t::key_type k(*(npl_rx_redirect_code_table_t::key_type*)key);
            npl_rx_redirect_code_table_t::value_type v(*(npl_rx_redirect_code_table_t::value_type*)value);
            npl_rx_redirect_code_table_t::entry_pointer_type entry_pointer;
            return rx_redirect_code_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_term_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_term_error_handling_counter_table_t::key_type k(*(npl_rx_term_error_handling_counter_table_t::key_type*)key);
            npl_rx_term_error_handling_counter_table_t::value_type v(*(npl_rx_term_error_handling_counter_table_t::value_type*)value);
            npl_rx_term_error_handling_counter_table_t::entry_pointer_type entry_pointer;
            return rx_term_error_handling_counter_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_term_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_term_error_handling_destination_table_t::key_type k(*(npl_rx_term_error_handling_destination_table_t::key_type*)key);
            npl_rx_term_error_handling_destination_table_t::value_type v(*(npl_rx_term_error_handling_destination_table_t::value_type*)value);
            npl_rx_term_error_handling_destination_table_t::entry_pointer_type entry_pointer;
            return rx_term_error_handling_destination_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rxpdr_dsp_lookup_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rxpdr_dsp_lookup_table_t::key_type k(*(npl_rxpdr_dsp_lookup_table_t::key_type*)key);
            npl_rxpdr_dsp_lookup_table_t::value_type v(*(npl_rxpdr_dsp_lookup_table_t::value_type*)value);
            npl_rxpdr_dsp_lookup_table_t::entry_pointer_type entry_pointer;
            return rxpdr_dsp_lookup_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rxpdr_dsp_tc_map") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rxpdr_dsp_tc_map_t::key_type k(*(npl_rxpdr_dsp_tc_map_t::key_type*)key);
            npl_rxpdr_dsp_tc_map_t::value_type v(*(npl_rxpdr_dsp_tc_map_t::value_type*)value);
            npl_rxpdr_dsp_tc_map_t::entry_pointer_type entry_pointer;
            return rxpdr_dsp_tc_map[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "sch_oqse_cfg") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_sch_oqse_cfg_t::key_type k(*(npl_sch_oqse_cfg_t::key_type*)key);
            npl_sch_oqse_cfg_t::value_type v(*(npl_sch_oqse_cfg_t::value_type*)value);
            npl_sch_oqse_cfg_t::entry_pointer_type entry_pointer;
            return sch_oqse_cfg[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_lp_attributes_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_lp_attributes_table_t::key_type k(*(npl_service_lp_attributes_table_t::key_type*)key);
            npl_service_lp_attributes_table_t::value_type v(*(npl_service_lp_attributes_table_t::value_type*)value);
            npl_service_lp_attributes_table_t::entry_pointer_type entry_pointer;
            return service_lp_attributes_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_ac_port_table_t::key_type k(*(npl_service_mapping_em0_ac_port_table_t::key_type*)key);
            npl_service_mapping_em0_ac_port_table_t::value_type v(*(npl_service_mapping_em0_ac_port_table_t::value_type*)value);
            npl_service_mapping_em0_ac_port_table_t::entry_pointer_type entry_pointer;
            return service_mapping_em0_ac_port_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_ac_port_tag_table_t::key_type k(*(npl_service_mapping_em0_ac_port_tag_table_t::key_type*)key);
            npl_service_mapping_em0_ac_port_tag_table_t::value_type v(*(npl_service_mapping_em0_ac_port_tag_table_t::value_type*)value);
            npl_service_mapping_em0_ac_port_tag_table_t::entry_pointer_type entry_pointer;
            return service_mapping_em0_ac_port_tag_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_tag_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_ac_port_tag_tag_table_t::key_type k(*(npl_service_mapping_em0_ac_port_tag_tag_table_t::key_type*)key);
            npl_service_mapping_em0_ac_port_tag_tag_table_t::value_type v(*(npl_service_mapping_em0_ac_port_tag_tag_table_t::value_type*)value);
            npl_service_mapping_em0_ac_port_tag_tag_table_t::entry_pointer_type entry_pointer;
            return service_mapping_em0_ac_port_tag_tag_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_mapping_em0_pwe_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_pwe_tag_table_t::key_type k(*(npl_service_mapping_em0_pwe_tag_table_t::key_type*)key);
            npl_service_mapping_em0_pwe_tag_table_t::value_type v(*(npl_service_mapping_em0_pwe_tag_table_t::value_type*)value);
            npl_service_mapping_em0_pwe_tag_table_t::entry_pointer_type entry_pointer;
            return service_mapping_em0_pwe_tag_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_mapping_em1_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em1_ac_port_tag_table_t::key_type k(*(npl_service_mapping_em1_ac_port_tag_table_t::key_type*)key);
            npl_service_mapping_em1_ac_port_tag_table_t::value_type v(*(npl_service_mapping_em1_ac_port_tag_table_t::value_type*)value);
            npl_service_mapping_em1_ac_port_tag_table_t::entry_pointer_type entry_pointer;
            return service_mapping_em1_ac_port_tag_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_relay_attributes_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_relay_attributes_table_t::key_type k(*(npl_service_relay_attributes_table_t::key_type*)key);
            npl_service_relay_attributes_table_t::value_type v(*(npl_service_relay_attributes_table_t::value_type*)value);
            npl_service_relay_attributes_table_t::entry_pointer_type entry_pointer;
            return service_relay_attributes_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "set_ene_macro_and_bytes_to_remove_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_set_ene_macro_and_bytes_to_remove_table_t::key_type k(*(npl_set_ene_macro_and_bytes_to_remove_table_t::key_type*)key);
            npl_set_ene_macro_and_bytes_to_remove_table_t::value_type v(*(npl_set_ene_macro_and_bytes_to_remove_table_t::value_type*)value);
            npl_set_ene_macro_and_bytes_to_remove_table_t::entry_pointer_type entry_pointer;
            return set_ene_macro_and_bytes_to_remove_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "sip_index_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_sip_index_table_t::key_type k(*(npl_sip_index_table_t::key_type*)key);
            npl_sip_index_table_t::value_type v(*(npl_sip_index_table_t::value_type*)value);
            npl_sip_index_table_t::entry_pointer_type entry_pointer;
            return sip_index_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "slice_modes_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_slice_modes_table_t::key_type k(*(npl_slice_modes_table_t::key_type*)key);
            npl_slice_modes_table_t::value_type v(*(npl_slice_modes_table_t::value_type*)value);
            npl_slice_modes_table_t::entry_pointer_type entry_pointer;
            return slice_modes_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "slp_based_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_slp_based_forwarding_table_t::key_type k(*(npl_slp_based_forwarding_table_t::key_type*)key);
            npl_slp_based_forwarding_table_t::value_type v(*(npl_slp_based_forwarding_table_t::value_type*)value);
            npl_slp_based_forwarding_table_t::entry_pointer_type entry_pointer;
            return slp_based_forwarding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "small_encap_mpls_he_asbr_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_small_encap_mpls_he_asbr_table_t::key_type k(*(npl_small_encap_mpls_he_asbr_table_t::key_type*)key);
            npl_small_encap_mpls_he_asbr_table_t::value_type v(*(npl_small_encap_mpls_he_asbr_table_t::value_type*)value);
            npl_small_encap_mpls_he_asbr_table_t::entry_pointer_type entry_pointer;
            return small_encap_mpls_he_asbr_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "small_encap_mpls_he_te_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_small_encap_mpls_he_te_table_t::key_type k(*(npl_small_encap_mpls_he_te_table_t::key_type*)key);
            npl_small_encap_mpls_he_te_table_t::value_type v(*(npl_small_encap_mpls_he_te_table_t::value_type*)value);
            npl_small_encap_mpls_he_te_table_t::entry_pointer_type entry_pointer;
            return small_encap_mpls_he_te_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "snoop_code_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_snoop_code_hw_table_t::key_type k(*(npl_snoop_code_hw_table_t::key_type*)key);
            npl_snoop_code_hw_table_t::value_type v(*(npl_snoop_code_hw_table_t::value_type*)value);
            npl_snoop_code_hw_table_t::entry_pointer_type entry_pointer;
            return snoop_code_hw_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "snoop_to_dsp_in_npu_soft_header_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_snoop_to_dsp_in_npu_soft_header_table_t::key_type k(*(npl_snoop_to_dsp_in_npu_soft_header_table_t::key_type*)key);
            npl_snoop_to_dsp_in_npu_soft_header_table_t::value_type v(*(npl_snoop_to_dsp_in_npu_soft_header_table_t::value_type*)value);
            npl_snoop_to_dsp_in_npu_soft_header_table_t::entry_pointer_type entry_pointer;
            return snoop_to_dsp_in_npu_soft_header_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "source_pif_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_source_pif_hw_table_t::key_type k(*(npl_source_pif_hw_table_t::key_type*)key);
            npl_source_pif_hw_table_t::value_type v(*(npl_source_pif_hw_table_t::value_type*)value);
            npl_source_pif_hw_table_t::entry_pointer_type entry_pointer;
            return source_pif_hw_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "stage2_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage2_lb_group_size_table_t::key_type k(*(npl_stage2_lb_group_size_table_t::key_type*)key);
            npl_stage2_lb_group_size_table_t::value_type v(*(npl_stage2_lb_group_size_table_t::value_type*)value);
            npl_stage2_lb_group_size_table_t::entry_pointer_type entry_pointer;
            return stage2_lb_group_size_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "stage2_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage2_lb_table_t::key_type k(*(npl_stage2_lb_table_t::key_type*)key);
            npl_stage2_lb_table_t::value_type v(*(npl_stage2_lb_table_t::value_type*)value);
            npl_stage2_lb_table_t::entry_pointer_type entry_pointer;
            return stage2_lb_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "stage3_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage3_lb_group_size_table_t::key_type k(*(npl_stage3_lb_group_size_table_t::key_type*)key);
            npl_stage3_lb_group_size_table_t::value_type v(*(npl_stage3_lb_group_size_table_t::value_type*)value);
            npl_stage3_lb_group_size_table_t::entry_pointer_type entry_pointer;
            return stage3_lb_group_size_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "stage3_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage3_lb_table_t::key_type k(*(npl_stage3_lb_table_t::key_type*)key);
            npl_stage3_lb_table_t::value_type v(*(npl_stage3_lb_table_t::value_type*)value);
            npl_stage3_lb_table_t::entry_pointer_type entry_pointer;
            return stage3_lb_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "stage3_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage3_lb_type_decoding_table_t::key_type k(*(npl_stage3_lb_type_decoding_table_t::key_type*)key);
            npl_stage3_lb_type_decoding_table_t::value_type v(*(npl_stage3_lb_type_decoding_table_t::value_type*)value);
            npl_stage3_lb_type_decoding_table_t::entry_pointer_type entry_pointer;
            return stage3_lb_type_decoding_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "termination_to_forwarding_fi_hardwired_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_termination_to_forwarding_fi_hardwired_table_t::key_type k(*(npl_termination_to_forwarding_fi_hardwired_table_t::key_type*)key);
            npl_termination_to_forwarding_fi_hardwired_table_t::value_type v(*(npl_termination_to_forwarding_fi_hardwired_table_t::value_type*)value);
            npl_termination_to_forwarding_fi_hardwired_table_t::entry_pointer_type entry_pointer;
            return termination_to_forwarding_fi_hardwired_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "tm_ibm_cmd_to_destination") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tm_ibm_cmd_to_destination_t::key_type k(*(npl_tm_ibm_cmd_to_destination_t::key_type*)key);
            npl_tm_ibm_cmd_to_destination_t::value_type v(*(npl_tm_ibm_cmd_to_destination_t::value_type*)value);
            npl_tm_ibm_cmd_to_destination_t::entry_pointer_type entry_pointer;
            return tm_ibm_cmd_to_destination[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ts_cmd_hw_static_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ts_cmd_hw_static_table_t::key_type k(*(npl_ts_cmd_hw_static_table_t::key_type*)key);
            npl_ts_cmd_hw_static_table_t::value_type v(*(npl_ts_cmd_hw_static_table_t::value_type*)value);
            npl_ts_cmd_hw_static_table_t::entry_pointer_type entry_pointer;
            return ts_cmd_hw_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "tunnel_qos_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tunnel_qos_static_table_t::key_type k(*(npl_tunnel_qos_static_table_t::key_type*)key);
            npl_tunnel_qos_static_table_t::value_type v(*(npl_tunnel_qos_static_table_t::value_type*)value);
            npl_tunnel_qos_static_table_t::entry_pointer_type entry_pointer;
            return tunnel_qos_static_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "tx_counters_block_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_counters_block_config_table_t::key_type k(*(npl_tx_counters_block_config_table_t::key_type*)key);
            npl_tx_counters_block_config_table_t::value_type v(*(npl_tx_counters_block_config_table_t::value_type*)value);
            npl_tx_counters_block_config_table_t::entry_pointer_type entry_pointer;
            return tx_counters_block_config_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "tx_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_error_handling_counter_table_t::key_type k(*(npl_tx_error_handling_counter_table_t::key_type*)key);
            npl_tx_error_handling_counter_table_t::value_type v(*(npl_tx_error_handling_counter_table_t::value_type*)value);
            npl_tx_error_handling_counter_table_t::entry_pointer_type entry_pointer;
            return tx_error_handling_counter_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "tx_punt_eth_encap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_punt_eth_encap_table_t::key_type k(*(npl_tx_punt_eth_encap_table_t::key_type*)key);
            npl_tx_punt_eth_encap_table_t::value_type v(*(npl_tx_punt_eth_encap_table_t::value_type*)value);
            npl_tx_punt_eth_encap_table_t::entry_pointer_type entry_pointer;
            return tx_punt_eth_encap_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "tx_redirect_code_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_redirect_code_table_t::key_type k(*(npl_tx_redirect_code_table_t::key_type*)key);
            npl_tx_redirect_code_table_t::value_type v(*(npl_tx_redirect_code_table_t::value_type*)value);
            npl_tx_redirect_code_table_t::entry_pointer_type entry_pointer;
            return tx_redirect_code_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "txpdr_mc_list_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpdr_mc_list_size_table_t::key_type k(*(npl_txpdr_mc_list_size_table_t::key_type*)key);
            npl_txpdr_mc_list_size_table_t::value_type v(*(npl_txpdr_mc_list_size_table_t::value_type*)value);
            npl_txpdr_mc_list_size_table_t::entry_pointer_type entry_pointer;
            return txpdr_mc_list_size_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "txpdr_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpdr_tc_map_table_t::key_type k(*(npl_txpdr_tc_map_table_t::key_type*)key);
            npl_txpdr_tc_map_table_t::value_type v(*(npl_txpdr_tc_map_table_t::value_type*)value);
            npl_txpdr_tc_map_table_t::entry_pointer_type entry_pointer;
            return txpdr_tc_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "txpp_dlp_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_dlp_profile_table_t::key_type k(*(npl_txpp_dlp_profile_table_t::key_type*)key);
            npl_txpp_dlp_profile_table_t::value_type v(*(npl_txpp_dlp_profile_table_t::value_type*)value);
            npl_txpp_dlp_profile_table_t::entry_pointer_type entry_pointer;
            return txpp_dlp_profile_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "txpp_encap_qos_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_encap_qos_mapping_table_t::key_type k(*(npl_txpp_encap_qos_mapping_table_t::key_type*)key);
            npl_txpp_encap_qos_mapping_table_t::value_type v(*(npl_txpp_encap_qos_mapping_table_t::value_type*)value);
            npl_txpp_encap_qos_mapping_table_t::entry_pointer_type entry_pointer;
            return txpp_encap_qos_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "txpp_first_enc_type_to_second_enc_type_offset") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_first_enc_type_to_second_enc_type_offset_t::key_type k(*(npl_txpp_first_enc_type_to_second_enc_type_offset_t::key_type*)key);
            npl_txpp_first_enc_type_to_second_enc_type_offset_t::value_type v(*(npl_txpp_first_enc_type_to_second_enc_type_offset_t::value_type*)value);
            npl_txpp_first_enc_type_to_second_enc_type_offset_t::entry_pointer_type entry_pointer;
            return txpp_first_enc_type_to_second_enc_type_offset[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "txpp_fwd_header_type_is_l2_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_fwd_header_type_is_l2_table_t::key_type k(*(npl_txpp_fwd_header_type_is_l2_table_t::key_type*)key);
            npl_txpp_fwd_header_type_is_l2_table_t::value_type v(*(npl_txpp_fwd_header_type_is_l2_table_t::value_type*)value);
            npl_txpp_fwd_header_type_is_l2_table_t::entry_pointer_type entry_pointer;
            return txpp_fwd_header_type_is_l2_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "txpp_fwd_qos_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_fwd_qos_mapping_table_t::key_type k(*(npl_txpp_fwd_qos_mapping_table_t::key_type*)key);
            npl_txpp_fwd_qos_mapping_table_t::value_type v(*(npl_txpp_fwd_qos_mapping_table_t::value_type*)value);
            npl_txpp_fwd_qos_mapping_table_t::entry_pointer_type entry_pointer;
            return txpp_fwd_qos_mapping_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "txpp_ibm_enables_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_ibm_enables_table_t::key_type k(*(npl_txpp_ibm_enables_table_t::key_type*)key);
            npl_txpp_ibm_enables_table_t::value_type v(*(npl_txpp_ibm_enables_table_t::value_type*)value);
            npl_txpp_ibm_enables_table_t::entry_pointer_type entry_pointer;
            return txpp_ibm_enables_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "txpp_mapping_qos_tag_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_mapping_qos_tag_table_t::key_type k(*(npl_txpp_mapping_qos_tag_table_t::key_type*)key);
            npl_txpp_mapping_qos_tag_table_t::value_type v(*(npl_txpp_mapping_qos_tag_table_t::value_type*)value);
            npl_txpp_mapping_qos_tag_table_t::entry_pointer_type entry_pointer;
            return txpp_mapping_qos_tag_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "uc_ibm_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_uc_ibm_tc_map_table_t::key_type k(*(npl_uc_ibm_tc_map_table_t::key_type*)key);
            npl_uc_ibm_tc_map_table_t::value_type v(*(npl_uc_ibm_tc_map_table_t::value_type*)value);
            npl_uc_ibm_tc_map_table_t::entry_pointer_type entry_pointer;
            return uc_ibm_tc_map_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "vlan_edit_tpid1_profile_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vlan_edit_tpid1_profile_hw_table_t::key_type k(*(npl_vlan_edit_tpid1_profile_hw_table_t::key_type*)key);
            npl_vlan_edit_tpid1_profile_hw_table_t::value_type v(*(npl_vlan_edit_tpid1_profile_hw_table_t::value_type*)value);
            npl_vlan_edit_tpid1_profile_hw_table_t::entry_pointer_type entry_pointer;
            return vlan_edit_tpid1_profile_hw_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "vlan_edit_tpid2_profile_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vlan_edit_tpid2_profile_hw_table_t::key_type k(*(npl_vlan_edit_tpid2_profile_hw_table_t::key_type*)key);
            npl_vlan_edit_tpid2_profile_hw_table_t::value_type v(*(npl_vlan_edit_tpid2_profile_hw_table_t::value_type*)value);
            npl_vlan_edit_tpid2_profile_hw_table_t::entry_pointer_type entry_pointer;
            return vlan_edit_tpid2_profile_hw_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "vni_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vni_table_t::key_type k(*(npl_vni_table_t::key_type*)key);
            npl_vni_table_t::value_type v(*(npl_vni_table_t::value_type*)value);
            npl_vni_table_t::entry_pointer_type entry_pointer;
            return vni_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_buffers_consumption_lut_for_enq_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::key_type k(*(npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::key_type*)key);
            npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::value_type v(*(npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::value_type*)value);
            npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::entry_pointer_type entry_pointer;
            return voq_cgm_slice_buffers_consumption_lut_for_enq_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_dram_cgm_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_dram_cgm_profile_table_t::key_type k(*(npl_voq_cgm_slice_dram_cgm_profile_table_t::key_type*)key);
            npl_voq_cgm_slice_dram_cgm_profile_table_t::value_type v(*(npl_voq_cgm_slice_dram_cgm_profile_table_t::value_type*)value);
            npl_voq_cgm_slice_dram_cgm_profile_table_t::entry_pointer_type entry_pointer;
            return voq_cgm_slice_dram_cgm_profile_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_pd_consumption_lut_for_enq_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::key_type k(*(npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::key_type*)key);
            npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::value_type v(*(npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::value_type*)value);
            npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::entry_pointer_type entry_pointer;
            return voq_cgm_slice_pd_consumption_lut_for_enq_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_buff_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::key_type k(*(npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::key_type*)key);
            npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::value_type v(*(npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::value_type*)value);
            npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::entry_pointer_type entry_pointer;
            return voq_cgm_slice_profile_buff_region_thresholds_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::key_type k(*(npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::key_type*)key);
            npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::value_type v(*(npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::value_type*)value);
            npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::entry_pointer_type entry_pointer;
            return voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_pkt_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::key_type k(*(npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::key_type*)key);
            npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::value_type v(*(npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::value_type*)value);
            npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::entry_pointer_type entry_pointer;
            return voq_cgm_slice_profile_pkt_region_thresholds_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_slice_cgm_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_slice_cgm_profile_table_t::key_type k(*(npl_voq_cgm_slice_slice_cgm_profile_table_t::key_type*)key);
            npl_voq_cgm_slice_slice_cgm_profile_table_t::value_type v(*(npl_voq_cgm_slice_slice_cgm_profile_table_t::value_type*)value);
            npl_voq_cgm_slice_slice_cgm_profile_table_t::entry_pointer_type entry_pointer;
            return voq_cgm_slice_slice_cgm_profile_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "vsid_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vsid_table_t::key_type k(*(npl_vsid_table_t::key_type*)key);
            npl_vsid_table_t::value_type v(*(npl_vsid_table_t::value_type*)value);
            npl_vsid_table_t::entry_pointer_type entry_pointer;
            return vsid_table[instance_index].insert(k, v, entry_pointer);
        }
        
        if (strcmp(table_name, "vxlan_l2_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vxlan_l2_dlp_table_t::key_type k(*(npl_vxlan_l2_dlp_table_t::key_type*)key);
            npl_vxlan_l2_dlp_table_t::value_type v(*(npl_vxlan_l2_dlp_table_t::value_type*)value);
            npl_vxlan_l2_dlp_table_t::entry_pointer_type entry_pointer;
            return vxlan_l2_dlp_table[instance_index].insert(k, v, entry_pointer);
        }
        
        return NPL_TABLES_STATUS_EUNKNOWN;
    }
    
    npl_tables_status_e npl_tables_t::insert_ternary_table_entry(const char* table_name, size_t instance_index, size_t line, void* key, void* mask, void* value) {
        if (strcmp(table_name, "bfd_udp_port_map_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_udp_port_map_static_table_t::key_type k(*(npl_bfd_udp_port_map_static_table_t::key_type*)key);
            npl_bfd_udp_port_map_static_table_t::key_type m(*(npl_bfd_udp_port_map_static_table_t::key_type*)mask);
            npl_bfd_udp_port_map_static_table_t::value_type v(*(npl_bfd_udp_port_map_static_table_t::value_type*)value);
            npl_bfd_udp_port_map_static_table_t::entry_pointer_type entry_pointer;
            return bfd_udp_port_map_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "default_egress_ipv4_sec_acl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_default_egress_ipv4_sec_acl_table_t::key_type k(*(npl_default_egress_ipv4_sec_acl_table_t::key_type*)key);
            npl_default_egress_ipv4_sec_acl_table_t::key_type m(*(npl_default_egress_ipv4_sec_acl_table_t::key_type*)mask);
            npl_default_egress_ipv4_sec_acl_table_t::value_type v(*(npl_default_egress_ipv4_sec_acl_table_t::value_type*)value);
            npl_default_egress_ipv4_sec_acl_table_t::entry_pointer_type entry_pointer;
            return default_egress_ipv4_sec_acl_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "default_egress_ipv6_acl_sec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_default_egress_ipv6_acl_sec_table_t::key_type k(*(npl_default_egress_ipv6_acl_sec_table_t::key_type*)key);
            npl_default_egress_ipv6_acl_sec_table_t::key_type m(*(npl_default_egress_ipv6_acl_sec_table_t::key_type*)mask);
            npl_default_egress_ipv6_acl_sec_table_t::value_type v(*(npl_default_egress_ipv6_acl_sec_table_t::value_type*)value);
            npl_default_egress_ipv6_acl_sec_table_t::entry_pointer_type entry_pointer;
            return default_egress_ipv6_acl_sec_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ecn_remark_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ecn_remark_static_table_t::key_type k(*(npl_ecn_remark_static_table_t::key_type*)key);
            npl_ecn_remark_static_table_t::key_type m(*(npl_ecn_remark_static_table_t::key_type*)mask);
            npl_ecn_remark_static_table_t::value_type v(*(npl_ecn_remark_static_table_t::value_type*)value);
            npl_ecn_remark_static_table_t::entry_pointer_type entry_pointer;
            return ecn_remark_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "egress_mac_ipv4_sec_acl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_egress_mac_ipv4_sec_acl_table_t::key_type k(*(npl_egress_mac_ipv4_sec_acl_table_t::key_type*)key);
            npl_egress_mac_ipv4_sec_acl_table_t::key_type m(*(npl_egress_mac_ipv4_sec_acl_table_t::key_type*)mask);
            npl_egress_mac_ipv4_sec_acl_table_t::value_type v(*(npl_egress_mac_ipv4_sec_acl_table_t::value_type*)value);
            npl_egress_mac_ipv4_sec_acl_table_t::entry_pointer_type entry_pointer;
            return egress_mac_ipv4_sec_acl_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ene_byte_addition_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ene_byte_addition_static_table_t::key_type k(*(npl_ene_byte_addition_static_table_t::key_type*)key);
            npl_ene_byte_addition_static_table_t::key_type m(*(npl_ene_byte_addition_static_table_t::key_type*)mask);
            npl_ene_byte_addition_static_table_t::value_type v(*(npl_ene_byte_addition_static_table_t::value_type*)value);
            npl_ene_byte_addition_static_table_t::entry_pointer_type entry_pointer;
            return ene_byte_addition_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "erpp_fabric_counters_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_erpp_fabric_counters_offset_table_t::key_type k(*(npl_erpp_fabric_counters_offset_table_t::key_type*)key);
            npl_erpp_fabric_counters_offset_table_t::key_type m(*(npl_erpp_fabric_counters_offset_table_t::key_type*)mask);
            npl_erpp_fabric_counters_offset_table_t::value_type v(*(npl_erpp_fabric_counters_offset_table_t::value_type*)value);
            npl_erpp_fabric_counters_offset_table_t::entry_pointer_type entry_pointer;
            return erpp_fabric_counters_offset_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "erpp_fabric_counters_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_erpp_fabric_counters_table_t::key_type k(*(npl_erpp_fabric_counters_table_t::key_type*)key);
            npl_erpp_fabric_counters_table_t::key_type m(*(npl_erpp_fabric_counters_table_t::key_type*)mask);
            npl_erpp_fabric_counters_table_t::value_type v(*(npl_erpp_fabric_counters_table_t::value_type*)value);
            npl_erpp_fabric_counters_table_t::entry_pointer_type entry_pointer;
            return erpp_fabric_counters_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_and_tm_header_size_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_and_tm_header_size_static_table_t::key_type k(*(npl_fabric_and_tm_header_size_static_table_t::key_type*)key);
            npl_fabric_and_tm_header_size_static_table_t::key_type m(*(npl_fabric_and_tm_header_size_static_table_t::key_type*)mask);
            npl_fabric_and_tm_header_size_static_table_t::value_type v(*(npl_fabric_and_tm_header_size_static_table_t::value_type*)value);
            npl_fabric_and_tm_header_size_static_table_t::entry_pointer_type entry_pointer;
            return fabric_and_tm_header_size_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_header_ene_macro_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_header_ene_macro_table_t::key_type k(*(npl_fabric_header_ene_macro_table_t::key_type*)key);
            npl_fabric_header_ene_macro_table_t::key_type m(*(npl_fabric_header_ene_macro_table_t::key_type*)mask);
            npl_fabric_header_ene_macro_table_t::value_type v(*(npl_fabric_header_ene_macro_table_t::value_type*)value);
            npl_fabric_header_ene_macro_table_t::entry_pointer_type entry_pointer;
            return fabric_header_ene_macro_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_headers_type_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_headers_type_table_t::key_type k(*(npl_fabric_headers_type_table_t::key_type*)key);
            npl_fabric_headers_type_table_t::key_type m(*(npl_fabric_headers_type_table_t::key_type*)mask);
            npl_fabric_headers_type_table_t::value_type v(*(npl_fabric_headers_type_table_t::value_type*)value);
            npl_fabric_headers_type_table_t::entry_pointer_type entry_pointer;
            return fabric_headers_type_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_init_cfg") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_init_cfg_t::key_type k(*(npl_fabric_init_cfg_t::key_type*)key);
            npl_fabric_init_cfg_t::key_type m(*(npl_fabric_init_cfg_t::key_type*)mask);
            npl_fabric_init_cfg_t::value_type v(*(npl_fabric_init_cfg_t::value_type*)value);
            npl_fabric_init_cfg_t::entry_pointer_type entry_pointer;
            return fabric_init_cfg[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_npuh_size_calculation_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_npuh_size_calculation_static_table_t::key_type k(*(npl_fabric_npuh_size_calculation_static_table_t::key_type*)key);
            npl_fabric_npuh_size_calculation_static_table_t::key_type m(*(npl_fabric_npuh_size_calculation_static_table_t::key_type*)mask);
            npl_fabric_npuh_size_calculation_static_table_t::value_type v(*(npl_fabric_npuh_size_calculation_static_table_t::value_type*)value);
            npl_fabric_npuh_size_calculation_static_table_t::entry_pointer_type entry_pointer;
            return fabric_npuh_size_calculation_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_out_color_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_out_color_map_table_t::key_type k(*(npl_fabric_out_color_map_table_t::key_type*)key);
            npl_fabric_out_color_map_table_t::key_type m(*(npl_fabric_out_color_map_table_t::key_type*)mask);
            npl_fabric_out_color_map_table_t::value_type v(*(npl_fabric_out_color_map_table_t::value_type*)value);
            npl_fabric_out_color_map_table_t::entry_pointer_type entry_pointer;
            return fabric_out_color_map_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_term_error_checker_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_term_error_checker_static_table_t::key_type k(*(npl_fabric_term_error_checker_static_table_t::key_type*)key);
            npl_fabric_term_error_checker_static_table_t::key_type m(*(npl_fabric_term_error_checker_static_table_t::key_type*)mask);
            npl_fabric_term_error_checker_static_table_t::value_type v(*(npl_fabric_term_error_checker_static_table_t::value_type*)value);
            npl_fabric_term_error_checker_static_table_t::entry_pointer_type entry_pointer;
            return fabric_term_error_checker_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fabric_transmit_error_checker_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_transmit_error_checker_static_table_t::key_type k(*(npl_fabric_transmit_error_checker_static_table_t::key_type*)key);
            npl_fabric_transmit_error_checker_static_table_t::key_type m(*(npl_fabric_transmit_error_checker_static_table_t::key_type*)mask);
            npl_fabric_transmit_error_checker_static_table_t::value_type v(*(npl_fabric_transmit_error_checker_static_table_t::value_type*)value);
            npl_fabric_transmit_error_checker_static_table_t::entry_pointer_type entry_pointer;
            return fabric_transmit_error_checker_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "fi_core_tcam_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fi_core_tcam_table_t::key_type k(*(npl_fi_core_tcam_table_t::key_type*)key);
            npl_fi_core_tcam_table_t::key_type m(*(npl_fi_core_tcam_table_t::key_type*)mask);
            npl_fi_core_tcam_table_t::value_type v(*(npl_fi_core_tcam_table_t::value_type*)value);
            npl_fi_core_tcam_table_t::entry_pointer_type entry_pointer;
            return fi_core_tcam_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_eth_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_eth_db1_160_f0_table_t::key_type k(*(npl_ingress_rtf_eth_db1_160_f0_table_t::key_type*)key);
            npl_ingress_rtf_eth_db1_160_f0_table_t::key_type m(*(npl_ingress_rtf_eth_db1_160_f0_table_t::key_type*)mask);
            npl_ingress_rtf_eth_db1_160_f0_table_t::value_type v(*(npl_ingress_rtf_eth_db1_160_f0_table_t::value_type*)value);
            npl_ingress_rtf_eth_db1_160_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_eth_db1_160_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_eth_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_eth_db2_160_f0_table_t::key_type k(*(npl_ingress_rtf_eth_db2_160_f0_table_t::key_type*)key);
            npl_ingress_rtf_eth_db2_160_f0_table_t::key_type m(*(npl_ingress_rtf_eth_db2_160_f0_table_t::key_type*)mask);
            npl_ingress_rtf_eth_db2_160_f0_table_t::value_type v(*(npl_ingress_rtf_eth_db2_160_f0_table_t::value_type*)value);
            npl_ingress_rtf_eth_db2_160_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_eth_db2_160_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db1_160_f0_table_t::key_type k(*(npl_ingress_rtf_ipv4_db1_160_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db1_160_f0_table_t::key_type m(*(npl_ingress_rtf_ipv4_db1_160_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db1_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db1_160_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db1_160_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db1_160_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db1_160_f1_table_t::key_type k(*(npl_ingress_rtf_ipv4_db1_160_f1_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db1_160_f1_table_t::key_type m(*(npl_ingress_rtf_ipv4_db1_160_f1_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db1_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv4_db1_160_f1_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db1_160_f1_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db1_160_f1_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db1_320_f0_table_t::key_type k(*(npl_ingress_rtf_ipv4_db1_320_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db1_320_f0_table_t::key_type m(*(npl_ingress_rtf_ipv4_db1_320_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db1_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db1_320_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db1_320_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db1_320_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db2_160_f0_table_t::key_type k(*(npl_ingress_rtf_ipv4_db2_160_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db2_160_f0_table_t::key_type m(*(npl_ingress_rtf_ipv4_db2_160_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db2_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db2_160_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db2_160_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db2_160_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db2_160_f1_table_t::key_type k(*(npl_ingress_rtf_ipv4_db2_160_f1_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db2_160_f1_table_t::key_type m(*(npl_ingress_rtf_ipv4_db2_160_f1_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db2_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv4_db2_160_f1_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db2_160_f1_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db2_160_f1_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db2_320_f0_table_t::key_type k(*(npl_ingress_rtf_ipv4_db2_320_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db2_320_f0_table_t::key_type m(*(npl_ingress_rtf_ipv4_db2_320_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db2_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db2_320_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db2_320_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db2_320_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db3_160_f0_table_t::key_type k(*(npl_ingress_rtf_ipv4_db3_160_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db3_160_f0_table_t::key_type m(*(npl_ingress_rtf_ipv4_db3_160_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db3_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db3_160_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db3_160_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db3_160_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db3_160_f1_table_t::key_type k(*(npl_ingress_rtf_ipv4_db3_160_f1_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db3_160_f1_table_t::key_type m(*(npl_ingress_rtf_ipv4_db3_160_f1_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db3_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv4_db3_160_f1_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db3_160_f1_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db3_160_f1_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db3_320_f0_table_t::key_type k(*(npl_ingress_rtf_ipv4_db3_320_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db3_320_f0_table_t::key_type m(*(npl_ingress_rtf_ipv4_db3_320_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db3_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db3_320_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db3_320_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db3_320_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db4_160_f0_table_t::key_type k(*(npl_ingress_rtf_ipv4_db4_160_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db4_160_f0_table_t::key_type m(*(npl_ingress_rtf_ipv4_db4_160_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db4_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db4_160_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db4_160_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db4_160_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db4_160_f1_table_t::key_type k(*(npl_ingress_rtf_ipv4_db4_160_f1_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db4_160_f1_table_t::key_type m(*(npl_ingress_rtf_ipv4_db4_160_f1_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db4_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv4_db4_160_f1_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db4_160_f1_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db4_160_f1_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db4_320_f0_table_t::key_type k(*(npl_ingress_rtf_ipv4_db4_320_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv4_db4_320_f0_table_t::key_type m(*(npl_ingress_rtf_ipv4_db4_320_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv4_db4_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db4_320_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv4_db4_320_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv4_db4_320_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db1_160_f0_table_t::key_type k(*(npl_ingress_rtf_ipv6_db1_160_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db1_160_f0_table_t::key_type m(*(npl_ingress_rtf_ipv6_db1_160_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db1_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db1_160_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db1_160_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db1_160_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db1_160_f1_table_t::key_type k(*(npl_ingress_rtf_ipv6_db1_160_f1_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db1_160_f1_table_t::key_type m(*(npl_ingress_rtf_ipv6_db1_160_f1_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db1_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv6_db1_160_f1_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db1_160_f1_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db1_160_f1_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db1_320_f0_table_t::key_type k(*(npl_ingress_rtf_ipv6_db1_320_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db1_320_f0_table_t::key_type m(*(npl_ingress_rtf_ipv6_db1_320_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db1_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db1_320_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db1_320_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db1_320_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db2_160_f0_table_t::key_type k(*(npl_ingress_rtf_ipv6_db2_160_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db2_160_f0_table_t::key_type m(*(npl_ingress_rtf_ipv6_db2_160_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db2_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db2_160_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db2_160_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db2_160_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db2_160_f1_table_t::key_type k(*(npl_ingress_rtf_ipv6_db2_160_f1_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db2_160_f1_table_t::key_type m(*(npl_ingress_rtf_ipv6_db2_160_f1_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db2_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv6_db2_160_f1_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db2_160_f1_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db2_160_f1_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db2_320_f0_table_t::key_type k(*(npl_ingress_rtf_ipv6_db2_320_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db2_320_f0_table_t::key_type m(*(npl_ingress_rtf_ipv6_db2_320_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db2_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db2_320_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db2_320_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db2_320_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db3_160_f0_table_t::key_type k(*(npl_ingress_rtf_ipv6_db3_160_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db3_160_f0_table_t::key_type m(*(npl_ingress_rtf_ipv6_db3_160_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db3_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db3_160_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db3_160_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db3_160_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db3_160_f1_table_t::key_type k(*(npl_ingress_rtf_ipv6_db3_160_f1_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db3_160_f1_table_t::key_type m(*(npl_ingress_rtf_ipv6_db3_160_f1_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db3_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv6_db3_160_f1_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db3_160_f1_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db3_160_f1_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db3_320_f0_table_t::key_type k(*(npl_ingress_rtf_ipv6_db3_320_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db3_320_f0_table_t::key_type m(*(npl_ingress_rtf_ipv6_db3_320_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db3_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db3_320_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db3_320_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db3_320_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db4_160_f0_table_t::key_type k(*(npl_ingress_rtf_ipv6_db4_160_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db4_160_f0_table_t::key_type m(*(npl_ingress_rtf_ipv6_db4_160_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db4_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db4_160_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db4_160_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db4_160_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db4_160_f1_table_t::key_type k(*(npl_ingress_rtf_ipv6_db4_160_f1_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db4_160_f1_table_t::key_type m(*(npl_ingress_rtf_ipv6_db4_160_f1_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db4_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv6_db4_160_f1_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db4_160_f1_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db4_160_f1_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db4_320_f0_table_t::key_type k(*(npl_ingress_rtf_ipv6_db4_320_f0_table_t::key_type*)key);
            npl_ingress_rtf_ipv6_db4_320_f0_table_t::key_type m(*(npl_ingress_rtf_ipv6_db4_320_f0_table_t::key_type*)mask);
            npl_ingress_rtf_ipv6_db4_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db4_320_f0_table_t::value_type*)value);
            npl_ingress_rtf_ipv6_db4_320_f0_table_t::entry_pointer_type entry_pointer;
            return ingress_rtf_ipv6_db4_320_f0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "inject_down_select_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_down_select_ene_static_table_t::key_type k(*(npl_inject_down_select_ene_static_table_t::key_type*)key);
            npl_inject_down_select_ene_static_table_t::key_type m(*(npl_inject_down_select_ene_static_table_t::key_type*)mask);
            npl_inject_down_select_ene_static_table_t::value_type v(*(npl_inject_down_select_ene_static_table_t::value_type*)value);
            npl_inject_down_select_ene_static_table_t::entry_pointer_type entry_pointer;
            return inject_down_select_ene_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ip_ingress_cmp_mcid_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_ingress_cmp_mcid_static_table_t::key_type k(*(npl_ip_ingress_cmp_mcid_static_table_t::key_type*)key);
            npl_ip_ingress_cmp_mcid_static_table_t::key_type m(*(npl_ip_ingress_cmp_mcid_static_table_t::key_type*)mask);
            npl_ip_ingress_cmp_mcid_static_table_t::value_type v(*(npl_ip_ingress_cmp_mcid_static_table_t::value_type*)value);
            npl_ip_ingress_cmp_mcid_static_table_t::entry_pointer_type entry_pointer;
            return ip_ingress_cmp_mcid_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ip_ver_mc_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_ver_mc_static_table_t::key_type k(*(npl_ip_ver_mc_static_table_t::key_type*)key);
            npl_ip_ver_mc_static_table_t::key_type m(*(npl_ip_ver_mc_static_table_t::key_type*)mask);
            npl_ip_ver_mc_static_table_t::value_type v(*(npl_ip_ver_mc_static_table_t::value_type*)value);
            npl_ip_ver_mc_static_table_t::entry_pointer_type entry_pointer;
            return ip_ver_mc_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_acl_map_protocol_type_to_protocol_number_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t::key_type k(*(npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t::key_type*)key);
            npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t::key_type m(*(npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t::key_type*)mask);
            npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t::value_type v(*(npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t::value_type*)value);
            npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t::entry_pointer_type entry_pointer;
            return ipv4_acl_map_protocol_type_to_protocol_number_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_lpts_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_lpts_table_t::key_type k(*(npl_ipv4_lpts_table_t::key_type*)key);
            npl_ipv4_lpts_table_t::key_type m(*(npl_ipv4_lpts_table_t::key_type*)mask);
            npl_ipv4_lpts_table_t::value_type v(*(npl_ipv4_lpts_table_t::value_type*)value);
            npl_ipv4_lpts_table_t::entry_pointer_type entry_pointer;
            return ipv4_lpts_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_first_fragment_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_first_fragment_static_table_t::key_type k(*(npl_ipv6_first_fragment_static_table_t::key_type*)key);
            npl_ipv6_first_fragment_static_table_t::key_type m(*(npl_ipv6_first_fragment_static_table_t::key_type*)mask);
            npl_ipv6_first_fragment_static_table_t::value_type v(*(npl_ipv6_first_fragment_static_table_t::value_type*)value);
            npl_ipv6_first_fragment_static_table_t::entry_pointer_type entry_pointer;
            return ipv6_first_fragment_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_lpts_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_lpts_table_t::key_type k(*(npl_ipv6_lpts_table_t::key_type*)key);
            npl_ipv6_lpts_table_t::key_type m(*(npl_ipv6_lpts_table_t::key_type*)mask);
            npl_ipv6_lpts_table_t::value_type v(*(npl_ipv6_lpts_table_t::value_type*)value);
            npl_ipv6_lpts_table_t::entry_pointer_type entry_pointer;
            return ipv6_lpts_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_sip_compression_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_sip_compression_table_t::key_type k(*(npl_ipv6_sip_compression_table_t::key_type*)key);
            npl_ipv6_sip_compression_table_t::key_type m(*(npl_ipv6_sip_compression_table_t::key_type*)mask);
            npl_ipv6_sip_compression_table_t::value_type v(*(npl_ipv6_sip_compression_table_t::value_type*)value);
            npl_ipv6_sip_compression_table_t::entry_pointer_type entry_pointer;
            return ipv6_sip_compression_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_lpts_ctrl_fields_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_ctrl_fields_static_table_t::key_type k(*(npl_l2_lpts_ctrl_fields_static_table_t::key_type*)key);
            npl_l2_lpts_ctrl_fields_static_table_t::key_type m(*(npl_l2_lpts_ctrl_fields_static_table_t::key_type*)mask);
            npl_l2_lpts_ctrl_fields_static_table_t::value_type v(*(npl_l2_lpts_ctrl_fields_static_table_t::value_type*)value);
            npl_l2_lpts_ctrl_fields_static_table_t::entry_pointer_type entry_pointer;
            return l2_lpts_ctrl_fields_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_lpts_ipv4_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_ipv4_table_t::key_type k(*(npl_l2_lpts_ipv4_table_t::key_type*)key);
            npl_l2_lpts_ipv4_table_t::key_type m(*(npl_l2_lpts_ipv4_table_t::key_type*)mask);
            npl_l2_lpts_ipv4_table_t::value_type v(*(npl_l2_lpts_ipv4_table_t::value_type*)value);
            npl_l2_lpts_ipv4_table_t::entry_pointer_type entry_pointer;
            return l2_lpts_ipv4_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_lpts_ipv6_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_ipv6_table_t::key_type k(*(npl_l2_lpts_ipv6_table_t::key_type*)key);
            npl_l2_lpts_ipv6_table_t::key_type m(*(npl_l2_lpts_ipv6_table_t::key_type*)mask);
            npl_l2_lpts_ipv6_table_t::value_type v(*(npl_l2_lpts_ipv6_table_t::value_type*)value);
            npl_l2_lpts_ipv6_table_t::entry_pointer_type entry_pointer;
            return l2_lpts_ipv6_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_lpts_mac_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_mac_table_t::key_type k(*(npl_l2_lpts_mac_table_t::key_type*)key);
            npl_l2_lpts_mac_table_t::key_type m(*(npl_l2_lpts_mac_table_t::key_type*)mask);
            npl_l2_lpts_mac_table_t::value_type v(*(npl_l2_lpts_mac_table_t::value_type*)value);
            npl_l2_lpts_mac_table_t::entry_pointer_type entry_pointer;
            return l2_lpts_mac_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_lpts_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_next_macro_static_table_t::key_type k(*(npl_l2_lpts_next_macro_static_table_t::key_type*)key);
            npl_l2_lpts_next_macro_static_table_t::key_type m(*(npl_l2_lpts_next_macro_static_table_t::key_type*)mask);
            npl_l2_lpts_next_macro_static_table_t::value_type v(*(npl_l2_lpts_next_macro_static_table_t::value_type*)value);
            npl_l2_lpts_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return l2_lpts_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_lpts_protocol_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_protocol_table_t::key_type k(*(npl_l2_lpts_protocol_table_t::key_type*)key);
            npl_l2_lpts_protocol_table_t::key_type m(*(npl_l2_lpts_protocol_table_t::key_type*)mask);
            npl_l2_lpts_protocol_table_t::value_type v(*(npl_l2_lpts_protocol_table_t::value_type*)value);
            npl_l2_lpts_protocol_table_t::entry_pointer_type entry_pointer;
            return l2_lpts_protocol_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l2_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_termination_next_macro_static_table_t::key_type k(*(npl_l2_termination_next_macro_static_table_t::key_type*)key);
            npl_l2_termination_next_macro_static_table_t::key_type m(*(npl_l2_termination_next_macro_static_table_t::key_type*)mask);
            npl_l2_termination_next_macro_static_table_t::value_type v(*(npl_l2_termination_next_macro_static_table_t::value_type*)value);
            npl_l2_termination_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return l2_termination_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l3_dlp_p_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_dlp_p_counter_offset_table_t::key_type k(*(npl_l3_dlp_p_counter_offset_table_t::key_type*)key);
            npl_l3_dlp_p_counter_offset_table_t::key_type m(*(npl_l3_dlp_p_counter_offset_table_t::key_type*)mask);
            npl_l3_dlp_p_counter_offset_table_t::value_type v(*(npl_l3_dlp_p_counter_offset_table_t::value_type*)value);
            npl_l3_dlp_p_counter_offset_table_t::entry_pointer_type entry_pointer;
            return l3_dlp_p_counter_offset_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l3_termination_classify_ip_tunnels_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_termination_classify_ip_tunnels_table_t::key_type k(*(npl_l3_termination_classify_ip_tunnels_table_t::key_type*)key);
            npl_l3_termination_classify_ip_tunnels_table_t::key_type m(*(npl_l3_termination_classify_ip_tunnels_table_t::key_type*)mask);
            npl_l3_termination_classify_ip_tunnels_table_t::value_type v(*(npl_l3_termination_classify_ip_tunnels_table_t::value_type*)value);
            npl_l3_termination_classify_ip_tunnels_table_t::entry_pointer_type entry_pointer;
            return l3_termination_classify_ip_tunnels_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l3_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_termination_next_macro_static_table_t::key_type k(*(npl_l3_termination_next_macro_static_table_t::key_type*)key);
            npl_l3_termination_next_macro_static_table_t::key_type m(*(npl_l3_termination_next_macro_static_table_t::key_type*)mask);
            npl_l3_termination_next_macro_static_table_t::value_type v(*(npl_l3_termination_next_macro_static_table_t::value_type*)value);
            npl_l3_termination_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return l3_termination_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "l3_tunnel_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_tunnel_termination_next_macro_static_table_t::key_type k(*(npl_l3_tunnel_termination_next_macro_static_table_t::key_type*)key);
            npl_l3_tunnel_termination_next_macro_static_table_t::key_type m(*(npl_l3_tunnel_termination_next_macro_static_table_t::key_type*)mask);
            npl_l3_tunnel_termination_next_macro_static_table_t::value_type v(*(npl_l3_tunnel_termination_next_macro_static_table_t::value_type*)value);
            npl_l3_tunnel_termination_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return l3_tunnel_termination_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "light_fi_nw_0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_nw_0_table_t::key_type k(*(npl_light_fi_nw_0_table_t::key_type*)key);
            npl_light_fi_nw_0_table_t::key_type m(*(npl_light_fi_nw_0_table_t::key_type*)mask);
            npl_light_fi_nw_0_table_t::value_type v(*(npl_light_fi_nw_0_table_t::value_type*)value);
            npl_light_fi_nw_0_table_t::entry_pointer_type entry_pointer;
            return light_fi_nw_0_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "light_fi_nw_1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_nw_1_table_t::key_type k(*(npl_light_fi_nw_1_table_t::key_type*)key);
            npl_light_fi_nw_1_table_t::key_type m(*(npl_light_fi_nw_1_table_t::key_type*)mask);
            npl_light_fi_nw_1_table_t::value_type v(*(npl_light_fi_nw_1_table_t::value_type*)value);
            npl_light_fi_nw_1_table_t::entry_pointer_type entry_pointer;
            return light_fi_nw_1_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "light_fi_nw_2_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_nw_2_table_t::key_type k(*(npl_light_fi_nw_2_table_t::key_type*)key);
            npl_light_fi_nw_2_table_t::key_type m(*(npl_light_fi_nw_2_table_t::key_type*)mask);
            npl_light_fi_nw_2_table_t::value_type v(*(npl_light_fi_nw_2_table_t::value_type*)value);
            npl_light_fi_nw_2_table_t::entry_pointer_type entry_pointer;
            return light_fi_nw_2_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "light_fi_nw_3_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_nw_3_table_t::key_type k(*(npl_light_fi_nw_3_table_t::key_type*)key);
            npl_light_fi_nw_3_table_t::key_type m(*(npl_light_fi_nw_3_table_t::key_type*)mask);
            npl_light_fi_nw_3_table_t::value_type v(*(npl_light_fi_nw_3_table_t::value_type*)value);
            npl_light_fi_nw_3_table_t::entry_pointer_type entry_pointer;
            return light_fi_nw_3_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "lpts_og_application_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpts_og_application_table_t::key_type k(*(npl_lpts_og_application_table_t::key_type*)key);
            npl_lpts_og_application_table_t::key_type m(*(npl_lpts_og_application_table_t::key_type*)mask);
            npl_lpts_og_application_table_t::value_type v(*(npl_lpts_og_application_table_t::value_type*)value);
            npl_lpts_og_application_table_t::entry_pointer_type entry_pointer;
            return lpts_og_application_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_da_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_da_table_t::key_type k(*(npl_mac_da_table_t::key_type*)key);
            npl_mac_da_table_t::key_type m(*(npl_mac_da_table_t::key_type*)mask);
            npl_mac_da_table_t::value_type v(*(npl_mac_da_table_t::value_type*)value);
            npl_mac_da_table_t::entry_pointer_type entry_pointer;
            return mac_da_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_ethernet_rate_limit_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_ethernet_rate_limit_type_static_table_t::key_type k(*(npl_mac_ethernet_rate_limit_type_static_table_t::key_type*)key);
            npl_mac_ethernet_rate_limit_type_static_table_t::key_type m(*(npl_mac_ethernet_rate_limit_type_static_table_t::key_type*)mask);
            npl_mac_ethernet_rate_limit_type_static_table_t::value_type v(*(npl_mac_ethernet_rate_limit_type_static_table_t::value_type*)value);
            npl_mac_ethernet_rate_limit_type_static_table_t::entry_pointer_type entry_pointer;
            return mac_ethernet_rate_limit_type_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_mc_tcam_termination_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_mc_tcam_termination_attributes_table_t::key_type k(*(npl_mac_mc_tcam_termination_attributes_table_t::key_type*)key);
            npl_mac_mc_tcam_termination_attributes_table_t::key_type m(*(npl_mac_mc_tcam_termination_attributes_table_t::key_type*)mask);
            npl_mac_mc_tcam_termination_attributes_table_t::value_type v(*(npl_mac_mc_tcam_termination_attributes_table_t::value_type*)value);
            npl_mac_mc_tcam_termination_attributes_table_t::entry_pointer_type entry_pointer;
            return mac_mc_tcam_termination_attributes_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_termination_next_macro_static_table_t::key_type k(*(npl_mac_termination_next_macro_static_table_t::key_type*)key);
            npl_mac_termination_next_macro_static_table_t::key_type m(*(npl_mac_termination_next_macro_static_table_t::key_type*)mask);
            npl_mac_termination_next_macro_static_table_t::value_type v(*(npl_mac_termination_next_macro_static_table_t::value_type*)value);
            npl_mac_termination_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return mac_termination_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mac_termination_tcam_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_termination_tcam_table_t::key_type k(*(npl_mac_termination_tcam_table_t::key_type*)key);
            npl_mac_termination_tcam_table_t::key_type m(*(npl_mac_termination_tcam_table_t::key_type*)mask);
            npl_mac_termination_tcam_table_t::value_type v(*(npl_mac_termination_tcam_table_t::value_type*)value);
            npl_mac_termination_tcam_table_t::entry_pointer_type entry_pointer;
            return mac_termination_tcam_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "map_inject_ccm_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_inject_ccm_macro_static_table_t::key_type k(*(npl_map_inject_ccm_macro_static_table_t::key_type*)key);
            npl_map_inject_ccm_macro_static_table_t::key_type m(*(npl_map_inject_ccm_macro_static_table_t::key_type*)mask);
            npl_map_inject_ccm_macro_static_table_t::value_type v(*(npl_map_inject_ccm_macro_static_table_t::value_type*)value);
            npl_map_inject_ccm_macro_static_table_t::entry_pointer_type entry_pointer;
            return map_inject_ccm_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "map_tx_punt_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_tx_punt_next_macro_static_table_t::key_type k(*(npl_map_tx_punt_next_macro_static_table_t::key_type*)key);
            npl_map_tx_punt_next_macro_static_table_t::key_type m(*(npl_map_tx_punt_next_macro_static_table_t::key_type*)mask);
            npl_map_tx_punt_next_macro_static_table_t::value_type v(*(npl_map_tx_punt_next_macro_static_table_t::value_type*)value);
            npl_map_tx_punt_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return map_tx_punt_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "map_tx_punt_rcy_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_tx_punt_rcy_next_macro_static_table_t::key_type k(*(npl_map_tx_punt_rcy_next_macro_static_table_t::key_type*)key);
            npl_map_tx_punt_rcy_next_macro_static_table_t::key_type m(*(npl_map_tx_punt_rcy_next_macro_static_table_t::key_type*)mask);
            npl_map_tx_punt_rcy_next_macro_static_table_t::value_type v(*(npl_map_tx_punt_rcy_next_macro_static_table_t::value_type*)value);
            npl_map_tx_punt_rcy_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return map_tx_punt_rcy_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "meg_id_format_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_meg_id_format_table_t::key_type k(*(npl_meg_id_format_table_t::key_type*)key);
            npl_meg_id_format_table_t::key_type m(*(npl_meg_id_format_table_t::key_type*)mask);
            npl_meg_id_format_table_t::value_type v(*(npl_meg_id_format_table_t::value_type*)value);
            npl_meg_id_format_table_t::entry_pointer_type entry_pointer;
            return meg_id_format_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mldp_protection_enabled_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mldp_protection_enabled_static_table_t::key_type k(*(npl_mldp_protection_enabled_static_table_t::key_type*)key);
            npl_mldp_protection_enabled_static_table_t::key_type m(*(npl_mldp_protection_enabled_static_table_t::key_type*)mask);
            npl_mldp_protection_enabled_static_table_t::value_type v(*(npl_mldp_protection_enabled_static_table_t::value_type*)value);
            npl_mldp_protection_enabled_static_table_t::entry_pointer_type entry_pointer;
            return mldp_protection_enabled_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_resolve_service_labels_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_resolve_service_labels_static_table_t::key_type k(*(npl_mpls_resolve_service_labels_static_table_t::key_type*)key);
            npl_mpls_resolve_service_labels_static_table_t::key_type m(*(npl_mpls_resolve_service_labels_static_table_t::key_type*)mask);
            npl_mpls_resolve_service_labels_static_table_t::value_type v(*(npl_mpls_resolve_service_labels_static_table_t::value_type*)value);
            npl_mpls_resolve_service_labels_static_table_t::entry_pointer_type entry_pointer;
            return mpls_resolve_service_labels_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "mpls_vpn_enabled_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_vpn_enabled_static_table_t::key_type k(*(npl_mpls_vpn_enabled_static_table_t::key_type*)key);
            npl_mpls_vpn_enabled_static_table_t::key_type m(*(npl_mpls_vpn_enabled_static_table_t::key_type*)mask);
            npl_mpls_vpn_enabled_static_table_t::value_type v(*(npl_mpls_vpn_enabled_static_table_t::value_type*)value);
            npl_mpls_vpn_enabled_static_table_t::entry_pointer_type entry_pointer;
            return mpls_vpn_enabled_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "my_ipv4_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_my_ipv4_table_t::key_type k(*(npl_my_ipv4_table_t::key_type*)key);
            npl_my_ipv4_table_t::key_type m(*(npl_my_ipv4_table_t::key_type*)mask);
            npl_my_ipv4_table_t::value_type v(*(npl_my_ipv4_table_t::value_type*)value);
            npl_my_ipv4_table_t::entry_pointer_type entry_pointer;
            return my_ipv4_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "null_rtf_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_null_rtf_next_macro_static_table_t::key_type k(*(npl_null_rtf_next_macro_static_table_t::key_type*)key);
            npl_null_rtf_next_macro_static_table_t::key_type m(*(npl_null_rtf_next_macro_static_table_t::key_type*)mask);
            npl_null_rtf_next_macro_static_table_t::value_type v(*(npl_null_rtf_next_macro_static_table_t::value_type*)value);
            npl_null_rtf_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return null_rtf_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "obm_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_obm_next_macro_static_table_t::key_type k(*(npl_obm_next_macro_static_table_t::key_type*)key);
            npl_obm_next_macro_static_table_t::key_type m(*(npl_obm_next_macro_static_table_t::key_type*)mask);
            npl_obm_next_macro_static_table_t::value_type v(*(npl_obm_next_macro_static_table_t::value_type*)value);
            npl_obm_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return obm_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "og_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_og_next_macro_static_table_t::key_type k(*(npl_og_next_macro_static_table_t::key_type*)key);
            npl_og_next_macro_static_table_t::key_type m(*(npl_og_next_macro_static_table_t::key_type*)mask);
            npl_og_next_macro_static_table_t::value_type v(*(npl_og_next_macro_static_table_t::value_type*)value);
            npl_og_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return og_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pad_mtu_inj_check_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pad_mtu_inj_check_static_table_t::key_type k(*(npl_pad_mtu_inj_check_static_table_t::key_type*)key);
            npl_pad_mtu_inj_check_static_table_t::key_type m(*(npl_pad_mtu_inj_check_static_table_t::key_type*)mask);
            npl_pad_mtu_inj_check_static_table_t::value_type v(*(npl_pad_mtu_inj_check_static_table_t::value_type*)value);
            npl_pad_mtu_inj_check_static_table_t::entry_pointer_type entry_pointer;
            return pad_mtu_inj_check_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pfc_filter_wd_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_filter_wd_table_t::key_type k(*(npl_pfc_filter_wd_table_t::key_type*)key);
            npl_pfc_filter_wd_table_t::key_type m(*(npl_pfc_filter_wd_table_t::key_type*)mask);
            npl_pfc_filter_wd_table_t::value_type v(*(npl_pfc_filter_wd_table_t::value_type*)value);
            npl_pfc_filter_wd_table_t::entry_pointer_type entry_pointer;
            return pfc_filter_wd_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pfc_offset_from_vector_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_offset_from_vector_static_table_t::key_type k(*(npl_pfc_offset_from_vector_static_table_t::key_type*)key);
            npl_pfc_offset_from_vector_static_table_t::key_type m(*(npl_pfc_offset_from_vector_static_table_t::key_type*)mask);
            npl_pfc_offset_from_vector_static_table_t::value_type v(*(npl_pfc_offset_from_vector_static_table_t::value_type*)value);
            npl_pfc_offset_from_vector_static_table_t::entry_pointer_type entry_pointer;
            return pfc_offset_from_vector_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pfc_ssp_slice_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_ssp_slice_map_table_t::key_type k(*(npl_pfc_ssp_slice_map_table_t::key_type*)key);
            npl_pfc_ssp_slice_map_table_t::key_type m(*(npl_pfc_ssp_slice_map_table_t::key_type*)mask);
            npl_pfc_ssp_slice_map_table_t::value_type v(*(npl_pfc_ssp_slice_map_table_t::value_type*)value);
            npl_pfc_ssp_slice_map_table_t::entry_pointer_type entry_pointer;
            return pfc_ssp_slice_map_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pfc_tc_latency_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_tc_latency_table_t::key_type k(*(npl_pfc_tc_latency_table_t::key_type*)key);
            npl_pfc_tc_latency_table_t::key_type m(*(npl_pfc_tc_latency_table_t::key_type*)mask);
            npl_pfc_tc_latency_table_t::value_type v(*(npl_pfc_tc_latency_table_t::value_type*)value);
            npl_pfc_tc_latency_table_t::entry_pointer_type entry_pointer;
            return pfc_tc_latency_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "pfc_tc_wrap_latency_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_tc_wrap_latency_table_t::key_type k(*(npl_pfc_tc_wrap_latency_table_t::key_type*)key);
            npl_pfc_tc_wrap_latency_table_t::key_type m(*(npl_pfc_tc_wrap_latency_table_t::key_type*)mask);
            npl_pfc_tc_wrap_latency_table_t::value_type v(*(npl_pfc_tc_wrap_latency_table_t::value_type*)value);
            npl_pfc_tc_wrap_latency_table_t::entry_pointer_type entry_pointer;
            return pfc_tc_wrap_latency_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "punt_ethertype_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_ethertype_static_table_t::key_type k(*(npl_punt_ethertype_static_table_t::key_type*)key);
            npl_punt_ethertype_static_table_t::key_type m(*(npl_punt_ethertype_static_table_t::key_type*)mask);
            npl_punt_ethertype_static_table_t::value_type v(*(npl_punt_ethertype_static_table_t::value_type*)value);
            npl_punt_ethertype_static_table_t::entry_pointer_type entry_pointer;
            return punt_ethertype_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "redirect_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_redirect_table_t::key_type k(*(npl_redirect_table_t::key_type*)key);
            npl_redirect_table_t::key_type m(*(npl_redirect_table_t::key_type*)mask);
            npl_redirect_table_t::value_type v(*(npl_redirect_table_t::value_type*)value);
            npl_redirect_table_t::entry_pointer_type entry_pointer;
            return redirect_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "resolution_pfc_select_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_resolution_pfc_select_table_t::key_type k(*(npl_resolution_pfc_select_table_t::key_type*)key);
            npl_resolution_pfc_select_table_t::key_type m(*(npl_resolution_pfc_select_table_t::key_type*)mask);
            npl_resolution_pfc_select_table_t::value_type v(*(npl_resolution_pfc_select_table_t::value_type*)value);
            npl_resolution_pfc_select_table_t::entry_pointer_type entry_pointer;
            return resolution_pfc_select_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rtf_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_next_macro_static_table_t::key_type k(*(npl_rtf_next_macro_static_table_t::key_type*)key);
            npl_rtf_next_macro_static_table_t::key_type m(*(npl_rtf_next_macro_static_table_t::key_type*)mask);
            npl_rtf_next_macro_static_table_t::value_type v(*(npl_rtf_next_macro_static_table_t::value_type*)value);
            npl_rtf_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return rtf_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "rx_redirect_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_redirect_next_macro_static_table_t::key_type k(*(npl_rx_redirect_next_macro_static_table_t::key_type*)key);
            npl_rx_redirect_next_macro_static_table_t::key_type m(*(npl_rx_redirect_next_macro_static_table_t::key_type*)mask);
            npl_rx_redirect_next_macro_static_table_t::value_type v(*(npl_rx_redirect_next_macro_static_table_t::value_type*)value);
            npl_rx_redirect_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return rx_redirect_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "second_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_second_ene_static_table_t::key_type k(*(npl_second_ene_static_table_t::key_type*)key);
            npl_second_ene_static_table_t::key_type m(*(npl_second_ene_static_table_t::key_type*)mask);
            npl_second_ene_static_table_t::value_type v(*(npl_second_ene_static_table_t::value_type*)value);
            npl_second_ene_static_table_t::entry_pointer_type entry_pointer;
            return second_ene_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "select_inject_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_select_inject_next_macro_static_table_t::key_type k(*(npl_select_inject_next_macro_static_table_t::key_type*)key);
            npl_select_inject_next_macro_static_table_t::key_type m(*(npl_select_inject_next_macro_static_table_t::key_type*)mask);
            npl_select_inject_next_macro_static_table_t::value_type v(*(npl_select_inject_next_macro_static_table_t::value_type*)value);
            npl_select_inject_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return select_inject_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_tcam_ac_port_table_t::key_type k(*(npl_service_mapping_tcam_ac_port_table_t::key_type*)key);
            npl_service_mapping_tcam_ac_port_table_t::key_type m(*(npl_service_mapping_tcam_ac_port_table_t::key_type*)mask);
            npl_service_mapping_tcam_ac_port_table_t::value_type v(*(npl_service_mapping_tcam_ac_port_table_t::value_type*)value);
            npl_service_mapping_tcam_ac_port_table_t::entry_pointer_type entry_pointer;
            return service_mapping_tcam_ac_port_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_tcam_ac_port_tag_table_t::key_type k(*(npl_service_mapping_tcam_ac_port_tag_table_t::key_type*)key);
            npl_service_mapping_tcam_ac_port_tag_table_t::key_type m(*(npl_service_mapping_tcam_ac_port_tag_table_t::key_type*)mask);
            npl_service_mapping_tcam_ac_port_tag_table_t::value_type v(*(npl_service_mapping_tcam_ac_port_tag_table_t::value_type*)value);
            npl_service_mapping_tcam_ac_port_tag_table_t::entry_pointer_type entry_pointer;
            return service_mapping_tcam_ac_port_tag_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_tag_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_tcam_ac_port_tag_tag_table_t::key_type k(*(npl_service_mapping_tcam_ac_port_tag_tag_table_t::key_type*)key);
            npl_service_mapping_tcam_ac_port_tag_tag_table_t::key_type m(*(npl_service_mapping_tcam_ac_port_tag_tag_table_t::key_type*)mask);
            npl_service_mapping_tcam_ac_port_tag_tag_table_t::value_type v(*(npl_service_mapping_tcam_ac_port_tag_tag_table_t::value_type*)value);
            npl_service_mapping_tcam_ac_port_tag_tag_table_t::entry_pointer_type entry_pointer;
            return service_mapping_tcam_ac_port_tag_tag_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_pwe_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_tcam_pwe_tag_table_t::key_type k(*(npl_service_mapping_tcam_pwe_tag_table_t::key_type*)key);
            npl_service_mapping_tcam_pwe_tag_table_t::key_type m(*(npl_service_mapping_tcam_pwe_tag_table_t::key_type*)mask);
            npl_service_mapping_tcam_pwe_tag_table_t::value_type v(*(npl_service_mapping_tcam_pwe_tag_table_t::value_type*)value);
            npl_service_mapping_tcam_pwe_tag_table_t::entry_pointer_type entry_pointer;
            return service_mapping_tcam_pwe_tag_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "sgacl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_sgacl_table_t::key_type k(*(npl_sgacl_table_t::key_type*)key);
            npl_sgacl_table_t::key_type m(*(npl_sgacl_table_t::key_type*)mask);
            npl_sgacl_table_t::value_type v(*(npl_sgacl_table_t::value_type*)value);
            npl_sgacl_table_t::entry_pointer_type entry_pointer;
            return sgacl_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "snoop_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_snoop_table_t::key_type k(*(npl_snoop_table_t::key_type*)key);
            npl_snoop_table_t::key_type m(*(npl_snoop_table_t::key_type*)mask);
            npl_snoop_table_t::value_type v(*(npl_snoop_table_t::value_type*)value);
            npl_snoop_table_t::entry_pointer_type entry_pointer;
            return snoop_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "svl_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_svl_next_macro_static_table_t::key_type k(*(npl_svl_next_macro_static_table_t::key_type*)key);
            npl_svl_next_macro_static_table_t::key_type m(*(npl_svl_next_macro_static_table_t::key_type*)mask);
            npl_svl_next_macro_static_table_t::value_type v(*(npl_svl_next_macro_static_table_t::value_type*)value);
            npl_svl_next_macro_static_table_t::entry_pointer_type entry_pointer;
            return svl_next_macro_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "te_headend_lsp_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_te_headend_lsp_counter_offset_table_t::key_type k(*(npl_te_headend_lsp_counter_offset_table_t::key_type*)key);
            npl_te_headend_lsp_counter_offset_table_t::key_type m(*(npl_te_headend_lsp_counter_offset_table_t::key_type*)mask);
            npl_te_headend_lsp_counter_offset_table_t::value_type v(*(npl_te_headend_lsp_counter_offset_table_t::value_type*)value);
            npl_te_headend_lsp_counter_offset_table_t::entry_pointer_type entry_pointer;
            return te_headend_lsp_counter_offset_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "tunnel_dlp_p_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tunnel_dlp_p_counter_offset_table_t::key_type k(*(npl_tunnel_dlp_p_counter_offset_table_t::key_type*)key);
            npl_tunnel_dlp_p_counter_offset_table_t::key_type m(*(npl_tunnel_dlp_p_counter_offset_table_t::key_type*)mask);
            npl_tunnel_dlp_p_counter_offset_table_t::value_type v(*(npl_tunnel_dlp_p_counter_offset_table_t::value_type*)value);
            npl_tunnel_dlp_p_counter_offset_table_t::entry_pointer_type entry_pointer;
            return tunnel_dlp_p_counter_offset_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "txpp_initial_npe_macro_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_initial_npe_macro_table_t::key_type k(*(npl_txpp_initial_npe_macro_table_t::key_type*)key);
            npl_txpp_initial_npe_macro_table_t::key_type m(*(npl_txpp_initial_npe_macro_table_t::key_type*)mask);
            npl_txpp_initial_npe_macro_table_t::value_type v(*(npl_txpp_initial_npe_macro_table_t::value_type*)value);
            npl_txpp_initial_npe_macro_table_t::entry_pointer_type entry_pointer;
            return txpp_initial_npe_macro_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "urpf_ipsa_dest_is_lpts_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_urpf_ipsa_dest_is_lpts_static_table_t::key_type k(*(npl_urpf_ipsa_dest_is_lpts_static_table_t::key_type*)key);
            npl_urpf_ipsa_dest_is_lpts_static_table_t::key_type m(*(npl_urpf_ipsa_dest_is_lpts_static_table_t::key_type*)mask);
            npl_urpf_ipsa_dest_is_lpts_static_table_t::value_type v(*(npl_urpf_ipsa_dest_is_lpts_static_table_t::value_type*)value);
            npl_urpf_ipsa_dest_is_lpts_static_table_t::entry_pointer_type entry_pointer;
            return urpf_ipsa_dest_is_lpts_static_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        if (strcmp(table_name, "vlan_format_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vlan_format_table_t::key_type k(*(npl_vlan_format_table_t::key_type*)key);
            npl_vlan_format_table_t::key_type m(*(npl_vlan_format_table_t::key_type*)mask);
            npl_vlan_format_table_t::value_type v(*(npl_vlan_format_table_t::value_type*)value);
            npl_vlan_format_table_t::entry_pointer_type entry_pointer;
            return vlan_format_table[instance_index].insert(line, k, m, v, entry_pointer);
        }
        
        return NPL_TABLES_STATUS_EUNKNOWN;
    }
    
    npl_tables_status_e npl_tables_t::insert_lpm_table_entry(const char* table_name, size_t instance_index, void* key, size_t length, void* value) {
        if (strcmp(table_name, "ipv4_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_lpm_table_t::key_type k(*(npl_ipv4_lpm_table_t::key_type*)key);
            npl_ipv4_lpm_table_t::value_type v(*(npl_ipv4_lpm_table_t::value_type*)value);
            npl_ipv4_lpm_table_t::entry_pointer_type entry_pointer;
            return ipv4_lpm_table[instance_index].insert(k, length, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv4_og_pcl_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_og_pcl_lpm_table_t::key_type k(*(npl_ipv4_og_pcl_lpm_table_t::key_type*)key);
            npl_ipv4_og_pcl_lpm_table_t::value_type v(*(npl_ipv4_og_pcl_lpm_table_t::value_type*)value);
            npl_ipv4_og_pcl_lpm_table_t::entry_pointer_type entry_pointer;
            return ipv4_og_pcl_lpm_table[instance_index].insert(k, length, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_lpm_table_t::key_type k(*(npl_ipv6_lpm_table_t::key_type*)key);
            npl_ipv6_lpm_table_t::value_type v(*(npl_ipv6_lpm_table_t::value_type*)value);
            npl_ipv6_lpm_table_t::entry_pointer_type entry_pointer;
            return ipv6_lpm_table[instance_index].insert(k, length, v, entry_pointer);
        }
        
        if (strcmp(table_name, "ipv6_og_pcl_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_og_pcl_lpm_table_t::key_type k(*(npl_ipv6_og_pcl_lpm_table_t::key_type*)key);
            npl_ipv6_og_pcl_lpm_table_t::value_type v(*(npl_ipv6_og_pcl_lpm_table_t::value_type*)value);
            npl_ipv6_og_pcl_lpm_table_t::entry_pointer_type entry_pointer;
            return ipv6_og_pcl_lpm_table[instance_index].insert(k, length, v, entry_pointer);
        }
        
        return NPL_TABLES_STATUS_EUNKNOWN;
    }
    
    npl_tables_status_e npl_tables_t::update_table_entry(const char* table_name, size_t instance_index, void* key, void* value) {
        if (strcmp(table_name, "acl_map_fi_header_type_to_protocol_number_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_acl_map_fi_header_type_to_protocol_number_table_t::key_type k(*(npl_acl_map_fi_header_type_to_protocol_number_table_t::key_type*)key);
            npl_acl_map_fi_header_type_to_protocol_number_table_t::value_type v(*(npl_acl_map_fi_header_type_to_protocol_number_table_t::value_type*)value);
            return acl_map_fi_header_type_to_protocol_number_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "additional_labels_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_additional_labels_table_t::key_type k(*(npl_additional_labels_table_t::key_type*)key);
            npl_additional_labels_table_t::value_type v(*(npl_additional_labels_table_t::value_type*)value);
            return additional_labels_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "all_reachable_vector") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_all_reachable_vector_t::key_type k(*(npl_all_reachable_vector_t::key_type*)key);
            npl_all_reachable_vector_t::value_type v(*(npl_all_reachable_vector_t::value_type*)value);
            return all_reachable_vector[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_desired_tx_interval_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_desired_tx_interval_table_t::key_type k(*(npl_bfd_desired_tx_interval_table_t::key_type*)key);
            npl_bfd_desired_tx_interval_table_t::value_type v(*(npl_bfd_desired_tx_interval_table_t::value_type*)value);
            return bfd_desired_tx_interval_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_detection_multiple_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_detection_multiple_table_t::key_type k(*(npl_bfd_detection_multiple_table_t::key_type*)key);
            npl_bfd_detection_multiple_table_t::value_type v(*(npl_bfd_detection_multiple_table_t::value_type*)value);
            return bfd_detection_multiple_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_event_queue_table_t::key_type k(*(npl_bfd_event_queue_table_t::key_type*)key);
            npl_bfd_event_queue_table_t::value_type v(*(npl_bfd_event_queue_table_t::value_type*)value);
            return bfd_event_queue_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_da_high_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_inner_da_high_table_t::key_type k(*(npl_bfd_inject_inner_da_high_table_t::key_type*)key);
            npl_bfd_inject_inner_da_high_table_t::value_type v(*(npl_bfd_inject_inner_da_high_table_t::value_type*)value);
            return bfd_inject_inner_da_high_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_da_low_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_inner_da_low_table_t::key_type k(*(npl_bfd_inject_inner_da_low_table_t::key_type*)key);
            npl_bfd_inject_inner_da_low_table_t::value_type v(*(npl_bfd_inject_inner_da_low_table_t::value_type*)value);
            return bfd_inject_inner_da_low_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_ethernet_header_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_inner_ethernet_header_static_table_t::key_type k(*(npl_bfd_inject_inner_ethernet_header_static_table_t::key_type*)key);
            npl_bfd_inject_inner_ethernet_header_static_table_t::value_type v(*(npl_bfd_inject_inner_ethernet_header_static_table_t::value_type*)value);
            return bfd_inject_inner_ethernet_header_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_inject_ttl_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_ttl_static_table_t::key_type k(*(npl_bfd_inject_ttl_static_table_t::key_type*)key);
            npl_bfd_inject_ttl_static_table_t::value_type v(*(npl_bfd_inject_ttl_static_table_t::value_type*)value);
            return bfd_inject_ttl_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_A_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_A_table_t::key_type k(*(npl_bfd_ipv6_sip_A_table_t::key_type*)key);
            npl_bfd_ipv6_sip_A_table_t::value_type v(*(npl_bfd_ipv6_sip_A_table_t::value_type*)value);
            return bfd_ipv6_sip_A_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_B_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_B_table_t::key_type k(*(npl_bfd_ipv6_sip_B_table_t::key_type*)key);
            npl_bfd_ipv6_sip_B_table_t::value_type v(*(npl_bfd_ipv6_sip_B_table_t::value_type*)value);
            return bfd_ipv6_sip_B_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_C_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_C_table_t::key_type k(*(npl_bfd_ipv6_sip_C_table_t::key_type*)key);
            npl_bfd_ipv6_sip_C_table_t::value_type v(*(npl_bfd_ipv6_sip_C_table_t::value_type*)value);
            return bfd_ipv6_sip_C_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_D_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_D_table_t::key_type k(*(npl_bfd_ipv6_sip_D_table_t::key_type*)key);
            npl_bfd_ipv6_sip_D_table_t::value_type v(*(npl_bfd_ipv6_sip_D_table_t::value_type*)value);
            return bfd_ipv6_sip_D_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_punt_encap_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_punt_encap_static_table_t::key_type k(*(npl_bfd_punt_encap_static_table_t::key_type*)key);
            npl_bfd_punt_encap_static_table_t::value_type v(*(npl_bfd_punt_encap_static_table_t::value_type*)value);
            return bfd_punt_encap_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_required_tx_interval_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_required_tx_interval_table_t::key_type k(*(npl_bfd_required_tx_interval_table_t::key_type*)key);
            npl_bfd_required_tx_interval_table_t::value_type v(*(npl_bfd_required_tx_interval_table_t::value_type*)value);
            return bfd_required_tx_interval_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_rx_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_rx_table_t::key_type k(*(npl_bfd_rx_table_t::key_type*)key);
            npl_bfd_rx_table_t::value_type v(*(npl_bfd_rx_table_t::value_type*)value);
            return bfd_rx_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_set_inject_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_set_inject_type_static_table_t::key_type k(*(npl_bfd_set_inject_type_static_table_t::key_type*)key);
            npl_bfd_set_inject_type_static_table_t::value_type v(*(npl_bfd_set_inject_type_static_table_t::value_type*)value);
            return bfd_set_inject_type_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bfd_udp_port_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_udp_port_static_table_t::key_type k(*(npl_bfd_udp_port_static_table_t::key_type*)key);
            npl_bfd_udp_port_static_table_t::value_type v(*(npl_bfd_udp_port_static_table_t::value_type*)value);
            return bfd_udp_port_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bitmap_oqg_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bitmap_oqg_map_table_t::key_type k(*(npl_bitmap_oqg_map_table_t::key_type*)key);
            npl_bitmap_oqg_map_table_t::value_type v(*(npl_bitmap_oqg_map_table_t::value_type*)value);
            return bitmap_oqg_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "bvn_tc_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bvn_tc_map_table_t::key_type k(*(npl_bvn_tc_map_table_t::key_type*)key);
            npl_bvn_tc_map_table_t::value_type v(*(npl_bvn_tc_map_table_t::value_type*)value);
            return bvn_tc_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "calc_checksum_enable_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_calc_checksum_enable_table_t::key_type k(*(npl_calc_checksum_enable_table_t::key_type*)key);
            npl_calc_checksum_enable_table_t::value_type v(*(npl_calc_checksum_enable_table_t::value_type*)value);
            return calc_checksum_enable_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ccm_flags_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ccm_flags_table_t::key_type k(*(npl_ccm_flags_table_t::key_type*)key);
            npl_ccm_flags_table_t::value_type v(*(npl_ccm_flags_table_t::value_type*)value);
            return ccm_flags_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "cif2npa_c_lri_macro") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cif2npa_c_lri_macro_t::key_type k(*(npl_cif2npa_c_lri_macro_t::key_type*)key);
            npl_cif2npa_c_lri_macro_t::value_type v(*(npl_cif2npa_c_lri_macro_t::value_type*)value);
            return cif2npa_c_lri_macro[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "cif2npa_c_mps_macro") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cif2npa_c_mps_macro_t::key_type k(*(npl_cif2npa_c_mps_macro_t::key_type*)key);
            npl_cif2npa_c_mps_macro_t::value_type v(*(npl_cif2npa_c_mps_macro_t::value_type*)value);
            return cif2npa_c_mps_macro[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "counters_block_config_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_counters_block_config_table_t::key_type k(*(npl_counters_block_config_table_t::key_type*)key);
            npl_counters_block_config_table_t::value_type v(*(npl_counters_block_config_table_t::value_type*)value);
            return counters_block_config_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "counters_voq_block_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_counters_voq_block_map_table_t::key_type k(*(npl_counters_voq_block_map_table_t::key_type*)key);
            npl_counters_voq_block_map_table_t::value_type v(*(npl_counters_voq_block_map_table_t::value_type*)value);
            return counters_voq_block_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "cud_is_multicast_bitmap") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cud_is_multicast_bitmap_t::key_type k(*(npl_cud_is_multicast_bitmap_t::key_type*)key);
            npl_cud_is_multicast_bitmap_t::value_type v(*(npl_cud_is_multicast_bitmap_t::value_type*)value);
            return cud_is_multicast_bitmap[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "cud_narrow_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cud_narrow_hw_table_t::key_type k(*(npl_cud_narrow_hw_table_t::key_type*)key);
            npl_cud_narrow_hw_table_t::value_type v(*(npl_cud_narrow_hw_table_t::value_type*)value);
            return cud_narrow_hw_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "cud_wide_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cud_wide_hw_table_t::key_type k(*(npl_cud_wide_hw_table_t::key_type*)key);
            npl_cud_wide_hw_table_t::value_type v(*(npl_cud_wide_hw_table_t::value_type*)value);
            return cud_wide_hw_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "dest_slice_voq_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dest_slice_voq_map_table_t::key_type k(*(npl_dest_slice_voq_map_table_t::key_type*)key);
            npl_dest_slice_voq_map_table_t::value_type v(*(npl_dest_slice_voq_map_table_t::value_type*)value);
            return dest_slice_voq_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "destination_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_destination_decoding_table_t::key_type k(*(npl_destination_decoding_table_t::key_type*)key);
            npl_destination_decoding_table_t::value_type v(*(npl_destination_decoding_table_t::value_type*)value);
            return destination_decoding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "device_mode_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_device_mode_table_t::key_type k(*(npl_device_mode_table_t::key_type*)key);
            npl_device_mode_table_t::value_type v(*(npl_device_mode_table_t::value_type*)value);
            return device_mode_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "dsp_l2_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dsp_l2_attributes_table_t::key_type k(*(npl_dsp_l2_attributes_table_t::key_type*)key);
            npl_dsp_l2_attributes_table_t::value_type v(*(npl_dsp_l2_attributes_table_t::value_type*)value);
            return dsp_l2_attributes_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "dsp_l3_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dsp_l3_attributes_table_t::key_type k(*(npl_dsp_l3_attributes_table_t::key_type*)key);
            npl_dsp_l3_attributes_table_t::value_type v(*(npl_dsp_l3_attributes_table_t::value_type*)value);
            return dsp_l3_attributes_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "dummy_dip_index_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dummy_dip_index_table_t::key_type k(*(npl_dummy_dip_index_table_t::key_type*)key);
            npl_dummy_dip_index_table_t::value_type v(*(npl_dummy_dip_index_table_t::value_type*)value);
            return dummy_dip_index_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "egress_nh_and_svi_direct0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_egress_nh_and_svi_direct0_table_t::key_type k(*(npl_egress_nh_and_svi_direct0_table_t::key_type*)key);
            npl_egress_nh_and_svi_direct0_table_t::value_type v(*(npl_egress_nh_and_svi_direct0_table_t::value_type*)value);
            return egress_nh_and_svi_direct0_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "egress_nh_and_svi_direct1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_egress_nh_and_svi_direct1_table_t::key_type k(*(npl_egress_nh_and_svi_direct1_table_t::key_type*)key);
            npl_egress_nh_and_svi_direct1_table_t::value_type v(*(npl_egress_nh_and_svi_direct1_table_t::value_type*)value);
            return egress_nh_and_svi_direct1_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "em_mp_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_em_mp_table_t::key_type k(*(npl_em_mp_table_t::key_type*)key);
            npl_em_mp_table_t::value_type v(*(npl_em_mp_table_t::value_type*)value);
            return em_mp_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "em_pfc_cong_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_em_pfc_cong_table_t::key_type k(*(npl_em_pfc_cong_table_t::key_type*)key);
            npl_em_pfc_cong_table_t::value_type v(*(npl_em_pfc_cong_table_t::value_type*)value);
            return em_pfc_cong_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ene_macro_code_tpid_profile_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ene_macro_code_tpid_profile_static_table_t::key_type k(*(npl_ene_macro_code_tpid_profile_static_table_t::key_type*)key);
            npl_ene_macro_code_tpid_profile_static_table_t::value_type v(*(npl_ene_macro_code_tpid_profile_static_table_t::value_type*)value);
            return ene_macro_code_tpid_profile_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "eth_meter_profile_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_meter_profile_mapping_table_t::key_type k(*(npl_eth_meter_profile_mapping_table_t::key_type*)key);
            npl_eth_meter_profile_mapping_table_t::value_type v(*(npl_eth_meter_profile_mapping_table_t::value_type*)value);
            return eth_meter_profile_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "eth_oam_set_da_mc2_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_oam_set_da_mc2_static_table_t::key_type k(*(npl_eth_oam_set_da_mc2_static_table_t::key_type*)key);
            npl_eth_oam_set_da_mc2_static_table_t::value_type v(*(npl_eth_oam_set_da_mc2_static_table_t::value_type*)value);
            return eth_oam_set_da_mc2_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "eth_oam_set_da_mc_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_oam_set_da_mc_static_table_t::key_type k(*(npl_eth_oam_set_da_mc_static_table_t::key_type*)key);
            npl_eth_oam_set_da_mc_static_table_t::value_type v(*(npl_eth_oam_set_da_mc_static_table_t::value_type*)value);
            return eth_oam_set_da_mc_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "eth_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_rtf_conf_set_mapping_table_t::key_type k(*(npl_eth_rtf_conf_set_mapping_table_t::key_type*)key);
            npl_eth_rtf_conf_set_mapping_table_t::value_type v(*(npl_eth_rtf_conf_set_mapping_table_t::value_type*)value);
            return eth_rtf_conf_set_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "eve_byte_addition_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eve_byte_addition_static_table_t::key_type k(*(npl_eve_byte_addition_static_table_t::key_type*)key);
            npl_eve_byte_addition_static_table_t::value_type v(*(npl_eve_byte_addition_static_table_t::value_type*)value);
            return eve_byte_addition_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "eve_to_ethernet_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eve_to_ethernet_ene_static_table_t::key_type k(*(npl_eve_to_ethernet_ene_static_table_t::key_type*)key);
            npl_eve_to_ethernet_ene_static_table_t::value_type v(*(npl_eve_to_ethernet_ene_static_table_t::value_type*)value);
            return eve_to_ethernet_ene_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_event_queue_table_t::key_type k(*(npl_event_queue_table_t::key_type*)key);
            npl_event_queue_table_t::value_type v(*(npl_event_queue_table_t::value_type*)value);
            return event_queue_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "external_aux_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_external_aux_table_t::key_type k(*(npl_external_aux_table_t::key_type*)key);
            npl_external_aux_table_t::value_type v(*(npl_external_aux_table_t::value_type*)value);
            return external_aux_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fabric_header_types_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_header_types_static_table_t::key_type k(*(npl_fabric_header_types_static_table_t::key_type*)key);
            npl_fabric_header_types_static_table_t::value_type v(*(npl_fabric_header_types_static_table_t::value_type*)value);
            return fabric_header_types_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fabric_rx_fwd_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_fwd_error_handling_counter_table_t::key_type k(*(npl_fabric_rx_fwd_error_handling_counter_table_t::key_type*)key);
            npl_fabric_rx_fwd_error_handling_counter_table_t::value_type v(*(npl_fabric_rx_fwd_error_handling_counter_table_t::value_type*)value);
            return fabric_rx_fwd_error_handling_counter_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fabric_rx_fwd_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_fwd_error_handling_destination_table_t::key_type k(*(npl_fabric_rx_fwd_error_handling_destination_table_t::key_type*)key);
            npl_fabric_rx_fwd_error_handling_destination_table_t::value_type v(*(npl_fabric_rx_fwd_error_handling_destination_table_t::value_type*)value);
            return fabric_rx_fwd_error_handling_destination_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fabric_rx_term_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_term_error_handling_counter_table_t::key_type k(*(npl_fabric_rx_term_error_handling_counter_table_t::key_type*)key);
            npl_fabric_rx_term_error_handling_counter_table_t::value_type v(*(npl_fabric_rx_term_error_handling_counter_table_t::value_type*)value);
            return fabric_rx_term_error_handling_counter_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fabric_rx_term_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_term_error_handling_destination_table_t::key_type k(*(npl_fabric_rx_term_error_handling_destination_table_t::key_type*)key);
            npl_fabric_rx_term_error_handling_destination_table_t::value_type v(*(npl_fabric_rx_term_error_handling_destination_table_t::value_type*)value);
            return fabric_rx_term_error_handling_destination_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fabric_scaled_mc_map_to_netork_slice_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::key_type k(*(npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::key_type*)key);
            npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::value_type v(*(npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::value_type*)value);
            return fabric_scaled_mc_map_to_netork_slice_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fabric_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_smcid_threshold_table_t::key_type k(*(npl_fabric_smcid_threshold_table_t::key_type*)key);
            npl_fabric_smcid_threshold_table_t::value_type v(*(npl_fabric_smcid_threshold_table_t::value_type*)value);
            return fabric_smcid_threshold_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fabric_tm_headers_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_tm_headers_table_t::key_type k(*(npl_fabric_tm_headers_table_t::key_type*)key);
            npl_fabric_tm_headers_table_t::value_type v(*(npl_fabric_tm_headers_table_t::value_type*)value);
            return fabric_tm_headers_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fb_link_2_link_bundle_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fb_link_2_link_bundle_table_t::key_type k(*(npl_fb_link_2_link_bundle_table_t::key_type*)key);
            npl_fb_link_2_link_bundle_table_t::value_type v(*(npl_fb_link_2_link_bundle_table_t::value_type*)value);
            return fb_link_2_link_bundle_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fe_broadcast_bmp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_broadcast_bmp_table_t::key_type k(*(npl_fe_broadcast_bmp_table_t::key_type*)key);
            npl_fe_broadcast_bmp_table_t::value_type v(*(npl_fe_broadcast_bmp_table_t::value_type*)value);
            return fe_broadcast_bmp_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fe_rlb_uc_tx_fb_link_to_oq_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::key_type k(*(npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::key_type*)key);
            npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::value_type v(*(npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::value_type*)value);
            return fe_rlb_uc_tx_fb_link_to_oq_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fe_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_smcid_threshold_table_t::key_type k(*(npl_fe_smcid_threshold_table_t::key_type*)key);
            npl_fe_smcid_threshold_table_t::value_type v(*(npl_fe_smcid_threshold_table_t::value_type*)value);
            return fe_smcid_threshold_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fe_smcid_to_mcid_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_smcid_to_mcid_table_t::key_type k(*(npl_fe_smcid_to_mcid_table_t::key_type*)key);
            npl_fe_smcid_to_mcid_table_t::value_type v(*(npl_fe_smcid_to_mcid_table_t::value_type*)value);
            return fe_smcid_to_mcid_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fe_uc_link_bundle_desc_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_uc_link_bundle_desc_table_t::key_type k(*(npl_fe_uc_link_bundle_desc_table_t::key_type*)key);
            npl_fe_uc_link_bundle_desc_table_t::value_type v(*(npl_fe_uc_link_bundle_desc_table_t::value_type*)value);
            return fe_uc_link_bundle_desc_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fi_macro_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fi_macro_config_table_t::key_type k(*(npl_fi_macro_config_table_t::key_type*)key);
            npl_fi_macro_config_table_t::value_type v(*(npl_fi_macro_config_table_t::value_type*)value);
            return fi_macro_config_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "filb_voq_mapping") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_filb_voq_mapping_t::key_type k(*(npl_filb_voq_mapping_t::key_type*)key);
            npl_filb_voq_mapping_t::value_type v(*(npl_filb_voq_mapping_t::value_type*)value);
            return filb_voq_mapping[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "first_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_first_ene_static_table_t::key_type k(*(npl_first_ene_static_table_t::key_type*)key);
            npl_first_ene_static_table_t::value_type v(*(npl_first_ene_static_table_t::value_type*)value);
            return first_ene_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "frm_db_fabric_routing_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_frm_db_fabric_routing_table_t::key_type k(*(npl_frm_db_fabric_routing_table_t::key_type*)key);
            npl_frm_db_fabric_routing_table_t::value_type v(*(npl_frm_db_fabric_routing_table_t::value_type*)value);
            return frm_db_fabric_routing_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fwd_destination_to_tm_result_data") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fwd_destination_to_tm_result_data_t::key_type k(*(npl_fwd_destination_to_tm_result_data_t::key_type*)key);
            npl_fwd_destination_to_tm_result_data_t::value_type v(*(npl_fwd_destination_to_tm_result_data_t::value_type*)value);
            return fwd_destination_to_tm_result_data[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "fwd_type_to_ive_enable_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fwd_type_to_ive_enable_table_t::key_type k(*(npl_fwd_type_to_ive_enable_table_t::key_type*)key);
            npl_fwd_type_to_ive_enable_table_t::value_type v(*(npl_fwd_type_to_ive_enable_table_t::value_type*)value);
            return fwd_type_to_ive_enable_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "get_ecm_meter_ptr_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_ecm_meter_ptr_table_t::key_type k(*(npl_get_ecm_meter_ptr_table_t::key_type*)key);
            npl_get_ecm_meter_ptr_table_t::value_type v(*(npl_get_ecm_meter_ptr_table_t::value_type*)value);
            return get_ecm_meter_ptr_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "get_ingress_ptp_info_and_is_slp_dm_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::key_type k(*(npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::key_type*)key);
            npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::value_type v(*(npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::value_type*)value);
            return get_ingress_ptp_info_and_is_slp_dm_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "get_l2_rtf_conf_set_and_init_stages") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_l2_rtf_conf_set_and_init_stages_t::key_type k(*(npl_get_l2_rtf_conf_set_and_init_stages_t::key_type*)key);
            npl_get_l2_rtf_conf_set_and_init_stages_t::value_type v(*(npl_get_l2_rtf_conf_set_and_init_stages_t::value_type*)value);
            return get_l2_rtf_conf_set_and_init_stages[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "get_non_comp_mc_value_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_non_comp_mc_value_static_table_t::key_type k(*(npl_get_non_comp_mc_value_static_table_t::key_type*)key);
            npl_get_non_comp_mc_value_static_table_t::value_type v(*(npl_get_non_comp_mc_value_static_table_t::value_type*)value);
            return get_non_comp_mc_value_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "gre_proto_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_gre_proto_static_table_t::key_type k(*(npl_gre_proto_static_table_t::key_type*)key);
            npl_gre_proto_static_table_t::value_type v(*(npl_gre_proto_static_table_t::value_type*)value);
            return gre_proto_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "hmc_cgm_cgm_lut_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_hmc_cgm_cgm_lut_table_t::key_type k(*(npl_hmc_cgm_cgm_lut_table_t::key_type*)key);
            npl_hmc_cgm_cgm_lut_table_t::value_type v(*(npl_hmc_cgm_cgm_lut_table_t::value_type*)value);
            return hmc_cgm_cgm_lut_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "hmc_cgm_profile_global_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_hmc_cgm_profile_global_table_t::key_type k(*(npl_hmc_cgm_profile_global_table_t::key_type*)key);
            npl_hmc_cgm_profile_global_table_t::value_type v(*(npl_hmc_cgm_profile_global_table_t::value_type*)value);
            return hmc_cgm_profile_global_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ibm_cmd_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ibm_cmd_table_t::key_type k(*(npl_ibm_cmd_table_t::key_type*)key);
            npl_ibm_cmd_table_t::value_type v(*(npl_ibm_cmd_table_t::value_type*)value);
            return ibm_cmd_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ibm_mc_cmd_to_encap_data_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ibm_mc_cmd_to_encap_data_table_t::key_type k(*(npl_ibm_mc_cmd_to_encap_data_table_t::key_type*)key);
            npl_ibm_mc_cmd_to_encap_data_table_t::value_type v(*(npl_ibm_mc_cmd_to_encap_data_table_t::value_type*)value);
            return ibm_mc_cmd_to_encap_data_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ibm_uc_cmd_to_encap_data_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ibm_uc_cmd_to_encap_data_table_t::key_type k(*(npl_ibm_uc_cmd_to_encap_data_table_t::key_type*)key);
            npl_ibm_uc_cmd_to_encap_data_table_t::value_type v(*(npl_ibm_uc_cmd_to_encap_data_table_t::value_type*)value);
            return ibm_uc_cmd_to_encap_data_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ifgb_tc_lut_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ifgb_tc_lut_table_t::key_type k(*(npl_ifgb_tc_lut_table_t::key_type*)key);
            npl_ifgb_tc_lut_table_t::value_type v(*(npl_ifgb_tc_lut_table_t::value_type*)value);
            return ifgb_tc_lut_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ingress_ip_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_ip_qos_mapping_table_t::key_type k(*(npl_ingress_ip_qos_mapping_table_t::key_type*)key);
            npl_ingress_ip_qos_mapping_table_t::value_type v(*(npl_ingress_ip_qos_mapping_table_t::value_type*)value);
            return ingress_ip_qos_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "inject_down_tx_redirect_counter_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_down_tx_redirect_counter_table_t::key_type k(*(npl_inject_down_tx_redirect_counter_table_t::key_type*)key);
            npl_inject_down_tx_redirect_counter_table_t::value_type v(*(npl_inject_down_tx_redirect_counter_table_t::value_type*)value);
            return inject_down_tx_redirect_counter_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "inject_mact_ldb_to_output_lr") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_mact_ldb_to_output_lr_t::key_type k(*(npl_inject_mact_ldb_to_output_lr_t::key_type*)key);
            npl_inject_mact_ldb_to_output_lr_t::value_type v(*(npl_inject_mact_ldb_to_output_lr_t::value_type*)value);
            return inject_mact_ldb_to_output_lr[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "inject_up_pif_ifg_init_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_up_pif_ifg_init_data_table_t::key_type k(*(npl_inject_up_pif_ifg_init_data_table_t::key_type*)key);
            npl_inject_up_pif_ifg_init_data_table_t::value_type v(*(npl_inject_up_pif_ifg_init_data_table_t::value_type*)value);
            return inject_up_pif_ifg_init_data_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "inject_up_ssp_init_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_up_ssp_init_data_table_t::key_type k(*(npl_inject_up_ssp_init_data_table_t::key_type*)key);
            npl_inject_up_ssp_init_data_table_t::value_type v(*(npl_inject_up_ssp_init_data_table_t::value_type*)value);
            return inject_up_ssp_init_data_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "inner_tpid_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inner_tpid_table_t::key_type k(*(npl_inner_tpid_table_t::key_type*)key);
            npl_inner_tpid_table_t::value_type v(*(npl_inner_tpid_table_t::value_type*)value);
            return inner_tpid_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ip_fwd_header_mapping_to_ethtype_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_fwd_header_mapping_to_ethtype_static_table_t::key_type k(*(npl_ip_fwd_header_mapping_to_ethtype_static_table_t::key_type*)key);
            npl_ip_fwd_header_mapping_to_ethtype_static_table_t::value_type v(*(npl_ip_fwd_header_mapping_to_ethtype_static_table_t::value_type*)value);
            return ip_fwd_header_mapping_to_ethtype_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ip_mc_local_inject_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_mc_local_inject_type_static_table_t::key_type k(*(npl_ip_mc_local_inject_type_static_table_t::key_type*)key);
            npl_ip_mc_local_inject_type_static_table_t::value_type v(*(npl_ip_mc_local_inject_type_static_table_t::value_type*)value);
            return ip_mc_local_inject_type_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ip_mc_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_mc_next_macro_static_table_t::key_type k(*(npl_ip_mc_next_macro_static_table_t::key_type*)key);
            npl_ip_mc_next_macro_static_table_t::value_type v(*(npl_ip_mc_next_macro_static_table_t::value_type*)value);
            return ip_mc_next_macro_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ip_meter_profile_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_meter_profile_mapping_table_t::key_type k(*(npl_ip_meter_profile_mapping_table_t::key_type*)key);
            npl_ip_meter_profile_mapping_table_t::value_type v(*(npl_ip_meter_profile_mapping_table_t::value_type*)value);
            return ip_meter_profile_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ip_prefix_destination_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_prefix_destination_table_t::key_type k(*(npl_ip_prefix_destination_table_t::key_type*)key);
            npl_ip_prefix_destination_table_t::value_type v(*(npl_ip_prefix_destination_table_t::value_type*)value);
            return ip_prefix_destination_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ip_relay_to_vni_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_relay_to_vni_table_t::key_type k(*(npl_ip_relay_to_vni_table_t::key_type*)key);
            npl_ip_relay_to_vni_table_t::value_type v(*(npl_ip_relay_to_vni_table_t::value_type*)value);
            return ip_relay_to_vni_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ip_rx_global_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_rx_global_counter_table_t::key_type k(*(npl_ip_rx_global_counter_table_t::key_type*)key);
            npl_ip_rx_global_counter_table_t::value_type v(*(npl_ip_rx_global_counter_table_t::value_type*)value);
            return ip_rx_global_counter_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv4_acl_sport_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_acl_sport_static_table_t::key_type k(*(npl_ipv4_acl_sport_static_table_t::key_type*)key);
            npl_ipv4_acl_sport_static_table_t::value_type v(*(npl_ipv4_acl_sport_static_table_t::value_type*)value);
            return ipv4_acl_sport_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_dip_index_tt0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::key_type k(*(npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::key_type*)key);
            npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::value_type v(*(npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::value_type*)value);
            return ipv4_ip_tunnel_termination_dip_index_tt0_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_sip_dip_index_tt0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::key_type k(*(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::key_type*)key);
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::value_type v(*(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::value_type*)value);
            return ipv4_ip_tunnel_termination_sip_dip_index_tt0_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_sip_dip_index_tt1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::key_type k(*(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::key_type*)key);
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::value_type v(*(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::value_type*)value);
            return ipv4_ip_tunnel_termination_sip_dip_index_tt1_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv4_og_pcl_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_og_pcl_em_table_t::key_type k(*(npl_ipv4_og_pcl_em_table_t::key_type*)key);
            npl_ipv4_og_pcl_em_table_t::value_type v(*(npl_ipv4_og_pcl_em_table_t::value_type*)value);
            return ipv4_og_pcl_em_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv4_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_rtf_conf_set_mapping_table_t::key_type k(*(npl_ipv4_rtf_conf_set_mapping_table_t::key_type*)key);
            npl_ipv4_rtf_conf_set_mapping_table_t::value_type v(*(npl_ipv4_rtf_conf_set_mapping_table_t::value_type*)value);
            return ipv4_rtf_conf_set_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv4_vrf_dip_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_vrf_dip_em_table_t::key_type k(*(npl_ipv4_vrf_dip_em_table_t::key_type*)key);
            npl_ipv4_vrf_dip_em_table_t::value_type v(*(npl_ipv4_vrf_dip_em_table_t::value_type*)value);
            return ipv4_vrf_dip_em_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv4_vrf_s_g_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_vrf_s_g_table_t::key_type k(*(npl_ipv4_vrf_s_g_table_t::key_type*)key);
            npl_ipv4_vrf_s_g_table_t::value_type v(*(npl_ipv4_vrf_s_g_table_t::value_type*)value);
            return ipv4_vrf_s_g_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv6_acl_sport_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_acl_sport_static_table_t::key_type k(*(npl_ipv6_acl_sport_static_table_t::key_type*)key);
            npl_ipv6_acl_sport_static_table_t::value_type v(*(npl_ipv6_acl_sport_static_table_t::value_type*)value);
            return ipv6_acl_sport_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv6_mc_select_qos_id") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_mc_select_qos_id_t::key_type k(*(npl_ipv6_mc_select_qos_id_t::key_type*)key);
            npl_ipv6_mc_select_qos_id_t::value_type v(*(npl_ipv6_mc_select_qos_id_t::value_type*)value);
            return ipv6_mc_select_qos_id[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv6_og_pcl_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_og_pcl_em_table_t::key_type k(*(npl_ipv6_og_pcl_em_table_t::key_type*)key);
            npl_ipv6_og_pcl_em_table_t::value_type v(*(npl_ipv6_og_pcl_em_table_t::value_type*)value);
            return ipv6_og_pcl_em_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv6_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_rtf_conf_set_mapping_table_t::key_type k(*(npl_ipv6_rtf_conf_set_mapping_table_t::key_type*)key);
            npl_ipv6_rtf_conf_set_mapping_table_t::value_type v(*(npl_ipv6_rtf_conf_set_mapping_table_t::value_type*)value);
            return ipv6_rtf_conf_set_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv6_vrf_dip_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_vrf_dip_em_table_t::key_type k(*(npl_ipv6_vrf_dip_em_table_t::key_type*)key);
            npl_ipv6_vrf_dip_em_table_t::value_type v(*(npl_ipv6_vrf_dip_em_table_t::value_type*)value);
            return ipv6_vrf_dip_em_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ipv6_vrf_s_g_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_vrf_s_g_table_t::key_type k(*(npl_ipv6_vrf_s_g_table_t::key_type*)key);
            npl_ipv6_vrf_s_g_table_t::value_type v(*(npl_ipv6_vrf_s_g_table_t::value_type*)value);
            return ipv6_vrf_s_g_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "is_pacific_b1_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_is_pacific_b1_static_table_t::key_type k(*(npl_is_pacific_b1_static_table_t::key_type*)key);
            npl_is_pacific_b1_static_table_t::value_type v(*(npl_is_pacific_b1_static_table_t::value_type*)value);
            return is_pacific_b1_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "l2_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_dlp_table_t::key_type k(*(npl_l2_dlp_table_t::key_type*)key);
            npl_l2_dlp_table_t::value_type v(*(npl_l2_dlp_table_t::value_type*)value);
            return l2_dlp_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "l2_lp_profile_filter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lp_profile_filter_table_t::key_type k(*(npl_l2_lp_profile_filter_table_t::key_type*)key);
            npl_l2_lp_profile_filter_table_t::value_type v(*(npl_l2_lp_profile_filter_table_t::value_type*)value);
            return l2_lp_profile_filter_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "l2_lpts_ip_fragment_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_ip_fragment_static_table_t::key_type k(*(npl_l2_lpts_ip_fragment_static_table_t::key_type*)key);
            npl_l2_lpts_ip_fragment_static_table_t::value_type v(*(npl_l2_lpts_ip_fragment_static_table_t::value_type*)value);
            return l2_lpts_ip_fragment_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "l2_lpts_skip_p2p_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_skip_p2p_static_table_t::key_type k(*(npl_l2_lpts_skip_p2p_static_table_t::key_type*)key);
            npl_l2_lpts_skip_p2p_static_table_t::value_type v(*(npl_l2_lpts_skip_p2p_static_table_t::value_type*)value);
            return l2_lpts_skip_p2p_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "l2_tunnel_term_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_tunnel_term_next_macro_static_table_t::key_type k(*(npl_l2_tunnel_term_next_macro_static_table_t::key_type*)key);
            npl_l2_tunnel_term_next_macro_static_table_t::value_type v(*(npl_l2_tunnel_term_next_macro_static_table_t::value_type*)value);
            return l2_tunnel_term_next_macro_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "l3_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_dlp_table_t::key_type k(*(npl_l3_dlp_table_t::key_type*)key);
            npl_l3_dlp_table_t::value_type v(*(npl_l3_dlp_table_t::value_type*)value);
            return l3_dlp_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "l3_vxlan_overlay_sa_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_vxlan_overlay_sa_table_t::key_type k(*(npl_l3_vxlan_overlay_sa_table_t::key_type*)key);
            npl_l3_vxlan_overlay_sa_table_t::value_type v(*(npl_l3_vxlan_overlay_sa_table_t::value_type*)value);
            return l3_vxlan_overlay_sa_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "large_encap_global_lsp_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_global_lsp_prefix_table_t::key_type k(*(npl_large_encap_global_lsp_prefix_table_t::key_type*)key);
            npl_large_encap_global_lsp_prefix_table_t::value_type v(*(npl_large_encap_global_lsp_prefix_table_t::value_type*)value);
            return large_encap_global_lsp_prefix_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "large_encap_ip_tunnel_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_ip_tunnel_table_t::key_type k(*(npl_large_encap_ip_tunnel_table_t::key_type*)key);
            npl_large_encap_ip_tunnel_table_t::value_type v(*(npl_large_encap_ip_tunnel_table_t::value_type*)value);
            return large_encap_ip_tunnel_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "large_encap_mpls_he_no_ldp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_mpls_he_no_ldp_table_t::key_type k(*(npl_large_encap_mpls_he_no_ldp_table_t::key_type*)key);
            npl_large_encap_mpls_he_no_ldp_table_t::value_type v(*(npl_large_encap_mpls_he_no_ldp_table_t::value_type*)value);
            return large_encap_mpls_he_no_ldp_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "large_encap_mpls_ldp_over_te_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_mpls_ldp_over_te_table_t::key_type k(*(npl_large_encap_mpls_ldp_over_te_table_t::key_type*)key);
            npl_large_encap_mpls_ldp_over_te_table_t::value_type v(*(npl_large_encap_mpls_ldp_over_te_table_t::value_type*)value);
            return large_encap_mpls_ldp_over_te_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "large_encap_te_he_tunnel_id_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_te_he_tunnel_id_table_t::key_type k(*(npl_large_encap_te_he_tunnel_id_table_t::key_type*)key);
            npl_large_encap_te_he_tunnel_id_table_t::value_type v(*(npl_large_encap_te_he_tunnel_id_table_t::value_type*)value);
            return large_encap_te_he_tunnel_id_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "latest_learn_records_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_latest_learn_records_table_t::key_type k(*(npl_latest_learn_records_table_t::key_type*)key);
            npl_latest_learn_records_table_t::value_type v(*(npl_latest_learn_records_table_t::value_type*)value);
            return latest_learn_records_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "learn_manager_cfg_max_learn_type_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_learn_manager_cfg_max_learn_type_reg_t::key_type k(*(npl_learn_manager_cfg_max_learn_type_reg_t::key_type*)key);
            npl_learn_manager_cfg_max_learn_type_reg_t::value_type v(*(npl_learn_manager_cfg_max_learn_type_reg_t::value_type*)value);
            return learn_manager_cfg_max_learn_type_reg[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "learn_record_fifo_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_learn_record_fifo_table_t::key_type k(*(npl_learn_record_fifo_table_t::key_type*)key);
            npl_learn_record_fifo_table_t::value_type v(*(npl_learn_record_fifo_table_t::value_type*)value);
            return learn_record_fifo_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "light_fi_fabric_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_fabric_table_t::key_type k(*(npl_light_fi_fabric_table_t::key_type*)key);
            npl_light_fi_fabric_table_t::value_type v(*(npl_light_fi_fabric_table_t::value_type*)value);
            return light_fi_fabric_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "light_fi_npu_base_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_npu_base_table_t::key_type k(*(npl_light_fi_npu_base_table_t::key_type*)key);
            npl_light_fi_npu_base_table_t::value_type v(*(npl_light_fi_npu_base_table_t::value_type*)value);
            return light_fi_npu_base_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "light_fi_npu_encap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_npu_encap_table_t::key_type k(*(npl_light_fi_npu_encap_table_t::key_type*)key);
            npl_light_fi_npu_encap_table_t::value_type v(*(npl_light_fi_npu_encap_table_t::value_type*)value);
            return light_fi_npu_encap_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "light_fi_stages_cfg_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_stages_cfg_table_t::key_type k(*(npl_light_fi_stages_cfg_table_t::key_type*)key);
            npl_light_fi_stages_cfg_table_t::value_type v(*(npl_light_fi_stages_cfg_table_t::value_type*)value);
            return light_fi_stages_cfg_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "light_fi_tm_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_tm_table_t::key_type k(*(npl_light_fi_tm_table_t::key_type*)key);
            npl_light_fi_tm_table_t::value_type v(*(npl_light_fi_tm_table_t::value_type*)value);
            return light_fi_tm_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "link_relay_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_link_relay_attributes_table_t::key_type k(*(npl_link_relay_attributes_table_t::key_type*)key);
            npl_link_relay_attributes_table_t::value_type v(*(npl_link_relay_attributes_table_t::value_type*)value);
            return link_relay_attributes_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "link_up_vector") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_link_up_vector_t::key_type k(*(npl_link_up_vector_t::key_type*)key);
            npl_link_up_vector_t::value_type v(*(npl_link_up_vector_t::value_type*)value);
            return link_up_vector[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "lp_over_lag_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lp_over_lag_table_t::key_type k(*(npl_lp_over_lag_table_t::key_type*)key);
            npl_lp_over_lag_table_t::value_type v(*(npl_lp_over_lag_table_t::value_type*)value);
            return lp_over_lag_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "lpm_destination_prefix_map_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpm_destination_prefix_map_table_t::key_type k(*(npl_lpm_destination_prefix_map_table_t::key_type*)key);
            npl_lpm_destination_prefix_map_table_t::value_type v(*(npl_lpm_destination_prefix_map_table_t::value_type*)value);
            return lpm_destination_prefix_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "lpts_2nd_lookup_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpts_2nd_lookup_table_t::key_type k(*(npl_lpts_2nd_lookup_table_t::key_type*)key);
            npl_lpts_2nd_lookup_table_t::value_type v(*(npl_lpts_2nd_lookup_table_t::value_type*)value);
            return lpts_2nd_lookup_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "lpts_meter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpts_meter_table_t::key_type k(*(npl_lpts_meter_table_t::key_type*)key);
            npl_lpts_meter_table_t::value_type v(*(npl_lpts_meter_table_t::value_type*)value);
            return lpts_meter_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "lr_filter_write_ptr_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lr_filter_write_ptr_reg_t::key_type k(*(npl_lr_filter_write_ptr_reg_t::key_type*)key);
            npl_lr_filter_write_ptr_reg_t::value_type v(*(npl_lr_filter_write_ptr_reg_t::value_type*)value);
            return lr_filter_write_ptr_reg[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "lr_write_ptr_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lr_write_ptr_reg_t::key_type k(*(npl_lr_write_ptr_reg_t::key_type*)key);
            npl_lr_write_ptr_reg_t::value_type v(*(npl_lr_write_ptr_reg_t::value_type*)value);
            return lr_write_ptr_reg[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mac_af_npp_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_af_npp_attributes_table_t::key_type k(*(npl_mac_af_npp_attributes_table_t::key_type*)key);
            npl_mac_af_npp_attributes_table_t::value_type v(*(npl_mac_af_npp_attributes_table_t::value_type*)value);
            return mac_af_npp_attributes_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mac_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_forwarding_table_t::key_type k(*(npl_mac_forwarding_table_t::key_type*)key);
            npl_mac_forwarding_table_t::value_type v(*(npl_mac_forwarding_table_t::value_type*)value);
            return mac_forwarding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mac_mc_em_termination_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_mc_em_termination_attributes_table_t::key_type k(*(npl_mac_mc_em_termination_attributes_table_t::key_type*)key);
            npl_mac_mc_em_termination_attributes_table_t::value_type v(*(npl_mac_mc_em_termination_attributes_table_t::value_type*)value);
            return mac_mc_em_termination_attributes_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mac_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_qos_mapping_table_t::key_type k(*(npl_mac_qos_mapping_table_t::key_type*)key);
            npl_mac_qos_mapping_table_t::value_type v(*(npl_mac_qos_mapping_table_t::value_type*)value);
            return mac_qos_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mac_relay_g_ipv4_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_relay_g_ipv4_table_t::key_type k(*(npl_mac_relay_g_ipv4_table_t::key_type*)key);
            npl_mac_relay_g_ipv4_table_t::value_type v(*(npl_mac_relay_g_ipv4_table_t::value_type*)value);
            return mac_relay_g_ipv4_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mac_relay_g_ipv6_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_relay_g_ipv6_table_t::key_type k(*(npl_mac_relay_g_ipv6_table_t::key_type*)key);
            npl_mac_relay_g_ipv6_table_t::value_type v(*(npl_mac_relay_g_ipv6_table_t::value_type*)value);
            return mac_relay_g_ipv6_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mac_relay_to_vni_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_relay_to_vni_table_t::key_type k(*(npl_mac_relay_to_vni_table_t::key_type*)key);
            npl_mac_relay_to_vni_table_t::value_type v(*(npl_mac_relay_to_vni_table_t::value_type*)value);
            return mac_relay_to_vni_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mac_termination_em_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_termination_em_table_t::key_type k(*(npl_mac_termination_em_table_t::key_type*)key);
            npl_mac_termination_em_table_t::value_type v(*(npl_mac_termination_em_table_t::value_type*)value);
            return mac_termination_em_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mac_termination_no_da_em_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_termination_no_da_em_table_t::key_type k(*(npl_mac_termination_no_da_em_table_t::key_type*)key);
            npl_mac_termination_no_da_em_table_t::value_type v(*(npl_mac_termination_no_da_em_table_t::value_type*)value);
            return mac_termination_no_da_em_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "map_ene_subcode_to8bit_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_ene_subcode_to8bit_static_table_t::key_type k(*(npl_map_ene_subcode_to8bit_static_table_t::key_type*)key);
            npl_map_ene_subcode_to8bit_static_table_t::value_type v(*(npl_map_ene_subcode_to8bit_static_table_t::value_type*)value);
            return map_ene_subcode_to8bit_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "map_more_labels_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_more_labels_static_table_t::key_type k(*(npl_map_more_labels_static_table_t::key_type*)key);
            npl_map_more_labels_static_table_t::value_type v(*(npl_map_more_labels_static_table_t::value_type*)value);
            return map_more_labels_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "map_recyle_tx_to_rx_data_on_pd_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::key_type k(*(npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::key_type*)key);
            npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::value_type v(*(npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::value_type*)value);
            return map_recyle_tx_to_rx_data_on_pd_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "map_tm_dp_ecn_to_wa_ecn_dp_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::key_type k(*(npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::key_type*)key);
            npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::value_type v(*(npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::value_type*)value);
            return map_tm_dp_ecn_to_wa_ecn_dp_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mc_bitmap_base_voq_lookup_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_bitmap_base_voq_lookup_table_t::key_type k(*(npl_mc_bitmap_base_voq_lookup_table_t::key_type*)key);
            npl_mc_bitmap_base_voq_lookup_table_t::value_type v(*(npl_mc_bitmap_base_voq_lookup_table_t::value_type*)value);
            return mc_bitmap_base_voq_lookup_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mc_bitmap_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_bitmap_tc_map_table_t::key_type k(*(npl_mc_bitmap_tc_map_table_t::key_type*)key);
            npl_mc_bitmap_tc_map_table_t::value_type v(*(npl_mc_bitmap_tc_map_table_t::value_type*)value);
            return mc_bitmap_tc_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mc_copy_id_map") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_copy_id_map_t::key_type k(*(npl_mc_copy_id_map_t::key_type*)key);
            npl_mc_copy_id_map_t::value_type v(*(npl_mc_copy_id_map_t::value_type*)value);
            return mc_copy_id_map[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mc_cud_is_wide_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_cud_is_wide_table_t::key_type k(*(npl_mc_cud_is_wide_table_t::key_type*)key);
            npl_mc_cud_is_wide_table_t::value_type v(*(npl_mc_cud_is_wide_table_t::value_type*)value);
            return mc_cud_is_wide_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mc_em_db") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_em_db_t::key_type k(*(npl_mc_em_db_t::key_type*)key);
            npl_mc_em_db_t::value_type v(*(npl_mc_em_db_t::value_type*)value);
            return mc_em_db[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mc_emdb_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_emdb_tc_map_table_t::key_type k(*(npl_mc_emdb_tc_map_table_t::key_type*)key);
            npl_mc_emdb_tc_map_table_t::value_type v(*(npl_mc_emdb_tc_map_table_t::value_type*)value);
            return mc_emdb_tc_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mc_fe_links_bmp") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_fe_links_bmp_t::key_type k(*(npl_mc_fe_links_bmp_t::key_type*)key);
            npl_mc_fe_links_bmp_t::value_type v(*(npl_mc_fe_links_bmp_t::value_type*)value);
            return mc_fe_links_bmp[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mc_ibm_cud_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_ibm_cud_mapping_table_t::key_type k(*(npl_mc_ibm_cud_mapping_table_t::key_type*)key);
            npl_mc_ibm_cud_mapping_table_t::value_type v(*(npl_mc_ibm_cud_mapping_table_t::value_type*)value);
            return mc_ibm_cud_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mc_slice_bitmap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_slice_bitmap_table_t::key_type k(*(npl_mc_slice_bitmap_table_t::key_type*)key);
            npl_mc_slice_bitmap_table_t::value_type v(*(npl_mc_slice_bitmap_table_t::value_type*)value);
            return mc_slice_bitmap_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mep_address_prefix_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mep_address_prefix_table_t::key_type k(*(npl_mep_address_prefix_table_t::key_type*)key);
            npl_mep_address_prefix_table_t::value_type v(*(npl_mep_address_prefix_table_t::value_type*)value);
            return mep_address_prefix_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mii_loopback_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mii_loopback_table_t::key_type k(*(npl_mii_loopback_table_t::key_type*)key);
            npl_mii_loopback_table_t::value_type v(*(npl_mii_loopback_table_t::value_type*)value);
            return mii_loopback_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mirror_code_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mirror_code_hw_table_t::key_type k(*(npl_mirror_code_hw_table_t::key_type*)key);
            npl_mirror_code_hw_table_t::value_type v(*(npl_mirror_code_hw_table_t::value_type*)value);
            return mirror_code_hw_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mirror_egress_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mirror_egress_attributes_table_t::key_type k(*(npl_mirror_egress_attributes_table_t::key_type*)key);
            npl_mirror_egress_attributes_table_t::value_type v(*(npl_mirror_egress_attributes_table_t::value_type*)value);
            return mirror_egress_attributes_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mirror_to_dsp_in_npu_soft_header_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mirror_to_dsp_in_npu_soft_header_table_t::key_type k(*(npl_mirror_to_dsp_in_npu_soft_header_table_t::key_type*)key);
            npl_mirror_to_dsp_in_npu_soft_header_table_t::value_type v(*(npl_mirror_to_dsp_in_npu_soft_header_table_t::value_type*)value);
            return mirror_to_dsp_in_npu_soft_header_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mldp_protection_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mldp_protection_table_t::key_type k(*(npl_mldp_protection_table_t::key_type*)key);
            npl_mldp_protection_table_t::value_type v(*(npl_mldp_protection_table_t::value_type*)value);
            return mldp_protection_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mp_aux_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mp_aux_data_table_t::key_type k(*(npl_mp_aux_data_table_t::key_type*)key);
            npl_mp_aux_data_table_t::value_type v(*(npl_mp_aux_data_table_t::value_type*)value);
            return mp_aux_data_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mp_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mp_data_table_t::key_type k(*(npl_mp_data_table_t::key_type*)key);
            npl_mp_data_table_t::value_type v(*(npl_mp_data_table_t::value_type*)value);
            return mp_data_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mpls_encap_control_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_encap_control_static_table_t::key_type k(*(npl_mpls_encap_control_static_table_t::key_type*)key);
            npl_mpls_encap_control_static_table_t::value_type v(*(npl_mpls_encap_control_static_table_t::value_type*)value);
            return mpls_encap_control_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mpls_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_forwarding_table_t::key_type k(*(npl_mpls_forwarding_table_t::key_type*)key);
            npl_mpls_forwarding_table_t::value_type v(*(npl_mpls_forwarding_table_t::value_type*)value);
            return mpls_forwarding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mpls_header_offset_in_bytes_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_header_offset_in_bytes_static_table_t::key_type k(*(npl_mpls_header_offset_in_bytes_static_table_t::key_type*)key);
            npl_mpls_header_offset_in_bytes_static_table_t::value_type v(*(npl_mpls_header_offset_in_bytes_static_table_t::value_type*)value);
            return mpls_header_offset_in_bytes_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mpls_l3_lsp_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_l3_lsp_static_table_t::key_type k(*(npl_mpls_l3_lsp_static_table_t::key_type*)key);
            npl_mpls_l3_lsp_static_table_t::value_type v(*(npl_mpls_l3_lsp_static_table_t::value_type*)value);
            return mpls_l3_lsp_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mpls_labels_1_to_4_jump_offset_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_labels_1_to_4_jump_offset_static_table_t::key_type k(*(npl_mpls_labels_1_to_4_jump_offset_static_table_t::key_type*)key);
            npl_mpls_labels_1_to_4_jump_offset_static_table_t::value_type v(*(npl_mpls_labels_1_to_4_jump_offset_static_table_t::value_type*)value);
            return mpls_labels_1_to_4_jump_offset_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mpls_lsp_labels_config_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_lsp_labels_config_static_table_t::key_type k(*(npl_mpls_lsp_labels_config_static_table_t::key_type*)key);
            npl_mpls_lsp_labels_config_static_table_t::value_type v(*(npl_mpls_lsp_labels_config_static_table_t::value_type*)value);
            return mpls_lsp_labels_config_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mpls_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_qos_mapping_table_t::key_type k(*(npl_mpls_qos_mapping_table_t::key_type*)key);
            npl_mpls_qos_mapping_table_t::value_type v(*(npl_mpls_qos_mapping_table_t::value_type*)value);
            return mpls_qos_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mpls_termination_em0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_termination_em0_table_t::key_type k(*(npl_mpls_termination_em0_table_t::key_type*)key);
            npl_mpls_termination_em0_table_t::value_type v(*(npl_mpls_termination_em0_table_t::value_type*)value);
            return mpls_termination_em0_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "mpls_termination_em1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_termination_em1_table_t::key_type k(*(npl_mpls_termination_em1_table_t::key_type*)key);
            npl_mpls_termination_em1_table_t::value_type v(*(npl_mpls_termination_em1_table_t::value_type*)value);
            return mpls_termination_em1_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ms_voq_fabric_context_offset_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ms_voq_fabric_context_offset_table_t::key_type k(*(npl_ms_voq_fabric_context_offset_table_t::key_type*)key);
            npl_ms_voq_fabric_context_offset_table_t::value_type v(*(npl_ms_voq_fabric_context_offset_table_t::value_type*)value);
            return ms_voq_fabric_context_offset_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_ce_ptr_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_ce_ptr_table_t::key_type k(*(npl_native_ce_ptr_table_t::key_type*)key);
            npl_native_ce_ptr_table_t::value_type v(*(npl_native_ce_ptr_table_t::value_type*)value);
            return native_ce_ptr_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_fec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_fec_table_t::key_type k(*(npl_native_fec_table_t::key_type*)key);
            npl_native_fec_table_t::value_type v(*(npl_native_fec_table_t::value_type*)value);
            return native_fec_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_fec_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_fec_type_decoding_table_t::key_type k(*(npl_native_fec_type_decoding_table_t::key_type*)key);
            npl_native_fec_type_decoding_table_t::value_type v(*(npl_native_fec_type_decoding_table_t::value_type*)value);
            return native_fec_type_decoding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_frr_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_frr_table_t::key_type k(*(npl_native_frr_table_t::key_type*)key);
            npl_native_frr_table_t::value_type v(*(npl_native_frr_table_t::value_type*)value);
            return native_frr_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_frr_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_frr_type_decoding_table_t::key_type k(*(npl_native_frr_type_decoding_table_t::key_type*)key);
            npl_native_frr_type_decoding_table_t::value_type v(*(npl_native_frr_type_decoding_table_t::value_type*)value);
            return native_frr_type_decoding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_l2_lp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_l2_lp_table_t::key_type k(*(npl_native_l2_lp_table_t::key_type*)key);
            npl_native_l2_lp_table_t::value_type v(*(npl_native_l2_lp_table_t::value_type*)value);
            return native_l2_lp_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_l2_lp_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_l2_lp_type_decoding_table_t::key_type k(*(npl_native_l2_lp_type_decoding_table_t::key_type*)key);
            npl_native_l2_lp_type_decoding_table_t::value_type v(*(npl_native_l2_lp_type_decoding_table_t::value_type*)value);
            return native_l2_lp_type_decoding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lb_group_size_table_t::key_type k(*(npl_native_lb_group_size_table_t::key_type*)key);
            npl_native_lb_group_size_table_t::value_type v(*(npl_native_lb_group_size_table_t::value_type*)value);
            return native_lb_group_size_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lb_table_t::key_type k(*(npl_native_lb_table_t::key_type*)key);
            npl_native_lb_table_t::value_type v(*(npl_native_lb_table_t::value_type*)value);
            return native_lb_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lb_type_decoding_table_t::key_type k(*(npl_native_lb_type_decoding_table_t::key_type*)key);
            npl_native_lb_type_decoding_table_t::value_type v(*(npl_native_lb_type_decoding_table_t::value_type*)value);
            return native_lb_type_decoding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_lp_is_pbts_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lp_is_pbts_prefix_table_t::key_type k(*(npl_native_lp_is_pbts_prefix_table_t::key_type*)key);
            npl_native_lp_is_pbts_prefix_table_t::value_type v(*(npl_native_lp_is_pbts_prefix_table_t::value_type*)value);
            return native_lp_is_pbts_prefix_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_lp_pbts_map_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lp_pbts_map_table_t::key_type k(*(npl_native_lp_pbts_map_table_t::key_type*)key);
            npl_native_lp_pbts_map_table_t::value_type v(*(npl_native_lp_pbts_map_table_t::value_type*)value);
            return native_lp_pbts_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "native_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_protection_table_t::key_type k(*(npl_native_protection_table_t::key_type*)key);
            npl_native_protection_table_t::value_type v(*(npl_native_protection_table_t::value_type*)value);
            return native_protection_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "next_header_1_is_l4_over_ipv4_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_next_header_1_is_l4_over_ipv4_static_table_t::key_type k(*(npl_next_header_1_is_l4_over_ipv4_static_table_t::key_type*)key);
            npl_next_header_1_is_l4_over_ipv4_static_table_t::value_type v(*(npl_next_header_1_is_l4_over_ipv4_static_table_t::value_type*)value);
            return next_header_1_is_l4_over_ipv4_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "nh_macro_code_to_id_l6_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_nh_macro_code_to_id_l6_static_table_t::key_type k(*(npl_nh_macro_code_to_id_l6_static_table_t::key_type*)key);
            npl_nh_macro_code_to_id_l6_static_table_t::value_type v(*(npl_nh_macro_code_to_id_l6_static_table_t::value_type*)value);
            return nh_macro_code_to_id_l6_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "nhlfe_type_mapping_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_nhlfe_type_mapping_static_table_t::key_type k(*(npl_nhlfe_type_mapping_static_table_t::key_type*)key);
            npl_nhlfe_type_mapping_static_table_t::value_type v(*(npl_nhlfe_type_mapping_static_table_t::value_type*)value);
            return nhlfe_type_mapping_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "nw_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_nw_smcid_threshold_table_t::key_type k(*(npl_nw_smcid_threshold_table_t::key_type*)key);
            npl_nw_smcid_threshold_table_t::value_type v(*(npl_nw_smcid_threshold_table_t::value_type*)value);
            return nw_smcid_threshold_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "oamp_drop_destination_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_drop_destination_static_table_t::key_type k(*(npl_oamp_drop_destination_static_table_t::key_type*)key);
            npl_oamp_drop_destination_static_table_t::value_type v(*(npl_oamp_drop_destination_static_table_t::value_type*)value);
            return oamp_drop_destination_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "oamp_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_event_queue_table_t::key_type k(*(npl_oamp_event_queue_table_t::key_type*)key);
            npl_oamp_event_queue_table_t::value_type v(*(npl_oamp_event_queue_table_t::value_type*)value);
            return oamp_event_queue_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "oamp_redirect_get_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_get_counter_table_t::key_type k(*(npl_oamp_redirect_get_counter_table_t::key_type*)key);
            npl_oamp_redirect_get_counter_table_t::value_type v(*(npl_oamp_redirect_get_counter_table_t::value_type*)value);
            return oamp_redirect_get_counter_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_1_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_1_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_1_table_t::key_type*)key);
            npl_oamp_redirect_punt_eth_hdr_1_table_t::value_type v(*(npl_oamp_redirect_punt_eth_hdr_1_table_t::value_type*)value);
            return oamp_redirect_punt_eth_hdr_1_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_2_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_2_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_2_table_t::key_type*)key);
            npl_oamp_redirect_punt_eth_hdr_2_table_t::value_type v(*(npl_oamp_redirect_punt_eth_hdr_2_table_t::value_type*)value);
            return oamp_redirect_punt_eth_hdr_2_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_3_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_3_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_3_table_t::key_type*)key);
            npl_oamp_redirect_punt_eth_hdr_3_table_t::value_type v(*(npl_oamp_redirect_punt_eth_hdr_3_table_t::value_type*)value);
            return oamp_redirect_punt_eth_hdr_3_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_4_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_4_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_4_table_t::key_type*)key);
            npl_oamp_redirect_punt_eth_hdr_4_table_t::value_type v(*(npl_oamp_redirect_punt_eth_hdr_4_table_t::value_type*)value);
            return oamp_redirect_punt_eth_hdr_4_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "oamp_redirect_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_table_t::key_type k(*(npl_oamp_redirect_table_t::key_type*)key);
            npl_oamp_redirect_table_t::value_type v(*(npl_oamp_redirect_table_t::value_type*)value);
            return oamp_redirect_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "outer_tpid_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_outer_tpid_table_t::key_type k(*(npl_outer_tpid_table_t::key_type*)key);
            npl_outer_tpid_table_t::value_type v(*(npl_outer_tpid_table_t::value_type*)value);
            return outer_tpid_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "overlay_ipv4_sip_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_overlay_ipv4_sip_table_t::key_type k(*(npl_overlay_ipv4_sip_table_t::key_type*)key);
            npl_overlay_ipv4_sip_table_t::value_type v(*(npl_overlay_ipv4_sip_table_t::value_type*)value);
            return overlay_ipv4_sip_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "path_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lb_type_decoding_table_t::key_type k(*(npl_path_lb_type_decoding_table_t::key_type*)key);
            npl_path_lb_type_decoding_table_t::value_type v(*(npl_path_lb_type_decoding_table_t::value_type*)value);
            return path_lb_type_decoding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "path_lp_is_pbts_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_is_pbts_prefix_table_t::key_type k(*(npl_path_lp_is_pbts_prefix_table_t::key_type*)key);
            npl_path_lp_is_pbts_prefix_table_t::value_type v(*(npl_path_lp_is_pbts_prefix_table_t::value_type*)value);
            return path_lp_is_pbts_prefix_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "path_lp_pbts_map_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_pbts_map_table_t::key_type k(*(npl_path_lp_pbts_map_table_t::key_type*)key);
            npl_path_lp_pbts_map_table_t::value_type v(*(npl_path_lp_pbts_map_table_t::value_type*)value);
            return path_lp_pbts_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "path_lp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_table_t::key_type k(*(npl_path_lp_table_t::key_type*)key);
            npl_path_lp_table_t::value_type v(*(npl_path_lp_table_t::value_type*)value);
            return path_lp_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "path_lp_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_type_decoding_table_t::key_type k(*(npl_path_lp_type_decoding_table_t::key_type*)key);
            npl_path_lp_type_decoding_table_t::value_type v(*(npl_path_lp_type_decoding_table_t::value_type*)value);
            return path_lp_type_decoding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "path_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_protection_table_t::key_type k(*(npl_path_protection_table_t::key_type*)key);
            npl_path_protection_table_t::value_type v(*(npl_path_protection_table_t::value_type*)value);
            return path_protection_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pdoq_oq_ifc_mapping") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pdoq_oq_ifc_mapping_t::key_type k(*(npl_pdoq_oq_ifc_mapping_t::key_type*)key);
            npl_pdoq_oq_ifc_mapping_t::value_type v(*(npl_pdoq_oq_ifc_mapping_t::value_type*)value);
            return pdoq_oq_ifc_mapping[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pdvoq_bank_pair_offset_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pdvoq_bank_pair_offset_table_t::key_type k(*(npl_pdvoq_bank_pair_offset_table_t::key_type*)key);
            npl_pdvoq_bank_pair_offset_table_t::value_type v(*(npl_pdvoq_bank_pair_offset_table_t::value_type*)value);
            return pdvoq_bank_pair_offset_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pdvoq_slice_voq_properties_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pdvoq_slice_voq_properties_table_t::key_type k(*(npl_pdvoq_slice_voq_properties_table_t::key_type*)key);
            npl_pdvoq_slice_voq_properties_table_t::value_type v(*(npl_pdvoq_slice_voq_properties_table_t::value_type*)value);
            return pdvoq_slice_voq_properties_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "per_asbr_and_dpe_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_asbr_and_dpe_table_t::key_type k(*(npl_per_asbr_and_dpe_table_t::key_type*)key);
            npl_per_asbr_and_dpe_table_t::value_type v(*(npl_per_asbr_and_dpe_table_t::value_type*)value);
            return per_asbr_and_dpe_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "per_pe_and_prefix_vpn_key_large_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_pe_and_prefix_vpn_key_large_table_t::key_type k(*(npl_per_pe_and_prefix_vpn_key_large_table_t::key_type*)key);
            npl_per_pe_and_prefix_vpn_key_large_table_t::value_type v(*(npl_per_pe_and_prefix_vpn_key_large_table_t::value_type*)value);
            return per_pe_and_prefix_vpn_key_large_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "per_pe_and_vrf_vpn_key_large_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_pe_and_vrf_vpn_key_large_table_t::key_type k(*(npl_per_pe_and_vrf_vpn_key_large_table_t::key_type*)key);
            npl_per_pe_and_vrf_vpn_key_large_table_t::value_type v(*(npl_per_pe_and_vrf_vpn_key_large_table_t::value_type*)value);
            return per_pe_and_vrf_vpn_key_large_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "per_port_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_port_destination_table_t::key_type k(*(npl_per_port_destination_table_t::key_type*)key);
            npl_per_port_destination_table_t::value_type v(*(npl_per_port_destination_table_t::value_type*)value);
            return per_port_destination_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "per_vrf_mpls_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_vrf_mpls_forwarding_table_t::key_type k(*(npl_per_vrf_mpls_forwarding_table_t::key_type*)key);
            npl_per_vrf_mpls_forwarding_table_t::value_type v(*(npl_per_vrf_mpls_forwarding_table_t::value_type*)value);
            return per_vrf_mpls_forwarding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pfc_destination_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_destination_table_t::key_type k(*(npl_pfc_destination_table_t::key_type*)key);
            npl_pfc_destination_table_t::value_type v(*(npl_pfc_destination_table_t::value_type*)value);
            return pfc_destination_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pfc_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_event_queue_table_t::key_type k(*(npl_pfc_event_queue_table_t::key_type*)key);
            npl_pfc_event_queue_table_t::value_type v(*(npl_pfc_event_queue_table_t::value_type*)value);
            return pfc_event_queue_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pfc_tc_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_tc_table_t::key_type k(*(npl_pfc_tc_table_t::key_type*)key);
            npl_pfc_tc_table_t::value_type v(*(npl_pfc_tc_table_t::value_type*)value);
            return pfc_tc_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pfc_vector_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_vector_static_table_t::key_type k(*(npl_pfc_vector_static_table_t::key_type*)key);
            npl_pfc_vector_static_table_t::value_type v(*(npl_pfc_vector_static_table_t::value_type*)value);
            return pfc_vector_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pin_start_offset_macros") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pin_start_offset_macros_t::key_type k(*(npl_pin_start_offset_macros_t::key_type*)key);
            npl_pin_start_offset_macros_t::value_type v(*(npl_pin_start_offset_macros_t::value_type*)value);
            return pin_start_offset_macros[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pma_loopback_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pma_loopback_table_t::key_type k(*(npl_pma_loopback_table_t::key_type*)key);
            npl_pma_loopback_table_t::value_type v(*(npl_pma_loopback_table_t::value_type*)value);
            return pma_loopback_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "port_dspa_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_dspa_group_size_table_t::key_type k(*(npl_port_dspa_group_size_table_t::key_type*)key);
            npl_port_dspa_group_size_table_t::value_type v(*(npl_port_dspa_group_size_table_t::value_type*)value);
            return port_dspa_group_size_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "port_dspa_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_dspa_table_t::key_type k(*(npl_port_dspa_table_t::key_type*)key);
            npl_port_dspa_table_t::value_type v(*(npl_port_dspa_table_t::value_type*)value);
            return port_dspa_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "port_dspa_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_dspa_type_decoding_table_t::key_type k(*(npl_port_dspa_type_decoding_table_t::key_type*)key);
            npl_port_dspa_type_decoding_table_t::value_type v(*(npl_port_dspa_type_decoding_table_t::value_type*)value);
            return port_dspa_type_decoding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "port_npp_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_npp_protection_table_t::key_type k(*(npl_port_npp_protection_table_t::key_type*)key);
            npl_port_npp_protection_table_t::value_type v(*(npl_port_npp_protection_table_t::value_type*)value);
            return port_npp_protection_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "port_npp_protection_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_npp_protection_type_decoding_table_t::key_type k(*(npl_port_npp_protection_type_decoding_table_t::key_type*)key);
            npl_port_npp_protection_type_decoding_table_t::value_type v(*(npl_port_npp_protection_type_decoding_table_t::value_type*)value);
            return port_npp_protection_type_decoding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "port_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_protection_table_t::key_type k(*(npl_port_protection_table_t::key_type*)key);
            npl_port_protection_table_t::value_type v(*(npl_port_protection_table_t::value_type*)value);
            return port_protection_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "punt_rcy_inject_header_ene_encap_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_rcy_inject_header_ene_encap_table_t::key_type k(*(npl_punt_rcy_inject_header_ene_encap_table_t::key_type*)key);
            npl_punt_rcy_inject_header_ene_encap_table_t::value_type v(*(npl_punt_rcy_inject_header_ene_encap_table_t::value_type*)value);
            return punt_rcy_inject_header_ene_encap_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "punt_select_nw_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_select_nw_ene_static_table_t::key_type k(*(npl_punt_select_nw_ene_static_table_t::key_type*)key);
            npl_punt_select_nw_ene_static_table_t::value_type v(*(npl_punt_select_nw_ene_static_table_t::value_type*)value);
            return punt_select_nw_ene_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_encap_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_tunnel_transport_encap_table_t::key_type k(*(npl_punt_tunnel_transport_encap_table_t::key_type*)key);
            npl_punt_tunnel_transport_encap_table_t::value_type v(*(npl_punt_tunnel_transport_encap_table_t::value_type*)value);
            return punt_tunnel_transport_encap_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_extended_encap_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_tunnel_transport_extended_encap_table_t::key_type k(*(npl_punt_tunnel_transport_extended_encap_table_t::key_type*)key);
            npl_punt_tunnel_transport_extended_encap_table_t::value_type v(*(npl_punt_tunnel_transport_extended_encap_table_t::value_type*)value);
            return punt_tunnel_transport_extended_encap_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_extended_encap_table2") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_tunnel_transport_extended_encap_table2_t::key_type k(*(npl_punt_tunnel_transport_extended_encap_table2_t::key_type*)key);
            npl_punt_tunnel_transport_extended_encap_table2_t::value_type v(*(npl_punt_tunnel_transport_extended_encap_table2_t::value_type*)value);
            return punt_tunnel_transport_extended_encap_table2[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pwe_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_label_table_t::key_type k(*(npl_pwe_label_table_t::key_type*)key);
            npl_pwe_label_table_t::value_type v(*(npl_pwe_label_table_t::value_type*)value);
            return pwe_label_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pwe_to_l3_dest_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_to_l3_dest_table_t::key_type k(*(npl_pwe_to_l3_dest_table_t::key_type*)key);
            npl_pwe_to_l3_dest_table_t::value_type v(*(npl_pwe_to_l3_dest_table_t::value_type*)value);
            return pwe_to_l3_dest_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pwe_vpls_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_vpls_label_table_t::key_type k(*(npl_pwe_vpls_label_table_t::key_type*)key);
            npl_pwe_vpls_label_table_t::value_type v(*(npl_pwe_vpls_label_table_t::value_type*)value);
            return pwe_vpls_label_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "pwe_vpls_tunnel_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_vpls_tunnel_label_table_t::key_type k(*(npl_pwe_vpls_tunnel_label_table_t::key_type*)key);
            npl_pwe_vpls_tunnel_label_table_t::value_type v(*(npl_pwe_vpls_tunnel_label_table_t::value_type*)value);
            return pwe_vpls_tunnel_label_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "reassembly_source_port_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_reassembly_source_port_map_table_t::key_type k(*(npl_reassembly_source_port_map_table_t::key_type*)key);
            npl_reassembly_source_port_map_table_t::value_type v(*(npl_reassembly_source_port_map_table_t::value_type*)value);
            return reassembly_source_port_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "recycle_override_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_recycle_override_table_t::key_type k(*(npl_recycle_override_table_t::key_type*)key);
            npl_recycle_override_table_t::value_type v(*(npl_recycle_override_table_t::value_type*)value);
            return recycle_override_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "recycled_inject_up_info_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_recycled_inject_up_info_table_t::key_type k(*(npl_recycled_inject_up_info_table_t::key_type*)key);
            npl_recycled_inject_up_info_table_t::value_type v(*(npl_recycled_inject_up_info_table_t::value_type*)value);
            return recycled_inject_up_info_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "redirect_destination_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_redirect_destination_table_t::key_type k(*(npl_redirect_destination_table_t::key_type*)key);
            npl_redirect_destination_table_t::value_type v(*(npl_redirect_destination_table_t::value_type*)value);
            return redirect_destination_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "resolution_set_next_macro_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_resolution_set_next_macro_table_t::key_type k(*(npl_resolution_set_next_macro_table_t::key_type*)key);
            npl_resolution_set_next_macro_table_t::value_type v(*(npl_resolution_set_next_macro_table_t::value_type*)value);
            return resolution_set_next_macro_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rewrite_sa_prefix_index_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rewrite_sa_prefix_index_table_t::key_type k(*(npl_rewrite_sa_prefix_index_table_t::key_type*)key);
            npl_rewrite_sa_prefix_index_table_t::value_type v(*(npl_rewrite_sa_prefix_index_table_t::value_type*)value);
            return rewrite_sa_prefix_index_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rmep_last_time_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rmep_last_time_table_t::key_type k(*(npl_rmep_last_time_table_t::key_type*)key);
            npl_rmep_last_time_table_t::value_type v(*(npl_rmep_last_time_table_t::value_type*)value);
            return rmep_last_time_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rmep_state_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rmep_state_table_t::key_type k(*(npl_rmep_state_table_t::key_type*)key);
            npl_rmep_state_table_t::value_type v(*(npl_rmep_state_table_t::value_type*)value);
            return rmep_state_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rpf_fec_access_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rpf_fec_access_map_table_t::key_type k(*(npl_rpf_fec_access_map_table_t::key_type*)key);
            npl_rpf_fec_access_map_table_t::value_type v(*(npl_rpf_fec_access_map_table_t::value_type*)value);
            return rpf_fec_access_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rpf_fec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rpf_fec_table_t::key_type k(*(npl_rpf_fec_table_t::key_type*)key);
            npl_rpf_fec_table_t::value_type v(*(npl_rpf_fec_table_t::value_type*)value);
            return rpf_fec_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_og_pcl_compress_bits_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::key_type k(*(npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::key_type*)key);
            npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::value_type v(*(npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::value_type*)value);
            return rtf_conf_set_to_og_pcl_compress_bits_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_og_pcl_ids_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::key_type k(*(npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::key_type*)key);
            npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::value_type v(*(npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::value_type*)value);
            return rtf_conf_set_to_og_pcl_ids_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_post_fwd_stage_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::key_type k(*(npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::key_type*)key);
            npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::value_type v(*(npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::value_type*)value);
            return rtf_conf_set_to_post_fwd_stage_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_counters_block_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_counters_block_config_table_t::key_type k(*(npl_rx_counters_block_config_table_t::key_type*)key);
            npl_rx_counters_block_config_table_t::value_type v(*(npl_rx_counters_block_config_table_t::value_type*)value);
            return rx_counters_block_config_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_fwd_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_fwd_error_handling_counter_table_t::key_type k(*(npl_rx_fwd_error_handling_counter_table_t::key_type*)key);
            npl_rx_fwd_error_handling_counter_table_t::value_type v(*(npl_rx_fwd_error_handling_counter_table_t::value_type*)value);
            return rx_fwd_error_handling_counter_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_fwd_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_fwd_error_handling_destination_table_t::key_type k(*(npl_rx_fwd_error_handling_destination_table_t::key_type*)key);
            npl_rx_fwd_error_handling_destination_table_t::value_type v(*(npl_rx_fwd_error_handling_destination_table_t::value_type*)value);
            return rx_fwd_error_handling_destination_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_ip_p_counter_offset_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_ip_p_counter_offset_static_table_t::key_type k(*(npl_rx_ip_p_counter_offset_static_table_t::key_type*)key);
            npl_rx_ip_p_counter_offset_static_table_t::value_type v(*(npl_rx_ip_p_counter_offset_static_table_t::value_type*)value);
            return rx_ip_p_counter_offset_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_map_npp_to_ssp_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_map_npp_to_ssp_table_t::key_type k(*(npl_rx_map_npp_to_ssp_table_t::key_type*)key);
            npl_rx_map_npp_to_ssp_table_t::value_type v(*(npl_rx_map_npp_to_ssp_table_t::value_type*)value);
            return rx_map_npp_to_ssp_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_attribute_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_block_meter_attribute_table_t::key_type k(*(npl_rx_meter_block_meter_attribute_table_t::key_type*)key);
            npl_rx_meter_block_meter_attribute_table_t::value_type v(*(npl_rx_meter_block_meter_attribute_table_t::value_type*)value);
            return rx_meter_block_meter_attribute_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_block_meter_profile_table_t::key_type k(*(npl_rx_meter_block_meter_profile_table_t::key_type*)key);
            npl_rx_meter_block_meter_profile_table_t::value_type v(*(npl_rx_meter_block_meter_profile_table_t::value_type*)value);
            return rx_meter_block_meter_profile_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_block_meter_shaper_configuration_table_t::key_type k(*(npl_rx_meter_block_meter_shaper_configuration_table_t::key_type*)key);
            npl_rx_meter_block_meter_shaper_configuration_table_t::value_type v(*(npl_rx_meter_block_meter_shaper_configuration_table_t::value_type*)value);
            return rx_meter_block_meter_shaper_configuration_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_meter_distributed_meter_profile_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_distributed_meter_profile_table_t::key_type k(*(npl_rx_meter_distributed_meter_profile_table_t::key_type*)key);
            npl_rx_meter_distributed_meter_profile_table_t::value_type v(*(npl_rx_meter_distributed_meter_profile_table_t::value_type*)value);
            return rx_meter_distributed_meter_profile_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_meter_exact_meter_decision_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_exact_meter_decision_mapping_table_t::key_type k(*(npl_rx_meter_exact_meter_decision_mapping_table_t::key_type*)key);
            npl_rx_meter_exact_meter_decision_mapping_table_t::value_type v(*(npl_rx_meter_exact_meter_decision_mapping_table_t::value_type*)value);
            return rx_meter_exact_meter_decision_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_meter_meter_profile_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_meter_profile_table_t::key_type k(*(npl_rx_meter_meter_profile_table_t::key_type*)key);
            npl_rx_meter_meter_profile_table_t::value_type v(*(npl_rx_meter_meter_profile_table_t::value_type*)value);
            return rx_meter_meter_profile_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_meter_meter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_meter_shaper_configuration_table_t::key_type k(*(npl_rx_meter_meter_shaper_configuration_table_t::key_type*)key);
            npl_rx_meter_meter_shaper_configuration_table_t::value_type v(*(npl_rx_meter_meter_shaper_configuration_table_t::value_type*)value);
            return rx_meter_meter_shaper_configuration_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_meter_meters_attribute_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_meters_attribute_table_t::key_type k(*(npl_rx_meter_meters_attribute_table_t::key_type*)key);
            npl_rx_meter_meters_attribute_table_t::value_type v(*(npl_rx_meter_meters_attribute_table_t::value_type*)value);
            return rx_meter_meters_attribute_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_meter_rate_limiter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_rate_limiter_shaper_configuration_table_t::key_type k(*(npl_rx_meter_rate_limiter_shaper_configuration_table_t::key_type*)key);
            npl_rx_meter_rate_limiter_shaper_configuration_table_t::value_type v(*(npl_rx_meter_rate_limiter_shaper_configuration_table_t::value_type*)value);
            return rx_meter_rate_limiter_shaper_configuration_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_meter_stat_meter_decision_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_stat_meter_decision_mapping_table_t::key_type k(*(npl_rx_meter_stat_meter_decision_mapping_table_t::key_type*)key);
            npl_rx_meter_stat_meter_decision_mapping_table_t::value_type v(*(npl_rx_meter_stat_meter_decision_mapping_table_t::value_type*)value);
            return rx_meter_stat_meter_decision_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_npu_to_tm_dest_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_npu_to_tm_dest_table_t::key_type k(*(npl_rx_npu_to_tm_dest_table_t::key_type*)key);
            npl_rx_npu_to_tm_dest_table_t::value_type v(*(npl_rx_npu_to_tm_dest_table_t::value_type*)value);
            return rx_npu_to_tm_dest_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_obm_code_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_obm_code_table_t::key_type k(*(npl_rx_obm_code_table_t::key_type*)key);
            npl_rx_obm_code_table_t::value_type v(*(npl_rx_obm_code_table_t::value_type*)value);
            return rx_obm_code_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_obm_punt_src_and_code_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_obm_punt_src_and_code_table_t::key_type k(*(npl_rx_obm_punt_src_and_code_table_t::key_type*)key);
            npl_rx_obm_punt_src_and_code_table_t::value_type v(*(npl_rx_obm_punt_src_and_code_table_t::value_type*)value);
            return rx_obm_punt_src_and_code_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_redirect_code_ext_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_redirect_code_ext_table_t::key_type k(*(npl_rx_redirect_code_ext_table_t::key_type*)key);
            npl_rx_redirect_code_ext_table_t::value_type v(*(npl_rx_redirect_code_ext_table_t::value_type*)value);
            return rx_redirect_code_ext_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_redirect_code_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_redirect_code_table_t::key_type k(*(npl_rx_redirect_code_table_t::key_type*)key);
            npl_rx_redirect_code_table_t::value_type v(*(npl_rx_redirect_code_table_t::value_type*)value);
            return rx_redirect_code_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_term_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_term_error_handling_counter_table_t::key_type k(*(npl_rx_term_error_handling_counter_table_t::key_type*)key);
            npl_rx_term_error_handling_counter_table_t::value_type v(*(npl_rx_term_error_handling_counter_table_t::value_type*)value);
            return rx_term_error_handling_counter_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rx_term_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_term_error_handling_destination_table_t::key_type k(*(npl_rx_term_error_handling_destination_table_t::key_type*)key);
            npl_rx_term_error_handling_destination_table_t::value_type v(*(npl_rx_term_error_handling_destination_table_t::value_type*)value);
            return rx_term_error_handling_destination_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rxpdr_dsp_lookup_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rxpdr_dsp_lookup_table_t::key_type k(*(npl_rxpdr_dsp_lookup_table_t::key_type*)key);
            npl_rxpdr_dsp_lookup_table_t::value_type v(*(npl_rxpdr_dsp_lookup_table_t::value_type*)value);
            return rxpdr_dsp_lookup_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "rxpdr_dsp_tc_map") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rxpdr_dsp_tc_map_t::key_type k(*(npl_rxpdr_dsp_tc_map_t::key_type*)key);
            npl_rxpdr_dsp_tc_map_t::value_type v(*(npl_rxpdr_dsp_tc_map_t::value_type*)value);
            return rxpdr_dsp_tc_map[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "sch_oqse_cfg") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_sch_oqse_cfg_t::key_type k(*(npl_sch_oqse_cfg_t::key_type*)key);
            npl_sch_oqse_cfg_t::value_type v(*(npl_sch_oqse_cfg_t::value_type*)value);
            return sch_oqse_cfg[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "service_lp_attributes_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_lp_attributes_table_t::key_type k(*(npl_service_lp_attributes_table_t::key_type*)key);
            npl_service_lp_attributes_table_t::value_type v(*(npl_service_lp_attributes_table_t::value_type*)value);
            return service_lp_attributes_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_ac_port_table_t::key_type k(*(npl_service_mapping_em0_ac_port_table_t::key_type*)key);
            npl_service_mapping_em0_ac_port_table_t::value_type v(*(npl_service_mapping_em0_ac_port_table_t::value_type*)value);
            return service_mapping_em0_ac_port_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_ac_port_tag_table_t::key_type k(*(npl_service_mapping_em0_ac_port_tag_table_t::key_type*)key);
            npl_service_mapping_em0_ac_port_tag_table_t::value_type v(*(npl_service_mapping_em0_ac_port_tag_table_t::value_type*)value);
            return service_mapping_em0_ac_port_tag_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_tag_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_ac_port_tag_tag_table_t::key_type k(*(npl_service_mapping_em0_ac_port_tag_tag_table_t::key_type*)key);
            npl_service_mapping_em0_ac_port_tag_tag_table_t::value_type v(*(npl_service_mapping_em0_ac_port_tag_tag_table_t::value_type*)value);
            return service_mapping_em0_ac_port_tag_tag_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "service_mapping_em0_pwe_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_pwe_tag_table_t::key_type k(*(npl_service_mapping_em0_pwe_tag_table_t::key_type*)key);
            npl_service_mapping_em0_pwe_tag_table_t::value_type v(*(npl_service_mapping_em0_pwe_tag_table_t::value_type*)value);
            return service_mapping_em0_pwe_tag_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "service_mapping_em1_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em1_ac_port_tag_table_t::key_type k(*(npl_service_mapping_em1_ac_port_tag_table_t::key_type*)key);
            npl_service_mapping_em1_ac_port_tag_table_t::value_type v(*(npl_service_mapping_em1_ac_port_tag_table_t::value_type*)value);
            return service_mapping_em1_ac_port_tag_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "service_relay_attributes_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_relay_attributes_table_t::key_type k(*(npl_service_relay_attributes_table_t::key_type*)key);
            npl_service_relay_attributes_table_t::value_type v(*(npl_service_relay_attributes_table_t::value_type*)value);
            return service_relay_attributes_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "set_ene_macro_and_bytes_to_remove_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_set_ene_macro_and_bytes_to_remove_table_t::key_type k(*(npl_set_ene_macro_and_bytes_to_remove_table_t::key_type*)key);
            npl_set_ene_macro_and_bytes_to_remove_table_t::value_type v(*(npl_set_ene_macro_and_bytes_to_remove_table_t::value_type*)value);
            return set_ene_macro_and_bytes_to_remove_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "sip_index_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_sip_index_table_t::key_type k(*(npl_sip_index_table_t::key_type*)key);
            npl_sip_index_table_t::value_type v(*(npl_sip_index_table_t::value_type*)value);
            return sip_index_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "slice_modes_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_slice_modes_table_t::key_type k(*(npl_slice_modes_table_t::key_type*)key);
            npl_slice_modes_table_t::value_type v(*(npl_slice_modes_table_t::value_type*)value);
            return slice_modes_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "slp_based_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_slp_based_forwarding_table_t::key_type k(*(npl_slp_based_forwarding_table_t::key_type*)key);
            npl_slp_based_forwarding_table_t::value_type v(*(npl_slp_based_forwarding_table_t::value_type*)value);
            return slp_based_forwarding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "small_encap_mpls_he_asbr_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_small_encap_mpls_he_asbr_table_t::key_type k(*(npl_small_encap_mpls_he_asbr_table_t::key_type*)key);
            npl_small_encap_mpls_he_asbr_table_t::value_type v(*(npl_small_encap_mpls_he_asbr_table_t::value_type*)value);
            return small_encap_mpls_he_asbr_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "small_encap_mpls_he_te_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_small_encap_mpls_he_te_table_t::key_type k(*(npl_small_encap_mpls_he_te_table_t::key_type*)key);
            npl_small_encap_mpls_he_te_table_t::value_type v(*(npl_small_encap_mpls_he_te_table_t::value_type*)value);
            return small_encap_mpls_he_te_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "snoop_code_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_snoop_code_hw_table_t::key_type k(*(npl_snoop_code_hw_table_t::key_type*)key);
            npl_snoop_code_hw_table_t::value_type v(*(npl_snoop_code_hw_table_t::value_type*)value);
            return snoop_code_hw_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "snoop_to_dsp_in_npu_soft_header_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_snoop_to_dsp_in_npu_soft_header_table_t::key_type k(*(npl_snoop_to_dsp_in_npu_soft_header_table_t::key_type*)key);
            npl_snoop_to_dsp_in_npu_soft_header_table_t::value_type v(*(npl_snoop_to_dsp_in_npu_soft_header_table_t::value_type*)value);
            return snoop_to_dsp_in_npu_soft_header_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "source_pif_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_source_pif_hw_table_t::key_type k(*(npl_source_pif_hw_table_t::key_type*)key);
            npl_source_pif_hw_table_t::value_type v(*(npl_source_pif_hw_table_t::value_type*)value);
            return source_pif_hw_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "stage2_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage2_lb_group_size_table_t::key_type k(*(npl_stage2_lb_group_size_table_t::key_type*)key);
            npl_stage2_lb_group_size_table_t::value_type v(*(npl_stage2_lb_group_size_table_t::value_type*)value);
            return stage2_lb_group_size_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "stage2_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage2_lb_table_t::key_type k(*(npl_stage2_lb_table_t::key_type*)key);
            npl_stage2_lb_table_t::value_type v(*(npl_stage2_lb_table_t::value_type*)value);
            return stage2_lb_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "stage3_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage3_lb_group_size_table_t::key_type k(*(npl_stage3_lb_group_size_table_t::key_type*)key);
            npl_stage3_lb_group_size_table_t::value_type v(*(npl_stage3_lb_group_size_table_t::value_type*)value);
            return stage3_lb_group_size_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "stage3_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage3_lb_table_t::key_type k(*(npl_stage3_lb_table_t::key_type*)key);
            npl_stage3_lb_table_t::value_type v(*(npl_stage3_lb_table_t::value_type*)value);
            return stage3_lb_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "stage3_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage3_lb_type_decoding_table_t::key_type k(*(npl_stage3_lb_type_decoding_table_t::key_type*)key);
            npl_stage3_lb_type_decoding_table_t::value_type v(*(npl_stage3_lb_type_decoding_table_t::value_type*)value);
            return stage3_lb_type_decoding_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "termination_to_forwarding_fi_hardwired_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_termination_to_forwarding_fi_hardwired_table_t::key_type k(*(npl_termination_to_forwarding_fi_hardwired_table_t::key_type*)key);
            npl_termination_to_forwarding_fi_hardwired_table_t::value_type v(*(npl_termination_to_forwarding_fi_hardwired_table_t::value_type*)value);
            return termination_to_forwarding_fi_hardwired_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "tm_ibm_cmd_to_destination") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tm_ibm_cmd_to_destination_t::key_type k(*(npl_tm_ibm_cmd_to_destination_t::key_type*)key);
            npl_tm_ibm_cmd_to_destination_t::value_type v(*(npl_tm_ibm_cmd_to_destination_t::value_type*)value);
            return tm_ibm_cmd_to_destination[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "ts_cmd_hw_static_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ts_cmd_hw_static_table_t::key_type k(*(npl_ts_cmd_hw_static_table_t::key_type*)key);
            npl_ts_cmd_hw_static_table_t::value_type v(*(npl_ts_cmd_hw_static_table_t::value_type*)value);
            return ts_cmd_hw_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "tunnel_qos_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tunnel_qos_static_table_t::key_type k(*(npl_tunnel_qos_static_table_t::key_type*)key);
            npl_tunnel_qos_static_table_t::value_type v(*(npl_tunnel_qos_static_table_t::value_type*)value);
            return tunnel_qos_static_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "tx_counters_block_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_counters_block_config_table_t::key_type k(*(npl_tx_counters_block_config_table_t::key_type*)key);
            npl_tx_counters_block_config_table_t::value_type v(*(npl_tx_counters_block_config_table_t::value_type*)value);
            return tx_counters_block_config_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "tx_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_error_handling_counter_table_t::key_type k(*(npl_tx_error_handling_counter_table_t::key_type*)key);
            npl_tx_error_handling_counter_table_t::value_type v(*(npl_tx_error_handling_counter_table_t::value_type*)value);
            return tx_error_handling_counter_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "tx_punt_eth_encap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_punt_eth_encap_table_t::key_type k(*(npl_tx_punt_eth_encap_table_t::key_type*)key);
            npl_tx_punt_eth_encap_table_t::value_type v(*(npl_tx_punt_eth_encap_table_t::value_type*)value);
            return tx_punt_eth_encap_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "tx_redirect_code_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_redirect_code_table_t::key_type k(*(npl_tx_redirect_code_table_t::key_type*)key);
            npl_tx_redirect_code_table_t::value_type v(*(npl_tx_redirect_code_table_t::value_type*)value);
            return tx_redirect_code_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "txpdr_mc_list_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpdr_mc_list_size_table_t::key_type k(*(npl_txpdr_mc_list_size_table_t::key_type*)key);
            npl_txpdr_mc_list_size_table_t::value_type v(*(npl_txpdr_mc_list_size_table_t::value_type*)value);
            return txpdr_mc_list_size_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "txpdr_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpdr_tc_map_table_t::key_type k(*(npl_txpdr_tc_map_table_t::key_type*)key);
            npl_txpdr_tc_map_table_t::value_type v(*(npl_txpdr_tc_map_table_t::value_type*)value);
            return txpdr_tc_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "txpp_dlp_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_dlp_profile_table_t::key_type k(*(npl_txpp_dlp_profile_table_t::key_type*)key);
            npl_txpp_dlp_profile_table_t::value_type v(*(npl_txpp_dlp_profile_table_t::value_type*)value);
            return txpp_dlp_profile_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "txpp_encap_qos_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_encap_qos_mapping_table_t::key_type k(*(npl_txpp_encap_qos_mapping_table_t::key_type*)key);
            npl_txpp_encap_qos_mapping_table_t::value_type v(*(npl_txpp_encap_qos_mapping_table_t::value_type*)value);
            return txpp_encap_qos_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "txpp_first_enc_type_to_second_enc_type_offset") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_first_enc_type_to_second_enc_type_offset_t::key_type k(*(npl_txpp_first_enc_type_to_second_enc_type_offset_t::key_type*)key);
            npl_txpp_first_enc_type_to_second_enc_type_offset_t::value_type v(*(npl_txpp_first_enc_type_to_second_enc_type_offset_t::value_type*)value);
            return txpp_first_enc_type_to_second_enc_type_offset[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "txpp_fwd_header_type_is_l2_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_fwd_header_type_is_l2_table_t::key_type k(*(npl_txpp_fwd_header_type_is_l2_table_t::key_type*)key);
            npl_txpp_fwd_header_type_is_l2_table_t::value_type v(*(npl_txpp_fwd_header_type_is_l2_table_t::value_type*)value);
            return txpp_fwd_header_type_is_l2_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "txpp_fwd_qos_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_fwd_qos_mapping_table_t::key_type k(*(npl_txpp_fwd_qos_mapping_table_t::key_type*)key);
            npl_txpp_fwd_qos_mapping_table_t::value_type v(*(npl_txpp_fwd_qos_mapping_table_t::value_type*)value);
            return txpp_fwd_qos_mapping_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "txpp_ibm_enables_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_ibm_enables_table_t::key_type k(*(npl_txpp_ibm_enables_table_t::key_type*)key);
            npl_txpp_ibm_enables_table_t::value_type v(*(npl_txpp_ibm_enables_table_t::value_type*)value);
            return txpp_ibm_enables_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "txpp_mapping_qos_tag_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_mapping_qos_tag_table_t::key_type k(*(npl_txpp_mapping_qos_tag_table_t::key_type*)key);
            npl_txpp_mapping_qos_tag_table_t::value_type v(*(npl_txpp_mapping_qos_tag_table_t::value_type*)value);
            return txpp_mapping_qos_tag_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "uc_ibm_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_uc_ibm_tc_map_table_t::key_type k(*(npl_uc_ibm_tc_map_table_t::key_type*)key);
            npl_uc_ibm_tc_map_table_t::value_type v(*(npl_uc_ibm_tc_map_table_t::value_type*)value);
            return uc_ibm_tc_map_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "vlan_edit_tpid1_profile_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vlan_edit_tpid1_profile_hw_table_t::key_type k(*(npl_vlan_edit_tpid1_profile_hw_table_t::key_type*)key);
            npl_vlan_edit_tpid1_profile_hw_table_t::value_type v(*(npl_vlan_edit_tpid1_profile_hw_table_t::value_type*)value);
            return vlan_edit_tpid1_profile_hw_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "vlan_edit_tpid2_profile_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vlan_edit_tpid2_profile_hw_table_t::key_type k(*(npl_vlan_edit_tpid2_profile_hw_table_t::key_type*)key);
            npl_vlan_edit_tpid2_profile_hw_table_t::value_type v(*(npl_vlan_edit_tpid2_profile_hw_table_t::value_type*)value);
            return vlan_edit_tpid2_profile_hw_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "vni_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vni_table_t::key_type k(*(npl_vni_table_t::key_type*)key);
            npl_vni_table_t::value_type v(*(npl_vni_table_t::value_type*)value);
            return vni_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_buffers_consumption_lut_for_enq_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::key_type k(*(npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::key_type*)key);
            npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::value_type v(*(npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::value_type*)value);
            return voq_cgm_slice_buffers_consumption_lut_for_enq_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_dram_cgm_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_dram_cgm_profile_table_t::key_type k(*(npl_voq_cgm_slice_dram_cgm_profile_table_t::key_type*)key);
            npl_voq_cgm_slice_dram_cgm_profile_table_t::value_type v(*(npl_voq_cgm_slice_dram_cgm_profile_table_t::value_type*)value);
            return voq_cgm_slice_dram_cgm_profile_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_pd_consumption_lut_for_enq_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::key_type k(*(npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::key_type*)key);
            npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::value_type v(*(npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::value_type*)value);
            return voq_cgm_slice_pd_consumption_lut_for_enq_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_buff_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::key_type k(*(npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::key_type*)key);
            npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::value_type v(*(npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::value_type*)value);
            return voq_cgm_slice_profile_buff_region_thresholds_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::key_type k(*(npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::key_type*)key);
            npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::value_type v(*(npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::value_type*)value);
            return voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_pkt_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::key_type k(*(npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::key_type*)key);
            npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::value_type v(*(npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::value_type*)value);
            return voq_cgm_slice_profile_pkt_region_thresholds_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_slice_cgm_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_slice_cgm_profile_table_t::key_type k(*(npl_voq_cgm_slice_slice_cgm_profile_table_t::key_type*)key);
            npl_voq_cgm_slice_slice_cgm_profile_table_t::value_type v(*(npl_voq_cgm_slice_slice_cgm_profile_table_t::value_type*)value);
            return voq_cgm_slice_slice_cgm_profile_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "vsid_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vsid_table_t::key_type k(*(npl_vsid_table_t::key_type*)key);
            npl_vsid_table_t::value_type v(*(npl_vsid_table_t::value_type*)value);
            return vsid_table[instance_index].update(k, v);
        }
        
        if (strcmp(table_name, "vxlan_l2_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vxlan_l2_dlp_table_t::key_type k(*(npl_vxlan_l2_dlp_table_t::key_type*)key);
            npl_vxlan_l2_dlp_table_t::value_type v(*(npl_vxlan_l2_dlp_table_t::value_type*)value);
            return vxlan_l2_dlp_table[instance_index].update(k, v);
        }
        
        return NPL_TABLES_STATUS_EUNKNOWN;
    }
    
    npl_tables_status_e npl_tables_t::update_ternary_table_entry(const char* table_name, size_t instance_index, size_t line, void* value) {
        if (strcmp(table_name, "bfd_udp_port_map_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_udp_port_map_static_table_t::value_type v(*(npl_bfd_udp_port_map_static_table_t::value_type*)value);
            return bfd_udp_port_map_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "default_egress_ipv4_sec_acl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_default_egress_ipv4_sec_acl_table_t::value_type v(*(npl_default_egress_ipv4_sec_acl_table_t::value_type*)value);
            return default_egress_ipv4_sec_acl_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "default_egress_ipv6_acl_sec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_default_egress_ipv6_acl_sec_table_t::value_type v(*(npl_default_egress_ipv6_acl_sec_table_t::value_type*)value);
            return default_egress_ipv6_acl_sec_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ecn_remark_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ecn_remark_static_table_t::value_type v(*(npl_ecn_remark_static_table_t::value_type*)value);
            return ecn_remark_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "egress_mac_ipv4_sec_acl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_egress_mac_ipv4_sec_acl_table_t::value_type v(*(npl_egress_mac_ipv4_sec_acl_table_t::value_type*)value);
            return egress_mac_ipv4_sec_acl_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ene_byte_addition_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ene_byte_addition_static_table_t::value_type v(*(npl_ene_byte_addition_static_table_t::value_type*)value);
            return ene_byte_addition_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "erpp_fabric_counters_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_erpp_fabric_counters_offset_table_t::value_type v(*(npl_erpp_fabric_counters_offset_table_t::value_type*)value);
            return erpp_fabric_counters_offset_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "erpp_fabric_counters_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_erpp_fabric_counters_table_t::value_type v(*(npl_erpp_fabric_counters_table_t::value_type*)value);
            return erpp_fabric_counters_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "fabric_and_tm_header_size_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_and_tm_header_size_static_table_t::value_type v(*(npl_fabric_and_tm_header_size_static_table_t::value_type*)value);
            return fabric_and_tm_header_size_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "fabric_header_ene_macro_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_header_ene_macro_table_t::value_type v(*(npl_fabric_header_ene_macro_table_t::value_type*)value);
            return fabric_header_ene_macro_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "fabric_headers_type_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_headers_type_table_t::value_type v(*(npl_fabric_headers_type_table_t::value_type*)value);
            return fabric_headers_type_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "fabric_init_cfg") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_init_cfg_t::value_type v(*(npl_fabric_init_cfg_t::value_type*)value);
            return fabric_init_cfg[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "fabric_npuh_size_calculation_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_npuh_size_calculation_static_table_t::value_type v(*(npl_fabric_npuh_size_calculation_static_table_t::value_type*)value);
            return fabric_npuh_size_calculation_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "fabric_out_color_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_out_color_map_table_t::value_type v(*(npl_fabric_out_color_map_table_t::value_type*)value);
            return fabric_out_color_map_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "fabric_term_error_checker_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_term_error_checker_static_table_t::value_type v(*(npl_fabric_term_error_checker_static_table_t::value_type*)value);
            return fabric_term_error_checker_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "fabric_transmit_error_checker_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_transmit_error_checker_static_table_t::value_type v(*(npl_fabric_transmit_error_checker_static_table_t::value_type*)value);
            return fabric_transmit_error_checker_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "fi_core_tcam_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fi_core_tcam_table_t::value_type v(*(npl_fi_core_tcam_table_t::value_type*)value);
            return fi_core_tcam_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_eth_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_eth_db1_160_f0_table_t::value_type v(*(npl_ingress_rtf_eth_db1_160_f0_table_t::value_type*)value);
            return ingress_rtf_eth_db1_160_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_eth_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_eth_db2_160_f0_table_t::value_type v(*(npl_ingress_rtf_eth_db2_160_f0_table_t::value_type*)value);
            return ingress_rtf_eth_db2_160_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db1_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db1_160_f0_table_t::value_type*)value);
            return ingress_rtf_ipv4_db1_160_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db1_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv4_db1_160_f1_table_t::value_type*)value);
            return ingress_rtf_ipv4_db1_160_f1_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db1_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db1_320_f0_table_t::value_type*)value);
            return ingress_rtf_ipv4_db1_320_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db2_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db2_160_f0_table_t::value_type*)value);
            return ingress_rtf_ipv4_db2_160_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db2_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv4_db2_160_f1_table_t::value_type*)value);
            return ingress_rtf_ipv4_db2_160_f1_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db2_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db2_320_f0_table_t::value_type*)value);
            return ingress_rtf_ipv4_db2_320_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db3_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db3_160_f0_table_t::value_type*)value);
            return ingress_rtf_ipv4_db3_160_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db3_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv4_db3_160_f1_table_t::value_type*)value);
            return ingress_rtf_ipv4_db3_160_f1_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db3_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db3_320_f0_table_t::value_type*)value);
            return ingress_rtf_ipv4_db3_320_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db4_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db4_160_f0_table_t::value_type*)value);
            return ingress_rtf_ipv4_db4_160_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db4_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv4_db4_160_f1_table_t::value_type*)value);
            return ingress_rtf_ipv4_db4_160_f1_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv4_db4_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv4_db4_320_f0_table_t::value_type*)value);
            return ingress_rtf_ipv4_db4_320_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db1_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db1_160_f0_table_t::value_type*)value);
            return ingress_rtf_ipv6_db1_160_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db1_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv6_db1_160_f1_table_t::value_type*)value);
            return ingress_rtf_ipv6_db1_160_f1_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db1_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db1_320_f0_table_t::value_type*)value);
            return ingress_rtf_ipv6_db1_320_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db2_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db2_160_f0_table_t::value_type*)value);
            return ingress_rtf_ipv6_db2_160_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db2_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv6_db2_160_f1_table_t::value_type*)value);
            return ingress_rtf_ipv6_db2_160_f1_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db2_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db2_320_f0_table_t::value_type*)value);
            return ingress_rtf_ipv6_db2_320_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db3_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db3_160_f0_table_t::value_type*)value);
            return ingress_rtf_ipv6_db3_160_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db3_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv6_db3_160_f1_table_t::value_type*)value);
            return ingress_rtf_ipv6_db3_160_f1_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db3_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db3_320_f0_table_t::value_type*)value);
            return ingress_rtf_ipv6_db3_320_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db4_160_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db4_160_f0_table_t::value_type*)value);
            return ingress_rtf_ipv6_db4_160_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db4_160_f1_table_t::value_type v(*(npl_ingress_rtf_ipv6_db4_160_f1_table_t::value_type*)value);
            return ingress_rtf_ipv6_db4_160_f1_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_rtf_ipv6_db4_320_f0_table_t::value_type v(*(npl_ingress_rtf_ipv6_db4_320_f0_table_t::value_type*)value);
            return ingress_rtf_ipv6_db4_320_f0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "inject_down_select_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_down_select_ene_static_table_t::value_type v(*(npl_inject_down_select_ene_static_table_t::value_type*)value);
            return inject_down_select_ene_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ip_ingress_cmp_mcid_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_ingress_cmp_mcid_static_table_t::value_type v(*(npl_ip_ingress_cmp_mcid_static_table_t::value_type*)value);
            return ip_ingress_cmp_mcid_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ip_ver_mc_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_ver_mc_static_table_t::value_type v(*(npl_ip_ver_mc_static_table_t::value_type*)value);
            return ip_ver_mc_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ipv4_acl_map_protocol_type_to_protocol_number_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t::value_type v(*(npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t::value_type*)value);
            return ipv4_acl_map_protocol_type_to_protocol_number_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ipv4_lpts_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_lpts_table_t::value_type v(*(npl_ipv4_lpts_table_t::value_type*)value);
            return ipv4_lpts_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ipv6_first_fragment_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_first_fragment_static_table_t::value_type v(*(npl_ipv6_first_fragment_static_table_t::value_type*)value);
            return ipv6_first_fragment_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ipv6_lpts_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_lpts_table_t::value_type v(*(npl_ipv6_lpts_table_t::value_type*)value);
            return ipv6_lpts_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "ipv6_sip_compression_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_sip_compression_table_t::value_type v(*(npl_ipv6_sip_compression_table_t::value_type*)value);
            return ipv6_sip_compression_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l2_lpts_ctrl_fields_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_ctrl_fields_static_table_t::value_type v(*(npl_l2_lpts_ctrl_fields_static_table_t::value_type*)value);
            return l2_lpts_ctrl_fields_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l2_lpts_ipv4_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_ipv4_table_t::value_type v(*(npl_l2_lpts_ipv4_table_t::value_type*)value);
            return l2_lpts_ipv4_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l2_lpts_ipv6_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_ipv6_table_t::value_type v(*(npl_l2_lpts_ipv6_table_t::value_type*)value);
            return l2_lpts_ipv6_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l2_lpts_mac_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_mac_table_t::value_type v(*(npl_l2_lpts_mac_table_t::value_type*)value);
            return l2_lpts_mac_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l2_lpts_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_next_macro_static_table_t::value_type v(*(npl_l2_lpts_next_macro_static_table_t::value_type*)value);
            return l2_lpts_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l2_lpts_protocol_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_protocol_table_t::value_type v(*(npl_l2_lpts_protocol_table_t::value_type*)value);
            return l2_lpts_protocol_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l2_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_termination_next_macro_static_table_t::value_type v(*(npl_l2_termination_next_macro_static_table_t::value_type*)value);
            return l2_termination_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l3_dlp_p_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_dlp_p_counter_offset_table_t::value_type v(*(npl_l3_dlp_p_counter_offset_table_t::value_type*)value);
            return l3_dlp_p_counter_offset_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l3_termination_classify_ip_tunnels_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_termination_classify_ip_tunnels_table_t::value_type v(*(npl_l3_termination_classify_ip_tunnels_table_t::value_type*)value);
            return l3_termination_classify_ip_tunnels_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l3_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_termination_next_macro_static_table_t::value_type v(*(npl_l3_termination_next_macro_static_table_t::value_type*)value);
            return l3_termination_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "l3_tunnel_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_tunnel_termination_next_macro_static_table_t::value_type v(*(npl_l3_tunnel_termination_next_macro_static_table_t::value_type*)value);
            return l3_tunnel_termination_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "light_fi_nw_0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_nw_0_table_t::value_type v(*(npl_light_fi_nw_0_table_t::value_type*)value);
            return light_fi_nw_0_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "light_fi_nw_1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_nw_1_table_t::value_type v(*(npl_light_fi_nw_1_table_t::value_type*)value);
            return light_fi_nw_1_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "light_fi_nw_2_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_nw_2_table_t::value_type v(*(npl_light_fi_nw_2_table_t::value_type*)value);
            return light_fi_nw_2_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "light_fi_nw_3_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_nw_3_table_t::value_type v(*(npl_light_fi_nw_3_table_t::value_type*)value);
            return light_fi_nw_3_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "lpts_og_application_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpts_og_application_table_t::value_type v(*(npl_lpts_og_application_table_t::value_type*)value);
            return lpts_og_application_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "mac_da_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_da_table_t::value_type v(*(npl_mac_da_table_t::value_type*)value);
            return mac_da_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "mac_ethernet_rate_limit_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_ethernet_rate_limit_type_static_table_t::value_type v(*(npl_mac_ethernet_rate_limit_type_static_table_t::value_type*)value);
            return mac_ethernet_rate_limit_type_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "mac_mc_tcam_termination_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_mc_tcam_termination_attributes_table_t::value_type v(*(npl_mac_mc_tcam_termination_attributes_table_t::value_type*)value);
            return mac_mc_tcam_termination_attributes_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "mac_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_termination_next_macro_static_table_t::value_type v(*(npl_mac_termination_next_macro_static_table_t::value_type*)value);
            return mac_termination_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "mac_termination_tcam_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_termination_tcam_table_t::value_type v(*(npl_mac_termination_tcam_table_t::value_type*)value);
            return mac_termination_tcam_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "map_inject_ccm_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_inject_ccm_macro_static_table_t::value_type v(*(npl_map_inject_ccm_macro_static_table_t::value_type*)value);
            return map_inject_ccm_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "map_tx_punt_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_tx_punt_next_macro_static_table_t::value_type v(*(npl_map_tx_punt_next_macro_static_table_t::value_type*)value);
            return map_tx_punt_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "map_tx_punt_rcy_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_tx_punt_rcy_next_macro_static_table_t::value_type v(*(npl_map_tx_punt_rcy_next_macro_static_table_t::value_type*)value);
            return map_tx_punt_rcy_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "meg_id_format_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_meg_id_format_table_t::value_type v(*(npl_meg_id_format_table_t::value_type*)value);
            return meg_id_format_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "mldp_protection_enabled_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mldp_protection_enabled_static_table_t::value_type v(*(npl_mldp_protection_enabled_static_table_t::value_type*)value);
            return mldp_protection_enabled_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "mpls_resolve_service_labels_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_resolve_service_labels_static_table_t::value_type v(*(npl_mpls_resolve_service_labels_static_table_t::value_type*)value);
            return mpls_resolve_service_labels_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "mpls_vpn_enabled_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_vpn_enabled_static_table_t::value_type v(*(npl_mpls_vpn_enabled_static_table_t::value_type*)value);
            return mpls_vpn_enabled_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "my_ipv4_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_my_ipv4_table_t::value_type v(*(npl_my_ipv4_table_t::value_type*)value);
            return my_ipv4_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "null_rtf_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_null_rtf_next_macro_static_table_t::value_type v(*(npl_null_rtf_next_macro_static_table_t::value_type*)value);
            return null_rtf_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "obm_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_obm_next_macro_static_table_t::value_type v(*(npl_obm_next_macro_static_table_t::value_type*)value);
            return obm_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "og_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_og_next_macro_static_table_t::value_type v(*(npl_og_next_macro_static_table_t::value_type*)value);
            return og_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "pad_mtu_inj_check_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pad_mtu_inj_check_static_table_t::value_type v(*(npl_pad_mtu_inj_check_static_table_t::value_type*)value);
            return pad_mtu_inj_check_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "pfc_filter_wd_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_filter_wd_table_t::value_type v(*(npl_pfc_filter_wd_table_t::value_type*)value);
            return pfc_filter_wd_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "pfc_offset_from_vector_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_offset_from_vector_static_table_t::value_type v(*(npl_pfc_offset_from_vector_static_table_t::value_type*)value);
            return pfc_offset_from_vector_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "pfc_ssp_slice_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_ssp_slice_map_table_t::value_type v(*(npl_pfc_ssp_slice_map_table_t::value_type*)value);
            return pfc_ssp_slice_map_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "pfc_tc_latency_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_tc_latency_table_t::value_type v(*(npl_pfc_tc_latency_table_t::value_type*)value);
            return pfc_tc_latency_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "pfc_tc_wrap_latency_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_tc_wrap_latency_table_t::value_type v(*(npl_pfc_tc_wrap_latency_table_t::value_type*)value);
            return pfc_tc_wrap_latency_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "punt_ethertype_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_ethertype_static_table_t::value_type v(*(npl_punt_ethertype_static_table_t::value_type*)value);
            return punt_ethertype_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "redirect_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_redirect_table_t::value_type v(*(npl_redirect_table_t::value_type*)value);
            return redirect_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "resolution_pfc_select_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_resolution_pfc_select_table_t::value_type v(*(npl_resolution_pfc_select_table_t::value_type*)value);
            return resolution_pfc_select_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "rtf_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_next_macro_static_table_t::value_type v(*(npl_rtf_next_macro_static_table_t::value_type*)value);
            return rtf_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "rx_redirect_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_redirect_next_macro_static_table_t::value_type v(*(npl_rx_redirect_next_macro_static_table_t::value_type*)value);
            return rx_redirect_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "second_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_second_ene_static_table_t::value_type v(*(npl_second_ene_static_table_t::value_type*)value);
            return second_ene_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "select_inject_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_select_inject_next_macro_static_table_t::value_type v(*(npl_select_inject_next_macro_static_table_t::value_type*)value);
            return select_inject_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_tcam_ac_port_table_t::value_type v(*(npl_service_mapping_tcam_ac_port_table_t::value_type*)value);
            return service_mapping_tcam_ac_port_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_tcam_ac_port_tag_table_t::value_type v(*(npl_service_mapping_tcam_ac_port_tag_table_t::value_type*)value);
            return service_mapping_tcam_ac_port_tag_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_tag_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_tcam_ac_port_tag_tag_table_t::value_type v(*(npl_service_mapping_tcam_ac_port_tag_tag_table_t::value_type*)value);
            return service_mapping_tcam_ac_port_tag_tag_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_pwe_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_tcam_pwe_tag_table_t::value_type v(*(npl_service_mapping_tcam_pwe_tag_table_t::value_type*)value);
            return service_mapping_tcam_pwe_tag_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "sgacl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_sgacl_table_t::value_type v(*(npl_sgacl_table_t::value_type*)value);
            return sgacl_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "snoop_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_snoop_table_t::value_type v(*(npl_snoop_table_t::value_type*)value);
            return snoop_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "svl_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_svl_next_macro_static_table_t::value_type v(*(npl_svl_next_macro_static_table_t::value_type*)value);
            return svl_next_macro_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "te_headend_lsp_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_te_headend_lsp_counter_offset_table_t::value_type v(*(npl_te_headend_lsp_counter_offset_table_t::value_type*)value);
            return te_headend_lsp_counter_offset_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "tunnel_dlp_p_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tunnel_dlp_p_counter_offset_table_t::value_type v(*(npl_tunnel_dlp_p_counter_offset_table_t::value_type*)value);
            return tunnel_dlp_p_counter_offset_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "txpp_initial_npe_macro_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_initial_npe_macro_table_t::value_type v(*(npl_txpp_initial_npe_macro_table_t::value_type*)value);
            return txpp_initial_npe_macro_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "urpf_ipsa_dest_is_lpts_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_urpf_ipsa_dest_is_lpts_static_table_t::value_type v(*(npl_urpf_ipsa_dest_is_lpts_static_table_t::value_type*)value);
            return urpf_ipsa_dest_is_lpts_static_table[instance_index].update(line, v);
        }
        
        if (strcmp(table_name, "vlan_format_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vlan_format_table_t::value_type v(*(npl_vlan_format_table_t::value_type*)value);
            return vlan_format_table[instance_index].update(line, v);
        }
        
        return NPL_TABLES_STATUS_EUNKNOWN;
    }
    
    npl_tables_status_e npl_tables_t::erase_table_entry(const char* table_name, size_t instance_index, void* key) {
        if (strcmp(table_name, "acl_map_fi_header_type_to_protocol_number_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_acl_map_fi_header_type_to_protocol_number_table_t::key_type k(*(npl_acl_map_fi_header_type_to_protocol_number_table_t::key_type*)key);
            return acl_map_fi_header_type_to_protocol_number_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "additional_labels_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_additional_labels_table_t::key_type k(*(npl_additional_labels_table_t::key_type*)key);
            return additional_labels_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "all_reachable_vector") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_all_reachable_vector_t::key_type k(*(npl_all_reachable_vector_t::key_type*)key);
            return all_reachable_vector[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_desired_tx_interval_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_desired_tx_interval_table_t::key_type k(*(npl_bfd_desired_tx_interval_table_t::key_type*)key);
            return bfd_desired_tx_interval_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_detection_multiple_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_detection_multiple_table_t::key_type k(*(npl_bfd_detection_multiple_table_t::key_type*)key);
            return bfd_detection_multiple_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_event_queue_table_t::key_type k(*(npl_bfd_event_queue_table_t::key_type*)key);
            return bfd_event_queue_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_da_high_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_inner_da_high_table_t::key_type k(*(npl_bfd_inject_inner_da_high_table_t::key_type*)key);
            return bfd_inject_inner_da_high_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_da_low_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_inner_da_low_table_t::key_type k(*(npl_bfd_inject_inner_da_low_table_t::key_type*)key);
            return bfd_inject_inner_da_low_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_ethernet_header_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_inner_ethernet_header_static_table_t::key_type k(*(npl_bfd_inject_inner_ethernet_header_static_table_t::key_type*)key);
            return bfd_inject_inner_ethernet_header_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_inject_ttl_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_inject_ttl_static_table_t::key_type k(*(npl_bfd_inject_ttl_static_table_t::key_type*)key);
            return bfd_inject_ttl_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_A_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_A_table_t::key_type k(*(npl_bfd_ipv6_sip_A_table_t::key_type*)key);
            return bfd_ipv6_sip_A_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_B_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_B_table_t::key_type k(*(npl_bfd_ipv6_sip_B_table_t::key_type*)key);
            return bfd_ipv6_sip_B_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_C_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_C_table_t::key_type k(*(npl_bfd_ipv6_sip_C_table_t::key_type*)key);
            return bfd_ipv6_sip_C_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_D_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_ipv6_sip_D_table_t::key_type k(*(npl_bfd_ipv6_sip_D_table_t::key_type*)key);
            return bfd_ipv6_sip_D_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_punt_encap_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_punt_encap_static_table_t::key_type k(*(npl_bfd_punt_encap_static_table_t::key_type*)key);
            return bfd_punt_encap_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_required_tx_interval_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_required_tx_interval_table_t::key_type k(*(npl_bfd_required_tx_interval_table_t::key_type*)key);
            return bfd_required_tx_interval_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_rx_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_rx_table_t::key_type k(*(npl_bfd_rx_table_t::key_type*)key);
            return bfd_rx_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_set_inject_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_set_inject_type_static_table_t::key_type k(*(npl_bfd_set_inject_type_static_table_t::key_type*)key);
            return bfd_set_inject_type_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bfd_udp_port_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bfd_udp_port_static_table_t::key_type k(*(npl_bfd_udp_port_static_table_t::key_type*)key);
            return bfd_udp_port_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bitmap_oqg_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bitmap_oqg_map_table_t::key_type k(*(npl_bitmap_oqg_map_table_t::key_type*)key);
            return bitmap_oqg_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "bvn_tc_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_bvn_tc_map_table_t::key_type k(*(npl_bvn_tc_map_table_t::key_type*)key);
            return bvn_tc_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "calc_checksum_enable_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_calc_checksum_enable_table_t::key_type k(*(npl_calc_checksum_enable_table_t::key_type*)key);
            return calc_checksum_enable_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ccm_flags_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ccm_flags_table_t::key_type k(*(npl_ccm_flags_table_t::key_type*)key);
            return ccm_flags_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "cif2npa_c_lri_macro") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cif2npa_c_lri_macro_t::key_type k(*(npl_cif2npa_c_lri_macro_t::key_type*)key);
            return cif2npa_c_lri_macro[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "cif2npa_c_mps_macro") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cif2npa_c_mps_macro_t::key_type k(*(npl_cif2npa_c_mps_macro_t::key_type*)key);
            return cif2npa_c_mps_macro[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "counters_block_config_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_counters_block_config_table_t::key_type k(*(npl_counters_block_config_table_t::key_type*)key);
            return counters_block_config_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "counters_voq_block_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_counters_voq_block_map_table_t::key_type k(*(npl_counters_voq_block_map_table_t::key_type*)key);
            return counters_voq_block_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "cud_is_multicast_bitmap") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cud_is_multicast_bitmap_t::key_type k(*(npl_cud_is_multicast_bitmap_t::key_type*)key);
            return cud_is_multicast_bitmap[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "cud_narrow_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cud_narrow_hw_table_t::key_type k(*(npl_cud_narrow_hw_table_t::key_type*)key);
            return cud_narrow_hw_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "cud_wide_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_cud_wide_hw_table_t::key_type k(*(npl_cud_wide_hw_table_t::key_type*)key);
            return cud_wide_hw_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "dest_slice_voq_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dest_slice_voq_map_table_t::key_type k(*(npl_dest_slice_voq_map_table_t::key_type*)key);
            return dest_slice_voq_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "destination_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_destination_decoding_table_t::key_type k(*(npl_destination_decoding_table_t::key_type*)key);
            return destination_decoding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "device_mode_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_device_mode_table_t::key_type k(*(npl_device_mode_table_t::key_type*)key);
            return device_mode_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "dsp_l2_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dsp_l2_attributes_table_t::key_type k(*(npl_dsp_l2_attributes_table_t::key_type*)key);
            return dsp_l2_attributes_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "dsp_l3_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dsp_l3_attributes_table_t::key_type k(*(npl_dsp_l3_attributes_table_t::key_type*)key);
            return dsp_l3_attributes_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "dummy_dip_index_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_dummy_dip_index_table_t::key_type k(*(npl_dummy_dip_index_table_t::key_type*)key);
            return dummy_dip_index_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "egress_nh_and_svi_direct0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_egress_nh_and_svi_direct0_table_t::key_type k(*(npl_egress_nh_and_svi_direct0_table_t::key_type*)key);
            return egress_nh_and_svi_direct0_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "egress_nh_and_svi_direct1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_egress_nh_and_svi_direct1_table_t::key_type k(*(npl_egress_nh_and_svi_direct1_table_t::key_type*)key);
            return egress_nh_and_svi_direct1_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "em_mp_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_em_mp_table_t::key_type k(*(npl_em_mp_table_t::key_type*)key);
            return em_mp_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "em_pfc_cong_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_em_pfc_cong_table_t::key_type k(*(npl_em_pfc_cong_table_t::key_type*)key);
            return em_pfc_cong_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ene_macro_code_tpid_profile_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ene_macro_code_tpid_profile_static_table_t::key_type k(*(npl_ene_macro_code_tpid_profile_static_table_t::key_type*)key);
            return ene_macro_code_tpid_profile_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "eth_meter_profile_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_meter_profile_mapping_table_t::key_type k(*(npl_eth_meter_profile_mapping_table_t::key_type*)key);
            return eth_meter_profile_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "eth_oam_set_da_mc2_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_oam_set_da_mc2_static_table_t::key_type k(*(npl_eth_oam_set_da_mc2_static_table_t::key_type*)key);
            return eth_oam_set_da_mc2_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "eth_oam_set_da_mc_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_oam_set_da_mc_static_table_t::key_type k(*(npl_eth_oam_set_da_mc_static_table_t::key_type*)key);
            return eth_oam_set_da_mc_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "eth_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eth_rtf_conf_set_mapping_table_t::key_type k(*(npl_eth_rtf_conf_set_mapping_table_t::key_type*)key);
            return eth_rtf_conf_set_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "eve_byte_addition_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eve_byte_addition_static_table_t::key_type k(*(npl_eve_byte_addition_static_table_t::key_type*)key);
            return eve_byte_addition_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "eve_to_ethernet_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_eve_to_ethernet_ene_static_table_t::key_type k(*(npl_eve_to_ethernet_ene_static_table_t::key_type*)key);
            return eve_to_ethernet_ene_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_event_queue_table_t::key_type k(*(npl_event_queue_table_t::key_type*)key);
            return event_queue_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "external_aux_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_external_aux_table_t::key_type k(*(npl_external_aux_table_t::key_type*)key);
            return external_aux_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fabric_header_types_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_header_types_static_table_t::key_type k(*(npl_fabric_header_types_static_table_t::key_type*)key);
            return fabric_header_types_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fabric_rx_fwd_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_fwd_error_handling_counter_table_t::key_type k(*(npl_fabric_rx_fwd_error_handling_counter_table_t::key_type*)key);
            return fabric_rx_fwd_error_handling_counter_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fabric_rx_fwd_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_fwd_error_handling_destination_table_t::key_type k(*(npl_fabric_rx_fwd_error_handling_destination_table_t::key_type*)key);
            return fabric_rx_fwd_error_handling_destination_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fabric_rx_term_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_term_error_handling_counter_table_t::key_type k(*(npl_fabric_rx_term_error_handling_counter_table_t::key_type*)key);
            return fabric_rx_term_error_handling_counter_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fabric_rx_term_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_rx_term_error_handling_destination_table_t::key_type k(*(npl_fabric_rx_term_error_handling_destination_table_t::key_type*)key);
            return fabric_rx_term_error_handling_destination_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fabric_scaled_mc_map_to_netork_slice_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::key_type k(*(npl_fabric_scaled_mc_map_to_netork_slice_static_table_t::key_type*)key);
            return fabric_scaled_mc_map_to_netork_slice_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fabric_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_smcid_threshold_table_t::key_type k(*(npl_fabric_smcid_threshold_table_t::key_type*)key);
            return fabric_smcid_threshold_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fabric_tm_headers_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fabric_tm_headers_table_t::key_type k(*(npl_fabric_tm_headers_table_t::key_type*)key);
            return fabric_tm_headers_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fb_link_2_link_bundle_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fb_link_2_link_bundle_table_t::key_type k(*(npl_fb_link_2_link_bundle_table_t::key_type*)key);
            return fb_link_2_link_bundle_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fe_broadcast_bmp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_broadcast_bmp_table_t::key_type k(*(npl_fe_broadcast_bmp_table_t::key_type*)key);
            return fe_broadcast_bmp_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fe_rlb_uc_tx_fb_link_to_oq_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::key_type k(*(npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t::key_type*)key);
            return fe_rlb_uc_tx_fb_link_to_oq_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fe_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_smcid_threshold_table_t::key_type k(*(npl_fe_smcid_threshold_table_t::key_type*)key);
            return fe_smcid_threshold_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fe_smcid_to_mcid_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_smcid_to_mcid_table_t::key_type k(*(npl_fe_smcid_to_mcid_table_t::key_type*)key);
            return fe_smcid_to_mcid_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fe_uc_link_bundle_desc_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fe_uc_link_bundle_desc_table_t::key_type k(*(npl_fe_uc_link_bundle_desc_table_t::key_type*)key);
            return fe_uc_link_bundle_desc_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fi_macro_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fi_macro_config_table_t::key_type k(*(npl_fi_macro_config_table_t::key_type*)key);
            return fi_macro_config_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "filb_voq_mapping") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_filb_voq_mapping_t::key_type k(*(npl_filb_voq_mapping_t::key_type*)key);
            return filb_voq_mapping[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "first_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_first_ene_static_table_t::key_type k(*(npl_first_ene_static_table_t::key_type*)key);
            return first_ene_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "frm_db_fabric_routing_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_frm_db_fabric_routing_table_t::key_type k(*(npl_frm_db_fabric_routing_table_t::key_type*)key);
            return frm_db_fabric_routing_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fwd_destination_to_tm_result_data") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fwd_destination_to_tm_result_data_t::key_type k(*(npl_fwd_destination_to_tm_result_data_t::key_type*)key);
            return fwd_destination_to_tm_result_data[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "fwd_type_to_ive_enable_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_fwd_type_to_ive_enable_table_t::key_type k(*(npl_fwd_type_to_ive_enable_table_t::key_type*)key);
            return fwd_type_to_ive_enable_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "get_ecm_meter_ptr_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_ecm_meter_ptr_table_t::key_type k(*(npl_get_ecm_meter_ptr_table_t::key_type*)key);
            return get_ecm_meter_ptr_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "get_ingress_ptp_info_and_is_slp_dm_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::key_type k(*(npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t::key_type*)key);
            return get_ingress_ptp_info_and_is_slp_dm_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "get_l2_rtf_conf_set_and_init_stages") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_l2_rtf_conf_set_and_init_stages_t::key_type k(*(npl_get_l2_rtf_conf_set_and_init_stages_t::key_type*)key);
            return get_l2_rtf_conf_set_and_init_stages[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "get_non_comp_mc_value_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_get_non_comp_mc_value_static_table_t::key_type k(*(npl_get_non_comp_mc_value_static_table_t::key_type*)key);
            return get_non_comp_mc_value_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "gre_proto_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_gre_proto_static_table_t::key_type k(*(npl_gre_proto_static_table_t::key_type*)key);
            return gre_proto_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "hmc_cgm_cgm_lut_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_hmc_cgm_cgm_lut_table_t::key_type k(*(npl_hmc_cgm_cgm_lut_table_t::key_type*)key);
            return hmc_cgm_cgm_lut_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "hmc_cgm_profile_global_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_hmc_cgm_profile_global_table_t::key_type k(*(npl_hmc_cgm_profile_global_table_t::key_type*)key);
            return hmc_cgm_profile_global_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ibm_cmd_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ibm_cmd_table_t::key_type k(*(npl_ibm_cmd_table_t::key_type*)key);
            return ibm_cmd_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ibm_mc_cmd_to_encap_data_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ibm_mc_cmd_to_encap_data_table_t::key_type k(*(npl_ibm_mc_cmd_to_encap_data_table_t::key_type*)key);
            return ibm_mc_cmd_to_encap_data_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ibm_uc_cmd_to_encap_data_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ibm_uc_cmd_to_encap_data_table_t::key_type k(*(npl_ibm_uc_cmd_to_encap_data_table_t::key_type*)key);
            return ibm_uc_cmd_to_encap_data_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ifgb_tc_lut_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ifgb_tc_lut_table_t::key_type k(*(npl_ifgb_tc_lut_table_t::key_type*)key);
            return ifgb_tc_lut_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ingress_ip_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ingress_ip_qos_mapping_table_t::key_type k(*(npl_ingress_ip_qos_mapping_table_t::key_type*)key);
            return ingress_ip_qos_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "inject_down_tx_redirect_counter_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_down_tx_redirect_counter_table_t::key_type k(*(npl_inject_down_tx_redirect_counter_table_t::key_type*)key);
            return inject_down_tx_redirect_counter_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "inject_mact_ldb_to_output_lr") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_mact_ldb_to_output_lr_t::key_type k(*(npl_inject_mact_ldb_to_output_lr_t::key_type*)key);
            return inject_mact_ldb_to_output_lr[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "inject_up_pif_ifg_init_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_up_pif_ifg_init_data_table_t::key_type k(*(npl_inject_up_pif_ifg_init_data_table_t::key_type*)key);
            return inject_up_pif_ifg_init_data_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "inject_up_ssp_init_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inject_up_ssp_init_data_table_t::key_type k(*(npl_inject_up_ssp_init_data_table_t::key_type*)key);
            return inject_up_ssp_init_data_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "inner_tpid_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_inner_tpid_table_t::key_type k(*(npl_inner_tpid_table_t::key_type*)key);
            return inner_tpid_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ip_fwd_header_mapping_to_ethtype_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_fwd_header_mapping_to_ethtype_static_table_t::key_type k(*(npl_ip_fwd_header_mapping_to_ethtype_static_table_t::key_type*)key);
            return ip_fwd_header_mapping_to_ethtype_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ip_mc_local_inject_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_mc_local_inject_type_static_table_t::key_type k(*(npl_ip_mc_local_inject_type_static_table_t::key_type*)key);
            return ip_mc_local_inject_type_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ip_mc_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_mc_next_macro_static_table_t::key_type k(*(npl_ip_mc_next_macro_static_table_t::key_type*)key);
            return ip_mc_next_macro_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ip_meter_profile_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_meter_profile_mapping_table_t::key_type k(*(npl_ip_meter_profile_mapping_table_t::key_type*)key);
            return ip_meter_profile_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ip_prefix_destination_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_prefix_destination_table_t::key_type k(*(npl_ip_prefix_destination_table_t::key_type*)key);
            return ip_prefix_destination_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ip_relay_to_vni_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_relay_to_vni_table_t::key_type k(*(npl_ip_relay_to_vni_table_t::key_type*)key);
            return ip_relay_to_vni_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ip_rx_global_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ip_rx_global_counter_table_t::key_type k(*(npl_ip_rx_global_counter_table_t::key_type*)key);
            return ip_rx_global_counter_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv4_acl_sport_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_acl_sport_static_table_t::key_type k(*(npl_ipv4_acl_sport_static_table_t::key_type*)key);
            return ipv4_acl_sport_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_dip_index_tt0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::key_type k(*(npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t::key_type*)key);
            return ipv4_ip_tunnel_termination_dip_index_tt0_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_sip_dip_index_tt0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::key_type k(*(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t::key_type*)key);
            return ipv4_ip_tunnel_termination_sip_dip_index_tt0_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_sip_dip_index_tt1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::key_type k(*(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t::key_type*)key);
            return ipv4_ip_tunnel_termination_sip_dip_index_tt1_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv4_og_pcl_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_og_pcl_em_table_t::key_type k(*(npl_ipv4_og_pcl_em_table_t::key_type*)key);
            return ipv4_og_pcl_em_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv4_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_rtf_conf_set_mapping_table_t::key_type k(*(npl_ipv4_rtf_conf_set_mapping_table_t::key_type*)key);
            return ipv4_rtf_conf_set_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv4_vrf_dip_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_vrf_dip_em_table_t::key_type k(*(npl_ipv4_vrf_dip_em_table_t::key_type*)key);
            return ipv4_vrf_dip_em_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv4_vrf_s_g_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_vrf_s_g_table_t::key_type k(*(npl_ipv4_vrf_s_g_table_t::key_type*)key);
            return ipv4_vrf_s_g_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv6_acl_sport_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_acl_sport_static_table_t::key_type k(*(npl_ipv6_acl_sport_static_table_t::key_type*)key);
            return ipv6_acl_sport_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv6_mc_select_qos_id") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_mc_select_qos_id_t::key_type k(*(npl_ipv6_mc_select_qos_id_t::key_type*)key);
            return ipv6_mc_select_qos_id[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv6_og_pcl_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_og_pcl_em_table_t::key_type k(*(npl_ipv6_og_pcl_em_table_t::key_type*)key);
            return ipv6_og_pcl_em_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv6_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_rtf_conf_set_mapping_table_t::key_type k(*(npl_ipv6_rtf_conf_set_mapping_table_t::key_type*)key);
            return ipv6_rtf_conf_set_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv6_vrf_dip_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_vrf_dip_em_table_t::key_type k(*(npl_ipv6_vrf_dip_em_table_t::key_type*)key);
            return ipv6_vrf_dip_em_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ipv6_vrf_s_g_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_vrf_s_g_table_t::key_type k(*(npl_ipv6_vrf_s_g_table_t::key_type*)key);
            return ipv6_vrf_s_g_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "is_pacific_b1_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_is_pacific_b1_static_table_t::key_type k(*(npl_is_pacific_b1_static_table_t::key_type*)key);
            return is_pacific_b1_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "l2_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_dlp_table_t::key_type k(*(npl_l2_dlp_table_t::key_type*)key);
            return l2_dlp_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "l2_lp_profile_filter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lp_profile_filter_table_t::key_type k(*(npl_l2_lp_profile_filter_table_t::key_type*)key);
            return l2_lp_profile_filter_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "l2_lpts_ip_fragment_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_ip_fragment_static_table_t::key_type k(*(npl_l2_lpts_ip_fragment_static_table_t::key_type*)key);
            return l2_lpts_ip_fragment_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "l2_lpts_skip_p2p_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_lpts_skip_p2p_static_table_t::key_type k(*(npl_l2_lpts_skip_p2p_static_table_t::key_type*)key);
            return l2_lpts_skip_p2p_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "l2_tunnel_term_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l2_tunnel_term_next_macro_static_table_t::key_type k(*(npl_l2_tunnel_term_next_macro_static_table_t::key_type*)key);
            return l2_tunnel_term_next_macro_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "l3_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_dlp_table_t::key_type k(*(npl_l3_dlp_table_t::key_type*)key);
            return l3_dlp_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "l3_vxlan_overlay_sa_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_l3_vxlan_overlay_sa_table_t::key_type k(*(npl_l3_vxlan_overlay_sa_table_t::key_type*)key);
            return l3_vxlan_overlay_sa_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "large_encap_global_lsp_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_global_lsp_prefix_table_t::key_type k(*(npl_large_encap_global_lsp_prefix_table_t::key_type*)key);
            return large_encap_global_lsp_prefix_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "large_encap_ip_tunnel_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_ip_tunnel_table_t::key_type k(*(npl_large_encap_ip_tunnel_table_t::key_type*)key);
            return large_encap_ip_tunnel_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "large_encap_mpls_he_no_ldp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_mpls_he_no_ldp_table_t::key_type k(*(npl_large_encap_mpls_he_no_ldp_table_t::key_type*)key);
            return large_encap_mpls_he_no_ldp_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "large_encap_mpls_ldp_over_te_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_mpls_ldp_over_te_table_t::key_type k(*(npl_large_encap_mpls_ldp_over_te_table_t::key_type*)key);
            return large_encap_mpls_ldp_over_te_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "large_encap_te_he_tunnel_id_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_large_encap_te_he_tunnel_id_table_t::key_type k(*(npl_large_encap_te_he_tunnel_id_table_t::key_type*)key);
            return large_encap_te_he_tunnel_id_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "latest_learn_records_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_latest_learn_records_table_t::key_type k(*(npl_latest_learn_records_table_t::key_type*)key);
            return latest_learn_records_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "learn_manager_cfg_max_learn_type_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_learn_manager_cfg_max_learn_type_reg_t::key_type k(*(npl_learn_manager_cfg_max_learn_type_reg_t::key_type*)key);
            return learn_manager_cfg_max_learn_type_reg[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "learn_record_fifo_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_learn_record_fifo_table_t::key_type k(*(npl_learn_record_fifo_table_t::key_type*)key);
            return learn_record_fifo_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "light_fi_fabric_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_fabric_table_t::key_type k(*(npl_light_fi_fabric_table_t::key_type*)key);
            return light_fi_fabric_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "light_fi_npu_base_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_npu_base_table_t::key_type k(*(npl_light_fi_npu_base_table_t::key_type*)key);
            return light_fi_npu_base_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "light_fi_npu_encap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_npu_encap_table_t::key_type k(*(npl_light_fi_npu_encap_table_t::key_type*)key);
            return light_fi_npu_encap_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "light_fi_stages_cfg_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_stages_cfg_table_t::key_type k(*(npl_light_fi_stages_cfg_table_t::key_type*)key);
            return light_fi_stages_cfg_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "light_fi_tm_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_light_fi_tm_table_t::key_type k(*(npl_light_fi_tm_table_t::key_type*)key);
            return light_fi_tm_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "link_relay_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_link_relay_attributes_table_t::key_type k(*(npl_link_relay_attributes_table_t::key_type*)key);
            return link_relay_attributes_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "link_up_vector") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_link_up_vector_t::key_type k(*(npl_link_up_vector_t::key_type*)key);
            return link_up_vector[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "lp_over_lag_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lp_over_lag_table_t::key_type k(*(npl_lp_over_lag_table_t::key_type*)key);
            return lp_over_lag_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "lpm_destination_prefix_map_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpm_destination_prefix_map_table_t::key_type k(*(npl_lpm_destination_prefix_map_table_t::key_type*)key);
            return lpm_destination_prefix_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "lpts_2nd_lookup_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpts_2nd_lookup_table_t::key_type k(*(npl_lpts_2nd_lookup_table_t::key_type*)key);
            return lpts_2nd_lookup_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "lpts_meter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpts_meter_table_t::key_type k(*(npl_lpts_meter_table_t::key_type*)key);
            return lpts_meter_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "lr_filter_write_ptr_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lr_filter_write_ptr_reg_t::key_type k(*(npl_lr_filter_write_ptr_reg_t::key_type*)key);
            return lr_filter_write_ptr_reg[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "lr_write_ptr_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lr_write_ptr_reg_t::key_type k(*(npl_lr_write_ptr_reg_t::key_type*)key);
            return lr_write_ptr_reg[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mac_af_npp_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_af_npp_attributes_table_t::key_type k(*(npl_mac_af_npp_attributes_table_t::key_type*)key);
            return mac_af_npp_attributes_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mac_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_forwarding_table_t::key_type k(*(npl_mac_forwarding_table_t::key_type*)key);
            return mac_forwarding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mac_mc_em_termination_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_mc_em_termination_attributes_table_t::key_type k(*(npl_mac_mc_em_termination_attributes_table_t::key_type*)key);
            return mac_mc_em_termination_attributes_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mac_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_qos_mapping_table_t::key_type k(*(npl_mac_qos_mapping_table_t::key_type*)key);
            return mac_qos_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mac_relay_g_ipv4_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_relay_g_ipv4_table_t::key_type k(*(npl_mac_relay_g_ipv4_table_t::key_type*)key);
            return mac_relay_g_ipv4_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mac_relay_g_ipv6_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_relay_g_ipv6_table_t::key_type k(*(npl_mac_relay_g_ipv6_table_t::key_type*)key);
            return mac_relay_g_ipv6_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mac_relay_to_vni_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_relay_to_vni_table_t::key_type k(*(npl_mac_relay_to_vni_table_t::key_type*)key);
            return mac_relay_to_vni_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mac_termination_em_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_termination_em_table_t::key_type k(*(npl_mac_termination_em_table_t::key_type*)key);
            return mac_termination_em_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mac_termination_no_da_em_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mac_termination_no_da_em_table_t::key_type k(*(npl_mac_termination_no_da_em_table_t::key_type*)key);
            return mac_termination_no_da_em_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "map_ene_subcode_to8bit_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_ene_subcode_to8bit_static_table_t::key_type k(*(npl_map_ene_subcode_to8bit_static_table_t::key_type*)key);
            return map_ene_subcode_to8bit_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "map_more_labels_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_more_labels_static_table_t::key_type k(*(npl_map_more_labels_static_table_t::key_type*)key);
            return map_more_labels_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "map_recyle_tx_to_rx_data_on_pd_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::key_type k(*(npl_map_recyle_tx_to_rx_data_on_pd_static_table_t::key_type*)key);
            return map_recyle_tx_to_rx_data_on_pd_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "map_tm_dp_ecn_to_wa_ecn_dp_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::key_type k(*(npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t::key_type*)key);
            return map_tm_dp_ecn_to_wa_ecn_dp_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mc_bitmap_base_voq_lookup_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_bitmap_base_voq_lookup_table_t::key_type k(*(npl_mc_bitmap_base_voq_lookup_table_t::key_type*)key);
            return mc_bitmap_base_voq_lookup_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mc_bitmap_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_bitmap_tc_map_table_t::key_type k(*(npl_mc_bitmap_tc_map_table_t::key_type*)key);
            return mc_bitmap_tc_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mc_copy_id_map") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_copy_id_map_t::key_type k(*(npl_mc_copy_id_map_t::key_type*)key);
            return mc_copy_id_map[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mc_cud_is_wide_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_cud_is_wide_table_t::key_type k(*(npl_mc_cud_is_wide_table_t::key_type*)key);
            return mc_cud_is_wide_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mc_em_db") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_em_db_t::key_type k(*(npl_mc_em_db_t::key_type*)key);
            return mc_em_db[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mc_emdb_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_emdb_tc_map_table_t::key_type k(*(npl_mc_emdb_tc_map_table_t::key_type*)key);
            return mc_emdb_tc_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mc_fe_links_bmp") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_fe_links_bmp_t::key_type k(*(npl_mc_fe_links_bmp_t::key_type*)key);
            return mc_fe_links_bmp[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mc_ibm_cud_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_ibm_cud_mapping_table_t::key_type k(*(npl_mc_ibm_cud_mapping_table_t::key_type*)key);
            return mc_ibm_cud_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mc_slice_bitmap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mc_slice_bitmap_table_t::key_type k(*(npl_mc_slice_bitmap_table_t::key_type*)key);
            return mc_slice_bitmap_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mep_address_prefix_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mep_address_prefix_table_t::key_type k(*(npl_mep_address_prefix_table_t::key_type*)key);
            return mep_address_prefix_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mii_loopback_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mii_loopback_table_t::key_type k(*(npl_mii_loopback_table_t::key_type*)key);
            return mii_loopback_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mirror_code_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mirror_code_hw_table_t::key_type k(*(npl_mirror_code_hw_table_t::key_type*)key);
            return mirror_code_hw_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mirror_egress_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mirror_egress_attributes_table_t::key_type k(*(npl_mirror_egress_attributes_table_t::key_type*)key);
            return mirror_egress_attributes_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mirror_to_dsp_in_npu_soft_header_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mirror_to_dsp_in_npu_soft_header_table_t::key_type k(*(npl_mirror_to_dsp_in_npu_soft_header_table_t::key_type*)key);
            return mirror_to_dsp_in_npu_soft_header_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mldp_protection_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mldp_protection_table_t::key_type k(*(npl_mldp_protection_table_t::key_type*)key);
            return mldp_protection_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mp_aux_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mp_aux_data_table_t::key_type k(*(npl_mp_aux_data_table_t::key_type*)key);
            return mp_aux_data_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mp_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mp_data_table_t::key_type k(*(npl_mp_data_table_t::key_type*)key);
            return mp_data_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mpls_encap_control_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_encap_control_static_table_t::key_type k(*(npl_mpls_encap_control_static_table_t::key_type*)key);
            return mpls_encap_control_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mpls_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_forwarding_table_t::key_type k(*(npl_mpls_forwarding_table_t::key_type*)key);
            return mpls_forwarding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mpls_header_offset_in_bytes_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_header_offset_in_bytes_static_table_t::key_type k(*(npl_mpls_header_offset_in_bytes_static_table_t::key_type*)key);
            return mpls_header_offset_in_bytes_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mpls_l3_lsp_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_l3_lsp_static_table_t::key_type k(*(npl_mpls_l3_lsp_static_table_t::key_type*)key);
            return mpls_l3_lsp_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mpls_labels_1_to_4_jump_offset_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_labels_1_to_4_jump_offset_static_table_t::key_type k(*(npl_mpls_labels_1_to_4_jump_offset_static_table_t::key_type*)key);
            return mpls_labels_1_to_4_jump_offset_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mpls_lsp_labels_config_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_lsp_labels_config_static_table_t::key_type k(*(npl_mpls_lsp_labels_config_static_table_t::key_type*)key);
            return mpls_lsp_labels_config_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mpls_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_qos_mapping_table_t::key_type k(*(npl_mpls_qos_mapping_table_t::key_type*)key);
            return mpls_qos_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mpls_termination_em0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_termination_em0_table_t::key_type k(*(npl_mpls_termination_em0_table_t::key_type*)key);
            return mpls_termination_em0_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "mpls_termination_em1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_mpls_termination_em1_table_t::key_type k(*(npl_mpls_termination_em1_table_t::key_type*)key);
            return mpls_termination_em1_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ms_voq_fabric_context_offset_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ms_voq_fabric_context_offset_table_t::key_type k(*(npl_ms_voq_fabric_context_offset_table_t::key_type*)key);
            return ms_voq_fabric_context_offset_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_ce_ptr_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_ce_ptr_table_t::key_type k(*(npl_native_ce_ptr_table_t::key_type*)key);
            return native_ce_ptr_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_fec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_fec_table_t::key_type k(*(npl_native_fec_table_t::key_type*)key);
            return native_fec_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_fec_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_fec_type_decoding_table_t::key_type k(*(npl_native_fec_type_decoding_table_t::key_type*)key);
            return native_fec_type_decoding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_frr_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_frr_table_t::key_type k(*(npl_native_frr_table_t::key_type*)key);
            return native_frr_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_frr_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_frr_type_decoding_table_t::key_type k(*(npl_native_frr_type_decoding_table_t::key_type*)key);
            return native_frr_type_decoding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_l2_lp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_l2_lp_table_t::key_type k(*(npl_native_l2_lp_table_t::key_type*)key);
            return native_l2_lp_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_l2_lp_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_l2_lp_type_decoding_table_t::key_type k(*(npl_native_l2_lp_type_decoding_table_t::key_type*)key);
            return native_l2_lp_type_decoding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lb_group_size_table_t::key_type k(*(npl_native_lb_group_size_table_t::key_type*)key);
            return native_lb_group_size_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lb_table_t::key_type k(*(npl_native_lb_table_t::key_type*)key);
            return native_lb_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lb_type_decoding_table_t::key_type k(*(npl_native_lb_type_decoding_table_t::key_type*)key);
            return native_lb_type_decoding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_lp_is_pbts_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lp_is_pbts_prefix_table_t::key_type k(*(npl_native_lp_is_pbts_prefix_table_t::key_type*)key);
            return native_lp_is_pbts_prefix_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_lp_pbts_map_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_lp_pbts_map_table_t::key_type k(*(npl_native_lp_pbts_map_table_t::key_type*)key);
            return native_lp_pbts_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "native_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_native_protection_table_t::key_type k(*(npl_native_protection_table_t::key_type*)key);
            return native_protection_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "next_header_1_is_l4_over_ipv4_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_next_header_1_is_l4_over_ipv4_static_table_t::key_type k(*(npl_next_header_1_is_l4_over_ipv4_static_table_t::key_type*)key);
            return next_header_1_is_l4_over_ipv4_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "nh_macro_code_to_id_l6_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_nh_macro_code_to_id_l6_static_table_t::key_type k(*(npl_nh_macro_code_to_id_l6_static_table_t::key_type*)key);
            return nh_macro_code_to_id_l6_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "nhlfe_type_mapping_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_nhlfe_type_mapping_static_table_t::key_type k(*(npl_nhlfe_type_mapping_static_table_t::key_type*)key);
            return nhlfe_type_mapping_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "nw_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_nw_smcid_threshold_table_t::key_type k(*(npl_nw_smcid_threshold_table_t::key_type*)key);
            return nw_smcid_threshold_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "oamp_drop_destination_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_drop_destination_static_table_t::key_type k(*(npl_oamp_drop_destination_static_table_t::key_type*)key);
            return oamp_drop_destination_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "oamp_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_event_queue_table_t::key_type k(*(npl_oamp_event_queue_table_t::key_type*)key);
            return oamp_event_queue_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "oamp_redirect_get_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_get_counter_table_t::key_type k(*(npl_oamp_redirect_get_counter_table_t::key_type*)key);
            return oamp_redirect_get_counter_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_1_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_1_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_1_table_t::key_type*)key);
            return oamp_redirect_punt_eth_hdr_1_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_2_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_2_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_2_table_t::key_type*)key);
            return oamp_redirect_punt_eth_hdr_2_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_3_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_3_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_3_table_t::key_type*)key);
            return oamp_redirect_punt_eth_hdr_3_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_4_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_punt_eth_hdr_4_table_t::key_type k(*(npl_oamp_redirect_punt_eth_hdr_4_table_t::key_type*)key);
            return oamp_redirect_punt_eth_hdr_4_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "oamp_redirect_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_oamp_redirect_table_t::key_type k(*(npl_oamp_redirect_table_t::key_type*)key);
            return oamp_redirect_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "outer_tpid_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_outer_tpid_table_t::key_type k(*(npl_outer_tpid_table_t::key_type*)key);
            return outer_tpid_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "overlay_ipv4_sip_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_overlay_ipv4_sip_table_t::key_type k(*(npl_overlay_ipv4_sip_table_t::key_type*)key);
            return overlay_ipv4_sip_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "path_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lb_type_decoding_table_t::key_type k(*(npl_path_lb_type_decoding_table_t::key_type*)key);
            return path_lb_type_decoding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "path_lp_is_pbts_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_is_pbts_prefix_table_t::key_type k(*(npl_path_lp_is_pbts_prefix_table_t::key_type*)key);
            return path_lp_is_pbts_prefix_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "path_lp_pbts_map_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_pbts_map_table_t::key_type k(*(npl_path_lp_pbts_map_table_t::key_type*)key);
            return path_lp_pbts_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "path_lp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_table_t::key_type k(*(npl_path_lp_table_t::key_type*)key);
            return path_lp_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "path_lp_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_lp_type_decoding_table_t::key_type k(*(npl_path_lp_type_decoding_table_t::key_type*)key);
            return path_lp_type_decoding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "path_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_path_protection_table_t::key_type k(*(npl_path_protection_table_t::key_type*)key);
            return path_protection_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pdoq_oq_ifc_mapping") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pdoq_oq_ifc_mapping_t::key_type k(*(npl_pdoq_oq_ifc_mapping_t::key_type*)key);
            return pdoq_oq_ifc_mapping[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pdvoq_bank_pair_offset_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pdvoq_bank_pair_offset_table_t::key_type k(*(npl_pdvoq_bank_pair_offset_table_t::key_type*)key);
            return pdvoq_bank_pair_offset_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pdvoq_slice_voq_properties_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pdvoq_slice_voq_properties_table_t::key_type k(*(npl_pdvoq_slice_voq_properties_table_t::key_type*)key);
            return pdvoq_slice_voq_properties_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "per_asbr_and_dpe_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_asbr_and_dpe_table_t::key_type k(*(npl_per_asbr_and_dpe_table_t::key_type*)key);
            return per_asbr_and_dpe_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "per_pe_and_prefix_vpn_key_large_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_pe_and_prefix_vpn_key_large_table_t::key_type k(*(npl_per_pe_and_prefix_vpn_key_large_table_t::key_type*)key);
            return per_pe_and_prefix_vpn_key_large_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "per_pe_and_vrf_vpn_key_large_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_pe_and_vrf_vpn_key_large_table_t::key_type k(*(npl_per_pe_and_vrf_vpn_key_large_table_t::key_type*)key);
            return per_pe_and_vrf_vpn_key_large_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "per_port_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_port_destination_table_t::key_type k(*(npl_per_port_destination_table_t::key_type*)key);
            return per_port_destination_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "per_vrf_mpls_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_per_vrf_mpls_forwarding_table_t::key_type k(*(npl_per_vrf_mpls_forwarding_table_t::key_type*)key);
            return per_vrf_mpls_forwarding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pfc_destination_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_destination_table_t::key_type k(*(npl_pfc_destination_table_t::key_type*)key);
            return pfc_destination_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pfc_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_event_queue_table_t::key_type k(*(npl_pfc_event_queue_table_t::key_type*)key);
            return pfc_event_queue_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pfc_tc_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_tc_table_t::key_type k(*(npl_pfc_tc_table_t::key_type*)key);
            return pfc_tc_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pfc_vector_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pfc_vector_static_table_t::key_type k(*(npl_pfc_vector_static_table_t::key_type*)key);
            return pfc_vector_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pin_start_offset_macros") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pin_start_offset_macros_t::key_type k(*(npl_pin_start_offset_macros_t::key_type*)key);
            return pin_start_offset_macros[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pma_loopback_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pma_loopback_table_t::key_type k(*(npl_pma_loopback_table_t::key_type*)key);
            return pma_loopback_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "port_dspa_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_dspa_group_size_table_t::key_type k(*(npl_port_dspa_group_size_table_t::key_type*)key);
            return port_dspa_group_size_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "port_dspa_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_dspa_table_t::key_type k(*(npl_port_dspa_table_t::key_type*)key);
            return port_dspa_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "port_dspa_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_dspa_type_decoding_table_t::key_type k(*(npl_port_dspa_type_decoding_table_t::key_type*)key);
            return port_dspa_type_decoding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "port_npp_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_npp_protection_table_t::key_type k(*(npl_port_npp_protection_table_t::key_type*)key);
            return port_npp_protection_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "port_npp_protection_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_npp_protection_type_decoding_table_t::key_type k(*(npl_port_npp_protection_type_decoding_table_t::key_type*)key);
            return port_npp_protection_type_decoding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "port_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_port_protection_table_t::key_type k(*(npl_port_protection_table_t::key_type*)key);
            return port_protection_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "punt_rcy_inject_header_ene_encap_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_rcy_inject_header_ene_encap_table_t::key_type k(*(npl_punt_rcy_inject_header_ene_encap_table_t::key_type*)key);
            return punt_rcy_inject_header_ene_encap_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "punt_select_nw_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_select_nw_ene_static_table_t::key_type k(*(npl_punt_select_nw_ene_static_table_t::key_type*)key);
            return punt_select_nw_ene_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_encap_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_tunnel_transport_encap_table_t::key_type k(*(npl_punt_tunnel_transport_encap_table_t::key_type*)key);
            return punt_tunnel_transport_encap_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_extended_encap_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_tunnel_transport_extended_encap_table_t::key_type k(*(npl_punt_tunnel_transport_extended_encap_table_t::key_type*)key);
            return punt_tunnel_transport_extended_encap_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_extended_encap_table2") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_punt_tunnel_transport_extended_encap_table2_t::key_type k(*(npl_punt_tunnel_transport_extended_encap_table2_t::key_type*)key);
            return punt_tunnel_transport_extended_encap_table2[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pwe_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_label_table_t::key_type k(*(npl_pwe_label_table_t::key_type*)key);
            return pwe_label_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pwe_to_l3_dest_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_to_l3_dest_table_t::key_type k(*(npl_pwe_to_l3_dest_table_t::key_type*)key);
            return pwe_to_l3_dest_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pwe_vpls_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_vpls_label_table_t::key_type k(*(npl_pwe_vpls_label_table_t::key_type*)key);
            return pwe_vpls_label_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "pwe_vpls_tunnel_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_pwe_vpls_tunnel_label_table_t::key_type k(*(npl_pwe_vpls_tunnel_label_table_t::key_type*)key);
            return pwe_vpls_tunnel_label_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "reassembly_source_port_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_reassembly_source_port_map_table_t::key_type k(*(npl_reassembly_source_port_map_table_t::key_type*)key);
            return reassembly_source_port_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "recycle_override_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_recycle_override_table_t::key_type k(*(npl_recycle_override_table_t::key_type*)key);
            return recycle_override_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "recycled_inject_up_info_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_recycled_inject_up_info_table_t::key_type k(*(npl_recycled_inject_up_info_table_t::key_type*)key);
            return recycled_inject_up_info_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "redirect_destination_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_redirect_destination_table_t::key_type k(*(npl_redirect_destination_table_t::key_type*)key);
            return redirect_destination_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "resolution_set_next_macro_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_resolution_set_next_macro_table_t::key_type k(*(npl_resolution_set_next_macro_table_t::key_type*)key);
            return resolution_set_next_macro_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rewrite_sa_prefix_index_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rewrite_sa_prefix_index_table_t::key_type k(*(npl_rewrite_sa_prefix_index_table_t::key_type*)key);
            return rewrite_sa_prefix_index_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rmep_last_time_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rmep_last_time_table_t::key_type k(*(npl_rmep_last_time_table_t::key_type*)key);
            return rmep_last_time_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rmep_state_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rmep_state_table_t::key_type k(*(npl_rmep_state_table_t::key_type*)key);
            return rmep_state_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rpf_fec_access_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rpf_fec_access_map_table_t::key_type k(*(npl_rpf_fec_access_map_table_t::key_type*)key);
            return rpf_fec_access_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rpf_fec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rpf_fec_table_t::key_type k(*(npl_rpf_fec_table_t::key_type*)key);
            return rpf_fec_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_og_pcl_compress_bits_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::key_type k(*(npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t::key_type*)key);
            return rtf_conf_set_to_og_pcl_compress_bits_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_og_pcl_ids_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::key_type k(*(npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t::key_type*)key);
            return rtf_conf_set_to_og_pcl_ids_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_post_fwd_stage_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::key_type k(*(npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t::key_type*)key);
            return rtf_conf_set_to_post_fwd_stage_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_counters_block_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_counters_block_config_table_t::key_type k(*(npl_rx_counters_block_config_table_t::key_type*)key);
            return rx_counters_block_config_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_fwd_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_fwd_error_handling_counter_table_t::key_type k(*(npl_rx_fwd_error_handling_counter_table_t::key_type*)key);
            return rx_fwd_error_handling_counter_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_fwd_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_fwd_error_handling_destination_table_t::key_type k(*(npl_rx_fwd_error_handling_destination_table_t::key_type*)key);
            return rx_fwd_error_handling_destination_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_ip_p_counter_offset_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_ip_p_counter_offset_static_table_t::key_type k(*(npl_rx_ip_p_counter_offset_static_table_t::key_type*)key);
            return rx_ip_p_counter_offset_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_map_npp_to_ssp_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_map_npp_to_ssp_table_t::key_type k(*(npl_rx_map_npp_to_ssp_table_t::key_type*)key);
            return rx_map_npp_to_ssp_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_attribute_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_block_meter_attribute_table_t::key_type k(*(npl_rx_meter_block_meter_attribute_table_t::key_type*)key);
            return rx_meter_block_meter_attribute_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_block_meter_profile_table_t::key_type k(*(npl_rx_meter_block_meter_profile_table_t::key_type*)key);
            return rx_meter_block_meter_profile_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_block_meter_shaper_configuration_table_t::key_type k(*(npl_rx_meter_block_meter_shaper_configuration_table_t::key_type*)key);
            return rx_meter_block_meter_shaper_configuration_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_meter_distributed_meter_profile_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_distributed_meter_profile_table_t::key_type k(*(npl_rx_meter_distributed_meter_profile_table_t::key_type*)key);
            return rx_meter_distributed_meter_profile_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_meter_exact_meter_decision_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_exact_meter_decision_mapping_table_t::key_type k(*(npl_rx_meter_exact_meter_decision_mapping_table_t::key_type*)key);
            return rx_meter_exact_meter_decision_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_meter_meter_profile_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_meter_profile_table_t::key_type k(*(npl_rx_meter_meter_profile_table_t::key_type*)key);
            return rx_meter_meter_profile_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_meter_meter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_meter_shaper_configuration_table_t::key_type k(*(npl_rx_meter_meter_shaper_configuration_table_t::key_type*)key);
            return rx_meter_meter_shaper_configuration_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_meter_meters_attribute_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_meters_attribute_table_t::key_type k(*(npl_rx_meter_meters_attribute_table_t::key_type*)key);
            return rx_meter_meters_attribute_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_meter_rate_limiter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_rate_limiter_shaper_configuration_table_t::key_type k(*(npl_rx_meter_rate_limiter_shaper_configuration_table_t::key_type*)key);
            return rx_meter_rate_limiter_shaper_configuration_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_meter_stat_meter_decision_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_meter_stat_meter_decision_mapping_table_t::key_type k(*(npl_rx_meter_stat_meter_decision_mapping_table_t::key_type*)key);
            return rx_meter_stat_meter_decision_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_npu_to_tm_dest_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_npu_to_tm_dest_table_t::key_type k(*(npl_rx_npu_to_tm_dest_table_t::key_type*)key);
            return rx_npu_to_tm_dest_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_obm_code_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_obm_code_table_t::key_type k(*(npl_rx_obm_code_table_t::key_type*)key);
            return rx_obm_code_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_obm_punt_src_and_code_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_obm_punt_src_and_code_table_t::key_type k(*(npl_rx_obm_punt_src_and_code_table_t::key_type*)key);
            return rx_obm_punt_src_and_code_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_redirect_code_ext_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_redirect_code_ext_table_t::key_type k(*(npl_rx_redirect_code_ext_table_t::key_type*)key);
            return rx_redirect_code_ext_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_redirect_code_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_redirect_code_table_t::key_type k(*(npl_rx_redirect_code_table_t::key_type*)key);
            return rx_redirect_code_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_term_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_term_error_handling_counter_table_t::key_type k(*(npl_rx_term_error_handling_counter_table_t::key_type*)key);
            return rx_term_error_handling_counter_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rx_term_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rx_term_error_handling_destination_table_t::key_type k(*(npl_rx_term_error_handling_destination_table_t::key_type*)key);
            return rx_term_error_handling_destination_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rxpdr_dsp_lookup_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rxpdr_dsp_lookup_table_t::key_type k(*(npl_rxpdr_dsp_lookup_table_t::key_type*)key);
            return rxpdr_dsp_lookup_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "rxpdr_dsp_tc_map") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_rxpdr_dsp_tc_map_t::key_type k(*(npl_rxpdr_dsp_tc_map_t::key_type*)key);
            return rxpdr_dsp_tc_map[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "sch_oqse_cfg") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_sch_oqse_cfg_t::key_type k(*(npl_sch_oqse_cfg_t::key_type*)key);
            return sch_oqse_cfg[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "service_lp_attributes_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_lp_attributes_table_t::key_type k(*(npl_service_lp_attributes_table_t::key_type*)key);
            return service_lp_attributes_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_ac_port_table_t::key_type k(*(npl_service_mapping_em0_ac_port_table_t::key_type*)key);
            return service_mapping_em0_ac_port_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_ac_port_tag_table_t::key_type k(*(npl_service_mapping_em0_ac_port_tag_table_t::key_type*)key);
            return service_mapping_em0_ac_port_tag_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_tag_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_ac_port_tag_tag_table_t::key_type k(*(npl_service_mapping_em0_ac_port_tag_tag_table_t::key_type*)key);
            return service_mapping_em0_ac_port_tag_tag_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "service_mapping_em0_pwe_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em0_pwe_tag_table_t::key_type k(*(npl_service_mapping_em0_pwe_tag_table_t::key_type*)key);
            return service_mapping_em0_pwe_tag_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "service_mapping_em1_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_mapping_em1_ac_port_tag_table_t::key_type k(*(npl_service_mapping_em1_ac_port_tag_table_t::key_type*)key);
            return service_mapping_em1_ac_port_tag_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "service_relay_attributes_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_service_relay_attributes_table_t::key_type k(*(npl_service_relay_attributes_table_t::key_type*)key);
            return service_relay_attributes_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "set_ene_macro_and_bytes_to_remove_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_set_ene_macro_and_bytes_to_remove_table_t::key_type k(*(npl_set_ene_macro_and_bytes_to_remove_table_t::key_type*)key);
            return set_ene_macro_and_bytes_to_remove_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "sip_index_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_sip_index_table_t::key_type k(*(npl_sip_index_table_t::key_type*)key);
            return sip_index_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "slice_modes_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_slice_modes_table_t::key_type k(*(npl_slice_modes_table_t::key_type*)key);
            return slice_modes_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "slp_based_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_slp_based_forwarding_table_t::key_type k(*(npl_slp_based_forwarding_table_t::key_type*)key);
            return slp_based_forwarding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "small_encap_mpls_he_asbr_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_small_encap_mpls_he_asbr_table_t::key_type k(*(npl_small_encap_mpls_he_asbr_table_t::key_type*)key);
            return small_encap_mpls_he_asbr_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "small_encap_mpls_he_te_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_small_encap_mpls_he_te_table_t::key_type k(*(npl_small_encap_mpls_he_te_table_t::key_type*)key);
            return small_encap_mpls_he_te_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "snoop_code_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_snoop_code_hw_table_t::key_type k(*(npl_snoop_code_hw_table_t::key_type*)key);
            return snoop_code_hw_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "snoop_to_dsp_in_npu_soft_header_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_snoop_to_dsp_in_npu_soft_header_table_t::key_type k(*(npl_snoop_to_dsp_in_npu_soft_header_table_t::key_type*)key);
            return snoop_to_dsp_in_npu_soft_header_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "source_pif_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_source_pif_hw_table_t::key_type k(*(npl_source_pif_hw_table_t::key_type*)key);
            return source_pif_hw_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "stage2_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage2_lb_group_size_table_t::key_type k(*(npl_stage2_lb_group_size_table_t::key_type*)key);
            return stage2_lb_group_size_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "stage2_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage2_lb_table_t::key_type k(*(npl_stage2_lb_table_t::key_type*)key);
            return stage2_lb_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "stage3_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage3_lb_group_size_table_t::key_type k(*(npl_stage3_lb_group_size_table_t::key_type*)key);
            return stage3_lb_group_size_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "stage3_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage3_lb_table_t::key_type k(*(npl_stage3_lb_table_t::key_type*)key);
            return stage3_lb_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "stage3_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_stage3_lb_type_decoding_table_t::key_type k(*(npl_stage3_lb_type_decoding_table_t::key_type*)key);
            return stage3_lb_type_decoding_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "termination_to_forwarding_fi_hardwired_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_termination_to_forwarding_fi_hardwired_table_t::key_type k(*(npl_termination_to_forwarding_fi_hardwired_table_t::key_type*)key);
            return termination_to_forwarding_fi_hardwired_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "tm_ibm_cmd_to_destination") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tm_ibm_cmd_to_destination_t::key_type k(*(npl_tm_ibm_cmd_to_destination_t::key_type*)key);
            return tm_ibm_cmd_to_destination[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "ts_cmd_hw_static_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ts_cmd_hw_static_table_t::key_type k(*(npl_ts_cmd_hw_static_table_t::key_type*)key);
            return ts_cmd_hw_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "tunnel_qos_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tunnel_qos_static_table_t::key_type k(*(npl_tunnel_qos_static_table_t::key_type*)key);
            return tunnel_qos_static_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "tx_counters_block_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_counters_block_config_table_t::key_type k(*(npl_tx_counters_block_config_table_t::key_type*)key);
            return tx_counters_block_config_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "tx_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_error_handling_counter_table_t::key_type k(*(npl_tx_error_handling_counter_table_t::key_type*)key);
            return tx_error_handling_counter_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "tx_punt_eth_encap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_punt_eth_encap_table_t::key_type k(*(npl_tx_punt_eth_encap_table_t::key_type*)key);
            return tx_punt_eth_encap_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "tx_redirect_code_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_tx_redirect_code_table_t::key_type k(*(npl_tx_redirect_code_table_t::key_type*)key);
            return tx_redirect_code_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "txpdr_mc_list_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpdr_mc_list_size_table_t::key_type k(*(npl_txpdr_mc_list_size_table_t::key_type*)key);
            return txpdr_mc_list_size_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "txpdr_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpdr_tc_map_table_t::key_type k(*(npl_txpdr_tc_map_table_t::key_type*)key);
            return txpdr_tc_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "txpp_dlp_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_dlp_profile_table_t::key_type k(*(npl_txpp_dlp_profile_table_t::key_type*)key);
            return txpp_dlp_profile_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "txpp_encap_qos_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_encap_qos_mapping_table_t::key_type k(*(npl_txpp_encap_qos_mapping_table_t::key_type*)key);
            return txpp_encap_qos_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "txpp_first_enc_type_to_second_enc_type_offset") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_first_enc_type_to_second_enc_type_offset_t::key_type k(*(npl_txpp_first_enc_type_to_second_enc_type_offset_t::key_type*)key);
            return txpp_first_enc_type_to_second_enc_type_offset[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "txpp_fwd_header_type_is_l2_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_fwd_header_type_is_l2_table_t::key_type k(*(npl_txpp_fwd_header_type_is_l2_table_t::key_type*)key);
            return txpp_fwd_header_type_is_l2_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "txpp_fwd_qos_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_fwd_qos_mapping_table_t::key_type k(*(npl_txpp_fwd_qos_mapping_table_t::key_type*)key);
            return txpp_fwd_qos_mapping_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "txpp_ibm_enables_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_ibm_enables_table_t::key_type k(*(npl_txpp_ibm_enables_table_t::key_type*)key);
            return txpp_ibm_enables_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "txpp_mapping_qos_tag_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_txpp_mapping_qos_tag_table_t::key_type k(*(npl_txpp_mapping_qos_tag_table_t::key_type*)key);
            return txpp_mapping_qos_tag_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "uc_ibm_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_uc_ibm_tc_map_table_t::key_type k(*(npl_uc_ibm_tc_map_table_t::key_type*)key);
            return uc_ibm_tc_map_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "vlan_edit_tpid1_profile_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vlan_edit_tpid1_profile_hw_table_t::key_type k(*(npl_vlan_edit_tpid1_profile_hw_table_t::key_type*)key);
            return vlan_edit_tpid1_profile_hw_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "vlan_edit_tpid2_profile_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vlan_edit_tpid2_profile_hw_table_t::key_type k(*(npl_vlan_edit_tpid2_profile_hw_table_t::key_type*)key);
            return vlan_edit_tpid2_profile_hw_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "vni_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vni_table_t::key_type k(*(npl_vni_table_t::key_type*)key);
            return vni_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_buffers_consumption_lut_for_enq_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::key_type k(*(npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t::key_type*)key);
            return voq_cgm_slice_buffers_consumption_lut_for_enq_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_dram_cgm_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_dram_cgm_profile_table_t::key_type k(*(npl_voq_cgm_slice_dram_cgm_profile_table_t::key_type*)key);
            return voq_cgm_slice_dram_cgm_profile_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_pd_consumption_lut_for_enq_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::key_type k(*(npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t::key_type*)key);
            return voq_cgm_slice_pd_consumption_lut_for_enq_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_buff_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::key_type k(*(npl_voq_cgm_slice_profile_buff_region_thresholds_table_t::key_type*)key);
            return voq_cgm_slice_profile_buff_region_thresholds_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::key_type k(*(npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t::key_type*)key);
            return voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_pkt_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::key_type k(*(npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t::key_type*)key);
            return voq_cgm_slice_profile_pkt_region_thresholds_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_slice_cgm_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_voq_cgm_slice_slice_cgm_profile_table_t::key_type k(*(npl_voq_cgm_slice_slice_cgm_profile_table_t::key_type*)key);
            return voq_cgm_slice_slice_cgm_profile_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "vsid_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vsid_table_t::key_type k(*(npl_vsid_table_t::key_type*)key);
            return vsid_table[instance_index].erase(k);
        }
        
        if (strcmp(table_name, "vxlan_l2_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_vxlan_l2_dlp_table_t::key_type k(*(npl_vxlan_l2_dlp_table_t::key_type*)key);
            return vxlan_l2_dlp_table[instance_index].erase(k);
        }
        
        return NPL_TABLES_STATUS_EUNKNOWN;
    }
    
    npl_tables_status_e npl_tables_t::erase_ternary_table_entry(const char* table_name, size_t instance_index, size_t line) {
        if (strcmp(table_name, "bfd_udp_port_map_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return bfd_udp_port_map_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "default_egress_ipv4_sec_acl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return default_egress_ipv4_sec_acl_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "default_egress_ipv6_acl_sec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return default_egress_ipv6_acl_sec_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ecn_remark_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ecn_remark_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "egress_mac_ipv4_sec_acl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return egress_mac_ipv4_sec_acl_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ene_byte_addition_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ene_byte_addition_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "erpp_fabric_counters_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return erpp_fabric_counters_offset_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "erpp_fabric_counters_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return erpp_fabric_counters_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "fabric_and_tm_header_size_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return fabric_and_tm_header_size_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "fabric_header_ene_macro_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return fabric_header_ene_macro_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "fabric_headers_type_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return fabric_headers_type_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "fabric_init_cfg") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return fabric_init_cfg[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "fabric_npuh_size_calculation_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return fabric_npuh_size_calculation_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "fabric_out_color_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return fabric_out_color_map_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "fabric_term_error_checker_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return fabric_term_error_checker_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "fabric_transmit_error_checker_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return fabric_transmit_error_checker_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "fi_core_tcam_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return fi_core_tcam_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_eth_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_eth_db1_160_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_eth_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_eth_db2_160_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db1_160_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db1_160_f1_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db1_320_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db2_160_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db2_160_f1_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db2_320_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db3_160_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db3_160_f1_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db3_320_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db4_160_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db4_160_f1_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv4_db4_320_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db1_160_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db1_160_f1_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db1_320_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db2_160_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db2_160_f1_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db2_320_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db3_160_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db3_160_f1_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db3_320_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db4_160_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db4_160_f1_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ingress_rtf_ipv6_db4_320_f0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "inject_down_select_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return inject_down_select_ene_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ip_ingress_cmp_mcid_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ip_ingress_cmp_mcid_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ip_ver_mc_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ip_ver_mc_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ipv4_acl_map_protocol_type_to_protocol_number_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ipv4_acl_map_protocol_type_to_protocol_number_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ipv4_lpts_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ipv4_lpts_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ipv6_first_fragment_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ipv6_first_fragment_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ipv6_lpts_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ipv6_lpts_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "ipv6_sip_compression_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return ipv6_sip_compression_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l2_lpts_ctrl_fields_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l2_lpts_ctrl_fields_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l2_lpts_ipv4_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l2_lpts_ipv4_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l2_lpts_ipv6_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l2_lpts_ipv6_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l2_lpts_mac_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l2_lpts_mac_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l2_lpts_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l2_lpts_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l2_lpts_protocol_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l2_lpts_protocol_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l2_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l2_termination_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l3_dlp_p_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l3_dlp_p_counter_offset_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l3_termination_classify_ip_tunnels_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l3_termination_classify_ip_tunnels_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l3_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l3_termination_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "l3_tunnel_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return l3_tunnel_termination_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "light_fi_nw_0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return light_fi_nw_0_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "light_fi_nw_1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return light_fi_nw_1_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "light_fi_nw_2_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return light_fi_nw_2_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "light_fi_nw_3_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return light_fi_nw_3_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "lpts_og_application_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return lpts_og_application_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "mac_da_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return mac_da_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "mac_ethernet_rate_limit_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return mac_ethernet_rate_limit_type_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "mac_mc_tcam_termination_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return mac_mc_tcam_termination_attributes_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "mac_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return mac_termination_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "mac_termination_tcam_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return mac_termination_tcam_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "map_inject_ccm_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return map_inject_ccm_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "map_tx_punt_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return map_tx_punt_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "map_tx_punt_rcy_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return map_tx_punt_rcy_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "meg_id_format_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return meg_id_format_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "mldp_protection_enabled_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return mldp_protection_enabled_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "mpls_resolve_service_labels_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return mpls_resolve_service_labels_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "mpls_vpn_enabled_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return mpls_vpn_enabled_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "my_ipv4_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return my_ipv4_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "null_rtf_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return null_rtf_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "obm_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return obm_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "og_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return og_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "pad_mtu_inj_check_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return pad_mtu_inj_check_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "pfc_filter_wd_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return pfc_filter_wd_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "pfc_offset_from_vector_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return pfc_offset_from_vector_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "pfc_ssp_slice_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return pfc_ssp_slice_map_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "pfc_tc_latency_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return pfc_tc_latency_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "pfc_tc_wrap_latency_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return pfc_tc_wrap_latency_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "punt_ethertype_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return punt_ethertype_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "redirect_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return redirect_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "resolution_pfc_select_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return resolution_pfc_select_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "rtf_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return rtf_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "rx_redirect_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return rx_redirect_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "second_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return second_ene_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "select_inject_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return select_inject_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return service_mapping_tcam_ac_port_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return service_mapping_tcam_ac_port_tag_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_tag_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return service_mapping_tcam_ac_port_tag_tag_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_pwe_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return service_mapping_tcam_pwe_tag_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "sgacl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return sgacl_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "snoop_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return snoop_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "svl_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return svl_next_macro_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "te_headend_lsp_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return te_headend_lsp_counter_offset_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "tunnel_dlp_p_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return tunnel_dlp_p_counter_offset_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "txpp_initial_npe_macro_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return txpp_initial_npe_macro_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "urpf_ipsa_dest_is_lpts_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return urpf_ipsa_dest_is_lpts_static_table[instance_index].erase(line);
        }
        
        if (strcmp(table_name, "vlan_format_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            return vlan_format_table[instance_index].erase(line);
        }
        
        return NPL_TABLES_STATUS_EUNKNOWN;
    }
    
    npl_tables_status_e npl_tables_t::erase_lpm_table_entry(const char* table_name, size_t instance_index, void* key, size_t length) {
        if (strcmp(table_name, "ipv4_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_lpm_table_t::key_type k(*(npl_ipv4_lpm_table_t::key_type*)key);
            return ipv4_lpm_table[instance_index].erase(k, length);
        }
        
        if (strcmp(table_name, "ipv4_og_pcl_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv4_og_pcl_lpm_table_t::key_type k(*(npl_ipv4_og_pcl_lpm_table_t::key_type*)key);
            return ipv4_og_pcl_lpm_table[instance_index].erase(k, length);
        }
        
        if (strcmp(table_name, "ipv6_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_lpm_table_t::key_type k(*(npl_ipv6_lpm_table_t::key_type*)key);
            return ipv6_lpm_table[instance_index].erase(k, length);
        }
        
        if (strcmp(table_name, "ipv6_og_pcl_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ipv6_og_pcl_lpm_table_t::key_type k(*(npl_ipv6_og_pcl_lpm_table_t::key_type*)key);
            return ipv6_og_pcl_lpm_table[instance_index].erase(k, length);
        }
        
        return NPL_TABLES_STATUS_EUNKNOWN;
    }
    
    npl_tables_status_e npl_tables_t::set_table_config(const char* table_name, size_t instance_index, void* location) {
        if (strcmp(table_name, "acl_map_fi_header_type_to_protocol_number_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return acl_map_fi_header_type_to_protocol_number_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "additional_labels_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return additional_labels_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "all_reachable_vector") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return all_reachable_vector[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_desired_tx_interval_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_desired_tx_interval_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_detection_multiple_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_detection_multiple_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_event_queue_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_da_high_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_inject_inner_da_high_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_da_low_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_inject_inner_da_low_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_inject_inner_ethernet_header_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_inject_inner_ethernet_header_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_inject_ttl_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_inject_ttl_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_A_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_ipv6_sip_A_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_B_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_ipv6_sip_B_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_C_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_ipv6_sip_C_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_ipv6_sip_D_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_ipv6_sip_D_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_punt_encap_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_punt_encap_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_required_tx_interval_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_required_tx_interval_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_rx_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_rx_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_set_inject_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_set_inject_type_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_udp_port_map_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return bfd_udp_port_map_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bfd_udp_port_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bfd_udp_port_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bitmap_oqg_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bitmap_oqg_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "bvn_tc_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return bvn_tc_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "calc_checksum_enable_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return calc_checksum_enable_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ccm_flags_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ccm_flags_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "cif2npa_c_lri_macro") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return cif2npa_c_lri_macro[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "cif2npa_c_mps_macro") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return cif2npa_c_mps_macro[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "counters_block_config_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return counters_block_config_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "counters_voq_block_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return counters_voq_block_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "cud_is_multicast_bitmap") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return cud_is_multicast_bitmap[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "cud_narrow_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return cud_narrow_hw_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "cud_wide_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return cud_wide_hw_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "default_egress_ipv4_sec_acl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return default_egress_ipv4_sec_acl_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "default_egress_ipv6_acl_sec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return default_egress_ipv6_acl_sec_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "dest_slice_voq_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return dest_slice_voq_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "destination_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return destination_decoding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "device_mode_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return device_mode_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "dsp_l2_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return dsp_l2_attributes_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "dsp_l3_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return dsp_l3_attributes_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "dummy_dip_index_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return dummy_dip_index_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ecn_remark_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ecn_remark_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "egress_mac_ipv4_sec_acl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return egress_mac_ipv4_sec_acl_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "egress_nh_and_svi_direct0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return egress_nh_and_svi_direct0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "egress_nh_and_svi_direct1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return egress_nh_and_svi_direct1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "em_mp_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return em_mp_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "em_pfc_cong_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return em_pfc_cong_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ene_byte_addition_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ene_byte_addition_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ene_macro_code_tpid_profile_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ene_macro_code_tpid_profile_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "erpp_fabric_counters_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return erpp_fabric_counters_offset_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "erpp_fabric_counters_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return erpp_fabric_counters_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "eth_meter_profile_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return eth_meter_profile_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "eth_oam_set_da_mc2_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return eth_oam_set_da_mc2_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "eth_oam_set_da_mc_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return eth_oam_set_da_mc_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "eth_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return eth_rtf_conf_set_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "eve_byte_addition_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return eve_byte_addition_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "eve_to_ethernet_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return eve_to_ethernet_ene_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return event_queue_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "external_aux_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return external_aux_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_and_tm_header_size_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return fabric_and_tm_header_size_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_header_ene_macro_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return fabric_header_ene_macro_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_header_types_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fabric_header_types_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_headers_type_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return fabric_headers_type_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_init_cfg") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return fabric_init_cfg[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_npuh_size_calculation_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return fabric_npuh_size_calculation_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_out_color_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return fabric_out_color_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_rx_fwd_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fabric_rx_fwd_error_handling_counter_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_rx_fwd_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fabric_rx_fwd_error_handling_destination_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_rx_term_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fabric_rx_term_error_handling_counter_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_rx_term_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fabric_rx_term_error_handling_destination_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_scaled_mc_map_to_netork_slice_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fabric_scaled_mc_map_to_netork_slice_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fabric_smcid_threshold_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_term_error_checker_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return fabric_term_error_checker_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_tm_headers_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fabric_tm_headers_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fabric_transmit_error_checker_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return fabric_transmit_error_checker_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fb_link_2_link_bundle_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fb_link_2_link_bundle_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fe_broadcast_bmp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fe_broadcast_bmp_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fe_rlb_uc_tx_fb_link_to_oq_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fe_rlb_uc_tx_fb_link_to_oq_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fe_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fe_smcid_threshold_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fe_smcid_to_mcid_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fe_smcid_to_mcid_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fe_uc_link_bundle_desc_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fe_uc_link_bundle_desc_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fi_core_tcam_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return fi_core_tcam_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fi_macro_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fi_macro_config_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "filb_voq_mapping") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return filb_voq_mapping[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "first_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return first_ene_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "frm_db_fabric_routing_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return frm_db_fabric_routing_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fwd_destination_to_tm_result_data") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fwd_destination_to_tm_result_data[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "fwd_type_to_ive_enable_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return fwd_type_to_ive_enable_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "get_ecm_meter_ptr_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return get_ecm_meter_ptr_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "get_ingress_ptp_info_and_is_slp_dm_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return get_ingress_ptp_info_and_is_slp_dm_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "get_l2_rtf_conf_set_and_init_stages") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return get_l2_rtf_conf_set_and_init_stages[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "get_non_comp_mc_value_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return get_non_comp_mc_value_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "gre_proto_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return gre_proto_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "hmc_cgm_cgm_lut_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return hmc_cgm_cgm_lut_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "hmc_cgm_profile_global_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return hmc_cgm_profile_global_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ibm_cmd_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ibm_cmd_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ibm_mc_cmd_to_encap_data_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ibm_mc_cmd_to_encap_data_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ibm_uc_cmd_to_encap_data_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ibm_uc_cmd_to_encap_data_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ifgb_tc_lut_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ifgb_tc_lut_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_ip_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ingress_ip_qos_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_eth_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_eth_db1_160_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_eth_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_eth_db2_160_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db1_160_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db1_160_f1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db1_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db1_320_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db2_160_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db2_160_f1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db2_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db2_320_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db3_160_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db3_160_f1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db3_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db3_320_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db4_160_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db4_160_f1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv4_db4_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv4_db4_320_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db1_160_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db1_160_f1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db1_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db1_320_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db2_160_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db2_160_f1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db2_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db2_320_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db3_160_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db3_160_f1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db3_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db3_320_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_160_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db4_160_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_160_f1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db4_160_f1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ingress_rtf_ipv6_db4_320_f0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ingress_rtf_ipv6_db4_320_f0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "inject_down_select_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return inject_down_select_ene_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "inject_down_tx_redirect_counter_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return inject_down_tx_redirect_counter_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "inject_mact_ldb_to_output_lr") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return inject_mact_ldb_to_output_lr[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "inject_up_pif_ifg_init_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return inject_up_pif_ifg_init_data_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "inject_up_ssp_init_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return inject_up_ssp_init_data_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "inner_tpid_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return inner_tpid_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ip_fwd_header_mapping_to_ethtype_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ip_fwd_header_mapping_to_ethtype_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ip_ingress_cmp_mcid_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ip_ingress_cmp_mcid_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ip_mc_local_inject_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ip_mc_local_inject_type_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ip_mc_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ip_mc_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ip_meter_profile_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ip_meter_profile_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ip_prefix_destination_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ip_prefix_destination_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ip_relay_to_vni_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ip_relay_to_vni_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ip_rx_global_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ip_rx_global_counter_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ip_ver_mc_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ip_ver_mc_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_acl_map_protocol_type_to_protocol_number_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ipv4_acl_map_protocol_type_to_protocol_number_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_acl_sport_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv4_acl_sport_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_dip_index_tt0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv4_ip_tunnel_termination_dip_index_tt0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_sip_dip_index_tt0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv4_ip_tunnel_termination_sip_dip_index_tt0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_ip_tunnel_termination_sip_dip_index_tt1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv4_ip_tunnel_termination_sip_dip_index_tt1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpm_table_config_t l(*(npl_lpm_table_config_t*)location);
            return ipv4_lpm_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_lpts_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ipv4_lpts_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_og_pcl_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv4_og_pcl_em_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_og_pcl_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpm_table_config_t l(*(npl_lpm_table_config_t*)location);
            return ipv4_og_pcl_lpm_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv4_rtf_conf_set_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_vrf_dip_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv4_vrf_dip_em_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv4_vrf_s_g_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv4_vrf_s_g_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_acl_sport_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv6_acl_sport_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_first_fragment_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ipv6_first_fragment_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpm_table_config_t l(*(npl_lpm_table_config_t*)location);
            return ipv6_lpm_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_lpts_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ipv6_lpts_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_mc_select_qos_id") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv6_mc_select_qos_id[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_og_pcl_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv6_og_pcl_em_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_og_pcl_lpm_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_lpm_table_config_t l(*(npl_lpm_table_config_t*)location);
            return ipv6_og_pcl_lpm_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_rtf_conf_set_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv6_rtf_conf_set_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_sip_compression_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return ipv6_sip_compression_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_vrf_dip_em_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv6_vrf_dip_em_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ipv6_vrf_s_g_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ipv6_vrf_s_g_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "is_pacific_b1_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return is_pacific_b1_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return l2_dlp_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_lp_profile_filter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return l2_lp_profile_filter_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_lpts_ctrl_fields_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l2_lpts_ctrl_fields_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_lpts_ip_fragment_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return l2_lpts_ip_fragment_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_lpts_ipv4_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l2_lpts_ipv4_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_lpts_ipv6_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l2_lpts_ipv6_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_lpts_mac_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l2_lpts_mac_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_lpts_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l2_lpts_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_lpts_protocol_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l2_lpts_protocol_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_lpts_skip_p2p_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return l2_lpts_skip_p2p_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l2_termination_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l2_tunnel_term_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return l2_tunnel_term_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l3_dlp_p_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l3_dlp_p_counter_offset_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l3_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return l3_dlp_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l3_termination_classify_ip_tunnels_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l3_termination_classify_ip_tunnels_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l3_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l3_termination_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l3_tunnel_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return l3_tunnel_termination_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "l3_vxlan_overlay_sa_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return l3_vxlan_overlay_sa_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "large_encap_global_lsp_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return large_encap_global_lsp_prefix_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "large_encap_ip_tunnel_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return large_encap_ip_tunnel_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "large_encap_mpls_he_no_ldp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return large_encap_mpls_he_no_ldp_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "large_encap_mpls_ldp_over_te_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return large_encap_mpls_ldp_over_te_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "large_encap_te_he_tunnel_id_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return large_encap_te_he_tunnel_id_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "latest_learn_records_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return latest_learn_records_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "learn_manager_cfg_max_learn_type_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return learn_manager_cfg_max_learn_type_reg[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "learn_record_fifo_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return learn_record_fifo_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "light_fi_fabric_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return light_fi_fabric_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "light_fi_npu_base_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return light_fi_npu_base_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "light_fi_npu_encap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return light_fi_npu_encap_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "light_fi_nw_0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return light_fi_nw_0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "light_fi_nw_1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return light_fi_nw_1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "light_fi_nw_2_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return light_fi_nw_2_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "light_fi_nw_3_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return light_fi_nw_3_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "light_fi_stages_cfg_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return light_fi_stages_cfg_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "light_fi_tm_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return light_fi_tm_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "link_relay_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return link_relay_attributes_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "link_up_vector") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return link_up_vector[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "lp_over_lag_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return lp_over_lag_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "lpm_destination_prefix_map_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return lpm_destination_prefix_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "lpts_2nd_lookup_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return lpts_2nd_lookup_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "lpts_meter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return lpts_meter_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "lpts_og_application_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return lpts_og_application_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "lr_filter_write_ptr_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return lr_filter_write_ptr_reg[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "lr_write_ptr_reg") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return lr_write_ptr_reg[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_af_npp_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mac_af_npp_attributes_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_da_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return mac_da_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_ethernet_rate_limit_type_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return mac_ethernet_rate_limit_type_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mac_forwarding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_mc_em_termination_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mac_mc_em_termination_attributes_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_mc_tcam_termination_attributes_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return mac_mc_tcam_termination_attributes_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mac_qos_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_relay_g_ipv4_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mac_relay_g_ipv4_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_relay_g_ipv6_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mac_relay_g_ipv6_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_relay_to_vni_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mac_relay_to_vni_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_termination_em_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mac_termination_em_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_termination_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return mac_termination_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_termination_no_da_em_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mac_termination_no_da_em_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mac_termination_tcam_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return mac_termination_tcam_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "map_ene_subcode_to8bit_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return map_ene_subcode_to8bit_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "map_inject_ccm_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return map_inject_ccm_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "map_more_labels_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return map_more_labels_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "map_recyle_tx_to_rx_data_on_pd_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return map_recyle_tx_to_rx_data_on_pd_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "map_tm_dp_ecn_to_wa_ecn_dp_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return map_tm_dp_ecn_to_wa_ecn_dp_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "map_tx_punt_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return map_tx_punt_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "map_tx_punt_rcy_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return map_tx_punt_rcy_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mc_bitmap_base_voq_lookup_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mc_bitmap_base_voq_lookup_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mc_bitmap_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mc_bitmap_tc_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mc_copy_id_map") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mc_copy_id_map[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mc_cud_is_wide_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mc_cud_is_wide_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mc_em_db") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mc_em_db[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mc_emdb_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mc_emdb_tc_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mc_fe_links_bmp") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mc_fe_links_bmp[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mc_ibm_cud_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mc_ibm_cud_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mc_slice_bitmap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mc_slice_bitmap_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "meg_id_format_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return meg_id_format_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mep_address_prefix_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mep_address_prefix_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mii_loopback_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mii_loopback_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mirror_code_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mirror_code_hw_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mirror_egress_attributes_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mirror_egress_attributes_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mirror_to_dsp_in_npu_soft_header_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mirror_to_dsp_in_npu_soft_header_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mldp_protection_enabled_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return mldp_protection_enabled_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mldp_protection_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mldp_protection_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mp_aux_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mp_aux_data_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mp_data_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mp_data_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_encap_control_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mpls_encap_control_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mpls_forwarding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_header_offset_in_bytes_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mpls_header_offset_in_bytes_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_l3_lsp_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mpls_l3_lsp_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_labels_1_to_4_jump_offset_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mpls_labels_1_to_4_jump_offset_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_lsp_labels_config_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mpls_lsp_labels_config_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_qos_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mpls_qos_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_resolve_service_labels_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return mpls_resolve_service_labels_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_termination_em0_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mpls_termination_em0_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_termination_em1_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return mpls_termination_em1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "mpls_vpn_enabled_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return mpls_vpn_enabled_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ms_voq_fabric_context_offset_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ms_voq_fabric_context_offset_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "my_ipv4_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return my_ipv4_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_ce_ptr_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_ce_ptr_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_fec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_fec_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_fec_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_fec_type_decoding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_frr_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_frr_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_frr_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_frr_type_decoding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_l2_lp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_l2_lp_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_l2_lp_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_l2_lp_type_decoding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_lb_group_size_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_lb_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_lb_type_decoding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_lp_is_pbts_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_lp_is_pbts_prefix_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_lp_pbts_map_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_lp_pbts_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "native_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return native_protection_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "next_header_1_is_l4_over_ipv4_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return next_header_1_is_l4_over_ipv4_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "nh_macro_code_to_id_l6_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return nh_macro_code_to_id_l6_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "nhlfe_type_mapping_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return nhlfe_type_mapping_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "null_rtf_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return null_rtf_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "nw_smcid_threshold_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return nw_smcid_threshold_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "oamp_drop_destination_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return oamp_drop_destination_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "oamp_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return oamp_event_queue_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "oamp_redirect_get_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return oamp_redirect_get_counter_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_1_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return oamp_redirect_punt_eth_hdr_1_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_2_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return oamp_redirect_punt_eth_hdr_2_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_3_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return oamp_redirect_punt_eth_hdr_3_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "oamp_redirect_punt_eth_hdr_4_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return oamp_redirect_punt_eth_hdr_4_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "oamp_redirect_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return oamp_redirect_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "obm_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return obm_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "og_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return og_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "outer_tpid_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return outer_tpid_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "overlay_ipv4_sip_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return overlay_ipv4_sip_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pad_mtu_inj_check_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return pad_mtu_inj_check_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "path_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return path_lb_type_decoding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "path_lp_is_pbts_prefix_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return path_lp_is_pbts_prefix_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "path_lp_pbts_map_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return path_lp_pbts_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "path_lp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return path_lp_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "path_lp_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return path_lp_type_decoding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "path_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return path_protection_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pdoq_oq_ifc_mapping") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pdoq_oq_ifc_mapping[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pdvoq_bank_pair_offset_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pdvoq_bank_pair_offset_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pdvoq_slice_voq_properties_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pdvoq_slice_voq_properties_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "per_asbr_and_dpe_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return per_asbr_and_dpe_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "per_pe_and_prefix_vpn_key_large_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return per_pe_and_prefix_vpn_key_large_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "per_pe_and_vrf_vpn_key_large_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return per_pe_and_vrf_vpn_key_large_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "per_port_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return per_port_destination_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "per_vrf_mpls_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return per_vrf_mpls_forwarding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pfc_destination_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pfc_destination_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pfc_event_queue_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pfc_event_queue_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pfc_filter_wd_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return pfc_filter_wd_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pfc_offset_from_vector_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return pfc_offset_from_vector_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pfc_ssp_slice_map_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return pfc_ssp_slice_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pfc_tc_latency_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return pfc_tc_latency_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pfc_tc_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pfc_tc_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pfc_tc_wrap_latency_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return pfc_tc_wrap_latency_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pfc_vector_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pfc_vector_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pin_start_offset_macros") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pin_start_offset_macros[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pma_loopback_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pma_loopback_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "port_dspa_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return port_dspa_group_size_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "port_dspa_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return port_dspa_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "port_dspa_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return port_dspa_type_decoding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "port_npp_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return port_npp_protection_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "port_npp_protection_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return port_npp_protection_type_decoding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "port_protection_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return port_protection_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "punt_ethertype_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return punt_ethertype_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "punt_rcy_inject_header_ene_encap_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return punt_rcy_inject_header_ene_encap_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "punt_select_nw_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return punt_select_nw_ene_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_encap_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return punt_tunnel_transport_encap_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_extended_encap_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return punt_tunnel_transport_extended_encap_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "punt_tunnel_transport_extended_encap_table2") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return punt_tunnel_transport_extended_encap_table2[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pwe_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pwe_label_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pwe_to_l3_dest_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pwe_to_l3_dest_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pwe_vpls_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pwe_vpls_label_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "pwe_vpls_tunnel_label_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return pwe_vpls_tunnel_label_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "reassembly_source_port_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return reassembly_source_port_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "recycle_override_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return recycle_override_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "recycled_inject_up_info_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return recycled_inject_up_info_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "redirect_destination_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return redirect_destination_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "redirect_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return redirect_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "resolution_pfc_select_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return resolution_pfc_select_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "resolution_set_next_macro_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return resolution_set_next_macro_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rewrite_sa_prefix_index_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rewrite_sa_prefix_index_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rmep_last_time_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rmep_last_time_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rmep_state_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rmep_state_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rpf_fec_access_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rpf_fec_access_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rpf_fec_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rpf_fec_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_og_pcl_compress_bits_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rtf_conf_set_to_og_pcl_compress_bits_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_og_pcl_ids_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rtf_conf_set_to_og_pcl_ids_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rtf_conf_set_to_post_fwd_stage_mapping_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rtf_conf_set_to_post_fwd_stage_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rtf_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return rtf_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_counters_block_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_counters_block_config_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_fwd_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_fwd_error_handling_counter_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_fwd_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_fwd_error_handling_destination_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_ip_p_counter_offset_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_ip_p_counter_offset_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_map_npp_to_ssp_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_map_npp_to_ssp_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_attribute_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_meter_block_meter_attribute_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_meter_block_meter_profile_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_meter_block_meter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_meter_block_meter_shaper_configuration_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_meter_distributed_meter_profile_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_meter_distributed_meter_profile_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_meter_exact_meter_decision_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_meter_exact_meter_decision_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_meter_meter_profile_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_meter_meter_profile_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_meter_meter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_meter_meter_shaper_configuration_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_meter_meters_attribute_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_meter_meters_attribute_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_meter_rate_limiter_shaper_configuration_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_meter_rate_limiter_shaper_configuration_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_meter_stat_meter_decision_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_meter_stat_meter_decision_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_npu_to_tm_dest_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_npu_to_tm_dest_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_obm_code_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_obm_code_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_obm_punt_src_and_code_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_obm_punt_src_and_code_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_redirect_code_ext_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_redirect_code_ext_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_redirect_code_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_redirect_code_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_redirect_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return rx_redirect_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_term_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_term_error_handling_counter_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rx_term_error_handling_destination_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rx_term_error_handling_destination_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rxpdr_dsp_lookup_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rxpdr_dsp_lookup_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "rxpdr_dsp_tc_map") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return rxpdr_dsp_tc_map[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "sch_oqse_cfg") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return sch_oqse_cfg[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "second_ene_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return second_ene_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "select_inject_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return select_inject_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_lp_attributes_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return service_lp_attributes_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return service_mapping_em0_ac_port_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return service_mapping_em0_ac_port_tag_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_mapping_em0_ac_port_tag_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return service_mapping_em0_ac_port_tag_tag_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_mapping_em0_pwe_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return service_mapping_em0_pwe_tag_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_mapping_em1_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return service_mapping_em1_ac_port_tag_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return service_mapping_tcam_ac_port_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return service_mapping_tcam_ac_port_tag_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_ac_port_tag_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return service_mapping_tcam_ac_port_tag_tag_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_mapping_tcam_pwe_tag_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return service_mapping_tcam_pwe_tag_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "service_relay_attributes_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return service_relay_attributes_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "set_ene_macro_and_bytes_to_remove_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return set_ene_macro_and_bytes_to_remove_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "sgacl_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return sgacl_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "sip_index_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return sip_index_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "slice_modes_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return slice_modes_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "slp_based_forwarding_table") == 0) {
            if (instance_index >= 1) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return slp_based_forwarding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "small_encap_mpls_he_asbr_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return small_encap_mpls_he_asbr_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "small_encap_mpls_he_te_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return small_encap_mpls_he_te_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "snoop_code_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return snoop_code_hw_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "snoop_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return snoop_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "snoop_to_dsp_in_npu_soft_header_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return snoop_to_dsp_in_npu_soft_header_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "source_pif_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return source_pif_hw_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "stage2_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return stage2_lb_group_size_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "stage2_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return stage2_lb_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "stage3_lb_group_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return stage3_lb_group_size_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "stage3_lb_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return stage3_lb_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "stage3_lb_type_decoding_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return stage3_lb_type_decoding_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "svl_next_macro_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return svl_next_macro_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "te_headend_lsp_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return te_headend_lsp_counter_offset_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "termination_to_forwarding_fi_hardwired_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return termination_to_forwarding_fi_hardwired_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "tm_ibm_cmd_to_destination") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return tm_ibm_cmd_to_destination[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "ts_cmd_hw_static_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return ts_cmd_hw_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "tunnel_dlp_p_counter_offset_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return tunnel_dlp_p_counter_offset_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "tunnel_qos_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return tunnel_qos_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "tx_counters_block_config_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return tx_counters_block_config_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "tx_error_handling_counter_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return tx_error_handling_counter_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "tx_punt_eth_encap_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return tx_punt_eth_encap_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "tx_redirect_code_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return tx_redirect_code_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "txpdr_mc_list_size_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return txpdr_mc_list_size_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "txpdr_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return txpdr_tc_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "txpp_dlp_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return txpp_dlp_profile_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "txpp_encap_qos_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return txpp_encap_qos_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "txpp_first_enc_type_to_second_enc_type_offset") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return txpp_first_enc_type_to_second_enc_type_offset[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "txpp_fwd_header_type_is_l2_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return txpp_fwd_header_type_is_l2_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "txpp_fwd_qos_mapping_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return txpp_fwd_qos_mapping_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "txpp_ibm_enables_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return txpp_ibm_enables_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "txpp_initial_npe_macro_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return txpp_initial_npe_macro_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "txpp_mapping_qos_tag_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return txpp_mapping_qos_tag_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "uc_ibm_tc_map_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return uc_ibm_tc_map_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "urpf_ipsa_dest_is_lpts_static_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return urpf_ipsa_dest_is_lpts_static_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "vlan_edit_tpid1_profile_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return vlan_edit_tpid1_profile_hw_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "vlan_edit_tpid2_profile_hw_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return vlan_edit_tpid2_profile_hw_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "vlan_format_table") == 0) {
            if (instance_index >= 7) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_ternary_table_config_t l(*(npl_ternary_table_config_t*)location);
            return vlan_format_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "vni_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return vni_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_buffers_consumption_lut_for_enq_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return voq_cgm_slice_buffers_consumption_lut_for_enq_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_dram_cgm_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return voq_cgm_slice_dram_cgm_profile_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_pd_consumption_lut_for_enq_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return voq_cgm_slice_pd_consumption_lut_for_enq_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_buff_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return voq_cgm_slice_profile_buff_region_thresholds_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_profile_pkt_region_thresholds_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return voq_cgm_slice_profile_pkt_region_thresholds_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "voq_cgm_slice_slice_cgm_profile_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return voq_cgm_slice_slice_cgm_profile_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "vsid_table") == 0) {
            if (instance_index >= 6) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return vsid_table[instance_index].set_table_config(l);
        }
        
        if (strcmp(table_name, "vxlan_l2_dlp_table") == 0) {
            if (instance_index >= 3) {
                return NPL_TABLES_STATUS_EINVAL;
            }
            npl_table_config_t l(*(npl_table_config_t*)location);
            return vxlan_l2_dlp_table[instance_index].set_table_config(l);
        }
        
        return NPL_TABLES_STATUS_EUNKNOWN;
    }
    
}

