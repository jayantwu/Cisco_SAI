
// This file has been automatically generated using nplc.py. Do not edit it manually.
// Version: 1.76.2_0.0.0.0 generated on devsrv15.leaba.local at 2021-05-12 16:09:15


#include <algorithm>
#include "nplapi/npl_table_types.h"
#include "common/bit_vector.h"
using silicon_one::bit_vector;
using silicon_one::bit_vector64_t;
using silicon_one::bit_vector128_t;
using silicon_one::bit_vector192_t;
using silicon_one::bit_vector384_t;

bit_vector64_t npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 19);
    bv.set_bits(18, 18, is_valid);
    bv.set_bits(17, 16, acl_l4_protocol);
    bv.set_bits(15, 0, protocol_type.pack());
    return bv;
}

void npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t::unpack(bit_vector64_t bv)
{
    is_valid = bv.bits(18, 18).get_value();
    acl_l4_protocol = bv.bits(17, 16).get_value();
    protocol_type.unpack(bv.bits(15, 0));
}

field_structure npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(is_valid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_valid", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(acl_l4_protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_l4_protocol", fs_subfield);
    
    fs_result.subfields.emplace_back("protocol_type", protocol_type.to_field_structure());
    return fs_result;
}
std::string to_string(npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_acl_map_fi_header_type_to_protocol_number_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, fi_hdr_type);
    
    return bv;
}

void npl_acl_map_fi_header_type_to_protocol_number_table_key_t::unpack(bit_vector64_t bv)
{
    fi_hdr_type = (npl_protocol_type_e)bv.bits(4, 0).get_value();
    
}

field_structure npl_acl_map_fi_header_type_to_protocol_number_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_acl_map_fi_header_type_to_protocol_number_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(fi_hdr_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fi_hdr_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_acl_map_fi_header_type_to_protocol_number_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_acl_map_fi_header_type_to_protocol_number_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_acl_map_fi_header_type_to_protocol_number_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(26, 19, action);
    if (action == NPL_ACL_MAP_FI_HEADER_TYPE_TO_PROTOCOL_NUMBER_TABLE_ACTION_UPDATE) {
        bv.set_bits(18, 0, payloads.update.pack());
    }
    
    return bv;
}


void npl_acl_map_fi_header_type_to_protocol_number_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_acl_map_fi_header_type_to_protocol_number_table_action_e)bv.bits(26, 19).get_value();
    if (action == NPL_ACL_MAP_FI_HEADER_TYPE_TO_PROTOCOL_NUMBER_TABLE_ACTION_UPDATE) {
        payloads.update.unpack(bv.bits(18, 0));
    }
    
}


field_structure npl_acl_map_fi_header_type_to_protocol_number_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_acl_map_fi_header_type_to_protocol_number_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_acl_map_fi_header_type_to_protocol_number_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ACL_MAP_FI_HEADER_TYPE_TO_PROTOCOL_NUMBER_TABLE_ACTION_UPDATE) {
        fs_result.subfields.emplace_back("update", payloads.update.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_acl_map_fi_header_type_to_protocol_number_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_acl_map_fi_header_type_to_protocol_number_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_additional_labels_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(11, 0, labels_index);
    
    return bv;
}

void npl_additional_labels_table_key_t::unpack(bit_vector64_t bv)
{
    labels_index = bv.bits(11, 0).get_value();
    
}

field_structure npl_additional_labels_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_additional_labels_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(labels_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("labels_index", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_additional_labels_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_additional_labels_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_additional_labels_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(127, 120, action);
    if (action == NPL_ADDITIONAL_LABELS_TABLE_ACTION_WRITE) {
        bv.set_bits(119, 0, payloads.additional_labels.pack());
    }
    
    return bv;
}


void npl_additional_labels_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_additional_labels_table_action_e)bv.bits(127, 120).get_value();
    if (action == NPL_ADDITIONAL_LABELS_TABLE_ACTION_WRITE) {
        payloads.additional_labels.unpack(bv.bits(119, 0));
    }
    
}


field_structure npl_additional_labels_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_additional_labels_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_additional_labels_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ADDITIONAL_LABELS_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.additional_labels", payloads.additional_labels.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_additional_labels_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_additional_labels_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_all_reachable_vector_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_all_reachable_vector_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_all_reachable_vector_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_all_reachable_vector_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_all_reachable_vector_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_all_reachable_vector_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_all_reachable_vector_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(115, 108, action);
    if (action == NPL_ALL_REACHABLE_VECTOR_ACTION_WRITE) {
        bv.set_bits(107, 0, payloads.all_reachable_vector_result.pack());
    }
    
    return bv;
}


void npl_all_reachable_vector_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_all_reachable_vector_action_e)bv.bits(115, 108).get_value();
    if (action == NPL_ALL_REACHABLE_VECTOR_ACTION_WRITE) {
        payloads.all_reachable_vector_result.unpack(bv.bits(107, 0));
    }
    
}


field_structure npl_all_reachable_vector_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_all_reachable_vector_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_all_reachable_vector_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ALL_REACHABLE_VECTOR_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.all_reachable_vector_result", payloads.all_reachable_vector_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_all_reachable_vector_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_all_reachable_vector_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_desired_tx_interval_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, interval_selector);
    
    return bv;
}

void npl_bfd_desired_tx_interval_table_key_t::unpack(bit_vector64_t bv)
{
    interval_selector = bv.bits(2, 0).get_value();
    
}

field_structure npl_bfd_desired_tx_interval_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_desired_tx_interval_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(interval_selector);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("interval_selector", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_desired_tx_interval_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_desired_tx_interval_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_desired_tx_interval_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_BFD_DESIRED_TX_INTERVAL_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.desired_min_tx_interval);
    }
    
    return bv;
}


void npl_bfd_desired_tx_interval_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_desired_tx_interval_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_BFD_DESIRED_TX_INTERVAL_TABLE_ACTION_WRITE) {
        payloads.desired_min_tx_interval = bv.bits(31, 0).get_value();
    }
    
}


field_structure npl_bfd_desired_tx_interval_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_desired_tx_interval_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_desired_tx_interval_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_DESIRED_TX_INTERVAL_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.desired_min_tx_interval);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.desired_min_tx_interval", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_desired_tx_interval_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_desired_tx_interval_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_detection_multiple_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, interval_selector);
    
    return bv;
}

void npl_bfd_detection_multiple_table_key_t::unpack(bit_vector64_t bv)
{
    interval_selector = bv.bits(2, 0).get_value();
    
}

field_structure npl_bfd_detection_multiple_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_detection_multiple_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(interval_selector);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("interval_selector", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_detection_multiple_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_detection_multiple_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_detection_multiple_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_BFD_DETECTION_MULTIPLE_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.detection_mult);
    }
    
    return bv;
}


void npl_bfd_detection_multiple_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_detection_multiple_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_BFD_DETECTION_MULTIPLE_TABLE_ACTION_WRITE) {
        payloads.detection_mult = bv.bits(7, 0).get_value();
    }
    
}


field_structure npl_bfd_detection_multiple_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_detection_multiple_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_detection_multiple_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_DETECTION_MULTIPLE_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.detection_mult);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.detection_mult", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_detection_multiple_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_detection_multiple_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_bfd_event_queue_table_key_t::pack(void) const
{
    bit_vector128_t bv(0, 72);
    
    bv.set_bits(0, 0, 0x0);
    bv.set_bits(2, 1, 0x1);
    bv.set_bits(10, 3, flags_and_state);
    bv.set_bits(15, 11, diag_code);
    bv.set_bits(23, 16, oamp_event);
    bv.set_bits(36, 24, mep_id);
    bv.set_bits(49, 37, rmep_id);
    bv.set_bits(71, 50, 0x0);
    
    return bv;
}

void npl_bfd_event_queue_table_key_t::unpack(bit_vector128_t bv)
{
    flags_and_state = bv.bits(10, 3).get_value();
    diag_code = bv.bits(15, 11).get_value();
    oamp_event = (npl_oamp_event_type_e)bv.bits(23, 16).get_value();
    mep_id = bv.bits(36, 24).get_value();
    rmep_id = bv.bits(49, 37).get_value();
    
}

field_structure npl_bfd_event_queue_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_event_queue_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x1", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(flags_and_state);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("flags_and_state", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(diag_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("diag_code", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(oamp_event);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("oamp_event", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(mep_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mep_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(rmep_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rmep_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_event_queue_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_event_queue_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_event_queue_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(7, 0, action);
    
    return bv;
}


void npl_bfd_event_queue_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_event_queue_table_action_e)bv.bits(7, 0).get_value();
    
}


field_structure npl_bfd_event_queue_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_event_queue_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_event_queue_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_event_queue_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_event_queue_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    bv.set_bits(15, 0, da);
    return bv;
}

void npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t::unpack(bit_vector64_t bv)
{
    da = bv.bits(15, 0).get_value();
}

field_structure npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(da);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("da", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_inject_inner_da_high_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x1);
    
    return bv;
}

void npl_bfd_inject_inner_da_high_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_bfd_inject_inner_da_high_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_inner_da_high_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x1", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_inner_da_high_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_inject_inner_da_high_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_inject_inner_da_high_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_BFD_INJECT_INNER_DA_HIGH_TABLE_ACTION_SET_INJECT_INNER_DA) {
        bv.set_bits(15, 0, payloads.set_inject_inner_da.pack());
    }
    
    return bv;
}


void npl_bfd_inject_inner_da_high_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_inject_inner_da_high_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_BFD_INJECT_INNER_DA_HIGH_TABLE_ACTION_SET_INJECT_INNER_DA) {
        payloads.set_inject_inner_da.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_bfd_inject_inner_da_high_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_inner_da_high_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_inject_inner_da_high_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_INJECT_INNER_DA_HIGH_TABLE_ACTION_SET_INJECT_INNER_DA) {
        fs_result.subfields.emplace_back("set_inject_inner_da", payloads.set_inject_inner_da.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_inner_da_high_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_inject_inner_da_high_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    bv.set_bits(31, 0, da);
    return bv;
}

void npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t::unpack(bit_vector64_t bv)
{
    da = bv.bits(31, 0).get_value();
}

field_structure npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(da);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("da", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_inject_inner_da_low_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x1);
    
    return bv;
}

void npl_bfd_inject_inner_da_low_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_bfd_inject_inner_da_low_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_inner_da_low_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x1", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_inner_da_low_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_inject_inner_da_low_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_inject_inner_da_low_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_BFD_INJECT_INNER_DA_LOW_TABLE_ACTION_SET_INJECT_INNER_DA) {
        bv.set_bits(31, 0, payloads.set_inject_inner_da.pack());
    }
    
    return bv;
}


void npl_bfd_inject_inner_da_low_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_inject_inner_da_low_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_BFD_INJECT_INNER_DA_LOW_TABLE_ACTION_SET_INJECT_INNER_DA) {
        payloads.set_inject_inner_da.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_bfd_inject_inner_da_low_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_inner_da_low_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_inject_inner_da_low_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_INJECT_INNER_DA_LOW_TABLE_ACTION_SET_INJECT_INNER_DA) {
        fs_result.subfields.emplace_back("set_inject_inner_da", payloads.set_inject_inner_da.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_inner_da_low_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_inject_inner_da_low_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 60);
    bv.set_bits(59, 44, type);
    bv.set_bits(43, 30, pkt_size);
    bv.set_bits(29, 22, size1);
    bv.set_bits(21, 14, size2);
    bv.set_bits(13, 6, size3);
    bv.set_bits(5, 0, bitmap);
    return bv;
}

void npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t::unpack(bit_vector64_t bv)
{
    type = bv.bits(59, 44).get_value();
    pkt_size = bv.bits(43, 30).get_value();
    size1 = bv.bits(29, 22).get_value();
    size2 = bv.bits(21, 14).get_value();
    size3 = bv.bits(13, 6).get_value();
    bitmap = bv.bits(5, 0).get_value();
}

field_structure npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pkt_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pkt_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(size1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("size1", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(size2);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("size2", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(size3);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("size3", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(bitmap);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("bitmap", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_inject_inner_ethernet_header_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(2, 0, transport.pack());
    bv.set_bits(3, 3, requires_inject_up);
    
    return bv;
}

void npl_bfd_inject_inner_ethernet_header_static_table_key_t::unpack(bit_vector64_t bv)
{
    transport.unpack(bv.bits(2, 0));
    requires_inject_up = bv.bits(3, 3).get_value();
    
}

field_structure npl_bfd_inject_inner_ethernet_header_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_inner_ethernet_header_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("transport", transport.to_field_structure());
    fs_subfield.flat_value = to_hex_string(requires_inject_up);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("requires_inject_up", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_inner_ethernet_header_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_inject_inner_ethernet_header_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_bfd_inject_inner_ethernet_header_static_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(67, 60, action);
    if (action == NPL_BFD_INJECT_INNER_ETHERNET_HEADER_STATIC_TABLE_ACTION_SET_INNER_INJECT_ETH) {
        bv.set_bits(59, 0, payloads.set_inner_inject_eth.pack());
    }
    
    return bv;
}


void npl_bfd_inject_inner_ethernet_header_static_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_bfd_inject_inner_ethernet_header_static_table_action_e)bv.bits(67, 60).get_value();
    if (action == NPL_BFD_INJECT_INNER_ETHERNET_HEADER_STATIC_TABLE_ACTION_SET_INNER_INJECT_ETH) {
        payloads.set_inner_inject_eth.unpack(bv.bits(59, 0));
    }
    
}


field_structure npl_bfd_inject_inner_ethernet_header_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_inner_ethernet_header_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_inject_inner_ethernet_header_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_INJECT_INNER_ETHERNET_HEADER_STATIC_TABLE_ACTION_SET_INNER_INJECT_ETH) {
        fs_result.subfields.emplace_back("set_inner_inject_eth", payloads.set_inner_inject_eth.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_inner_ethernet_header_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_inject_inner_ethernet_header_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_inject_ttl_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, requires_label);
    bv.set_bits(1, 1, requires_inject_up);
    
    return bv;
}

void npl_bfd_inject_ttl_static_table_key_t::unpack(bit_vector64_t bv)
{
    requires_label = bv.bits(0, 0).get_value();
    requires_inject_up = bv.bits(1, 1).get_value();
    
}

field_structure npl_bfd_inject_ttl_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_ttl_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(requires_label);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("requires_label", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(requires_inject_up);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("requires_inject_up", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_ttl_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_inject_ttl_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_inject_ttl_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_BFD_INJECT_TTL_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.bfd_inject_ttl.pack());
    }
    
    return bv;
}


void npl_bfd_inject_ttl_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_inject_ttl_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_BFD_INJECT_TTL_STATIC_TABLE_ACTION_WRITE) {
        payloads.bfd_inject_ttl.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_bfd_inject_ttl_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_inject_ttl_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_inject_ttl_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_INJECT_TTL_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.bfd_inject_ttl", payloads.bfd_inject_ttl.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_inject_ttl_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_inject_ttl_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_ipv6_sip_A_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, bfd_ipv6_selector.pack());
    
    return bv;
}

void npl_bfd_ipv6_sip_A_table_key_t::unpack(bit_vector64_t bv)
{
    bfd_ipv6_selector.unpack(bv.bits(7, 0));
    
}

field_structure npl_bfd_ipv6_sip_A_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_ipv6_sip_A_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("bfd_ipv6_selector", bfd_ipv6_selector.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_bfd_ipv6_sip_A_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_ipv6_sip_A_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_ipv6_sip_A_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_BFD_IPV6_SIP_A_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.bfd_local_ipv6_A_sip.pack());
    }
    
    return bv;
}


void npl_bfd_ipv6_sip_A_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_ipv6_sip_A_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_BFD_IPV6_SIP_A_TABLE_ACTION_WRITE) {
        payloads.bfd_local_ipv6_A_sip.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_bfd_ipv6_sip_A_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_ipv6_sip_A_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_ipv6_sip_A_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_IPV6_SIP_A_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.bfd_local_ipv6_A_sip", payloads.bfd_local_ipv6_A_sip.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_ipv6_sip_A_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_ipv6_sip_A_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_ipv6_sip_B_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, bfd_ipv6_selector.pack());
    
    return bv;
}

void npl_bfd_ipv6_sip_B_table_key_t::unpack(bit_vector64_t bv)
{
    bfd_ipv6_selector.unpack(bv.bits(7, 0));
    
}

field_structure npl_bfd_ipv6_sip_B_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_ipv6_sip_B_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("bfd_ipv6_selector", bfd_ipv6_selector.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_bfd_ipv6_sip_B_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_ipv6_sip_B_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_ipv6_sip_B_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_BFD_IPV6_SIP_B_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.bfd_local_ipv6_B_sip.pack());
    }
    
    return bv;
}


void npl_bfd_ipv6_sip_B_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_ipv6_sip_B_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_BFD_IPV6_SIP_B_TABLE_ACTION_WRITE) {
        payloads.bfd_local_ipv6_B_sip.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_bfd_ipv6_sip_B_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_ipv6_sip_B_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_ipv6_sip_B_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_IPV6_SIP_B_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.bfd_local_ipv6_B_sip", payloads.bfd_local_ipv6_B_sip.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_ipv6_sip_B_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_ipv6_sip_B_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_ipv6_sip_C_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, bfd_ipv6_selector.pack());
    
    return bv;
}

void npl_bfd_ipv6_sip_C_table_key_t::unpack(bit_vector64_t bv)
{
    bfd_ipv6_selector.unpack(bv.bits(7, 0));
    
}

field_structure npl_bfd_ipv6_sip_C_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_ipv6_sip_C_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("bfd_ipv6_selector", bfd_ipv6_selector.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_bfd_ipv6_sip_C_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_ipv6_sip_C_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_ipv6_sip_C_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_BFD_IPV6_SIP_C_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.bfd_local_ipv6_C_sip.pack());
    }
    
    return bv;
}


void npl_bfd_ipv6_sip_C_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_ipv6_sip_C_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_BFD_IPV6_SIP_C_TABLE_ACTION_WRITE) {
        payloads.bfd_local_ipv6_C_sip.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_bfd_ipv6_sip_C_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_ipv6_sip_C_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_ipv6_sip_C_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_IPV6_SIP_C_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.bfd_local_ipv6_C_sip", payloads.bfd_local_ipv6_C_sip.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_ipv6_sip_C_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_ipv6_sip_C_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_ipv6_sip_D_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, bfd_ipv6_selector.pack());
    
    return bv;
}

void npl_bfd_ipv6_sip_D_table_key_t::unpack(bit_vector64_t bv)
{
    bfd_ipv6_selector.unpack(bv.bits(7, 0));
    
}

field_structure npl_bfd_ipv6_sip_D_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_ipv6_sip_D_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("bfd_ipv6_selector", bfd_ipv6_selector.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_bfd_ipv6_sip_D_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_ipv6_sip_D_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_ipv6_sip_D_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_BFD_IPV6_SIP_D_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.bfd_local_ipv6_D_sip.pack());
    }
    
    return bv;
}


void npl_bfd_ipv6_sip_D_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_ipv6_sip_D_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_BFD_IPV6_SIP_D_TABLE_ACTION_WRITE) {
        payloads.bfd_local_ipv6_D_sip.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_bfd_ipv6_sip_D_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_ipv6_sip_D_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_ipv6_sip_D_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_IPV6_SIP_D_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.bfd_local_ipv6_D_sip", payloads.bfd_local_ipv6_D_sip.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_ipv6_sip_D_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_ipv6_sip_D_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 27);
    bv.set_bits(26, 20, fwd_offset);
    bv.set_bits(19, 16, nmret);
    bv.set_bits(15, 0, lpts_punt_encap.pack());
    return bv;
}

void npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t::unpack(bit_vector64_t bv)
{
    fwd_offset = bv.bits(26, 20).get_value();
    nmret = (npl_npu_mirror_or_redirect_encap_type_e)bv.bits(19, 16).get_value();
    lpts_punt_encap.unpack(bv.bits(15, 0));
}

field_structure npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(fwd_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fwd_offset", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(nmret);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("nmret", fs_subfield);
    
    fs_result.subfields.emplace_back("lpts_punt_encap", lpts_punt_encap.to_field_structure());
    return fs_result;
}
std::string to_string(npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_punt_encap_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, encap_result);
    
    return bv;
}

void npl_bfd_punt_encap_static_table_key_t::unpack(bit_vector64_t bv)
{
    encap_result = bv.bits(0, 0).get_value();
    
}

field_structure npl_bfd_punt_encap_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_punt_encap_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(encap_result);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("encap_result", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_punt_encap_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_punt_encap_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_punt_encap_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(34, 27, action);
    if (action == NPL_BFD_PUNT_ENCAP_STATIC_TABLE_ACTION_BFD_HDR_PUNT_ENCAP_ACTION) {
        bv.set_bits(26, 0, payloads.bfd_hdr_punt_encap_action.pack());
    }
    
    return bv;
}


void npl_bfd_punt_encap_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_punt_encap_static_table_action_e)bv.bits(34, 27).get_value();
    if (action == NPL_BFD_PUNT_ENCAP_STATIC_TABLE_ACTION_BFD_HDR_PUNT_ENCAP_ACTION) {
        payloads.bfd_hdr_punt_encap_action.unpack(bv.bits(26, 0));
    }
    
}


field_structure npl_bfd_punt_encap_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_punt_encap_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_punt_encap_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_PUNT_ENCAP_STATIC_TABLE_ACTION_BFD_HDR_PUNT_ENCAP_ACTION) {
        fs_result.subfields.emplace_back("bfd_hdr_punt_encap_action", payloads.bfd_hdr_punt_encap_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_punt_encap_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_punt_encap_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_required_tx_interval_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, interval_selector);
    
    return bv;
}

void npl_bfd_required_tx_interval_table_key_t::unpack(bit_vector64_t bv)
{
    interval_selector = bv.bits(2, 0).get_value();
    
}

field_structure npl_bfd_required_tx_interval_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_required_tx_interval_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(interval_selector);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("interval_selector", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_required_tx_interval_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_required_tx_interval_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_required_tx_interval_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_BFD_REQUIRED_TX_INTERVAL_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.required_min_tx_interval);
    }
    
    return bv;
}


void npl_bfd_required_tx_interval_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_required_tx_interval_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_BFD_REQUIRED_TX_INTERVAL_TABLE_ACTION_WRITE) {
        payloads.required_min_tx_interval = bv.bits(31, 0).get_value();
    }
    
}


field_structure npl_bfd_required_tx_interval_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_required_tx_interval_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_required_tx_interval_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_REQUIRED_TX_INTERVAL_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.required_min_tx_interval);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.required_min_tx_interval", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_required_tx_interval_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_required_tx_interval_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_rx_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 41);
    
    bv.set_bits(0, 0, protocol_type);
    bv.set_bits(16, 1, dst_port);
    bv.set_bits(24, 17, your_discr_23_16_);
    bv.set_bits(40, 25, your_discr_31_16_);
    
    return bv;
}

void npl_bfd_rx_table_key_t::unpack(bit_vector64_t bv)
{
    protocol_type = (npl_bfd_session_protocol_e)bv.bits(0, 0).get_value();
    dst_port = bv.bits(16, 1).get_value();
    your_discr_23_16_ = bv.bits(24, 17).get_value();
    your_discr_31_16_ = bv.bits(40, 25).get_value();
    
}

field_structure npl_bfd_rx_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_rx_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(protocol_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("protocol_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dst_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dst_port", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(your_discr_23_16_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("your_discr_23_16_", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(your_discr_31_16_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("your_discr_31_16_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_rx_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_rx_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_rx_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(51, 44, action);
    if (action == NPL_BFD_RX_TABLE_ACTION_WRITE) {
        bv.set_bits(43, 0, payloads.bfd_em_lookup_result.pack());
    }
    
    return bv;
}


void npl_bfd_rx_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_rx_table_action_e)bv.bits(51, 44).get_value();
    if (action == NPL_BFD_RX_TABLE_ACTION_WRITE) {
        payloads.bfd_em_lookup_result.unpack(bv.bits(43, 0));
    }
    
}


field_structure npl_bfd_rx_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_rx_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_rx_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_RX_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.bfd_em_lookup_result", payloads.bfd_em_lookup_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_rx_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_rx_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_set_inject_type_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up);
    
    return bv;
}

void npl_bfd_set_inject_type_static_table_key_t::unpack(bit_vector64_t bv)
{
    pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up = bv.bits(0, 0).get_value();
    
}

field_structure npl_bfd_set_inject_type_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_set_inject_type_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_set_inject_type_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_set_inject_type_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_set_inject_type_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_BFD_SET_INJECT_TYPE_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.packet_inject_header_inject_header_type);
    }
    
    return bv;
}


void npl_bfd_set_inject_type_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_set_inject_type_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_BFD_SET_INJECT_TYPE_STATIC_TABLE_ACTION_WRITE) {
        payloads.packet_inject_header_inject_header_type = (npl_inject_header_type_e)bv.bits(7, 0).get_value();
    }
    
}


field_structure npl_bfd_set_inject_type_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_set_inject_type_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_set_inject_type_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_SET_INJECT_TYPE_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = npl_enum_to_string(payloads.packet_inject_header_inject_header_type);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.packet_inject_header_inject_header_type", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_set_inject_type_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_set_inject_type_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    bv.set_bits(10, 10, bfd_valid);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t::unpack(bit_vector64_t bv)
{
    bfd_valid = bv.bits(10, 10).get_value();
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(bfd_valid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("bfd_valid", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_udp_port_map_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 38);
    
    bv.set_bits(15, 0, packet_header_1__udp_header_dst_port);
    bv.set_bits(23, 16, packet_ipv6_header_next_header);
    bv.set_bits(31, 24, packet_ipv4_header_protocol);
    bv.set_bits(36, 32, packet_header_info_type);
    bv.set_bits(37, 37, pd_redirect_stage_vars_skip_bfd_or_ttl_255);
    
    return bv;
}

void npl_bfd_udp_port_map_static_table_key_t::unpack(bit_vector64_t bv)
{
    packet_header_1__udp_header_dst_port = bv.bits(15, 0).get_value();
    packet_ipv6_header_next_header = bv.bits(23, 16).get_value();
    packet_ipv4_header_protocol = bv.bits(31, 24).get_value();
    packet_header_info_type = (npl_protocol_type_e)bv.bits(36, 32).get_value();
    pd_redirect_stage_vars_skip_bfd_or_ttl_255 = bv.bits(37, 37).get_value();
    
}

field_structure npl_bfd_udp_port_map_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_udp_port_map_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(packet_header_1__udp_header_dst_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_header_1__udp_header_dst_port", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(packet_ipv6_header_next_header);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_ipv6_header_next_header", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(packet_ipv4_header_protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_ipv4_header_protocol", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(packet_header_info_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_header_info_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pd_redirect_stage_vars_skip_bfd_or_ttl_255);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_redirect_stage_vars_skip_bfd_or_ttl_255", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_udp_port_map_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_udp_port_map_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_udp_port_map_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(18, 11, action);
    if (action == NPL_BFD_UDP_PORT_MAP_STATIC_TABLE_ACTION_BFD_UDP_PORT_RESULT) {
        bv.set_bits(10, 0, payloads.bfd_udp_port_result.pack());
    }
    
    return bv;
}


void npl_bfd_udp_port_map_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_udp_port_map_static_table_action_e)bv.bits(18, 11).get_value();
    if (action == NPL_BFD_UDP_PORT_MAP_STATIC_TABLE_ACTION_BFD_UDP_PORT_RESULT) {
        payloads.bfd_udp_port_result.unpack(bv.bits(10, 0));
    }
    
}


field_structure npl_bfd_udp_port_map_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_udp_port_map_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_udp_port_map_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_UDP_PORT_MAP_STATIC_TABLE_ACTION_BFD_UDP_PORT_RESULT) {
        fs_result.subfields.emplace_back("bfd_udp_port_result", payloads.bfd_udp_port_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_udp_port_map_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_udp_port_map_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 48);
    bv.set_bits(47, 16, l4_ports.pack());
    bv.set_bits(15, 0, length);
    return bv;
}

void npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t::unpack(bit_vector64_t bv)
{
    l4_ports.unpack(bv.bits(47, 16));
    length = bv.bits(15, 0).get_value();
}

field_structure npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("l4_ports", l4_ports.to_field_structure());
    fs_subfield.flat_value = to_hex_string(length);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("length", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bfd_udp_port_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, pd_pd_npu_host_inject_fields_aux_data_bfd_session_type);
    
    return bv;
}

void npl_bfd_udp_port_static_table_key_t::unpack(bit_vector64_t bv)
{
    pd_pd_npu_host_inject_fields_aux_data_bfd_session_type = (npl_bfd_session_type_e)bv.bits(1, 0).get_value();
    
}

field_structure npl_bfd_udp_port_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_udp_port_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(pd_pd_npu_host_inject_fields_aux_data_bfd_session_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_pd_npu_host_inject_fields_aux_data_bfd_session_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bfd_udp_port_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bfd_udp_port_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bfd_udp_port_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(55, 48, action);
    if (action == NPL_BFD_UDP_PORT_STATIC_TABLE_ACTION_BFD_UDP_PORT_STATIC_RESULT) {
        bv.set_bits(47, 0, payloads.bfd_udp_port_static_result.pack());
    }
    
    return bv;
}


void npl_bfd_udp_port_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bfd_udp_port_static_table_action_e)bv.bits(55, 48).get_value();
    if (action == NPL_BFD_UDP_PORT_STATIC_TABLE_ACTION_BFD_UDP_PORT_STATIC_RESULT) {
        payloads.bfd_udp_port_static_result.unpack(bv.bits(47, 0));
    }
    
}


field_structure npl_bfd_udp_port_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bfd_udp_port_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bfd_udp_port_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BFD_UDP_PORT_STATIC_TABLE_ACTION_BFD_UDP_PORT_STATIC_RESULT) {
        fs_result.subfields.emplace_back("bfd_udp_port_static_result", payloads.bfd_udp_port_static_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_bfd_udp_port_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bfd_udp_port_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bitmap_oqg_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, bitmap_oqg_map_index_index);
    
    return bv;
}

void npl_bitmap_oqg_map_table_key_t::unpack(bit_vector64_t bv)
{
    bitmap_oqg_map_index_index = bv.bits(7, 0).get_value();
    
}

field_structure npl_bitmap_oqg_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bitmap_oqg_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(bitmap_oqg_map_index_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("bitmap_oqg_map_index_index", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bitmap_oqg_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bitmap_oqg_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bitmap_oqg_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_BITMAP_OQG_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.bitmap_oqg_map_result_oqg_id);
    }
    
    return bv;
}


void npl_bitmap_oqg_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bitmap_oqg_map_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_BITMAP_OQG_MAP_TABLE_ACTION_WRITE) {
        payloads.bitmap_oqg_map_result_oqg_id = bv.bits(7, 0).get_value();
    }
    
}


field_structure npl_bitmap_oqg_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bitmap_oqg_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bitmap_oqg_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BITMAP_OQG_MAP_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.bitmap_oqg_map_result_oqg_id);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.bitmap_oqg_map_result_oqg_id", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_bitmap_oqg_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bitmap_oqg_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_bvn_tc_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(2, 0, tc);
    bv.set_bits(5, 3, tc_map_profile);
    
    return bv;
}

void npl_bvn_tc_map_table_key_t::unpack(bit_vector64_t bv)
{
    tc = bv.bits(2, 0).get_value();
    tc_map_profile = bv.bits(5, 3).get_value();
    
}

field_structure npl_bvn_tc_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bvn_tc_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(tc_map_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tc_map_profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_bvn_tc_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_bvn_tc_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_bvn_tc_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_BVN_TC_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.bvn_offset);
    }
    
    return bv;
}


void npl_bvn_tc_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_bvn_tc_map_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_BVN_TC_MAP_TABLE_ACTION_WRITE) {
        payloads.bvn_offset = bv.bits(2, 0).get_value();
    }
    
}


field_structure npl_bvn_tc_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_bvn_tc_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_bvn_tc_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_BVN_TC_MAP_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.bvn_offset);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.bvn_offset", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_bvn_tc_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_bvn_tc_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_calc_checksum_enable_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, txpp_npe_to_npe_metadata_fwd_header_type);
    
    return bv;
}

void npl_calc_checksum_enable_table_key_t::unpack(bit_vector64_t bv)
{
    txpp_npe_to_npe_metadata_fwd_header_type = (npl_fwd_header_type_e)bv.bits(3, 0).get_value();
    
}

field_structure npl_calc_checksum_enable_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_calc_checksum_enable_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(txpp_npe_to_npe_metadata_fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("txpp_npe_to_npe_metadata_fwd_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_calc_checksum_enable_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_calc_checksum_enable_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_calc_checksum_enable_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_CALC_CHECKSUM_ENABLE_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.calc_checksum_enable.pack());
    }
    
    return bv;
}


void npl_calc_checksum_enable_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_calc_checksum_enable_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_CALC_CHECKSUM_ENABLE_TABLE_ACTION_WRITE) {
        payloads.calc_checksum_enable.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_calc_checksum_enable_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_calc_checksum_enable_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_calc_checksum_enable_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_CALC_CHECKSUM_ENABLE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.calc_checksum_enable", payloads.calc_checksum_enable.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_calc_checksum_enable_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_calc_checksum_enable_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ccm_flags_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(2, 0, ccm_period);
    bv.set_bits(3, 3, tx_rdi);
    
    return bv;
}

void npl_ccm_flags_table_key_t::unpack(bit_vector64_t bv)
{
    ccm_period = bv.bits(2, 0).get_value();
    tx_rdi = bv.bits(3, 3).get_value();
    
}

field_structure npl_ccm_flags_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ccm_flags_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ccm_period);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ccm_period", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(tx_rdi);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_rdi", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ccm_flags_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ccm_flags_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ccm_flags_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_CCM_FLAGS_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.flags);
    }
    
    return bv;
}


void npl_ccm_flags_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ccm_flags_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_CCM_FLAGS_TABLE_ACTION_WRITE) {
        payloads.flags = bv.bits(7, 0).get_value();
    }
    
}


field_structure npl_ccm_flags_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ccm_flags_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ccm_flags_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_CCM_FLAGS_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.flags);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.flags", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_ccm_flags_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ccm_flags_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_cif2npa_c_lri_macro_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_cif2npa_c_lri_macro_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_cif2npa_c_lri_macro_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_cif2npa_c_lri_macro_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_cif2npa_c_lri_macro_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_cif2npa_c_lri_macro_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_cif2npa_c_lri_macro_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_CIF2NPA_C_LRI_MACRO_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.next_macro_update_next_macro_id);
    }
    
    return bv;
}


void npl_cif2npa_c_lri_macro_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_cif2npa_c_lri_macro_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_CIF2NPA_C_LRI_MACRO_ACTION_WRITE) {
        payloads.next_macro_update_next_macro_id = bv.bits(7, 0).get_value();
    }
    
}


field_structure npl_cif2npa_c_lri_macro_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_cif2npa_c_lri_macro_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_cif2npa_c_lri_macro_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_CIF2NPA_C_LRI_MACRO_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.next_macro_update_next_macro_id);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.next_macro_update_next_macro_id", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_cif2npa_c_lri_macro_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_cif2npa_c_lri_macro_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_cif2npa_c_mps_macro_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_cif2npa_c_mps_macro_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_cif2npa_c_mps_macro_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_cif2npa_c_mps_macro_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_cif2npa_c_mps_macro_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_cif2npa_c_mps_macro_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_cif2npa_c_mps_macro_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_CIF2NPA_C_MPS_MACRO_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.next_macro_update_next_macro_id);
    }
    
    return bv;
}


void npl_cif2npa_c_mps_macro_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_cif2npa_c_mps_macro_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_CIF2NPA_C_MPS_MACRO_ACTION_WRITE) {
        payloads.next_macro_update_next_macro_id = bv.bits(7, 0).get_value();
    }
    
}


field_structure npl_cif2npa_c_mps_macro_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_cif2npa_c_mps_macro_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_cif2npa_c_mps_macro_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_CIF2NPA_C_MPS_MACRO_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.next_macro_update_next_macro_id);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.next_macro_update_next_macro_id", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_cif2npa_c_mps_macro_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_cif2npa_c_mps_macro_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_counters_block_config_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(6, 0, counter_block_id);
    
    return bv;
}

void npl_counters_block_config_table_key_t::unpack(bit_vector64_t bv)
{
    counter_block_id = bv.bits(6, 0).get_value();
    
}

field_structure npl_counters_block_config_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_counters_block_config_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(counter_block_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("counter_block_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_counters_block_config_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_counters_block_config_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_counters_block_config_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_WRITE) {
        bv.set_bits(23, 0, payloads.counters_block_config.pack());
    }
    
    return bv;
}


void npl_counters_block_config_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_counters_block_config_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_WRITE) {
        payloads.counters_block_config.unpack(bv.bits(23, 0));
    }
    
}


field_structure npl_counters_block_config_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_counters_block_config_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_counters_block_config_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.counters_block_config", payloads.counters_block_config.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_counters_block_config_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_counters_block_config_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_counters_voq_block_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(9, 0, voq_base_id);
    
    return bv;
}

void npl_counters_voq_block_map_table_key_t::unpack(bit_vector64_t bv)
{
    voq_base_id = bv.bits(9, 0).get_value();
    
}

field_structure npl_counters_voq_block_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_counters_voq_block_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(voq_base_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("voq_base_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_counters_voq_block_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_counters_voq_block_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_counters_voq_block_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(30, 23, action);
    if (action == NPL_COUNTERS_VOQ_BLOCK_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(22, 0, payloads.counters_voq_block_map_result.pack());
    }
    
    return bv;
}


void npl_counters_voq_block_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_counters_voq_block_map_table_action_e)bv.bits(30, 23).get_value();
    if (action == NPL_COUNTERS_VOQ_BLOCK_MAP_TABLE_ACTION_WRITE) {
        payloads.counters_voq_block_map_result.unpack(bv.bits(22, 0));
    }
    
}


field_structure npl_counters_voq_block_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_counters_voq_block_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_counters_voq_block_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_COUNTERS_VOQ_BLOCK_MAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.counters_voq_block_map_result", payloads.counters_voq_block_map_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_counters_voq_block_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_counters_voq_block_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_cud_is_multicast_bitmap_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, tx_cud_prefix);
    
    return bv;
}

void npl_cud_is_multicast_bitmap_key_t::unpack(bit_vector64_t bv)
{
    tx_cud_prefix = bv.bits(3, 0).get_value();
    
}

field_structure npl_cud_is_multicast_bitmap_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_cud_is_multicast_bitmap_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tx_cud_prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_cud_prefix", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_cud_is_multicast_bitmap_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_cud_is_multicast_bitmap_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_cud_is_multicast_bitmap_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_CUD_IS_MULTICAST_BITMAP_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.cud_mapping_local_vars_cud_is_multicast);
    }
    
    return bv;
}


void npl_cud_is_multicast_bitmap_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_cud_is_multicast_bitmap_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_CUD_IS_MULTICAST_BITMAP_ACTION_WRITE) {
        payloads.cud_mapping_local_vars_cud_is_multicast = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_cud_is_multicast_bitmap_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_cud_is_multicast_bitmap_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_cud_is_multicast_bitmap_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_CUD_IS_MULTICAST_BITMAP_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.cud_mapping_local_vars_cud_is_multicast);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.cud_mapping_local_vars_cud_is_multicast", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_cud_is_multicast_bitmap_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_cud_is_multicast_bitmap_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_cud_narrow_hw_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, cud_mapping_local_vars_mc_copy_id_12_0_);
    
    return bv;
}

void npl_cud_narrow_hw_table_key_t::unpack(bit_vector64_t bv)
{
    cud_mapping_local_vars_mc_copy_id_12_0_ = bv.bits(12, 0).get_value();
    
}

field_structure npl_cud_narrow_hw_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_cud_narrow_hw_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(cud_mapping_local_vars_mc_copy_id_12_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("cud_mapping_local_vars_mc_copy_id_12_0_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_cud_narrow_hw_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_cud_narrow_hw_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_cud_narrow_hw_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(47, 40, action);
    if (action == NPL_CUD_NARROW_HW_TABLE_ACTION_WRITE) {
        bv.set_bits(39, 0, payloads.cud_mapping_local_vars_narrow_mc_cud);
    }
    
    return bv;
}


void npl_cud_narrow_hw_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_cud_narrow_hw_table_action_e)bv.bits(47, 40).get_value();
    if (action == NPL_CUD_NARROW_HW_TABLE_ACTION_WRITE) {
        payloads.cud_mapping_local_vars_narrow_mc_cud = bv.bits(39, 0).get_value();
    }
    
}


field_structure npl_cud_narrow_hw_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_cud_narrow_hw_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_cud_narrow_hw_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_CUD_NARROW_HW_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.cud_mapping_local_vars_narrow_mc_cud);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.cud_mapping_local_vars_narrow_mc_cud", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_cud_narrow_hw_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_cud_narrow_hw_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_cud_wide_hw_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(11, 0, cud_mapping_local_vars_mc_copy_id_12_1_);
    
    return bv;
}

void npl_cud_wide_hw_table_key_t::unpack(bit_vector64_t bv)
{
    cud_mapping_local_vars_mc_copy_id_12_1_ = bv.bits(11, 0).get_value();
    
}

field_structure npl_cud_wide_hw_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_cud_wide_hw_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(cud_mapping_local_vars_mc_copy_id_12_1_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("cud_mapping_local_vars_mc_copy_id_12_1_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_cud_wide_hw_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_cud_wide_hw_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_cud_wide_hw_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(87, 80, action);
    if (action == NPL_CUD_WIDE_HW_TABLE_ACTION_WRITE) {
        bv.set_bits(79, 0, payloads.cud_mapping_local_vars_wide_mc_cud.pack());
    }
    
    return bv;
}


void npl_cud_wide_hw_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_cud_wide_hw_table_action_e)bv.bits(87, 80).get_value();
    if (action == NPL_CUD_WIDE_HW_TABLE_ACTION_WRITE) {
        payloads.cud_mapping_local_vars_wide_mc_cud.unpack(bv.bits(79, 0));
    }
    
}


field_structure npl_cud_wide_hw_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_cud_wide_hw_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_cud_wide_hw_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_CUD_WIDE_HW_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.cud_mapping_local_vars_wide_mc_cud", payloads.cud_mapping_local_vars_wide_mc_cud.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_cud_wide_hw_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_cud_wide_hw_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_default_egress_ipv4_sec_acl_table_key_t::pack(void) const
{
    bit_vector192_t bv(0, 129);
    
    bv.set_bits(3, 0, acl_id);
    bv.set_bits(4, 4, ip_first_fragment.pack());
    bv.set_bits(10, 5, tcp_flags);
    bv.set_bits(18, 11, protocol);
    bv.set_bits(26, 19, new_ttl);
    bv.set_bits(32, 27, fwd_qos_tag_5_0_);
    bv.set_bits(48, 33, dst_port);
    bv.set_bits(64, 49, src_port);
    bv.set_bits(96, 65, dip);
    bv.set_bits(128, 97, sip);
    
    return bv;
}

void npl_default_egress_ipv4_sec_acl_table_key_t::unpack(bit_vector192_t bv)
{
    acl_id = bv.bits(3, 0).get_value();
    ip_first_fragment.unpack(bv.bits(4, 4));
    tcp_flags = bv.bits(10, 5).get_value();
    protocol = bv.bits(18, 11).get_value();
    new_ttl = bv.bits(26, 19).get_value();
    fwd_qos_tag_5_0_ = bv.bits(32, 27).get_value();
    dst_port = bv.bits(48, 33).get_value();
    src_port = bv.bits(64, 49).get_value();
    dip = bv.bits(96, 65).get_value();
    sip = bv.bits(128, 97).get_value();
    
}

field_structure npl_default_egress_ipv4_sec_acl_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_default_egress_ipv4_sec_acl_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(acl_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_id", fs_subfield);
    
    fs_result.subfields.emplace_back("ip_first_fragment", ip_first_fragment.to_field_structure());
    fs_subfield.flat_value = to_hex_string(tcp_flags);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tcp_flags", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("protocol", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(new_ttl);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("new_ttl", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(fwd_qos_tag_5_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fwd_qos_tag_5_0_", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dst_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dst_port", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(src_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("src_port", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dip);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dip", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(sip);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sip", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_default_egress_ipv4_sec_acl_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_default_egress_ipv4_sec_acl_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_default_egress_ipv4_sec_acl_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_DEFAULT_EGRESS_IPV4_SEC_ACL_TABLE_ACTION_WRITE) {
        bv.set_bits(23, 0, payloads.egress_sec_acl_result.pack());
    }
    
    return bv;
}


void npl_default_egress_ipv4_sec_acl_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_default_egress_ipv4_sec_acl_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_DEFAULT_EGRESS_IPV4_SEC_ACL_TABLE_ACTION_WRITE) {
        payloads.egress_sec_acl_result.unpack(bv.bits(23, 0));
    }
    
}


field_structure npl_default_egress_ipv4_sec_acl_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_default_egress_ipv4_sec_acl_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_default_egress_ipv4_sec_acl_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_DEFAULT_EGRESS_IPV4_SEC_ACL_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.egress_sec_acl_result", payloads.egress_sec_acl_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_default_egress_ipv4_sec_acl_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_default_egress_ipv4_sec_acl_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector384_t npl_default_egress_ipv6_acl_sec_table_key_t::pack(void) const
{
    bit_vector384_t bv(0, 320);
    
    bv.set_bits(3, 0, 0x1);
    bv.set_bits(9, 4, tcp_flags);
    bv.set_bits(15, 10, qos_tag);
    bv.set_bits(31, 16, src_port);
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 32;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = sip;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            bv.set_bits(msb, lsb, *p);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    bv.set_bits(162, 160, 0x1);
    bv.set_bits(163, 163, first_fragment.pack());
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 164;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = dip;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            bv.set_bits(msb, lsb, *p);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    bv.set_bits(295, 292, acl_id);
    bv.set_bits(311, 296, dst_port);
    bv.set_bits(319, 312, next_header);
    
    return bv;
}

void npl_default_egress_ipv6_acl_sec_table_key_t::unpack(bit_vector384_t bv)
{
    tcp_flags = bv.bits(9, 4).get_value();
    qos_tag = bv.bits(15, 10).get_value();
    src_port = bv.bits(31, 16).get_value();
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 32;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        uint64_t * p = sip;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            *p = bv.bits(msb, lsb).get_value();
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    first_fragment.unpack(bv.bits(163, 163));
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 164;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        uint64_t * p = dip;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            *p = bv.bits(msb, lsb).get_value();
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    acl_id = bv.bits(295, 292).get_value();
    dst_port = bv.bits(311, 296).get_value();
    next_header = bv.bits(319, 312).get_value();
    
}

field_structure npl_default_egress_ipv6_acl_sec_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_default_egress_ipv6_acl_sec_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x1", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(tcp_flags);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tcp_flags", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(qos_tag);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("qos_tag", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(src_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("src_port", fs_subfield);
    
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 32;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = sip;
        int i = 0;
        while (msb < max_msb) {
            field_structure fs_sub;
            fs_sub.field_type = "int";
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            fs_sub.flat_value = to_hex_string(*p);
            fs_result.subfields.emplace_back("primitive_" + std::to_string(i), fs_sub);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            i++;
            p++;
        }
    } // array field end
    
    fs_subfield.flat_value = to_hex_string(0x1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x1", fs_subfield);
    
    fs_result.subfields.emplace_back("first_fragment", first_fragment.to_field_structure());
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 164;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = dip;
        int i = 0;
        while (msb < max_msb) {
            field_structure fs_sub;
            fs_sub.field_type = "int";
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            fs_sub.flat_value = to_hex_string(*p);
            fs_result.subfields.emplace_back("primitive_" + std::to_string(i), fs_sub);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            i++;
            p++;
        }
    } // array field end
    
    fs_subfield.flat_value = to_hex_string(acl_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dst_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dst_port", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_header);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_header", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_default_egress_ipv6_acl_sec_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_default_egress_ipv6_acl_sec_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_default_egress_ipv6_acl_sec_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_DEFAULT_EGRESS_IPV6_ACL_SEC_TABLE_ACTION_WRITE) {
        bv.set_bits(23, 0, payloads.sec_action.pack());
    }
    
    return bv;
}


void npl_default_egress_ipv6_acl_sec_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_default_egress_ipv6_acl_sec_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_DEFAULT_EGRESS_IPV6_ACL_SEC_TABLE_ACTION_WRITE) {
        payloads.sec_action.unpack(bv.bits(23, 0));
    }
    
}


field_structure npl_default_egress_ipv6_acl_sec_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_default_egress_ipv6_acl_sec_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_default_egress_ipv6_acl_sec_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_DEFAULT_EGRESS_IPV6_ACL_SEC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.sec_action", payloads.sec_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_default_egress_ipv6_acl_sec_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_default_egress_ipv6_acl_sec_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_dest_slice_voq_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, calc_msvoq_num_input_tx_slice);
    
    return bv;
}

void npl_dest_slice_voq_map_table_key_t::unpack(bit_vector64_t bv)
{
    calc_msvoq_num_input_tx_slice = bv.bits(2, 0).get_value();
    
}

field_structure npl_dest_slice_voq_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_dest_slice_voq_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(calc_msvoq_num_input_tx_slice);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("calc_msvoq_num_input_tx_slice", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_dest_slice_voq_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_dest_slice_voq_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_dest_slice_voq_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_DEST_SLICE_VOQ_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.dest_slice_voq_map_table_result.pack());
    }
    
    return bv;
}


void npl_dest_slice_voq_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_dest_slice_voq_map_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_DEST_SLICE_VOQ_MAP_TABLE_ACTION_WRITE) {
        payloads.dest_slice_voq_map_table_result.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_dest_slice_voq_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_dest_slice_voq_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_dest_slice_voq_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_DEST_SLICE_VOQ_MAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.dest_slice_voq_map_table_result", payloads.dest_slice_voq_map_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_dest_slice_voq_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_dest_slice_voq_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_destination_decoding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, destination_encoding);
    
    return bv;
}

void npl_destination_decoding_table_key_t::unpack(bit_vector64_t bv)
{
    destination_encoding = bv.bits(4, 0).get_value();
    
}

field_structure npl_destination_decoding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_destination_decoding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(destination_encoding);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("destination_encoding", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_destination_decoding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_destination_decoding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_destination_decoding_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_DESTINATION_DECODING_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.destination_decoding_table_result.pack());
    }
    
    return bv;
}


void npl_destination_decoding_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_destination_decoding_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_DESTINATION_DECODING_TABLE_ACTION_WRITE) {
        payloads.destination_decoding_table_result.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_destination_decoding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_destination_decoding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_destination_decoding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_DESTINATION_DECODING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.destination_decoding_table_result", payloads.destination_decoding_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_destination_decoding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_destination_decoding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_device_mode_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_device_mode_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_device_mode_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_device_mode_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_device_mode_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_device_mode_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_device_mode_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(9, 2, action);
    if (action == NPL_DEVICE_MODE_TABLE_ACTION_WRITE) {
        bv.set_bits(1, 0, payloads.device_mode_table_result.pack());
    }
    
    return bv;
}


void npl_device_mode_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_device_mode_table_action_e)bv.bits(9, 2).get_value();
    if (action == NPL_DEVICE_MODE_TABLE_ACTION_WRITE) {
        payloads.device_mode_table_result.unpack(bv.bits(1, 0));
    }
    
}


field_structure npl_device_mode_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_device_mode_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_device_mode_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_DEVICE_MODE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.device_mode_table_result", payloads.device_mode_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_device_mode_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_device_mode_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_dsp_l2_attributes_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, omd_txpp);
    
    return bv;
}

void npl_dsp_l2_attributes_table_key_t::unpack(bit_vector64_t bv)
{
    omd_txpp = bv.bits(5, 0).get_value();
    
}

field_structure npl_dsp_l2_attributes_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_dsp_l2_attributes_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(omd_txpp);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("omd_txpp", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_dsp_l2_attributes_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_dsp_l2_attributes_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_dsp_l2_attributes_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(59, 52, action);
    if (action == NPL_DSP_L2_ATTRIBUTES_TABLE_ACTION_WRITE) {
        bv.set_bits(51, 0, payloads.dsp_l2_attributes.pack());
    }
    
    return bv;
}


void npl_dsp_l2_attributes_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_dsp_l2_attributes_table_action_e)bv.bits(59, 52).get_value();
    if (action == NPL_DSP_L2_ATTRIBUTES_TABLE_ACTION_WRITE) {
        payloads.dsp_l2_attributes.unpack(bv.bits(51, 0));
    }
    
}


field_structure npl_dsp_l2_attributes_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_dsp_l2_attributes_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_dsp_l2_attributes_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_DSP_L2_ATTRIBUTES_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.dsp_l2_attributes", payloads.dsp_l2_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_dsp_l2_attributes_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_dsp_l2_attributes_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_dsp_l3_attributes_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, omd_txpp);
    
    return bv;
}

void npl_dsp_l3_attributes_table_key_t::unpack(bit_vector64_t bv)
{
    omd_txpp = bv.bits(5, 0).get_value();
    
}

field_structure npl_dsp_l3_attributes_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_dsp_l3_attributes_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(omd_txpp);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("omd_txpp", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_dsp_l3_attributes_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_dsp_l3_attributes_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_dsp_l3_attributes_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(45, 38, action);
    if (action == NPL_DSP_L3_ATTRIBUTES_TABLE_ACTION_WRITE) {
        bv.set_bits(37, 0, payloads.dsp_l3_attributes.pack());
    }
    
    return bv;
}


void npl_dsp_l3_attributes_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_dsp_l3_attributes_table_action_e)bv.bits(45, 38).get_value();
    if (action == NPL_DSP_L3_ATTRIBUTES_TABLE_ACTION_WRITE) {
        payloads.dsp_l3_attributes.unpack(bv.bits(37, 0));
    }
    
}


field_structure npl_dsp_l3_attributes_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_dsp_l3_attributes_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_dsp_l3_attributes_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_DSP_L3_ATTRIBUTES_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.dsp_l3_attributes", payloads.dsp_l3_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_dsp_l3_attributes_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_dsp_l3_attributes_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_dummy_dip_index_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(8, 0, dummy_dip_index.pack());
    
    return bv;
}

void npl_dummy_dip_index_table_key_t::unpack(bit_vector64_t bv)
{
    dummy_dip_index.unpack(bv.bits(8, 0));
    
}

field_structure npl_dummy_dip_index_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_dummy_dip_index_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("dummy_dip_index", dummy_dip_index.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_dummy_dip_index_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_dummy_dip_index_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_dummy_dip_index_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_DUMMY_DIP_INDEX_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.dummy_data.pack());
    }
    
    return bv;
}


void npl_dummy_dip_index_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_dummy_dip_index_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_DUMMY_DIP_INDEX_TABLE_ACTION_WRITE) {
        payloads.dummy_data.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_dummy_dip_index_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_dummy_dip_index_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_dummy_dip_index_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_DUMMY_DIP_INDEX_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.dummy_data", payloads.dummy_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_dummy_dip_index_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_dummy_dip_index_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ecn_remark_static_table_set_value_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    bv.set_bits(2, 1, new_ecn);
    bv.set_bits(0, 0, en_ecn_counting);
    return bv;
}

void npl_ecn_remark_static_table_set_value_payload_t::unpack(bit_vector64_t bv)
{
    new_ecn = bv.bits(2, 1).get_value();
    en_ecn_counting = bv.bits(0, 0).get_value();
}

field_structure npl_ecn_remark_static_table_set_value_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ecn_remark_static_table_set_value_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(new_ecn);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("new_ecn", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(en_ecn_counting);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("en_ecn_counting", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_ecn_remark_static_table_set_value_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ecn_remark_static_table_set_value_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ecn_remark_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(3, 0, packet_ipv6_header_tos_3_0_);
    bv.set_bits(7, 4, packet_ipv4_header_tos_3_0_);
    bv.set_bits(11, 8, tx_npu_header_fwd_header_type);
    bv.set_bits(12, 12, pd_cong_on.pack());
    
    return bv;
}

void npl_ecn_remark_static_table_key_t::unpack(bit_vector64_t bv)
{
    packet_ipv6_header_tos_3_0_ = bv.bits(3, 0).get_value();
    packet_ipv4_header_tos_3_0_ = bv.bits(7, 4).get_value();
    tx_npu_header_fwd_header_type = (npl_fwd_header_type_e)bv.bits(11, 8).get_value();
    pd_cong_on.unpack(bv.bits(12, 12));
    
}

field_structure npl_ecn_remark_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ecn_remark_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(packet_ipv6_header_tos_3_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_ipv6_header_tos_3_0_", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(packet_ipv4_header_tos_3_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_ipv4_header_tos_3_0_", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(tx_npu_header_fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_npu_header_fwd_header_type", fs_subfield);
    
    fs_result.subfields.emplace_back("pd_cong_on", pd_cong_on.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ecn_remark_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ecn_remark_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ecn_remark_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_ECN_REMARK_STATIC_TABLE_ACTION_SET_VALUE) {
        bv.set_bits(2, 0, payloads.set_value.pack());
    }
    
    return bv;
}


void npl_ecn_remark_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ecn_remark_static_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_ECN_REMARK_STATIC_TABLE_ACTION_SET_VALUE) {
        payloads.set_value.unpack(bv.bits(2, 0));
    }
    
}


field_structure npl_ecn_remark_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ecn_remark_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ecn_remark_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ECN_REMARK_STATIC_TABLE_ACTION_SET_VALUE) {
        fs_result.subfields.emplace_back("set_value", payloads.set_value.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ecn_remark_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ecn_remark_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_egress_mac_ipv4_sec_acl_table_key_t::pack(void) const
{
    bit_vector192_t bv(0, 131);
    
    bv.set_bits(3, 0, acl_id);
    bv.set_bits(4, 4, ip_first_fragment.pack());
    bv.set_bits(10, 5, tcp_flags);
    bv.set_bits(26, 11, ttl_and_protocol.pack());
    bv.set_bits(34, 27, tos.pack());
    bv.set_bits(66, 35, l4_ports.pack());
    bv.set_bits(130, 67, sip_dip.pack());
    
    return bv;
}

void npl_egress_mac_ipv4_sec_acl_table_key_t::unpack(bit_vector192_t bv)
{
    acl_id = bv.bits(3, 0).get_value();
    ip_first_fragment.unpack(bv.bits(4, 4));
    tcp_flags = bv.bits(10, 5).get_value();
    ttl_and_protocol.unpack(bv.bits(26, 11));
    tos.unpack(bv.bits(34, 27));
    l4_ports.unpack(bv.bits(66, 35));
    sip_dip.unpack(bv.bits(130, 67));
    
}

field_structure npl_egress_mac_ipv4_sec_acl_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_egress_mac_ipv4_sec_acl_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(acl_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_id", fs_subfield);
    
    fs_result.subfields.emplace_back("ip_first_fragment", ip_first_fragment.to_field_structure());
    fs_subfield.flat_value = to_hex_string(tcp_flags);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tcp_flags", fs_subfield);
    
    fs_result.subfields.emplace_back("ttl_and_protocol", ttl_and_protocol.to_field_structure());
    fs_result.subfields.emplace_back("tos", tos.to_field_structure());
    fs_result.subfields.emplace_back("l4_ports", l4_ports.to_field_structure());
    fs_result.subfields.emplace_back("sip_dip", sip_dip.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_egress_mac_ipv4_sec_acl_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_egress_mac_ipv4_sec_acl_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_egress_mac_ipv4_sec_acl_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_EGRESS_MAC_IPV4_SEC_ACL_TABLE_ACTION_WRITE) {
        bv.set_bits(23, 0, payloads.egress_sec_acl_result.pack());
    }
    
    return bv;
}


void npl_egress_mac_ipv4_sec_acl_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_egress_mac_ipv4_sec_acl_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_EGRESS_MAC_IPV4_SEC_ACL_TABLE_ACTION_WRITE) {
        payloads.egress_sec_acl_result.unpack(bv.bits(23, 0));
    }
    
}


field_structure npl_egress_mac_ipv4_sec_acl_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_egress_mac_ipv4_sec_acl_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_egress_mac_ipv4_sec_acl_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_EGRESS_MAC_IPV4_SEC_ACL_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.egress_sec_acl_result", payloads.egress_sec_acl_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_egress_mac_ipv4_sec_acl_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_egress_mac_ipv4_sec_acl_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_egress_nh_and_svi_direct0_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(11, 0, egress_direct0_key.pack());
    
    return bv;
}

void npl_egress_nh_and_svi_direct0_table_key_t::unpack(bit_vector64_t bv)
{
    egress_direct0_key.unpack(bv.bits(11, 0));
    
}

field_structure npl_egress_nh_and_svi_direct0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_egress_nh_and_svi_direct0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("egress_direct0_key", egress_direct0_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_egress_nh_and_svi_direct0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_egress_nh_and_svi_direct0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_egress_nh_and_svi_direct0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(126, 119, action);
    if (action == NPL_EGRESS_NH_AND_SVI_DIRECT0_TABLE_ACTION_WRITE) {
        bv.set_bits(118, 0, payloads.nh_and_svi_payload.pack());
    }
    
    return bv;
}


void npl_egress_nh_and_svi_direct0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_egress_nh_and_svi_direct0_table_action_e)bv.bits(126, 119).get_value();
    if (action == NPL_EGRESS_NH_AND_SVI_DIRECT0_TABLE_ACTION_WRITE) {
        payloads.nh_and_svi_payload.unpack(bv.bits(118, 0));
    }
    
}


field_structure npl_egress_nh_and_svi_direct0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_egress_nh_and_svi_direct0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_egress_nh_and_svi_direct0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_EGRESS_NH_AND_SVI_DIRECT0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.nh_and_svi_payload", payloads.nh_and_svi_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_egress_nh_and_svi_direct0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_egress_nh_and_svi_direct0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_egress_nh_and_svi_direct1_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(9, 0, egress_direct1_key.pack());
    
    return bv;
}

void npl_egress_nh_and_svi_direct1_table_key_t::unpack(bit_vector64_t bv)
{
    egress_direct1_key.unpack(bv.bits(9, 0));
    
}

field_structure npl_egress_nh_and_svi_direct1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_egress_nh_and_svi_direct1_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("egress_direct1_key", egress_direct1_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_egress_nh_and_svi_direct1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_egress_nh_and_svi_direct1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_egress_nh_and_svi_direct1_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(126, 119, action);
    if (action == NPL_EGRESS_NH_AND_SVI_DIRECT1_TABLE_ACTION_WRITE) {
        bv.set_bits(118, 0, payloads.nh_and_svi_payload.pack());
    }
    
    return bv;
}


void npl_egress_nh_and_svi_direct1_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_egress_nh_and_svi_direct1_table_action_e)bv.bits(126, 119).get_value();
    if (action == NPL_EGRESS_NH_AND_SVI_DIRECT1_TABLE_ACTION_WRITE) {
        payloads.nh_and_svi_payload.unpack(bv.bits(118, 0));
    }
    
}


field_structure npl_egress_nh_and_svi_direct1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_egress_nh_and_svi_direct1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_egress_nh_and_svi_direct1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_EGRESS_NH_AND_SVI_DIRECT1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.nh_and_svi_payload", payloads.nh_and_svi_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_egress_nh_and_svi_direct1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_egress_nh_and_svi_direct1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_em_mp_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 48);
    
    bv.set_bits(15, 0, udp_dest_port);
    bv.set_bits(47, 16, your_discr);
    
    return bv;
}

void npl_em_mp_table_key_t::unpack(bit_vector64_t bv)
{
    udp_dest_port = bv.bits(15, 0).get_value();
    your_discr = bv.bits(47, 16).get_value();
    
}

field_structure npl_em_mp_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_em_mp_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(udp_dest_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("udp_dest_port", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(your_discr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("your_discr", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_em_mp_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_em_mp_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_em_mp_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(47, 40, action);
    if (action == NPL_EM_MP_TABLE_ACTION_WRITE) {
        bv.set_bits(39, 0, payloads.bfd_em_payload.pack());
    }
    
    return bv;
}


void npl_em_mp_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_em_mp_table_action_e)bv.bits(47, 40).get_value();
    if (action == NPL_EM_MP_TABLE_ACTION_WRITE) {
        payloads.bfd_em_payload.unpack(bv.bits(39, 0));
    }
    
}


field_structure npl_em_mp_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_em_mp_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_em_mp_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_EM_MP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.bfd_em_payload", payloads.bfd_em_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_em_mp_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_em_mp_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_em_pfc_cong_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 48);
    
    bv.set_bits(5, 0, dsp4);
    bv.set_bits(17, 6, dsp3);
    bv.set_bits(29, 18, dsp2);
    bv.set_bits(41, 30, dsp1);
    bv.set_bits(44, 42, tc);
    bv.set_bits(47, 45, slice);
    
    return bv;
}

void npl_em_pfc_cong_table_key_t::unpack(bit_vector64_t bv)
{
    dsp4 = bv.bits(5, 0).get_value();
    dsp3 = bv.bits(17, 6).get_value();
    dsp2 = bv.bits(29, 18).get_value();
    dsp1 = bv.bits(41, 30).get_value();
    tc = bv.bits(44, 42).get_value();
    slice = bv.bits(47, 45).get_value();
    
}

field_structure npl_em_pfc_cong_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_em_pfc_cong_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dsp4);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dsp4", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dsp3);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dsp3", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dsp2);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dsp2", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dsp1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dsp1", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(slice);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("slice", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_em_pfc_cong_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_em_pfc_cong_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_em_pfc_cong_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(47, 40, action);
    if (action == NPL_EM_PFC_CONG_TABLE_ACTION_WRITE) {
        bv.set_bits(39, 0, payloads.em_payload.pack());
    }
    
    return bv;
}


void npl_em_pfc_cong_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_em_pfc_cong_table_action_e)bv.bits(47, 40).get_value();
    if (action == NPL_EM_PFC_CONG_TABLE_ACTION_WRITE) {
        payloads.em_payload.unpack(bv.bits(39, 0));
    }
    
}


field_structure npl_em_pfc_cong_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_em_pfc_cong_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_em_pfc_cong_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_EM_PFC_CONG_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.em_payload", payloads.em_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_em_pfc_cong_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_em_pfc_cong_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ene_byte_addition_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    
    bv.set_bits(7, 0, pd_ene_macro_ids_2_.pack());
    bv.set_bits(15, 8, pd_ene_macro_ids_1_.pack());
    bv.set_bits(23, 16, pd_ene_macro_ids_0_.pack());
    bv.set_bits(31, 24, pd_first_ene_macro.pack());
    
    return bv;
}

void npl_ene_byte_addition_static_table_key_t::unpack(bit_vector64_t bv)
{
    pd_ene_macro_ids_2_.unpack(bv.bits(7, 0));
    pd_ene_macro_ids_1_.unpack(bv.bits(15, 8));
    pd_ene_macro_ids_0_.unpack(bv.bits(23, 16));
    pd_first_ene_macro.unpack(bv.bits(31, 24));
    
}

field_structure npl_ene_byte_addition_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ene_byte_addition_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("pd_ene_macro_ids_2_", pd_ene_macro_ids_2_.to_field_structure());
    fs_result.subfields.emplace_back("pd_ene_macro_ids_1_", pd_ene_macro_ids_1_.to_field_structure());
    fs_result.subfields.emplace_back("pd_ene_macro_ids_0_", pd_ene_macro_ids_0_.to_field_structure());
    fs_result.subfields.emplace_back("pd_first_ene_macro", pd_first_ene_macro.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ene_byte_addition_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ene_byte_addition_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ene_byte_addition_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(21, 14, action);
    if (action == NPL_ENE_BYTE_ADDITION_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(13, 0, payloads.padding_vars_ene_byte_addition);
    }
    
    return bv;
}


void npl_ene_byte_addition_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ene_byte_addition_static_table_action_e)bv.bits(21, 14).get_value();
    if (action == NPL_ENE_BYTE_ADDITION_STATIC_TABLE_ACTION_WRITE) {
        payloads.padding_vars_ene_byte_addition = bv.bits(13, 0).get_value();
    }
    
}


field_structure npl_ene_byte_addition_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ene_byte_addition_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ene_byte_addition_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ENE_BYTE_ADDITION_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.padding_vars_ene_byte_addition);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.padding_vars_ene_byte_addition", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_ene_byte_addition_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ene_byte_addition_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 24);
    bv.set_bits(23, 16, ene_encap_macro_id.pack());
    bv.set_bits(15, 0, ene_encap_tpid);
    return bv;
}

void npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t::unpack(bit_vector64_t bv)
{
    ene_encap_macro_id.unpack(bv.bits(23, 16));
    ene_encap_tpid = bv.bits(15, 0).get_value();
}

field_structure npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ene_encap_macro_id", ene_encap_macro_id.to_field_structure());
    fs_subfield.flat_value = to_hex_string(ene_encap_tpid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ene_encap_tpid", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ene_macro_code_tpid_profile_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(1, 0, macro_code);
    bv.set_bits(3, 2, tpid_profile);
    
    return bv;
}

void npl_ene_macro_code_tpid_profile_static_table_key_t::unpack(bit_vector64_t bv)
{
    macro_code = (npl_nh_ene_macro_code_e)bv.bits(1, 0).get_value();
    tpid_profile = bv.bits(3, 2).get_value();
    
}

field_structure npl_ene_macro_code_tpid_profile_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ene_macro_code_tpid_profile_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(macro_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_code", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(tpid_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tpid_profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ene_macro_code_tpid_profile_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ene_macro_code_tpid_profile_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ene_macro_code_tpid_profile_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_ENE_MACRO_CODE_TPID_PROFILE_STATIC_TABLE_ACTION_SET_VALUE) {
        bv.set_bits(23, 0, payloads.set_value.pack());
    }
    
    return bv;
}


void npl_ene_macro_code_tpid_profile_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ene_macro_code_tpid_profile_static_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_ENE_MACRO_CODE_TPID_PROFILE_STATIC_TABLE_ACTION_SET_VALUE) {
        payloads.set_value.unpack(bv.bits(23, 0));
    }
    
}


field_structure npl_ene_macro_code_tpid_profile_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ene_macro_code_tpid_profile_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ene_macro_code_tpid_profile_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ENE_MACRO_CODE_TPID_PROFILE_STATIC_TABLE_ACTION_SET_VALUE) {
        fs_result.subfields.emplace_back("set_value", payloads.set_value.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ene_macro_code_tpid_profile_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ene_macro_code_tpid_profile_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    bv.set_bits(2, 0, counter_offset.pack());
    return bv;
}

void npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t::unpack(bit_vector64_t bv)
{
    counter_offset.unpack(bv.bits(2, 0));
}

field_structure npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("counter_offset", counter_offset.to_field_structure());
    return fs_result;
}
std::string to_string(npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_erpp_fabric_counters_offset_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(1, 0, dp);
    bv.set_bits(4, 2, tc);
    bv.set_bits(5, 5, vce);
    
    return bv;
}

void npl_erpp_fabric_counters_offset_table_key_t::unpack(bit_vector64_t bv)
{
    dp = bv.bits(1, 0).get_value();
    tc = bv.bits(4, 2).get_value();
    vce = bv.bits(5, 5).get_value();
    
}

field_structure npl_erpp_fabric_counters_offset_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_erpp_fabric_counters_offset_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dp);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dp", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(vce);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vce", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_erpp_fabric_counters_offset_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_erpp_fabric_counters_offset_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_erpp_fabric_counters_offset_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_ERPP_FABRIC_COUNTERS_OFFSET_TABLE_ACTION_UPDATE_COUNTER_OFFSET) {
        bv.set_bits(2, 0, payloads.update_counter_offset.pack());
    }
    
    return bv;
}


void npl_erpp_fabric_counters_offset_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_erpp_fabric_counters_offset_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_ERPP_FABRIC_COUNTERS_OFFSET_TABLE_ACTION_UPDATE_COUNTER_OFFSET) {
        payloads.update_counter_offset.unpack(bv.bits(2, 0));
    }
    
}


field_structure npl_erpp_fabric_counters_offset_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_erpp_fabric_counters_offset_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_erpp_fabric_counters_offset_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ERPP_FABRIC_COUNTERS_OFFSET_TABLE_ACTION_UPDATE_COUNTER_OFFSET) {
        fs_result.subfields.emplace_back("update_counter_offset", payloads.update_counter_offset.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_erpp_fabric_counters_offset_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_erpp_fabric_counters_offset_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_erpp_fabric_counters_table_update_counters_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 21);
    bv.set_bits(20, 20, debug_conter_valid);
    bv.set_bits(19, 0, debug_counter_ptr.pack());
    return bv;
}

void npl_erpp_fabric_counters_table_update_counters_payload_t::unpack(bit_vector64_t bv)
{
    debug_conter_valid = bv.bits(20, 20).get_value();
    debug_counter_ptr.unpack(bv.bits(19, 0));
}

field_structure npl_erpp_fabric_counters_table_update_counters_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_erpp_fabric_counters_table_update_counters_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(debug_conter_valid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("debug_conter_valid", fs_subfield);
    
    fs_result.subfields.emplace_back("debug_counter_ptr", debug_counter_ptr.to_field_structure());
    return fs_result;
}
std::string to_string(npl_erpp_fabric_counters_table_update_counters_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_erpp_fabric_counters_table_update_counters_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_erpp_fabric_counters_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 21);
    
    bv.set_bits(8, 0, dest_oq);
    bv.set_bits(11, 9, dest_slice);
    bv.set_bits(20, 12, dest_device);
    
    return bv;
}

void npl_erpp_fabric_counters_table_key_t::unpack(bit_vector64_t bv)
{
    dest_oq = bv.bits(8, 0).get_value();
    dest_slice = bv.bits(11, 9).get_value();
    dest_device = bv.bits(20, 12).get_value();
    
}

field_structure npl_erpp_fabric_counters_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_erpp_fabric_counters_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dest_oq);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_oq", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dest_slice);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_slice", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dest_device);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_device", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_erpp_fabric_counters_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_erpp_fabric_counters_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_erpp_fabric_counters_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(28, 21, action);
    if (action == NPL_ERPP_FABRIC_COUNTERS_TABLE_ACTION_UPDATE_COUNTERS) {
        bv.set_bits(20, 0, payloads.update_counters.pack());
    }
    
    return bv;
}


void npl_erpp_fabric_counters_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_erpp_fabric_counters_table_action_e)bv.bits(28, 21).get_value();
    if (action == NPL_ERPP_FABRIC_COUNTERS_TABLE_ACTION_UPDATE_COUNTERS) {
        payloads.update_counters.unpack(bv.bits(20, 0));
    }
    
}


field_structure npl_erpp_fabric_counters_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_erpp_fabric_counters_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_erpp_fabric_counters_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ERPP_FABRIC_COUNTERS_TABLE_ACTION_UPDATE_COUNTERS) {
        fs_result.subfields.emplace_back("update_counters", payloads.update_counters.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_erpp_fabric_counters_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_erpp_fabric_counters_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_eth_meter_profile_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, qos_id);
    
    return bv;
}

void npl_eth_meter_profile_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    qos_id = bv.bits(3, 0).get_value();
    
}

field_structure npl_eth_meter_profile_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eth_meter_profile_mapping_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(qos_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("qos_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_eth_meter_profile_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_eth_meter_profile_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_eth_meter_profile_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_ETH_METER_PROFILE_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(3, 0, payloads.slp_qos_id);
    }
    
    return bv;
}


void npl_eth_meter_profile_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_eth_meter_profile_mapping_table_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_ETH_METER_PROFILE_MAPPING_TABLE_ACTION_WRITE) {
        payloads.slp_qos_id = bv.bits(3, 0).get_value();
    }
    
}


field_structure npl_eth_meter_profile_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eth_meter_profile_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_eth_meter_profile_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ETH_METER_PROFILE_MAPPING_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.slp_qos_id);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.slp_qos_id", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_eth_meter_profile_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_eth_meter_profile_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_eth_oam_set_da_mc2_static_table_set_da_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    bv.set_bits(12, 0, da);
    return bv;
}

void npl_eth_oam_set_da_mc2_static_table_set_da_payload_t::unpack(bit_vector64_t bv)
{
    da = bv.bits(12, 0).get_value();
}

field_structure npl_eth_oam_set_da_mc2_static_table_set_da_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eth_oam_set_da_mc2_static_table_set_da_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(da);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("da", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_eth_oam_set_da_mc2_static_table_set_da_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_eth_oam_set_da_mc2_static_table_set_da_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_eth_oam_set_da_mc2_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x1);
    
    return bv;
}

void npl_eth_oam_set_da_mc2_static_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_eth_oam_set_da_mc2_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eth_oam_set_da_mc2_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x1", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_eth_oam_set_da_mc2_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_eth_oam_set_da_mc2_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_eth_oam_set_da_mc2_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(20, 13, action);
    if (action == NPL_ETH_OAM_SET_DA_MC2_STATIC_TABLE_ACTION_SET_DA) {
        bv.set_bits(12, 0, payloads.set_da.pack());
    }
    
    return bv;
}


void npl_eth_oam_set_da_mc2_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_eth_oam_set_da_mc2_static_table_action_e)bv.bits(20, 13).get_value();
    if (action == NPL_ETH_OAM_SET_DA_MC2_STATIC_TABLE_ACTION_SET_DA) {
        payloads.set_da.unpack(bv.bits(12, 0));
    }
    
}


field_structure npl_eth_oam_set_da_mc2_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eth_oam_set_da_mc2_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_eth_oam_set_da_mc2_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ETH_OAM_SET_DA_MC2_STATIC_TABLE_ACTION_SET_DA) {
        fs_result.subfields.emplace_back("set_da", payloads.set_da.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_eth_oam_set_da_mc2_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_eth_oam_set_da_mc2_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_eth_oam_set_da_mc_static_table_set_da_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    bv.set_bits(31, 0, da);
    return bv;
}

void npl_eth_oam_set_da_mc_static_table_set_da_payload_t::unpack(bit_vector64_t bv)
{
    da = bv.bits(31, 0).get_value();
}

field_structure npl_eth_oam_set_da_mc_static_table_set_da_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eth_oam_set_da_mc_static_table_set_da_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(da);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("da", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_eth_oam_set_da_mc_static_table_set_da_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_eth_oam_set_da_mc_static_table_set_da_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_eth_oam_set_da_mc_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x1);
    
    return bv;
}

void npl_eth_oam_set_da_mc_static_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_eth_oam_set_da_mc_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eth_oam_set_da_mc_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x1", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_eth_oam_set_da_mc_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_eth_oam_set_da_mc_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_eth_oam_set_da_mc_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_ETH_OAM_SET_DA_MC_STATIC_TABLE_ACTION_SET_DA) {
        bv.set_bits(31, 0, payloads.set_da.pack());
    }
    
    return bv;
}


void npl_eth_oam_set_da_mc_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_eth_oam_set_da_mc_static_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_ETH_OAM_SET_DA_MC_STATIC_TABLE_ACTION_SET_DA) {
        payloads.set_da.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_eth_oam_set_da_mc_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eth_oam_set_da_mc_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_eth_oam_set_da_mc_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ETH_OAM_SET_DA_MC_STATIC_TABLE_ACTION_SET_DA) {
        fs_result.subfields.emplace_back("set_da", payloads.set_da.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_eth_oam_set_da_mc_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_eth_oam_set_da_mc_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_eth_rtf_conf_set_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(1, 0, rtf_step.pack());
    bv.set_bits(9, 2, lp_rtf_conf_set.pack());
    
    return bv;
}

void npl_eth_rtf_conf_set_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    rtf_step.unpack(bv.bits(1, 0));
    lp_rtf_conf_set.unpack(bv.bits(9, 2));
    
}

field_structure npl_eth_rtf_conf_set_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eth_rtf_conf_set_mapping_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("rtf_step", rtf_step.to_field_structure());
    fs_result.subfields.emplace_back("lp_rtf_conf_set", lp_rtf_conf_set.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_eth_rtf_conf_set_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_eth_rtf_conf_set_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_eth_rtf_conf_set_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(19, 12, action);
    if (action == NPL_ETH_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(11, 0, payloads.eth_rtf_iteration_prop.pack());
    }
    
    return bv;
}


void npl_eth_rtf_conf_set_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_eth_rtf_conf_set_mapping_table_action_e)bv.bits(19, 12).get_value();
    if (action == NPL_ETH_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
        payloads.eth_rtf_iteration_prop.unpack(bv.bits(11, 0));
    }
    
}


field_structure npl_eth_rtf_conf_set_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eth_rtf_conf_set_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_eth_rtf_conf_set_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_ETH_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.eth_rtf_iteration_prop", payloads.eth_rtf_iteration_prop.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_eth_rtf_conf_set_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_eth_rtf_conf_set_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_eve_byte_addition_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(2, 0, padding_vars_eve_16_14_);
    bv.set_bits(4, 3, padding_vars_eve_27_26_);
    
    return bv;
}

void npl_eve_byte_addition_static_table_key_t::unpack(bit_vector64_t bv)
{
    padding_vars_eve_16_14_ = bv.bits(2, 0).get_value();
    padding_vars_eve_27_26_ = bv.bits(4, 3).get_value();
    
}

field_structure npl_eve_byte_addition_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eve_byte_addition_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(padding_vars_eve_16_14_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("padding_vars_eve_16_14_", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(padding_vars_eve_27_26_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("padding_vars_eve_27_26_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_eve_byte_addition_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_eve_byte_addition_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_eve_byte_addition_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(21, 14, action);
    if (action == NPL_EVE_BYTE_ADDITION_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(13, 0, payloads.padding_vars_eve_byte_addition);
    }
    
    return bv;
}


void npl_eve_byte_addition_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_eve_byte_addition_static_table_action_e)bv.bits(21, 14).get_value();
    if (action == NPL_EVE_BYTE_ADDITION_STATIC_TABLE_ACTION_WRITE) {
        payloads.padding_vars_eve_byte_addition = bv.bits(13, 0).get_value();
    }
    
}


field_structure npl_eve_byte_addition_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eve_byte_addition_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_eve_byte_addition_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_EVE_BYTE_ADDITION_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.padding_vars_eve_byte_addition);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.padding_vars_eve_byte_addition", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_eve_byte_addition_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_eve_byte_addition_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_eve_to_ethernet_ene_static_table_set_value_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 24);
    bv.set_bits(23, 8, ene_encap_tpid);
    bv.set_bits(7, 0, ene_encap_macro_id.pack());
    return bv;
}

void npl_eve_to_ethernet_ene_static_table_set_value_payload_t::unpack(bit_vector64_t bv)
{
    ene_encap_tpid = bv.bits(23, 8).get_value();
    ene_encap_macro_id.unpack(bv.bits(7, 0));
}

field_structure npl_eve_to_ethernet_ene_static_table_set_value_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eve_to_ethernet_ene_static_table_set_value_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ene_encap_tpid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ene_encap_tpid", fs_subfield);
    
    fs_result.subfields.emplace_back("ene_encap_macro_id", ene_encap_macro_id.to_field_structure());
    return fs_result;
}
std::string to_string(npl_eve_to_ethernet_ene_static_table_set_value_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_eve_to_ethernet_ene_static_table_set_value_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_eve_to_ethernet_ene_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(4, 0, sub_type.pack());
    bv.set_bits(6, 5, main_type);
    
    return bv;
}

void npl_eve_to_ethernet_ene_static_table_key_t::unpack(bit_vector64_t bv)
{
    sub_type.unpack(bv.bits(4, 0));
    main_type = (npl_vlan_edit_command_main_type_e)bv.bits(6, 5).get_value();
    
}

field_structure npl_eve_to_ethernet_ene_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eve_to_ethernet_ene_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("sub_type", sub_type.to_field_structure());
    fs_subfield.flat_value = npl_enum_to_string(main_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("main_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_eve_to_ethernet_ene_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_eve_to_ethernet_ene_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_eve_to_ethernet_ene_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_EVE_TO_ETHERNET_ENE_STATIC_TABLE_ACTION_SET_VALUE) {
        bv.set_bits(23, 0, payloads.set_value.pack());
    }
    
    return bv;
}


void npl_eve_to_ethernet_ene_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_eve_to_ethernet_ene_static_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_EVE_TO_ETHERNET_ENE_STATIC_TABLE_ACTION_SET_VALUE) {
        payloads.set_value.unpack(bv.bits(23, 0));
    }
    
}


field_structure npl_eve_to_ethernet_ene_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_eve_to_ethernet_ene_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_eve_to_ethernet_ene_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_EVE_TO_ETHERNET_ENE_STATIC_TABLE_ACTION_SET_VALUE) {
        fs_result.subfields.emplace_back("set_value", payloads.set_value.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_eve_to_ethernet_ene_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_eve_to_ethernet_ene_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_event_queue_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(9, 0, event_queue_address.pack());
    
    return bv;
}

void npl_event_queue_table_key_t::unpack(bit_vector64_t bv)
{
    event_queue_address.unpack(bv.bits(9, 0));
    
}

field_structure npl_event_queue_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_event_queue_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("event_queue_address", event_queue_address.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_event_queue_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_event_queue_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_event_queue_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(68, 61, action);
    if (action == NPL_EVENT_QUEUE_TABLE_ACTION_WRITE) {
        bv.set_bits(60, 0, payloads.event_queue_result.pack());
    }
    
    return bv;
}


void npl_event_queue_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_event_queue_table_action_e)bv.bits(68, 61).get_value();
    if (action == NPL_EVENT_QUEUE_TABLE_ACTION_WRITE) {
        payloads.event_queue_result.unpack(bv.bits(60, 0));
    }
    
}


field_structure npl_event_queue_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_event_queue_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_event_queue_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_EVENT_QUEUE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.event_queue_result", payloads.event_queue_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_event_queue_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_event_queue_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_external_aux_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(11, 0, aux_table_key.pack());
    
    return bv;
}

void npl_external_aux_table_key_t::unpack(bit_vector64_t bv)
{
    aux_table_key.unpack(bv.bits(11, 0));
    
}

field_structure npl_external_aux_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_external_aux_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("aux_table_key", aux_table_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_external_aux_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_external_aux_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_external_aux_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(167, 160, action);
    if (action == NPL_EXTERNAL_AUX_TABLE_ACTION_WRITE) {
        bv.set_bits(159, 0, payloads.aux_table_result.pack());
    }
    
    return bv;
}


void npl_external_aux_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_external_aux_table_action_e)bv.bits(167, 160).get_value();
    if (action == NPL_EXTERNAL_AUX_TABLE_ACTION_WRITE) {
        payloads.aux_table_result.unpack(bv.bits(159, 0));
    }
    
}


field_structure npl_external_aux_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_external_aux_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_external_aux_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_EXTERNAL_AUX_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.aux_table_result", payloads.aux_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_external_aux_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_external_aux_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_and_tm_header_size_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(6, 0, npuh_size);
    bv.set_bits(8, 7, tm_header_type);
    bv.set_bits(12, 9, fabric_header_type);
    
    return bv;
}

void npl_fabric_and_tm_header_size_static_table_key_t::unpack(bit_vector64_t bv)
{
    npuh_size = bv.bits(6, 0).get_value();
    tm_header_type = (npl_tm_header_type_e)bv.bits(8, 7).get_value();
    fabric_header_type = (npl_fabric_header_type_e)bv.bits(12, 9).get_value();
    
}

field_structure npl_fabric_and_tm_header_size_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_and_tm_header_size_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(npuh_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npuh_size", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(tm_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tm_header_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(fabric_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fabric_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_and_tm_header_size_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_and_tm_header_size_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_and_tm_header_size_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(13, 6, action);
    if (action == NPL_FABRIC_AND_TM_HEADER_SIZE_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(5, 0, payloads.fabric_tm_npu_headers_size);
    }
    
    return bv;
}


void npl_fabric_and_tm_header_size_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_and_tm_header_size_static_table_action_e)bv.bits(13, 6).get_value();
    if (action == NPL_FABRIC_AND_TM_HEADER_SIZE_STATIC_TABLE_ACTION_WRITE) {
        payloads.fabric_tm_npu_headers_size = bv.bits(5, 0).get_value();
    }
    
}


field_structure npl_fabric_and_tm_header_size_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_and_tm_header_size_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_and_tm_header_size_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_AND_TM_HEADER_SIZE_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.fabric_tm_npu_headers_size);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.fabric_tm_npu_headers_size", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_and_tm_header_size_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_and_tm_header_size_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_header_ene_macro_table_update_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    bv.set_bits(7, 0, ene_macro_id.pack());
    return bv;
}

void npl_fabric_header_ene_macro_table_update_payload_t::unpack(bit_vector64_t bv)
{
    ene_macro_id.unpack(bv.bits(7, 0));
}

field_structure npl_fabric_header_ene_macro_table_update_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_header_ene_macro_table_update_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ene_macro_id", ene_macro_id.to_field_structure());
    return fs_result;
}
std::string to_string(npl_fabric_header_ene_macro_table_update_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_header_ene_macro_table_update_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_header_ene_macro_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, fabric_header_type);
    
    return bv;
}

void npl_fabric_header_ene_macro_table_key_t::unpack(bit_vector64_t bv)
{
    fabric_header_type = (npl_fabric_header_type_e)bv.bits(3, 0).get_value();
    
}

field_structure npl_fabric_header_ene_macro_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_header_ene_macro_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(fabric_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fabric_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_header_ene_macro_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_header_ene_macro_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_header_ene_macro_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_FABRIC_HEADER_ENE_MACRO_TABLE_ACTION_UPDATE) {
        bv.set_bits(7, 0, payloads.update.pack());
    }
    
    return bv;
}


void npl_fabric_header_ene_macro_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_header_ene_macro_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_FABRIC_HEADER_ENE_MACRO_TABLE_ACTION_UPDATE) {
        payloads.update.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_fabric_header_ene_macro_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_header_ene_macro_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_header_ene_macro_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_HEADER_ENE_MACRO_TABLE_ACTION_UPDATE) {
        fs_result.subfields.emplace_back("update", payloads.update.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_header_ene_macro_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_header_ene_macro_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_header_types_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, fabric_header_type);
    
    return bv;
}

void npl_fabric_header_types_static_table_key_t::unpack(bit_vector64_t bv)
{
    fabric_header_type = (npl_fabric_header_type_e)bv.bits(3, 0).get_value();
    
}

field_structure npl_fabric_header_types_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_header_types_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(fabric_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fabric_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_header_types_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_header_types_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_header_types_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_FABRIC_HEADER_TYPES_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.fabric_header_type_ok.pack());
    }
    
    return bv;
}


void npl_fabric_header_types_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_header_types_static_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_FABRIC_HEADER_TYPES_STATIC_TABLE_ACTION_WRITE) {
        payloads.fabric_header_type_ok.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_fabric_header_types_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_header_types_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_header_types_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_HEADER_TYPES_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.fabric_header_type_ok", payloads.fabric_header_type_ok.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_header_types_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_header_types_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_headers_type_table_update_fabric_local_vars_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    bv.set_bits(3, 0, fabric_header_type);
    return bv;
}

void npl_fabric_headers_type_table_update_fabric_local_vars_payload_t::unpack(bit_vector64_t bv)
{
    fabric_header_type = (npl_fabric_header_type_e)bv.bits(3, 0).get_value();
}

field_structure npl_fabric_headers_type_table_update_fabric_local_vars_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_headers_type_table_update_fabric_local_vars_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(fabric_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fabric_header_type", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_fabric_headers_type_table_update_fabric_local_vars_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_headers_type_table_update_fabric_local_vars_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_headers_type_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(0, 0, start_packing);
    bv.set_bits(1, 1, plb_header_type);
    bv.set_bits(5, 2, initial_fabric_header_type);
    
    return bv;
}

void npl_fabric_headers_type_table_key_t::unpack(bit_vector64_t bv)
{
    start_packing = bv.bits(0, 0).get_value();
    plb_header_type = (npl_plb_header_type_e)bv.bits(1, 1).get_value();
    initial_fabric_header_type = (npl_fabric_header_type_e)bv.bits(5, 2).get_value();
    
}

field_structure npl_fabric_headers_type_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_headers_type_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(start_packing);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("start_packing", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(plb_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("plb_header_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(initial_fabric_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("initial_fabric_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_headers_type_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_headers_type_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_headers_type_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_FABRIC_HEADERS_TYPE_TABLE_ACTION_UPDATE_FABRIC_LOCAL_VARS) {
        bv.set_bits(3, 0, payloads.update_fabric_local_vars.pack());
    }
    
    return bv;
}


void npl_fabric_headers_type_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_headers_type_table_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_FABRIC_HEADERS_TYPE_TABLE_ACTION_UPDATE_FABRIC_LOCAL_VARS) {
        payloads.update_fabric_local_vars.unpack(bv.bits(3, 0));
    }
    
}


field_structure npl_fabric_headers_type_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_headers_type_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_headers_type_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_HEADERS_TYPE_TABLE_ACTION_UPDATE_FABRIC_LOCAL_VARS) {
        fs_result.subfields.emplace_back("update_fabric_local_vars", payloads.update_fabric_local_vars.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_headers_type_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_headers_type_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_init_cfg_update_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    bv.set_bits(11, 11, fabric_init_cfg_hit_.pack());
    bv.set_bits(10, 0, fabric_cfg_.pack());
    return bv;
}

void npl_fabric_init_cfg_update_payload_t::unpack(bit_vector64_t bv)
{
    fabric_init_cfg_hit_.unpack(bv.bits(11, 11));
    fabric_cfg_.unpack(bv.bits(10, 0));
}

field_structure npl_fabric_init_cfg_update_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_init_cfg_update_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("fabric_init_cfg_hit_", fabric_init_cfg_hit_.to_field_structure());
    fs_result.subfields.emplace_back("fabric_cfg_", fabric_cfg_.to_field_structure());
    return fs_result;
}
std::string to_string(npl_fabric_init_cfg_update_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_init_cfg_update_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_init_cfg_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, ser);
    
    return bv;
}

void npl_fabric_init_cfg_key_t::unpack(bit_vector64_t bv)
{
    ser = bv.bits(0, 0).get_value();
    
}

field_structure npl_fabric_init_cfg_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_init_cfg_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ser);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ser", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_init_cfg_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_init_cfg_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_init_cfg_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(19, 12, action);
    if (action == NPL_FABRIC_INIT_CFG_ACTION_UPDATE) {
        bv.set_bits(11, 0, payloads.update.pack());
    }
    
    return bv;
}


void npl_fabric_init_cfg_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_init_cfg_action_e)bv.bits(19, 12).get_value();
    if (action == NPL_FABRIC_INIT_CFG_ACTION_UPDATE) {
        payloads.update.unpack(bv.bits(11, 0));
    }
    
}


field_structure npl_fabric_init_cfg_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_init_cfg_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_init_cfg_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_INIT_CFG_ACTION_UPDATE) {
        fs_result.subfields.emplace_back("update", payloads.update.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_init_cfg_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_init_cfg_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 9, is_inject_pkt);
    bv.set_bits(8, 8, is_network_pkt);
    bv.set_bits(7, 7, ene_with_soft_npuh);
    bv.set_bits(6, 0, npuh_size);
    return bv;
}

void npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t::unpack(bit_vector64_t bv)
{
    is_inject_pkt = bv.bits(9, 9).get_value();
    is_network_pkt = bv.bits(8, 8).get_value();
    ene_with_soft_npuh = bv.bits(7, 7).get_value();
    npuh_size = bv.bits(6, 0).get_value();
}

field_structure npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(is_inject_pkt);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_inject_pkt", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_network_pkt);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_network_pkt", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ene_with_soft_npuh);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ene_with_soft_npuh", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npuh_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npuh_size", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_npuh_size_calculation_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(0, 0, packet_tx_npu_header_is_inject_up.pack());
    bv.set_bits(4, 1, packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type);
    bv.set_bits(8, 5, packet_tx_npu_header_fwd_header_type);
    bv.set_bits(12, 9, device_tx_cud_msb_4bits);
    
    return bv;
}

void npl_fabric_npuh_size_calculation_static_table_key_t::unpack(bit_vector64_t bv)
{
    packet_tx_npu_header_is_inject_up.unpack(bv.bits(0, 0));
    packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type = (npl_npu_mirror_or_redirect_encap_type_e)bv.bits(4, 1).get_value();
    packet_tx_npu_header_fwd_header_type = (npl_fwd_header_type_e)bv.bits(8, 5).get_value();
    device_tx_cud_msb_4bits = bv.bits(12, 9).get_value();
    
}

field_structure npl_fabric_npuh_size_calculation_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_npuh_size_calculation_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("packet_tx_npu_header_is_inject_up", packet_tx_npu_header_is_inject_up.to_field_structure());
    fs_subfield.flat_value = npl_enum_to_string(packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(packet_tx_npu_header_fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_tx_npu_header_fwd_header_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(device_tx_cud_msb_4bits);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("device_tx_cud_msb_4bits", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_npuh_size_calculation_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_npuh_size_calculation_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_npuh_size_calculation_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_FABRIC_NPUH_SIZE_CALCULATION_STATIC_TABLE_ACTION_UPDATE_NPUH_SIZE) {
        bv.set_bits(9, 0, payloads.update_npuh_size.pack());
    }
    
    return bv;
}


void npl_fabric_npuh_size_calculation_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_npuh_size_calculation_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_FABRIC_NPUH_SIZE_CALCULATION_STATIC_TABLE_ACTION_UPDATE_NPUH_SIZE) {
        payloads.update_npuh_size.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_fabric_npuh_size_calculation_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_npuh_size_calculation_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_npuh_size_calculation_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_NPUH_SIZE_CALCULATION_STATIC_TABLE_ACTION_UPDATE_NPUH_SIZE) {
        fs_result.subfields.emplace_back("update_npuh_size", payloads.update_npuh_size.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_npuh_size_calculation_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_npuh_size_calculation_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_out_color_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, out_color);
    
    return bv;
}

void npl_fabric_out_color_map_table_key_t::unpack(bit_vector64_t bv)
{
    out_color = bv.bits(1, 0).get_value();
    
}

field_structure npl_fabric_out_color_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_out_color_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(out_color);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("out_color", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_out_color_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_out_color_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_out_color_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(13, 6, action);
    if (action == NPL_FABRIC_OUT_COLOR_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(5, 0, payloads.dp);
    }
    
    return bv;
}


void npl_fabric_out_color_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_out_color_map_table_action_e)bv.bits(13, 6).get_value();
    if (action == NPL_FABRIC_OUT_COLOR_MAP_TABLE_ACTION_WRITE) {
        payloads.dp = bv.bits(5, 0).get_value();
    }
    
}


field_structure npl_fabric_out_color_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_out_color_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_out_color_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_OUT_COLOR_MAP_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.dp);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.dp", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_out_color_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_out_color_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, counter.pack());
    return bv;
}

void npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t::unpack(bit_vector64_t bv)
{
    counter.unpack(bv.bits(19, 0));
}

field_structure npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("counter", counter.to_field_structure());
    return fs_result;
}
std::string to_string(npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_rx_fwd_error_handling_counter_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(2, 0, error_code);
    bv.set_bits(3, 3, ser);
    
    return bv;
}

void npl_fabric_rx_fwd_error_handling_counter_table_key_t::unpack(bit_vector64_t bv)
{
    error_code = bv.bits(2, 0).get_value();
    ser = bv.bits(3, 3).get_value();
    
}

field_structure npl_fabric_rx_fwd_error_handling_counter_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_fwd_error_handling_counter_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(error_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("error_code", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ser);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ser", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_rx_fwd_error_handling_counter_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_rx_fwd_error_handling_counter_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_rx_fwd_error_handling_counter_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_FABRIC_RX_FWD_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        bv.set_bits(19, 0, payloads.update_result.pack());
    }
    
    return bv;
}


void npl_fabric_rx_fwd_error_handling_counter_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_rx_fwd_error_handling_counter_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_FABRIC_RX_FWD_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        payloads.update_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_fabric_rx_fwd_error_handling_counter_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_fwd_error_handling_counter_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_rx_fwd_error_handling_counter_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_RX_FWD_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        fs_result.subfields.emplace_back("update_result", payloads.update_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_rx_fwd_error_handling_counter_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_rx_fwd_error_handling_counter_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, destination);
    return bv;
}

void npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t::unpack(bit_vector64_t bv)
{
    destination = bv.bits(19, 0).get_value();
}

field_structure npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("destination", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_rx_fwd_error_handling_destination_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(2, 0, error_code);
    bv.set_bits(3, 3, ser);
    
    return bv;
}

void npl_fabric_rx_fwd_error_handling_destination_table_key_t::unpack(bit_vector64_t bv)
{
    error_code = bv.bits(2, 0).get_value();
    ser = bv.bits(3, 3).get_value();
    
}

field_structure npl_fabric_rx_fwd_error_handling_destination_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_fwd_error_handling_destination_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(error_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("error_code", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ser);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ser", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_rx_fwd_error_handling_destination_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_rx_fwd_error_handling_destination_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_rx_fwd_error_handling_destination_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_FABRIC_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        bv.set_bits(19, 0, payloads.update_result.pack());
    }
    
    return bv;
}


void npl_fabric_rx_fwd_error_handling_destination_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_rx_fwd_error_handling_destination_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_FABRIC_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        payloads.update_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_fabric_rx_fwd_error_handling_destination_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_fwd_error_handling_destination_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_rx_fwd_error_handling_destination_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        fs_result.subfields.emplace_back("update_result", payloads.update_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_rx_fwd_error_handling_destination_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_rx_fwd_error_handling_destination_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, counter.pack());
    return bv;
}

void npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t::unpack(bit_vector64_t bv)
{
    counter.unpack(bv.bits(19, 0));
}

field_structure npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("counter", counter.to_field_structure());
    return fs_result;
}
std::string to_string(npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_rx_term_error_handling_counter_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, ser);
    
    return bv;
}

void npl_fabric_rx_term_error_handling_counter_table_key_t::unpack(bit_vector64_t bv)
{
    ser = bv.bits(0, 0).get_value();
    
}

field_structure npl_fabric_rx_term_error_handling_counter_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_term_error_handling_counter_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ser);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ser", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_rx_term_error_handling_counter_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_rx_term_error_handling_counter_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_rx_term_error_handling_counter_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_FABRIC_RX_TERM_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        bv.set_bits(19, 0, payloads.update_result.pack());
    }
    
    return bv;
}


void npl_fabric_rx_term_error_handling_counter_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_rx_term_error_handling_counter_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_FABRIC_RX_TERM_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        payloads.update_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_fabric_rx_term_error_handling_counter_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_term_error_handling_counter_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_rx_term_error_handling_counter_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_RX_TERM_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        fs_result.subfields.emplace_back("update_result", payloads.update_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_rx_term_error_handling_counter_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_rx_term_error_handling_counter_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, destination);
    return bv;
}

void npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t::unpack(bit_vector64_t bv)
{
    destination = bv.bits(19, 0).get_value();
}

field_structure npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("destination", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_rx_term_error_handling_destination_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, ser);
    
    return bv;
}

void npl_fabric_rx_term_error_handling_destination_table_key_t::unpack(bit_vector64_t bv)
{
    ser = bv.bits(0, 0).get_value();
    
}

field_structure npl_fabric_rx_term_error_handling_destination_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_term_error_handling_destination_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ser);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ser", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_rx_term_error_handling_destination_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_rx_term_error_handling_destination_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_rx_term_error_handling_destination_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_FABRIC_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        bv.set_bits(19, 0, payloads.update_result.pack());
    }
    
    return bv;
}


void npl_fabric_rx_term_error_handling_destination_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_rx_term_error_handling_destination_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_FABRIC_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        payloads.update_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_fabric_rx_term_error_handling_destination_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_rx_term_error_handling_destination_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_rx_term_error_handling_destination_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        fs_result.subfields.emplace_back("update_result", payloads.update_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_rx_term_error_handling_destination_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_rx_term_error_handling_destination_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_scaled_mc_map_to_netork_slice_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, smcid_lsb);
    
    return bv;
}

void npl_fabric_scaled_mc_map_to_netork_slice_static_table_key_t::unpack(bit_vector64_t bv)
{
    smcid_lsb = bv.bits(3, 0).get_value();
    
}

field_structure npl_fabric_scaled_mc_map_to_netork_slice_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_scaled_mc_map_to_netork_slice_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(smcid_lsb);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("smcid_lsb", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_scaled_mc_map_to_netork_slice_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_scaled_mc_map_to_netork_slice_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_scaled_mc_map_to_netork_slice_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_FABRIC_SCALED_MC_MAP_TO_NETORK_SLICE_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.network_slice_mcid.pack());
    }
    
    return bv;
}


void npl_fabric_scaled_mc_map_to_netork_slice_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_scaled_mc_map_to_netork_slice_static_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_FABRIC_SCALED_MC_MAP_TO_NETORK_SLICE_STATIC_TABLE_ACTION_WRITE) {
        payloads.network_slice_mcid.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_fabric_scaled_mc_map_to_netork_slice_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_scaled_mc_map_to_netork_slice_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_scaled_mc_map_to_netork_slice_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_SCALED_MC_MAP_TO_NETORK_SLICE_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.network_slice_mcid", payloads.network_slice_mcid.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_scaled_mc_map_to_netork_slice_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_scaled_mc_map_to_netork_slice_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_smcid_threshold_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, dummy);
    
    return bv;
}

void npl_fabric_smcid_threshold_table_key_t::unpack(bit_vector64_t bv)
{
    dummy = bv.bits(0, 0).get_value();
    
}

field_structure npl_fabric_smcid_threshold_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_smcid_threshold_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dummy);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dummy", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_smcid_threshold_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_smcid_threshold_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_smcid_threshold_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_FABRIC_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.smcid_threshold.pack());
    }
    
    return bv;
}


void npl_fabric_smcid_threshold_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_smcid_threshold_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_FABRIC_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
        payloads.smcid_threshold.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_fabric_smcid_threshold_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_smcid_threshold_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_smcid_threshold_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.smcid_threshold", payloads.smcid_threshold.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_smcid_threshold_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_smcid_threshold_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_term_error_checker_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(2, 0, mismatch_indications.pack());
    bv.set_bits(3, 3, fabric_init_cfg_table_hit.pack());
    bv.set_bits(4, 4, fabric_header_type_ok.pack());
    bv.set_bits(5, 5, is_keepalive);
    
    return bv;
}

void npl_fabric_term_error_checker_static_table_key_t::unpack(bit_vector64_t bv)
{
    mismatch_indications.unpack(bv.bits(2, 0));
    fabric_init_cfg_table_hit.unpack(bv.bits(3, 3));
    fabric_header_type_ok.unpack(bv.bits(4, 4));
    is_keepalive = bv.bits(5, 5).get_value();
    
}

field_structure npl_fabric_term_error_checker_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_term_error_checker_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("mismatch_indications", mismatch_indications.to_field_structure());
    fs_result.subfields.emplace_back("fabric_init_cfg_table_hit", fabric_init_cfg_table_hit.to_field_structure());
    fs_result.subfields.emplace_back("fabric_header_type_ok", fabric_header_type_ok.to_field_structure());
    fs_subfield.flat_value = to_hex_string(is_keepalive);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_keepalive", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_term_error_checker_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_term_error_checker_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_term_error_checker_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_FABRIC_TERM_ERROR_CHECKER_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.pd_fabric_error_event_error_code);
    }
    
    return bv;
}


void npl_fabric_term_error_checker_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_term_error_checker_static_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_FABRIC_TERM_ERROR_CHECKER_STATIC_TABLE_ACTION_WRITE) {
        payloads.pd_fabric_error_event_error_code = bv.bits(2, 0).get_value();
    }
    
}


field_structure npl_fabric_term_error_checker_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_term_error_checker_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_term_error_checker_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_TERM_ERROR_CHECKER_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.pd_fabric_error_event_error_code);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.pd_fabric_error_event_error_code", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_term_error_checker_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_term_error_checker_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    bv.set_bits(10, 10, ingress_multicast);
    bv.set_bits(9, 8, tm_header_type);
    bv.set_bits(7, 4, initial_fabric_header_type);
    bv.set_bits(3, 0, ctrl.pack());
    return bv;
}

void npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t::unpack(bit_vector64_t bv)
{
    ingress_multicast = bv.bits(10, 10).get_value();
    tm_header_type = (npl_tm_header_type_e)bv.bits(9, 8).get_value();
    initial_fabric_header_type = (npl_fabric_header_type_e)bv.bits(7, 4).get_value();
    ctrl.unpack(bv.bits(3, 0));
}

field_structure npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ingress_multicast);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ingress_multicast", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(tm_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tm_header_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(initial_fabric_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("initial_fabric_header_type", fs_subfield);
    
    fs_result.subfields.emplace_back("ctrl", ctrl.to_field_structure());
    return fs_result;
}
std::string to_string(npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_tm_headers_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(3, 0, tx_cud_prefix);
    bv.set_bits(6, 4, fabric_oq_type);
    
    return bv;
}

void npl_fabric_tm_headers_table_key_t::unpack(bit_vector64_t bv)
{
    tx_cud_prefix = bv.bits(3, 0).get_value();
    fabric_oq_type = (npl_fabric_oq_type_e)bv.bits(6, 4).get_value();
    
}

field_structure npl_fabric_tm_headers_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_tm_headers_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tx_cud_prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_cud_prefix", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(fabric_oq_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fabric_oq_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_tm_headers_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_tm_headers_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_tm_headers_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(18, 11, action);
    if (action == NPL_FABRIC_TM_HEADERS_TABLE_ACTION_UPDATE_FABRIC_LOCAL_VARS) {
        bv.set_bits(10, 0, payloads.update_fabric_local_vars.pack());
    }
    
    return bv;
}


void npl_fabric_tm_headers_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_tm_headers_table_action_e)bv.bits(18, 11).get_value();
    if (action == NPL_FABRIC_TM_HEADERS_TABLE_ACTION_UPDATE_FABRIC_LOCAL_VARS) {
        payloads.update_fabric_local_vars.unpack(bv.bits(10, 0));
    }
    
}


field_structure npl_fabric_tm_headers_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_tm_headers_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_tm_headers_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_TM_HEADERS_TABLE_ACTION_UPDATE_FABRIC_LOCAL_VARS) {
        fs_result.subfields.emplace_back("update_fabric_local_vars", payloads.update_fabric_local_vars.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_tm_headers_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_tm_headers_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fabric_transmit_error_checker_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(0, 0, pkt_issu);
    bv.set_bits(1, 1, expected_issu);
    bv.set_bits(2, 2, fabric_init_cfg_table_hit.pack());
    bv.set_bits(6, 3, npu_header);
    
    return bv;
}

void npl_fabric_transmit_error_checker_static_table_key_t::unpack(bit_vector64_t bv)
{
    pkt_issu = bv.bits(0, 0).get_value();
    expected_issu = bv.bits(1, 1).get_value();
    fabric_init_cfg_table_hit.unpack(bv.bits(2, 2));
    npu_header = bv.bits(6, 3).get_value();
    
}

field_structure npl_fabric_transmit_error_checker_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_transmit_error_checker_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pkt_issu);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pkt_issu", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(expected_issu);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("expected_issu", fs_subfield);
    
    fs_result.subfields.emplace_back("fabric_init_cfg_table_hit", fabric_init_cfg_table_hit.to_field_structure());
    fs_subfield.flat_value = to_hex_string(npu_header);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npu_header", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fabric_transmit_error_checker_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fabric_transmit_error_checker_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fabric_transmit_error_checker_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_FABRIC_TRANSMIT_ERROR_CHECKER_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.fabric_error_event_error_code);
    }
    
    return bv;
}


void npl_fabric_transmit_error_checker_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fabric_transmit_error_checker_static_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_FABRIC_TRANSMIT_ERROR_CHECKER_STATIC_TABLE_ACTION_WRITE) {
        payloads.fabric_error_event_error_code = bv.bits(2, 0).get_value();
    }
    
}


field_structure npl_fabric_transmit_error_checker_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fabric_transmit_error_checker_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fabric_transmit_error_checker_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FABRIC_TRANSMIT_ERROR_CHECKER_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.fabric_error_event_error_code);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.fabric_error_event_error_code", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_fabric_transmit_error_checker_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fabric_transmit_error_checker_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fb_link_2_link_bundle_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(6, 0, fe_uc_random_fb_link.pack());
    
    return bv;
}

void npl_fb_link_2_link_bundle_table_key_t::unpack(bit_vector64_t bv)
{
    fe_uc_random_fb_link.unpack(bv.bits(6, 0));
    
}

field_structure npl_fb_link_2_link_bundle_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fb_link_2_link_bundle_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("fe_uc_random_fb_link", fe_uc_random_fb_link.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_fb_link_2_link_bundle_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fb_link_2_link_bundle_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fb_link_2_link_bundle_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(13, 6, action);
    if (action == NPL_FB_LINK_2_LINK_BUNDLE_TABLE_ACTION_WRITE) {
        bv.set_bits(5, 0, payloads.fb_link_2_link_bundle_table_result.pack());
    }
    
    return bv;
}


void npl_fb_link_2_link_bundle_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fb_link_2_link_bundle_table_action_e)bv.bits(13, 6).get_value();
    if (action == NPL_FB_LINK_2_LINK_BUNDLE_TABLE_ACTION_WRITE) {
        payloads.fb_link_2_link_bundle_table_result.unpack(bv.bits(5, 0));
    }
    
}


field_structure npl_fb_link_2_link_bundle_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fb_link_2_link_bundle_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fb_link_2_link_bundle_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FB_LINK_2_LINK_BUNDLE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.fb_link_2_link_bundle_table_result", payloads.fb_link_2_link_bundle_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fb_link_2_link_bundle_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fb_link_2_link_bundle_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fe_broadcast_bmp_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(6, 0, random_bc_bmp_entry.pack());
    
    return bv;
}

void npl_fe_broadcast_bmp_table_key_t::unpack(bit_vector64_t bv)
{
    random_bc_bmp_entry.unpack(bv.bits(6, 0));
    
}

field_structure npl_fe_broadcast_bmp_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fe_broadcast_bmp_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("random_bc_bmp_entry", random_bc_bmp_entry.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_fe_broadcast_bmp_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fe_broadcast_bmp_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_fe_broadcast_bmp_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(115, 108, action);
    if (action == NPL_FE_BROADCAST_BMP_TABLE_ACTION_WRITE) {
        bv.set_bits(107, 0, payloads.fe_broadcast_bmp_table_result.pack());
    }
    
    return bv;
}


void npl_fe_broadcast_bmp_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_fe_broadcast_bmp_table_action_e)bv.bits(115, 108).get_value();
    if (action == NPL_FE_BROADCAST_BMP_TABLE_ACTION_WRITE) {
        payloads.fe_broadcast_bmp_table_result.unpack(bv.bits(107, 0));
    }
    
}


field_structure npl_fe_broadcast_bmp_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fe_broadcast_bmp_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fe_broadcast_bmp_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FE_BROADCAST_BMP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.fe_broadcast_bmp_table_result", payloads.fe_broadcast_bmp_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fe_broadcast_bmp_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fe_broadcast_bmp_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(6, 0, fe_uc_bundle_selected_link.pack());
    
    return bv;
}

void npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_key_t::unpack(bit_vector64_t bv)
{
    fe_uc_bundle_selected_link.unpack(bv.bits(6, 0));
    
}

field_structure npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("fe_uc_bundle_selected_link", fe_uc_bundle_selected_link.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(16, 9, action);
    if (action == NPL_FE_RLB_UC_TX_FB_LINK_TO_OQ_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(8, 0, payloads.fe_rlb_uc_tx_fb_link_to_oq_map_table_result.pack());
    }
    
    return bv;
}


void npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_action_e)bv.bits(16, 9).get_value();
    if (action == NPL_FE_RLB_UC_TX_FB_LINK_TO_OQ_MAP_TABLE_ACTION_WRITE) {
        payloads.fe_rlb_uc_tx_fb_link_to_oq_map_table_result.unpack(bv.bits(8, 0));
    }
    
}


field_structure npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FE_RLB_UC_TX_FB_LINK_TO_OQ_MAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.fe_rlb_uc_tx_fb_link_to_oq_map_table_result", payloads.fe_rlb_uc_tx_fb_link_to_oq_map_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fe_smcid_threshold_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, dummy);
    
    return bv;
}

void npl_fe_smcid_threshold_table_key_t::unpack(bit_vector64_t bv)
{
    dummy = bv.bits(0, 0).get_value();
    
}

field_structure npl_fe_smcid_threshold_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fe_smcid_threshold_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dummy);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dummy", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fe_smcid_threshold_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fe_smcid_threshold_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fe_smcid_threshold_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_FE_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.smcid_threshold.pack());
    }
    
    return bv;
}


void npl_fe_smcid_threshold_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fe_smcid_threshold_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_FE_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
        payloads.smcid_threshold.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_fe_smcid_threshold_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fe_smcid_threshold_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fe_smcid_threshold_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FE_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.smcid_threshold", payloads.smcid_threshold.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fe_smcid_threshold_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fe_smcid_threshold_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fe_smcid_to_mcid_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 15);
    
    bv.set_bits(14, 0, system_mcid_17_3);
    
    return bv;
}

void npl_fe_smcid_to_mcid_table_key_t::unpack(bit_vector64_t bv)
{
    system_mcid_17_3 = bv.bits(14, 0).get_value();
    
}

field_structure npl_fe_smcid_to_mcid_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fe_smcid_to_mcid_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(system_mcid_17_3);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("system_mcid_17_3", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fe_smcid_to_mcid_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fe_smcid_to_mcid_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_fe_smcid_to_mcid_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(135, 128, action);
    if (action == NPL_FE_SMCID_TO_MCID_TABLE_ACTION_WRITE) {
        bv.set_bits(127, 0, payloads.mcid_array.pack());
    }
    
    return bv;
}


void npl_fe_smcid_to_mcid_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_fe_smcid_to_mcid_table_action_e)bv.bits(135, 128).get_value();
    if (action == NPL_FE_SMCID_TO_MCID_TABLE_ACTION_WRITE) {
        payloads.mcid_array.unpack(bv.bits(127, 0));
    }
    
}


field_structure npl_fe_smcid_to_mcid_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fe_smcid_to_mcid_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fe_smcid_to_mcid_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FE_SMCID_TO_MCID_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mcid_array", payloads.mcid_array.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fe_smcid_to_mcid_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fe_smcid_to_mcid_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fe_uc_link_bundle_desc_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, fb_link_2_link_bundle_table_result_bundle_num);
    
    return bv;
}

void npl_fe_uc_link_bundle_desc_table_key_t::unpack(bit_vector64_t bv)
{
    fb_link_2_link_bundle_table_result_bundle_num = bv.bits(5, 0).get_value();
    
}

field_structure npl_fe_uc_link_bundle_desc_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fe_uc_link_bundle_desc_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(fb_link_2_link_bundle_table_result_bundle_num);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fb_link_2_link_bundle_table_result_bundle_num", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fe_uc_link_bundle_desc_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fe_uc_link_bundle_desc_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_fe_uc_link_bundle_desc_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(95, 88, action);
    if (action == NPL_FE_UC_LINK_BUNDLE_DESC_TABLE_ACTION_WRITE) {
        bv.set_bits(87, 0, payloads.fe_uc_link_bundle_desc_table_result.pack());
    }
    
    return bv;
}


void npl_fe_uc_link_bundle_desc_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_fe_uc_link_bundle_desc_table_action_e)bv.bits(95, 88).get_value();
    if (action == NPL_FE_UC_LINK_BUNDLE_DESC_TABLE_ACTION_WRITE) {
        payloads.fe_uc_link_bundle_desc_table_result.unpack(bv.bits(87, 0));
    }
    
}


field_structure npl_fe_uc_link_bundle_desc_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fe_uc_link_bundle_desc_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fe_uc_link_bundle_desc_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FE_UC_LINK_BUNDLE_DESC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.fe_uc_link_bundle_desc_table_result", payloads.fe_uc_link_bundle_desc_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fe_uc_link_bundle_desc_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fe_uc_link_bundle_desc_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fi_core_tcam_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 40);
    
    bv.set_bits(33, 0, header_data);
    bv.set_bits(39, 34, fi_macro);
    
    return bv;
}

void npl_fi_core_tcam_table_key_t::unpack(bit_vector64_t bv)
{
    header_data = bv.bits(33, 0).get_value();
    fi_macro = bv.bits(39, 34).get_value();
    
}

field_structure npl_fi_core_tcam_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fi_core_tcam_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(header_data);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("header_data", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(fi_macro);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fi_macro", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fi_core_tcam_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fi_core_tcam_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fi_core_tcam_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(61, 54, action);
    if (action == NPL_FI_CORE_TCAM_TABLE_ACTION_WRITE) {
        bv.set_bits(53, 0, payloads.fi_core_tcam_assoc_data.pack());
    }
    
    return bv;
}


void npl_fi_core_tcam_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fi_core_tcam_table_action_e)bv.bits(61, 54).get_value();
    if (action == NPL_FI_CORE_TCAM_TABLE_ACTION_WRITE) {
        payloads.fi_core_tcam_assoc_data.unpack(bv.bits(53, 0));
    }
    
}


field_structure npl_fi_core_tcam_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fi_core_tcam_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fi_core_tcam_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FI_CORE_TCAM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.fi_core_tcam_assoc_data", payloads.fi_core_tcam_assoc_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fi_core_tcam_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fi_core_tcam_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fi_macro_config_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, fi_macro);
    
    return bv;
}

void npl_fi_macro_config_table_key_t::unpack(bit_vector64_t bv)
{
    fi_macro = bv.bits(5, 0).get_value();
    
}

field_structure npl_fi_macro_config_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fi_macro_config_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(fi_macro);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fi_macro", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fi_macro_config_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fi_macro_config_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_fi_macro_config_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(79, 72, action);
    if (action == NPL_FI_MACRO_CONFIG_TABLE_ACTION_WRITE) {
        bv.set_bits(71, 0, payloads.fi_macro_config_data.pack());
    }
    
    return bv;
}


void npl_fi_macro_config_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_fi_macro_config_table_action_e)bv.bits(79, 72).get_value();
    if (action == NPL_FI_MACRO_CONFIG_TABLE_ACTION_WRITE) {
        payloads.fi_macro_config_data.unpack(bv.bits(71, 0));
    }
    
}


field_structure npl_fi_macro_config_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fi_macro_config_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fi_macro_config_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FI_MACRO_CONFIG_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.fi_macro_config_data", payloads.fi_macro_config_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fi_macro_config_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fi_macro_config_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_filb_voq_mapping_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, rxpdr_output_voq_nr);
    
    return bv;
}

void npl_filb_voq_mapping_key_t::unpack(bit_vector64_t bv)
{
    rxpdr_output_voq_nr = bv.bits(15, 0).get_value();
    
}

field_structure npl_filb_voq_mapping_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_filb_voq_mapping_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpdr_output_voq_nr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpdr_output_voq_nr", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_filb_voq_mapping_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_filb_voq_mapping_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_filb_voq_mapping_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(33, 26, action);
    if (action == NPL_FILB_VOQ_MAPPING_ACTION_WRITE) {
        bv.set_bits(25, 0, payloads.filb_voq_mapping_result.pack());
    }
    
    return bv;
}


void npl_filb_voq_mapping_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_filb_voq_mapping_action_e)bv.bits(33, 26).get_value();
    if (action == NPL_FILB_VOQ_MAPPING_ACTION_WRITE) {
        payloads.filb_voq_mapping_result.unpack(bv.bits(25, 0));
    }
    
}


field_structure npl_filb_voq_mapping_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_filb_voq_mapping_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_filb_voq_mapping_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FILB_VOQ_MAPPING_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.filb_voq_mapping_result", payloads.filb_voq_mapping_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_filb_voq_mapping_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_filb_voq_mapping_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_first_ene_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, first_macro_code);
    
    return bv;
}

void npl_first_ene_static_table_key_t::unpack(bit_vector64_t bv)
{
    first_macro_code = (npl_qos_first_macro_code_e)bv.bits(2, 0).get_value();
    
}

field_structure npl_first_ene_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_first_ene_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(first_macro_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("first_macro_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_first_ene_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_first_ene_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_first_ene_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_FIRST_ENE_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.first_ene_macro.pack());
    }
    
    return bv;
}


void npl_first_ene_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_first_ene_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_FIRST_ENE_STATIC_TABLE_ACTION_WRITE) {
        payloads.first_ene_macro.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_first_ene_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_first_ene_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_first_ene_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FIRST_ENE_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.first_ene_macro", payloads.first_ene_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_first_ene_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_first_ene_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_frm_db_fabric_routing_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(8, 0, egress_device_id);
    
    return bv;
}

void npl_frm_db_fabric_routing_table_key_t::unpack(bit_vector64_t bv)
{
    egress_device_id = bv.bits(8, 0).get_value();
    
}

field_structure npl_frm_db_fabric_routing_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_frm_db_fabric_routing_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(egress_device_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("egress_device_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_frm_db_fabric_routing_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_frm_db_fabric_routing_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_frm_db_fabric_routing_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(115, 108, action);
    if (action == NPL_FRM_DB_FABRIC_ROUTING_TABLE_ACTION_WRITE) {
        bv.set_bits(107, 0, payloads.frm_db_fabric_routing_table_result.pack());
    }
    
    return bv;
}


void npl_frm_db_fabric_routing_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_frm_db_fabric_routing_table_action_e)bv.bits(115, 108).get_value();
    if (action == NPL_FRM_DB_FABRIC_ROUTING_TABLE_ACTION_WRITE) {
        payloads.frm_db_fabric_routing_table_result.unpack(bv.bits(107, 0));
    }
    
}


field_structure npl_frm_db_fabric_routing_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_frm_db_fabric_routing_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_frm_db_fabric_routing_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FRM_DB_FABRIC_ROUTING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.frm_db_fabric_routing_table_result", payloads.frm_db_fabric_routing_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_frm_db_fabric_routing_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_frm_db_fabric_routing_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fwd_destination_to_tm_result_data_found_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 33);
    bv.set_bits(32, 9, tx_cud);
    bv.set_bits(8, 6, dest_slice_id);
    bv.set_bits(5, 1, dest_pif);
    bv.set_bits(0, 0, dest_ifg);
    return bv;
}

void npl_fwd_destination_to_tm_result_data_found_payload_t::unpack(bit_vector64_t bv)
{
    tx_cud = bv.bits(32, 9).get_value();
    dest_slice_id = bv.bits(8, 6).get_value();
    dest_pif = bv.bits(5, 1).get_value();
    dest_ifg = bv.bits(0, 0).get_value();
}

field_structure npl_fwd_destination_to_tm_result_data_found_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fwd_destination_to_tm_result_data_found_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tx_cud);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_cud", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dest_slice_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_slice_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dest_pif);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_pif", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dest_ifg);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_ifg", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_fwd_destination_to_tm_result_data_found_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fwd_destination_to_tm_result_data_found_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fwd_destination_to_tm_result_data_key_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    
    bv.set_bits(19, 0, rxpp_pd_fwd_destination_raw);
    
    return bv;
}

void npl_fwd_destination_to_tm_result_data_key_t::unpack(bit_vector64_t bv)
{
    rxpp_pd_fwd_destination_raw = bv.bits(19, 0).get_value();
    
}

field_structure npl_fwd_destination_to_tm_result_data_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fwd_destination_to_tm_result_data_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_pd_fwd_destination_raw);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_pd_fwd_destination_raw", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fwd_destination_to_tm_result_data_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fwd_destination_to_tm_result_data_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fwd_destination_to_tm_result_data_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(40, 33, action);
    if (action == NPL_FWD_DESTINATION_TO_TM_RESULT_DATA_ACTION_FOUND) {
        bv.set_bits(32, 0, payloads.found.pack());
    }
    
    return bv;
}


void npl_fwd_destination_to_tm_result_data_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fwd_destination_to_tm_result_data_action_e)bv.bits(40, 33).get_value();
    if (action == NPL_FWD_DESTINATION_TO_TM_RESULT_DATA_ACTION_FOUND) {
        payloads.found.unpack(bv.bits(32, 0));
    }
    
}


field_structure npl_fwd_destination_to_tm_result_data_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fwd_destination_to_tm_result_data_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fwd_destination_to_tm_result_data_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FWD_DESTINATION_TO_TM_RESULT_DATA_ACTION_FOUND) {
        fs_result.subfields.emplace_back("found", payloads.found.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fwd_destination_to_tm_result_data_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fwd_destination_to_tm_result_data_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_fwd_type_to_ive_enable_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, txpp_npe_to_npe_metadata_fwd_header_type);
    
    return bv;
}

void npl_fwd_type_to_ive_enable_table_key_t::unpack(bit_vector64_t bv)
{
    txpp_npe_to_npe_metadata_fwd_header_type = (npl_fwd_header_type_e)bv.bits(3, 0).get_value();
    
}

field_structure npl_fwd_type_to_ive_enable_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fwd_type_to_ive_enable_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(txpp_npe_to_npe_metadata_fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("txpp_npe_to_npe_metadata_fwd_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_fwd_type_to_ive_enable_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_fwd_type_to_ive_enable_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_fwd_type_to_ive_enable_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_FWD_TYPE_TO_IVE_ENABLE_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.fwd_type_to_ive_enable.pack());
    }
    
    return bv;
}


void npl_fwd_type_to_ive_enable_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_fwd_type_to_ive_enable_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_FWD_TYPE_TO_IVE_ENABLE_TABLE_ACTION_WRITE) {
        payloads.fwd_type_to_ive_enable.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_fwd_type_to_ive_enable_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_fwd_type_to_ive_enable_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_fwd_type_to_ive_enable_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_FWD_TYPE_TO_IVE_ENABLE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.fwd_type_to_ive_enable", payloads.fwd_type_to_ive_enable.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_fwd_type_to_ive_enable_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_fwd_type_to_ive_enable_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_get_ecm_meter_ptr_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, tm_h_dp_0);
    bv.set_bits(1, 1, tm_h_ecn);
    
    return bv;
}

void npl_get_ecm_meter_ptr_table_key_t::unpack(bit_vector64_t bv)
{
    tm_h_dp_0 = bv.bits(0, 0).get_value();
    tm_h_ecn = bv.bits(1, 1).get_value();
    
}

field_structure npl_get_ecm_meter_ptr_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_get_ecm_meter_ptr_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tm_h_dp_0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tm_h_dp_0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(tm_h_ecn);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tm_h_ecn", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_get_ecm_meter_ptr_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_get_ecm_meter_ptr_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_get_ecm_meter_ptr_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_GET_ECM_METER_PTR_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.stat_meter_ptr.pack());
    }
    
    return bv;
}


void npl_get_ecm_meter_ptr_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_get_ecm_meter_ptr_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_GET_ECM_METER_PTR_TABLE_ACTION_WRITE) {
        payloads.stat_meter_ptr.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_get_ecm_meter_ptr_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_get_ecm_meter_ptr_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_get_ecm_meter_ptr_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_GET_ECM_METER_PTR_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.stat_meter_ptr", payloads.stat_meter_ptr.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_get_ecm_meter_ptr_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_get_ecm_meter_ptr_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_get_ingress_ptp_info_and_is_slp_dm_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, enable_transparent_ptp);
    bv.set_bits(1, 1, enable_sr_dm_accounting);
    
    return bv;
}

void npl_get_ingress_ptp_info_and_is_slp_dm_static_table_key_t::unpack(bit_vector64_t bv)
{
    enable_transparent_ptp = bv.bits(0, 0).get_value();
    enable_sr_dm_accounting = bv.bits(1, 1).get_value();
    
}

field_structure npl_get_ingress_ptp_info_and_is_slp_dm_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_get_ingress_ptp_info_and_is_slp_dm_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(enable_transparent_ptp);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("enable_transparent_ptp", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(enable_sr_dm_accounting);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("enable_sr_dm_accounting", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_get_ingress_ptp_info_and_is_slp_dm_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_get_ingress_ptp_info_and_is_slp_dm_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_get_ingress_ptp_info_and_is_slp_dm_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_GET_INGRESS_PTP_INFO_AND_IS_SLP_DM_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(3, 0, payloads.ingress_ptp_info_and_is_slp_dm_cmpressed_fields.pack());
    }
    
    return bv;
}


void npl_get_ingress_ptp_info_and_is_slp_dm_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_get_ingress_ptp_info_and_is_slp_dm_static_table_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_GET_INGRESS_PTP_INFO_AND_IS_SLP_DM_STATIC_TABLE_ACTION_WRITE) {
        payloads.ingress_ptp_info_and_is_slp_dm_cmpressed_fields.unpack(bv.bits(3, 0));
    }
    
}


field_structure npl_get_ingress_ptp_info_and_is_slp_dm_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_get_ingress_ptp_info_and_is_slp_dm_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_get_ingress_ptp_info_and_is_slp_dm_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_GET_INGRESS_PTP_INFO_AND_IS_SLP_DM_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ingress_ptp_info_and_is_slp_dm_cmpressed_fields", payloads.ingress_ptp_info_and_is_slp_dm_cmpressed_fields.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_get_ingress_ptp_info_and_is_slp_dm_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_get_ingress_ptp_info_and_is_slp_dm_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_get_l2_rtf_conf_set_and_init_stages_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, rtf_conf_set_ptr);
    
    return bv;
}

void npl_get_l2_rtf_conf_set_and_init_stages_key_t::unpack(bit_vector64_t bv)
{
    rtf_conf_set_ptr = bv.bits(7, 0).get_value();
    
}

field_structure npl_get_l2_rtf_conf_set_and_init_stages_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_get_l2_rtf_conf_set_and_init_stages_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rtf_conf_set_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rtf_conf_set_ptr", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_get_l2_rtf_conf_set_and_init_stages_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_get_l2_rtf_conf_set_and_init_stages_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_get_l2_rtf_conf_set_and_init_stages_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(22, 15, action);
    if (action == NPL_GET_L2_RTF_CONF_SET_AND_INIT_STAGES_ACTION_WRITE) {
        bv.set_bits(14, 0, payloads.l2_rtf_conf_set_and_init_stages.pack());
    }
    
    return bv;
}


void npl_get_l2_rtf_conf_set_and_init_stages_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_get_l2_rtf_conf_set_and_init_stages_action_e)bv.bits(22, 15).get_value();
    if (action == NPL_GET_L2_RTF_CONF_SET_AND_INIT_STAGES_ACTION_WRITE) {
        payloads.l2_rtf_conf_set_and_init_stages.unpack(bv.bits(14, 0));
    }
    
}


field_structure npl_get_l2_rtf_conf_set_and_init_stages_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_get_l2_rtf_conf_set_and_init_stages_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_get_l2_rtf_conf_set_and_init_stages_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_GET_L2_RTF_CONF_SET_AND_INIT_STAGES_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.l2_rtf_conf_set_and_init_stages", payloads.l2_rtf_conf_set_and_init_stages.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_get_l2_rtf_conf_set_and_init_stages_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_get_l2_rtf_conf_set_and_init_stages_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_get_non_comp_mc_value_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, not_comp_single_src);
    bv.set_bits(1, 1, packet_type_bit0);
    
    return bv;
}

void npl_get_non_comp_mc_value_static_table_key_t::unpack(bit_vector64_t bv)
{
    not_comp_single_src = bv.bits(0, 0).get_value();
    packet_type_bit0 = bv.bits(1, 1).get_value();
    
}

field_structure npl_get_non_comp_mc_value_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_get_non_comp_mc_value_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(not_comp_single_src);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("not_comp_single_src", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(packet_type_bit0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_type_bit0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_get_non_comp_mc_value_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_get_non_comp_mc_value_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_get_non_comp_mc_value_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_GET_NON_COMP_MC_VALUE_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.non_comp_mc_trap);
    }
    
    return bv;
}


void npl_get_non_comp_mc_value_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_get_non_comp_mc_value_static_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_GET_NON_COMP_MC_VALUE_STATIC_TABLE_ACTION_WRITE) {
        payloads.non_comp_mc_trap = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_get_non_comp_mc_value_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_get_non_comp_mc_value_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_get_non_comp_mc_value_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_GET_NON_COMP_MC_VALUE_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.non_comp_mc_trap);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.non_comp_mc_trap", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_get_non_comp_mc_value_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_get_non_comp_mc_value_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_gre_proto_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, label_present);
    bv.set_bits(1, 1, proto);
    
    return bv;
}

void npl_gre_proto_static_table_key_t::unpack(bit_vector64_t bv)
{
    label_present = bv.bits(0, 0).get_value();
    proto = bv.bits(1, 1).get_value();
    
}

field_structure npl_gre_proto_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_gre_proto_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(label_present);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("label_present", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(proto);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("proto", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_gre_proto_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_gre_proto_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_gre_proto_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_GRE_PROTO_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(23, 0, payloads.gre_proto);
    }
    
    return bv;
}


void npl_gre_proto_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_gre_proto_static_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_GRE_PROTO_STATIC_TABLE_ACTION_WRITE) {
        payloads.gre_proto = bv.bits(23, 0).get_value();
    }
    
}


field_structure npl_gre_proto_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_gre_proto_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_gre_proto_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_GRE_PROTO_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.gre_proto);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.gre_proto", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_gre_proto_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_gre_proto_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_hmc_cgm_cgm_lut_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(2, 0, shared_pool_th_level);
    bv.set_bits(6, 3, queue_size_level);
    bv.set_bits(11, 7, profile_id.pack());
    
    return bv;
}

void npl_hmc_cgm_cgm_lut_table_key_t::unpack(bit_vector64_t bv)
{
    shared_pool_th_level = bv.bits(2, 0).get_value();
    queue_size_level = bv.bits(6, 3).get_value();
    profile_id.unpack(bv.bits(11, 7));
    
}

field_structure npl_hmc_cgm_cgm_lut_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_hmc_cgm_cgm_lut_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(shared_pool_th_level);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("shared_pool_th_level", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(queue_size_level);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("queue_size_level", fs_subfield);
    
    fs_result.subfields.emplace_back("profile_id", profile_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_hmc_cgm_cgm_lut_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_hmc_cgm_cgm_lut_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_hmc_cgm_cgm_lut_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_HMC_CGM_CGM_LUT_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.hmc_cgm_cgm_lut_results.pack());
    }
    
    return bv;
}


void npl_hmc_cgm_cgm_lut_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_hmc_cgm_cgm_lut_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_HMC_CGM_CGM_LUT_TABLE_ACTION_WRITE) {
        payloads.hmc_cgm_cgm_lut_results.unpack(bv.bits(2, 0));
    }
    
}


field_structure npl_hmc_cgm_cgm_lut_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_hmc_cgm_cgm_lut_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_hmc_cgm_cgm_lut_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_HMC_CGM_CGM_LUT_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.hmc_cgm_cgm_lut_results", payloads.hmc_cgm_cgm_lut_results.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_hmc_cgm_cgm_lut_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_hmc_cgm_cgm_lut_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_hmc_cgm_profile_global_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, profile_id.pack());
    
    return bv;
}

void npl_hmc_cgm_profile_global_table_key_t::unpack(bit_vector64_t bv)
{
    profile_id.unpack(bv.bits(4, 0));
    
}

field_structure npl_hmc_cgm_profile_global_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_hmc_cgm_profile_global_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("profile_id", profile_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_hmc_cgm_profile_global_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_hmc_cgm_profile_global_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector384_t npl_hmc_cgm_profile_global_table_value_t::pack(void) const
{
    bit_vector384_t bv;
    bv.set_bits(291, 284, action);
    if (action == NPL_HMC_CGM_PROFILE_GLOBAL_TABLE_ACTION_WRITE) {
        bv.set_bits(283, 0, payloads.hmc_cgm_profile_global_results.pack());
    }
    
    return bv;
}


void npl_hmc_cgm_profile_global_table_value_t::unpack(bit_vector384_t bv)
{
    action = (npl_hmc_cgm_profile_global_table_action_e)bv.bits(291, 284).get_value();
    if (action == NPL_HMC_CGM_PROFILE_GLOBAL_TABLE_ACTION_WRITE) {
        payloads.hmc_cgm_profile_global_results.unpack(bv.bits(283, 0));
    }
    
}


field_structure npl_hmc_cgm_profile_global_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_hmc_cgm_profile_global_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_hmc_cgm_profile_global_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_HMC_CGM_PROFILE_GLOBAL_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.hmc_cgm_profile_global_results", payloads.hmc_cgm_profile_global_results.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_hmc_cgm_profile_global_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_hmc_cgm_profile_global_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ibm_cmd_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, rxpp_to_txpp_local_vars_mirror_command);
    
    return bv;
}

void npl_ibm_cmd_table_key_t::unpack(bit_vector64_t bv)
{
    rxpp_to_txpp_local_vars_mirror_command = bv.bits(4, 0).get_value();
    
}

field_structure npl_ibm_cmd_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ibm_cmd_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_to_txpp_local_vars_mirror_command);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_to_txpp_local_vars_mirror_command", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ibm_cmd_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ibm_cmd_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ibm_cmd_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(56, 49, action);
    if (action == NPL_IBM_CMD_TABLE_ACTION_WRITE) {
        bv.set_bits(48, 0, payloads.ibm_cmd_table_result.pack());
    }
    
    return bv;
}


void npl_ibm_cmd_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ibm_cmd_table_action_e)bv.bits(56, 49).get_value();
    if (action == NPL_IBM_CMD_TABLE_ACTION_WRITE) {
        payloads.ibm_cmd_table_result.unpack(bv.bits(48, 0));
    }
    
}


field_structure npl_ibm_cmd_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ibm_cmd_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ibm_cmd_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IBM_CMD_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ibm_cmd_table_result", payloads.ibm_cmd_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ibm_cmd_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ibm_cmd_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ibm_mc_cmd_to_encap_data_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, tx_fabric_tx_cud_20_16_);
    
    return bv;
}

void npl_ibm_mc_cmd_to_encap_data_table_key_t::unpack(bit_vector64_t bv)
{
    tx_fabric_tx_cud_20_16_ = bv.bits(4, 0).get_value();
    
}

field_structure npl_ibm_mc_cmd_to_encap_data_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ibm_mc_cmd_to_encap_data_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tx_fabric_tx_cud_20_16_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_fabric_tx_cud_20_16_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ibm_mc_cmd_to_encap_data_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ibm_mc_cmd_to_encap_data_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ibm_mc_cmd_to_encap_data_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(35, 28, action);
    if (action == NPL_IBM_MC_CMD_TO_ENCAP_DATA_TABLE_ACTION_WRITE) {
        bv.set_bits(27, 0, payloads.ibm_mc_fabric_encap_msb.pack());
    }
    
    return bv;
}


void npl_ibm_mc_cmd_to_encap_data_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ibm_mc_cmd_to_encap_data_table_action_e)bv.bits(35, 28).get_value();
    if (action == NPL_IBM_MC_CMD_TO_ENCAP_DATA_TABLE_ACTION_WRITE) {
        payloads.ibm_mc_fabric_encap_msb.unpack(bv.bits(27, 0));
    }
    
}


field_structure npl_ibm_mc_cmd_to_encap_data_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ibm_mc_cmd_to_encap_data_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ibm_mc_cmd_to_encap_data_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IBM_MC_CMD_TO_ENCAP_DATA_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ibm_mc_fabric_encap_msb", payloads.ibm_mc_fabric_encap_msb.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ibm_mc_cmd_to_encap_data_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ibm_mc_cmd_to_encap_data_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ibm_uc_cmd_to_encap_data_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, tx_fabric_tx_cud_4_0_);
    
    return bv;
}

void npl_ibm_uc_cmd_to_encap_data_table_key_t::unpack(bit_vector64_t bv)
{
    tx_fabric_tx_cud_4_0_ = bv.bits(4, 0).get_value();
    
}

field_structure npl_ibm_uc_cmd_to_encap_data_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ibm_uc_cmd_to_encap_data_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tx_fabric_tx_cud_4_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_fabric_tx_cud_4_0_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ibm_uc_cmd_to_encap_data_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ibm_uc_cmd_to_encap_data_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ibm_uc_cmd_to_encap_data_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(87, 80, action);
    if (action == NPL_IBM_UC_CMD_TO_ENCAP_DATA_TABLE_ACTION_WRITE) {
        bv.set_bits(79, 0, payloads.ibm_uc_fabric_encap.pack());
    }
    
    return bv;
}


void npl_ibm_uc_cmd_to_encap_data_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ibm_uc_cmd_to_encap_data_table_action_e)bv.bits(87, 80).get_value();
    if (action == NPL_IBM_UC_CMD_TO_ENCAP_DATA_TABLE_ACTION_WRITE) {
        payloads.ibm_uc_fabric_encap.unpack(bv.bits(79, 0));
    }
    
}


field_structure npl_ibm_uc_cmd_to_encap_data_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ibm_uc_cmd_to_encap_data_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ibm_uc_cmd_to_encap_data_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IBM_UC_CMD_TO_ENCAP_DATA_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ibm_uc_fabric_encap", payloads.ibm_uc_fabric_encap.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ibm_uc_cmd_to_encap_data_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ibm_uc_cmd_to_encap_data_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ifgb_tc_lut_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    
    bv.set_bits(1, 0, tpid);
    bv.set_bits(4, 2, protocol);
    bv.set_bits(5, 5, port);
    bv.set_bits(9, 6, serdes_pair);
    bv.set_bits(10, 10, ifg);
    
    return bv;
}

void npl_ifgb_tc_lut_table_key_t::unpack(bit_vector64_t bv)
{
    tpid = bv.bits(1, 0).get_value();
    protocol = bv.bits(4, 2).get_value();
    port = bv.bits(5, 5).get_value();
    serdes_pair = bv.bits(9, 6).get_value();
    ifg = bv.bits(10, 10).get_value();
    
}

field_structure npl_ifgb_tc_lut_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ifgb_tc_lut_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tpid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tpid", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("protocol", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("port", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(serdes_pair);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("serdes_pair", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ifg);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ifg", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ifgb_tc_lut_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ifgb_tc_lut_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ifgb_tc_lut_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(13, 6, action);
    if (action == NPL_IFGB_TC_LUT_TABLE_ACTION_WRITE) {
        bv.set_bits(5, 0, payloads.ifgb_tc_lut_results.pack());
    }
    
    return bv;
}


void npl_ifgb_tc_lut_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ifgb_tc_lut_table_action_e)bv.bits(13, 6).get_value();
    if (action == NPL_IFGB_TC_LUT_TABLE_ACTION_WRITE) {
        payloads.ifgb_tc_lut_results.unpack(bv.bits(5, 0));
    }
    
}


field_structure npl_ifgb_tc_lut_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ifgb_tc_lut_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ifgb_tc_lut_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IFGB_TC_LUT_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ifgb_tc_lut_results", payloads.ifgb_tc_lut_results.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ifgb_tc_lut_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ifgb_tc_lut_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ingress_ip_qos_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    
    bv.set_bits(3, 0, qos_id);
    bv.set_bits(10, 4, l3_qos_mapping_key);
    
    return bv;
}

void npl_ingress_ip_qos_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    qos_id = bv.bits(3, 0).get_value();
    l3_qos_mapping_key = bv.bits(10, 4).get_value();
    
}

field_structure npl_ingress_ip_qos_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_ip_qos_mapping_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(qos_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("qos_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(l3_qos_mapping_key);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_qos_mapping_key", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ingress_ip_qos_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_ip_qos_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ingress_ip_qos_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_INGRESS_IP_QOS_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.ip_qos_mapping_result.pack());
    }
    
    return bv;
}


void npl_ingress_ip_qos_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ingress_ip_qos_mapping_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_INGRESS_IP_QOS_MAPPING_TABLE_ACTION_WRITE) {
        payloads.ip_qos_mapping_result.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_ingress_ip_qos_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_ip_qos_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_ip_qos_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_IP_QOS_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ip_qos_mapping_result", payloads.ip_qos_mapping_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_ip_qos_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_ip_qos_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_eth_db1_160_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_eth_db1_160_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_eth_db1_160_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_eth_db1_160_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_eth_db1_160_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_eth_db1_160_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_eth_db1_160_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_ETH_DB1_160_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_eth_db1_160_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_eth_db1_160_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_ETH_DB1_160_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_eth_db1_160_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_eth_db1_160_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_eth_db1_160_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_ETH_DB1_160_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_eth_db1_160_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_eth_db1_160_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_eth_db2_160_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_eth_db2_160_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_eth_db2_160_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_eth_db2_160_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_eth_db2_160_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_eth_db2_160_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_eth_db2_160_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_ETH_DB2_160_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_eth_db2_160_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_eth_db2_160_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_ETH_DB2_160_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_eth_db2_160_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_eth_db2_160_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_eth_db2_160_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_ETH_DB2_160_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_eth_db2_160_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_eth_db2_160_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db1_160_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db1_160_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db1_160_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db1_160_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db1_160_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db1_160_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db1_160_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB1_160_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db1_160_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db1_160_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB1_160_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db1_160_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db1_160_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db1_160_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB1_160_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db1_160_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db1_160_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db1_160_f1_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db1_160_f1_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db1_160_f1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db1_160_f1_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db1_160_f1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db1_160_f1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db1_160_f1_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB1_160_F1_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload_f1.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db1_160_f1_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db1_160_f1_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB1_160_F1_TABLE_ACTION_WRITE) {
        payloads.rtf_payload_f1.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db1_160_f1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db1_160_f1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db1_160_f1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB1_160_F1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload_f1", payloads.rtf_payload_f1.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db1_160_f1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db1_160_f1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db1_320_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db1_320_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db1_320_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db1_320_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db1_320_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db1_320_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db1_320_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB1_320_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db1_320_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db1_320_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB1_320_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db1_320_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db1_320_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db1_320_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB1_320_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db1_320_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db1_320_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db2_160_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db2_160_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db2_160_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db2_160_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db2_160_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db2_160_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db2_160_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB2_160_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db2_160_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db2_160_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB2_160_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db2_160_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db2_160_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db2_160_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB2_160_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db2_160_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db2_160_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db2_160_f1_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db2_160_f1_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db2_160_f1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db2_160_f1_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db2_160_f1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db2_160_f1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db2_160_f1_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB2_160_F1_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload_f1.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db2_160_f1_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db2_160_f1_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB2_160_F1_TABLE_ACTION_WRITE) {
        payloads.rtf_payload_f1.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db2_160_f1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db2_160_f1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db2_160_f1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB2_160_F1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload_f1", payloads.rtf_payload_f1.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db2_160_f1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db2_160_f1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db2_320_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db2_320_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db2_320_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db2_320_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db2_320_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db2_320_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db2_320_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB2_320_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db2_320_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db2_320_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB2_320_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db2_320_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db2_320_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db2_320_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB2_320_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db2_320_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db2_320_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db3_160_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db3_160_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db3_160_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db3_160_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db3_160_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db3_160_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db3_160_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB3_160_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db3_160_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db3_160_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB3_160_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db3_160_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db3_160_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db3_160_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB3_160_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db3_160_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db3_160_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db3_160_f1_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db3_160_f1_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db3_160_f1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db3_160_f1_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db3_160_f1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db3_160_f1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db3_160_f1_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB3_160_F1_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload_f1.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db3_160_f1_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db3_160_f1_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB3_160_F1_TABLE_ACTION_WRITE) {
        payloads.rtf_payload_f1.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db3_160_f1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db3_160_f1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db3_160_f1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB3_160_F1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload_f1", payloads.rtf_payload_f1.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db3_160_f1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db3_160_f1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db3_320_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db3_320_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db3_320_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db3_320_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db3_320_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db3_320_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db3_320_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB3_320_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db3_320_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db3_320_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB3_320_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db3_320_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db3_320_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db3_320_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB3_320_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db3_320_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db3_320_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db4_160_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db4_160_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db4_160_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db4_160_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db4_160_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db4_160_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db4_160_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB4_160_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db4_160_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db4_160_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB4_160_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db4_160_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db4_160_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db4_160_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB4_160_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db4_160_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db4_160_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db4_160_f1_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db4_160_f1_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db4_160_f1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db4_160_f1_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db4_160_f1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db4_160_f1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db4_160_f1_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB4_160_F1_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload_f1.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db4_160_f1_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db4_160_f1_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB4_160_F1_TABLE_ACTION_WRITE) {
        payloads.rtf_payload_f1.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db4_160_f1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db4_160_f1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db4_160_f1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB4_160_F1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload_f1", payloads.rtf_payload_f1.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db4_160_f1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db4_160_f1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv4_db4_320_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv4_db4_320_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv4_db4_320_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db4_320_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db4_320_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv4_db4_320_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv4_db4_320_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV4_DB4_320_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv4_db4_320_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv4_db4_320_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV4_DB4_320_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv4_db4_320_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv4_db4_320_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv4_db4_320_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV4_DB4_320_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv4_db4_320_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv4_db4_320_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db1_160_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db1_160_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db1_160_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db1_160_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db1_160_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db1_160_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db1_160_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB1_160_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db1_160_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db1_160_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB1_160_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db1_160_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db1_160_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db1_160_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB1_160_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db1_160_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db1_160_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db1_160_f1_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db1_160_f1_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db1_160_f1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db1_160_f1_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db1_160_f1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db1_160_f1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db1_160_f1_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB1_160_F1_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload_f1.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db1_160_f1_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db1_160_f1_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB1_160_F1_TABLE_ACTION_WRITE) {
        payloads.rtf_payload_f1.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db1_160_f1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db1_160_f1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db1_160_f1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB1_160_F1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload_f1", payloads.rtf_payload_f1.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db1_160_f1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db1_160_f1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db1_320_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db1_320_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db1_320_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db1_320_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db1_320_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db1_320_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db1_320_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB1_320_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db1_320_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db1_320_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB1_320_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db1_320_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db1_320_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db1_320_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB1_320_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db1_320_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db1_320_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db2_160_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db2_160_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db2_160_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db2_160_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db2_160_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db2_160_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db2_160_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB2_160_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db2_160_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db2_160_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB2_160_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db2_160_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db2_160_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db2_160_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB2_160_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db2_160_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db2_160_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db2_160_f1_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db2_160_f1_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db2_160_f1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db2_160_f1_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db2_160_f1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db2_160_f1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db2_160_f1_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB2_160_F1_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload_f1.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db2_160_f1_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db2_160_f1_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB2_160_F1_TABLE_ACTION_WRITE) {
        payloads.rtf_payload_f1.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db2_160_f1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db2_160_f1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db2_160_f1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB2_160_F1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload_f1", payloads.rtf_payload_f1.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db2_160_f1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db2_160_f1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db2_320_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db2_320_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db2_320_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db2_320_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db2_320_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db2_320_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db2_320_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB2_320_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db2_320_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db2_320_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB2_320_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db2_320_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db2_320_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db2_320_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB2_320_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db2_320_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db2_320_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db3_160_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db3_160_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db3_160_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db3_160_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db3_160_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db3_160_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db3_160_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB3_160_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db3_160_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db3_160_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB3_160_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db3_160_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db3_160_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db3_160_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB3_160_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db3_160_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db3_160_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db3_160_f1_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db3_160_f1_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db3_160_f1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db3_160_f1_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db3_160_f1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db3_160_f1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db3_160_f1_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB3_160_F1_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload_f1.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db3_160_f1_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db3_160_f1_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB3_160_F1_TABLE_ACTION_WRITE) {
        payloads.rtf_payload_f1.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db3_160_f1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db3_160_f1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db3_160_f1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB3_160_F1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload_f1", payloads.rtf_payload_f1.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db3_160_f1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db3_160_f1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db3_320_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db3_320_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db3_320_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db3_320_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db3_320_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db3_320_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db3_320_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB3_320_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db3_320_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db3_320_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB3_320_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db3_320_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db3_320_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db3_320_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB3_320_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db3_320_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db3_320_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db4_160_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db4_160_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db4_160_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db4_160_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db4_160_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db4_160_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db4_160_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB4_160_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db4_160_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db4_160_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB4_160_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db4_160_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db4_160_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db4_160_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB4_160_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db4_160_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db4_160_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db4_160_f1_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db4_160_f1_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db4_160_f1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db4_160_f1_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db4_160_f1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db4_160_f1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db4_160_f1_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB4_160_F1_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload_f1.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db4_160_f1_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db4_160_f1_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB4_160_F1_TABLE_ACTION_WRITE) {
        payloads.rtf_payload_f1.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db4_160_f1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db4_160_f1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db4_160_f1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB4_160_F1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload_f1", payloads.rtf_payload_f1.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db4_160_f1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db4_160_f1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector npl_ingress_rtf_ipv6_db4_320_f0_table_key_t::pack(void) const
{
    bit_vector bv(0, 4096);
    
    bv.set_bits(4095, 0, ud_key.pack());
    
    return bv;
}

void npl_ingress_rtf_ipv6_db4_320_f0_table_key_t::unpack(bit_vector bv)
{
    ud_key.unpack(bv.bits(4095, 0));
    
}

field_structure npl_ingress_rtf_ipv6_db4_320_f0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db4_320_f0_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ud_key", ud_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db4_320_f0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ingress_rtf_ipv6_db4_320_f0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ingress_rtf_ipv6_db4_320_f0_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_INGRESS_RTF_IPV6_DB4_320_F0_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.rtf_payload.pack());
    }
    
    return bv;
}


void npl_ingress_rtf_ipv6_db4_320_f0_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ingress_rtf_ipv6_db4_320_f0_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_INGRESS_RTF_IPV6_DB4_320_F0_TABLE_ACTION_WRITE) {
        payloads.rtf_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ingress_rtf_ipv6_db4_320_f0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ingress_rtf_ipv6_db4_320_f0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ingress_rtf_ipv6_db4_320_f0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INGRESS_RTF_IPV6_DB4_320_F0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rtf_payload", payloads.rtf_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ingress_rtf_ipv6_db4_320_f0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ingress_rtf_ipv6_db4_320_f0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_inject_down_select_ene_static_table_inject_down_ene_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    bv.set_bits(15, 8, ene_macro_id);
    bv.set_bits(7, 0, dma_decap_header_type);
    return bv;
}

void npl_inject_down_select_ene_static_table_inject_down_ene_payload_t::unpack(bit_vector64_t bv)
{
    ene_macro_id = (npl_ene_macro_ids_e)bv.bits(15, 8).get_value();
    dma_decap_header_type = bv.bits(7, 0).get_value();
}

field_structure npl_inject_down_select_ene_static_table_inject_down_ene_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_down_select_ene_static_table_inject_down_ene_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(ene_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ene_macro_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dma_decap_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dma_decap_header_type", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_inject_down_select_ene_static_table_inject_down_ene_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_inject_down_select_ene_static_table_inject_down_ene_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_inject_down_select_ene_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(3, 0, pkt_size_4lsb);
    bv.set_bits(6, 4, inject_down_encap);
    bv.set_bits(10, 7, fwd_header_type);
    bv.set_bits(11, 11, dsp_is_dma);
    
    return bv;
}

void npl_inject_down_select_ene_static_table_key_t::unpack(bit_vector64_t bv)
{
    pkt_size_4lsb = bv.bits(3, 0).get_value();
    inject_down_encap = (npl_inject_down_encap_type_e)bv.bits(6, 4).get_value();
    fwd_header_type = (npl_fwd_header_type_e)bv.bits(10, 7).get_value();
    dsp_is_dma = bv.bits(11, 11).get_value();
    
}

field_structure npl_inject_down_select_ene_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_down_select_ene_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pkt_size_4lsb);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pkt_size_4lsb", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(inject_down_encap);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("inject_down_encap", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fwd_header_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dsp_is_dma);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dsp_is_dma", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_inject_down_select_ene_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_inject_down_select_ene_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_inject_down_select_ene_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_INJECT_DOWN_SELECT_ENE_STATIC_TABLE_ACTION_INJECT_DOWN_ENE) {
        bv.set_bits(15, 0, payloads.inject_down_ene.pack());
    }
    
    return bv;
}


void npl_inject_down_select_ene_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_inject_down_select_ene_static_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_INJECT_DOWN_SELECT_ENE_STATIC_TABLE_ACTION_INJECT_DOWN_ENE) {
        payloads.inject_down_ene.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_inject_down_select_ene_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_down_select_ene_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_inject_down_select_ene_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INJECT_DOWN_SELECT_ENE_STATIC_TABLE_ACTION_INJECT_DOWN_ENE) {
        fs_result.subfields.emplace_back("inject_down_ene", payloads.inject_down_ene.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_inject_down_select_ene_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_inject_down_select_ene_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 21);
    bv.set_bits(20, 20, per_pif_trap_mode);
    bv.set_bits(19, 0, counter_ptr.pack());
    return bv;
}

void npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t::unpack(bit_vector64_t bv)
{
    per_pif_trap_mode = (npl_per_pif_trap_mode_e)bv.bits(20, 20).get_value();
    counter_ptr.unpack(bv.bits(19, 0));
}

field_structure npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(per_pif_trap_mode);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("per_pif_trap_mode", fs_subfield);
    
    fs_result.subfields.emplace_back("counter_ptr", counter_ptr.to_field_structure());
    return fs_result;
}
std::string to_string(npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_inject_down_tx_redirect_counter_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, tx_redirect_code);
    
    return bv;
}

void npl_inject_down_tx_redirect_counter_table_key_t::unpack(bit_vector64_t bv)
{
    tx_redirect_code = bv.bits(7, 0).get_value();
    
}

field_structure npl_inject_down_tx_redirect_counter_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_down_tx_redirect_counter_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tx_redirect_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_redirect_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_inject_down_tx_redirect_counter_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_inject_down_tx_redirect_counter_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_inject_down_tx_redirect_counter_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(28, 21, action);
    if (action == NPL_INJECT_DOWN_TX_REDIRECT_COUNTER_TABLE_ACTION_COUNTER_METER_FOUND) {
        bv.set_bits(20, 0, payloads.counter_meter_found.pack());
    }
    
    return bv;
}


void npl_inject_down_tx_redirect_counter_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_inject_down_tx_redirect_counter_table_action_e)bv.bits(28, 21).get_value();
    if (action == NPL_INJECT_DOWN_TX_REDIRECT_COUNTER_TABLE_ACTION_COUNTER_METER_FOUND) {
        payloads.counter_meter_found.unpack(bv.bits(20, 0));
    }
    
}


field_structure npl_inject_down_tx_redirect_counter_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_down_tx_redirect_counter_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_inject_down_tx_redirect_counter_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INJECT_DOWN_TX_REDIRECT_COUNTER_TABLE_ACTION_COUNTER_METER_FOUND) {
        fs_result.subfields.emplace_back("counter_meter_found", payloads.counter_meter_found.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_inject_down_tx_redirect_counter_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_inject_down_tx_redirect_counter_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_inject_mact_ldb_to_output_lr_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_inject_mact_ldb_to_output_lr_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_inject_mact_ldb_to_output_lr_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_mact_ldb_to_output_lr_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_inject_mact_ldb_to_output_lr_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_inject_mact_ldb_to_output_lr_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_inject_mact_ldb_to_output_lr_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_INJECT_MACT_LDB_TO_OUTPUT_LR_ACTION_WRITE) {
        bv.set_bits(3, 0, payloads.output_learn_record_mact_ldb);
    }
    
    return bv;
}


void npl_inject_mact_ldb_to_output_lr_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_inject_mact_ldb_to_output_lr_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_INJECT_MACT_LDB_TO_OUTPUT_LR_ACTION_WRITE) {
        payloads.output_learn_record_mact_ldb = bv.bits(3, 0).get_value();
    }
    
}


field_structure npl_inject_mact_ldb_to_output_lr_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_mact_ldb_to_output_lr_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_inject_mact_ldb_to_output_lr_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INJECT_MACT_LDB_TO_OUTPUT_LR_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.output_learn_record_mact_ldb);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.output_learn_record_mact_ldb", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_inject_mact_ldb_to_output_lr_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_inject_mact_ldb_to_output_lr_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 59);
    bv.set_bits(58, 48, slice_and_source_if.pack());
    bv.set_bits(47, 0, init_data.pack());
    return bv;
}

void npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t::unpack(bit_vector64_t bv)
{
    slice_and_source_if.unpack(bv.bits(58, 48));
    init_data.unpack(bv.bits(47, 0));
}

field_structure npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("slice_and_source_if", slice_and_source_if.to_field_structure());
    fs_result.subfields.emplace_back("init_data", init_data.to_field_structure());
    return fs_result;
}
std::string to_string(npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_inject_up_pif_ifg_init_data_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    
    bv.set_bits(7, 0, source_if.pack());
    bv.set_bits(10, 8, initial_slice_id);
    
    return bv;
}

void npl_inject_up_pif_ifg_init_data_table_key_t::unpack(bit_vector64_t bv)
{
    source_if.unpack(bv.bits(7, 0));
    initial_slice_id = bv.bits(10, 8).get_value();
    
}

field_structure npl_inject_up_pif_ifg_init_data_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_up_pif_ifg_init_data_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("source_if", source_if.to_field_structure());
    fs_subfield.flat_value = to_hex_string(initial_slice_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("initial_slice_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_inject_up_pif_ifg_init_data_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_inject_up_pif_ifg_init_data_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_inject_up_pif_ifg_init_data_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(66, 59, action);
    if (action == NPL_INJECT_UP_PIF_IFG_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_PIF_IFG) {
        bv.set_bits(58, 0, payloads.write_init_data_for_pif_ifg.pack());
    }
    
    return bv;
}


void npl_inject_up_pif_ifg_init_data_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_inject_up_pif_ifg_init_data_table_action_e)bv.bits(66, 59).get_value();
    if (action == NPL_INJECT_UP_PIF_IFG_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_PIF_IFG) {
        payloads.write_init_data_for_pif_ifg.unpack(bv.bits(58, 0));
    }
    
}


field_structure npl_inject_up_pif_ifg_init_data_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_up_pif_ifg_init_data_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_inject_up_pif_ifg_init_data_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INJECT_UP_PIF_IFG_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_PIF_IFG) {
        fs_result.subfields.emplace_back("write_init_data_for_pif_ifg", payloads.write_init_data_for_pif_ifg.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_inject_up_pif_ifg_init_data_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_inject_up_pif_ifg_init_data_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 48);
    bv.set_bits(47, 0, init_data.pack());
    return bv;
}

void npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t::unpack(bit_vector64_t bv)
{
    init_data.unpack(bv.bits(47, 0));
}

field_structure npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("init_data", init_data.to_field_structure());
    return fs_result;
}
std::string to_string(npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_inject_up_ssp_init_data_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(11, 0, up_ssp);
    
    return bv;
}

void npl_inject_up_ssp_init_data_table_key_t::unpack(bit_vector64_t bv)
{
    up_ssp = bv.bits(11, 0).get_value();
    
}

field_structure npl_inject_up_ssp_init_data_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_up_ssp_init_data_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(up_ssp);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("up_ssp", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_inject_up_ssp_init_data_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_inject_up_ssp_init_data_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_inject_up_ssp_init_data_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(55, 48, action);
    if (action == NPL_INJECT_UP_SSP_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_SSP) {
        bv.set_bits(47, 0, payloads.write_init_data_for_ssp.pack());
    }
    
    return bv;
}


void npl_inject_up_ssp_init_data_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_inject_up_ssp_init_data_table_action_e)bv.bits(55, 48).get_value();
    if (action == NPL_INJECT_UP_SSP_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_SSP) {
        payloads.write_init_data_for_ssp.unpack(bv.bits(47, 0));
    }
    
}


field_structure npl_inject_up_ssp_init_data_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inject_up_ssp_init_data_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_inject_up_ssp_init_data_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INJECT_UP_SSP_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_SSP) {
        fs_result.subfields.emplace_back("write_init_data_for_ssp", payloads.write_init_data_for_ssp.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_inject_up_ssp_init_data_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_inject_up_ssp_init_data_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_inner_tpid_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, tpid_ptr);
    
    return bv;
}

void npl_inner_tpid_table_key_t::unpack(bit_vector64_t bv)
{
    tpid_ptr = bv.bits(3, 0).get_value();
    
}

field_structure npl_inner_tpid_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inner_tpid_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tpid_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tpid_ptr", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_inner_tpid_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_inner_tpid_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_inner_tpid_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_INNER_TPID_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.tpid);
    }
    
    return bv;
}


void npl_inner_tpid_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_inner_tpid_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_INNER_TPID_TABLE_ACTION_WRITE) {
        payloads.tpid = bv.bits(15, 0).get_value();
    }
    
}


field_structure npl_inner_tpid_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_inner_tpid_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_inner_tpid_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_INNER_TPID_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.tpid);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.tpid", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_inner_tpid_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_inner_tpid_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_fwd_header_mapping_to_ethtype_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, tx_npu_header_fwd_header_type);
    
    return bv;
}

void npl_ip_fwd_header_mapping_to_ethtype_static_table_key_t::unpack(bit_vector64_t bv)
{
    tx_npu_header_fwd_header_type = (npl_fwd_header_type_e)bv.bits(3, 0).get_value();
    
}

field_structure npl_ip_fwd_header_mapping_to_ethtype_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_fwd_header_mapping_to_ethtype_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(tx_npu_header_fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_npu_header_fwd_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ip_fwd_header_mapping_to_ethtype_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ip_fwd_header_mapping_to_ethtype_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ip_fwd_header_mapping_to_ethtype_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_IP_FWD_HEADER_MAPPING_TO_ETHTYPE_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.local_tx_ip_mapping.pack());
    }
    
    return bv;
}


void npl_ip_fwd_header_mapping_to_ethtype_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ip_fwd_header_mapping_to_ethtype_static_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_IP_FWD_HEADER_MAPPING_TO_ETHTYPE_STATIC_TABLE_ACTION_WRITE) {
        payloads.local_tx_ip_mapping.unpack(bv.bits(2, 0));
    }
    
}


field_structure npl_ip_fwd_header_mapping_to_ethtype_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_fwd_header_mapping_to_ethtype_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ip_fwd_header_mapping_to_ethtype_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IP_FWD_HEADER_MAPPING_TO_ETHTYPE_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.local_tx_ip_mapping", payloads.local_tx_ip_mapping.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ip_fwd_header_mapping_to_ethtype_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_fwd_header_mapping_to_ethtype_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    bv.set_bits(0, 0, global_mcid_17_downto_16_is_zero);
    return bv;
}

void npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t::unpack(bit_vector64_t bv)
{
    global_mcid_17_downto_16_is_zero = bv.bits(0, 0).get_value();
}

field_structure npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(global_mcid_17_downto_16_is_zero);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("global_mcid_17_downto_16_is_zero", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_ingress_cmp_mcid_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, global_mcid_17_downto_16);
    
    return bv;
}

void npl_ip_ingress_cmp_mcid_static_table_key_t::unpack(bit_vector64_t bv)
{
    global_mcid_17_downto_16 = bv.bits(1, 0).get_value();
    
}

field_structure npl_ip_ingress_cmp_mcid_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_ingress_cmp_mcid_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(global_mcid_17_downto_16);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("global_mcid_17_downto_16", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ip_ingress_cmp_mcid_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ip_ingress_cmp_mcid_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ip_ingress_cmp_mcid_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_IP_INGRESS_CMP_MCID_STATIC_TABLE_ACTION_SET_VALUE) {
        bv.set_bits(0, 0, payloads.set_value.pack());
    }
    
    return bv;
}


void npl_ip_ingress_cmp_mcid_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ip_ingress_cmp_mcid_static_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_IP_INGRESS_CMP_MCID_STATIC_TABLE_ACTION_SET_VALUE) {
        payloads.set_value.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_ip_ingress_cmp_mcid_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_ingress_cmp_mcid_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ip_ingress_cmp_mcid_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IP_INGRESS_CMP_MCID_STATIC_TABLE_ACTION_SET_VALUE) {
        fs_result.subfields.emplace_back("set_value", payloads.set_value.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ip_ingress_cmp_mcid_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_ingress_cmp_mcid_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_mc_local_inject_type_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, current_protocol);
    
    return bv;
}

void npl_ip_mc_local_inject_type_static_table_key_t::unpack(bit_vector64_t bv)
{
    current_protocol = (npl_protocol_type_e)bv.bits(4, 0).get_value();
    
}

field_structure npl_ip_mc_local_inject_type_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_mc_local_inject_type_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(current_protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("current_protocol", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ip_mc_local_inject_type_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ip_mc_local_inject_type_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ip_mc_local_inject_type_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_IP_MC_LOCAL_INJECT_TYPE_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.pd_ene_encap_data_inject_header_type);
    }
    
    return bv;
}


void npl_ip_mc_local_inject_type_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ip_mc_local_inject_type_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_IP_MC_LOCAL_INJECT_TYPE_STATIC_TABLE_ACTION_WRITE) {
        payloads.pd_ene_encap_data_inject_header_type = (npl_inject_header_type_e)bv.bits(7, 0).get_value();
    }
    
}


field_structure npl_ip_mc_local_inject_type_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_mc_local_inject_type_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ip_mc_local_inject_type_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IP_MC_LOCAL_INJECT_TYPE_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = npl_enum_to_string(payloads.pd_ene_encap_data_inject_header_type);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.pd_ene_encap_data_inject_header_type", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_ip_mc_local_inject_type_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_mc_local_inject_type_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, npe_macro_id);
    return bv;
}

void npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    npe_macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npe_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npe_macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_mc_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, collapsed_mc);
    bv.set_bits(1, 1, same_l3_int);
    
    return bv;
}

void npl_ip_mc_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    collapsed_mc = (npl_bool_e)bv.bits(0, 0).get_value();
    same_l3_int = bv.bits(1, 1).get_value();
    
}

field_structure npl_ip_mc_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_mc_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(collapsed_mc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("collapsed_mc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(same_l3_int);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("same_l3_int", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ip_mc_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ip_mc_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ip_mc_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_IP_MC_NEXT_MACRO_STATIC_TABLE_ACTION_SET_NPE_NEXT_MACRO) {
        bv.set_bits(9, 0, payloads.set_npe_next_macro.pack());
    }
    
    return bv;
}


void npl_ip_mc_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ip_mc_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_IP_MC_NEXT_MACRO_STATIC_TABLE_ACTION_SET_NPE_NEXT_MACRO) {
        payloads.set_npe_next_macro.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_ip_mc_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_mc_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ip_mc_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IP_MC_NEXT_MACRO_STATIC_TABLE_ACTION_SET_NPE_NEXT_MACRO) {
        fs_result.subfields.emplace_back("set_npe_next_macro", payloads.set_npe_next_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ip_mc_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_mc_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_meter_profile_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, qos_id);
    
    return bv;
}

void npl_ip_meter_profile_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    qos_id = bv.bits(3, 0).get_value();
    
}

field_structure npl_ip_meter_profile_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_meter_profile_mapping_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(qos_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("qos_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ip_meter_profile_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ip_meter_profile_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ip_meter_profile_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_IP_METER_PROFILE_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(3, 0, payloads.slp_qos_id);
    }
    
    return bv;
}


void npl_ip_meter_profile_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ip_meter_profile_mapping_table_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_IP_METER_PROFILE_MAPPING_TABLE_ACTION_WRITE) {
        payloads.slp_qos_id = bv.bits(3, 0).get_value();
    }
    
}


field_structure npl_ip_meter_profile_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_meter_profile_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ip_meter_profile_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IP_METER_PROFILE_MAPPING_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.slp_qos_id);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.slp_qos_id", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_ip_meter_profile_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_meter_profile_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_prefix_destination_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 17);
    
    bv.set_bits(16, 0, ip_prefix_ptr);
    
    return bv;
}

void npl_ip_prefix_destination_table_key_t::unpack(bit_vector64_t bv)
{
    ip_prefix_ptr = bv.bits(16, 0).get_value();
    
}

field_structure npl_ip_prefix_destination_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_prefix_destination_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ip_prefix_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_prefix_ptr", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ip_prefix_destination_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ip_prefix_destination_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ip_prefix_destination_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_IP_PREFIX_DESTINATION_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.prefix_destination.pack());
    }
    
    return bv;
}


void npl_ip_prefix_destination_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ip_prefix_destination_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_IP_PREFIX_DESTINATION_TABLE_ACTION_WRITE) {
        payloads.prefix_destination.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_ip_prefix_destination_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_prefix_destination_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ip_prefix_destination_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IP_PREFIX_DESTINATION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.prefix_destination", payloads.prefix_destination.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ip_prefix_destination_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_prefix_destination_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_relay_to_vni_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 21);
    
    bv.set_bits(10, 0, l3_relay_id.pack());
    bv.set_bits(20, 11, overlay_nh);
    
    return bv;
}

void npl_ip_relay_to_vni_table_key_t::unpack(bit_vector64_t bv)
{
    l3_relay_id.unpack(bv.bits(10, 0));
    overlay_nh = bv.bits(20, 11).get_value();
    
}

field_structure npl_ip_relay_to_vni_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_relay_to_vni_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    fs_subfield.flat_value = to_hex_string(overlay_nh);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("overlay_nh", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ip_relay_to_vni_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ip_relay_to_vni_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ip_relay_to_vni_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(119, 112, action);
    if (action == NPL_IP_RELAY_TO_VNI_TABLE_ACTION_WRITE) {
        bv.set_bits(111, 0, payloads.l3_vxlan_relay_encap_data.pack());
    }
    
    return bv;
}


void npl_ip_relay_to_vni_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ip_relay_to_vni_table_action_e)bv.bits(119, 112).get_value();
    if (action == NPL_IP_RELAY_TO_VNI_TABLE_ACTION_WRITE) {
        payloads.l3_vxlan_relay_encap_data.unpack(bv.bits(111, 0));
    }
    
}


field_structure npl_ip_relay_to_vni_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_relay_to_vni_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ip_relay_to_vni_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IP_RELAY_TO_VNI_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.l3_vxlan_relay_encap_data", payloads.l3_vxlan_relay_encap_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ip_relay_to_vni_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_relay_to_vni_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_rx_global_counter_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_ip_rx_global_counter_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_ip_rx_global_counter_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_rx_global_counter_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ip_rx_global_counter_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ip_rx_global_counter_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ip_rx_global_counter_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_IP_RX_GLOBAL_COUNTER_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.global_counter.pack());
    }
    
    return bv;
}


void npl_ip_rx_global_counter_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ip_rx_global_counter_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_IP_RX_GLOBAL_COUNTER_TABLE_ACTION_WRITE) {
        payloads.global_counter.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_ip_rx_global_counter_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_rx_global_counter_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ip_rx_global_counter_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IP_RX_GLOBAL_COUNTER_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.global_counter", payloads.global_counter.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ip_rx_global_counter_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_rx_global_counter_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_ver_mc_static_table_set_value_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    bv.set_bits(2, 2, v4_offset_zero);
    bv.set_bits(1, 0, ip_ver_mc.pack());
    return bv;
}

void npl_ip_ver_mc_static_table_set_value_payload_t::unpack(bit_vector64_t bv)
{
    v4_offset_zero = bv.bits(2, 2).get_value();
    ip_ver_mc.unpack(bv.bits(1, 0));
}

field_structure npl_ip_ver_mc_static_table_set_value_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_ver_mc_static_table_set_value_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(v4_offset_zero);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("v4_offset_zero", fs_subfield);
    
    fs_result.subfields.emplace_back("ip_ver_mc", ip_ver_mc.to_field_structure());
    return fs_result;
}
std::string to_string(npl_ip_ver_mc_static_table_set_value_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_ver_mc_static_table_set_value_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ip_ver_mc_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 26);
    
    bv.set_bits(12, 0, v4_frag_offset);
    bv.set_bits(16, 13, v4_sip_31_28);
    bv.set_bits(24, 17, v6_sip_127_120);
    bv.set_bits(25, 25, is_v6);
    
    return bv;
}

void npl_ip_ver_mc_static_table_key_t::unpack(bit_vector64_t bv)
{
    v4_frag_offset = bv.bits(12, 0).get_value();
    v4_sip_31_28 = bv.bits(16, 13).get_value();
    v6_sip_127_120 = bv.bits(24, 17).get_value();
    is_v6 = bv.bits(25, 25).get_value();
    
}

field_structure npl_ip_ver_mc_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_ver_mc_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(v4_frag_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("v4_frag_offset", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(v4_sip_31_28);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("v4_sip_31_28", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(v6_sip_127_120);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("v6_sip_127_120", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_v6);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_v6", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ip_ver_mc_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ip_ver_mc_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ip_ver_mc_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_IP_VER_MC_STATIC_TABLE_ACTION_SET_VALUE) {
        bv.set_bits(2, 0, payloads.set_value.pack());
    }
    
    return bv;
}


void npl_ip_ver_mc_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ip_ver_mc_static_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_IP_VER_MC_STATIC_TABLE_ACTION_SET_VALUE) {
        payloads.set_value.unpack(bv.bits(2, 0));
    }
    
}


field_structure npl_ip_ver_mc_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ip_ver_mc_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ip_ver_mc_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IP_VER_MC_STATIC_TABLE_ACTION_SET_VALUE) {
        fs_result.subfields.emplace_back("set_value", payloads.set_value.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ip_ver_mc_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ip_ver_mc_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    bv.set_bits(15, 11, dummy_bits);
    bv.set_bits(10, 10, is_valid);
    bv.set_bits(9, 8, acl_l4_protocol);
    bv.set_bits(7, 0, protocol_type);
    return bv;
}

void npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t::unpack(bit_vector64_t bv)
{
    dummy_bits = bv.bits(15, 11).get_value();
    is_valid = bv.bits(10, 10).get_value();
    acl_l4_protocol = bv.bits(9, 8).get_value();
    protocol_type = bv.bits(7, 0).get_value();
}

field_structure npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dummy_bits);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dummy_bits", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_valid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_valid", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(acl_l4_protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_l4_protocol", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(protocol_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("protocol_type", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, protocol);
    
    return bv;
}

void npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t::unpack(bit_vector64_t bv)
{
    protocol = bv.bits(7, 0).get_value();
    
}

field_structure npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("protocol", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv4_acl_map_protocol_type_to_protocol_number_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_IPV4_ACL_MAP_PROTOCOL_TYPE_TO_PROTOCOL_NUMBER_TABLE_ACTION_UPDATE) {
        bv.set_bits(15, 0, payloads.update.pack());
    }
    
    return bv;
}


void npl_ipv4_acl_map_protocol_type_to_protocol_number_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv4_acl_map_protocol_type_to_protocol_number_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_IPV4_ACL_MAP_PROTOCOL_TYPE_TO_PROTOCOL_NUMBER_TABLE_ACTION_UPDATE) {
        payloads.update.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_ipv4_acl_map_protocol_type_to_protocol_number_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_acl_map_protocol_type_to_protocol_number_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_acl_map_protocol_type_to_protocol_number_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_ACL_MAP_PROTOCOL_TYPE_TO_PROTOCOL_NUMBER_TABLE_ACTION_UPDATE) {
        fs_result.subfields.emplace_back("update", payloads.update.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_acl_map_protocol_type_to_protocol_number_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_acl_map_protocol_type_to_protocol_number_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_acl_sport_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(1, 0, acl_l4_protocol);
    bv.set_bits(2, 2, acl_is_valid);
    
    return bv;
}

void npl_ipv4_acl_sport_static_table_key_t::unpack(bit_vector64_t bv)
{
    acl_l4_protocol = bv.bits(1, 0).get_value();
    acl_is_valid = bv.bits(2, 2).get_value();
    
}

field_structure npl_ipv4_acl_sport_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_acl_sport_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(acl_l4_protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_l4_protocol", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(acl_is_valid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_is_valid", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv4_acl_sport_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_acl_sport_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv4_acl_sport_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(7, 0, action);
    
    return bv;
}


void npl_ipv4_acl_sport_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv4_acl_sport_static_table_action_e)bv.bits(7, 0).get_value();
    
}


field_structure npl_ipv4_acl_sport_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_acl_sport_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_acl_sport_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv4_acl_sport_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_acl_sport_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 21);
    
    bv.set_bits(3, 0, tunnel_type);
    bv.set_bits(9, 4, my_dip_index);
    bv.set_bits(20, 10, l3_relay_id.pack());
    
    return bv;
}

void npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_key_t::unpack(bit_vector64_t bv)
{
    tunnel_type = (npl_tunnel_type_e)bv.bits(3, 0).get_value();
    my_dip_index = bv.bits(9, 4).get_value();
    l3_relay_id.unpack(bv.bits(20, 10));
    
}

field_structure npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(tunnel_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tunnel_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(my_dip_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("my_dip_index", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(136, 129, action);
    if (action == NPL_IPV4_IP_TUNNEL_TERMINATION_DIP_INDEX_TT0_TABLE_ACTION_WRITE) {
        bv.set_bits(128, 0, payloads.term_tt0_attributes.pack());
    }
    
    return bv;
}


void npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_action_e)bv.bits(136, 129).get_value();
    if (action == NPL_IPV4_IP_TUNNEL_TERMINATION_DIP_INDEX_TT0_TABLE_ACTION_WRITE) {
        payloads.term_tt0_attributes.unpack(bv.bits(128, 0));
    }
    
}


field_structure npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_IP_TUNNEL_TERMINATION_DIP_INDEX_TT0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.term_tt0_attributes", payloads.term_tt0_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 53);
    
    bv.set_bits(3, 0, tunnel_type);
    bv.set_bits(9, 4, my_dip_index);
    bv.set_bits(41, 10, sip);
    bv.set_bits(52, 42, l3_relay_id.pack());
    
    return bv;
}

void npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_key_t::unpack(bit_vector64_t bv)
{
    tunnel_type = (npl_tunnel_type_e)bv.bits(3, 0).get_value();
    my_dip_index = bv.bits(9, 4).get_value();
    sip = bv.bits(41, 10).get_value();
    l3_relay_id.unpack(bv.bits(52, 42));
    
}

field_structure npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(tunnel_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tunnel_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(my_dip_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("my_dip_index", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(sip);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sip", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(136, 129, action);
    if (action == NPL_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT0_TABLE_ACTION_WRITE) {
        bv.set_bits(128, 0, payloads.term_tt0_attributes.pack());
    }
    
    return bv;
}


void npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_action_e)bv.bits(136, 129).get_value();
    if (action == NPL_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT0_TABLE_ACTION_WRITE) {
        payloads.term_tt0_attributes.unpack(bv.bits(128, 0));
    }
    
}


field_structure npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.term_tt0_attributes", payloads.term_tt0_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 53);
    
    bv.set_bits(3, 0, tunnel_type);
    bv.set_bits(9, 4, my_dip_index);
    bv.set_bits(41, 10, sip);
    bv.set_bits(52, 42, l3_relay_id.pack());
    
    return bv;
}

void npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_key_t::unpack(bit_vector64_t bv)
{
    tunnel_type = (npl_tunnel_type_e)bv.bits(3, 0).get_value();
    my_dip_index = bv.bits(9, 4).get_value();
    sip = bv.bits(41, 10).get_value();
    l3_relay_id.unpack(bv.bits(52, 42));
    
}

field_structure npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(tunnel_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tunnel_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(my_dip_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("my_dip_index", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(sip);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sip", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(136, 129, action);
    if (action == NPL_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT1_TABLE_ACTION_WRITE) {
        bv.set_bits(128, 0, payloads.term_tt1_attributes.pack());
    }
    
    return bv;
}


void npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_action_e)bv.bits(136, 129).get_value();
    if (action == NPL_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT1_TABLE_ACTION_WRITE) {
        payloads.term_tt1_attributes.unpack(bv.bits(128, 0));
    }
    
}


field_structure npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.term_tt1_attributes", payloads.term_tt1_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_lpm_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 43);
    
    bv.set_bits(31, 0, ipv4_ip_address_address);
    bv.set_bits(42, 32, l3_relay_id.pack());
    
    return bv;
}

void npl_ipv4_lpm_table_key_t::unpack(bit_vector64_t bv)
{
    ipv4_ip_address_address = bv.bits(31, 0).get_value();
    l3_relay_id.unpack(bv.bits(42, 32));
    
}

field_structure npl_ipv4_lpm_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_lpm_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ipv4_ip_address_address);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ipv4_ip_address_address", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv4_lpm_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_lpm_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv4_lpm_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_IPV4_LPM_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.lpm_payload.pack());
    }
    
    return bv;
}


void npl_ipv4_lpm_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv4_lpm_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_IPV4_LPM_TABLE_ACTION_WRITE) {
        payloads.lpm_payload.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_ipv4_lpm_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_lpm_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_lpm_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_LPM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lpm_payload", payloads.lpm_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_lpm_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_lpm_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 64);
    bv.set_bits(63, 48, lpts_first_result_encap_data_msb.pack());
    bv.set_bits(47, 32, punt_encap_data_lsb.pack());
    bv.set_bits(31, 0, lpts_cntr_and_second_lookup_index.pack());
    return bv;
}

void npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t::unpack(bit_vector64_t bv)
{
    lpts_first_result_encap_data_msb.unpack(bv.bits(63, 48));
    punt_encap_data_lsb.unpack(bv.bits(47, 32));
    lpts_cntr_and_second_lookup_index.unpack(bv.bits(31, 0));
}

field_structure npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lpts_first_result_encap_data_msb", lpts_first_result_encap_data_msb.to_field_structure());
    fs_result.subfields.emplace_back("punt_encap_data_lsb", punt_encap_data_lsb.to_field_structure());
    fs_result.subfields.emplace_back("lpts_cntr_and_second_lookup_index", lpts_cntr_and_second_lookup_index.to_field_structure());
    return fs_result;
}
std::string to_string(npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_ipv4_lpts_table_key_t::pack(void) const
{
    bit_vector192_t bv(0, 153);
    
    bv.set_bits(1, 0, 0x2);
    bv.set_bits(33, 2, sip);
    bv.set_bits(47, 34, ip_length);
    bv.set_bits(61, 48, v4_frag);
    bv.set_bits(72, 62, l3_relay_id.pack());
    bv.set_bits(104, 73, l4_ports.pack());
    bv.set_bits(112, 105, l4_protocol);
    bv.set_bits(144, 113, og_codes.pack());
    bv.set_bits(145, 145, ttl_255);
    bv.set_bits(146, 146, established);
    bv.set_bits(150, 147, app_id);
    bv.set_bits(151, 151, is_mc);
    bv.set_bits(152, 152, fragmented);
    
    return bv;
}

void npl_ipv4_lpts_table_key_t::unpack(bit_vector192_t bv)
{
    sip = bv.bits(33, 2).get_value();
    ip_length = bv.bits(47, 34).get_value();
    v4_frag = bv.bits(61, 48).get_value();
    l3_relay_id.unpack(bv.bits(72, 62));
    l4_ports.unpack(bv.bits(104, 73));
    l4_protocol = bv.bits(112, 105).get_value();
    og_codes.unpack(bv.bits(144, 113));
    ttl_255 = bv.bits(145, 145).get_value();
    established = bv.bits(146, 146).get_value();
    app_id = bv.bits(150, 147).get_value();
    is_mc = bv.bits(151, 151).get_value();
    fragmented = bv.bits(152, 152).get_value();
    
}

field_structure npl_ipv4_lpts_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_lpts_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x2);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x2", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(sip);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sip", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ip_length);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_length", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(v4_frag);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("v4_frag", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    fs_result.subfields.emplace_back("l4_ports", l4_ports.to_field_structure());
    fs_subfield.flat_value = to_hex_string(l4_protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l4_protocol", fs_subfield);
    
    fs_result.subfields.emplace_back("og_codes", og_codes.to_field_structure());
    fs_subfield.flat_value = to_hex_string(ttl_255);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ttl_255", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(established);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("established", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(app_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("app_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_mc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_mc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(fragmented);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fragmented", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv4_lpts_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_lpts_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ipv4_lpts_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_IPV4_LPTS_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT) {
        bv.set_bits(63, 0, payloads.lpts_first_lookup_result.pack());
    }
    
    return bv;
}


void npl_ipv4_lpts_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ipv4_lpts_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_IPV4_LPTS_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT) {
        payloads.lpts_first_lookup_result.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ipv4_lpts_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_lpts_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_lpts_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_LPTS_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT) {
        fs_result.subfields.emplace_back("lpts_first_lookup_result", payloads.lpts_first_lookup_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_lpts_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_lpts_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_og_pcl_em_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 44);
    
    bv.set_bits(19, 0, ip_address_19_0);
    bv.set_bits(20, 20, 0x0);
    bv.set_bits(32, 21, ip_address_31_20);
    bv.set_bits(40, 33, pcl_id.pack());
    bv.set_bits(43, 41, 0x7);
    
    return bv;
}

void npl_ipv4_og_pcl_em_table_key_t::unpack(bit_vector64_t bv)
{
    ip_address_19_0 = bv.bits(19, 0).get_value();
    ip_address_31_20 = bv.bits(32, 21).get_value();
    pcl_id.unpack(bv.bits(40, 33));
    
}

field_structure npl_ipv4_og_pcl_em_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_og_pcl_em_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ip_address_19_0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_address_19_0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ip_address_31_20);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_address_31_20", fs_subfield);
    
    fs_result.subfields.emplace_back("pcl_id", pcl_id.to_field_structure());
    fs_subfield.flat_value = to_hex_string(0x7);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x7", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv4_og_pcl_em_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_og_pcl_em_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ipv4_og_pcl_em_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_IPV4_OG_PCL_EM_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.og_em_lookup_result.pack());
    }
    
    return bv;
}


void npl_ipv4_og_pcl_em_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ipv4_og_pcl_em_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_IPV4_OG_PCL_EM_TABLE_ACTION_WRITE) {
        payloads.og_em_lookup_result.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ipv4_og_pcl_em_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_og_pcl_em_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_og_pcl_em_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_OG_PCL_EM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.og_em_lookup_result", payloads.og_em_lookup_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_og_pcl_em_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_og_pcl_em_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_og_pcl_lpm_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 43);
    
    bv.set_bits(31, 0, ip_address);
    bv.set_bits(39, 32, pcl_id.pack());
    bv.set_bits(42, 40, 0x7);
    
    return bv;
}

void npl_ipv4_og_pcl_lpm_table_key_t::unpack(bit_vector64_t bv)
{
    ip_address = bv.bits(31, 0).get_value();
    pcl_id.unpack(bv.bits(39, 32));
    
}

field_structure npl_ipv4_og_pcl_lpm_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_og_pcl_lpm_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ip_address);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_address", fs_subfield);
    
    fs_result.subfields.emplace_back("pcl_id", pcl_id.to_field_structure());
    fs_subfield.flat_value = to_hex_string(0x7);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x7", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv4_og_pcl_lpm_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_og_pcl_lpm_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv4_og_pcl_lpm_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_IPV4_OG_PCL_LPM_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.lpm_code.pack());
    }
    
    return bv;
}


void npl_ipv4_og_pcl_lpm_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv4_og_pcl_lpm_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_IPV4_OG_PCL_LPM_TABLE_ACTION_WRITE) {
        payloads.lpm_code.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_ipv4_og_pcl_lpm_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_og_pcl_lpm_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_og_pcl_lpm_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_OG_PCL_LPM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lpm_code", payloads.lpm_code.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_og_pcl_lpm_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_og_pcl_lpm_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_rtf_conf_set_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(1, 0, rtf_step.pack());
    bv.set_bits(9, 2, lp_rtf_conf_set.pack());
    
    return bv;
}

void npl_ipv4_rtf_conf_set_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    rtf_step.unpack(bv.bits(1, 0));
    lp_rtf_conf_set.unpack(bv.bits(9, 2));
    
}

field_structure npl_ipv4_rtf_conf_set_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_rtf_conf_set_mapping_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("rtf_step", rtf_step.to_field_structure());
    fs_result.subfields.emplace_back("lp_rtf_conf_set", lp_rtf_conf_set.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv4_rtf_conf_set_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_rtf_conf_set_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv4_rtf_conf_set_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_IPV4_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(23, 0, payloads.ipv4_rtf_iteration_prop.pack());
    }
    
    return bv;
}


void npl_ipv4_rtf_conf_set_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv4_rtf_conf_set_mapping_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_IPV4_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
        payloads.ipv4_rtf_iteration_prop.unpack(bv.bits(23, 0));
    }
    
}


field_structure npl_ipv4_rtf_conf_set_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_rtf_conf_set_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_rtf_conf_set_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ipv4_rtf_iteration_prop", payloads.ipv4_rtf_iteration_prop.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_rtf_conf_set_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_rtf_conf_set_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv4_vrf_dip_em_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 44);
    
    bv.set_bits(19, 0, ip_address_19_0);
    bv.set_bits(20, 20, 0x0);
    bv.set_bits(32, 21, ip_address_31_20);
    bv.set_bits(43, 33, l3_relay_id.pack());
    
    return bv;
}

void npl_ipv4_vrf_dip_em_table_key_t::unpack(bit_vector64_t bv)
{
    ip_address_19_0 = bv.bits(19, 0).get_value();
    ip_address_31_20 = bv.bits(32, 21).get_value();
    l3_relay_id.unpack(bv.bits(43, 33));
    
}

field_structure npl_ipv4_vrf_dip_em_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_vrf_dip_em_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ip_address_19_0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_address_19_0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ip_address_31_20);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_address_31_20", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv4_vrf_dip_em_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_vrf_dip_em_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ipv4_vrf_dip_em_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_IPV4_VRF_DIP_EM_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.em_lookup_result.pack());
    }
    
    return bv;
}


void npl_ipv4_vrf_dip_em_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ipv4_vrf_dip_em_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_IPV4_VRF_DIP_EM_TABLE_ACTION_WRITE) {
        payloads.em_lookup_result.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ipv4_vrf_dip_em_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_vrf_dip_em_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_vrf_dip_em_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_VRF_DIP_EM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.em_lookup_result", payloads.em_lookup_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_vrf_dip_em_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_vrf_dip_em_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_ipv4_vrf_s_g_table_key_t::pack(void) const
{
    bit_vector128_t bv(0, 71);
    
    bv.set_bits(7, 0, dip_27_20_);
    bv.set_bits(39, 8, sip);
    bv.set_bits(59, 40, dip_19_0_);
    bv.set_bits(70, 60, l3_relay_id.pack());
    
    return bv;
}

void npl_ipv4_vrf_s_g_table_key_t::unpack(bit_vector128_t bv)
{
    dip_27_20_ = bv.bits(7, 0).get_value();
    sip = bv.bits(39, 8).get_value();
    dip_19_0_ = bv.bits(59, 40).get_value();
    l3_relay_id.unpack(bv.bits(70, 60));
    
}

field_structure npl_ipv4_vrf_s_g_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_vrf_s_g_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dip_27_20_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dip_27_20_", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(sip);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sip", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dip_19_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dip_19_0_", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv4_vrf_s_g_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv4_vrf_s_g_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ipv4_vrf_s_g_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_IPV4_VRF_S_G_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.vrf_s_g_hw_ip_mc_result.pack());
    }
    
    return bv;
}


void npl_ipv4_vrf_s_g_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ipv4_vrf_s_g_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_IPV4_VRF_S_G_TABLE_ACTION_WRITE) {
        payloads.vrf_s_g_hw_ip_mc_result.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ipv4_vrf_s_g_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv4_vrf_s_g_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv4_vrf_s_g_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV4_VRF_S_G_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.vrf_s_g_hw_ip_mc_result", payloads.vrf_s_g_hw_ip_mc_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv4_vrf_s_g_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv4_vrf_s_g_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv6_acl_sport_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(1, 0, acl_l4_protocol);
    bv.set_bits(2, 2, acl_is_valid);
    
    return bv;
}

void npl_ipv6_acl_sport_static_table_key_t::unpack(bit_vector64_t bv)
{
    acl_l4_protocol = bv.bits(1, 0).get_value();
    acl_is_valid = bv.bits(2, 2).get_value();
    
}

field_structure npl_ipv6_acl_sport_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_acl_sport_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(acl_l4_protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_l4_protocol", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(acl_is_valid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_is_valid", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv6_acl_sport_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_acl_sport_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv6_acl_sport_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(7, 0, action);
    
    return bv;
}


void npl_ipv6_acl_sport_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv6_acl_sport_static_table_action_e)bv.bits(7, 0).get_value();
    
}


field_structure npl_ipv6_acl_sport_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_acl_sport_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_acl_sport_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv6_acl_sport_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_acl_sport_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv6_first_fragment_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(0, 0, packet_not_first_fragment);
    bv.set_bits(1, 1, saved_not_first_fragment);
    bv.set_bits(4, 2, acl_changed_destination);
    bv.set_bits(5, 5, acl_on_outer);
    
    return bv;
}

void npl_ipv6_first_fragment_static_table_key_t::unpack(bit_vector64_t bv)
{
    packet_not_first_fragment = bv.bits(0, 0).get_value();
    saved_not_first_fragment = bv.bits(1, 1).get_value();
    acl_changed_destination = bv.bits(4, 2).get_value();
    acl_on_outer = bv.bits(5, 5).get_value();
    
}

field_structure npl_ipv6_first_fragment_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_first_fragment_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(packet_not_first_fragment);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_not_first_fragment", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(saved_not_first_fragment);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("saved_not_first_fragment", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(acl_changed_destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_changed_destination", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(acl_on_outer);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_on_outer", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv6_first_fragment_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_first_fragment_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv6_first_fragment_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_IPV6_FIRST_FRAGMENT_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.ip_first_fragment.pack());
    }
    
    return bv;
}


void npl_ipv6_first_fragment_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv6_first_fragment_static_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_IPV6_FIRST_FRAGMENT_STATIC_TABLE_ACTION_WRITE) {
        payloads.ip_first_fragment.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_ipv6_first_fragment_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_first_fragment_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_first_fragment_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV6_FIRST_FRAGMENT_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ip_first_fragment", payloads.ip_first_fragment.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv6_first_fragment_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_first_fragment_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_ipv6_lpm_table_key_t::pack(void) const
{
    bit_vector192_t bv(0, 139);
    
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = ipv6_ip_address_address;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            bv.set_bits(msb, lsb, *p);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    bv.set_bits(138, 128, l3_relay_id.pack());
    
    return bv;
}

void npl_ipv6_lpm_table_key_t::unpack(bit_vector192_t bv)
{
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        uint64_t * p = ipv6_ip_address_address;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            *p = bv.bits(msb, lsb).get_value();
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    l3_relay_id.unpack(bv.bits(138, 128));
    
}

field_structure npl_ipv6_lpm_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_lpm_table_key_t";
    field_structure fs_subfield;
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = ipv6_ip_address_address;
        int i = 0;
        while (msb < max_msb) {
            field_structure fs_sub;
            fs_sub.field_type = "int";
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            fs_sub.flat_value = to_hex_string(*p);
            fs_result.subfields.emplace_back("primitive_" + std::to_string(i), fs_sub);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            i++;
            p++;
        }
    } // array field end
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv6_lpm_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_lpm_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv6_lpm_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_IPV6_LPM_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.lpm_payload.pack());
    }
    
    return bv;
}


void npl_ipv6_lpm_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv6_lpm_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_IPV6_LPM_TABLE_ACTION_WRITE) {
        payloads.lpm_payload.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_ipv6_lpm_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_lpm_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_lpm_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV6_LPM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lpm_payload", payloads.lpm_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv6_lpm_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_lpm_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 64);
    bv.set_bits(63, 48, lpts_first_result_encap_data_msb.pack());
    bv.set_bits(47, 32, punt_encap_data_lsb.pack());
    bv.set_bits(31, 0, lpts_cntr_and_second_lookup_index.pack());
    return bv;
}

void npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t::unpack(bit_vector64_t bv)
{
    lpts_first_result_encap_data_msb.unpack(bv.bits(63, 48));
    punt_encap_data_lsb.unpack(bv.bits(47, 32));
    lpts_cntr_and_second_lookup_index.unpack(bv.bits(31, 0));
}

field_structure npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lpts_first_result_encap_data_msb", lpts_first_result_encap_data_msb.to_field_structure());
    fs_result.subfields.emplace_back("punt_encap_data_lsb", punt_encap_data_lsb.to_field_structure());
    fs_result.subfields.emplace_back("lpts_cntr_and_second_lookup_index", lpts_cntr_and_second_lookup_index.to_field_structure());
    return fs_result;
}
std::string to_string(npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector384_t npl_ipv6_lpts_table_key_t::pack(void) const
{
    bit_vector384_t bv(0, 319);
    
    bv.set_bits(3, 0, 0xd);
    bv.set_bits(16, 4, 0x0);
    bv.set_bits(80, 17, pad);
    bv.set_bits(96, 81, ip_length);
    bv.set_bits(112, 97, dst_port);
    bv.set_bits(120, 113, l4_protocol);
    bv.set_bits(152, 121, og_codes.pack());
    bv.set_bits(153, 153, ttl_255);
    bv.set_bits(154, 154, established);
    bv.set_bits(158, 155, app_id);
    bv.set_bits(159, 159, is_mc);
    bv.set_bits(163, 160, 0xd);
    bv.set_bits(174, 164, l3_relay_id.pack());
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 175;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = sip;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            bv.set_bits(msb, lsb, *p);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    bv.set_bits(318, 303, src_port);
    
    return bv;
}

void npl_ipv6_lpts_table_key_t::unpack(bit_vector384_t bv)
{
    pad = bv.bits(80, 17).get_value();
    ip_length = bv.bits(96, 81).get_value();
    dst_port = bv.bits(112, 97).get_value();
    l4_protocol = bv.bits(120, 113).get_value();
    og_codes.unpack(bv.bits(152, 121));
    ttl_255 = bv.bits(153, 153).get_value();
    established = bv.bits(154, 154).get_value();
    app_id = bv.bits(158, 155).get_value();
    is_mc = bv.bits(159, 159).get_value();
    l3_relay_id.unpack(bv.bits(174, 164));
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 175;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        uint64_t * p = sip;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            *p = bv.bits(msb, lsb).get_value();
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    src_port = bv.bits(318, 303).get_value();
    
}

field_structure npl_ipv6_lpts_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_lpts_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0xd);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0xd", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pad);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pad", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ip_length);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_length", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dst_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dst_port", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(l4_protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l4_protocol", fs_subfield);
    
    fs_result.subfields.emplace_back("og_codes", og_codes.to_field_structure());
    fs_subfield.flat_value = to_hex_string(ttl_255);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ttl_255", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(established);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("established", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(app_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("app_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_mc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_mc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0xd);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0xd", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 175;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = sip;
        int i = 0;
        while (msb < max_msb) {
            field_structure fs_sub;
            fs_sub.field_type = "int";
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            fs_sub.flat_value = to_hex_string(*p);
            fs_result.subfields.emplace_back("primitive_" + std::to_string(i), fs_sub);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            i++;
            p++;
        }
    } // array field end
    
    fs_subfield.flat_value = to_hex_string(src_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("src_port", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv6_lpts_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_lpts_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ipv6_lpts_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_IPV6_LPTS_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT) {
        bv.set_bits(63, 0, payloads.lpts_first_lookup_result.pack());
    }
    
    return bv;
}


void npl_ipv6_lpts_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ipv6_lpts_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_IPV6_LPTS_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT) {
        payloads.lpts_first_lookup_result.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ipv6_lpts_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_lpts_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_lpts_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV6_LPTS_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT) {
        fs_result.subfields.emplace_back("lpts_first_lookup_result", payloads.lpts_first_lookup_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv6_lpts_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_lpts_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv6_mc_select_qos_id_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, mc_termination_hit);
    
    return bv;
}

void npl_ipv6_mc_select_qos_id_key_t::unpack(bit_vector64_t bv)
{
    mc_termination_hit = bv.bits(0, 0).get_value();
    
}

field_structure npl_ipv6_mc_select_qos_id_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_mc_select_qos_id_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(mc_termination_hit);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mc_termination_hit", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv6_mc_select_qos_id_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_mc_select_qos_id_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv6_mc_select_qos_id_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(7, 0, action);
    
    return bv;
}


void npl_ipv6_mc_select_qos_id_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv6_mc_select_qos_id_action_e)bv.bits(7, 0).get_value();
    
}


field_structure npl_ipv6_mc_select_qos_id_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_mc_select_qos_id_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_mc_select_qos_id_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv6_mc_select_qos_id_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_mc_select_qos_id_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_ipv6_og_pcl_em_table_key_t::pack(void) const
{
    bit_vector192_t bv(0, 140);
    
    bv.set_bits(0, 0, 0x0);
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 1;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = ip_address;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            bv.set_bits(msb, lsb, *p);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    bv.set_bits(136, 129, pcl_id.pack());
    bv.set_bits(139, 137, 0x7);
    
    return bv;
}

void npl_ipv6_og_pcl_em_table_key_t::unpack(bit_vector192_t bv)
{
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 1;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        uint64_t * p = ip_address;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            *p = bv.bits(msb, lsb).get_value();
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    pcl_id.unpack(bv.bits(136, 129));
    
}

field_structure npl_ipv6_og_pcl_em_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_og_pcl_em_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 1;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = ip_address;
        int i = 0;
        while (msb < max_msb) {
            field_structure fs_sub;
            fs_sub.field_type = "int";
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            fs_sub.flat_value = to_hex_string(*p);
            fs_result.subfields.emplace_back("primitive_" + std::to_string(i), fs_sub);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            i++;
            p++;
        }
    } // array field end
    
    fs_result.subfields.emplace_back("pcl_id", pcl_id.to_field_structure());
    fs_subfield.flat_value = to_hex_string(0x7);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x7", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv6_og_pcl_em_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_og_pcl_em_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ipv6_og_pcl_em_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_IPV6_OG_PCL_EM_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.og_em_lookup_result.pack());
    }
    
    return bv;
}


void npl_ipv6_og_pcl_em_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ipv6_og_pcl_em_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_IPV6_OG_PCL_EM_TABLE_ACTION_WRITE) {
        payloads.og_em_lookup_result.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ipv6_og_pcl_em_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_og_pcl_em_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_og_pcl_em_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV6_OG_PCL_EM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.og_em_lookup_result", payloads.og_em_lookup_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv6_og_pcl_em_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_og_pcl_em_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_ipv6_og_pcl_lpm_table_key_t::pack(void) const
{
    bit_vector192_t bv(0, 139);
    
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = ip_address;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            bv.set_bits(msb, lsb, *p);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    bv.set_bits(135, 128, pcl_id.pack());
    bv.set_bits(138, 136, 0x7);
    
    return bv;
}

void npl_ipv6_og_pcl_lpm_table_key_t::unpack(bit_vector192_t bv)
{
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        uint64_t * p = ip_address;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            *p = bv.bits(msb, lsb).get_value();
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    pcl_id.unpack(bv.bits(135, 128));
    
}

field_structure npl_ipv6_og_pcl_lpm_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_og_pcl_lpm_table_key_t";
    field_structure fs_subfield;
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = ip_address;
        int i = 0;
        while (msb < max_msb) {
            field_structure fs_sub;
            fs_sub.field_type = "int";
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            fs_sub.flat_value = to_hex_string(*p);
            fs_result.subfields.emplace_back("primitive_" + std::to_string(i), fs_sub);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            i++;
            p++;
        }
    } // array field end
    
    fs_result.subfields.emplace_back("pcl_id", pcl_id.to_field_structure());
    fs_subfield.flat_value = to_hex_string(0x7);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x7", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ipv6_og_pcl_lpm_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_og_pcl_lpm_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv6_og_pcl_lpm_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_IPV6_OG_PCL_LPM_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.lpm_code.pack());
    }
    
    return bv;
}


void npl_ipv6_og_pcl_lpm_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv6_og_pcl_lpm_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_IPV6_OG_PCL_LPM_TABLE_ACTION_WRITE) {
        payloads.lpm_code.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_ipv6_og_pcl_lpm_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_og_pcl_lpm_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_og_pcl_lpm_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV6_OG_PCL_LPM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lpm_code", payloads.lpm_code.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv6_og_pcl_lpm_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_og_pcl_lpm_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv6_rtf_conf_set_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(1, 0, rtf_step.pack());
    bv.set_bits(9, 2, lp_rtf_conf_set.pack());
    
    return bv;
}

void npl_ipv6_rtf_conf_set_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    rtf_step.unpack(bv.bits(1, 0));
    lp_rtf_conf_set.unpack(bv.bits(9, 2));
    
}

field_structure npl_ipv6_rtf_conf_set_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_rtf_conf_set_mapping_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("rtf_step", rtf_step.to_field_structure());
    fs_result.subfields.emplace_back("lp_rtf_conf_set", lp_rtf_conf_set.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv6_rtf_conf_set_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_rtf_conf_set_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv6_rtf_conf_set_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_IPV6_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(23, 0, payloads.ipv6_rtf_iteration_prop.pack());
    }
    
    return bv;
}


void npl_ipv6_rtf_conf_set_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv6_rtf_conf_set_mapping_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_IPV6_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
        payloads.ipv6_rtf_iteration_prop.unpack(bv.bits(23, 0));
    }
    
}


field_structure npl_ipv6_rtf_conf_set_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_rtf_conf_set_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_rtf_conf_set_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV6_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ipv6_rtf_iteration_prop", payloads.ipv6_rtf_iteration_prop.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv6_rtf_conf_set_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_rtf_conf_set_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_ipv6_sip_compression_table_key_t::pack(void) const
{
    bit_vector128_t bv(0, 128);
    
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = ipv6_sip;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            bv.set_bits(msb, lsb, *p);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    
    return bv;
}

void npl_ipv6_sip_compression_table_key_t::unpack(bit_vector128_t bv)
{
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        uint64_t * p = ipv6_sip;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            *p = bv.bits(msb, lsb).get_value();
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    
}

field_structure npl_ipv6_sip_compression_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_sip_compression_table_key_t";
    field_structure fs_subfield;
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = ipv6_sip;
        int i = 0;
        while (msb < max_msb) {
            field_structure fs_sub;
            fs_sub.field_type = "int";
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            fs_sub.flat_value = to_hex_string(*p);
            fs_result.subfields.emplace_back("primitive_" + std::to_string(i), fs_sub);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            i++;
            p++;
        }
    } // array field end
    
    
    return fs_result;
}
std::string to_string(npl_ipv6_sip_compression_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_sip_compression_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ipv6_sip_compression_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_IPV6_SIP_COMPRESSION_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.compressed_sip);
    }
    
    return bv;
}


void npl_ipv6_sip_compression_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ipv6_sip_compression_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_IPV6_SIP_COMPRESSION_TABLE_ACTION_WRITE) {
        payloads.compressed_sip = bv.bits(15, 0).get_value();
    }
    
}


field_structure npl_ipv6_sip_compression_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_sip_compression_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_sip_compression_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV6_SIP_COMPRESSION_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.compressed_sip);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.compressed_sip", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_ipv6_sip_compression_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_sip_compression_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_ipv6_vrf_dip_em_table_key_t::pack(void) const
{
    bit_vector192_t bv(0, 140);
    
    bv.set_bits(0, 0, 0x0);
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 1;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = ipv6_ip_address_address;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            bv.set_bits(msb, lsb, *p);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    bv.set_bits(139, 129, l3_relay_id.pack());
    
    return bv;
}

void npl_ipv6_vrf_dip_em_table_key_t::unpack(bit_vector192_t bv)
{
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 1;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        uint64_t * p = ipv6_ip_address_address;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            *p = bv.bits(msb, lsb).get_value();
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    l3_relay_id.unpack(bv.bits(139, 129));
    
}

field_structure npl_ipv6_vrf_dip_em_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_vrf_dip_em_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 1;
        size_t max_msb = lsb + 128 - 1;
        size_t msb = 0;
        const uint64_t * p = ipv6_ip_address_address;
        int i = 0;
        while (msb < max_msb) {
            field_structure fs_sub;
            fs_sub.field_type = "int";
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            fs_sub.flat_value = to_hex_string(*p);
            fs_result.subfields.emplace_back("primitive_" + std::to_string(i), fs_sub);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            i++;
            p++;
        }
    } // array field end
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv6_vrf_dip_em_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_vrf_dip_em_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ipv6_vrf_dip_em_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_IPV6_VRF_DIP_EM_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.em_lookup_result.pack());
    }
    
    return bv;
}


void npl_ipv6_vrf_dip_em_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ipv6_vrf_dip_em_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_IPV6_VRF_DIP_EM_TABLE_ACTION_WRITE) {
        payloads.em_lookup_result.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ipv6_vrf_dip_em_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_vrf_dip_em_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_vrf_dip_em_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV6_VRF_DIP_EM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.em_lookup_result", payloads.em_lookup_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv6_vrf_dip_em_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_vrf_dip_em_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ipv6_vrf_s_g_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 59);
    
    bv.set_bits(31, 0, dip_32_lsb);
    bv.set_bits(47, 32, compressed_sip);
    bv.set_bits(58, 48, l3_relay_id.pack());
    
    return bv;
}

void npl_ipv6_vrf_s_g_table_key_t::unpack(bit_vector64_t bv)
{
    dip_32_lsb = bv.bits(31, 0).get_value();
    compressed_sip = bv.bits(47, 32).get_value();
    l3_relay_id.unpack(bv.bits(58, 48));
    
}

field_structure npl_ipv6_vrf_s_g_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_vrf_s_g_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dip_32_lsb);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dip_32_lsb", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(compressed_sip);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("compressed_sip", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_ipv6_vrf_s_g_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ipv6_vrf_s_g_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_ipv6_vrf_s_g_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_IPV6_VRF_S_G_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.vrf_s_g_hw_ip_mc_result.pack());
    }
    
    return bv;
}


void npl_ipv6_vrf_s_g_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_ipv6_vrf_s_g_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_IPV6_VRF_S_G_TABLE_ACTION_WRITE) {
        payloads.vrf_s_g_hw_ip_mc_result.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_ipv6_vrf_s_g_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ipv6_vrf_s_g_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ipv6_vrf_s_g_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IPV6_VRF_S_G_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.vrf_s_g_hw_ip_mc_result", payloads.vrf_s_g_hw_ip_mc_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ipv6_vrf_s_g_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ipv6_vrf_s_g_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_is_pacific_b1_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_is_pacific_b1_static_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_is_pacific_b1_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_is_pacific_b1_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_is_pacific_b1_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_is_pacific_b1_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_is_pacific_b1_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_IS_PACIFIC_B1_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.is_pacific_b1.pack());
    }
    
    return bv;
}


void npl_is_pacific_b1_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_is_pacific_b1_static_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_IS_PACIFIC_B1_STATIC_TABLE_ACTION_WRITE) {
        payloads.is_pacific_b1.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_is_pacific_b1_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_is_pacific_b1_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_is_pacific_b1_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_IS_PACIFIC_B1_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.is_pacific_b1", payloads.is_pacific_b1.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_is_pacific_b1_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_is_pacific_b1_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_dlp_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 18);
    
    bv.set_bits(17, 0, l2_dlp_id_key_id);
    
    return bv;
}

void npl_l2_dlp_table_key_t::unpack(bit_vector64_t bv)
{
    l2_dlp_id_key_id = bv.bits(17, 0).get_value();
    
}

field_structure npl_l2_dlp_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_dlp_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(l2_dlp_id_key_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l2_dlp_id_key_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_dlp_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_dlp_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_l2_dlp_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(125, 118, action);
    if (action == NPL_L2_DLP_TABLE_ACTION_WRITE) {
        bv.set_bits(117, 0, payloads.l2_dlp_attributes.pack());
    }
    
    return bv;
}


void npl_l2_dlp_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_l2_dlp_table_action_e)bv.bits(125, 118).get_value();
    if (action == NPL_L2_DLP_TABLE_ACTION_WRITE) {
        payloads.l2_dlp_attributes.unpack(bv.bits(117, 0));
    }
    
}


field_structure npl_l2_dlp_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_dlp_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_dlp_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_DLP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.l2_dlp_attributes", payloads.l2_dlp_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l2_dlp_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_dlp_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lp_profile_filter_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(1, 0, lp_profile);
    bv.set_bits(3, 2, slp_profile);
    
    return bv;
}

void npl_l2_lp_profile_filter_table_key_t::unpack(bit_vector64_t bv)
{
    lp_profile = bv.bits(1, 0).get_value();
    slp_profile = bv.bits(3, 2).get_value();
    
}

field_structure npl_l2_lp_profile_filter_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lp_profile_filter_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(lp_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lp_profile", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(slp_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("slp_profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_lp_profile_filter_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_lp_profile_filter_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_lp_profile_filter_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_L2_LP_PROFILE_FILTER_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.split_horizon);
    }
    
    return bv;
}


void npl_l2_lp_profile_filter_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_lp_profile_filter_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_L2_LP_PROFILE_FILTER_TABLE_ACTION_WRITE) {
        payloads.split_horizon = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_l2_lp_profile_filter_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lp_profile_filter_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_lp_profile_filter_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_LP_PROFILE_FILTER_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.split_horizon);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.split_horizon", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_l2_lp_profile_filter_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lp_profile_filter_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lpts_ctrl_fields_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(0, 0, is_svi);
    bv.set_bits(1, 1, is_tagged);
    bv.set_bits(2, 2, mac_terminated);
    bv.set_bits(3, 3, mac_lp_type);
    
    return bv;
}

void npl_l2_lpts_ctrl_fields_static_table_key_t::unpack(bit_vector64_t bv)
{
    is_svi = bv.bits(0, 0).get_value();
    is_tagged = bv.bits(1, 1).get_value();
    mac_terminated = bv.bits(2, 2).get_value();
    mac_lp_type = (npl_mac_lp_type_e)bv.bits(3, 3).get_value();
    
}

field_structure npl_l2_lpts_ctrl_fields_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_ctrl_fields_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(is_svi);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_svi", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_tagged);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_tagged", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(mac_terminated);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_terminated", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(mac_lp_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_lp_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_ctrl_fields_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_lpts_ctrl_fields_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_lpts_ctrl_fields_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_L2_LPTS_CTRL_FIELDS_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(3, 0, payloads.ctrl_fields);
    }
    
    return bv;
}


void npl_l2_lpts_ctrl_fields_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_lpts_ctrl_fields_static_table_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_L2_LPTS_CTRL_FIELDS_STATIC_TABLE_ACTION_WRITE) {
        payloads.ctrl_fields = bv.bits(3, 0).get_value();
    }
    
}


field_structure npl_l2_lpts_ctrl_fields_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_ctrl_fields_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_lpts_ctrl_fields_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_LPTS_CTRL_FIELDS_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.ctrl_fields);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.ctrl_fields", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_ctrl_fields_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_ctrl_fields_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lpts_ip_fragment_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, ipv6_not_first_fragment);
    bv.set_bits(1, 1, ipv4_not_first_fragment);
    
    return bv;
}

void npl_l2_lpts_ip_fragment_static_table_key_t::unpack(bit_vector64_t bv)
{
    ipv6_not_first_fragment = bv.bits(0, 0).get_value();
    ipv4_not_first_fragment = bv.bits(1, 1).get_value();
    
}

field_structure npl_l2_lpts_ip_fragment_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_ip_fragment_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ipv6_not_first_fragment);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ipv6_not_first_fragment", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ipv4_not_first_fragment);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ipv4_not_first_fragment", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_ip_fragment_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_lpts_ip_fragment_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_lpts_ip_fragment_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(9, 2, action);
    if (action == NPL_L2_LPTS_IP_FRAGMENT_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(1, 0, payloads.ip_fragment.pack());
    }
    
    return bv;
}


void npl_l2_lpts_ip_fragment_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_lpts_ip_fragment_static_table_action_e)bv.bits(9, 2).get_value();
    if (action == NPL_L2_LPTS_IP_FRAGMENT_STATIC_TABLE_ACTION_WRITE) {
        payloads.ip_fragment.unpack(bv.bits(1, 0));
    }
    
}


field_structure npl_l2_lpts_ip_fragment_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_ip_fragment_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_lpts_ip_fragment_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_LPTS_IP_FRAGMENT_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ip_fragment", payloads.ip_fragment.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_ip_fragment_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_ip_fragment_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    bv.set_bits(31, 0, l2_lpts_trap_vector.pack());
    return bv;
}

void npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t::unpack(bit_vector64_t bv)
{
    l2_lpts_trap_vector.unpack(bv.bits(31, 0));
}

field_structure npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("l2_lpts_trap_vector", l2_lpts_trap_vector.to_field_structure());
    return fs_result;
}
std::string to_string(npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_l2_lpts_ipv4_table_key_t::pack(void) const
{
    bit_vector128_t bv(0, 102);
    
    bv.set_bits(1, 0, ip_not_first_fragment.pack());
    bv.set_bits(2, 2, is_svi);
    bv.set_bits(3, 3, is_tagged);
    bv.set_bits(4, 4, mac_terminated);
    bv.set_bits(5, 5, mac_lp_type);
    bv.set_bits(7, 6, l2_slp_attributes);
    bv.set_bits(13, 8, bd_attributes);
    bv.set_bits(21, 14, npp_attributes);
    bv.set_bits(29, 22, protocol);
    bv.set_bits(37, 30, ttl);
    bv.set_bits(69, 38, l4_ports.pack());
    bv.set_bits(101, 70, dip);
    
    return bv;
}

void npl_l2_lpts_ipv4_table_key_t::unpack(bit_vector128_t bv)
{
    ip_not_first_fragment.unpack(bv.bits(1, 0));
    is_svi = bv.bits(2, 2).get_value();
    is_tagged = bv.bits(3, 3).get_value();
    mac_terminated = bv.bits(4, 4).get_value();
    mac_lp_type = (npl_mac_lp_type_e)bv.bits(5, 5).get_value();
    l2_slp_attributes = bv.bits(7, 6).get_value();
    bd_attributes = bv.bits(13, 8).get_value();
    npp_attributes = bv.bits(21, 14).get_value();
    protocol = bv.bits(29, 22).get_value();
    ttl = bv.bits(37, 30).get_value();
    l4_ports.unpack(bv.bits(69, 38));
    dip = bv.bits(101, 70).get_value();
    
}

field_structure npl_l2_lpts_ipv4_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_ipv4_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ip_not_first_fragment", ip_not_first_fragment.to_field_structure());
    fs_subfield.flat_value = to_hex_string(is_svi);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_svi", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_tagged);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_tagged", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(mac_terminated);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_terminated", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(mac_lp_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_lp_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(l2_slp_attributes);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l2_slp_attributes", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(bd_attributes);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("bd_attributes", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npp_attributes);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npp_attributes", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("protocol", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ttl);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ttl", fs_subfield);
    
    fs_result.subfields.emplace_back("l4_ports", l4_ports.to_field_structure());
    fs_subfield.flat_value = to_hex_string(dip);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dip", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_ipv4_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_lpts_ipv4_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_lpts_ipv4_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_L2_LPTS_IPV4_TABLE_ACTION_L2_LPTS_RESULT) {
        bv.set_bits(31, 0, payloads.l2_lpts_result.pack());
    }
    
    return bv;
}


void npl_l2_lpts_ipv4_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_lpts_ipv4_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_L2_LPTS_IPV4_TABLE_ACTION_L2_LPTS_RESULT) {
        payloads.l2_lpts_result.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_l2_lpts_ipv4_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_ipv4_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_lpts_ipv4_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_LPTS_IPV4_TABLE_ACTION_L2_LPTS_RESULT) {
        fs_result.subfields.emplace_back("l2_lpts_result", payloads.l2_lpts_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_ipv4_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_ipv4_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    bv.set_bits(31, 0, l2_lpts_trap_vector.pack());
    return bv;
}

void npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t::unpack(bit_vector64_t bv)
{
    l2_lpts_trap_vector.unpack(bv.bits(31, 0));
}

field_structure npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("l2_lpts_trap_vector", l2_lpts_trap_vector.to_field_structure());
    return fs_result;
}
std::string to_string(npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_l2_lpts_ipv6_table_key_t::pack(void) const
{
    bit_vector192_t bv(0, 134);
    
    bv.set_bits(1, 0, ip_not_first_fragment.pack());
    bv.set_bits(2, 2, is_svi);
    bv.set_bits(3, 3, is_tagged);
    bv.set_bits(4, 4, mac_terminated);
    bv.set_bits(5, 5, mac_lp_type);
    bv.set_bits(7, 6, l2_slp_attributes);
    bv.set_bits(13, 8, bd_attributes);
    bv.set_bits(21, 14, npp_attributes);
    bv.set_bits(29, 22, hop_limit);
    bv.set_bits(37, 30, next_header);
    bv.set_bits(69, 38, l4_ports.pack());
    bv.set_bits(101, 70, dip_32_lsb);
    bv.set_bits(133, 102, dip_32_msb);
    
    return bv;
}

void npl_l2_lpts_ipv6_table_key_t::unpack(bit_vector192_t bv)
{
    ip_not_first_fragment.unpack(bv.bits(1, 0));
    is_svi = bv.bits(2, 2).get_value();
    is_tagged = bv.bits(3, 3).get_value();
    mac_terminated = bv.bits(4, 4).get_value();
    mac_lp_type = (npl_mac_lp_type_e)bv.bits(5, 5).get_value();
    l2_slp_attributes = bv.bits(7, 6).get_value();
    bd_attributes = bv.bits(13, 8).get_value();
    npp_attributes = bv.bits(21, 14).get_value();
    hop_limit = bv.bits(29, 22).get_value();
    next_header = bv.bits(37, 30).get_value();
    l4_ports.unpack(bv.bits(69, 38));
    dip_32_lsb = bv.bits(101, 70).get_value();
    dip_32_msb = bv.bits(133, 102).get_value();
    
}

field_structure npl_l2_lpts_ipv6_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_ipv6_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ip_not_first_fragment", ip_not_first_fragment.to_field_structure());
    fs_subfield.flat_value = to_hex_string(is_svi);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_svi", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_tagged);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_tagged", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(mac_terminated);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_terminated", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(mac_lp_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_lp_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(l2_slp_attributes);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l2_slp_attributes", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(bd_attributes);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("bd_attributes", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npp_attributes);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npp_attributes", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(hop_limit);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("hop_limit", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_header);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_header", fs_subfield);
    
    fs_result.subfields.emplace_back("l4_ports", l4_ports.to_field_structure());
    fs_subfield.flat_value = to_hex_string(dip_32_lsb);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dip_32_lsb", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dip_32_msb);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dip_32_msb", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_ipv6_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_lpts_ipv6_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_lpts_ipv6_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_L2_LPTS_IPV6_TABLE_ACTION_L2_LPTS_RESULT) {
        bv.set_bits(31, 0, payloads.l2_lpts_result.pack());
    }
    
    return bv;
}


void npl_l2_lpts_ipv6_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_lpts_ipv6_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_L2_LPTS_IPV6_TABLE_ACTION_L2_LPTS_RESULT) {
        payloads.l2_lpts_result.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_l2_lpts_ipv6_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_ipv6_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_lpts_ipv6_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_LPTS_IPV6_TABLE_ACTION_L2_LPTS_RESULT) {
        fs_result.subfields.emplace_back("l2_lpts_result", payloads.l2_lpts_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_ipv6_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_ipv6_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lpts_mac_table_l2_lpts_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    bv.set_bits(31, 0, l2_lpts_trap_vector.pack());
    return bv;
}

void npl_l2_lpts_mac_table_l2_lpts_result_payload_t::unpack(bit_vector64_t bv)
{
    l2_lpts_trap_vector.unpack(bv.bits(31, 0));
}

field_structure npl_l2_lpts_mac_table_l2_lpts_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_mac_table_l2_lpts_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("l2_lpts_trap_vector", l2_lpts_trap_vector.to_field_structure());
    return fs_result;
}
std::string to_string(npl_l2_lpts_mac_table_l2_lpts_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_mac_table_l2_lpts_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_l2_lpts_mac_table_key_t::pack(void) const
{
    bit_vector128_t bv(0, 84);
    
    bv.set_bits(0, 0, is_svi);
    bv.set_bits(1, 1, is_tagged);
    bv.set_bits(2, 2, mac_terminated);
    bv.set_bits(3, 3, mac_lp_type);
    bv.set_bits(5, 4, l2_slp_attributes);
    bv.set_bits(11, 6, bd_attributes);
    bv.set_bits(19, 12, npp_attributes);
    bv.set_bits(35, 20, ether_type);
    bv.set_bits(83, 36, mac_da.pack());
    
    return bv;
}

void npl_l2_lpts_mac_table_key_t::unpack(bit_vector128_t bv)
{
    is_svi = bv.bits(0, 0).get_value();
    is_tagged = bv.bits(1, 1).get_value();
    mac_terminated = bv.bits(2, 2).get_value();
    mac_lp_type = (npl_mac_lp_type_e)bv.bits(3, 3).get_value();
    l2_slp_attributes = bv.bits(5, 4).get_value();
    bd_attributes = bv.bits(11, 6).get_value();
    npp_attributes = bv.bits(19, 12).get_value();
    ether_type = bv.bits(35, 20).get_value();
    mac_da.unpack(bv.bits(83, 36));
    
}

field_structure npl_l2_lpts_mac_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_mac_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(is_svi);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_svi", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_tagged);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_tagged", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(mac_terminated);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_terminated", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(mac_lp_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_lp_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(l2_slp_attributes);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l2_slp_attributes", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(bd_attributes);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("bd_attributes", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npp_attributes);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npp_attributes", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ether_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ether_type", fs_subfield);
    
    fs_result.subfields.emplace_back("mac_da", mac_da.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_mac_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_lpts_mac_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_lpts_mac_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_L2_LPTS_MAC_TABLE_ACTION_L2_LPTS_RESULT) {
        bv.set_bits(31, 0, payloads.l2_lpts_result.pack());
    }
    
    return bv;
}


void npl_l2_lpts_mac_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_lpts_mac_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_L2_LPTS_MAC_TABLE_ACTION_L2_LPTS_RESULT) {
        payloads.l2_lpts_result.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_l2_lpts_mac_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_mac_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_lpts_mac_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_LPTS_MAC_TABLE_ACTION_L2_LPTS_RESULT) {
        fs_result.subfields.emplace_back("l2_lpts_result", payloads.l2_lpts_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_mac_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_mac_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lpts_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(0, 0, v6_mc);
    bv.set_bits(1, 1, v4_mc);
    bv.set_bits(3, 2, ctrl_fields.pack());
    bv.set_bits(8, 4, type);
    
    return bv;
}

void npl_l2_lpts_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    v6_mc = bv.bits(0, 0).get_value();
    v4_mc = bv.bits(1, 1).get_value();
    ctrl_fields.unpack(bv.bits(3, 2));
    type = (npl_protocol_type_e)bv.bits(8, 4).get_value();
    
}

field_structure npl_l2_lpts_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(v6_mc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("v6_mc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(v4_mc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("v4_mc", fs_subfield);
    
    fs_result.subfields.emplace_back("ctrl_fields", ctrl_fields.to_field_structure());
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_lpts_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_lpts_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_L2_LPTS_NEXT_MACRO_STATIC_TABLE_ACTION_L2_LPTS_NEXT_MACRO_ACTION) {
        bv.set_bits(9, 0, payloads.l2_lpts_next_macro_action.pack());
    }
    
    return bv;
}


void npl_l2_lpts_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_lpts_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_L2_LPTS_NEXT_MACRO_STATIC_TABLE_ACTION_L2_LPTS_NEXT_MACRO_ACTION) {
        payloads.l2_lpts_next_macro_action.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_l2_lpts_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_lpts_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_LPTS_NEXT_MACRO_STATIC_TABLE_ACTION_L2_LPTS_NEXT_MACRO_ACTION) {
        fs_result.subfields.emplace_back("l2_lpts_next_macro_action", payloads.l2_lpts_next_macro_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lpts_protocol_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 27);
    
    bv.set_bits(0, 0, mac_da_use_l2_lpts);
    bv.set_bits(16, 1, dst_udp_port);
    bv.set_bits(21, 17, next_header_1_type);
    bv.set_bits(26, 22, next_protocol_type);
    
    return bv;
}

void npl_l2_lpts_protocol_table_key_t::unpack(bit_vector64_t bv)
{
    mac_da_use_l2_lpts = bv.bits(0, 0).get_value();
    dst_udp_port = bv.bits(16, 1).get_value();
    next_header_1_type = (npl_protocol_type_e)bv.bits(21, 17).get_value();
    next_protocol_type = (npl_protocol_type_e)bv.bits(26, 22).get_value();
    
}

field_structure npl_l2_lpts_protocol_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_protocol_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(mac_da_use_l2_lpts);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_da_use_l2_lpts", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dst_udp_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dst_udp_port", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(next_header_1_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_header_1_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(next_protocol_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_protocol_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_protocol_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_lpts_protocol_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_lpts_protocol_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_L2_LPTS_PROTOCOL_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.use_l2_lpts);
    }
    
    return bv;
}


void npl_l2_lpts_protocol_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_lpts_protocol_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_L2_LPTS_PROTOCOL_TABLE_ACTION_WRITE) {
        payloads.use_l2_lpts = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_l2_lpts_protocol_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_protocol_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_lpts_protocol_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_LPTS_PROTOCOL_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.use_l2_lpts);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.use_l2_lpts", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_protocol_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_protocol_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    bv.set_bits(0, 0, skip_p2p_trap);
    return bv;
}

void npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t::unpack(bit_vector64_t bv)
{
    skip_p2p_trap = bv.bits(0, 0).get_value();
}

field_structure npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(skip_p2p_trap);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("skip_p2p_trap", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_lpts_skip_p2p_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(0, 0, is_p2p);
    bv.set_bits(2, 1, mac_lp_type_and_term);
    
    return bv;
}

void npl_l2_lpts_skip_p2p_static_table_key_t::unpack(bit_vector64_t bv)
{
    is_p2p = bv.bits(0, 0).get_value();
    mac_lp_type_and_term = bv.bits(2, 1).get_value();
    
}

field_structure npl_l2_lpts_skip_p2p_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_skip_p2p_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(is_p2p);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_p2p", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(mac_lp_type_and_term);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_lp_type_and_term", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_skip_p2p_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_lpts_skip_p2p_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_lpts_skip_p2p_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_L2_LPTS_SKIP_P2P_STATIC_TABLE_ACTION_L2_LPTS_SET_SKIP_P2P_TRAP) {
        bv.set_bits(0, 0, payloads.l2_lpts_set_skip_p2p_trap.pack());
    }
    
    return bv;
}


void npl_l2_lpts_skip_p2p_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_lpts_skip_p2p_static_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_L2_LPTS_SKIP_P2P_STATIC_TABLE_ACTION_L2_LPTS_SET_SKIP_P2P_TRAP) {
        payloads.l2_lpts_set_skip_p2p_trap.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_l2_lpts_skip_p2p_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_lpts_skip_p2p_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_lpts_skip_p2p_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_LPTS_SKIP_P2P_STATIC_TABLE_ACTION_L2_LPTS_SET_SKIP_P2P_TRAP) {
        fs_result.subfields.emplace_back("l2_lpts_set_skip_p2p_trap", payloads.l2_lpts_set_skip_p2p_trap.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l2_lpts_skip_p2p_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_lpts_skip_p2p_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_termination_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    
    bv.set_bits(6, 0, ipv4_ipv6_eth_init_rtf_stage.pack());
    bv.set_bits(10, 7, next_hdr_type);
    
    return bv;
}

void npl_l2_termination_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    ipv4_ipv6_eth_init_rtf_stage.unpack(bv.bits(6, 0));
    next_hdr_type = bv.bits(10, 7).get_value();
    
}

field_structure npl_l2_termination_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_termination_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ipv4_ipv6_eth_init_rtf_stage", ipv4_ipv6_eth_init_rtf_stage.to_field_structure());
    fs_subfield.flat_value = to_hex_string(next_hdr_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_hdr_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_termination_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_termination_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_termination_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_L2_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_L2_TERMINATION_NEXT_MACRO_ACTION) {
        bv.set_bits(9, 0, payloads.l2_termination_next_macro_action.pack());
    }
    
    return bv;
}


void npl_l2_termination_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_termination_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_L2_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_L2_TERMINATION_NEXT_MACRO_ACTION) {
        payloads.l2_termination_next_macro_action.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_l2_termination_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_termination_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_termination_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_L2_TERMINATION_NEXT_MACRO_ACTION) {
        fs_result.subfields.emplace_back("l2_termination_next_macro_action", payloads.l2_termination_next_macro_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l2_termination_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_termination_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l2_tunnel_term_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(3, 0, ipv4_ipv6_init_rtf_stage.pack());
    bv.set_bits(4, 4, overlay_or_pwe_lp_type);
    
    return bv;
}

void npl_l2_tunnel_term_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    ipv4_ipv6_init_rtf_stage.unpack(bv.bits(3, 0));
    overlay_or_pwe_lp_type = bv.bits(4, 4).get_value();
    
}

field_structure npl_l2_tunnel_term_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_tunnel_term_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ipv4_ipv6_init_rtf_stage", ipv4_ipv6_init_rtf_stage.to_field_structure());
    fs_subfield.flat_value = to_hex_string(overlay_or_pwe_lp_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("overlay_or_pwe_lp_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l2_tunnel_term_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l2_tunnel_term_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l2_tunnel_term_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_L2_TUNNEL_TERM_NEXT_MACRO_STATIC_TABLE_ACTION_L2_TERMINATION_NEXT_MACRO_ACTION) {
        bv.set_bits(9, 0, payloads.l2_termination_next_macro_action.pack());
    }
    
    return bv;
}


void npl_l2_tunnel_term_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l2_tunnel_term_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_L2_TUNNEL_TERM_NEXT_MACRO_STATIC_TABLE_ACTION_L2_TERMINATION_NEXT_MACRO_ACTION) {
        payloads.l2_termination_next_macro_action.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_l2_tunnel_term_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l2_tunnel_term_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l2_tunnel_term_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L2_TUNNEL_TERM_NEXT_MACRO_STATIC_TABLE_ACTION_L2_TERMINATION_NEXT_MACRO_ACTION) {
        fs_result.subfields.emplace_back("l2_termination_next_macro_action", payloads.l2_termination_next_macro_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l2_tunnel_term_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l2_tunnel_term_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l3_dlp_p_counter_offset_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(3, 0, fwd_header_type);
    bv.set_bits(7, 4, l3_encap_type);
    bv.set_bits(11, 8, ip_acl_macro_control);
    bv.set_bits(12, 12, is_mc);
    
    return bv;
}

void npl_l3_dlp_p_counter_offset_table_key_t::unpack(bit_vector64_t bv)
{
    fwd_header_type = (npl_fwd_header_type_e)bv.bits(3, 0).get_value();
    l3_encap_type = (npl_npu_encap_l3_header_type_e)bv.bits(7, 4).get_value();
    ip_acl_macro_control = (npl_ip_acl_macro_control_e)bv.bits(11, 8).get_value();
    is_mc = bv.bits(12, 12).get_value();
    
}

field_structure npl_l3_dlp_p_counter_offset_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_dlp_p_counter_offset_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fwd_header_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(l3_encap_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_encap_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(ip_acl_macro_control);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_acl_macro_control", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_mc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_mc", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l3_dlp_p_counter_offset_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l3_dlp_p_counter_offset_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l3_dlp_p_counter_offset_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_L3_DLP_P_COUNTER_OFFSET_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.local_tx_counter_offset.pack());
    }
    
    return bv;
}


void npl_l3_dlp_p_counter_offset_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l3_dlp_p_counter_offset_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_L3_DLP_P_COUNTER_OFFSET_TABLE_ACTION_WRITE) {
        payloads.local_tx_counter_offset.unpack(bv.bits(2, 0));
    }
    
}


field_structure npl_l3_dlp_p_counter_offset_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_dlp_p_counter_offset_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l3_dlp_p_counter_offset_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L3_DLP_P_COUNTER_OFFSET_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.local_tx_counter_offset", payloads.local_tx_counter_offset.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l3_dlp_p_counter_offset_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l3_dlp_p_counter_offset_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l3_dlp_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 14);
    
    bv.set_bits(11, 0, l3_dlp_lsbs);
    bv.set_bits(13, 12, l3_dlp_msbs.pack());
    
    return bv;
}

void npl_l3_dlp_table_key_t::unpack(bit_vector64_t bv)
{
    l3_dlp_lsbs = bv.bits(11, 0).get_value();
    l3_dlp_msbs.unpack(bv.bits(13, 12));
    
}

field_structure npl_l3_dlp_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_dlp_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(l3_dlp_lsbs);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_dlp_lsbs", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_dlp_msbs", l3_dlp_msbs.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_l3_dlp_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l3_dlp_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_l3_dlp_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(145, 138, action);
    if (action == NPL_L3_DLP_TABLE_ACTION_WRITE) {
        bv.set_bits(137, 0, payloads.l3_dlp_attributes.pack());
    }
    
    return bv;
}


void npl_l3_dlp_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_l3_dlp_table_action_e)bv.bits(145, 138).get_value();
    if (action == NPL_L3_DLP_TABLE_ACTION_WRITE) {
        payloads.l3_dlp_attributes.unpack(bv.bits(137, 0));
    }
    
}


field_structure npl_l3_dlp_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_dlp_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l3_dlp_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L3_DLP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.l3_dlp_attributes", payloads.l3_dlp_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l3_dlp_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l3_dlp_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l3_termination_classify_ip_tunnels_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 25);
    
    bv.set_bits(15, 0, udp_dst_port_or_gre_proto);
    bv.set_bits(20, 16, l4_protocol_type);
    bv.set_bits(24, 21, l3_protocol_type);
    
    return bv;
}

void npl_l3_termination_classify_ip_tunnels_table_key_t::unpack(bit_vector64_t bv)
{
    udp_dst_port_or_gre_proto = bv.bits(15, 0).get_value();
    l4_protocol_type = (npl_protocol_type_e)bv.bits(20, 16).get_value();
    l3_protocol_type = bv.bits(24, 21).get_value();
    
}

field_structure npl_l3_termination_classify_ip_tunnels_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_termination_classify_ip_tunnels_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(udp_dst_port_or_gre_proto);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("udp_dst_port_or_gre_proto", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(l4_protocol_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l4_protocol_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(l3_protocol_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_protocol_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l3_termination_classify_ip_tunnels_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l3_termination_classify_ip_tunnels_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l3_termination_classify_ip_tunnels_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(19, 12, action);
    if (action == NPL_L3_TERMINATION_CLASSIFY_IP_TUNNELS_TABLE_ACTION_WRITE) {
        bv.set_bits(11, 0, payloads.tunnel_type.pack());
    }
    
    return bv;
}


void npl_l3_termination_classify_ip_tunnels_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l3_termination_classify_ip_tunnels_table_action_e)bv.bits(19, 12).get_value();
    if (action == NPL_L3_TERMINATION_CLASSIFY_IP_TUNNELS_TABLE_ACTION_WRITE) {
        payloads.tunnel_type.unpack(bv.bits(11, 0));
    }
    
}


field_structure npl_l3_termination_classify_ip_tunnels_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_termination_classify_ip_tunnels_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l3_termination_classify_ip_tunnels_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L3_TERMINATION_CLASSIFY_IP_TUNNELS_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.tunnel_type", payloads.tunnel_type.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l3_termination_classify_ip_tunnels_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l3_termination_classify_ip_tunnels_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l3_termination_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(0, 0, dont_inc_pl);
    bv.set_bits(4, 1, ipv4_ipv6_init_rtf_stage.pack());
    bv.set_bits(8, 5, hdr_type);
    
    return bv;
}

void npl_l3_termination_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    dont_inc_pl = bv.bits(0, 0).get_value();
    ipv4_ipv6_init_rtf_stage.unpack(bv.bits(4, 1));
    hdr_type = bv.bits(8, 5).get_value();
    
}

field_structure npl_l3_termination_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_termination_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dont_inc_pl);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dont_inc_pl", fs_subfield);
    
    fs_result.subfields.emplace_back("ipv4_ipv6_init_rtf_stage", ipv4_ipv6_init_rtf_stage.to_field_structure());
    fs_subfield.flat_value = to_hex_string(hdr_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("hdr_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l3_termination_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l3_termination_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l3_termination_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_L3_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_IP_TERMINATION_NEXT_MACRO_ACTION) {
        bv.set_bits(9, 0, payloads.ip_termination_next_macro_action.pack());
    }
    
    return bv;
}


void npl_l3_termination_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l3_termination_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_L3_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_IP_TERMINATION_NEXT_MACRO_ACTION) {
        payloads.ip_termination_next_macro_action.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_l3_termination_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_termination_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l3_termination_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L3_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_IP_TERMINATION_NEXT_MACRO_ACTION) {
        fs_result.subfields.emplace_back("ip_termination_next_macro_action", payloads.ip_termination_next_macro_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l3_termination_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l3_termination_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l3_tunnel_termination_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    
    bv.set_bits(0, 0, lp_set);
    bv.set_bits(2, 1, pd_ipv4_init_rtf_stage);
    bv.set_bits(6, 3, term_attr_ipv4_ipv6_init_rtf_stage.pack());
    bv.set_bits(10, 7, next_hdr_type);
    
    return bv;
}

void npl_l3_tunnel_termination_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    lp_set = bv.bits(0, 0).get_value();
    pd_ipv4_init_rtf_stage = (npl_init_rtf_stage_and_type_e)bv.bits(2, 1).get_value();
    term_attr_ipv4_ipv6_init_rtf_stage.unpack(bv.bits(6, 3));
    next_hdr_type = bv.bits(10, 7).get_value();
    
}

field_structure npl_l3_tunnel_termination_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_tunnel_termination_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(lp_set);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lp_set", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(pd_ipv4_init_rtf_stage);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_ipv4_init_rtf_stage", fs_subfield);
    
    fs_result.subfields.emplace_back("term_attr_ipv4_ipv6_init_rtf_stage", term_attr_ipv4_ipv6_init_rtf_stage.to_field_structure());
    fs_subfield.flat_value = to_hex_string(next_hdr_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_hdr_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l3_tunnel_termination_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l3_tunnel_termination_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l3_tunnel_termination_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_L3_TUNNEL_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_IP_TERMINATION_NEXT_MACRO_ACTION) {
        bv.set_bits(9, 0, payloads.ip_termination_next_macro_action.pack());
    }
    
    return bv;
}


void npl_l3_tunnel_termination_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l3_tunnel_termination_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_L3_TUNNEL_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_IP_TERMINATION_NEXT_MACRO_ACTION) {
        payloads.ip_termination_next_macro_action.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_l3_tunnel_termination_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_tunnel_termination_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l3_tunnel_termination_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L3_TUNNEL_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_IP_TERMINATION_NEXT_MACRO_ACTION) {
        fs_result.subfields.emplace_back("ip_termination_next_macro_action", payloads.ip_termination_next_macro_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_l3_tunnel_termination_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l3_tunnel_termination_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_l3_vxlan_overlay_sa_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, sa_prefix_index);
    
    return bv;
}

void npl_l3_vxlan_overlay_sa_table_key_t::unpack(bit_vector64_t bv)
{
    sa_prefix_index = bv.bits(3, 0).get_value();
    
}

field_structure npl_l3_vxlan_overlay_sa_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_vxlan_overlay_sa_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(sa_prefix_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sa_prefix_index", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_l3_vxlan_overlay_sa_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_l3_vxlan_overlay_sa_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_l3_vxlan_overlay_sa_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_L3_VXLAN_OVERLAY_SA_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.overlay_sa_msb);
    }
    
    return bv;
}


void npl_l3_vxlan_overlay_sa_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_l3_vxlan_overlay_sa_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_L3_VXLAN_OVERLAY_SA_TABLE_ACTION_WRITE) {
        payloads.overlay_sa_msb = bv.bits(31, 0).get_value();
    }
    
}


field_structure npl_l3_vxlan_overlay_sa_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_l3_vxlan_overlay_sa_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_l3_vxlan_overlay_sa_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_L3_VXLAN_OVERLAY_SA_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.overlay_sa_msb);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.overlay_sa_msb", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_l3_vxlan_overlay_sa_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_l3_vxlan_overlay_sa_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_large_encap_global_lsp_prefix_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, lsp_dest_prefix);
    
    return bv;
}

void npl_large_encap_global_lsp_prefix_table_key_t::unpack(bit_vector64_t bv)
{
    lsp_dest_prefix = bv.bits(15, 0).get_value();
    
}

field_structure npl_large_encap_global_lsp_prefix_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_large_encap_global_lsp_prefix_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(lsp_dest_prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lsp_dest_prefix", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_large_encap_global_lsp_prefix_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_large_encap_global_lsp_prefix_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_large_encap_global_lsp_prefix_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(87, 80, action);
    if (action == NPL_LARGE_ENCAP_GLOBAL_LSP_PREFIX_TABLE_ACTION_WRITE) {
        bv.set_bits(79, 0, payloads.lsp_encap_mapping_data_payload.pack());
    }
    
    return bv;
}


void npl_large_encap_global_lsp_prefix_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_large_encap_global_lsp_prefix_table_action_e)bv.bits(87, 80).get_value();
    if (action == NPL_LARGE_ENCAP_GLOBAL_LSP_PREFIX_TABLE_ACTION_WRITE) {
        payloads.lsp_encap_mapping_data_payload.unpack(bv.bits(79, 0));
    }
    
}


field_structure npl_large_encap_global_lsp_prefix_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_large_encap_global_lsp_prefix_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_large_encap_global_lsp_prefix_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LARGE_ENCAP_GLOBAL_LSP_PREFIX_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lsp_encap_mapping_data_payload", payloads.lsp_encap_mapping_data_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_large_encap_global_lsp_prefix_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_large_encap_global_lsp_prefix_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_large_encap_ip_tunnel_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, gre_tunnel_dlp);
    
    return bv;
}

void npl_large_encap_ip_tunnel_table_key_t::unpack(bit_vector64_t bv)
{
    gre_tunnel_dlp = bv.bits(15, 0).get_value();
    
}

field_structure npl_large_encap_ip_tunnel_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_large_encap_ip_tunnel_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(gre_tunnel_dlp);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("gre_tunnel_dlp", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_large_encap_ip_tunnel_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_large_encap_ip_tunnel_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_large_encap_ip_tunnel_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(127, 120, action);
    if (action == NPL_LARGE_ENCAP_IP_TUNNEL_TABLE_ACTION_WRITE) {
        bv.set_bits(119, 0, payloads.gre_tunnel_attributes.pack());
    }
    
    return bv;
}


void npl_large_encap_ip_tunnel_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_large_encap_ip_tunnel_table_action_e)bv.bits(127, 120).get_value();
    if (action == NPL_LARGE_ENCAP_IP_TUNNEL_TABLE_ACTION_WRITE) {
        payloads.gre_tunnel_attributes.unpack(bv.bits(119, 0));
    }
    
}


field_structure npl_large_encap_ip_tunnel_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_large_encap_ip_tunnel_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_large_encap_ip_tunnel_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LARGE_ENCAP_IP_TUNNEL_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.gre_tunnel_attributes", payloads.gre_tunnel_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_large_encap_ip_tunnel_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_large_encap_ip_tunnel_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_large_encap_mpls_he_no_ldp_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 28);
    
    bv.set_bits(11, 0, nh_ptr);
    bv.set_bits(27, 12, lsp_dest_prefix);
    
    return bv;
}

void npl_large_encap_mpls_he_no_ldp_table_key_t::unpack(bit_vector64_t bv)
{
    nh_ptr = bv.bits(11, 0).get_value();
    lsp_dest_prefix = bv.bits(27, 12).get_value();
    
}

field_structure npl_large_encap_mpls_he_no_ldp_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_large_encap_mpls_he_no_ldp_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(nh_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("nh_ptr", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(lsp_dest_prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lsp_dest_prefix", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_large_encap_mpls_he_no_ldp_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_large_encap_mpls_he_no_ldp_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_large_encap_mpls_he_no_ldp_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(87, 80, action);
    if (action == NPL_LARGE_ENCAP_MPLS_HE_NO_LDP_TABLE_ACTION_WRITE) {
        bv.set_bits(79, 0, payloads.lsp_encap_mapping_data_payload.pack());
    }
    
    return bv;
}


void npl_large_encap_mpls_he_no_ldp_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_large_encap_mpls_he_no_ldp_table_action_e)bv.bits(87, 80).get_value();
    if (action == NPL_LARGE_ENCAP_MPLS_HE_NO_LDP_TABLE_ACTION_WRITE) {
        payloads.lsp_encap_mapping_data_payload.unpack(bv.bits(79, 0));
    }
    
}


field_structure npl_large_encap_mpls_he_no_ldp_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_large_encap_mpls_he_no_ldp_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_large_encap_mpls_he_no_ldp_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LARGE_ENCAP_MPLS_HE_NO_LDP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lsp_encap_mapping_data_payload", payloads.lsp_encap_mapping_data_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_large_encap_mpls_he_no_ldp_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_large_encap_mpls_he_no_ldp_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_large_encap_mpls_ldp_over_te_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    
    bv.set_bits(15, 0, te_tunnel);
    bv.set_bits(31, 16, lsp_dest_prefix);
    
    return bv;
}

void npl_large_encap_mpls_ldp_over_te_table_key_t::unpack(bit_vector64_t bv)
{
    te_tunnel = bv.bits(15, 0).get_value();
    lsp_dest_prefix = bv.bits(31, 16).get_value();
    
}

field_structure npl_large_encap_mpls_ldp_over_te_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_large_encap_mpls_ldp_over_te_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(te_tunnel);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("te_tunnel", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(lsp_dest_prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lsp_dest_prefix", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_large_encap_mpls_ldp_over_te_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_large_encap_mpls_ldp_over_te_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_large_encap_mpls_ldp_over_te_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(52, 45, action);
    if (action == NPL_LARGE_ENCAP_MPLS_LDP_OVER_TE_TABLE_ACTION_WRITE) {
        bv.set_bits(44, 0, payloads.large_em_label_encap_data_and_counter_ptr.pack());
    }
    
    return bv;
}


void npl_large_encap_mpls_ldp_over_te_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_large_encap_mpls_ldp_over_te_table_action_e)bv.bits(52, 45).get_value();
    if (action == NPL_LARGE_ENCAP_MPLS_LDP_OVER_TE_TABLE_ACTION_WRITE) {
        payloads.large_em_label_encap_data_and_counter_ptr.unpack(bv.bits(44, 0));
    }
    
}


field_structure npl_large_encap_mpls_ldp_over_te_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_large_encap_mpls_ldp_over_te_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_large_encap_mpls_ldp_over_te_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LARGE_ENCAP_MPLS_LDP_OVER_TE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.large_em_label_encap_data_and_counter_ptr", payloads.large_em_label_encap_data_and_counter_ptr.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_large_encap_mpls_ldp_over_te_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_large_encap_mpls_ldp_over_te_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_large_encap_te_he_tunnel_id_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 28);
    
    bv.set_bits(11, 0, nh_ptr);
    bv.set_bits(27, 12, te_tunnel);
    
    return bv;
}

void npl_large_encap_te_he_tunnel_id_table_key_t::unpack(bit_vector64_t bv)
{
    nh_ptr = bv.bits(11, 0).get_value();
    te_tunnel = bv.bits(27, 12).get_value();
    
}

field_structure npl_large_encap_te_he_tunnel_id_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_large_encap_te_he_tunnel_id_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(nh_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("nh_ptr", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(te_tunnel);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("te_tunnel", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_large_encap_te_he_tunnel_id_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_large_encap_te_he_tunnel_id_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_large_encap_te_he_tunnel_id_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(87, 80, action);
    if (action == NPL_LARGE_ENCAP_TE_HE_TUNNEL_ID_TABLE_ACTION_WRITE) {
        bv.set_bits(79, 0, payloads.lsp_encap_mapping_data_payload.pack());
    }
    
    return bv;
}


void npl_large_encap_te_he_tunnel_id_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_large_encap_te_he_tunnel_id_table_action_e)bv.bits(87, 80).get_value();
    if (action == NPL_LARGE_ENCAP_TE_HE_TUNNEL_ID_TABLE_ACTION_WRITE) {
        payloads.lsp_encap_mapping_data_payload.unpack(bv.bits(79, 0));
    }
    
}


field_structure npl_large_encap_te_he_tunnel_id_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_large_encap_te_he_tunnel_id_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_large_encap_te_he_tunnel_id_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LARGE_ENCAP_TE_HE_TUNNEL_ID_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lsp_encap_mapping_data_payload", payloads.lsp_encap_mapping_data_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_large_encap_te_he_tunnel_id_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_large_encap_te_he_tunnel_id_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_latest_learn_records_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, learn_record_filter_vars_read_ptr.pack());
    
    return bv;
}

void npl_latest_learn_records_table_key_t::unpack(bit_vector64_t bv)
{
    learn_record_filter_vars_read_ptr.unpack(bv.bits(4, 0));
    
}

field_structure npl_latest_learn_records_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_latest_learn_records_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("learn_record_filter_vars_read_ptr", learn_record_filter_vars_read_ptr.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_latest_learn_records_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_latest_learn_records_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_latest_learn_records_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(95, 88, action);
    if (action == NPL_LATEST_LEARN_RECORDS_TABLE_ACTION_WRITE) {
        bv.set_bits(87, 0, payloads.learn_record_filter_vars_filter_result.pack());
    }
    
    return bv;
}


void npl_latest_learn_records_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_latest_learn_records_table_action_e)bv.bits(95, 88).get_value();
    if (action == NPL_LATEST_LEARN_RECORDS_TABLE_ACTION_WRITE) {
        payloads.learn_record_filter_vars_filter_result.unpack(bv.bits(87, 0));
    }
    
}


field_structure npl_latest_learn_records_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_latest_learn_records_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_latest_learn_records_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LATEST_LEARN_RECORDS_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.learn_record_filter_vars_filter_result", payloads.learn_record_filter_vars_filter_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_latest_learn_records_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_latest_learn_records_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_learn_manager_cfg_max_learn_type_reg_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_learn_manager_cfg_max_learn_type_reg_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_learn_manager_cfg_max_learn_type_reg_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_learn_manager_cfg_max_learn_type_reg_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_learn_manager_cfg_max_learn_type_reg_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_learn_manager_cfg_max_learn_type_reg_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_learn_manager_cfg_max_learn_type_reg_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(9, 2, action);
    if (action == NPL_LEARN_MANAGER_CFG_MAX_LEARN_TYPE_REG_ACTION_WRITE) {
        bv.set_bits(1, 0, payloads.learn_manager_cfg_max_learn_type.pack());
    }
    
    return bv;
}


void npl_learn_manager_cfg_max_learn_type_reg_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_learn_manager_cfg_max_learn_type_reg_action_e)bv.bits(9, 2).get_value();
    if (action == NPL_LEARN_MANAGER_CFG_MAX_LEARN_TYPE_REG_ACTION_WRITE) {
        payloads.learn_manager_cfg_max_learn_type.unpack(bv.bits(1, 0));
    }
    
}


field_structure npl_learn_manager_cfg_max_learn_type_reg_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_learn_manager_cfg_max_learn_type_reg_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_learn_manager_cfg_max_learn_type_reg_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LEARN_MANAGER_CFG_MAX_LEARN_TYPE_REG_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.learn_manager_cfg_max_learn_type", payloads.learn_manager_cfg_max_learn_type.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_learn_manager_cfg_max_learn_type_reg_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_learn_manager_cfg_max_learn_type_reg_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_learn_record_fifo_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, learn_record_fifo_address.pack());
    
    return bv;
}

void npl_learn_record_fifo_table_key_t::unpack(bit_vector64_t bv)
{
    learn_record_fifo_address.unpack(bv.bits(3, 0));
    
}

field_structure npl_learn_record_fifo_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_learn_record_fifo_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("learn_record_fifo_address", learn_record_fifo_address.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_learn_record_fifo_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_learn_record_fifo_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_learn_record_fifo_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(95, 88, action);
    if (action == NPL_LEARN_RECORD_FIFO_TABLE_ACTION_WRITE) {
        bv.set_bits(87, 0, payloads.learn_record_result.pack());
    }
    
    return bv;
}


void npl_learn_record_fifo_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_learn_record_fifo_table_action_e)bv.bits(95, 88).get_value();
    if (action == NPL_LEARN_RECORD_FIFO_TABLE_ACTION_WRITE) {
        payloads.learn_record_result.unpack(bv.bits(87, 0));
    }
    
}


field_structure npl_learn_record_fifo_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_learn_record_fifo_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_learn_record_fifo_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LEARN_RECORD_FIFO_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.learn_record_result", payloads.learn_record_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_learn_record_fifo_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_learn_record_fifo_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 37);
    bv.set_bits(36, 36, use_additional_size);
    bv.set_bits(35, 29, base_size);
    bv.set_bits(28, 28, is_protocol_layer);
    bv.set_bits(27, 25, next_fi_macro_id);
    bv.set_bits(24, 17, npe_macro_id);
    bv.set_bits(16, 16, npe_macro_id_valid);
    bv.set_bits(15, 8, next_header_format.pack());
    bv.set_bits(7, 0, header_format.pack());
    return bv;
}

void npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t::unpack(bit_vector64_t bv)
{
    use_additional_size = bv.bits(36, 36).get_value();
    base_size = bv.bits(35, 29).get_value();
    is_protocol_layer = bv.bits(28, 28).get_value();
    next_fi_macro_id = (npl_light_fi_stage_type_e)bv.bits(27, 25).get_value();
    npe_macro_id = bv.bits(24, 17).get_value();
    npe_macro_id_valid = bv.bits(16, 16).get_value();
    next_header_format.unpack(bv.bits(15, 8));
    header_format.unpack(bv.bits(7, 0));
}

field_structure npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(use_additional_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("use_additional_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(base_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("base_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_protocol_layer);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_protocol_layer", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(next_fi_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_fi_macro_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npe_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npe_macro_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npe_macro_id_valid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npe_macro_id_valid", fs_subfield);
    
    fs_result.subfields.emplace_back("next_header_format", next_header_format.to_field_structure());
    fs_result.subfields.emplace_back("header_format", header_format.to_field_structure());
    return fs_result;
}
std::string to_string(npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_fabric_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, fabric_header_type);
    
    return bv;
}

void npl_light_fi_fabric_table_key_t::unpack(bit_vector64_t bv)
{
    fabric_header_type = bv.bits(3, 0).get_value();
    
}

field_structure npl_light_fi_fabric_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_fabric_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(fabric_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fabric_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_light_fi_fabric_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_light_fi_fabric_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_light_fi_fabric_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(44, 37, action);
    if (action == NPL_LIGHT_FI_FABRIC_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
        bv.set_bits(36, 0, payloads.light_fi_leaba_table_hit.pack());
    }
    
    return bv;
}


void npl_light_fi_fabric_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_light_fi_fabric_table_action_e)bv.bits(44, 37).get_value();
    if (action == NPL_LIGHT_FI_FABRIC_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
        payloads.light_fi_leaba_table_hit.unpack(bv.bits(36, 0));
    }
    
}


field_structure npl_light_fi_fabric_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_fabric_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_light_fi_fabric_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LIGHT_FI_FABRIC_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
        fs_result.subfields.emplace_back("light_fi_leaba_table_hit", payloads.light_fi_leaba_table_hit.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_light_fi_fabric_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_fabric_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 37);
    bv.set_bits(36, 36, use_additional_size);
    bv.set_bits(35, 29, base_size);
    bv.set_bits(28, 28, is_protocol_layer);
    bv.set_bits(27, 25, next_fi_macro_id);
    bv.set_bits(24, 17, npe_macro_id);
    bv.set_bits(16, 16, npe_macro_id_valid);
    bv.set_bits(15, 8, next_header_format.pack());
    bv.set_bits(7, 0, header_format.pack());
    return bv;
}

void npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t::unpack(bit_vector64_t bv)
{
    use_additional_size = bv.bits(36, 36).get_value();
    base_size = bv.bits(35, 29).get_value();
    is_protocol_layer = bv.bits(28, 28).get_value();
    next_fi_macro_id = (npl_light_fi_stage_type_e)bv.bits(27, 25).get_value();
    npe_macro_id = bv.bits(24, 17).get_value();
    npe_macro_id_valid = bv.bits(16, 16).get_value();
    next_header_format.unpack(bv.bits(15, 8));
    header_format.unpack(bv.bits(7, 0));
}

field_structure npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(use_additional_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("use_additional_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(base_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("base_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_protocol_layer);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_protocol_layer", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(next_fi_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_fi_macro_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npe_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npe_macro_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npe_macro_id_valid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npe_macro_id_valid", fs_subfield);
    
    fs_result.subfields.emplace_back("next_header_format", next_header_format.to_field_structure());
    fs_result.subfields.emplace_back("header_format", header_format.to_field_structure());
    return fs_result;
}
std::string to_string(npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_npu_base_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, npu_header_type);
    
    return bv;
}

void npl_light_fi_npu_base_table_key_t::unpack(bit_vector64_t bv)
{
    npu_header_type = bv.bits(5, 0).get_value();
    
}

field_structure npl_light_fi_npu_base_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_npu_base_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(npu_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npu_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_light_fi_npu_base_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_light_fi_npu_base_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_light_fi_npu_base_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(44, 37, action);
    if (action == NPL_LIGHT_FI_NPU_BASE_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
        bv.set_bits(36, 0, payloads.light_fi_leaba_table_hit.pack());
    }
    
    return bv;
}


void npl_light_fi_npu_base_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_light_fi_npu_base_table_action_e)bv.bits(44, 37).get_value();
    if (action == NPL_LIGHT_FI_NPU_BASE_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
        payloads.light_fi_leaba_table_hit.unpack(bv.bits(36, 0));
    }
    
}


field_structure npl_light_fi_npu_base_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_npu_base_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_light_fi_npu_base_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LIGHT_FI_NPU_BASE_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
        fs_result.subfields.emplace_back("light_fi_leaba_table_hit", payloads.light_fi_leaba_table_hit.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_light_fi_npu_base_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_npu_base_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 37);
    bv.set_bits(36, 16, spare);
    bv.set_bits(15, 12, next_stage_size_width);
    bv.set_bits(11, 6, next_stage_size_offset);
    bv.set_bits(5, 0, next_stage_protocol_or_type_offset);
    return bv;
}

void npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t::unpack(bit_vector64_t bv)
{
    spare = bv.bits(36, 16).get_value();
    next_stage_size_width = bv.bits(15, 12).get_value();
    next_stage_size_offset = bv.bits(11, 6).get_value();
    next_stage_protocol_or_type_offset = bv.bits(5, 0).get_value();
}

field_structure npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(spare);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("spare", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_size_width);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_size_width", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_size_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_size_offset", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_protocol_or_type_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_protocol_or_type_offset", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_npu_encap_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, next_header_type);
    
    return bv;
}

void npl_light_fi_npu_encap_table_key_t::unpack(bit_vector64_t bv)
{
    next_header_type = bv.bits(7, 0).get_value();
    
}

field_structure npl_light_fi_npu_encap_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_npu_encap_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(next_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_light_fi_npu_encap_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_light_fi_npu_encap_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_light_fi_npu_encap_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(44, 37, action);
    if (action == NPL_LIGHT_FI_NPU_ENCAP_TABLE_ACTION_LIGHT_FI_NPU_ENCAP_TABLE_HIT) {
        bv.set_bits(36, 0, payloads.light_fi_npu_encap_table_hit.pack());
    }
    
    return bv;
}


void npl_light_fi_npu_encap_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_light_fi_npu_encap_table_action_e)bv.bits(44, 37).get_value();
    if (action == NPL_LIGHT_FI_NPU_ENCAP_TABLE_ACTION_LIGHT_FI_NPU_ENCAP_TABLE_HIT) {
        payloads.light_fi_npu_encap_table_hit.unpack(bv.bits(36, 0));
    }
    
}


field_structure npl_light_fi_npu_encap_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_npu_encap_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_light_fi_npu_encap_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LIGHT_FI_NPU_ENCAP_TABLE_ACTION_LIGHT_FI_NPU_ENCAP_TABLE_HIT) {
        fs_result.subfields.emplace_back("light_fi_npu_encap_table_hit", payloads.light_fi_npu_encap_table_hit.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_light_fi_npu_encap_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_npu_encap_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 44);
    bv.set_bits(43, 40, next_stage_size_width);
    bv.set_bits(39, 34, next_stage_size_offset);
    bv.set_bits(33, 28, next_stage_protocol_or_type_offset);
    bv.set_bits(27, 27, use_additional_size);
    bv.set_bits(26, 20, base_size);
    bv.set_bits(19, 19, is_protocol_layer);
    bv.set_bits(18, 16, next_fi_macro_id);
    bv.set_bits(15, 8, next_header_format.pack());
    bv.set_bits(7, 0, header_format.pack());
    return bv;
}

void npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t::unpack(bit_vector64_t bv)
{
    next_stage_size_width = bv.bits(43, 40).get_value();
    next_stage_size_offset = bv.bits(39, 34).get_value();
    next_stage_protocol_or_type_offset = bv.bits(33, 28).get_value();
    use_additional_size = bv.bits(27, 27).get_value();
    base_size = bv.bits(26, 20).get_value();
    is_protocol_layer = bv.bits(19, 19).get_value();
    next_fi_macro_id = (npl_light_fi_stage_type_e)bv.bits(18, 16).get_value();
    next_header_format.unpack(bv.bits(15, 8));
    header_format.unpack(bv.bits(7, 0));
}

field_structure npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(next_stage_size_width);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_size_width", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_size_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_size_offset", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_protocol_or_type_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_protocol_or_type_offset", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(use_additional_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("use_additional_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(base_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("base_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_protocol_layer);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_protocol_layer", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(next_fi_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_fi_macro_id", fs_subfield);
    
    fs_result.subfields.emplace_back("next_header_format", next_header_format.to_field_structure());
    fs_result.subfields.emplace_back("header_format", header_format.to_field_structure());
    return fs_result;
}
std::string to_string(npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_nw_0_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 21);
    
    bv.set_bits(15, 0, next_protocol_field);
    bv.set_bits(20, 16, current_header_type);
    
    return bv;
}

void npl_light_fi_nw_0_table_key_t::unpack(bit_vector64_t bv)
{
    next_protocol_field = bv.bits(15, 0).get_value();
    current_header_type = (npl_protocol_type_e)bv.bits(20, 16).get_value();
    
}

field_structure npl_light_fi_nw_0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_0_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(next_protocol_field);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_protocol_field", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(current_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("current_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_light_fi_nw_0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_light_fi_nw_0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_light_fi_nw_0_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(51, 44, action);
    if (action == NPL_LIGHT_FI_NW_0_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        bv.set_bits(43, 0, payloads.light_fi_nw_table_hit.pack());
    }
    
    return bv;
}


void npl_light_fi_nw_0_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_light_fi_nw_0_table_action_e)bv.bits(51, 44).get_value();
    if (action == NPL_LIGHT_FI_NW_0_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        payloads.light_fi_nw_table_hit.unpack(bv.bits(43, 0));
    }
    
}


field_structure npl_light_fi_nw_0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_light_fi_nw_0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LIGHT_FI_NW_0_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        fs_result.subfields.emplace_back("light_fi_nw_table_hit", payloads.light_fi_nw_table_hit.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_light_fi_nw_0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_nw_0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 44);
    bv.set_bits(43, 40, next_stage_size_width);
    bv.set_bits(39, 34, next_stage_size_offset);
    bv.set_bits(33, 28, next_stage_protocol_or_type_offset);
    bv.set_bits(27, 27, use_additional_size);
    bv.set_bits(26, 20, base_size);
    bv.set_bits(19, 19, is_protocol_layer);
    bv.set_bits(18, 16, next_fi_macro_id);
    bv.set_bits(15, 8, next_header_format.pack());
    bv.set_bits(7, 0, header_format.pack());
    return bv;
}

void npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t::unpack(bit_vector64_t bv)
{
    next_stage_size_width = bv.bits(43, 40).get_value();
    next_stage_size_offset = bv.bits(39, 34).get_value();
    next_stage_protocol_or_type_offset = bv.bits(33, 28).get_value();
    use_additional_size = bv.bits(27, 27).get_value();
    base_size = bv.bits(26, 20).get_value();
    is_protocol_layer = bv.bits(19, 19).get_value();
    next_fi_macro_id = (npl_light_fi_stage_type_e)bv.bits(18, 16).get_value();
    next_header_format.unpack(bv.bits(15, 8));
    header_format.unpack(bv.bits(7, 0));
}

field_structure npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(next_stage_size_width);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_size_width", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_size_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_size_offset", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_protocol_or_type_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_protocol_or_type_offset", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(use_additional_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("use_additional_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(base_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("base_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_protocol_layer);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_protocol_layer", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(next_fi_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_fi_macro_id", fs_subfield);
    
    fs_result.subfields.emplace_back("next_header_format", next_header_format.to_field_structure());
    fs_result.subfields.emplace_back("header_format", header_format.to_field_structure());
    return fs_result;
}
std::string to_string(npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_nw_1_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 21);
    
    bv.set_bits(15, 0, next_protocol_field);
    bv.set_bits(20, 16, current_header_type);
    
    return bv;
}

void npl_light_fi_nw_1_table_key_t::unpack(bit_vector64_t bv)
{
    next_protocol_field = bv.bits(15, 0).get_value();
    current_header_type = (npl_protocol_type_e)bv.bits(20, 16).get_value();
    
}

field_structure npl_light_fi_nw_1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_1_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(next_protocol_field);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_protocol_field", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(current_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("current_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_light_fi_nw_1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_light_fi_nw_1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_light_fi_nw_1_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(51, 44, action);
    if (action == NPL_LIGHT_FI_NW_1_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        bv.set_bits(43, 0, payloads.light_fi_nw_table_hit.pack());
    }
    
    return bv;
}


void npl_light_fi_nw_1_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_light_fi_nw_1_table_action_e)bv.bits(51, 44).get_value();
    if (action == NPL_LIGHT_FI_NW_1_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        payloads.light_fi_nw_table_hit.unpack(bv.bits(43, 0));
    }
    
}


field_structure npl_light_fi_nw_1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_light_fi_nw_1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LIGHT_FI_NW_1_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        fs_result.subfields.emplace_back("light_fi_nw_table_hit", payloads.light_fi_nw_table_hit.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_light_fi_nw_1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_nw_1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 44);
    bv.set_bits(43, 40, next_stage_size_width);
    bv.set_bits(39, 34, next_stage_size_offset);
    bv.set_bits(33, 28, next_stage_protocol_or_type_offset);
    bv.set_bits(27, 27, use_additional_size);
    bv.set_bits(26, 20, base_size);
    bv.set_bits(19, 19, is_protocol_layer);
    bv.set_bits(18, 16, next_fi_macro_id);
    bv.set_bits(15, 8, next_header_format.pack());
    bv.set_bits(7, 0, header_format.pack());
    return bv;
}

void npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t::unpack(bit_vector64_t bv)
{
    next_stage_size_width = bv.bits(43, 40).get_value();
    next_stage_size_offset = bv.bits(39, 34).get_value();
    next_stage_protocol_or_type_offset = bv.bits(33, 28).get_value();
    use_additional_size = bv.bits(27, 27).get_value();
    base_size = bv.bits(26, 20).get_value();
    is_protocol_layer = bv.bits(19, 19).get_value();
    next_fi_macro_id = (npl_light_fi_stage_type_e)bv.bits(18, 16).get_value();
    next_header_format.unpack(bv.bits(15, 8));
    header_format.unpack(bv.bits(7, 0));
}

field_structure npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(next_stage_size_width);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_size_width", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_size_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_size_offset", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_protocol_or_type_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_protocol_or_type_offset", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(use_additional_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("use_additional_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(base_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("base_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_protocol_layer);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_protocol_layer", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(next_fi_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_fi_macro_id", fs_subfield);
    
    fs_result.subfields.emplace_back("next_header_format", next_header_format.to_field_structure());
    fs_result.subfields.emplace_back("header_format", header_format.to_field_structure());
    return fs_result;
}
std::string to_string(npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_nw_2_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 21);
    
    bv.set_bits(15, 0, next_protocol_field);
    bv.set_bits(20, 16, current_header_type);
    
    return bv;
}

void npl_light_fi_nw_2_table_key_t::unpack(bit_vector64_t bv)
{
    next_protocol_field = bv.bits(15, 0).get_value();
    current_header_type = (npl_protocol_type_e)bv.bits(20, 16).get_value();
    
}

field_structure npl_light_fi_nw_2_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_2_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(next_protocol_field);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_protocol_field", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(current_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("current_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_light_fi_nw_2_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_light_fi_nw_2_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_light_fi_nw_2_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(51, 44, action);
    if (action == NPL_LIGHT_FI_NW_2_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        bv.set_bits(43, 0, payloads.light_fi_nw_table_hit.pack());
    }
    
    return bv;
}


void npl_light_fi_nw_2_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_light_fi_nw_2_table_action_e)bv.bits(51, 44).get_value();
    if (action == NPL_LIGHT_FI_NW_2_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        payloads.light_fi_nw_table_hit.unpack(bv.bits(43, 0));
    }
    
}


field_structure npl_light_fi_nw_2_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_2_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_light_fi_nw_2_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LIGHT_FI_NW_2_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        fs_result.subfields.emplace_back("light_fi_nw_table_hit", payloads.light_fi_nw_table_hit.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_light_fi_nw_2_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_nw_2_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 44);
    bv.set_bits(43, 40, next_stage_size_width);
    bv.set_bits(39, 34, next_stage_size_offset);
    bv.set_bits(33, 28, next_stage_protocol_or_type_offset);
    bv.set_bits(27, 27, use_additional_size);
    bv.set_bits(26, 20, base_size);
    bv.set_bits(19, 19, is_protocol_layer);
    bv.set_bits(18, 16, next_fi_macro_id);
    bv.set_bits(15, 8, next_header_format.pack());
    bv.set_bits(7, 0, header_format.pack());
    return bv;
}

void npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t::unpack(bit_vector64_t bv)
{
    next_stage_size_width = bv.bits(43, 40).get_value();
    next_stage_size_offset = bv.bits(39, 34).get_value();
    next_stage_protocol_or_type_offset = bv.bits(33, 28).get_value();
    use_additional_size = bv.bits(27, 27).get_value();
    base_size = bv.bits(26, 20).get_value();
    is_protocol_layer = bv.bits(19, 19).get_value();
    next_fi_macro_id = (npl_light_fi_stage_type_e)bv.bits(18, 16).get_value();
    next_header_format.unpack(bv.bits(15, 8));
    header_format.unpack(bv.bits(7, 0));
}

field_structure npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(next_stage_size_width);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_size_width", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_size_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_size_offset", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(next_stage_protocol_or_type_offset);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_stage_protocol_or_type_offset", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(use_additional_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("use_additional_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(base_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("base_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_protocol_layer);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_protocol_layer", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(next_fi_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_fi_macro_id", fs_subfield);
    
    fs_result.subfields.emplace_back("next_header_format", next_header_format.to_field_structure());
    fs_result.subfields.emplace_back("header_format", header_format.to_field_structure());
    return fs_result;
}
std::string to_string(npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_nw_3_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 21);
    
    bv.set_bits(15, 0, next_protocol_field);
    bv.set_bits(20, 16, current_header_type);
    
    return bv;
}

void npl_light_fi_nw_3_table_key_t::unpack(bit_vector64_t bv)
{
    next_protocol_field = bv.bits(15, 0).get_value();
    current_header_type = (npl_protocol_type_e)bv.bits(20, 16).get_value();
    
}

field_structure npl_light_fi_nw_3_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_3_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(next_protocol_field);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_protocol_field", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(current_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("current_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_light_fi_nw_3_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_light_fi_nw_3_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_light_fi_nw_3_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(51, 44, action);
    if (action == NPL_LIGHT_FI_NW_3_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        bv.set_bits(43, 0, payloads.light_fi_nw_table_hit.pack());
    }
    
    return bv;
}


void npl_light_fi_nw_3_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_light_fi_nw_3_table_action_e)bv.bits(51, 44).get_value();
    if (action == NPL_LIGHT_FI_NW_3_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        payloads.light_fi_nw_table_hit.unpack(bv.bits(43, 0));
    }
    
}


field_structure npl_light_fi_nw_3_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_nw_3_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_light_fi_nw_3_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LIGHT_FI_NW_3_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
        fs_result.subfields.emplace_back("light_fi_nw_table_hit", payloads.light_fi_nw_table_hit.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_light_fi_nw_3_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_nw_3_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_stages_cfg_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, macro_id);
    
    return bv;
}

void npl_light_fi_stages_cfg_table_key_t::unpack(bit_vector64_t bv)
{
    macro_id = bv.bits(2, 0).get_value();
    
}

field_structure npl_light_fi_stages_cfg_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_stages_cfg_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_light_fi_stages_cfg_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_light_fi_stages_cfg_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_light_fi_stages_cfg_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_LIGHT_FI_STAGES_CFG_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.light_fi_stage_cfg.pack());
    }
    
    return bv;
}


void npl_light_fi_stages_cfg_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_light_fi_stages_cfg_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_LIGHT_FI_STAGES_CFG_TABLE_ACTION_WRITE) {
        payloads.light_fi_stage_cfg.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_light_fi_stages_cfg_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_stages_cfg_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_light_fi_stages_cfg_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LIGHT_FI_STAGES_CFG_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.light_fi_stage_cfg", payloads.light_fi_stage_cfg.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_light_fi_stages_cfg_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_stages_cfg_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 37);
    bv.set_bits(36, 36, use_additional_size);
    bv.set_bits(35, 29, base_size);
    bv.set_bits(28, 28, is_protocol_layer);
    bv.set_bits(27, 25, next_fi_macro_id);
    bv.set_bits(24, 17, npe_macro_id);
    bv.set_bits(16, 16, npe_macro_id_valid);
    bv.set_bits(15, 8, next_header_format.pack());
    bv.set_bits(7, 0, header_format.pack());
    return bv;
}

void npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t::unpack(bit_vector64_t bv)
{
    use_additional_size = bv.bits(36, 36).get_value();
    base_size = bv.bits(35, 29).get_value();
    is_protocol_layer = bv.bits(28, 28).get_value();
    next_fi_macro_id = (npl_light_fi_stage_type_e)bv.bits(27, 25).get_value();
    npe_macro_id = bv.bits(24, 17).get_value();
    npe_macro_id_valid = bv.bits(16, 16).get_value();
    next_header_format.unpack(bv.bits(15, 8));
    header_format.unpack(bv.bits(7, 0));
}

field_structure npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(use_additional_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("use_additional_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(base_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("base_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_protocol_layer);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_protocol_layer", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(next_fi_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_fi_macro_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npe_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npe_macro_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(npe_macro_id_valid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npe_macro_id_valid", fs_subfield);
    
    fs_result.subfields.emplace_back("next_header_format", next_header_format.to_field_structure());
    fs_result.subfields.emplace_back("header_format", header_format.to_field_structure());
    return fs_result;
}
std::string to_string(npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_light_fi_tm_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, tm_header_type);
    
    return bv;
}

void npl_light_fi_tm_table_key_t::unpack(bit_vector64_t bv)
{
    tm_header_type = bv.bits(3, 0).get_value();
    
}

field_structure npl_light_fi_tm_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_tm_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tm_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tm_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_light_fi_tm_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_light_fi_tm_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_light_fi_tm_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(44, 37, action);
    if (action == NPL_LIGHT_FI_TM_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
        bv.set_bits(36, 0, payloads.light_fi_leaba_table_hit.pack());
    }
    
    return bv;
}


void npl_light_fi_tm_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_light_fi_tm_table_action_e)bv.bits(44, 37).get_value();
    if (action == NPL_LIGHT_FI_TM_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
        payloads.light_fi_leaba_table_hit.unpack(bv.bits(36, 0));
    }
    
}


field_structure npl_light_fi_tm_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_light_fi_tm_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_light_fi_tm_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LIGHT_FI_TM_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
        fs_result.subfields.emplace_back("light_fi_leaba_table_hit", payloads.light_fi_leaba_table_hit.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_light_fi_tm_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_light_fi_tm_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_link_relay_attributes_table_relay_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 54);
    bv.set_bits(53, 0, relay_table_payload.pack());
    return bv;
}

void npl_link_relay_attributes_table_relay_payload_t::unpack(bit_vector64_t bv)
{
    relay_table_payload.unpack(bv.bits(53, 0));
}

field_structure npl_link_relay_attributes_table_relay_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_link_relay_attributes_table_relay_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("relay_table_payload", relay_table_payload.to_field_structure());
    return fs_result;
}
std::string to_string(npl_link_relay_attributes_table_relay_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_link_relay_attributes_table_relay_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_link_relay_attributes_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(11, 0, service_relay_attributes_table_key_11_0_);
    
    return bv;
}

void npl_link_relay_attributes_table_key_t::unpack(bit_vector64_t bv)
{
    service_relay_attributes_table_key_11_0_ = bv.bits(11, 0).get_value();
    
}

field_structure npl_link_relay_attributes_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_link_relay_attributes_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(service_relay_attributes_table_key_11_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("service_relay_attributes_table_key_11_0_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_link_relay_attributes_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_link_relay_attributes_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_link_relay_attributes_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(61, 54, action);
    if (action == NPL_LINK_RELAY_ATTRIBUTES_TABLE_ACTION_RELAY) {
        bv.set_bits(53, 0, payloads.relay.pack());
    }
    
    return bv;
}


void npl_link_relay_attributes_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_link_relay_attributes_table_action_e)bv.bits(61, 54).get_value();
    if (action == NPL_LINK_RELAY_ATTRIBUTES_TABLE_ACTION_RELAY) {
        payloads.relay.unpack(bv.bits(53, 0));
    }
    
}


field_structure npl_link_relay_attributes_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_link_relay_attributes_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_link_relay_attributes_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LINK_RELAY_ATTRIBUTES_TABLE_ACTION_RELAY) {
        fs_result.subfields.emplace_back("relay", payloads.relay.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_link_relay_attributes_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_link_relay_attributes_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_link_up_vector_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_link_up_vector_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_link_up_vector_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_link_up_vector_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_link_up_vector_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_link_up_vector_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_link_up_vector_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(115, 108, action);
    if (action == NPL_LINK_UP_VECTOR_ACTION_WRITE) {
        bv.set_bits(107, 0, payloads.link_up_vector_result.pack());
    }
    
    return bv;
}


void npl_link_up_vector_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_link_up_vector_action_e)bv.bits(115, 108).get_value();
    if (action == NPL_LINK_UP_VECTOR_ACTION_WRITE) {
        payloads.link_up_vector_result.unpack(bv.bits(107, 0));
    }
    
}


field_structure npl_link_up_vector_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_link_up_vector_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_link_up_vector_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LINK_UP_VECTOR_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.link_up_vector_result", payloads.link_up_vector_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_link_up_vector_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_link_up_vector_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_lp_over_lag_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 34);
    
    bv.set_bits(11, 0, l3_dlp_lsbs);
    bv.set_bits(13, 12, l3_dlp_msbs.pack());
    bv.set_bits(33, 14, destination);
    
    return bv;
}

void npl_lp_over_lag_table_key_t::unpack(bit_vector64_t bv)
{
    l3_dlp_lsbs = bv.bits(11, 0).get_value();
    l3_dlp_msbs.unpack(bv.bits(13, 12));
    destination = bv.bits(33, 14).get_value();
    
}

field_structure npl_lp_over_lag_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lp_over_lag_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(l3_dlp_lsbs);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_dlp_lsbs", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_dlp_msbs", l3_dlp_msbs.to_field_structure());
    fs_subfield.flat_value = to_hex_string(destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("destination", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_lp_over_lag_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_lp_over_lag_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_lp_over_lag_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_LP_OVER_LAG_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.bvn_destination);
    }
    
    return bv;
}


void npl_lp_over_lag_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_lp_over_lag_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_LP_OVER_LAG_TABLE_ACTION_WRITE) {
        payloads.bvn_destination = bv.bits(19, 0).get_value();
    }
    
}


field_structure npl_lp_over_lag_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lp_over_lag_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_lp_over_lag_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LP_OVER_LAG_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.bvn_destination);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.bvn_destination", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_lp_over_lag_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_lp_over_lag_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_lpm_destination_prefix_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, lpm_prefix_map_input_prefix);
    
    return bv;
}

void npl_lpm_destination_prefix_map_table_key_t::unpack(bit_vector64_t bv)
{
    lpm_prefix_map_input_prefix = bv.bits(5, 0).get_value();
    
}

field_structure npl_lpm_destination_prefix_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lpm_destination_prefix_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(lpm_prefix_map_input_prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lpm_prefix_map_input_prefix", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_lpm_destination_prefix_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_lpm_destination_prefix_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_lpm_destination_prefix_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(14, 7, action);
    if (action == NPL_LPM_DESTINATION_PREFIX_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(6, 0, payloads.lpm_prefix_map_output.pack());
    }
    
    return bv;
}


void npl_lpm_destination_prefix_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_lpm_destination_prefix_map_table_action_e)bv.bits(14, 7).get_value();
    if (action == NPL_LPM_DESTINATION_PREFIX_MAP_TABLE_ACTION_WRITE) {
        payloads.lpm_prefix_map_output.unpack(bv.bits(6, 0));
    }
    
}


field_structure npl_lpm_destination_prefix_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lpm_destination_prefix_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_lpm_destination_prefix_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LPM_DESTINATION_PREFIX_MAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lpm_prefix_map_output", payloads.lpm_prefix_map_output.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_lpm_destination_prefix_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_lpm_destination_prefix_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_lpts_2nd_lookup_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, lpts_second_lookup_key);
    
    return bv;
}

void npl_lpts_2nd_lookup_table_key_t::unpack(bit_vector64_t bv)
{
    lpts_second_lookup_key = bv.bits(4, 0).get_value();
    
}

field_structure npl_lpts_2nd_lookup_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lpts_2nd_lookup_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(lpts_second_lookup_key);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lpts_second_lookup_key", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_lpts_2nd_lookup_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_lpts_2nd_lookup_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_lpts_2nd_lookup_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(32, 25, action);
    if (action == NPL_LPTS_2ND_LOOKUP_TABLE_ACTION_WRITE) {
        bv.set_bits(24, 0, payloads.lpts_payload.pack());
    }
    
    return bv;
}


void npl_lpts_2nd_lookup_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_lpts_2nd_lookup_table_action_e)bv.bits(32, 25).get_value();
    if (action == NPL_LPTS_2ND_LOOKUP_TABLE_ACTION_WRITE) {
        payloads.lpts_payload.unpack(bv.bits(24, 0));
    }
    
}


field_structure npl_lpts_2nd_lookup_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lpts_2nd_lookup_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_lpts_2nd_lookup_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LPTS_2ND_LOOKUP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lpts_payload", payloads.lpts_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_lpts_2nd_lookup_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_lpts_2nd_lookup_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_lpts_meter_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(6, 0, meter_index_lsb);
    bv.set_bits(7, 7, meter_index_msb);
    
    return bv;
}

void npl_lpts_meter_table_key_t::unpack(bit_vector64_t bv)
{
    meter_index_lsb = bv.bits(6, 0).get_value();
    meter_index_msb = bv.bits(7, 7).get_value();
    
}

field_structure npl_lpts_meter_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lpts_meter_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(meter_index_lsb);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("meter_index_lsb", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(meter_index_msb);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("meter_index_msb", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_lpts_meter_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_lpts_meter_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_lpts_meter_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_LPTS_METER_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.counter_ptr.pack());
    }
    
    return bv;
}


void npl_lpts_meter_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_lpts_meter_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_LPTS_METER_TABLE_ACTION_WRITE) {
        payloads.counter_ptr.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_lpts_meter_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lpts_meter_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_lpts_meter_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LPTS_METER_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.counter_ptr", payloads.counter_ptr.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_lpts_meter_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_lpts_meter_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_lpts_og_application_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 61);
    
    bv.set_bits(10, 0, l3_relay_id.pack());
    bv.set_bits(11, 11, fragmented);
    bv.set_bits(43, 12, l4_ports.pack());
    bv.set_bits(51, 44, ipv6_l4_protocol);
    bv.set_bits(59, 52, ipv4_l4_protocol);
    bv.set_bits(60, 60, ip_version);
    
    return bv;
}

void npl_lpts_og_application_table_key_t::unpack(bit_vector64_t bv)
{
    l3_relay_id.unpack(bv.bits(10, 0));
    fragmented = bv.bits(11, 11).get_value();
    l4_ports.unpack(bv.bits(43, 12));
    ipv6_l4_protocol = bv.bits(51, 44).get_value();
    ipv4_l4_protocol = bv.bits(59, 52).get_value();
    ip_version = bv.bits(60, 60).get_value();
    
}

field_structure npl_lpts_og_application_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lpts_og_application_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    fs_subfield.flat_value = to_hex_string(fragmented);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fragmented", fs_subfield);
    
    fs_result.subfields.emplace_back("l4_ports", l4_ports.to_field_structure());
    fs_subfield.flat_value = to_hex_string(ipv6_l4_protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ipv6_l4_protocol", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ipv4_l4_protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ipv4_l4_protocol", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ip_version);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_version", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_lpts_og_application_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_lpts_og_application_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_lpts_og_application_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(21, 14, action);
    if (action == NPL_LPTS_OG_APPLICATION_TABLE_ACTION_WRITE) {
        bv.set_bits(13, 0, payloads.og_app_config.pack());
    }
    
    return bv;
}


void npl_lpts_og_application_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_lpts_og_application_table_action_e)bv.bits(21, 14).get_value();
    if (action == NPL_LPTS_OG_APPLICATION_TABLE_ACTION_WRITE) {
        payloads.og_app_config.unpack(bv.bits(13, 0));
    }
    
}


field_structure npl_lpts_og_application_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lpts_og_application_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_lpts_og_application_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LPTS_OG_APPLICATION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.og_app_config", payloads.og_app_config.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_lpts_og_application_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_lpts_og_application_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_lr_filter_write_ptr_reg_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_lr_filter_write_ptr_reg_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_lr_filter_write_ptr_reg_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lr_filter_write_ptr_reg_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_lr_filter_write_ptr_reg_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_lr_filter_write_ptr_reg_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_lr_filter_write_ptr_reg_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(12, 5, action);
    if (action == NPL_LR_FILTER_WRITE_PTR_REG_ACTION_WRITE) {
        bv.set_bits(4, 0, payloads.learn_record_filter_vars_write_ptr.pack());
    }
    
    return bv;
}


void npl_lr_filter_write_ptr_reg_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_lr_filter_write_ptr_reg_action_e)bv.bits(12, 5).get_value();
    if (action == NPL_LR_FILTER_WRITE_PTR_REG_ACTION_WRITE) {
        payloads.learn_record_filter_vars_write_ptr.unpack(bv.bits(4, 0));
    }
    
}


field_structure npl_lr_filter_write_ptr_reg_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lr_filter_write_ptr_reg_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_lr_filter_write_ptr_reg_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LR_FILTER_WRITE_PTR_REG_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.learn_record_filter_vars_write_ptr", payloads.learn_record_filter_vars_write_ptr.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_lr_filter_write_ptr_reg_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_lr_filter_write_ptr_reg_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_lr_write_ptr_reg_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_lr_write_ptr_reg_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_lr_write_ptr_reg_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lr_write_ptr_reg_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_lr_write_ptr_reg_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_lr_write_ptr_reg_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_lr_write_ptr_reg_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_LR_WRITE_PTR_REG_ACTION_WRITE) {
        bv.set_bits(3, 0, payloads.learn_record_fifo_vars_write_ptr.pack());
    }
    
    return bv;
}


void npl_lr_write_ptr_reg_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_lr_write_ptr_reg_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_LR_WRITE_PTR_REG_ACTION_WRITE) {
        payloads.learn_record_fifo_vars_write_ptr.unpack(bv.bits(3, 0));
    }
    
}


field_structure npl_lr_write_ptr_reg_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_lr_write_ptr_reg_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_lr_write_ptr_reg_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_LR_WRITE_PTR_REG_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.learn_record_fifo_vars_write_ptr", payloads.learn_record_fifo_vars_write_ptr.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_lr_write_ptr_reg_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_lr_write_ptr_reg_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_af_npp_attributes_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, npp_attributes_index);
    
    return bv;
}

void npl_mac_af_npp_attributes_table_key_t::unpack(bit_vector64_t bv)
{
    npp_attributes_index = bv.bits(7, 0).get_value();
    
}

field_structure npl_mac_af_npp_attributes_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_af_npp_attributes_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(npp_attributes_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npp_attributes_index", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mac_af_npp_attributes_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_af_npp_attributes_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mac_af_npp_attributes_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(56, 49, action);
    if (action == NPL_MAC_AF_NPP_ATTRIBUTES_TABLE_ACTION_WRITE) {
        bv.set_bits(48, 0, payloads.mac_af_npp_attributes.pack());
    }
    
    return bv;
}


void npl_mac_af_npp_attributes_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mac_af_npp_attributes_table_action_e)bv.bits(56, 49).get_value();
    if (action == NPL_MAC_AF_NPP_ATTRIBUTES_TABLE_ACTION_WRITE) {
        payloads.mac_af_npp_attributes.unpack(bv.bits(48, 0));
    }
    
}


field_structure npl_mac_af_npp_attributes_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_af_npp_attributes_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_af_npp_attributes_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_AF_NPP_ATTRIBUTES_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mac_af_npp_attributes", payloads.mac_af_npp_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_af_npp_attributes_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_af_npp_attributes_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_da_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 53);
    
    bv.set_bits(4, 0, next_protocol_type);
    bv.set_bits(52, 5, packet_ethernet_header_da.pack());
    
    return bv;
}

void npl_mac_da_table_key_t::unpack(bit_vector64_t bv)
{
    next_protocol_type = (npl_protocol_type_e)bv.bits(4, 0).get_value();
    packet_ethernet_header_da.unpack(bv.bits(52, 5));
    
}

field_structure npl_mac_da_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_da_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(next_protocol_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_protocol_type", fs_subfield);
    
    fs_result.subfields.emplace_back("packet_ethernet_header_da", packet_ethernet_header_da.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mac_da_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_da_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mac_da_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_MAC_DA_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.mac_da.pack());
    }
    
    return bv;
}


void npl_mac_da_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mac_da_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_MAC_DA_TABLE_ACTION_WRITE) {
        payloads.mac_da.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_mac_da_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_da_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_da_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_DA_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mac_da", payloads.mac_da.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_da_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_da_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    bv.set_bits(2, 0, ethernet_rate_limiter_type);
    return bv;
}

void npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t::unpack(bit_vector64_t bv)
{
    ethernet_rate_limiter_type = (npl_ethernet_rate_limiter_type_e)bv.bits(2, 0).get_value();
}

field_structure npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(ethernet_rate_limiter_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ethernet_rate_limiter_type", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_ethernet_rate_limit_type_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(0, 0, mac_forwarding_hit);
    bv.set_bits(1, 1, is_mc);
    bv.set_bits(2, 2, is_bc);
    
    return bv;
}

void npl_mac_ethernet_rate_limit_type_static_table_key_t::unpack(bit_vector64_t bv)
{
    mac_forwarding_hit = bv.bits(0, 0).get_value();
    is_mc = bv.bits(1, 1).get_value();
    is_bc = bv.bits(2, 2).get_value();
    
}

field_structure npl_mac_ethernet_rate_limit_type_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_ethernet_rate_limit_type_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(mac_forwarding_hit);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_forwarding_hit", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_mc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_mc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_bc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_bc", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mac_ethernet_rate_limit_type_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_ethernet_rate_limit_type_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mac_ethernet_rate_limit_type_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_MAC_ETHERNET_RATE_LIMIT_TYPE_STATIC_TABLE_ACTION_UPDATE_ETHERNET_RATE_LIMIT_TYPE) {
        bv.set_bits(2, 0, payloads.update_ethernet_rate_limit_type.pack());
    }
    
    return bv;
}


void npl_mac_ethernet_rate_limit_type_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mac_ethernet_rate_limit_type_static_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_MAC_ETHERNET_RATE_LIMIT_TYPE_STATIC_TABLE_ACTION_UPDATE_ETHERNET_RATE_LIMIT_TYPE) {
        payloads.update_ethernet_rate_limit_type.unpack(bv.bits(2, 0));
    }
    
}


field_structure npl_mac_ethernet_rate_limit_type_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_ethernet_rate_limit_type_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_ethernet_rate_limit_type_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_ETHERNET_RATE_LIMIT_TYPE_STATIC_TABLE_ACTION_UPDATE_ETHERNET_RATE_LIMIT_TYPE) {
        fs_result.subfields.emplace_back("update_ethernet_rate_limit_type", payloads.update_ethernet_rate_limit_type.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_ethernet_rate_limit_type_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_ethernet_rate_limit_type_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_forwarding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 62);
    
    bv.set_bits(61, 0, mac_forwarding_key.pack());
    
    return bv;
}

void npl_mac_forwarding_table_key_t::unpack(bit_vector64_t bv)
{
    mac_forwarding_key.unpack(bv.bits(61, 0));
    
}

field_structure npl_mac_forwarding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_forwarding_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("mac_forwarding_key", mac_forwarding_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mac_forwarding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_forwarding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mac_forwarding_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_MAC_FORWARDING_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.mact_result.pack());
    }
    
    return bv;
}


void npl_mac_forwarding_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mac_forwarding_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_MAC_FORWARDING_TABLE_ACTION_WRITE) {
        payloads.mact_result.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_mac_forwarding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_forwarding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_forwarding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_FORWARDING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mact_result", payloads.mact_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_forwarding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_forwarding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_mc_em_termination_attributes_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 14);
    
    bv.set_bits(13, 0, l2_relay_attributes_id);
    
    return bv;
}

void npl_mac_mc_em_termination_attributes_table_key_t::unpack(bit_vector64_t bv)
{
    l2_relay_attributes_id = bv.bits(13, 0).get_value();
    
}

field_structure npl_mac_mc_em_termination_attributes_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_mc_em_termination_attributes_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(l2_relay_attributes_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l2_relay_attributes_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mac_mc_em_termination_attributes_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_mc_em_termination_attributes_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_mac_mc_em_termination_attributes_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(127, 120, action);
    if (action == NPL_MAC_MC_EM_TERMINATION_ATTRIBUTES_TABLE_ACTION_WRITE) {
        bv.set_bits(119, 0, payloads.termination_attributes.pack());
    }
    
    return bv;
}


void npl_mac_mc_em_termination_attributes_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_mac_mc_em_termination_attributes_table_action_e)bv.bits(127, 120).get_value();
    if (action == NPL_MAC_MC_EM_TERMINATION_ATTRIBUTES_TABLE_ACTION_WRITE) {
        payloads.termination_attributes.unpack(bv.bits(119, 0));
    }
    
}


field_structure npl_mac_mc_em_termination_attributes_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_mc_em_termination_attributes_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_mc_em_termination_attributes_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_MC_EM_TERMINATION_ATTRIBUTES_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.termination_attributes", payloads.termination_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_mc_em_termination_attributes_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_mc_em_termination_attributes_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_mc_tcam_termination_attributes_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 14);
    
    bv.set_bits(13, 0, l2_relay_attributes_id);
    
    return bv;
}

void npl_mac_mc_tcam_termination_attributes_table_key_t::unpack(bit_vector64_t bv)
{
    l2_relay_attributes_id = bv.bits(13, 0).get_value();
    
}

field_structure npl_mac_mc_tcam_termination_attributes_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_mc_tcam_termination_attributes_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(l2_relay_attributes_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l2_relay_attributes_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mac_mc_tcam_termination_attributes_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_mc_tcam_termination_attributes_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_mac_mc_tcam_termination_attributes_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(127, 120, action);
    if (action == NPL_MAC_MC_TCAM_TERMINATION_ATTRIBUTES_TABLE_ACTION_WRITE) {
        bv.set_bits(119, 0, payloads.termination_attributes.pack());
    }
    
    return bv;
}


void npl_mac_mc_tcam_termination_attributes_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_mac_mc_tcam_termination_attributes_table_action_e)bv.bits(127, 120).get_value();
    if (action == NPL_MAC_MC_TCAM_TERMINATION_ATTRIBUTES_TABLE_ACTION_WRITE) {
        payloads.termination_attributes.unpack(bv.bits(119, 0));
    }
    
}


field_structure npl_mac_mc_tcam_termination_attributes_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_mc_tcam_termination_attributes_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_mc_tcam_termination_attributes_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_MC_TCAM_TERMINATION_ATTRIBUTES_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.termination_attributes", payloads.termination_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_mc_tcam_termination_attributes_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_mc_tcam_termination_attributes_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_qos_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(3, 0, qos_id);
    bv.set_bits(7, 4, qos_key);
    
    return bv;
}

void npl_mac_qos_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    qos_id = bv.bits(3, 0).get_value();
    qos_key = bv.bits(7, 4).get_value();
    
}

field_structure npl_mac_qos_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_qos_mapping_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(qos_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("qos_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(qos_key);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("qos_key", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mac_qos_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_qos_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mac_qos_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_MAC_QOS_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.ingress_mac_qos_mapping_result.pack());
    }
    
    return bv;
}


void npl_mac_qos_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mac_qos_mapping_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_MAC_QOS_MAPPING_TABLE_ACTION_WRITE) {
        payloads.ingress_mac_qos_mapping_result.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_mac_qos_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_qos_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_qos_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_QOS_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ingress_mac_qos_mapping_result", payloads.ingress_mac_qos_mapping_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_qos_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_qos_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_relay_g_ipv4_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 42);
    
    bv.set_bits(27, 0, dip_27_0);
    bv.set_bits(41, 28, relay_id.pack());
    
    return bv;
}

void npl_mac_relay_g_ipv4_table_key_t::unpack(bit_vector64_t bv)
{
    dip_27_0 = bv.bits(27, 0).get_value();
    relay_id.unpack(bv.bits(41, 28));
    
}

field_structure npl_mac_relay_g_ipv4_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_relay_g_ipv4_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dip_27_0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dip_27_0", fs_subfield);
    
    fs_result.subfields.emplace_back("relay_id", relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mac_relay_g_ipv4_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_relay_g_ipv4_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mac_relay_g_ipv4_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_MAC_RELAY_G_IPV4_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.mac_relay_g_destination.pack());
    }
    
    return bv;
}


void npl_mac_relay_g_ipv4_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mac_relay_g_ipv4_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_MAC_RELAY_G_IPV4_TABLE_ACTION_WRITE) {
        payloads.mac_relay_g_destination.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_mac_relay_g_ipv4_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_relay_g_ipv4_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_relay_g_ipv4_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_RELAY_G_IPV4_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mac_relay_g_destination", payloads.mac_relay_g_destination.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_relay_g_ipv4_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_relay_g_ipv4_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_mac_relay_g_ipv6_table_key_t::pack(void) const
{
    bit_vector192_t bv(0, 134);
    
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 120 - 1;
        size_t msb = 0;
        const uint64_t * p = dip_119_0;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            bv.set_bits(msb, lsb, *p);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    bv.set_bits(133, 120, relay_id.pack());
    
    return bv;
}

void npl_mac_relay_g_ipv6_table_key_t::unpack(bit_vector192_t bv)
{
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 120 - 1;
        size_t msb = 0;
        uint64_t * p = dip_119_0;
        while (msb < max_msb) {
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            *p = bv.bits(msb, lsb).get_value();
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            p++;
        }
    } // array field end
    
    relay_id.unpack(bv.bits(133, 120));
    
}

field_structure npl_mac_relay_g_ipv6_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_relay_g_ipv6_table_key_t";
    field_structure fs_subfield;
    { // array field start
        const size_t BITS_PER_BYTE = 8;
        size_t lsb = 0;
        size_t max_msb = lsb + 120 - 1;
        size_t msb = 0;
        const uint64_t * p = dip_119_0;
        int i = 0;
        while (msb < max_msb) {
            field_structure fs_sub;
            fs_sub.field_type = "int";
            msb = std::min(max_msb, lsb + sizeof(uint64_t) * BITS_PER_BYTE - 1);
            fs_sub.flat_value = to_hex_string(*p);
            fs_result.subfields.emplace_back("primitive_" + std::to_string(i), fs_sub);
            lsb += sizeof(uint64_t) * BITS_PER_BYTE;
            i++;
            p++;
        }
    } // array field end
    
    fs_result.subfields.emplace_back("relay_id", relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mac_relay_g_ipv6_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_relay_g_ipv6_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mac_relay_g_ipv6_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_MAC_RELAY_G_IPV6_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.mac_relay_g_destination.pack());
    }
    
    return bv;
}


void npl_mac_relay_g_ipv6_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mac_relay_g_ipv6_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_MAC_RELAY_G_IPV6_TABLE_ACTION_WRITE) {
        payloads.mac_relay_g_destination.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_mac_relay_g_ipv6_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_relay_g_ipv6_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_relay_g_ipv6_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_RELAY_G_IPV6_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mac_relay_g_destination", payloads.mac_relay_g_destination.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_relay_g_ipv6_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_relay_g_ipv6_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_relay_to_vni_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 14);
    
    bv.set_bits(13, 0, l2_relay_id.pack());
    
    return bv;
}

void npl_mac_relay_to_vni_table_key_t::unpack(bit_vector64_t bv)
{
    l2_relay_id.unpack(bv.bits(13, 0));
    
}

field_structure npl_mac_relay_to_vni_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_relay_to_vni_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("l2_relay_id", l2_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mac_relay_to_vni_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_relay_to_vni_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mac_relay_to_vni_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(51, 44, action);
    if (action == NPL_MAC_RELAY_TO_VNI_TABLE_ACTION_WRITE) {
        bv.set_bits(43, 0, payloads.vxlan_relay_encap_data.pack());
    }
    
    return bv;
}


void npl_mac_relay_to_vni_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mac_relay_to_vni_table_action_e)bv.bits(51, 44).get_value();
    if (action == NPL_MAC_RELAY_TO_VNI_TABLE_ACTION_WRITE) {
        payloads.vxlan_relay_encap_data.unpack(bv.bits(43, 0));
    }
    
}


field_structure npl_mac_relay_to_vni_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_relay_to_vni_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_relay_to_vni_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_RELAY_TO_VNI_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.vxlan_relay_encap_data", payloads.vxlan_relay_encap_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_relay_to_vni_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_relay_to_vni_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_termination_em_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 38);
    
    bv.set_bits(4, 0, da_prefix);
    bv.set_bits(23, 5, ethernet_header_da_18_0_);
    bv.set_bits(37, 24, relay_id.pack());
    
    return bv;
}

void npl_mac_termination_em_table_key_t::unpack(bit_vector64_t bv)
{
    da_prefix = bv.bits(4, 0).get_value();
    ethernet_header_da_18_0_ = bv.bits(23, 5).get_value();
    relay_id.unpack(bv.bits(37, 24));
    
}

field_structure npl_mac_termination_em_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_termination_em_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(da_prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("da_prefix", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ethernet_header_da_18_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ethernet_header_da_18_0_", fs_subfield);
    
    fs_result.subfields.emplace_back("relay_id", relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mac_termination_em_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_termination_em_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_mac_termination_em_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(127, 120, action);
    if (action == NPL_MAC_TERMINATION_EM_TABLE_ACTION_WRITE) {
        bv.set_bits(119, 0, payloads.termination_attributes.pack());
    }
    
    return bv;
}


void npl_mac_termination_em_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_mac_termination_em_table_action_e)bv.bits(127, 120).get_value();
    if (action == NPL_MAC_TERMINATION_EM_TABLE_ACTION_WRITE) {
        payloads.termination_attributes.unpack(bv.bits(119, 0));
    }
    
}


field_structure npl_mac_termination_em_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_termination_em_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_termination_em_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_TERMINATION_EM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.termination_attributes", payloads.termination_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_termination_em_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_termination_em_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_termination_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(3, 0, ipv4_ipv6_init_rtf_stage.pack());
    bv.set_bits(7, 4, l2_lp_type);
    bv.set_bits(12, 8, next_proto_type);
    
    return bv;
}

void npl_mac_termination_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    ipv4_ipv6_init_rtf_stage.unpack(bv.bits(3, 0));
    l2_lp_type = (npl_l2_lp_type_e)bv.bits(7, 4).get_value();
    next_proto_type = (npl_protocol_type_e)bv.bits(12, 8).get_value();
    
}

field_structure npl_mac_termination_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_termination_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ipv4_ipv6_init_rtf_stage", ipv4_ipv6_init_rtf_stage.to_field_structure());
    fs_subfield.flat_value = npl_enum_to_string(l2_lp_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l2_lp_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(next_proto_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_proto_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mac_termination_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_termination_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mac_termination_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_MAC_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_MAC_TERMINATION_NEXT_MACRO_ACTION) {
        bv.set_bits(9, 0, payloads.mac_termination_next_macro_action.pack());
    }
    
    return bv;
}


void npl_mac_termination_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mac_termination_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_MAC_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_MAC_TERMINATION_NEXT_MACRO_ACTION) {
        payloads.mac_termination_next_macro_action.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_mac_termination_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_termination_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_termination_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_MAC_TERMINATION_NEXT_MACRO_ACTION) {
        fs_result.subfields.emplace_back("mac_termination_next_macro_action", payloads.mac_termination_next_macro_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_termination_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_termination_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_termination_no_da_em_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 14);
    
    bv.set_bits(13, 0, service_relay_attributes_table_key.pack());
    
    return bv;
}

void npl_mac_termination_no_da_em_table_key_t::unpack(bit_vector64_t bv)
{
    service_relay_attributes_table_key.unpack(bv.bits(13, 0));
    
}

field_structure npl_mac_termination_no_da_em_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_termination_no_da_em_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("service_relay_attributes_table_key", service_relay_attributes_table_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mac_termination_no_da_em_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_termination_no_da_em_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_mac_termination_no_da_em_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(127, 120, action);
    if (action == NPL_MAC_TERMINATION_NO_DA_EM_TABLE_ACTION_WRITE) {
        bv.set_bits(119, 0, payloads.termination_attributes.pack());
    }
    
    return bv;
}


void npl_mac_termination_no_da_em_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_mac_termination_no_da_em_table_action_e)bv.bits(127, 120).get_value();
    if (action == NPL_MAC_TERMINATION_NO_DA_EM_TABLE_ACTION_WRITE) {
        payloads.termination_attributes.unpack(bv.bits(119, 0));
    }
    
}


field_structure npl_mac_termination_no_da_em_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_termination_no_da_em_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_termination_no_da_em_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_TERMINATION_NO_DA_EM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.termination_attributes", payloads.termination_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_termination_no_da_em_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_termination_no_da_em_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mac_termination_tcam_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 38);
    
    bv.set_bits(4, 0, da_prefix);
    bv.set_bits(23, 5, ethernet_header_da_18_0_);
    bv.set_bits(37, 24, service_relay_attributes_table_key.pack());
    
    return bv;
}

void npl_mac_termination_tcam_table_key_t::unpack(bit_vector64_t bv)
{
    da_prefix = bv.bits(4, 0).get_value();
    ethernet_header_da_18_0_ = bv.bits(23, 5).get_value();
    service_relay_attributes_table_key.unpack(bv.bits(37, 24));
    
}

field_structure npl_mac_termination_tcam_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_termination_tcam_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(da_prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("da_prefix", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ethernet_header_da_18_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ethernet_header_da_18_0_", fs_subfield);
    
    fs_result.subfields.emplace_back("service_relay_attributes_table_key", service_relay_attributes_table_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mac_termination_tcam_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mac_termination_tcam_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_mac_termination_tcam_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(127, 120, action);
    if (action == NPL_MAC_TERMINATION_TCAM_TABLE_ACTION_WRITE) {
        bv.set_bits(119, 0, payloads.termination_attributes.pack());
    }
    
    return bv;
}


void npl_mac_termination_tcam_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_mac_termination_tcam_table_action_e)bv.bits(127, 120).get_value();
    if (action == NPL_MAC_TERMINATION_TCAM_TABLE_ACTION_WRITE) {
        payloads.termination_attributes.unpack(bv.bits(119, 0));
    }
    
}


field_structure npl_mac_termination_tcam_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mac_termination_tcam_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mac_termination_tcam_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAC_TERMINATION_TCAM_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.termination_attributes", payloads.termination_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mac_termination_tcam_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mac_termination_tcam_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_ene_subcode_to8bit_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(3, 0, tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type.pack());
    bv.set_bits(4, 4, tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format);
    
    return bv;
}

void npl_map_ene_subcode_to8bit_static_table_key_t::unpack(bit_vector64_t bv)
{
    tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type.unpack(bv.bits(3, 0));
    tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format = bv.bits(4, 4).get_value();
    
}

field_structure npl_map_ene_subcode_to8bit_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_ene_subcode_to8bit_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type", tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type.to_field_structure());
    fs_subfield.flat_value = to_hex_string(tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_map_ene_subcode_to8bit_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_map_ene_subcode_to8bit_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_map_ene_subcode_to8bit_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_MAP_ENE_SUBCODE_TO8BIT_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.tx_punt_local_var_local_ene_punt_sub_code);
    }
    
    return bv;
}


void npl_map_ene_subcode_to8bit_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_map_ene_subcode_to8bit_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_MAP_ENE_SUBCODE_TO8BIT_STATIC_TABLE_ACTION_WRITE) {
        payloads.tx_punt_local_var_local_ene_punt_sub_code = bv.bits(7, 0).get_value();
    }
    
}


field_structure npl_map_ene_subcode_to8bit_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_ene_subcode_to8bit_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_map_ene_subcode_to8bit_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAP_ENE_SUBCODE_TO8BIT_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.tx_punt_local_var_local_ene_punt_sub_code);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.tx_punt_local_var_local_ene_punt_sub_code", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_map_ene_subcode_to8bit_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_ene_subcode_to8bit_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    bv.set_bits(15, 8, next_macro);
    bv.set_bits(7, 0, second_ene_macro.pack());
    return bv;
}

void npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t::unpack(bit_vector64_t bv)
{
    next_macro = (npl_ene_macro_ids_e)bv.bits(15, 8).get_value();
    second_ene_macro.unpack(bv.bits(7, 0));
}

field_structure npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(next_macro);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_macro", fs_subfield);
    
    fs_result.subfields.emplace_back("second_ene_macro", second_ene_macro.to_field_structure());
    return fs_result;
}
std::string to_string(npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_inject_ccm_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(3, 0, inner_tpid_ptr);
    bv.set_bits(7, 4, outer_tpid_ptr);
    
    return bv;
}

void npl_map_inject_ccm_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    inner_tpid_ptr = bv.bits(3, 0).get_value();
    outer_tpid_ptr = bv.bits(7, 4).get_value();
    
}

field_structure npl_map_inject_ccm_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_inject_ccm_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(inner_tpid_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("inner_tpid_ptr", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(outer_tpid_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("outer_tpid_ptr", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_map_inject_ccm_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_map_inject_ccm_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_map_inject_ccm_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_MAP_INJECT_CCM_MACRO_STATIC_TABLE_ACTION_MAP_INJECT_CCM_MACRO) {
        bv.set_bits(15, 0, payloads.map_inject_ccm_macro.pack());
    }
    
    return bv;
}


void npl_map_inject_ccm_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_map_inject_ccm_macro_static_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_MAP_INJECT_CCM_MACRO_STATIC_TABLE_ACTION_MAP_INJECT_CCM_MACRO) {
        payloads.map_inject_ccm_macro.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_map_inject_ccm_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_inject_ccm_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_map_inject_ccm_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAP_INJECT_CCM_MACRO_STATIC_TABLE_ACTION_MAP_INJECT_CCM_MACRO) {
        fs_result.subfields.emplace_back("map_inject_ccm_macro", payloads.map_inject_ccm_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_map_inject_ccm_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_inject_ccm_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_more_labels_static_table_set_value_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 24);
    bv.set_bits(23, 0, more_labels_offset.pack());
    return bv;
}

void npl_map_more_labels_static_table_set_value_payload_t::unpack(bit_vector64_t bv)
{
    more_labels_offset.unpack(bv.bits(23, 0));
}

field_structure npl_map_more_labels_static_table_set_value_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_more_labels_static_table_set_value_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("more_labels_offset", more_labels_offset.to_field_structure());
    return fs_result;
}
std::string to_string(npl_map_more_labels_static_table_set_value_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_more_labels_static_table_set_value_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_more_labels_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(2, 0, num_labels);
    bv.set_bits(3, 3, num_labels_is_8);
    
    return bv;
}

void npl_map_more_labels_static_table_key_t::unpack(bit_vector64_t bv)
{
    num_labels = bv.bits(2, 0).get_value();
    num_labels_is_8 = bv.bits(3, 3).get_value();
    
}

field_structure npl_map_more_labels_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_more_labels_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(num_labels);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("num_labels", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(num_labels_is_8);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("num_labels_is_8", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_map_more_labels_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_map_more_labels_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_map_more_labels_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_MAP_MORE_LABELS_STATIC_TABLE_ACTION_SET_VALUE) {
        bv.set_bits(23, 0, payloads.set_value.pack());
    }
    
    return bv;
}


void npl_map_more_labels_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_map_more_labels_static_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_MAP_MORE_LABELS_STATIC_TABLE_ACTION_SET_VALUE) {
        payloads.set_value.unpack(bv.bits(23, 0));
    }
    
}


field_structure npl_map_more_labels_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_more_labels_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_map_more_labels_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAP_MORE_LABELS_STATIC_TABLE_ACTION_SET_VALUE) {
        fs_result.subfields.emplace_back("set_value", payloads.set_value.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_map_more_labels_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_more_labels_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_recyle_tx_to_rx_data_on_pd_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, dsp_map_dma_info.pack());
    
    return bv;
}

void npl_map_recyle_tx_to_rx_data_on_pd_static_table_key_t::unpack(bit_vector64_t bv)
{
    dsp_map_dma_info.unpack(bv.bits(1, 0));
    
}

field_structure npl_map_recyle_tx_to_rx_data_on_pd_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_recyle_tx_to_rx_data_on_pd_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("dsp_map_dma_info", dsp_map_dma_info.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_map_recyle_tx_to_rx_data_on_pd_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_map_recyle_tx_to_rx_data_on_pd_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_map_recyle_tx_to_rx_data_on_pd_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_MAP_RECYLE_TX_TO_RX_DATA_ON_PD_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.pd_recycle_data.pack());
    }
    
    return bv;
}


void npl_map_recyle_tx_to_rx_data_on_pd_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_map_recyle_tx_to_rx_data_on_pd_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_MAP_RECYLE_TX_TO_RX_DATA_ON_PD_STATIC_TABLE_ACTION_WRITE) {
        payloads.pd_recycle_data.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_map_recyle_tx_to_rx_data_on_pd_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_recyle_tx_to_rx_data_on_pd_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_map_recyle_tx_to_rx_data_on_pd_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAP_RECYLE_TX_TO_RX_DATA_ON_PD_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pd_recycle_data", payloads.pd_recycle_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_map_recyle_tx_to_rx_data_on_pd_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_recyle_tx_to_rx_data_on_pd_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, tm_h_dp_0);
    bv.set_bits(1, 1, tm_h_ecn);
    
    return bv;
}

void npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_key_t::unpack(bit_vector64_t bv)
{
    tm_h_dp_0 = bv.bits(0, 0).get_value();
    tm_h_ecn = bv.bits(1, 1).get_value();
    
}

field_structure npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tm_h_dp_0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tm_h_dp_0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(tm_h_ecn);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tm_h_ecn", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(9, 2, action);
    if (action == NPL_MAP_TM_DP_ECN_TO_WA_ECN_DP_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(1, 0, payloads.dp_ecn_wa_local_var_new_dp);
    }
    
    return bv;
}


void npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_action_e)bv.bits(9, 2).get_value();
    if (action == NPL_MAP_TM_DP_ECN_TO_WA_ECN_DP_STATIC_TABLE_ACTION_WRITE) {
        payloads.dp_ecn_wa_local_var_new_dp = bv.bits(1, 0).get_value();
    }
    
}


field_structure npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAP_TM_DP_ECN_TO_WA_ECN_DP_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.dp_ecn_wa_local_var_new_dp);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.dp_ecn_wa_local_var_new_dp", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 17);
    bv.set_bits(16, 10, ene_bytes_added);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id.pack());
    return bv;
}

void npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t::unpack(bit_vector64_t bv)
{
    ene_bytes_added = bv.bits(16, 10).get_value();
    pl_inc = bv.bits(9, 8).get_value();
    macro_id.unpack(bv.bits(7, 0));
}

field_structure npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ene_bytes_added);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ene_bytes_added", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_result.subfields.emplace_back("macro_id", macro_id.to_field_structure());
    return fs_result;
}
std::string to_string(npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_tx_punt_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(1, 0, punt_format);
    bv.set_bits(5, 2, punt_encap_type);
    bv.set_bits(9, 6, cud_type);
    
    return bv;
}

void npl_map_tx_punt_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    punt_format = (npl_punt_header_format_type_e)bv.bits(1, 0).get_value();
    punt_encap_type = (npl_punt_nw_encap_type_e)bv.bits(5, 2).get_value();
    cud_type = (npl_punt_cud_type_e)bv.bits(9, 6).get_value();
    
}

field_structure npl_map_tx_punt_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_tx_punt_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(punt_format);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("punt_format", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(punt_encap_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("punt_encap_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(cud_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("cud_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_map_tx_punt_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_map_tx_punt_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_map_tx_punt_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(24, 17, action);
    if (action == NPL_MAP_TX_PUNT_NEXT_MACRO_STATIC_TABLE_ACTION_TX_PUNT_NEXT_MACRO) {
        bv.set_bits(16, 0, payloads.tx_punt_next_macro.pack());
    }
    
    return bv;
}


void npl_map_tx_punt_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_map_tx_punt_next_macro_static_table_action_e)bv.bits(24, 17).get_value();
    if (action == NPL_MAP_TX_PUNT_NEXT_MACRO_STATIC_TABLE_ACTION_TX_PUNT_NEXT_MACRO) {
        payloads.tx_punt_next_macro.unpack(bv.bits(16, 0));
    }
    
}


field_structure npl_map_tx_punt_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_tx_punt_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_map_tx_punt_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAP_TX_PUNT_NEXT_MACRO_STATIC_TABLE_ACTION_TX_PUNT_NEXT_MACRO) {
        fs_result.subfields.emplace_back("tx_punt_next_macro", payloads.tx_punt_next_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_map_tx_punt_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_tx_punt_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id.pack());
    return bv;
}

void npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id.unpack(bv.bits(7, 0));
}

field_structure npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_result.subfields.emplace_back("macro_id", macro_id.to_field_structure());
    return fs_result;
}
std::string to_string(npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_map_tx_punt_rcy_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(7, 0, redirect_code);
    bv.set_bits(8, 8, eth_stage);
    bv.set_bits(9, 9, inject_only);
    
    return bv;
}

void npl_map_tx_punt_rcy_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    redirect_code = bv.bits(7, 0).get_value();
    eth_stage = bv.bits(8, 8).get_value();
    inject_only = bv.bits(9, 9).get_value();
    
}

field_structure npl_map_tx_punt_rcy_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_tx_punt_rcy_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(redirect_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("redirect_code", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(eth_stage);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("eth_stage", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(inject_only);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("inject_only", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_map_tx_punt_rcy_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_map_tx_punt_rcy_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_map_tx_punt_rcy_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_MAP_TX_PUNT_RCY_NEXT_MACRO_STATIC_TABLE_ACTION_SET_NPE_NEXT_MACRO) {
        bv.set_bits(9, 0, payloads.set_npe_next_macro.pack());
    }
    
    return bv;
}


void npl_map_tx_punt_rcy_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_map_tx_punt_rcy_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_MAP_TX_PUNT_RCY_NEXT_MACRO_STATIC_TABLE_ACTION_SET_NPE_NEXT_MACRO) {
        payloads.set_npe_next_macro.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_map_tx_punt_rcy_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_map_tx_punt_rcy_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_map_tx_punt_rcy_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MAP_TX_PUNT_RCY_NEXT_MACRO_STATIC_TABLE_ACTION_SET_NPE_NEXT_MACRO) {
        fs_result.subfields.emplace_back("set_npe_next_macro", payloads.set_npe_next_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_map_tx_punt_rcy_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_map_tx_punt_rcy_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mc_bitmap_base_voq_lookup_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, rxpdr_local_vars_current_slice);
    
    return bv;
}

void npl_mc_bitmap_base_voq_lookup_table_key_t::unpack(bit_vector64_t bv)
{
    rxpdr_local_vars_current_slice = bv.bits(2, 0).get_value();
    
}

field_structure npl_mc_bitmap_base_voq_lookup_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_bitmap_base_voq_lookup_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpdr_local_vars_current_slice);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpdr_local_vars_current_slice", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mc_bitmap_base_voq_lookup_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mc_bitmap_base_voq_lookup_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mc_bitmap_base_voq_lookup_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(25, 18, action);
    if (action == NPL_MC_BITMAP_BASE_VOQ_LOOKUP_TABLE_ACTION_WRITE) {
        bv.set_bits(17, 0, payloads.mc_bitmap_base_voq_lookup_table_result.pack());
    }
    
    return bv;
}


void npl_mc_bitmap_base_voq_lookup_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mc_bitmap_base_voq_lookup_table_action_e)bv.bits(25, 18).get_value();
    if (action == NPL_MC_BITMAP_BASE_VOQ_LOOKUP_TABLE_ACTION_WRITE) {
        payloads.mc_bitmap_base_voq_lookup_table_result.unpack(bv.bits(17, 0));
    }
    
}


field_structure npl_mc_bitmap_base_voq_lookup_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_bitmap_base_voq_lookup_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mc_bitmap_base_voq_lookup_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MC_BITMAP_BASE_VOQ_LOOKUP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mc_bitmap_base_voq_lookup_table_result", payloads.mc_bitmap_base_voq_lookup_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mc_bitmap_base_voq_lookup_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mc_bitmap_base_voq_lookup_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mc_bitmap_tc_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(2, 0, rxpp_pd_tc);
    bv.set_bits(4, 3, mc_bitmap_base_voq_lookup_table_result_tc_map_profile);
    
    return bv;
}

void npl_mc_bitmap_tc_map_table_key_t::unpack(bit_vector64_t bv)
{
    rxpp_pd_tc = bv.bits(2, 0).get_value();
    mc_bitmap_base_voq_lookup_table_result_tc_map_profile = bv.bits(4, 3).get_value();
    
}

field_structure npl_mc_bitmap_tc_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_bitmap_tc_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_pd_tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_pd_tc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(mc_bitmap_base_voq_lookup_table_result_tc_map_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mc_bitmap_base_voq_lookup_table_result_tc_map_profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mc_bitmap_tc_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mc_bitmap_tc_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mc_bitmap_tc_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_MC_BITMAP_TC_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.rxpdr_local_vars_tc_offset);
    }
    
    return bv;
}


void npl_mc_bitmap_tc_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mc_bitmap_tc_map_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_MC_BITMAP_TC_MAP_TABLE_ACTION_WRITE) {
        payloads.rxpdr_local_vars_tc_offset = bv.bits(2, 0).get_value();
    }
    
}


field_structure npl_mc_bitmap_tc_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_bitmap_tc_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mc_bitmap_tc_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MC_BITMAP_TC_MAP_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.rxpdr_local_vars_tc_offset);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.rxpdr_local_vars_tc_offset", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_mc_bitmap_tc_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mc_bitmap_tc_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mc_copy_id_map_update_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    bv.set_bits(12, 12, encap_size);
    bv.set_bits(11, 4, mc_copy_id_msbs);
    bv.set_bits(3, 0, encap_type);
    return bv;
}

void npl_mc_copy_id_map_update_payload_t::unpack(bit_vector64_t bv)
{
    encap_size = (npl_cud_encap_size_e)bv.bits(12, 12).get_value();
    mc_copy_id_msbs = bv.bits(11, 4).get_value();
    encap_type = bv.bits(3, 0).get_value();
}

field_structure npl_mc_copy_id_map_update_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_copy_id_map_update_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(encap_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("encap_size", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(mc_copy_id_msbs);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mc_copy_id_msbs", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(encap_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("encap_type", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_mc_copy_id_map_update_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mc_copy_id_map_update_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mc_copy_id_map_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, cud_mapping_local_vars_mc_copy_id_17_12_);
    
    return bv;
}

void npl_mc_copy_id_map_key_t::unpack(bit_vector64_t bv)
{
    cud_mapping_local_vars_mc_copy_id_17_12_ = bv.bits(5, 0).get_value();
    
}

field_structure npl_mc_copy_id_map_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_copy_id_map_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(cud_mapping_local_vars_mc_copy_id_17_12_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("cud_mapping_local_vars_mc_copy_id_17_12_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mc_copy_id_map_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mc_copy_id_map_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mc_copy_id_map_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(20, 13, action);
    if (action == NPL_MC_COPY_ID_MAP_ACTION_UPDATE) {
        bv.set_bits(12, 0, payloads.update.pack());
    }
    
    return bv;
}


void npl_mc_copy_id_map_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mc_copy_id_map_action_e)bv.bits(20, 13).get_value();
    if (action == NPL_MC_COPY_ID_MAP_ACTION_UPDATE) {
        payloads.update.unpack(bv.bits(12, 0));
    }
    
}


field_structure npl_mc_copy_id_map_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_copy_id_map_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mc_copy_id_map_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MC_COPY_ID_MAP_ACTION_UPDATE) {
        fs_result.subfields.emplace_back("update", payloads.update.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mc_copy_id_map_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mc_copy_id_map_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mc_cud_is_wide_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, cud_mapping_local_vars_mc_copy_id_12_7_);
    
    return bv;
}

void npl_mc_cud_is_wide_table_key_t::unpack(bit_vector64_t bv)
{
    cud_mapping_local_vars_mc_copy_id_12_7_ = bv.bits(5, 0).get_value();
    
}

field_structure npl_mc_cud_is_wide_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_cud_is_wide_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(cud_mapping_local_vars_mc_copy_id_12_7_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("cud_mapping_local_vars_mc_copy_id_12_7_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mc_cud_is_wide_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mc_cud_is_wide_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mc_cud_is_wide_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_MC_CUD_IS_WIDE_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.cud_mapping_local_vars_mc_cud_is_wide);
    }
    
    return bv;
}


void npl_mc_cud_is_wide_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mc_cud_is_wide_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_MC_CUD_IS_WIDE_TABLE_ACTION_WRITE) {
        payloads.cud_mapping_local_vars_mc_cud_is_wide = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_mc_cud_is_wide_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_cud_is_wide_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mc_cud_is_wide_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MC_CUD_IS_WIDE_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.cud_mapping_local_vars_mc_cud_is_wide);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.cud_mapping_local_vars_mc_cud_is_wide", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_mc_cud_is_wide_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mc_cud_is_wide_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mc_em_db_key_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    
    bv.set_bits(31, 0, mc_em_db_key.pack());
    
    return bv;
}

void npl_mc_em_db_key_t::unpack(bit_vector64_t bv)
{
    mc_em_db_key.unpack(bv.bits(31, 0));
    
}

field_structure npl_mc_em_db_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_em_db_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("mc_em_db_key", mc_em_db_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mc_em_db_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mc_em_db_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_mc_em_db_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(79, 72, action);
    if (action == NPL_MC_EM_DB_ACTION_WRITE) {
        bv.set_bits(71, 0, payloads.mc_em_db_result.pack());
    }
    
    return bv;
}


void npl_mc_em_db_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_mc_em_db_action_e)bv.bits(79, 72).get_value();
    if (action == NPL_MC_EM_DB_ACTION_WRITE) {
        payloads.mc_em_db_result.unpack(bv.bits(71, 0));
    }
    
}


field_structure npl_mc_em_db_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_em_db_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mc_em_db_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MC_EM_DB_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mc_em_db_result", payloads.mc_em_db_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mc_em_db_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mc_em_db_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mc_emdb_tc_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(2, 0, rxpp_pd_tc);
    bv.set_bits(4, 3, rxpdr_local_vars_tc_map_profile_1_0_);
    
    return bv;
}

void npl_mc_emdb_tc_map_table_key_t::unpack(bit_vector64_t bv)
{
    rxpp_pd_tc = bv.bits(2, 0).get_value();
    rxpdr_local_vars_tc_map_profile_1_0_ = bv.bits(4, 3).get_value();
    
}

field_structure npl_mc_emdb_tc_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_emdb_tc_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_pd_tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_pd_tc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(rxpdr_local_vars_tc_map_profile_1_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpdr_local_vars_tc_map_profile_1_0_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mc_emdb_tc_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mc_emdb_tc_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mc_emdb_tc_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_MC_EMDB_TC_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.rxpdr_local_vars_tc_offset);
    }
    
    return bv;
}


void npl_mc_emdb_tc_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mc_emdb_tc_map_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_MC_EMDB_TC_MAP_TABLE_ACTION_WRITE) {
        payloads.rxpdr_local_vars_tc_offset = bv.bits(2, 0).get_value();
    }
    
}


field_structure npl_mc_emdb_tc_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_emdb_tc_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mc_emdb_tc_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MC_EMDB_TC_MAP_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.rxpdr_local_vars_tc_offset);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.rxpdr_local_vars_tc_offset", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_mc_emdb_tc_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mc_emdb_tc_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mc_fe_links_bmp_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, rxpp_pd_fwd_destination_15_0_);
    
    return bv;
}

void npl_mc_fe_links_bmp_key_t::unpack(bit_vector64_t bv)
{
    rxpp_pd_fwd_destination_15_0_ = bv.bits(15, 0).get_value();
    
}

field_structure npl_mc_fe_links_bmp_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_fe_links_bmp_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_pd_fwd_destination_15_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_pd_fwd_destination_15_0_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mc_fe_links_bmp_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mc_fe_links_bmp_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_mc_fe_links_bmp_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(116, 109, action);
    if (action == NPL_MC_FE_LINKS_BMP_ACTION_WRITE) {
        bv.set_bits(108, 0, payloads.mc_fe_links_bmp_db_result.pack());
    }
    
    return bv;
}


void npl_mc_fe_links_bmp_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_mc_fe_links_bmp_action_e)bv.bits(116, 109).get_value();
    if (action == NPL_MC_FE_LINKS_BMP_ACTION_WRITE) {
        payloads.mc_fe_links_bmp_db_result.unpack(bv.bits(108, 0));
    }
    
}


field_structure npl_mc_fe_links_bmp_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_fe_links_bmp_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mc_fe_links_bmp_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MC_FE_LINKS_BMP_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mc_fe_links_bmp_db_result", payloads.mc_fe_links_bmp_db_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mc_fe_links_bmp_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mc_fe_links_bmp_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mc_ibm_cud_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(8, 0, ibm_mc_cud_key);
    
    return bv;
}

void npl_mc_ibm_cud_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    ibm_mc_cud_key = bv.bits(8, 0).get_value();
    
}

field_structure npl_mc_ibm_cud_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_ibm_cud_mapping_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ibm_mc_cud_key);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ibm_mc_cud_key", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mc_ibm_cud_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mc_ibm_cud_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_mc_ibm_cud_mapping_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(136, 129, action);
    if (action == NPL_MC_IBM_CUD_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(128, 0, payloads.mc_ibm_cud_mapping_encap.pack());
    }
    
    return bv;
}


void npl_mc_ibm_cud_mapping_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_mc_ibm_cud_mapping_table_action_e)bv.bits(136, 129).get_value();
    if (action == NPL_MC_IBM_CUD_MAPPING_TABLE_ACTION_WRITE) {
        payloads.mc_ibm_cud_mapping_encap.unpack(bv.bits(128, 0));
    }
    
}


field_structure npl_mc_ibm_cud_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_ibm_cud_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mc_ibm_cud_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MC_IBM_CUD_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mc_ibm_cud_mapping_encap", payloads.mc_ibm_cud_mapping_encap.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mc_ibm_cud_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mc_ibm_cud_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mc_slice_bitmap_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, rxpp_pd_fwd_destination_15_0_);
    
    return bv;
}

void npl_mc_slice_bitmap_table_key_t::unpack(bit_vector64_t bv)
{
    rxpp_pd_fwd_destination_15_0_ = bv.bits(15, 0).get_value();
    
}

field_structure npl_mc_slice_bitmap_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_slice_bitmap_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_pd_fwd_destination_15_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_pd_fwd_destination_15_0_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mc_slice_bitmap_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mc_slice_bitmap_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mc_slice_bitmap_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(19, 12, action);
    if (action == NPL_MC_SLICE_BITMAP_TABLE_ACTION_WRITE) {
        bv.set_bits(11, 0, payloads.mc_slice_bitmap_table_result.pack());
    }
    
    return bv;
}


void npl_mc_slice_bitmap_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mc_slice_bitmap_table_action_e)bv.bits(19, 12).get_value();
    if (action == NPL_MC_SLICE_BITMAP_TABLE_ACTION_WRITE) {
        payloads.mc_slice_bitmap_table_result.unpack(bv.bits(11, 0));
    }
    
}


field_structure npl_mc_slice_bitmap_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mc_slice_bitmap_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mc_slice_bitmap_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MC_SLICE_BITMAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mc_slice_bitmap_table_result", payloads.mc_slice_bitmap_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mc_slice_bitmap_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mc_slice_bitmap_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_meg_id_format_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 17);
    
    bv.set_bits(7, 0, meg_id_length);
    bv.set_bits(15, 8, eth_oam_ccm_meg_id_format);
    bv.set_bits(16, 16, eth_oam_mp_table_read_payload_meg_id_format);
    
    return bv;
}

void npl_meg_id_format_table_key_t::unpack(bit_vector64_t bv)
{
    meg_id_length = bv.bits(7, 0).get_value();
    eth_oam_ccm_meg_id_format = bv.bits(15, 8).get_value();
    eth_oam_mp_table_read_payload_meg_id_format = (npl_meg_id_format_e)bv.bits(16, 16).get_value();
    
}

field_structure npl_meg_id_format_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_meg_id_format_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(meg_id_length);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("meg_id_length", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(eth_oam_ccm_meg_id_format);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("eth_oam_ccm_meg_id_format", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(eth_oam_mp_table_read_payload_meg_id_format);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("eth_oam_mp_table_read_payload_meg_id_format", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_meg_id_format_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_meg_id_format_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_meg_id_format_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_MEG_ID_FORMAT_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.eth_wrong_meg_id_format);
    }
    
    return bv;
}


void npl_meg_id_format_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_meg_id_format_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_MEG_ID_FORMAT_TABLE_ACTION_WRITE) {
        payloads.eth_wrong_meg_id_format = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_meg_id_format_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_meg_id_format_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_meg_id_format_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MEG_ID_FORMAT_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.eth_wrong_meg_id_format);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.eth_wrong_meg_id_format", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_meg_id_format_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_meg_id_format_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mep_address_prefix_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, mep_address_prefix_index);
    
    return bv;
}

void npl_mep_address_prefix_table_key_t::unpack(bit_vector64_t bv)
{
    mep_address_prefix_index = bv.bits(1, 0).get_value();
    
}

field_structure npl_mep_address_prefix_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mep_address_prefix_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(mep_address_prefix_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mep_address_prefix_index", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mep_address_prefix_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mep_address_prefix_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mep_address_prefix_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_MEP_ADDRESS_PREFIX_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.mep_mac_address_prefix);
    }
    
    return bv;
}


void npl_mep_address_prefix_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mep_address_prefix_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_MEP_ADDRESS_PREFIX_TABLE_ACTION_WRITE) {
        payloads.mep_mac_address_prefix = bv.bits(31, 0).get_value();
    }
    
}


field_structure npl_mep_address_prefix_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mep_address_prefix_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mep_address_prefix_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MEP_ADDRESS_PREFIX_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.mep_mac_address_prefix);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.mep_mac_address_prefix", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_mep_address_prefix_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mep_address_prefix_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mii_loopback_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(4, 0, device_packet_info_pif);
    bv.set_bits(5, 5, device_packet_info_ifg);
    
    return bv;
}

void npl_mii_loopback_table_key_t::unpack(bit_vector64_t bv)
{
    device_packet_info_pif = bv.bits(4, 0).get_value();
    device_packet_info_ifg = bv.bits(5, 5).get_value();
    
}

field_structure npl_mii_loopback_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mii_loopback_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(device_packet_info_pif);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("device_packet_info_pif", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(device_packet_info_ifg);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("device_packet_info_ifg", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mii_loopback_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mii_loopback_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mii_loopback_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(9, 2, action);
    if (action == NPL_MII_LOOPBACK_TABLE_ACTION_WRITE) {
        bv.set_bits(1, 0, payloads.mii_loopback_data.pack());
    }
    
    return bv;
}


void npl_mii_loopback_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mii_loopback_table_action_e)bv.bits(9, 2).get_value();
    if (action == NPL_MII_LOOPBACK_TABLE_ACTION_WRITE) {
        payloads.mii_loopback_data.unpack(bv.bits(1, 0));
    }
    
}


field_structure npl_mii_loopback_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mii_loopback_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mii_loopback_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MII_LOOPBACK_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mii_loopback_data", payloads.mii_loopback_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mii_loopback_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mii_loopback_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mirror_code_hw_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, pd_common_leaba_fields_mirror_code);
    
    return bv;
}

void npl_mirror_code_hw_table_key_t::unpack(bit_vector64_t bv)
{
    pd_common_leaba_fields_mirror_code = bv.bits(7, 0).get_value();
    
}

field_structure npl_mirror_code_hw_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mirror_code_hw_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pd_common_leaba_fields_mirror_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_common_leaba_fields_mirror_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mirror_code_hw_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mirror_code_hw_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mirror_code_hw_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(12, 5, action);
    if (action == NPL_MIRROR_CODE_HW_TABLE_ACTION_WRITE) {
        bv.set_bits(4, 0, payloads.rxpp_pd_rxn_in_mirror_cmd1);
    }
    
    return bv;
}


void npl_mirror_code_hw_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mirror_code_hw_table_action_e)bv.bits(12, 5).get_value();
    if (action == NPL_MIRROR_CODE_HW_TABLE_ACTION_WRITE) {
        payloads.rxpp_pd_rxn_in_mirror_cmd1 = bv.bits(4, 0).get_value();
    }
    
}


field_structure npl_mirror_code_hw_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mirror_code_hw_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mirror_code_hw_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MIRROR_CODE_HW_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.rxpp_pd_rxn_in_mirror_cmd1);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.rxpp_pd_rxn_in_mirror_cmd1", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_mirror_code_hw_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mirror_code_hw_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    bv.set_bits(31, 20, session_id);
    bv.set_bits(19, 0, counter.pack());
    return bv;
}

void npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t::unpack(bit_vector64_t bv)
{
    session_id = bv.bits(31, 20).get_value();
    counter.unpack(bv.bits(19, 0));
}

field_structure npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(session_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("session_id", fs_subfield);
    
    fs_result.subfields.emplace_back("counter", counter.to_field_structure());
    return fs_result;
}
std::string to_string(npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mirror_egress_attributes_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(7, 0, mirror_code);
    bv.set_bits(8, 8, is_ibm.pack());
    
    return bv;
}

void npl_mirror_egress_attributes_table_key_t::unpack(bit_vector64_t bv)
{
    mirror_code = bv.bits(7, 0).get_value();
    is_ibm.unpack(bv.bits(8, 8));
    
}

field_structure npl_mirror_egress_attributes_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mirror_egress_attributes_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(mirror_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mirror_code", fs_subfield);
    
    fs_result.subfields.emplace_back("is_ibm", is_ibm.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mirror_egress_attributes_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mirror_egress_attributes_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mirror_egress_attributes_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_MIRROR_EGRESS_ATTRIBUTES_TABLE_ACTION_SET_MIRROR_EGRESS_ATTRIBUTES) {
        bv.set_bits(31, 0, payloads.set_mirror_egress_attributes.pack());
    }
    
    return bv;
}


void npl_mirror_egress_attributes_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mirror_egress_attributes_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_MIRROR_EGRESS_ATTRIBUTES_TABLE_ACTION_SET_MIRROR_EGRESS_ATTRIBUTES) {
        payloads.set_mirror_egress_attributes.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_mirror_egress_attributes_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mirror_egress_attributes_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mirror_egress_attributes_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MIRROR_EGRESS_ATTRIBUTES_TABLE_ACTION_SET_MIRROR_EGRESS_ATTRIBUTES) {
        fs_result.subfields.emplace_back("set_mirror_egress_attributes", payloads.set_mirror_egress_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mirror_egress_attributes_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mirror_egress_attributes_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mirror_to_dsp_in_npu_soft_header_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, mirror_code);
    
    return bv;
}

void npl_mirror_to_dsp_in_npu_soft_header_table_key_t::unpack(bit_vector64_t bv)
{
    mirror_code = bv.bits(4, 0).get_value();
    
}

field_structure npl_mirror_to_dsp_in_npu_soft_header_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mirror_to_dsp_in_npu_soft_header_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(mirror_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mirror_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mirror_to_dsp_in_npu_soft_header_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mirror_to_dsp_in_npu_soft_header_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mirror_to_dsp_in_npu_soft_header_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_MIRROR_TO_DSP_IN_NPU_SOFT_HEADER_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.update_dsp_in_npu_soft_header);
    }
    
    return bv;
}


void npl_mirror_to_dsp_in_npu_soft_header_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mirror_to_dsp_in_npu_soft_header_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_MIRROR_TO_DSP_IN_NPU_SOFT_HEADER_TABLE_ACTION_WRITE) {
        payloads.update_dsp_in_npu_soft_header = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_mirror_to_dsp_in_npu_soft_header_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mirror_to_dsp_in_npu_soft_header_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mirror_to_dsp_in_npu_soft_header_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MIRROR_TO_DSP_IN_NPU_SOFT_HEADER_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.update_dsp_in_npu_soft_header);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.update_dsp_in_npu_soft_header", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_mirror_to_dsp_in_npu_soft_header_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mirror_to_dsp_in_npu_soft_header_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mldp_protection_enabled_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(3, 0, l3_encap);
    bv.set_bits(4, 4, is_mc);
    
    return bv;
}

void npl_mldp_protection_enabled_static_table_key_t::unpack(bit_vector64_t bv)
{
    l3_encap = (npl_npu_encap_l3_header_type_e)bv.bits(3, 0).get_value();
    is_mc = bv.bits(4, 4).get_value();
    
}

field_structure npl_mldp_protection_enabled_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mldp_protection_enabled_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(l3_encap);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_encap", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_mc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_mc", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mldp_protection_enabled_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mldp_protection_enabled_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mldp_protection_enabled_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_MLDP_PROTECTION_ENABLED_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.enabled);
    }
    
    return bv;
}


void npl_mldp_protection_enabled_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mldp_protection_enabled_static_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_MLDP_PROTECTION_ENABLED_STATIC_TABLE_ACTION_WRITE) {
        payloads.enabled = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_mldp_protection_enabled_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mldp_protection_enabled_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mldp_protection_enabled_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MLDP_PROTECTION_ENABLED_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.enabled);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.enabled", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_mldp_protection_enabled_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mldp_protection_enabled_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mldp_protection_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(8, 0, mlp_protection.pack());
    
    return bv;
}

void npl_mldp_protection_table_key_t::unpack(bit_vector64_t bv)
{
    mlp_protection.unpack(bv.bits(8, 0));
    
}

field_structure npl_mldp_protection_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mldp_protection_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("mlp_protection", mlp_protection.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mldp_protection_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mldp_protection_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mldp_protection_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(9, 2, action);
    if (action == NPL_MLDP_PROTECTION_TABLE_ACTION_WRITE) {
        bv.set_bits(1, 0, payloads.mld_entry.pack());
    }
    
    return bv;
}


void npl_mldp_protection_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mldp_protection_table_action_e)bv.bits(9, 2).get_value();
    if (action == NPL_MLDP_PROTECTION_TABLE_ACTION_WRITE) {
        payloads.mld_entry.unpack(bv.bits(1, 0));
    }
    
}


field_structure npl_mldp_protection_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mldp_protection_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mldp_protection_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MLDP_PROTECTION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mld_entry", payloads.mld_entry.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mldp_protection_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mldp_protection_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mp_aux_data_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(11, 0, aux_table_key.pack());
    
    return bv;
}

void npl_mp_aux_data_table_key_t::unpack(bit_vector64_t bv)
{
    aux_table_key.unpack(bv.bits(11, 0));
    
}

field_structure npl_mp_aux_data_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mp_aux_data_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("aux_table_key", aux_table_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mp_aux_data_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mp_aux_data_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_mp_aux_data_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(167, 160, action);
    if (action == NPL_MP_AUX_DATA_TABLE_ACTION_WRITE) {
        bv.set_bits(159, 0, payloads.aux_table_result.pack());
    }
    
    return bv;
}


void npl_mp_aux_data_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_mp_aux_data_table_action_e)bv.bits(167, 160).get_value();
    if (action == NPL_MP_AUX_DATA_TABLE_ACTION_WRITE) {
        payloads.aux_table_result.unpack(bv.bits(159, 0));
    }
    
}


field_structure npl_mp_aux_data_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mp_aux_data_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mp_aux_data_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MP_AUX_DATA_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.aux_table_result", payloads.aux_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mp_aux_data_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mp_aux_data_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mp_data_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, line_id.pack());
    
    return bv;
}

void npl_mp_data_table_key_t::unpack(bit_vector64_t bv)
{
    line_id.unpack(bv.bits(12, 0));
    
}

field_structure npl_mp_data_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mp_data_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("line_id", line_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mp_data_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mp_data_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector384_t npl_mp_data_table_value_t::pack(void) const
{
    bit_vector384_t bv;
    bv.set_bits(207, 200, action);
    if (action == NPL_MP_DATA_TABLE_ACTION_WRITE) {
        bv.set_bits(199, 0, payloads.mp_data_result.pack());
    }
    
    return bv;
}


void npl_mp_data_table_value_t::unpack(bit_vector384_t bv)
{
    action = (npl_mp_data_table_action_e)bv.bits(207, 200).get_value();
    if (action == NPL_MP_DATA_TABLE_ACTION_WRITE) {
        payloads.mp_data_result.unpack(bv.bits(199, 0));
    }
    
}


field_structure npl_mp_data_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mp_data_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mp_data_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MP_DATA_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mp_data_result", payloads.mp_data_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mp_data_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mp_data_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_encap_control_static_table_set_mpls_controls_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    bv.set_bits(4, 2, mpls_encap_control_bits.pack());
    bv.set_bits(1, 1, is_vpn);
    bv.set_bits(0, 0, is_asbr);
    return bv;
}

void npl_mpls_encap_control_static_table_set_mpls_controls_payload_t::unpack(bit_vector64_t bv)
{
    mpls_encap_control_bits.unpack(bv.bits(4, 2));
    is_vpn = bv.bits(1, 1).get_value();
    is_asbr = bv.bits(0, 0).get_value();
}

field_structure npl_mpls_encap_control_static_table_set_mpls_controls_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_encap_control_static_table_set_mpls_controls_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("mpls_encap_control_bits", mpls_encap_control_bits.to_field_structure());
    fs_subfield.flat_value = to_hex_string(is_vpn);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_vpn", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_asbr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_asbr", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_mpls_encap_control_static_table_set_mpls_controls_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_encap_control_static_table_set_mpls_controls_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_encap_control_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(1, 0, lsp_type);
    bv.set_bits(5, 2, encap_type);
    
    return bv;
}

void npl_mpls_encap_control_static_table_key_t::unpack(bit_vector64_t bv)
{
    lsp_type = bv.bits(1, 0).get_value();
    encap_type = (npl_npu_encap_l3_header_type_e)bv.bits(5, 2).get_value();
    
}

field_structure npl_mpls_encap_control_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_encap_control_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(lsp_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lsp_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(encap_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("encap_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_encap_control_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_encap_control_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mpls_encap_control_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(12, 5, action);
    if (action == NPL_MPLS_ENCAP_CONTROL_STATIC_TABLE_ACTION_SET_MPLS_CONTROLS) {
        bv.set_bits(4, 0, payloads.set_mpls_controls.pack());
    }
    
    return bv;
}


void npl_mpls_encap_control_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mpls_encap_control_static_table_action_e)bv.bits(12, 5).get_value();
    if (action == NPL_MPLS_ENCAP_CONTROL_STATIC_TABLE_ACTION_SET_MPLS_CONTROLS) {
        payloads.set_mpls_controls.unpack(bv.bits(4, 0));
    }
    
}


field_structure npl_mpls_encap_control_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_encap_control_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_encap_control_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MPLS_ENCAP_CONTROL_STATIC_TABLE_ACTION_SET_MPLS_CONTROLS) {
        fs_result.subfields.emplace_back("set_mpls_controls", payloads.set_mpls_controls.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mpls_encap_control_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_encap_control_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_forwarding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    
    bv.set_bits(19, 0, label);
    
    return bv;
}

void npl_mpls_forwarding_table_key_t::unpack(bit_vector64_t bv)
{
    label = bv.bits(19, 0).get_value();
    
}

field_structure npl_mpls_forwarding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_forwarding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(label);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("label", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_forwarding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_forwarding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_mpls_forwarding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_MPLS_FORWARDING_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.nhlfe.pack());
    }
    
    return bv;
}


void npl_mpls_forwarding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_mpls_forwarding_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_MPLS_FORWARDING_TABLE_ACTION_WRITE) {
        payloads.nhlfe.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_mpls_forwarding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_forwarding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_forwarding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MPLS_FORWARDING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.nhlfe", payloads.nhlfe.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mpls_forwarding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_forwarding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_header_offset_in_bytes_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, mpls_is_null_labels);
    
    return bv;
}

void npl_mpls_header_offset_in_bytes_static_table_key_t::unpack(bit_vector64_t bv)
{
    mpls_is_null_labels = bv.bits(0, 0).get_value();
    
}

field_structure npl_mpls_header_offset_in_bytes_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_header_offset_in_bytes_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(mpls_is_null_labels);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mpls_is_null_labels", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_header_offset_in_bytes_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_header_offset_in_bytes_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mpls_header_offset_in_bytes_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(7, 0, action);
    
    return bv;
}


void npl_mpls_header_offset_in_bytes_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mpls_header_offset_in_bytes_static_table_action_e)bv.bits(7, 0).get_value();
    
}


field_structure npl_mpls_header_offset_in_bytes_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_header_offset_in_bytes_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_header_offset_in_bytes_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_header_offset_in_bytes_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_header_offset_in_bytes_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_l3_lsp_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, mpls_encap_control_bits.pack());
    
    return bv;
}

void npl_mpls_l3_lsp_static_table_key_t::unpack(bit_vector64_t bv)
{
    mpls_encap_control_bits.unpack(bv.bits(2, 0));
    
}

field_structure npl_mpls_l3_lsp_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_l3_lsp_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("mpls_encap_control_bits", mpls_encap_control_bits.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mpls_l3_lsp_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_l3_lsp_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mpls_l3_lsp_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(7, 0, action);
    
    return bv;
}


void npl_mpls_l3_lsp_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mpls_l3_lsp_static_table_action_e)bv.bits(7, 0).get_value();
    
}


field_structure npl_mpls_l3_lsp_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_l3_lsp_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_l3_lsp_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_l3_lsp_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_l3_lsp_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_labels_1_to_4_jump_offset_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, jump_offset_code);
    
    return bv;
}

void npl_mpls_labels_1_to_4_jump_offset_static_table_key_t::unpack(bit_vector64_t bv)
{
    jump_offset_code = bv.bits(1, 0).get_value();
    
}

field_structure npl_mpls_labels_1_to_4_jump_offset_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_labels_1_to_4_jump_offset_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(jump_offset_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("jump_offset_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_labels_1_to_4_jump_offset_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_labels_1_to_4_jump_offset_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mpls_labels_1_to_4_jump_offset_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_MPLS_LABELS_1_TO_4_JUMP_OFFSET_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.jump_offsets.pack());
    }
    
    return bv;
}


void npl_mpls_labels_1_to_4_jump_offset_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mpls_labels_1_to_4_jump_offset_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_MPLS_LABELS_1_TO_4_JUMP_OFFSET_STATIC_TABLE_ACTION_WRITE) {
        payloads.jump_offsets.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_mpls_labels_1_to_4_jump_offset_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_labels_1_to_4_jump_offset_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_labels_1_to_4_jump_offset_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MPLS_LABELS_1_TO_4_JUMP_OFFSET_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.jump_offsets", payloads.jump_offsets.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mpls_labels_1_to_4_jump_offset_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_labels_1_to_4_jump_offset_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    bv.set_bits(12, 12, num_labels_is_8);
    bv.set_bits(11, 11, outer_transport_labels_exist);
    bv.set_bits(10, 10, additional_labels_exist);
    bv.set_bits(9, 4, transport_labels_size);
    bv.set_bits(3, 2, second_ene_macro_code);
    bv.set_bits(1, 0, jump_offset_code);
    return bv;
}

void npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t::unpack(bit_vector64_t bv)
{
    num_labels_is_8 = bv.bits(12, 12).get_value();
    outer_transport_labels_exist = bv.bits(11, 11).get_value();
    additional_labels_exist = bv.bits(10, 10).get_value();
    transport_labels_size = bv.bits(9, 4).get_value();
    second_ene_macro_code = (npl_second_ene_macro_code_e)bv.bits(3, 2).get_value();
    jump_offset_code = (npl_ene_jump_offset_code_e)bv.bits(1, 0).get_value();
}

field_structure npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(num_labels_is_8);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("num_labels_is_8", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(outer_transport_labels_exist);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("outer_transport_labels_exist", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(additional_labels_exist);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("additional_labels_exist", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(transport_labels_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("transport_labels_size", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(second_ene_macro_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("second_ene_macro_code", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(jump_offset_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("jump_offset_code", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_lsp_labels_config_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(4, 0, num_outer_transport_labels.pack());
    bv.set_bits(5, 5, inner_transport_labels_exist);
    
    return bv;
}

void npl_mpls_lsp_labels_config_static_table_key_t::unpack(bit_vector64_t bv)
{
    num_outer_transport_labels.unpack(bv.bits(4, 0));
    inner_transport_labels_exist = bv.bits(5, 5).get_value();
    
}

field_structure npl_mpls_lsp_labels_config_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_lsp_labels_config_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("num_outer_transport_labels", num_outer_transport_labels.to_field_structure());
    fs_subfield.flat_value = to_hex_string(inner_transport_labels_exist);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("inner_transport_labels_exist", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_lsp_labels_config_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_lsp_labels_config_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mpls_lsp_labels_config_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(20, 13, action);
    if (action == NPL_MPLS_LSP_LABELS_CONFIG_STATIC_TABLE_ACTION_SET_SECOND_MPLS_ENE_MACRO) {
        bv.set_bits(12, 0, payloads.set_second_mpls_ene_macro.pack());
    }
    
    return bv;
}


void npl_mpls_lsp_labels_config_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mpls_lsp_labels_config_static_table_action_e)bv.bits(20, 13).get_value();
    if (action == NPL_MPLS_LSP_LABELS_CONFIG_STATIC_TABLE_ACTION_SET_SECOND_MPLS_ENE_MACRO) {
        payloads.set_second_mpls_ene_macro.unpack(bv.bits(12, 0));
    }
    
}


field_structure npl_mpls_lsp_labels_config_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_lsp_labels_config_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_lsp_labels_config_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MPLS_LSP_LABELS_CONFIG_STATIC_TABLE_ACTION_SET_SECOND_MPLS_ENE_MACRO) {
        fs_result.subfields.emplace_back("set_second_mpls_ene_macro", payloads.set_second_mpls_ene_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mpls_lsp_labels_config_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_lsp_labels_config_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_qos_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(3, 0, qos_id);
    bv.set_bits(6, 4, l3_qos_mapping_key);
    
    return bv;
}

void npl_mpls_qos_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    qos_id = bv.bits(3, 0).get_value();
    l3_qos_mapping_key = bv.bits(6, 4).get_value();
    
}

field_structure npl_mpls_qos_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_qos_mapping_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(qos_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("qos_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(l3_qos_mapping_key);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_qos_mapping_key", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_qos_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_qos_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mpls_qos_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_MPLS_QOS_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.mpls_qos_mapping_result.pack());
    }
    
    return bv;
}


void npl_mpls_qos_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mpls_qos_mapping_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_MPLS_QOS_MAPPING_TABLE_ACTION_WRITE) {
        payloads.mpls_qos_mapping_result.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_mpls_qos_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_qos_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_qos_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MPLS_QOS_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mpls_qos_mapping_result", payloads.mpls_qos_mapping_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mpls_qos_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_qos_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    bv.set_bits(11, 11, vpn_label_exists);
    bv.set_bits(10, 5, sizeof_labels);
    bv.set_bits(4, 0, mpls_first_ene_macro_control.pack());
    return bv;
}

void npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t::unpack(bit_vector64_t bv)
{
    vpn_label_exists = bv.bits(11, 11).get_value();
    sizeof_labels = bv.bits(10, 5).get_value();
    mpls_first_ene_macro_control.unpack(bv.bits(4, 0));
}

field_structure npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(vpn_label_exists);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vpn_label_exists", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(sizeof_labels);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sizeof_labels", fs_subfield);
    
    fs_result.subfields.emplace_back("mpls_first_ene_macro_control", mpls_first_ene_macro_control.to_field_structure());
    return fs_result;
}
std::string to_string(npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_resolve_service_labels_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 15);
    
    bv.set_bits(3, 0, fwd_hdr_type);
    bv.set_bits(4, 4, vpn_enabled);
    bv.set_bits(14, 5, lsp_flags.pack());
    
    return bv;
}

void npl_mpls_resolve_service_labels_static_table_key_t::unpack(bit_vector64_t bv)
{
    fwd_hdr_type = (npl_fwd_header_type_e)bv.bits(3, 0).get_value();
    vpn_enabled = bv.bits(4, 4).get_value();
    lsp_flags.unpack(bv.bits(14, 5));
    
}

field_structure npl_mpls_resolve_service_labels_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_resolve_service_labels_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(fwd_hdr_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fwd_hdr_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(vpn_enabled);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vpn_enabled", fs_subfield);
    
    fs_result.subfields.emplace_back("lsp_flags", lsp_flags.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_mpls_resolve_service_labels_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_resolve_service_labels_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mpls_resolve_service_labels_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(19, 12, action);
    if (action == NPL_MPLS_RESOLVE_SERVICE_LABELS_STATIC_TABLE_ACTION_SET_CONDITIONS) {
        bv.set_bits(11, 0, payloads.set_conditions.pack());
    }
    
    return bv;
}


void npl_mpls_resolve_service_labels_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mpls_resolve_service_labels_static_table_action_e)bv.bits(19, 12).get_value();
    if (action == NPL_MPLS_RESOLVE_SERVICE_LABELS_STATIC_TABLE_ACTION_SET_CONDITIONS) {
        payloads.set_conditions.unpack(bv.bits(11, 0));
    }
    
}


field_structure npl_mpls_resolve_service_labels_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_resolve_service_labels_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_resolve_service_labels_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MPLS_RESOLVE_SERVICE_LABELS_STATIC_TABLE_ACTION_SET_CONDITIONS) {
        fs_result.subfields.emplace_back("set_conditions", payloads.set_conditions.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mpls_resolve_service_labels_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_resolve_service_labels_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_termination_em0_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    
    bv.set_bits(19, 0, termination_label);
    
    return bv;
}

void npl_mpls_termination_em0_table_key_t::unpack(bit_vector64_t bv)
{
    termination_label = bv.bits(19, 0).get_value();
    
}

field_structure npl_mpls_termination_em0_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_termination_em0_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(termination_label);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("termination_label", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_termination_em0_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_termination_em0_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mpls_termination_em0_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(56, 49, action);
    if (action == NPL_MPLS_TERMINATION_EM0_TABLE_ACTION_WRITE) {
        bv.set_bits(48, 0, payloads.mpls_termination_result.pack());
    }
    
    return bv;
}


void npl_mpls_termination_em0_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mpls_termination_em0_table_action_e)bv.bits(56, 49).get_value();
    if (action == NPL_MPLS_TERMINATION_EM0_TABLE_ACTION_WRITE) {
        payloads.mpls_termination_result.unpack(bv.bits(48, 0));
    }
    
}


field_structure npl_mpls_termination_em0_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_termination_em0_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_termination_em0_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MPLS_TERMINATION_EM0_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mpls_termination_result", payloads.mpls_termination_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mpls_termination_em0_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_termination_em0_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_termination_em1_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    
    bv.set_bits(19, 0, termination_label);
    
    return bv;
}

void npl_mpls_termination_em1_table_key_t::unpack(bit_vector64_t bv)
{
    termination_label = bv.bits(19, 0).get_value();
    
}

field_structure npl_mpls_termination_em1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_termination_em1_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(termination_label);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("termination_label", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_termination_em1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_termination_em1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mpls_termination_em1_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(56, 49, action);
    if (action == NPL_MPLS_TERMINATION_EM1_TABLE_ACTION_WRITE) {
        bv.set_bits(48, 0, payloads.mpls_termination_result.pack());
    }
    
    return bv;
}


void npl_mpls_termination_em1_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mpls_termination_em1_table_action_e)bv.bits(56, 49).get_value();
    if (action == NPL_MPLS_TERMINATION_EM1_TABLE_ACTION_WRITE) {
        payloads.mpls_termination_result.unpack(bv.bits(48, 0));
    }
    
}


field_structure npl_mpls_termination_em1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_termination_em1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_termination_em1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MPLS_TERMINATION_EM1_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mpls_termination_result", payloads.mpls_termination_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mpls_termination_em1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_termination_em1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_vpn_enabled_static_table_set_value_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    bv.set_bits(1, 1, is_l2_vpn);
    bv.set_bits(0, 0, vpn_enabled);
    return bv;
}

void npl_mpls_vpn_enabled_static_table_set_value_payload_t::unpack(bit_vector64_t bv)
{
    is_l2_vpn = bv.bits(1, 1).get_value();
    vpn_enabled = bv.bits(0, 0).get_value();
}

field_structure npl_mpls_vpn_enabled_static_table_set_value_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_vpn_enabled_static_table_set_value_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(is_l2_vpn);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_l2_vpn", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(vpn_enabled);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vpn_enabled", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_mpls_vpn_enabled_static_table_set_value_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_vpn_enabled_static_table_set_value_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_mpls_vpn_enabled_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 19);
    
    bv.set_bits(2, 0, is_prefix_id);
    bv.set_bits(13, 3, l3_relay_id.pack());
    bv.set_bits(17, 14, fwd_header_type);
    bv.set_bits(18, 18, is_vpn);
    
    return bv;
}

void npl_mpls_vpn_enabled_static_table_key_t::unpack(bit_vector64_t bv)
{
    is_prefix_id = bv.bits(2, 0).get_value();
    l3_relay_id.unpack(bv.bits(13, 3));
    fwd_header_type = (npl_fwd_header_type_e)bv.bits(17, 14).get_value();
    is_vpn = bv.bits(18, 18).get_value();
    
}

field_structure npl_mpls_vpn_enabled_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_vpn_enabled_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(is_prefix_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_prefix_id", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    fs_subfield.flat_value = npl_enum_to_string(fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fwd_header_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_vpn);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_vpn", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_mpls_vpn_enabled_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_mpls_vpn_enabled_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_mpls_vpn_enabled_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(9, 2, action);
    if (action == NPL_MPLS_VPN_ENABLED_STATIC_TABLE_ACTION_SET_VALUE) {
        bv.set_bits(1, 0, payloads.set_value.pack());
    }
    
    return bv;
}


void npl_mpls_vpn_enabled_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_mpls_vpn_enabled_static_table_action_e)bv.bits(9, 2).get_value();
    if (action == NPL_MPLS_VPN_ENABLED_STATIC_TABLE_ACTION_SET_VALUE) {
        payloads.set_value.unpack(bv.bits(1, 0));
    }
    
}


field_structure npl_mpls_vpn_enabled_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_mpls_vpn_enabled_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_mpls_vpn_enabled_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MPLS_VPN_ENABLED_STATIC_TABLE_ACTION_SET_VALUE) {
        fs_result.subfields.emplace_back("set_value", payloads.set_value.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_mpls_vpn_enabled_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_mpls_vpn_enabled_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ms_voq_fabric_context_offset_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, calc_msvoq_num_input_fabric_context);
    
    return bv;
}

void npl_ms_voq_fabric_context_offset_table_key_t::unpack(bit_vector64_t bv)
{
    calc_msvoq_num_input_fabric_context = (npl_fabric_context_e)bv.bits(1, 0).get_value();
    
}

field_structure npl_ms_voq_fabric_context_offset_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ms_voq_fabric_context_offset_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(calc_msvoq_num_input_fabric_context);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("calc_msvoq_num_input_fabric_context", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ms_voq_fabric_context_offset_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ms_voq_fabric_context_offset_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ms_voq_fabric_context_offset_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_MS_VOQ_FABRIC_CONTEXT_OFFSET_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.ms_voq_fabric_context_offset_table_result.pack());
    }
    
    return bv;
}


void npl_ms_voq_fabric_context_offset_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ms_voq_fabric_context_offset_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_MS_VOQ_FABRIC_CONTEXT_OFFSET_TABLE_ACTION_WRITE) {
        payloads.ms_voq_fabric_context_offset_table_result.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_ms_voq_fabric_context_offset_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ms_voq_fabric_context_offset_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ms_voq_fabric_context_offset_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MS_VOQ_FABRIC_CONTEXT_OFFSET_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ms_voq_fabric_context_offset_table_result", payloads.ms_voq_fabric_context_offset_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ms_voq_fabric_context_offset_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ms_voq_fabric_context_offset_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_my_ipv4_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 45);
    
    bv.set_bits(31, 0, dip);
    bv.set_bits(42, 32, l3_relay_id.pack());
    bv.set_bits(44, 43, l4_protocol_type_3_2);
    
    return bv;
}

void npl_my_ipv4_table_key_t::unpack(bit_vector64_t bv)
{
    dip = bv.bits(31, 0).get_value();
    l3_relay_id.unpack(bv.bits(42, 32));
    l4_protocol_type_3_2 = bv.bits(44, 43).get_value();
    
}

field_structure npl_my_ipv4_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_my_ipv4_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dip);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dip", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    fs_subfield.flat_value = to_hex_string(l4_protocol_type_3_2);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l4_protocol_type_3_2", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_my_ipv4_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_my_ipv4_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_my_ipv4_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(25, 18, action);
    if (action == NPL_MY_IPV4_TABLE_ACTION_WRITE) {
        bv.set_bits(17, 0, payloads.ip_tunnel_termination_attr.pack());
    }
    
    return bv;
}


void npl_my_ipv4_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_my_ipv4_table_action_e)bv.bits(25, 18).get_value();
    if (action == NPL_MY_IPV4_TABLE_ACTION_WRITE) {
        payloads.ip_tunnel_termination_attr.unpack(bv.bits(17, 0));
    }
    
}


field_structure npl_my_ipv4_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_my_ipv4_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_my_ipv4_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_MY_IPV4_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ip_tunnel_termination_attr", payloads.ip_tunnel_termination_attr.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_my_ipv4_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_my_ipv4_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_native_ce_ptr_table_narrow_entry_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 97);
    bv.set_bits(96, 73, entry.pack());
    return bv;
}

void npl_native_ce_ptr_table_narrow_entry_payload_t::unpack(bit_vector128_t bv)
{
    entry.unpack(bv.bits(96, 73));
}

field_structure npl_native_ce_ptr_table_narrow_entry_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_ce_ptr_table_narrow_entry_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("entry", entry.to_field_structure());
    return fs_result;
}
std::string to_string(npl_native_ce_ptr_table_narrow_entry_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_ce_ptr_table_narrow_entry_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_native_ce_ptr_table_protected_entry_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 97);
    bv.set_bits(96, 0, data.pack());
    return bv;
}

void npl_native_ce_ptr_table_protected_entry_payload_t::unpack(bit_vector128_t bv)
{
    data.unpack(bv.bits(96, 0));
}

field_structure npl_native_ce_ptr_table_protected_entry_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_ce_ptr_table_protected_entry_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("data", data.to_field_structure());
    return fs_result;
}
std::string to_string(npl_native_ce_ptr_table_protected_entry_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_ce_ptr_table_protected_entry_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_native_ce_ptr_table_wide_entry_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 97);
    bv.set_bits(96, 49, entry.pack());
    return bv;
}

void npl_native_ce_ptr_table_wide_entry_payload_t::unpack(bit_vector128_t bv)
{
    entry.unpack(bv.bits(96, 49));
}

field_structure npl_native_ce_ptr_table_wide_entry_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_ce_ptr_table_wide_entry_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("entry", entry.to_field_structure());
    return fs_result;
}
std::string to_string(npl_native_ce_ptr_table_wide_entry_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_ce_ptr_table_wide_entry_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_ce_ptr_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 17);
    
    bv.set_bits(16, 0, ce_ptr);
    
    return bv;
}

void npl_native_ce_ptr_table_key_t::unpack(bit_vector64_t bv)
{
    ce_ptr = bv.bits(16, 0).get_value();
    
}

field_structure npl_native_ce_ptr_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_ce_ptr_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ce_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ce_ptr", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_native_ce_ptr_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_ce_ptr_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_native_ce_ptr_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(104, 97, action);
    if (action == NPL_NATIVE_CE_PTR_TABLE_ACTION_NARROW_ENTRY) {
        bv.set_bits(96, 0, payloads.narrow_entry.pack());
    }
    
    if (action == NPL_NATIVE_CE_PTR_TABLE_ACTION_PROTECTED_ENTRY) {
        bv.set_bits(96, 0, payloads.protected_entry.pack());
    }
    
    if (action == NPL_NATIVE_CE_PTR_TABLE_ACTION_WIDE_ENTRY) {
        bv.set_bits(96, 0, payloads.wide_entry.pack());
    }
    
    return bv;
}


void npl_native_ce_ptr_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_native_ce_ptr_table_action_e)bv.bits(104, 97).get_value();
    if (action == NPL_NATIVE_CE_PTR_TABLE_ACTION_NARROW_ENTRY) {
        payloads.narrow_entry.unpack(bv.bits(96, 0));
    }
    
    if (action == NPL_NATIVE_CE_PTR_TABLE_ACTION_PROTECTED_ENTRY) {
        payloads.protected_entry.unpack(bv.bits(96, 0));
    }
    
    if (action == NPL_NATIVE_CE_PTR_TABLE_ACTION_WIDE_ENTRY) {
        payloads.wide_entry.unpack(bv.bits(96, 0));
    }
    
}


field_structure npl_native_ce_ptr_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_ce_ptr_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_ce_ptr_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_CE_PTR_TABLE_ACTION_NARROW_ENTRY) {
        fs_result.subfields.emplace_back("narrow_entry", payloads.narrow_entry.to_field_structure());
    }
    
    if (action == NPL_NATIVE_CE_PTR_TABLE_ACTION_PROTECTED_ENTRY) {
        fs_result.subfields.emplace_back("protected_entry", payloads.protected_entry.to_field_structure());
    }
    
    if (action == NPL_NATIVE_CE_PTR_TABLE_ACTION_WIDE_ENTRY) {
        fs_result.subfields.emplace_back("wide_entry", payloads.wide_entry.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_ce_ptr_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_ce_ptr_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_fec_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(11, 0, fec.pack());
    
    return bv;
}

void npl_native_fec_table_key_t::unpack(bit_vector64_t bv)
{
    fec.unpack(bv.bits(11, 0));
    
}

field_structure npl_native_fec_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_fec_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("fec", fec.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_native_fec_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_fec_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_native_fec_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(63, 56, action);
    if (action == NPL_NATIVE_FEC_TABLE_ACTION_WRITE) {
        bv.set_bits(55, 0, payloads.native_fec_table_result.pack());
    }
    
    return bv;
}


void npl_native_fec_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_native_fec_table_action_e)bv.bits(63, 56).get_value();
    if (action == NPL_NATIVE_FEC_TABLE_ACTION_WRITE) {
        payloads.native_fec_table_result.unpack(bv.bits(55, 0));
    }
    
}


field_structure npl_native_fec_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_fec_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_fec_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_FEC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.native_fec_table_result", payloads.native_fec_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_fec_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_fec_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_fec_type_decoding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, type);
    
    return bv;
}

void npl_native_fec_type_decoding_table_key_t::unpack(bit_vector64_t bv)
{
    type = (npl_native_fec_entry_type_e)bv.bits(3, 0).get_value();
    
}

field_structure npl_native_fec_type_decoding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_fec_type_decoding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_native_fec_type_decoding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_fec_type_decoding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_native_fec_type_decoding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(70, 63, action);
    if (action == NPL_NATIVE_FEC_TYPE_DECODING_TABLE_ACTION_WRITE) {
        bv.set_bits(62, 0, payloads.native_fec_type_decoding_table_result.pack());
    }
    
    return bv;
}


void npl_native_fec_type_decoding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_native_fec_type_decoding_table_action_e)bv.bits(70, 63).get_value();
    if (action == NPL_NATIVE_FEC_TYPE_DECODING_TABLE_ACTION_WRITE) {
        payloads.native_fec_type_decoding_table_result.unpack(bv.bits(62, 0));
    }
    
}


field_structure npl_native_fec_type_decoding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_fec_type_decoding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_fec_type_decoding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_FEC_TYPE_DECODING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.native_fec_type_decoding_table_result", payloads.native_fec_type_decoding_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_fec_type_decoding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_fec_type_decoding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_native_frr_table_protected_data_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 119);
    bv.set_bits(118, 0, data.pack());
    return bv;
}

void npl_native_frr_table_protected_data_payload_t::unpack(bit_vector128_t bv)
{
    data.unpack(bv.bits(118, 0));
}

field_structure npl_native_frr_table_protected_data_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_frr_table_protected_data_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("data", data.to_field_structure());
    return fs_result;
}
std::string to_string(npl_native_frr_table_protected_data_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_frr_table_protected_data_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_frr_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, frr_id.pack());
    
    return bv;
}

void npl_native_frr_table_key_t::unpack(bit_vector64_t bv)
{
    frr_id.unpack(bv.bits(7, 0));
    
}

field_structure npl_native_frr_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_frr_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("frr_id", frr_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_native_frr_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_frr_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_native_frr_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(126, 119, action);
    if (action == NPL_NATIVE_FRR_TABLE_ACTION_PROTECTED_DATA) {
        bv.set_bits(118, 0, payloads.protected_data.pack());
    }
    
    return bv;
}


void npl_native_frr_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_native_frr_table_action_e)bv.bits(126, 119).get_value();
    if (action == NPL_NATIVE_FRR_TABLE_ACTION_PROTECTED_DATA) {
        payloads.protected_data.unpack(bv.bits(118, 0));
    }
    
}


field_structure npl_native_frr_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_frr_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_frr_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_FRR_TABLE_ACTION_PROTECTED_DATA) {
        fs_result.subfields.emplace_back("protected_data", payloads.protected_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_frr_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_frr_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_frr_type_decoding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, type);
    
    return bv;
}

void npl_native_frr_type_decoding_table_key_t::unpack(bit_vector64_t bv)
{
    type = (npl_native_frr_entry_type_e)bv.bits(3, 0).get_value();
    
}

field_structure npl_native_frr_type_decoding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_frr_type_decoding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_native_frr_type_decoding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_frr_type_decoding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_native_frr_type_decoding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(70, 63, action);
    if (action == NPL_NATIVE_FRR_TYPE_DECODING_TABLE_ACTION_WRITE) {
        bv.set_bits(62, 0, payloads.native_frr_type_decoding_table_result.pack());
    }
    
    return bv;
}


void npl_native_frr_type_decoding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_native_frr_type_decoding_table_action_e)bv.bits(70, 63).get_value();
    if (action == NPL_NATIVE_FRR_TYPE_DECODING_TABLE_ACTION_WRITE) {
        payloads.native_frr_type_decoding_table_result.unpack(bv.bits(62, 0));
    }
    
}


field_structure npl_native_frr_type_decoding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_frr_type_decoding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_frr_type_decoding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_FRR_TYPE_DECODING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.native_frr_type_decoding_table_result", payloads.native_frr_type_decoding_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_frr_type_decoding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_frr_type_decoding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_native_l2_lp_table_narrow_entry_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 97);
    bv.set_bits(96, 73, entry.pack());
    return bv;
}

void npl_native_l2_lp_table_narrow_entry_payload_t::unpack(bit_vector128_t bv)
{
    entry.unpack(bv.bits(96, 73));
}

field_structure npl_native_l2_lp_table_narrow_entry_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_l2_lp_table_narrow_entry_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("entry", entry.to_field_structure());
    return fs_result;
}
std::string to_string(npl_native_l2_lp_table_narrow_entry_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_l2_lp_table_narrow_entry_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_native_l2_lp_table_protected_entry_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 97);
    bv.set_bits(96, 0, data.pack());
    return bv;
}

void npl_native_l2_lp_table_protected_entry_payload_t::unpack(bit_vector128_t bv)
{
    data.unpack(bv.bits(96, 0));
}

field_structure npl_native_l2_lp_table_protected_entry_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_l2_lp_table_protected_entry_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("data", data.to_field_structure());
    return fs_result;
}
std::string to_string(npl_native_l2_lp_table_protected_entry_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_l2_lp_table_protected_entry_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_native_l2_lp_table_wide_entry_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 97);
    bv.set_bits(96, 49, entry.pack());
    return bv;
}

void npl_native_l2_lp_table_wide_entry_payload_t::unpack(bit_vector128_t bv)
{
    entry.unpack(bv.bits(96, 49));
}

field_structure npl_native_l2_lp_table_wide_entry_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_l2_lp_table_wide_entry_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("entry", entry.to_field_structure());
    return fs_result;
}
std::string to_string(npl_native_l2_lp_table_wide_entry_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_l2_lp_table_wide_entry_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_l2_lp_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 18);
    
    bv.set_bits(17, 0, l2_dlp.pack());
    
    return bv;
}

void npl_native_l2_lp_table_key_t::unpack(bit_vector64_t bv)
{
    l2_dlp.unpack(bv.bits(17, 0));
    
}

field_structure npl_native_l2_lp_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_l2_lp_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("l2_dlp", l2_dlp.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_native_l2_lp_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_l2_lp_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_native_l2_lp_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(104, 97, action);
    if (action == NPL_NATIVE_L2_LP_TABLE_ACTION_NARROW_ENTRY) {
        bv.set_bits(96, 0, payloads.narrow_entry.pack());
    }
    
    if (action == NPL_NATIVE_L2_LP_TABLE_ACTION_PROTECTED_ENTRY) {
        bv.set_bits(96, 0, payloads.protected_entry.pack());
    }
    
    if (action == NPL_NATIVE_L2_LP_TABLE_ACTION_WIDE_ENTRY) {
        bv.set_bits(96, 0, payloads.wide_entry.pack());
    }
    
    return bv;
}


void npl_native_l2_lp_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_native_l2_lp_table_action_e)bv.bits(104, 97).get_value();
    if (action == NPL_NATIVE_L2_LP_TABLE_ACTION_NARROW_ENTRY) {
        payloads.narrow_entry.unpack(bv.bits(96, 0));
    }
    
    if (action == NPL_NATIVE_L2_LP_TABLE_ACTION_PROTECTED_ENTRY) {
        payloads.protected_entry.unpack(bv.bits(96, 0));
    }
    
    if (action == NPL_NATIVE_L2_LP_TABLE_ACTION_WIDE_ENTRY) {
        payloads.wide_entry.unpack(bv.bits(96, 0));
    }
    
}


field_structure npl_native_l2_lp_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_l2_lp_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_l2_lp_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_L2_LP_TABLE_ACTION_NARROW_ENTRY) {
        fs_result.subfields.emplace_back("narrow_entry", payloads.narrow_entry.to_field_structure());
    }
    
    if (action == NPL_NATIVE_L2_LP_TABLE_ACTION_PROTECTED_ENTRY) {
        fs_result.subfields.emplace_back("protected_entry", payloads.protected_entry.to_field_structure());
    }
    
    if (action == NPL_NATIVE_L2_LP_TABLE_ACTION_WIDE_ENTRY) {
        fs_result.subfields.emplace_back("wide_entry", payloads.wide_entry.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_l2_lp_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_l2_lp_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_l2_lp_type_decoding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, type);
    
    return bv;
}

void npl_native_l2_lp_type_decoding_table_key_t::unpack(bit_vector64_t bv)
{
    type = (npl_native_l2_lp_entry_type_e)bv.bits(3, 0).get_value();
    
}

field_structure npl_native_l2_lp_type_decoding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_l2_lp_type_decoding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_native_l2_lp_type_decoding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_l2_lp_type_decoding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_native_l2_lp_type_decoding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(70, 63, action);
    if (action == NPL_NATIVE_L2_LP_TYPE_DECODING_TABLE_ACTION_WRITE) {
        bv.set_bits(62, 0, payloads.native_l2_lp_type_decoding_table_result.pack());
    }
    
    return bv;
}


void npl_native_l2_lp_type_decoding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_native_l2_lp_type_decoding_table_action_e)bv.bits(70, 63).get_value();
    if (action == NPL_NATIVE_L2_LP_TYPE_DECODING_TABLE_ACTION_WRITE) {
        payloads.native_l2_lp_type_decoding_table_result.unpack(bv.bits(62, 0));
    }
    
}


field_structure npl_native_l2_lp_type_decoding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_l2_lp_type_decoding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_l2_lp_type_decoding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_L2_LP_TYPE_DECODING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.native_l2_lp_type_decoding_table_result", payloads.native_l2_lp_type_decoding_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_l2_lp_type_decoding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_l2_lp_type_decoding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_lb_group_size_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, ecmp_id);
    
    return bv;
}

void npl_native_lb_group_size_table_key_t::unpack(bit_vector64_t bv)
{
    ecmp_id = bv.bits(12, 0).get_value();
    
}

field_structure npl_native_lb_group_size_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_lb_group_size_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ecmp_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ecmp_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_native_lb_group_size_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_lb_group_size_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_native_lb_group_size_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_NATIVE_LB_GROUP_SIZE_TABLE_ACTION_WRITE) {
        bv.set_bits(9, 0, payloads.native_lb_group_size_table_result.pack());
    }
    
    return bv;
}


void npl_native_lb_group_size_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_native_lb_group_size_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_NATIVE_LB_GROUP_SIZE_TABLE_ACTION_WRITE) {
        payloads.native_lb_group_size_table_result.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_native_lb_group_size_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_lb_group_size_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_lb_group_size_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_LB_GROUP_SIZE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.native_lb_group_size_table_result", payloads.native_lb_group_size_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_lb_group_size_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_lb_group_size_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_lb_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 30);
    
    bv.set_bits(13, 0, group_id);
    bv.set_bits(29, 14, member_id);
    
    return bv;
}

void npl_native_lb_table_key_t::unpack(bit_vector64_t bv)
{
    group_id = bv.bits(13, 0).get_value();
    member_id = bv.bits(29, 14).get_value();
    
}

field_structure npl_native_lb_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_lb_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(group_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("group_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(member_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("member_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_native_lb_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_lb_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_native_lb_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(56, 49, action);
    if (action == NPL_NATIVE_LB_TABLE_ACTION_WRITE) {
        bv.set_bits(48, 0, payloads.native_lb_result.pack());
    }
    
    return bv;
}


void npl_native_lb_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_native_lb_table_action_e)bv.bits(56, 49).get_value();
    if (action == NPL_NATIVE_LB_TABLE_ACTION_WRITE) {
        payloads.native_lb_result.unpack(bv.bits(48, 0));
    }
    
}


field_structure npl_native_lb_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_lb_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_lb_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_LB_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.native_lb_result", payloads.native_lb_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_lb_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_lb_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_lb_type_decoding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, type);
    
    return bv;
}

void npl_native_lb_type_decoding_table_key_t::unpack(bit_vector64_t bv)
{
    type = (npl_native_lb_entry_type_e)bv.bits(3, 0).get_value();
    
}

field_structure npl_native_lb_type_decoding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_lb_type_decoding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_native_lb_type_decoding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_lb_type_decoding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_native_lb_type_decoding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(70, 63, action);
    if (action == NPL_NATIVE_LB_TYPE_DECODING_TABLE_ACTION_WRITE) {
        bv.set_bits(62, 0, payloads.native_lb_type_decoding_table_result.pack());
    }
    
    return bv;
}


void npl_native_lb_type_decoding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_native_lb_type_decoding_table_action_e)bv.bits(70, 63).get_value();
    if (action == NPL_NATIVE_LB_TYPE_DECODING_TABLE_ACTION_WRITE) {
        payloads.native_lb_type_decoding_table_result.unpack(bv.bits(62, 0));
    }
    
}


field_structure npl_native_lb_type_decoding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_lb_type_decoding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_lb_type_decoding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_LB_TYPE_DECODING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.native_lb_type_decoding_table_result", payloads.native_lb_type_decoding_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_lb_type_decoding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_lb_type_decoding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_lp_is_pbts_prefix_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, prefix);
    
    return bv;
}

void npl_native_lp_is_pbts_prefix_table_key_t::unpack(bit_vector64_t bv)
{
    prefix = bv.bits(4, 0).get_value();
    
}

field_structure npl_native_lp_is_pbts_prefix_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_lp_is_pbts_prefix_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("prefix", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_native_lp_is_pbts_prefix_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_lp_is_pbts_prefix_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_native_lp_is_pbts_prefix_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_NATIVE_LP_IS_PBTS_PREFIX_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.native_lp_is_pbts_prefix_table_result.pack());
    }
    
    return bv;
}


void npl_native_lp_is_pbts_prefix_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_native_lp_is_pbts_prefix_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_NATIVE_LP_IS_PBTS_PREFIX_TABLE_ACTION_WRITE) {
        payloads.native_lp_is_pbts_prefix_table_result.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_native_lp_is_pbts_prefix_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_lp_is_pbts_prefix_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_lp_is_pbts_prefix_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_LP_IS_PBTS_PREFIX_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.native_lp_is_pbts_prefix_table_result", payloads.native_lp_is_pbts_prefix_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_lp_is_pbts_prefix_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_lp_is_pbts_prefix_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_lp_pbts_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, pbts_map_key.pack());
    
    return bv;
}

void npl_native_lp_pbts_map_table_key_t::unpack(bit_vector64_t bv)
{
    pbts_map_key.unpack(bv.bits(4, 0));
    
}

field_structure npl_native_lp_pbts_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_lp_pbts_map_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("pbts_map_key", pbts_map_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_native_lp_pbts_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_lp_pbts_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_native_lp_pbts_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_NATIVE_LP_PBTS_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.native_lp_pbts_map_table_result.pack());
    }
    
    return bv;
}


void npl_native_lp_pbts_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_native_lp_pbts_map_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_NATIVE_LP_PBTS_MAP_TABLE_ACTION_WRITE) {
        payloads.native_lp_pbts_map_table_result.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_native_lp_pbts_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_lp_pbts_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_lp_pbts_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_LP_PBTS_MAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.native_lp_pbts_map_table_result", payloads.native_lp_pbts_map_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_lp_pbts_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_lp_pbts_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_native_protection_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, id.pack());
    
    return bv;
}

void npl_native_protection_table_key_t::unpack(bit_vector64_t bv)
{
    id.unpack(bv.bits(12, 0));
    
}

field_structure npl_native_protection_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_protection_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("id", id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_native_protection_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_native_protection_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_native_protection_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_NATIVE_PROTECTION_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.native_protection_table_result.pack());
    }
    
    return bv;
}


void npl_native_protection_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_native_protection_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_NATIVE_PROTECTION_TABLE_ACTION_WRITE) {
        payloads.native_protection_table_result.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_native_protection_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_native_protection_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_native_protection_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NATIVE_PROTECTION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.native_protection_table_result", payloads.native_protection_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_native_protection_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_native_protection_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_next_header_1_is_l4_over_ipv4_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, fragmented);
    bv.set_bits(1, 1, is_l4);
    
    return bv;
}

void npl_next_header_1_is_l4_over_ipv4_static_table_key_t::unpack(bit_vector64_t bv)
{
    fragmented = bv.bits(0, 0).get_value();
    is_l4 = bv.bits(1, 1).get_value();
    
}

field_structure npl_next_header_1_is_l4_over_ipv4_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_next_header_1_is_l4_over_ipv4_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(fragmented);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fragmented", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_l4);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_l4", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_next_header_1_is_l4_over_ipv4_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_next_header_1_is_l4_over_ipv4_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_next_header_1_is_l4_over_ipv4_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_NEXT_HEADER_1_IS_L4_OVER_IPV4_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.next_header_1_is_l4_over_ipv4.pack());
    }
    
    return bv;
}


void npl_next_header_1_is_l4_over_ipv4_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_next_header_1_is_l4_over_ipv4_static_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_NEXT_HEADER_1_IS_L4_OVER_IPV4_STATIC_TABLE_ACTION_WRITE) {
        payloads.next_header_1_is_l4_over_ipv4.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_next_header_1_is_l4_over_ipv4_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_next_header_1_is_l4_over_ipv4_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_next_header_1_is_l4_over_ipv4_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NEXT_HEADER_1_IS_L4_OVER_IPV4_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.next_header_1_is_l4_over_ipv4", payloads.next_header_1_is_l4_over_ipv4.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_next_header_1_is_l4_over_ipv4_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_next_header_1_is_l4_over_ipv4_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_nh_macro_code_to_id_l6_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, l3_dlp_attributes_nh_ene_macro_code);
    
    return bv;
}

void npl_nh_macro_code_to_id_l6_static_table_key_t::unpack(bit_vector64_t bv)
{
    l3_dlp_attributes_nh_ene_macro_code = (npl_nh_ene_macro_code_e)bv.bits(1, 0).get_value();
    
}

field_structure npl_nh_macro_code_to_id_l6_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_nh_macro_code_to_id_l6_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(l3_dlp_attributes_nh_ene_macro_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_dlp_attributes_nh_ene_macro_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_nh_macro_code_to_id_l6_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_nh_macro_code_to_id_l6_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_nh_macro_code_to_id_l6_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_NH_MACRO_CODE_TO_ID_L6_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.l3_tx_local_vars_nh_encap_ene_macro_id.pack());
    }
    
    return bv;
}


void npl_nh_macro_code_to_id_l6_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_nh_macro_code_to_id_l6_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_NH_MACRO_CODE_TO_ID_L6_STATIC_TABLE_ACTION_WRITE) {
        payloads.l3_tx_local_vars_nh_encap_ene_macro_id.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_nh_macro_code_to_id_l6_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_nh_macro_code_to_id_l6_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_nh_macro_code_to_id_l6_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NH_MACRO_CODE_TO_ID_L6_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.l3_tx_local_vars_nh_encap_ene_macro_id", payloads.l3_tx_local_vars_nh_encap_ene_macro_id.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_nh_macro_code_to_id_l6_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_nh_macro_code_to_id_l6_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_nhlfe_type_mapping_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, mpls_relay_local_vars_nhlfe_type);
    
    return bv;
}

void npl_nhlfe_type_mapping_static_table_key_t::unpack(bit_vector64_t bv)
{
    mpls_relay_local_vars_nhlfe_type = (npl_nhlfe_type_e)bv.bits(3, 0).get_value();
    
}

field_structure npl_nhlfe_type_mapping_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_nhlfe_type_mapping_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(mpls_relay_local_vars_nhlfe_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mpls_relay_local_vars_nhlfe_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_nhlfe_type_mapping_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_nhlfe_type_mapping_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_nhlfe_type_mapping_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(31, 24, action);
    if (action == NPL_NHLFE_TYPE_MAPPING_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(23, 0, payloads.mpls_relay_local_vars_nhlfe_attributes.pack());
    }
    
    return bv;
}


void npl_nhlfe_type_mapping_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_nhlfe_type_mapping_static_table_action_e)bv.bits(31, 24).get_value();
    if (action == NPL_NHLFE_TYPE_MAPPING_STATIC_TABLE_ACTION_WRITE) {
        payloads.mpls_relay_local_vars_nhlfe_attributes.unpack(bv.bits(23, 0));
    }
    
}


field_structure npl_nhlfe_type_mapping_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_nhlfe_type_mapping_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_nhlfe_type_mapping_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NHLFE_TYPE_MAPPING_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.mpls_relay_local_vars_nhlfe_attributes", payloads.mpls_relay_local_vars_nhlfe_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_nhlfe_type_mapping_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_nhlfe_type_mapping_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_null_rtf_next_macro_static_table_set_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_null_rtf_next_macro_static_table_set_macro_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_null_rtf_next_macro_static_table_set_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_null_rtf_next_macro_static_table_set_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_null_rtf_next_macro_static_table_set_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_null_rtf_next_macro_static_table_set_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_null_rtf_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(0, 0, acl_outer);
    bv.set_bits(4, 1, pd_tunnel_ipv4_ipv6_init_rtf_stage.pack());
    bv.set_bits(9, 5, next_prot_type);
    
    return bv;
}

void npl_null_rtf_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    acl_outer = bv.bits(0, 0).get_value();
    pd_tunnel_ipv4_ipv6_init_rtf_stage.unpack(bv.bits(4, 1));
    next_prot_type = (npl_protocol_type_e)bv.bits(9, 5).get_value();
    
}

field_structure npl_null_rtf_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_null_rtf_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(acl_outer);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("acl_outer", fs_subfield);
    
    fs_result.subfields.emplace_back("pd_tunnel_ipv4_ipv6_init_rtf_stage", pd_tunnel_ipv4_ipv6_init_rtf_stage.to_field_structure());
    fs_subfield.flat_value = npl_enum_to_string(next_prot_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_prot_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_null_rtf_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_null_rtf_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_null_rtf_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_NULL_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
        bv.set_bits(9, 0, payloads.set_macro.pack());
    }
    
    return bv;
}


void npl_null_rtf_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_null_rtf_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_NULL_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
        payloads.set_macro.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_null_rtf_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_null_rtf_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_null_rtf_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NULL_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
        fs_result.subfields.emplace_back("set_macro", payloads.set_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_null_rtf_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_null_rtf_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_nw_smcid_threshold_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, dummy);
    
    return bv;
}

void npl_nw_smcid_threshold_table_key_t::unpack(bit_vector64_t bv)
{
    dummy = bv.bits(0, 0).get_value();
    
}

field_structure npl_nw_smcid_threshold_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_nw_smcid_threshold_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dummy);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dummy", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_nw_smcid_threshold_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_nw_smcid_threshold_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_nw_smcid_threshold_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_NW_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.smcid_threshold.pack());
    }
    
    return bv;
}


void npl_nw_smcid_threshold_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_nw_smcid_threshold_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_NW_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
        payloads.smcid_threshold.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_nw_smcid_threshold_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_nw_smcid_threshold_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_nw_smcid_threshold_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_NW_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.smcid_threshold", payloads.smcid_threshold.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_nw_smcid_threshold_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_nw_smcid_threshold_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_drop_destination_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x1);
    
    return bv;
}

void npl_oamp_drop_destination_static_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_oamp_drop_destination_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_drop_destination_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x1", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_oamp_drop_destination_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_oamp_drop_destination_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_oamp_drop_destination_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_OAMP_DROP_DESTINATION_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.drop_dest.pack());
    }
    
    return bv;
}


void npl_oamp_drop_destination_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_oamp_drop_destination_static_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_OAMP_DROP_DESTINATION_STATIC_TABLE_ACTION_WRITE) {
        payloads.drop_dest.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_oamp_drop_destination_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_drop_destination_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_oamp_drop_destination_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OAMP_DROP_DESTINATION_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.drop_dest", payloads.drop_dest.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_oamp_drop_destination_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_drop_destination_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_event_queue_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 34);
    
    bv.set_bits(7, 0, oamp_event);
    bv.set_bits(20, 8, mep_id);
    bv.set_bits(33, 21, rmep_id);
    
    return bv;
}

void npl_oamp_event_queue_table_key_t::unpack(bit_vector64_t bv)
{
    oamp_event = (npl_oamp_event_type_e)bv.bits(7, 0).get_value();
    mep_id = bv.bits(20, 8).get_value();
    rmep_id = bv.bits(33, 21).get_value();
    
}

field_structure npl_oamp_event_queue_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_event_queue_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(oamp_event);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("oamp_event", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(mep_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mep_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(rmep_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rmep_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_oamp_event_queue_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_oamp_event_queue_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_oamp_event_queue_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(7, 0, action);
    
    return bv;
}


void npl_oamp_event_queue_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_oamp_event_queue_table_action_e)bv.bits(7, 0).get_value();
    
}


field_structure npl_oamp_event_queue_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_event_queue_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_oamp_event_queue_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_oamp_event_queue_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_event_queue_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_get_counter_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, redirect_code);
    
    return bv;
}

void npl_oamp_redirect_get_counter_table_key_t::unpack(bit_vector64_t bv)
{
    redirect_code = bv.bits(7, 0).get_value();
    
}

field_structure npl_oamp_redirect_get_counter_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_get_counter_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(redirect_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("redirect_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_get_counter_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_oamp_redirect_get_counter_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_oamp_redirect_get_counter_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_OAMP_REDIRECT_GET_COUNTER_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.counter_ptr.pack());
    }
    
    return bv;
}


void npl_oamp_redirect_get_counter_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_oamp_redirect_get_counter_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_OAMP_REDIRECT_GET_COUNTER_TABLE_ACTION_WRITE) {
        payloads.counter_ptr.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_oamp_redirect_get_counter_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_get_counter_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_oamp_redirect_get_counter_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OAMP_REDIRECT_GET_COUNTER_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.counter_ptr", payloads.counter_ptr.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_get_counter_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_get_counter_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    bv.set_bits(31, 0, da);
    return bv;
}

void npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t::unpack(bit_vector64_t bv)
{
    da = bv.bits(31, 0).get_value();
}

field_structure npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(da);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("da", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_punt_eth_hdr_1_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, encap_selector);
    
    return bv;
}

void npl_oamp_redirect_punt_eth_hdr_1_table_key_t::unpack(bit_vector64_t bv)
{
    encap_selector = bv.bits(1, 0).get_value();
    
}

field_structure npl_oamp_redirect_punt_eth_hdr_1_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_1_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(encap_selector);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("encap_selector", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_1_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_1_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_oamp_redirect_punt_eth_hdr_1_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_1_TABLE_ACTION_SET_INJECT_ETH) {
        bv.set_bits(31, 0, payloads.set_inject_eth.pack());
    }
    
    return bv;
}


void npl_oamp_redirect_punt_eth_hdr_1_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_oamp_redirect_punt_eth_hdr_1_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_1_TABLE_ACTION_SET_INJECT_ETH) {
        payloads.set_inject_eth.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_oamp_redirect_punt_eth_hdr_1_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_1_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_oamp_redirect_punt_eth_hdr_1_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_1_TABLE_ACTION_SET_INJECT_ETH) {
        fs_result.subfields.emplace_back("set_inject_eth", payloads.set_inject_eth.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_1_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_1_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    bv.set_bits(31, 16, da);
    bv.set_bits(15, 0, sa);
    return bv;
}

void npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t::unpack(bit_vector64_t bv)
{
    da = bv.bits(31, 16).get_value();
    sa = bv.bits(15, 0).get_value();
}

field_structure npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(da);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("da", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(sa);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sa", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_punt_eth_hdr_2_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, encap_selector);
    
    return bv;
}

void npl_oamp_redirect_punt_eth_hdr_2_table_key_t::unpack(bit_vector64_t bv)
{
    encap_selector = bv.bits(1, 0).get_value();
    
}

field_structure npl_oamp_redirect_punt_eth_hdr_2_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_2_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(encap_selector);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("encap_selector", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_2_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_2_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_oamp_redirect_punt_eth_hdr_2_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_2_TABLE_ACTION_SET_INJECT_ETH) {
        bv.set_bits(31, 0, payloads.set_inject_eth.pack());
    }
    
    return bv;
}


void npl_oamp_redirect_punt_eth_hdr_2_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_oamp_redirect_punt_eth_hdr_2_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_2_TABLE_ACTION_SET_INJECT_ETH) {
        payloads.set_inject_eth.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_oamp_redirect_punt_eth_hdr_2_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_2_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_oamp_redirect_punt_eth_hdr_2_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_2_TABLE_ACTION_SET_INJECT_ETH) {
        fs_result.subfields.emplace_back("set_inject_eth", payloads.set_inject_eth.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_2_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_2_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    bv.set_bits(31, 0, sa);
    return bv;
}

void npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t::unpack(bit_vector64_t bv)
{
    sa = bv.bits(31, 0).get_value();
}

field_structure npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(sa);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sa", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_punt_eth_hdr_3_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, encap_selector);
    
    return bv;
}

void npl_oamp_redirect_punt_eth_hdr_3_table_key_t::unpack(bit_vector64_t bv)
{
    encap_selector = bv.bits(1, 0).get_value();
    
}

field_structure npl_oamp_redirect_punt_eth_hdr_3_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_3_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(encap_selector);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("encap_selector", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_3_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_3_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_oamp_redirect_punt_eth_hdr_3_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_3_TABLE_ACTION_SET_INJECT_ETH) {
        bv.set_bits(31, 0, payloads.set_inject_eth.pack());
    }
    
    return bv;
}


void npl_oamp_redirect_punt_eth_hdr_3_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_oamp_redirect_punt_eth_hdr_3_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_3_TABLE_ACTION_SET_INJECT_ETH) {
        payloads.set_inject_eth.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_oamp_redirect_punt_eth_hdr_3_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_3_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_oamp_redirect_punt_eth_hdr_3_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_3_TABLE_ACTION_SET_INJECT_ETH) {
        fs_result.subfields.emplace_back("set_inject_eth", payloads.set_inject_eth.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_3_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_3_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    bv.set_bits(15, 0, dei_vid);
    return bv;
}

void npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t::unpack(bit_vector64_t bv)
{
    dei_vid = bv.bits(15, 0).get_value();
}

field_structure npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dei_vid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dei_vid", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_punt_eth_hdr_4_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, encap_selector);
    
    return bv;
}

void npl_oamp_redirect_punt_eth_hdr_4_table_key_t::unpack(bit_vector64_t bv)
{
    encap_selector = bv.bits(1, 0).get_value();
    
}

field_structure npl_oamp_redirect_punt_eth_hdr_4_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_4_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(encap_selector);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("encap_selector", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_4_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_4_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_oamp_redirect_punt_eth_hdr_4_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_4_TABLE_ACTION_SET_INJECT_ETH) {
        bv.set_bits(15, 0, payloads.set_inject_eth.pack());
    }
    
    return bv;
}


void npl_oamp_redirect_punt_eth_hdr_4_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_oamp_redirect_punt_eth_hdr_4_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_4_TABLE_ACTION_SET_INJECT_ETH) {
        payloads.set_inject_eth.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_oamp_redirect_punt_eth_hdr_4_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_punt_eth_hdr_4_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_oamp_redirect_punt_eth_hdr_4_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_4_TABLE_ACTION_SET_INJECT_ETH) {
        fs_result.subfields.emplace_back("set_inject_eth", payloads.set_inject_eth.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_punt_eth_hdr_4_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_punt_eth_hdr_4_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_table_oamp_redirect_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 41);
    bv.set_bits(40, 21, destination.pack());
    bv.set_bits(20, 16, phb.pack());
    bv.set_bits(15, 14, encap_ptr);
    bv.set_bits(13, 13, keep_counter);
    bv.set_bits(12, 12, drop);
    bv.set_bits(11, 4, type);
    bv.set_bits(3, 0, ifg);
    return bv;
}

void npl_oamp_redirect_table_oamp_redirect_action_payload_t::unpack(bit_vector64_t bv)
{
    destination.unpack(bv.bits(40, 21));
    phb.unpack(bv.bits(20, 16));
    encap_ptr = bv.bits(15, 14).get_value();
    keep_counter = bv.bits(13, 13).get_value();
    drop = bv.bits(12, 12).get_value();
    type = (npl_inject_header_type_e)bv.bits(11, 4).get_value();
    ifg = bv.bits(3, 0).get_value();
}

field_structure npl_oamp_redirect_table_oamp_redirect_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_table_oamp_redirect_action_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("destination", destination.to_field_structure());
    fs_result.subfields.emplace_back("phb", phb.to_field_structure());
    fs_subfield.flat_value = to_hex_string(encap_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("encap_ptr", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(keep_counter);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("keep_counter", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(drop);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("drop", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ifg);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ifg", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_table_oamp_redirect_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_table_oamp_redirect_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_oamp_redirect_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, redirect_code);
    
    return bv;
}

void npl_oamp_redirect_table_key_t::unpack(bit_vector64_t bv)
{
    redirect_code = bv.bits(7, 0).get_value();
    
}

field_structure npl_oamp_redirect_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(redirect_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("redirect_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_oamp_redirect_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_oamp_redirect_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(48, 41, action);
    if (action == NPL_OAMP_REDIRECT_TABLE_ACTION_OAMP_REDIRECT_ACTION) {
        bv.set_bits(40, 0, payloads.oamp_redirect_action.pack());
    }
    
    return bv;
}


void npl_oamp_redirect_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_oamp_redirect_table_action_e)bv.bits(48, 41).get_value();
    if (action == NPL_OAMP_REDIRECT_TABLE_ACTION_OAMP_REDIRECT_ACTION) {
        payloads.oamp_redirect_action.unpack(bv.bits(40, 0));
    }
    
}


field_structure npl_oamp_redirect_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_oamp_redirect_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_oamp_redirect_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OAMP_REDIRECT_TABLE_ACTION_OAMP_REDIRECT_ACTION) {
        fs_result.subfields.emplace_back("oamp_redirect_action", payloads.oamp_redirect_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_oamp_redirect_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_oamp_redirect_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_obm_next_macro_static_table_update_next_macro_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_obm_next_macro_static_table_update_next_macro_action_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_obm_next_macro_static_table_update_next_macro_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_obm_next_macro_static_table_update_next_macro_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_obm_next_macro_static_table_update_next_macro_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_obm_next_macro_static_table_update_next_macro_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_obm_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(4, 0, has_punt_header);
    bv.set_bits(9, 5, rcy_data_suffix);
    
    return bv;
}

void npl_obm_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    has_punt_header = (npl_protocol_type_e)bv.bits(4, 0).get_value();
    rcy_data_suffix = bv.bits(9, 5).get_value();
    
}

field_structure npl_obm_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_obm_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(has_punt_header);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("has_punt_header", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(rcy_data_suffix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rcy_data_suffix", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_obm_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_obm_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_obm_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_OBM_NEXT_MACRO_STATIC_TABLE_ACTION_UPDATE_NEXT_MACRO_ACTION) {
        bv.set_bits(9, 0, payloads.update_next_macro_action.pack());
    }
    
    return bv;
}


void npl_obm_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_obm_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_OBM_NEXT_MACRO_STATIC_TABLE_ACTION_UPDATE_NEXT_MACRO_ACTION) {
        payloads.update_next_macro_action.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_obm_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_obm_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_obm_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OBM_NEXT_MACRO_STATIC_TABLE_ACTION_UPDATE_NEXT_MACRO_ACTION) {
        fs_result.subfields.emplace_back("update_next_macro_action", payloads.update_next_macro_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_obm_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_obm_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_og_next_macro_static_table_set_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_og_next_macro_static_table_set_macro_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_og_next_macro_static_table_set_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_og_next_macro_static_table_set_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_og_next_macro_static_table_set_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_og_next_macro_static_table_set_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_og_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, ip_version);
    
    return bv;
}

void npl_og_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    ip_version = (npl_ip_version_e)bv.bits(0, 0).get_value();
    
}

field_structure npl_og_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_og_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(ip_version);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_version", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_og_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_og_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_og_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_OG_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
        bv.set_bits(9, 0, payloads.set_macro.pack());
    }
    
    return bv;
}


void npl_og_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_og_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_OG_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
        payloads.set_macro.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_og_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_og_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_og_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OG_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
        fs_result.subfields.emplace_back("set_macro", payloads.set_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_og_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_og_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_outer_tpid_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, tpid_ptr);
    
    return bv;
}

void npl_outer_tpid_table_key_t::unpack(bit_vector64_t bv)
{
    tpid_ptr = bv.bits(3, 0).get_value();
    
}

field_structure npl_outer_tpid_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_outer_tpid_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tpid_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tpid_ptr", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_outer_tpid_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_outer_tpid_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_outer_tpid_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_OUTER_TPID_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.tpid);
    }
    
    return bv;
}


void npl_outer_tpid_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_outer_tpid_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_OUTER_TPID_TABLE_ACTION_WRITE) {
        payloads.tpid = bv.bits(15, 0).get_value();
    }
    
}


field_structure npl_outer_tpid_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_outer_tpid_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_outer_tpid_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OUTER_TPID_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.tpid);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.tpid", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_outer_tpid_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_outer_tpid_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_overlay_ipv4_sip_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 36);
    
    bv.set_bits(3, 0, vxlan_tunnel_loopback);
    bv.set_bits(35, 4, sip);
    
    return bv;
}

void npl_overlay_ipv4_sip_table_key_t::unpack(bit_vector64_t bv)
{
    vxlan_tunnel_loopback = bv.bits(3, 0).get_value();
    sip = bv.bits(35, 4).get_value();
    
}

field_structure npl_overlay_ipv4_sip_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_overlay_ipv4_sip_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(vxlan_tunnel_loopback);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vxlan_tunnel_loopback", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(sip);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sip", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_overlay_ipv4_sip_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_overlay_ipv4_sip_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_overlay_ipv4_sip_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_OVERLAY_IPV4_SIP_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.slp_id.pack());
    }
    
    return bv;
}


void npl_overlay_ipv4_sip_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_overlay_ipv4_sip_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_OVERLAY_IPV4_SIP_TABLE_ACTION_WRITE) {
        payloads.slp_id.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_overlay_ipv4_sip_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_overlay_ipv4_sip_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_overlay_ipv4_sip_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_OVERLAY_IPV4_SIP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.slp_id", payloads.slp_id.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_overlay_ipv4_sip_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_overlay_ipv4_sip_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pad_mtu_inj_check_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 15);
    
    bv.set_bits(13, 0, l3_tx_local_vars_fwd_pkt_size);
    bv.set_bits(14, 14, tx_npu_header_is_inject_up.pack());
    
    return bv;
}

void npl_pad_mtu_inj_check_static_table_key_t::unpack(bit_vector64_t bv)
{
    l3_tx_local_vars_fwd_pkt_size = bv.bits(13, 0).get_value();
    tx_npu_header_is_inject_up.unpack(bv.bits(14, 14));
    
}

field_structure npl_pad_mtu_inj_check_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pad_mtu_inj_check_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(l3_tx_local_vars_fwd_pkt_size);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_tx_local_vars_fwd_pkt_size", fs_subfield);
    
    fs_result.subfields.emplace_back("tx_npu_header_is_inject_up", tx_npu_header_is_inject_up.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_pad_mtu_inj_check_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pad_mtu_inj_check_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pad_mtu_inj_check_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_PAD_MTU_INJ_CHECK_STATIC_TABLE_ACTION_PAD_MTU_INJ_NEXT_MACRO_ACTION) {
        bv.set_bits(9, 0, payloads.pad_mtu_inj_next_macro_action.pack());
    }
    
    return bv;
}


void npl_pad_mtu_inj_check_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pad_mtu_inj_check_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_PAD_MTU_INJ_CHECK_STATIC_TABLE_ACTION_PAD_MTU_INJ_NEXT_MACRO_ACTION) {
        payloads.pad_mtu_inj_next_macro_action.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_pad_mtu_inj_check_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pad_mtu_inj_check_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pad_mtu_inj_check_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PAD_MTU_INJ_CHECK_STATIC_TABLE_ACTION_PAD_MTU_INJ_NEXT_MACRO_ACTION) {
        fs_result.subfields.emplace_back("pad_mtu_inj_next_macro_action", payloads.pad_mtu_inj_next_macro_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pad_mtu_inj_check_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pad_mtu_inj_check_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_path_lb_type_decoding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, type);
    
    return bv;
}

void npl_path_lb_type_decoding_table_key_t::unpack(bit_vector64_t bv)
{
    type = (npl_path_lb_entry_type_e)bv.bits(2, 0).get_value();
    
}

field_structure npl_path_lb_type_decoding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lb_type_decoding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_path_lb_type_decoding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_path_lb_type_decoding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_path_lb_type_decoding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(70, 63, action);
    if (action == NPL_PATH_LB_TYPE_DECODING_TABLE_ACTION_WRITE) {
        bv.set_bits(62, 0, payloads.path_lb_type_decoding_table_result.pack());
    }
    
    return bv;
}


void npl_path_lb_type_decoding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_path_lb_type_decoding_table_action_e)bv.bits(70, 63).get_value();
    if (action == NPL_PATH_LB_TYPE_DECODING_TABLE_ACTION_WRITE) {
        payloads.path_lb_type_decoding_table_result.unpack(bv.bits(62, 0));
    }
    
}


field_structure npl_path_lb_type_decoding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lb_type_decoding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_path_lb_type_decoding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PATH_LB_TYPE_DECODING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.path_lb_type_decoding_table_result", payloads.path_lb_type_decoding_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_path_lb_type_decoding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_path_lb_type_decoding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_path_lp_is_pbts_prefix_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, prefix);
    
    return bv;
}

void npl_path_lp_is_pbts_prefix_table_key_t::unpack(bit_vector64_t bv)
{
    prefix = bv.bits(4, 0).get_value();
    
}

field_structure npl_path_lp_is_pbts_prefix_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_is_pbts_prefix_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("prefix", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_path_lp_is_pbts_prefix_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_path_lp_is_pbts_prefix_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_path_lp_is_pbts_prefix_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_PATH_LP_IS_PBTS_PREFIX_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.path_lp_is_pbts_prefix_table_result.pack());
    }
    
    return bv;
}


void npl_path_lp_is_pbts_prefix_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_path_lp_is_pbts_prefix_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_PATH_LP_IS_PBTS_PREFIX_TABLE_ACTION_WRITE) {
        payloads.path_lp_is_pbts_prefix_table_result.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_path_lp_is_pbts_prefix_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_is_pbts_prefix_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_path_lp_is_pbts_prefix_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PATH_LP_IS_PBTS_PREFIX_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.path_lp_is_pbts_prefix_table_result", payloads.path_lp_is_pbts_prefix_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_path_lp_is_pbts_prefix_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_path_lp_is_pbts_prefix_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_path_lp_pbts_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, pbts_map_key.pack());
    
    return bv;
}

void npl_path_lp_pbts_map_table_key_t::unpack(bit_vector64_t bv)
{
    pbts_map_key.unpack(bv.bits(4, 0));
    
}

field_structure npl_path_lp_pbts_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_pbts_map_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("pbts_map_key", pbts_map_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_path_lp_pbts_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_path_lp_pbts_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_path_lp_pbts_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_PATH_LP_PBTS_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.path_lp_pbts_map_table_result.pack());
    }
    
    return bv;
}


void npl_path_lp_pbts_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_path_lp_pbts_map_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_PATH_LP_PBTS_MAP_TABLE_ACTION_WRITE) {
        payloads.path_lp_pbts_map_table_result.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_path_lp_pbts_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_pbts_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_path_lp_pbts_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PATH_LP_PBTS_MAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.path_lp_pbts_map_table_result", payloads.path_lp_pbts_map_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_path_lp_pbts_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_path_lp_pbts_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_path_lp_table_narrow_entry_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 83);
    bv.set_bits(82, 63, entry.pack());
    return bv;
}

void npl_path_lp_table_narrow_entry_payload_t::unpack(bit_vector128_t bv)
{
    entry.unpack(bv.bits(82, 63));
}

field_structure npl_path_lp_table_narrow_entry_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_table_narrow_entry_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("entry", entry.to_field_structure());
    return fs_result;
}
std::string to_string(npl_path_lp_table_narrow_entry_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_path_lp_table_narrow_entry_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_path_lp_table_protected_entry_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 83);
    bv.set_bits(82, 0, data.pack());
    return bv;
}

void npl_path_lp_table_protected_entry_payload_t::unpack(bit_vector128_t bv)
{
    data.unpack(bv.bits(82, 0));
}

field_structure npl_path_lp_table_protected_entry_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_table_protected_entry_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("data", data.to_field_structure());
    return fs_result;
}
std::string to_string(npl_path_lp_table_protected_entry_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_path_lp_table_protected_entry_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_path_lp_table_wide_entry_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 83);
    bv.set_bits(82, 43, entry.pack());
    return bv;
}

void npl_path_lp_table_wide_entry_payload_t::unpack(bit_vector128_t bv)
{
    entry.unpack(bv.bits(82, 43));
}

field_structure npl_path_lp_table_wide_entry_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_table_wide_entry_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("entry", entry.to_field_structure());
    return fs_result;
}
std::string to_string(npl_path_lp_table_wide_entry_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_path_lp_table_wide_entry_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_path_lp_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 15);
    
    bv.set_bits(14, 0, tunnel_dlp.pack());
    
    return bv;
}

void npl_path_lp_table_key_t::unpack(bit_vector64_t bv)
{
    tunnel_dlp.unpack(bv.bits(14, 0));
    
}

field_structure npl_path_lp_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("tunnel_dlp", tunnel_dlp.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_path_lp_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_path_lp_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_path_lp_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(90, 83, action);
    if (action == NPL_PATH_LP_TABLE_ACTION_NARROW_ENTRY) {
        bv.set_bits(82, 0, payloads.narrow_entry.pack());
    }
    
    if (action == NPL_PATH_LP_TABLE_ACTION_PROTECTED_ENTRY) {
        bv.set_bits(82, 0, payloads.protected_entry.pack());
    }
    
    if (action == NPL_PATH_LP_TABLE_ACTION_WIDE_ENTRY) {
        bv.set_bits(82, 0, payloads.wide_entry.pack());
    }
    
    return bv;
}


void npl_path_lp_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_path_lp_table_action_e)bv.bits(90, 83).get_value();
    if (action == NPL_PATH_LP_TABLE_ACTION_NARROW_ENTRY) {
        payloads.narrow_entry.unpack(bv.bits(82, 0));
    }
    
    if (action == NPL_PATH_LP_TABLE_ACTION_PROTECTED_ENTRY) {
        payloads.protected_entry.unpack(bv.bits(82, 0));
    }
    
    if (action == NPL_PATH_LP_TABLE_ACTION_WIDE_ENTRY) {
        payloads.wide_entry.unpack(bv.bits(82, 0));
    }
    
}


field_structure npl_path_lp_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_path_lp_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PATH_LP_TABLE_ACTION_NARROW_ENTRY) {
        fs_result.subfields.emplace_back("narrow_entry", payloads.narrow_entry.to_field_structure());
    }
    
    if (action == NPL_PATH_LP_TABLE_ACTION_PROTECTED_ENTRY) {
        fs_result.subfields.emplace_back("protected_entry", payloads.protected_entry.to_field_structure());
    }
    
    if (action == NPL_PATH_LP_TABLE_ACTION_WIDE_ENTRY) {
        fs_result.subfields.emplace_back("wide_entry", payloads.wide_entry.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_path_lp_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_path_lp_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_path_lp_type_decoding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, type);
    
    return bv;
}

void npl_path_lp_type_decoding_table_key_t::unpack(bit_vector64_t bv)
{
    type = (npl_path_lp_entry_type_e)bv.bits(2, 0).get_value();
    
}

field_structure npl_path_lp_type_decoding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_type_decoding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_path_lp_type_decoding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_path_lp_type_decoding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_path_lp_type_decoding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(70, 63, action);
    if (action == NPL_PATH_LP_TYPE_DECODING_TABLE_ACTION_WRITE) {
        bv.set_bits(62, 0, payloads.path_lp_type_decoding_table_result.pack());
    }
    
    return bv;
}


void npl_path_lp_type_decoding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_path_lp_type_decoding_table_action_e)bv.bits(70, 63).get_value();
    if (action == NPL_PATH_LP_TYPE_DECODING_TABLE_ACTION_WRITE) {
        payloads.path_lp_type_decoding_table_result.unpack(bv.bits(62, 0));
    }
    
}


field_structure npl_path_lp_type_decoding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_lp_type_decoding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_path_lp_type_decoding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PATH_LP_TYPE_DECODING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.path_lp_type_decoding_table_result", payloads.path_lp_type_decoding_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_path_lp_type_decoding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_path_lp_type_decoding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_path_protection_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, id.pack());
    
    return bv;
}

void npl_path_protection_table_key_t::unpack(bit_vector64_t bv)
{
    id.unpack(bv.bits(12, 0));
    
}

field_structure npl_path_protection_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_protection_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("id", id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_path_protection_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_path_protection_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_path_protection_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_PATH_PROTECTION_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.path_protection_table_result.pack());
    }
    
    return bv;
}


void npl_path_protection_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_path_protection_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_PATH_PROTECTION_TABLE_ACTION_WRITE) {
        payloads.path_protection_table_result.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_path_protection_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_path_protection_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_path_protection_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PATH_PROTECTION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.path_protection_table_result", payloads.path_protection_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_path_protection_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_path_protection_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pdoq_oq_ifc_mapping_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(8, 0, dest_oq);
    
    return bv;
}

void npl_pdoq_oq_ifc_mapping_key_t::unpack(bit_vector64_t bv)
{
    dest_oq = bv.bits(8, 0).get_value();
    
}

field_structure npl_pdoq_oq_ifc_mapping_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pdoq_oq_ifc_mapping_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dest_oq);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_oq", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pdoq_oq_ifc_mapping_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pdoq_oq_ifc_mapping_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pdoq_oq_ifc_mapping_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(22, 15, action);
    if (action == NPL_PDOQ_OQ_IFC_MAPPING_ACTION_WRITE) {
        bv.set_bits(14, 0, payloads.pdoq_oq_ifc_mapping_result.pack());
    }
    
    return bv;
}


void npl_pdoq_oq_ifc_mapping_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pdoq_oq_ifc_mapping_action_e)bv.bits(22, 15).get_value();
    if (action == NPL_PDOQ_OQ_IFC_MAPPING_ACTION_WRITE) {
        payloads.pdoq_oq_ifc_mapping_result.unpack(bv.bits(14, 0));
    }
    
}


field_structure npl_pdoq_oq_ifc_mapping_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pdoq_oq_ifc_mapping_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pdoq_oq_ifc_mapping_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PDOQ_OQ_IFC_MAPPING_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pdoq_oq_ifc_mapping_result", payloads.pdoq_oq_ifc_mapping_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pdoq_oq_ifc_mapping_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pdoq_oq_ifc_mapping_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pdvoq_bank_pair_offset_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_pdvoq_bank_pair_offset_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_pdvoq_bank_pair_offset_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pdvoq_bank_pair_offset_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pdvoq_bank_pair_offset_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pdvoq_bank_pair_offset_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_pdvoq_bank_pair_offset_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(115, 108, action);
    if (action == NPL_PDVOQ_BANK_PAIR_OFFSET_TABLE_ACTION_WRITE) {
        bv.set_bits(107, 0, payloads.pdvoq_bank_pair_offset_result.pack());
    }
    
    return bv;
}


void npl_pdvoq_bank_pair_offset_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_pdvoq_bank_pair_offset_table_action_e)bv.bits(115, 108).get_value();
    if (action == NPL_PDVOQ_BANK_PAIR_OFFSET_TABLE_ACTION_WRITE) {
        payloads.pdvoq_bank_pair_offset_result.unpack(bv.bits(107, 0));
    }
    
}


field_structure npl_pdvoq_bank_pair_offset_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pdvoq_bank_pair_offset_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pdvoq_bank_pair_offset_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PDVOQ_BANK_PAIR_OFFSET_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pdvoq_bank_pair_offset_result", payloads.pdvoq_bank_pair_offset_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pdvoq_bank_pair_offset_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pdvoq_bank_pair_offset_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pdvoq_slice_voq_properties_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, voq_num);
    
    return bv;
}

void npl_pdvoq_slice_voq_properties_table_key_t::unpack(bit_vector64_t bv)
{
    voq_num = bv.bits(15, 0).get_value();
    
}

field_structure npl_pdvoq_slice_voq_properties_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pdvoq_slice_voq_properties_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(voq_num);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("voq_num", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pdvoq_slice_voq_properties_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pdvoq_slice_voq_properties_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pdvoq_slice_voq_properties_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_PDVOQ_SLICE_VOQ_PROPERTIES_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.pdvoq_slice_voq_properties_result.pack());
    }
    
    return bv;
}


void npl_pdvoq_slice_voq_properties_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pdvoq_slice_voq_properties_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_PDVOQ_SLICE_VOQ_PROPERTIES_TABLE_ACTION_WRITE) {
        payloads.pdvoq_slice_voq_properties_result.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_pdvoq_slice_voq_properties_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pdvoq_slice_voq_properties_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pdvoq_slice_voq_properties_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PDVOQ_SLICE_VOQ_PROPERTIES_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pdvoq_slice_voq_properties_result", payloads.pdvoq_slice_voq_properties_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pdvoq_slice_voq_properties_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pdvoq_slice_voq_properties_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_per_asbr_and_dpe_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    
    bv.set_bits(15, 0, asbr);
    bv.set_bits(31, 16, dpe);
    
    return bv;
}

void npl_per_asbr_and_dpe_table_key_t::unpack(bit_vector64_t bv)
{
    asbr = bv.bits(15, 0).get_value();
    dpe = bv.bits(31, 16).get_value();
    
}

field_structure npl_per_asbr_and_dpe_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_per_asbr_and_dpe_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(asbr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("asbr", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dpe);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dpe", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_per_asbr_and_dpe_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_per_asbr_and_dpe_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_per_asbr_and_dpe_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(52, 45, action);
    if (action == NPL_PER_ASBR_AND_DPE_TABLE_ACTION_WRITE) {
        bv.set_bits(44, 0, payloads.large_em_label_encap_data_and_counter_ptr.pack());
    }
    
    return bv;
}


void npl_per_asbr_and_dpe_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_per_asbr_and_dpe_table_action_e)bv.bits(52, 45).get_value();
    if (action == NPL_PER_ASBR_AND_DPE_TABLE_ACTION_WRITE) {
        payloads.large_em_label_encap_data_and_counter_ptr.unpack(bv.bits(44, 0));
    }
    
}


field_structure npl_per_asbr_and_dpe_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_per_asbr_and_dpe_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_per_asbr_and_dpe_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PER_ASBR_AND_DPE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.large_em_label_encap_data_and_counter_ptr", payloads.large_em_label_encap_data_and_counter_ptr.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_per_asbr_and_dpe_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_per_asbr_and_dpe_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_per_pe_and_prefix_vpn_key_large_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 33);
    
    bv.set_bits(15, 0, lsp_destination);
    bv.set_bits(32, 16, ip_prefix_id);
    
    return bv;
}

void npl_per_pe_and_prefix_vpn_key_large_table_key_t::unpack(bit_vector64_t bv)
{
    lsp_destination = bv.bits(15, 0).get_value();
    ip_prefix_id = bv.bits(32, 16).get_value();
    
}

field_structure npl_per_pe_and_prefix_vpn_key_large_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_per_pe_and_prefix_vpn_key_large_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(lsp_destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lsp_destination", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ip_prefix_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_prefix_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_per_pe_and_prefix_vpn_key_large_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_per_pe_and_prefix_vpn_key_large_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_per_pe_and_prefix_vpn_key_large_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(83, 76, action);
    if (action == NPL_PER_PE_AND_PREFIX_VPN_KEY_LARGE_TABLE_ACTION_WRITE) {
        bv.set_bits(75, 0, payloads.vpn_encap_data.pack());
    }
    
    return bv;
}


void npl_per_pe_and_prefix_vpn_key_large_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_per_pe_and_prefix_vpn_key_large_table_action_e)bv.bits(83, 76).get_value();
    if (action == NPL_PER_PE_AND_PREFIX_VPN_KEY_LARGE_TABLE_ACTION_WRITE) {
        payloads.vpn_encap_data.unpack(bv.bits(75, 0));
    }
    
}


field_structure npl_per_pe_and_prefix_vpn_key_large_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_per_pe_and_prefix_vpn_key_large_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_per_pe_and_prefix_vpn_key_large_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PER_PE_AND_PREFIX_VPN_KEY_LARGE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.vpn_encap_data", payloads.vpn_encap_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_per_pe_and_prefix_vpn_key_large_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_per_pe_and_prefix_vpn_key_large_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_per_pe_and_vrf_vpn_key_large_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 27);
    
    bv.set_bits(15, 0, lsp_destination);
    bv.set_bits(26, 16, l3_relay_id.pack());
    
    return bv;
}

void npl_per_pe_and_vrf_vpn_key_large_table_key_t::unpack(bit_vector64_t bv)
{
    lsp_destination = bv.bits(15, 0).get_value();
    l3_relay_id.unpack(bv.bits(26, 16));
    
}

field_structure npl_per_pe_and_vrf_vpn_key_large_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_per_pe_and_vrf_vpn_key_large_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(lsp_destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lsp_destination", fs_subfield);
    
    fs_result.subfields.emplace_back("l3_relay_id", l3_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_per_pe_and_vrf_vpn_key_large_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_per_pe_and_vrf_vpn_key_large_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_per_pe_and_vrf_vpn_key_large_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(83, 76, action);
    if (action == NPL_PER_PE_AND_VRF_VPN_KEY_LARGE_TABLE_ACTION_WRITE) {
        bv.set_bits(75, 0, payloads.vpn_encap_data.pack());
    }
    
    return bv;
}


void npl_per_pe_and_vrf_vpn_key_large_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_per_pe_and_vrf_vpn_key_large_table_action_e)bv.bits(83, 76).get_value();
    if (action == NPL_PER_PE_AND_VRF_VPN_KEY_LARGE_TABLE_ACTION_WRITE) {
        payloads.vpn_encap_data.unpack(bv.bits(75, 0));
    }
    
}


field_structure npl_per_pe_and_vrf_vpn_key_large_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_per_pe_and_vrf_vpn_key_large_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_per_pe_and_vrf_vpn_key_large_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PER_PE_AND_VRF_VPN_KEY_LARGE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.vpn_encap_data", payloads.vpn_encap_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_per_pe_and_vrf_vpn_key_large_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_per_pe_and_vrf_vpn_key_large_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_per_port_destination_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(0, 0, device_rx_source_if_ifg);
    bv.set_bits(5, 1, device_rx_source_if_pif);
    
    return bv;
}

void npl_per_port_destination_table_key_t::unpack(bit_vector64_t bv)
{
    device_rx_source_if_ifg = bv.bits(0, 0).get_value();
    device_rx_source_if_pif = bv.bits(5, 1).get_value();
    
}

field_structure npl_per_port_destination_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_per_port_destination_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(device_rx_source_if_ifg);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("device_rx_source_if_ifg", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(device_rx_source_if_pif);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("device_rx_source_if_pif", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_per_port_destination_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_per_port_destination_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_per_port_destination_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_PER_PORT_DESTINATION_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.destination_local_vars_fwd_destination);
    }
    
    return bv;
}


void npl_per_port_destination_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_per_port_destination_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_PER_PORT_DESTINATION_TABLE_ACTION_WRITE) {
        payloads.destination_local_vars_fwd_destination = bv.bits(19, 0).get_value();
    }
    
}


field_structure npl_per_port_destination_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_per_port_destination_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_per_port_destination_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PER_PORT_DESTINATION_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.destination_local_vars_fwd_destination);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.destination_local_vars_fwd_destination", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_per_port_destination_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_per_port_destination_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_per_vrf_mpls_forwarding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 31);
    
    bv.set_bits(10, 0, vrf_id.pack());
    bv.set_bits(30, 11, label);
    
    return bv;
}

void npl_per_vrf_mpls_forwarding_table_key_t::unpack(bit_vector64_t bv)
{
    vrf_id.unpack(bv.bits(10, 0));
    label = bv.bits(30, 11).get_value();
    
}

field_structure npl_per_vrf_mpls_forwarding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_per_vrf_mpls_forwarding_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("vrf_id", vrf_id.to_field_structure());
    fs_subfield.flat_value = to_hex_string(label);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("label", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_per_vrf_mpls_forwarding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_per_vrf_mpls_forwarding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_per_vrf_mpls_forwarding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_PER_VRF_MPLS_FORWARDING_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.nhlfe.pack());
    }
    
    return bv;
}


void npl_per_vrf_mpls_forwarding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_per_vrf_mpls_forwarding_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_PER_VRF_MPLS_FORWARDING_TABLE_ACTION_WRITE) {
        payloads.nhlfe.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_per_vrf_mpls_forwarding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_per_vrf_mpls_forwarding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_per_vrf_mpls_forwarding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PER_VRF_MPLS_FORWARDING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.nhlfe", payloads.nhlfe.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_per_vrf_mpls_forwarding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_per_vrf_mpls_forwarding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_destination_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 48);
    
    bv.set_bits(7, 0, redirect2);
    bv.set_bits(15, 8, redirect1);
    bv.set_bits(31, 16, ssp2);
    bv.set_bits(47, 32, ssp1);
    
    return bv;
}

void npl_pfc_destination_table_key_t::unpack(bit_vector64_t bv)
{
    redirect2 = bv.bits(7, 0).get_value();
    redirect1 = bv.bits(15, 8).get_value();
    ssp2 = bv.bits(31, 16).get_value();
    ssp1 = bv.bits(47, 32).get_value();
    
}

field_structure npl_pfc_destination_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_destination_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(redirect2);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("redirect2", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(redirect1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("redirect1", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ssp2);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ssp2", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ssp1);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ssp1", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pfc_destination_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pfc_destination_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pfc_destination_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(47, 40, action);
    if (action == NPL_PFC_DESTINATION_TABLE_ACTION_WRITE) {
        bv.set_bits(39, 0, payloads.pfc_em_lookup_result.pack());
    }
    
    return bv;
}


void npl_pfc_destination_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pfc_destination_table_action_e)bv.bits(47, 40).get_value();
    if (action == NPL_PFC_DESTINATION_TABLE_ACTION_WRITE) {
        payloads.pfc_em_lookup_result.unpack(bv.bits(39, 0));
    }
    
}


field_structure npl_pfc_destination_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_destination_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pfc_destination_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PFC_DESTINATION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pfc_em_lookup_result", payloads.pfc_em_lookup_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pfc_destination_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_destination_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_event_queue_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 22);
    
    bv.set_bits(0, 0, 0x0);
    bv.set_bits(2, 1, 0x0);
    bv.set_bits(14, 3, destination);
    bv.set_bits(17, 15, tc);
    bv.set_bits(18, 18, cong_state.pack());
    bv.set_bits(21, 19, slice);
    
    return bv;
}

void npl_pfc_event_queue_table_key_t::unpack(bit_vector64_t bv)
{
    destination = bv.bits(14, 3).get_value();
    tc = bv.bits(17, 15).get_value();
    cong_state.unpack(bv.bits(18, 18));
    slice = bv.bits(21, 19).get_value();
    
}

field_structure npl_pfc_event_queue_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_event_queue_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("destination", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tc", fs_subfield);
    
    fs_result.subfields.emplace_back("cong_state", cong_state.to_field_structure());
    fs_subfield.flat_value = to_hex_string(slice);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("slice", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pfc_event_queue_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pfc_event_queue_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pfc_event_queue_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(7, 0, action);
    
    return bv;
}


void npl_pfc_event_queue_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pfc_event_queue_table_action_e)bv.bits(7, 0).get_value();
    
}


field_structure npl_pfc_event_queue_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_event_queue_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pfc_event_queue_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pfc_event_queue_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_event_queue_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, destination);
    return bv;
}

void npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t::unpack(bit_vector64_t bv)
{
    destination = bv.bits(19, 0).get_value();
}

field_structure npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("destination", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_filter_wd_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 15);
    
    bv.set_bits(11, 0, dsp);
    bv.set_bits(14, 12, tc);
    
    return bv;
}

void npl_pfc_filter_wd_table_key_t::unpack(bit_vector64_t bv)
{
    dsp = bv.bits(11, 0).get_value();
    tc = bv.bits(14, 12).get_value();
    
}

field_structure npl_pfc_filter_wd_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_filter_wd_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dsp);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dsp", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tc", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pfc_filter_wd_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pfc_filter_wd_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pfc_filter_wd_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_PFC_FILTER_WD_TABLE_ACTION_PFC_FILTER_WD_ACTION) {
        bv.set_bits(19, 0, payloads.pfc_filter_wd_action.pack());
    }
    
    return bv;
}


void npl_pfc_filter_wd_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pfc_filter_wd_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_PFC_FILTER_WD_TABLE_ACTION_PFC_FILTER_WD_ACTION) {
        payloads.pfc_filter_wd_action.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_pfc_filter_wd_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_filter_wd_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pfc_filter_wd_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PFC_FILTER_WD_TABLE_ACTION_PFC_FILTER_WD_ACTION) {
        fs_result.subfields.emplace_back("pfc_filter_wd_action", payloads.pfc_filter_wd_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pfc_filter_wd_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_filter_wd_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    bv.set_bits(4, 1, offset.pack());
    bv.set_bits(0, 0, trap);
    return bv;
}

void npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t::unpack(bit_vector64_t bv)
{
    offset.unpack(bv.bits(4, 1));
    trap = bv.bits(0, 0).get_value();
}

field_structure npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("offset", offset.to_field_structure());
    fs_subfield.flat_value = to_hex_string(trap);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("trap", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_offset_from_vector_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, vector);
    
    return bv;
}

void npl_pfc_offset_from_vector_static_table_key_t::unpack(bit_vector64_t bv)
{
    vector = bv.bits(7, 0).get_value();
    
}

field_structure npl_pfc_offset_from_vector_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_offset_from_vector_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(vector);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vector", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pfc_offset_from_vector_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pfc_offset_from_vector_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pfc_offset_from_vector_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(12, 5, action);
    if (action == NPL_PFC_OFFSET_FROM_VECTOR_STATIC_TABLE_ACTION_UPDATE_MIRROR_COMMANDS) {
        bv.set_bits(4, 0, payloads.update_mirror_commands.pack());
    }
    
    return bv;
}


void npl_pfc_offset_from_vector_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pfc_offset_from_vector_static_table_action_e)bv.bits(12, 5).get_value();
    if (action == NPL_PFC_OFFSET_FROM_VECTOR_STATIC_TABLE_ACTION_UPDATE_MIRROR_COMMANDS) {
        payloads.update_mirror_commands.unpack(bv.bits(4, 0));
    }
    
}


field_structure npl_pfc_offset_from_vector_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_offset_from_vector_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pfc_offset_from_vector_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PFC_OFFSET_FROM_VECTOR_STATIC_TABLE_ACTION_UPDATE_MIRROR_COMMANDS) {
        fs_result.subfields.emplace_back("update_mirror_commands", payloads.update_mirror_commands.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pfc_offset_from_vector_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_offset_from_vector_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_ssp_slice_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, ssp);
    
    return bv;
}

void npl_pfc_ssp_slice_map_table_key_t::unpack(bit_vector64_t bv)
{
    ssp = bv.bits(15, 0).get_value();
    
}

field_structure npl_pfc_ssp_slice_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_ssp_slice_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ssp);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ssp", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pfc_ssp_slice_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pfc_ssp_slice_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pfc_ssp_slice_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_PFC_SSP_SLICE_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.pfc_ssp_info.pack());
    }
    
    return bv;
}


void npl_pfc_ssp_slice_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pfc_ssp_slice_map_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_PFC_SSP_SLICE_MAP_TABLE_ACTION_WRITE) {
        payloads.pfc_ssp_info.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_pfc_ssp_slice_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_ssp_slice_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pfc_ssp_slice_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PFC_SSP_SLICE_MAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pfc_ssp_info", payloads.pfc_ssp_info.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pfc_ssp_slice_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_ssp_slice_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_tc_latency_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, tc);
    
    return bv;
}

void npl_pfc_tc_latency_table_key_t::unpack(bit_vector64_t bv)
{
    tc = bv.bits(2, 0).get_value();
    
}

field_structure npl_pfc_tc_latency_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_tc_latency_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tc", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pfc_tc_latency_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pfc_tc_latency_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pfc_tc_latency_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_PFC_TC_LATENCY_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.pfc_latency_threshold.pack());
    }
    
    return bv;
}


void npl_pfc_tc_latency_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pfc_tc_latency_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_PFC_TC_LATENCY_TABLE_ACTION_WRITE) {
        payloads.pfc_latency_threshold.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_pfc_tc_latency_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_tc_latency_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pfc_tc_latency_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PFC_TC_LATENCY_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pfc_latency_threshold", payloads.pfc_latency_threshold.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pfc_tc_latency_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_tc_latency_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_tc_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(1, 0, index);
    bv.set_bits(3, 2, profile);
    
    return bv;
}

void npl_pfc_tc_table_key_t::unpack(bit_vector64_t bv)
{
    index = bv.bits(1, 0).get_value();
    profile = bv.bits(3, 2).get_value();
    
}

field_structure npl_pfc_tc_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_tc_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("index", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pfc_tc_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pfc_tc_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pfc_tc_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_PFC_TC_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.pfc_quanta_result.pack());
    }
    
    return bv;
}


void npl_pfc_tc_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pfc_tc_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_PFC_TC_TABLE_ACTION_WRITE) {
        payloads.pfc_quanta_result.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_pfc_tc_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_tc_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pfc_tc_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PFC_TC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pfc_quanta_result", payloads.pfc_quanta_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pfc_tc_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_tc_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_tc_wrap_latency_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, tc);
    
    return bv;
}

void npl_pfc_tc_wrap_latency_table_key_t::unpack(bit_vector64_t bv)
{
    tc = bv.bits(2, 0).get_value();
    
}

field_structure npl_pfc_tc_wrap_latency_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_tc_wrap_latency_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tc", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pfc_tc_wrap_latency_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pfc_tc_wrap_latency_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pfc_tc_wrap_latency_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_PFC_TC_WRAP_LATENCY_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.pfc_wrap_latency_threshold.pack());
    }
    
    return bv;
}


void npl_pfc_tc_wrap_latency_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pfc_tc_wrap_latency_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_PFC_TC_WRAP_LATENCY_TABLE_ACTION_WRITE) {
        payloads.pfc_wrap_latency_threshold.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_pfc_tc_wrap_latency_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_tc_wrap_latency_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pfc_tc_wrap_latency_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PFC_TC_WRAP_LATENCY_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pfc_wrap_latency_threshold", payloads.pfc_wrap_latency_threshold.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pfc_tc_wrap_latency_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_tc_wrap_latency_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pfc_vector_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, tc);
    
    return bv;
}

void npl_pfc_vector_static_table_key_t::unpack(bit_vector64_t bv)
{
    tc = bv.bits(2, 0).get_value();
    
}

field_structure npl_pfc_vector_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_vector_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tc", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pfc_vector_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pfc_vector_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pfc_vector_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_PFC_VECTOR_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.pd_pd_npu_host_receive_fields_pfc_priority_table_vector);
    }
    
    return bv;
}


void npl_pfc_vector_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pfc_vector_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_PFC_VECTOR_STATIC_TABLE_ACTION_WRITE) {
        payloads.pd_pd_npu_host_receive_fields_pfc_priority_table_vector = bv.bits(7, 0).get_value();
    }
    
}


field_structure npl_pfc_vector_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pfc_vector_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pfc_vector_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PFC_VECTOR_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.pd_pd_npu_host_receive_fields_pfc_priority_table_vector);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.pd_pd_npu_host_receive_fields_pfc_priority_table_vector", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_pfc_vector_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pfc_vector_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pin_start_offset_macros_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_pin_start_offset_macros_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_pin_start_offset_macros_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pin_start_offset_macros_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pin_start_offset_macros_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pin_start_offset_macros_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pin_start_offset_macros_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_PIN_START_OFFSET_MACROS_ACTION_WRITE) {
        bv.set_bits(3, 0, payloads.select_macros.pack());
    }
    
    return bv;
}


void npl_pin_start_offset_macros_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pin_start_offset_macros_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_PIN_START_OFFSET_MACROS_ACTION_WRITE) {
        payloads.select_macros.unpack(bv.bits(3, 0));
    }
    
}


field_structure npl_pin_start_offset_macros_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pin_start_offset_macros_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pin_start_offset_macros_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PIN_START_OFFSET_MACROS_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.select_macros", payloads.select_macros.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pin_start_offset_macros_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pin_start_offset_macros_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pma_loopback_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(4, 0, device_packet_info_pif);
    bv.set_bits(5, 5, device_packet_info_ifg);
    
    return bv;
}

void npl_pma_loopback_table_key_t::unpack(bit_vector64_t bv)
{
    device_packet_info_pif = bv.bits(4, 0).get_value();
    device_packet_info_ifg = bv.bits(5, 5).get_value();
    
}

field_structure npl_pma_loopback_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pma_loopback_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(device_packet_info_pif);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("device_packet_info_pif", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(device_packet_info_ifg);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("device_packet_info_ifg", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pma_loopback_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pma_loopback_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pma_loopback_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(9, 2, action);
    if (action == NPL_PMA_LOOPBACK_TABLE_ACTION_WRITE) {
        bv.set_bits(1, 0, payloads.pma_loopback_data.pack());
    }
    
    return bv;
}


void npl_pma_loopback_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pma_loopback_table_action_e)bv.bits(9, 2).get_value();
    if (action == NPL_PMA_LOOPBACK_TABLE_ACTION_WRITE) {
        payloads.pma_loopback_data.unpack(bv.bits(1, 0));
    }
    
}


field_structure npl_pma_loopback_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pma_loopback_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pma_loopback_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PMA_LOOPBACK_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pma_loopback_data", payloads.pma_loopback_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pma_loopback_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pma_loopback_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_port_dspa_group_size_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, dspa);
    
    return bv;
}

void npl_port_dspa_group_size_table_key_t::unpack(bit_vector64_t bv)
{
    dspa = bv.bits(12, 0).get_value();
    
}

field_structure npl_port_dspa_group_size_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_dspa_group_size_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dspa);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dspa", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_port_dspa_group_size_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_port_dspa_group_size_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_port_dspa_group_size_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_PORT_DSPA_GROUP_SIZE_TABLE_ACTION_WRITE) {
        bv.set_bits(9, 0, payloads.dspa_group_size_table_result.pack());
    }
    
    return bv;
}


void npl_port_dspa_group_size_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_port_dspa_group_size_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_PORT_DSPA_GROUP_SIZE_TABLE_ACTION_WRITE) {
        payloads.dspa_group_size_table_result.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_port_dspa_group_size_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_dspa_group_size_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_port_dspa_group_size_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PORT_DSPA_GROUP_SIZE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.dspa_group_size_table_result", payloads.dspa_group_size_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_port_dspa_group_size_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_port_dspa_group_size_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_port_dspa_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 30);
    
    bv.set_bits(13, 0, group_id);
    bv.set_bits(29, 14, member_id);
    
    return bv;
}

void npl_port_dspa_table_key_t::unpack(bit_vector64_t bv)
{
    group_id = bv.bits(13, 0).get_value();
    member_id = bv.bits(29, 14).get_value();
    
}

field_structure npl_port_dspa_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_dspa_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(group_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("group_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(member_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("member_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_port_dspa_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_port_dspa_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_port_dspa_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(22, 15, action);
    if (action == NPL_PORT_DSPA_TABLE_ACTION_WRITE) {
        bv.set_bits(14, 0, payloads.port_dspa_result.pack());
    }
    
    return bv;
}


void npl_port_dspa_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_port_dspa_table_action_e)bv.bits(22, 15).get_value();
    if (action == NPL_PORT_DSPA_TABLE_ACTION_WRITE) {
        payloads.port_dspa_result.unpack(bv.bits(14, 0));
    }
    
}


field_structure npl_port_dspa_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_dspa_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_port_dspa_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PORT_DSPA_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.port_dspa_result", payloads.port_dspa_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_port_dspa_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_port_dspa_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_port_dspa_type_decoding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, type);
    
    return bv;
}

void npl_port_dspa_type_decoding_table_key_t::unpack(bit_vector64_t bv)
{
    type = (npl_port_dspa_entry_type_e)bv.bits(0, 0).get_value();
    
}

field_structure npl_port_dspa_type_decoding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_dspa_type_decoding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_port_dspa_type_decoding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_port_dspa_type_decoding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_port_dspa_type_decoding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(70, 63, action);
    if (action == NPL_PORT_DSPA_TYPE_DECODING_TABLE_ACTION_WRITE) {
        bv.set_bits(62, 0, payloads.port_dspa_type_decoding_table_result.pack());
    }
    
    return bv;
}


void npl_port_dspa_type_decoding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_port_dspa_type_decoding_table_action_e)bv.bits(70, 63).get_value();
    if (action == NPL_PORT_DSPA_TYPE_DECODING_TABLE_ACTION_WRITE) {
        payloads.port_dspa_type_decoding_table_result.unpack(bv.bits(62, 0));
    }
    
}


field_structure npl_port_dspa_type_decoding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_dspa_type_decoding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_port_dspa_type_decoding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PORT_DSPA_TYPE_DECODING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.port_dspa_type_decoding_table_result", payloads.port_dspa_type_decoding_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_port_dspa_type_decoding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_port_dspa_type_decoding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_port_npp_protection_table_protected_data_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 92);
    bv.set_bits(91, 0, data.pack());
    return bv;
}

void npl_port_npp_protection_table_protected_data_payload_t::unpack(bit_vector128_t bv)
{
    data.unpack(bv.bits(91, 0));
}

field_structure npl_port_npp_protection_table_protected_data_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_npp_protection_table_protected_data_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("data", data.to_field_structure());
    return fs_result;
}
std::string to_string(npl_port_npp_protection_table_protected_data_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_port_npp_protection_table_protected_data_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_port_npp_protection_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(9, 0, npp_protection_id.pack());
    
    return bv;
}

void npl_port_npp_protection_table_key_t::unpack(bit_vector64_t bv)
{
    npp_protection_id.unpack(bv.bits(9, 0));
    
}

field_structure npl_port_npp_protection_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_npp_protection_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("npp_protection_id", npp_protection_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_port_npp_protection_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_port_npp_protection_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_port_npp_protection_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(99, 92, action);
    if (action == NPL_PORT_NPP_PROTECTION_TABLE_ACTION_PROTECTED_DATA) {
        bv.set_bits(91, 0, payloads.protected_data.pack());
    }
    
    return bv;
}


void npl_port_npp_protection_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_port_npp_protection_table_action_e)bv.bits(99, 92).get_value();
    if (action == NPL_PORT_NPP_PROTECTION_TABLE_ACTION_PROTECTED_DATA) {
        payloads.protected_data.unpack(bv.bits(91, 0));
    }
    
}


field_structure npl_port_npp_protection_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_npp_protection_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_port_npp_protection_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PORT_NPP_PROTECTION_TABLE_ACTION_PROTECTED_DATA) {
        fs_result.subfields.emplace_back("protected_data", payloads.protected_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_port_npp_protection_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_port_npp_protection_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_port_npp_protection_type_decoding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, type);
    
    return bv;
}

void npl_port_npp_protection_type_decoding_table_key_t::unpack(bit_vector64_t bv)
{
    type = (npl_port_npp_protection_entry_type_e)bv.bits(1, 0).get_value();
    
}

field_structure npl_port_npp_protection_type_decoding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_npp_protection_type_decoding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_port_npp_protection_type_decoding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_port_npp_protection_type_decoding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_port_npp_protection_type_decoding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(70, 63, action);
    if (action == NPL_PORT_NPP_PROTECTION_TYPE_DECODING_TABLE_ACTION_WRITE) {
        bv.set_bits(62, 0, payloads.port_npp_protection_type_decoding_table_result.pack());
    }
    
    return bv;
}


void npl_port_npp_protection_type_decoding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_port_npp_protection_type_decoding_table_action_e)bv.bits(70, 63).get_value();
    if (action == NPL_PORT_NPP_PROTECTION_TYPE_DECODING_TABLE_ACTION_WRITE) {
        payloads.port_npp_protection_type_decoding_table_result.unpack(bv.bits(62, 0));
    }
    
}


field_structure npl_port_npp_protection_type_decoding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_npp_protection_type_decoding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_port_npp_protection_type_decoding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PORT_NPP_PROTECTION_TYPE_DECODING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.port_npp_protection_type_decoding_table_result", payloads.port_npp_protection_type_decoding_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_port_npp_protection_type_decoding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_port_npp_protection_type_decoding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_port_protection_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(9, 0, id.pack());
    
    return bv;
}

void npl_port_protection_table_key_t::unpack(bit_vector64_t bv)
{
    id.unpack(bv.bits(9, 0));
    
}

field_structure npl_port_protection_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_protection_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("id", id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_port_protection_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_port_protection_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_port_protection_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_PORT_PROTECTION_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.port_protection_table_result.pack());
    }
    
    return bv;
}


void npl_port_protection_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_port_protection_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_PORT_PROTECTION_TABLE_ACTION_WRITE) {
        payloads.port_protection_table_result.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_port_protection_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_port_protection_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_port_protection_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PORT_PROTECTION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.port_protection_table_result", payloads.port_protection_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_port_protection_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_port_protection_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_punt_ethertype_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(1, 0, punt_format);
    bv.set_bits(4, 2, punt_nw_encap_type);
    
    return bv;
}

void npl_punt_ethertype_static_table_key_t::unpack(bit_vector64_t bv)
{
    punt_format = (npl_punt_header_format_type_e)bv.bits(1, 0).get_value();
    punt_nw_encap_type = bv.bits(4, 2).get_value();
    
}

field_structure npl_punt_ethertype_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_ethertype_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(punt_format);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("punt_format", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(punt_nw_encap_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("punt_nw_encap_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_punt_ethertype_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_punt_ethertype_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_punt_ethertype_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_PUNT_ETHERTYPE_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.pd_ene_encap_data_punt_ethertype);
    }
    
    return bv;
}


void npl_punt_ethertype_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_punt_ethertype_static_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_PUNT_ETHERTYPE_STATIC_TABLE_ACTION_WRITE) {
        payloads.pd_ene_encap_data_punt_ethertype = bv.bits(15, 0).get_value();
    }
    
}


field_structure npl_punt_ethertype_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_ethertype_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_punt_ethertype_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PUNT_ETHERTYPE_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.pd_ene_encap_data_punt_ethertype);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.pd_ene_encap_data_punt_ethertype", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_punt_ethertype_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_punt_ethertype_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_punt_rcy_inject_header_ene_encap_table_found_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 28);
    bv.set_bits(27, 0, ene_inject_down_payload.pack());
    return bv;
}

void npl_punt_rcy_inject_header_ene_encap_table_found_payload_t::unpack(bit_vector64_t bv)
{
    ene_inject_down_payload.unpack(bv.bits(27, 0));
}

field_structure npl_punt_rcy_inject_header_ene_encap_table_found_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_rcy_inject_header_ene_encap_table_found_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("ene_inject_down_payload", ene_inject_down_payload.to_field_structure());
    return fs_result;
}
std::string to_string(npl_punt_rcy_inject_header_ene_encap_table_found_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_punt_rcy_inject_header_ene_encap_table_found_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_punt_rcy_inject_header_ene_encap_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, punt_nw_encap_ptr.pack());
    
    return bv;
}

void npl_punt_rcy_inject_header_ene_encap_table_key_t::unpack(bit_vector64_t bv)
{
    punt_nw_encap_ptr.unpack(bv.bits(7, 0));
    
}

field_structure npl_punt_rcy_inject_header_ene_encap_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_rcy_inject_header_ene_encap_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("punt_nw_encap_ptr", punt_nw_encap_ptr.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_punt_rcy_inject_header_ene_encap_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_punt_rcy_inject_header_ene_encap_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_punt_rcy_inject_header_ene_encap_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(35, 28, action);
    if (action == NPL_PUNT_RCY_INJECT_HEADER_ENE_ENCAP_TABLE_ACTION_FOUND) {
        bv.set_bits(27, 0, payloads.found.pack());
    }
    
    return bv;
}


void npl_punt_rcy_inject_header_ene_encap_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_punt_rcy_inject_header_ene_encap_table_action_e)bv.bits(35, 28).get_value();
    if (action == NPL_PUNT_RCY_INJECT_HEADER_ENE_ENCAP_TABLE_ACTION_FOUND) {
        payloads.found.unpack(bv.bits(27, 0));
    }
    
}


field_structure npl_punt_rcy_inject_header_ene_encap_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_rcy_inject_header_ene_encap_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_punt_rcy_inject_header_ene_encap_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PUNT_RCY_INJECT_HEADER_ENE_ENCAP_TABLE_ACTION_FOUND) {
        fs_result.subfields.emplace_back("found", payloads.found.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_punt_rcy_inject_header_ene_encap_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_punt_rcy_inject_header_ene_encap_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 32);
    bv.set_bits(31, 24, first_ene_macro.pack());
    bv.set_bits(23, 16, ene_macro_0.pack());
    bv.set_bits(15, 8, ene_macro_1.pack());
    bv.set_bits(7, 0, ene_macro_2.pack());
    return bv;
}

void npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t::unpack(bit_vector64_t bv)
{
    first_ene_macro.unpack(bv.bits(31, 24));
    ene_macro_0.unpack(bv.bits(23, 16));
    ene_macro_1.unpack(bv.bits(15, 8));
    ene_macro_2.unpack(bv.bits(7, 0));
}

field_structure npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("first_ene_macro", first_ene_macro.to_field_structure());
    fs_result.subfields.emplace_back("ene_macro_0", ene_macro_0.to_field_structure());
    fs_result.subfields.emplace_back("ene_macro_1", ene_macro_1.to_field_structure());
    fs_result.subfields.emplace_back("ene_macro_2", ene_macro_2.to_field_structure());
    return fs_result;
}
std::string to_string(npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_punt_select_nw_ene_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(3, 0, punt_nw_encap_type);
    bv.set_bits(4, 4, is_punt_rcy);
    
    return bv;
}

void npl_punt_select_nw_ene_static_table_key_t::unpack(bit_vector64_t bv)
{
    punt_nw_encap_type = (npl_punt_nw_encap_type_e)bv.bits(3, 0).get_value();
    is_punt_rcy = bv.bits(4, 4).get_value();
    
}

field_structure npl_punt_select_nw_ene_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_select_nw_ene_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(punt_nw_encap_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("punt_nw_encap_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_punt_rcy);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_punt_rcy", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_punt_select_nw_ene_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_punt_select_nw_ene_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_punt_select_nw_ene_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_PUNT_SELECT_NW_ENE_STATIC_TABLE_ACTION_TX_PUNT_SET_ENE_MACRO) {
        bv.set_bits(31, 0, payloads.tx_punt_set_ene_macro.pack());
    }
    
    return bv;
}


void npl_punt_select_nw_ene_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_punt_select_nw_ene_static_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_PUNT_SELECT_NW_ENE_STATIC_TABLE_ACTION_TX_PUNT_SET_ENE_MACRO) {
        payloads.tx_punt_set_ene_macro.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_punt_select_nw_ene_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_select_nw_ene_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_punt_select_nw_ene_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PUNT_SELECT_NW_ENE_STATIC_TABLE_ACTION_TX_PUNT_SET_ENE_MACRO) {
        fs_result.subfields.emplace_back("tx_punt_set_ene_macro", payloads.tx_punt_set_ene_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_punt_select_nw_ene_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_punt_select_nw_ene_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_punt_tunnel_transport_encap_table_ip_gre_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 120);
    bv.set_bits(119, 112, tos);
    bv.set_bits(111, 0, ip_encap_data.pack());
    return bv;
}

void npl_punt_tunnel_transport_encap_table_ip_gre_payload_t::unpack(bit_vector128_t bv)
{
    tos = bv.bits(119, 112).get_value();
    ip_encap_data.unpack(bv.bits(111, 0));
}

field_structure npl_punt_tunnel_transport_encap_table_ip_gre_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_tunnel_transport_encap_table_ip_gre_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tos);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tos", fs_subfield);
    
    fs_result.subfields.emplace_back("ip_encap_data", ip_encap_data.to_field_structure());
    return fs_result;
}
std::string to_string(npl_punt_tunnel_transport_encap_table_ip_gre_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_punt_tunnel_transport_encap_table_ip_gre_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_punt_tunnel_transport_encap_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, punt_nw_encap_ptr.pack());
    
    return bv;
}

void npl_punt_tunnel_transport_encap_table_key_t::unpack(bit_vector64_t bv)
{
    punt_nw_encap_ptr.unpack(bv.bits(7, 0));
    
}

field_structure npl_punt_tunnel_transport_encap_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_tunnel_transport_encap_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("punt_nw_encap_ptr", punt_nw_encap_ptr.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_punt_tunnel_transport_encap_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_punt_tunnel_transport_encap_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_punt_tunnel_transport_encap_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(127, 120, action);
    if (action == NPL_PUNT_TUNNEL_TRANSPORT_ENCAP_TABLE_ACTION_IP_GRE) {
        bv.set_bits(119, 0, payloads.ip_gre.pack());
    }
    
    return bv;
}


void npl_punt_tunnel_transport_encap_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_punt_tunnel_transport_encap_table_action_e)bv.bits(127, 120).get_value();
    if (action == NPL_PUNT_TUNNEL_TRANSPORT_ENCAP_TABLE_ACTION_IP_GRE) {
        payloads.ip_gre.unpack(bv.bits(119, 0));
    }
    
}


field_structure npl_punt_tunnel_transport_encap_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_tunnel_transport_encap_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_punt_tunnel_transport_encap_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PUNT_TUNNEL_TRANSPORT_ENCAP_TABLE_ACTION_IP_GRE) {
        fs_result.subfields.emplace_back("ip_gre", payloads.ip_gre.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_punt_tunnel_transport_encap_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_punt_tunnel_transport_encap_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_punt_tunnel_transport_extended_encap_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, punt_nw_encap_ptr.pack());
    
    return bv;
}

void npl_punt_tunnel_transport_extended_encap_table_key_t::unpack(bit_vector64_t bv)
{
    punt_nw_encap_ptr.unpack(bv.bits(7, 0));
    
}

field_structure npl_punt_tunnel_transport_extended_encap_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_tunnel_transport_extended_encap_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("punt_nw_encap_ptr", punt_nw_encap_ptr.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_punt_tunnel_transport_extended_encap_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_punt_tunnel_transport_extended_encap_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_punt_tunnel_transport_extended_encap_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(87, 80, action);
    if (action == NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE_ACTION_WRITE) {
        bv.set_bits(79, 0, payloads.extended_encap_data.pack());
    }
    
    return bv;
}


void npl_punt_tunnel_transport_extended_encap_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_punt_tunnel_transport_extended_encap_table_action_e)bv.bits(87, 80).get_value();
    if (action == NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE_ACTION_WRITE) {
        payloads.extended_encap_data.unpack(bv.bits(79, 0));
    }
    
}


field_structure npl_punt_tunnel_transport_extended_encap_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_tunnel_transport_extended_encap_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_punt_tunnel_transport_extended_encap_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.extended_encap_data", payloads.extended_encap_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_punt_tunnel_transport_extended_encap_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_punt_tunnel_transport_extended_encap_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_punt_tunnel_transport_extended_encap_table2_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(1, 0, 0x0);
    bv.set_bits(9, 2, punt_nw_encap_ptr.pack());
    
    return bv;
}

void npl_punt_tunnel_transport_extended_encap_table2_key_t::unpack(bit_vector64_t bv)
{
    punt_nw_encap_ptr.unpack(bv.bits(9, 2));
    
}

field_structure npl_punt_tunnel_transport_extended_encap_table2_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_tunnel_transport_extended_encap_table2_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_result.subfields.emplace_back("punt_nw_encap_ptr", punt_nw_encap_ptr.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_punt_tunnel_transport_extended_encap_table2_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_punt_tunnel_transport_extended_encap_table2_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_punt_tunnel_transport_extended_encap_table2_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(55, 48, action);
    if (action == NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE2_ACTION_WRITE) {
        bv.set_bits(47, 0, payloads.extended_encap_data2.pack());
    }
    
    return bv;
}


void npl_punt_tunnel_transport_extended_encap_table2_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_punt_tunnel_transport_extended_encap_table2_action_e)bv.bits(55, 48).get_value();
    if (action == NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE2_ACTION_WRITE) {
        payloads.extended_encap_data2.unpack(bv.bits(47, 0));
    }
    
}


field_structure npl_punt_tunnel_transport_extended_encap_table2_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_punt_tunnel_transport_extended_encap_table2_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_punt_tunnel_transport_extended_encap_table2_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE2_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.extended_encap_data2", payloads.extended_encap_data2.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_punt_tunnel_transport_extended_encap_table2_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_punt_tunnel_transport_extended_encap_table2_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pwe_label_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 14);
    
    bv.set_bits(13, 0, pwe_id);
    
    return bv;
}

void npl_pwe_label_table_key_t::unpack(bit_vector64_t bv)
{
    pwe_id = bv.bits(13, 0).get_value();
    
}

field_structure npl_pwe_label_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pwe_label_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pwe_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pwe_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pwe_label_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pwe_label_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_pwe_label_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(83, 76, action);
    if (action == NPL_PWE_LABEL_TABLE_ACTION_WRITE) {
        bv.set_bits(75, 0, payloads.vpn_encap_data.pack());
    }
    
    return bv;
}


void npl_pwe_label_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_pwe_label_table_action_e)bv.bits(83, 76).get_value();
    if (action == NPL_PWE_LABEL_TABLE_ACTION_WRITE) {
        payloads.vpn_encap_data.unpack(bv.bits(75, 0));
    }
    
}


field_structure npl_pwe_label_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pwe_label_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pwe_label_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PWE_LABEL_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.vpn_encap_data", payloads.vpn_encap_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pwe_label_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pwe_label_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pwe_to_l3_dest_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    
    bv.set_bits(19, 0, pwe_l2_dlp);
    
    return bv;
}

void npl_pwe_to_l3_dest_table_key_t::unpack(bit_vector64_t bv)
{
    pwe_l2_dlp = bv.bits(19, 0).get_value();
    
}

field_structure npl_pwe_to_l3_dest_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pwe_to_l3_dest_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pwe_l2_dlp);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pwe_l2_dlp", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_pwe_to_l3_dest_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pwe_to_l3_dest_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_pwe_to_l3_dest_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_PWE_TO_L3_DEST_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.l3_destination.pack());
    }
    
    return bv;
}


void npl_pwe_to_l3_dest_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_pwe_to_l3_dest_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_PWE_TO_L3_DEST_TABLE_ACTION_WRITE) {
        payloads.l3_destination.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_pwe_to_l3_dest_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pwe_to_l3_dest_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pwe_to_l3_dest_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PWE_TO_L3_DEST_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.l3_destination", payloads.l3_destination.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pwe_to_l3_dest_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pwe_to_l3_dest_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pwe_vpls_label_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 34);
    
    bv.set_bits(3, 0, 0x6);
    bv.set_bits(19, 4, lsp_destination);
    bv.set_bits(33, 20, l2_relay_id.pack());
    
    return bv;
}

void npl_pwe_vpls_label_table_key_t::unpack(bit_vector64_t bv)
{
    lsp_destination = bv.bits(19, 4).get_value();
    l2_relay_id.unpack(bv.bits(33, 20));
    
}

field_structure npl_pwe_vpls_label_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pwe_vpls_label_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x6);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x6", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(lsp_destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lsp_destination", fs_subfield);
    
    fs_result.subfields.emplace_back("l2_relay_id", l2_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_pwe_vpls_label_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pwe_vpls_label_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_pwe_vpls_label_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(83, 76, action);
    if (action == NPL_PWE_VPLS_LABEL_TABLE_ACTION_WRITE) {
        bv.set_bits(75, 0, payloads.vpn_encap_data.pack());
    }
    
    return bv;
}


void npl_pwe_vpls_label_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_pwe_vpls_label_table_action_e)bv.bits(83, 76).get_value();
    if (action == NPL_PWE_VPLS_LABEL_TABLE_ACTION_WRITE) {
        payloads.vpn_encap_data.unpack(bv.bits(75, 0));
    }
    
}


field_structure npl_pwe_vpls_label_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pwe_vpls_label_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pwe_vpls_label_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PWE_VPLS_LABEL_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.vpn_encap_data", payloads.vpn_encap_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pwe_vpls_label_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pwe_vpls_label_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_pwe_vpls_tunnel_label_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 34);
    
    bv.set_bits(3, 0, 0x3);
    bv.set_bits(19, 4, te_tunnel);
    bv.set_bits(33, 20, l2_relay_id.pack());
    
    return bv;
}

void npl_pwe_vpls_tunnel_label_table_key_t::unpack(bit_vector64_t bv)
{
    te_tunnel = bv.bits(19, 4).get_value();
    l2_relay_id.unpack(bv.bits(33, 20));
    
}

field_structure npl_pwe_vpls_tunnel_label_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pwe_vpls_tunnel_label_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x3);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x3", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(te_tunnel);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("te_tunnel", fs_subfield);
    
    fs_result.subfields.emplace_back("l2_relay_id", l2_relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_pwe_vpls_tunnel_label_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_pwe_vpls_tunnel_label_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_pwe_vpls_tunnel_label_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(83, 76, action);
    if (action == NPL_PWE_VPLS_TUNNEL_LABEL_TABLE_ACTION_WRITE) {
        bv.set_bits(75, 0, payloads.vpn_encap_data.pack());
    }
    
    return bv;
}


void npl_pwe_vpls_tunnel_label_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_pwe_vpls_tunnel_label_table_action_e)bv.bits(83, 76).get_value();
    if (action == NPL_PWE_VPLS_TUNNEL_LABEL_TABLE_ACTION_WRITE) {
        payloads.vpn_encap_data.unpack(bv.bits(75, 0));
    }
    
}


field_structure npl_pwe_vpls_tunnel_label_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_pwe_vpls_tunnel_label_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_pwe_vpls_tunnel_label_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_PWE_VPLS_TUNNEL_LABEL_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.vpn_encap_data", payloads.vpn_encap_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_pwe_vpls_tunnel_label_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_pwe_vpls_tunnel_label_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_reassembly_source_port_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, source_if.pack());
    
    return bv;
}

void npl_reassembly_source_port_map_table_key_t::unpack(bit_vector64_t bv)
{
    source_if.unpack(bv.bits(5, 0));
    
}

field_structure npl_reassembly_source_port_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_reassembly_source_port_map_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("source_if", source_if.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_reassembly_source_port_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_reassembly_source_port_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_reassembly_source_port_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(13, 6, action);
    if (action == NPL_REASSEMBLY_SOURCE_PORT_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(5, 0, payloads.reassembly_source_port_map_result.pack());
    }
    
    return bv;
}


void npl_reassembly_source_port_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_reassembly_source_port_map_table_action_e)bv.bits(13, 6).get_value();
    if (action == NPL_REASSEMBLY_SOURCE_PORT_MAP_TABLE_ACTION_WRITE) {
        payloads.reassembly_source_port_map_result.unpack(bv.bits(5, 0));
    }
    
}


field_structure npl_reassembly_source_port_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_reassembly_source_port_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_reassembly_source_port_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_REASSEMBLY_SOURCE_PORT_MAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.reassembly_source_port_map_result", payloads.reassembly_source_port_map_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_reassembly_source_port_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_reassembly_source_port_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_recycle_override_table_init_rx_data_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 34);
    bv.set_bits(33, 33, override_source_port_table);
    bv.set_bits(32, 29, initial_layer_index);
    bv.set_bits(28, 13, initial_rx_data.pack());
    bv.set_bits(12, 11, tag_swap_cmd);
    bv.set_bits(10, 6, np_macro_id);
    bv.set_bits(5, 0, fi_macro_id);
    return bv;
}

void npl_recycle_override_table_init_rx_data_payload_t::unpack(bit_vector64_t bv)
{
    override_source_port_table = bv.bits(33, 33).get_value();
    initial_layer_index = bv.bits(32, 29).get_value();
    initial_rx_data.unpack(bv.bits(28, 13));
    tag_swap_cmd = (npl_tag_swap_cmd_e)bv.bits(12, 11).get_value();
    np_macro_id = bv.bits(10, 6).get_value();
    fi_macro_id = bv.bits(5, 0).get_value();
}

field_structure npl_recycle_override_table_init_rx_data_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_recycle_override_table_init_rx_data_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(override_source_port_table);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("override_source_port_table", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(initial_layer_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("initial_layer_index", fs_subfield);
    
    fs_result.subfields.emplace_back("initial_rx_data", initial_rx_data.to_field_structure());
    fs_subfield.flat_value = npl_enum_to_string(tag_swap_cmd);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tag_swap_cmd", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(np_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("np_macro_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(fi_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fi_macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_recycle_override_table_init_rx_data_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_recycle_override_table_init_rx_data_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_recycle_override_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(3, 0, rxpp_npu_input_tx_to_rx_rcy_data_3_0_);
    bv.set_bits(4, 4, packet_is_rescheduled_recycle);
    bv.set_bits(5, 5, rxpp_npu_input_rcy_code_1_);
    
    return bv;
}

void npl_recycle_override_table_key_t::unpack(bit_vector64_t bv)
{
    rxpp_npu_input_tx_to_rx_rcy_data_3_0_ = bv.bits(3, 0).get_value();
    packet_is_rescheduled_recycle = bv.bits(4, 4).get_value();
    rxpp_npu_input_rcy_code_1_ = bv.bits(5, 5).get_value();
    
}

field_structure npl_recycle_override_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_recycle_override_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_npu_input_tx_to_rx_rcy_data_3_0_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_npu_input_tx_to_rx_rcy_data_3_0_", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(packet_is_rescheduled_recycle);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_is_rescheduled_recycle", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(rxpp_npu_input_rcy_code_1_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_npu_input_rcy_code_1_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_recycle_override_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_recycle_override_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_recycle_override_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(41, 34, action);
    if (action == NPL_RECYCLE_OVERRIDE_TABLE_ACTION_INIT_RX_DATA) {
        bv.set_bits(33, 0, payloads.init_rx_data.pack());
    }
    
    return bv;
}


void npl_recycle_override_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_recycle_override_table_action_e)bv.bits(41, 34).get_value();
    if (action == NPL_RECYCLE_OVERRIDE_TABLE_ACTION_INIT_RX_DATA) {
        payloads.init_rx_data.unpack(bv.bits(33, 0));
    }
    
}


field_structure npl_recycle_override_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_recycle_override_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_recycle_override_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RECYCLE_OVERRIDE_TABLE_ACTION_INIT_RX_DATA) {
        fs_result.subfields.emplace_back("init_rx_data", payloads.init_rx_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_recycle_override_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_recycle_override_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_recycled_inject_up_info_table_update_data_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 18);
    bv.set_bits(17, 6, ssp);
    bv.set_bits(5, 1, phb.pack());
    bv.set_bits(0, 0, init_data_selector);
    return bv;
}

void npl_recycled_inject_up_info_table_update_data_payload_t::unpack(bit_vector64_t bv)
{
    ssp = bv.bits(17, 6).get_value();
    phb.unpack(bv.bits(5, 1));
    init_data_selector = (npl_init_data_selector_e)bv.bits(0, 0).get_value();
}

field_structure npl_recycled_inject_up_info_table_update_data_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_recycled_inject_up_info_table_update_data_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ssp);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ssp", fs_subfield);
    
    fs_result.subfields.emplace_back("phb", phb.to_field_structure());
    fs_subfield.flat_value = npl_enum_to_string(init_data_selector);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("init_data_selector", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_recycled_inject_up_info_table_update_data_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_recycled_inject_up_info_table_update_data_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_recycled_inject_up_info_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, tx_to_rx_rcy_data);
    
    return bv;
}

void npl_recycled_inject_up_info_table_key_t::unpack(bit_vector64_t bv)
{
    tx_to_rx_rcy_data = bv.bits(5, 0).get_value();
    
}

field_structure npl_recycled_inject_up_info_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_recycled_inject_up_info_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tx_to_rx_rcy_data);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_to_rx_rcy_data", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_recycled_inject_up_info_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_recycled_inject_up_info_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_recycled_inject_up_info_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(25, 18, action);
    if (action == NPL_RECYCLED_INJECT_UP_INFO_TABLE_ACTION_UPDATE_DATA) {
        bv.set_bits(17, 0, payloads.update_data.pack());
    }
    
    return bv;
}


void npl_recycled_inject_up_info_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_recycled_inject_up_info_table_action_e)bv.bits(25, 18).get_value();
    if (action == NPL_RECYCLED_INJECT_UP_INFO_TABLE_ACTION_UPDATE_DATA) {
        payloads.update_data.unpack(bv.bits(17, 0));
    }
    
}


field_structure npl_recycled_inject_up_info_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_recycled_inject_up_info_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_recycled_inject_up_info_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RECYCLED_INJECT_UP_INFO_TABLE_ACTION_UPDATE_DATA) {
        fs_result.subfields.emplace_back("update_data", payloads.update_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_recycled_inject_up_info_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_recycled_inject_up_info_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_redirect_destination_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, device_packet_info_ifg);
    
    return bv;
}

void npl_redirect_destination_table_key_t::unpack(bit_vector64_t bv)
{
    device_packet_info_ifg = bv.bits(0, 0).get_value();
    
}

field_structure npl_redirect_destination_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_redirect_destination_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(device_packet_info_ifg);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("device_packet_info_ifg", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_redirect_destination_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_redirect_destination_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_redirect_destination_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(9, 2, action);
    if (action == NPL_REDIRECT_DESTINATION_TABLE_ACTION_WRITE) {
        bv.set_bits(1, 0, payloads.redirect_destination_reg.pack());
    }
    
    return bv;
}


void npl_redirect_destination_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_redirect_destination_table_action_e)bv.bits(9, 2).get_value();
    if (action == NPL_REDIRECT_DESTINATION_TABLE_ACTION_WRITE) {
        payloads.redirect_destination_reg.unpack(bv.bits(1, 0));
    }
    
}


field_structure npl_redirect_destination_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_redirect_destination_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_redirect_destination_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_REDIRECT_DESTINATION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.redirect_destination_reg", payloads.redirect_destination_reg.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_redirect_destination_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_redirect_destination_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector384_t npl_redirect_table_key_t::pack(void) const
{
    bit_vector384_t bv(0, 199);
    
    bv.set_bits(1, 0, trap_conditions.pack());
    bv.set_bits(198, 2, traps.pack());
    
    return bv;
}

void npl_redirect_table_key_t::unpack(bit_vector384_t bv)
{
    trap_conditions.unpack(bv.bits(1, 0));
    traps.unpack(bv.bits(198, 2));
    
}

field_structure npl_redirect_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_redirect_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("trap_conditions", trap_conditions.to_field_structure());
    fs_result.subfields.emplace_back("traps", traps.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_redirect_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_redirect_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_redirect_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.redirect_code.pack());
    }
    
    return bv;
}


void npl_redirect_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_redirect_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
        payloads.redirect_code.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_redirect_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_redirect_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_redirect_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.redirect_code", payloads.redirect_code.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_redirect_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_redirect_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_resolution_pfc_select_table_update_pfc_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    bv.set_bits(2, 2, pfc_enable.pack());
    bv.set_bits(1, 1, pfc_sample);
    bv.set_bits(0, 0, pfc_direct_sample);
    return bv;
}

void npl_resolution_pfc_select_table_update_pfc_payload_t::unpack(bit_vector64_t bv)
{
    pfc_enable.unpack(bv.bits(2, 2));
    pfc_sample = bv.bits(1, 1).get_value();
    pfc_direct_sample = bv.bits(0, 0).get_value();
}

field_structure npl_resolution_pfc_select_table_update_pfc_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_resolution_pfc_select_table_update_pfc_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("pfc_enable", pfc_enable.to_field_structure());
    fs_subfield.flat_value = to_hex_string(pfc_sample);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pfc_sample", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pfc_direct_sample);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pfc_direct_sample", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_resolution_pfc_select_table_update_pfc_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_resolution_pfc_select_table_update_pfc_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_resolution_pfc_select_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(2, 0, tc);
    bv.set_bits(6, 3, rx_time);
    
    return bv;
}

void npl_resolution_pfc_select_table_key_t::unpack(bit_vector64_t bv)
{
    tc = bv.bits(2, 0).get_value();
    rx_time = bv.bits(6, 3).get_value();
    
}

field_structure npl_resolution_pfc_select_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_resolution_pfc_select_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(rx_time);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rx_time", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_resolution_pfc_select_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_resolution_pfc_select_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_resolution_pfc_select_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_RESOLUTION_PFC_SELECT_TABLE_ACTION_UPDATE_PFC) {
        bv.set_bits(2, 0, payloads.update_pfc.pack());
    }
    
    return bv;
}


void npl_resolution_pfc_select_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_resolution_pfc_select_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_RESOLUTION_PFC_SELECT_TABLE_ACTION_UPDATE_PFC) {
        payloads.update_pfc.unpack(bv.bits(2, 0));
    }
    
}


field_structure npl_resolution_pfc_select_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_resolution_pfc_select_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_resolution_pfc_select_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RESOLUTION_PFC_SELECT_TABLE_ACTION_UPDATE_PFC) {
        fs_result.subfields.emplace_back("update_pfc", payloads.update_pfc.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_resolution_pfc_select_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_resolution_pfc_select_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    bv.set_bits(10, 10, next_is_fwd_done);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t::unpack(bit_vector64_t bv)
{
    next_is_fwd_done = bv.bits(10, 10).get_value();
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(next_is_fwd_done);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_is_fwd_done", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_resolution_set_next_macro_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, is_pfc_enable);
    bv.set_bits(1, 1, is_inject_up.pack());
    
    return bv;
}

void npl_resolution_set_next_macro_table_key_t::unpack(bit_vector64_t bv)
{
    is_pfc_enable = bv.bits(0, 0).get_value();
    is_inject_up.unpack(bv.bits(1, 1));
    
}

field_structure npl_resolution_set_next_macro_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_resolution_set_next_macro_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(is_pfc_enable);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_pfc_enable", fs_subfield);
    
    fs_result.subfields.emplace_back("is_inject_up", is_inject_up.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_resolution_set_next_macro_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_resolution_set_next_macro_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_resolution_set_next_macro_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(18, 11, action);
    if (action == NPL_RESOLUTION_SET_NEXT_MACRO_TABLE_ACTION_RESOLUTION_SET_NEXT_MACRO) {
        bv.set_bits(10, 0, payloads.resolution_set_next_macro.pack());
    }
    
    return bv;
}


void npl_resolution_set_next_macro_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_resolution_set_next_macro_table_action_e)bv.bits(18, 11).get_value();
    if (action == NPL_RESOLUTION_SET_NEXT_MACRO_TABLE_ACTION_RESOLUTION_SET_NEXT_MACRO) {
        payloads.resolution_set_next_macro.unpack(bv.bits(10, 0));
    }
    
}


field_structure npl_resolution_set_next_macro_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_resolution_set_next_macro_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_resolution_set_next_macro_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RESOLUTION_SET_NEXT_MACRO_TABLE_ACTION_RESOLUTION_SET_NEXT_MACRO) {
        fs_result.subfields.emplace_back("resolution_set_next_macro", payloads.resolution_set_next_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_resolution_set_next_macro_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_resolution_set_next_macro_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rewrite_sa_prefix_index_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, rewrite_sa_index);
    
    return bv;
}

void npl_rewrite_sa_prefix_index_table_key_t::unpack(bit_vector64_t bv)
{
    rewrite_sa_index = bv.bits(3, 0).get_value();
    
}

field_structure npl_rewrite_sa_prefix_index_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rewrite_sa_prefix_index_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rewrite_sa_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rewrite_sa_index", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rewrite_sa_prefix_index_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rewrite_sa_prefix_index_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rewrite_sa_prefix_index_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_REWRITE_SA_PREFIX_INDEX_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.sa_msb);
    }
    
    return bv;
}


void npl_rewrite_sa_prefix_index_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rewrite_sa_prefix_index_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_REWRITE_SA_PREFIX_INDEX_TABLE_ACTION_WRITE) {
        payloads.sa_msb = bv.bits(31, 0).get_value();
    }
    
}


field_structure npl_rewrite_sa_prefix_index_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rewrite_sa_prefix_index_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rewrite_sa_prefix_index_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_REWRITE_SA_PREFIX_INDEX_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.sa_msb);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.sa_msb", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_rewrite_sa_prefix_index_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rewrite_sa_prefix_index_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rmep_last_time_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, rmep_key.pack());
    
    return bv;
}

void npl_rmep_last_time_table_key_t::unpack(bit_vector64_t bv)
{
    rmep_key.unpack(bv.bits(12, 0));
    
}

field_structure npl_rmep_last_time_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rmep_last_time_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("rmep_key", rmep_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rmep_last_time_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rmep_last_time_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rmep_last_time_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_RMEP_LAST_TIME_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.rmep_result_rmep_last_time_result);
    }
    
    return bv;
}


void npl_rmep_last_time_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rmep_last_time_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_RMEP_LAST_TIME_TABLE_ACTION_WRITE) {
        payloads.rmep_result_rmep_last_time_result = bv.bits(31, 0).get_value();
    }
    
}


field_structure npl_rmep_last_time_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rmep_last_time_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rmep_last_time_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RMEP_LAST_TIME_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.rmep_result_rmep_last_time_result);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.rmep_result_rmep_last_time_result", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_rmep_last_time_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rmep_last_time_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rmep_state_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, rmep_key.pack());
    
    return bv;
}

void npl_rmep_state_table_key_t::unpack(bit_vector64_t bv)
{
    rmep_key.unpack(bv.bits(12, 0));
    
}

field_structure npl_rmep_state_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rmep_state_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("rmep_key", rmep_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rmep_state_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rmep_state_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rmep_state_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_RMEP_STATE_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.rmep_result_rmep_state_table_result.pack());
    }
    
    return bv;
}


void npl_rmep_state_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rmep_state_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_RMEP_STATE_TABLE_ACTION_WRITE) {
        payloads.rmep_result_rmep_state_table_result.unpack(bv.bits(15, 0));
    }
    
}


field_structure npl_rmep_state_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rmep_state_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rmep_state_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RMEP_STATE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rmep_result_rmep_state_table_result", payloads.rmep_result_rmep_state_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rmep_state_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rmep_state_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rpf_fec_access_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, prefix);
    
    return bv;
}

void npl_rpf_fec_access_map_table_key_t::unpack(bit_vector64_t bv)
{
    prefix = bv.bits(4, 0).get_value();
    
}

field_structure npl_rpf_fec_access_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rpf_fec_access_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("prefix", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rpf_fec_access_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rpf_fec_access_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rpf_fec_access_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_RPF_FEC_ACCESS_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.lpm_prefix_fec_access_map.pack());
    }
    
    return bv;
}


void npl_rpf_fec_access_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rpf_fec_access_map_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_RPF_FEC_ACCESS_MAP_TABLE_ACTION_WRITE) {
        payloads.lpm_prefix_fec_access_map.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_rpf_fec_access_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rpf_fec_access_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rpf_fec_access_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RPF_FEC_ACCESS_MAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lpm_prefix_fec_access_map", payloads.lpm_prefix_fec_access_map.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rpf_fec_access_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rpf_fec_access_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rpf_fec_table_found_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, dst.pack());
    return bv;
}

void npl_rpf_fec_table_found_payload_t::unpack(bit_vector64_t bv)
{
    dst.unpack(bv.bits(19, 0));
}

field_structure npl_rpf_fec_table_found_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rpf_fec_table_found_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("dst", dst.to_field_structure());
    return fs_result;
}
std::string to_string(npl_rpf_fec_table_found_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rpf_fec_table_found_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rpf_fec_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    
    bv.set_bits(11, 0, fec);
    
    return bv;
}

void npl_rpf_fec_table_key_t::unpack(bit_vector64_t bv)
{
    fec = bv.bits(11, 0).get_value();
    
}

field_structure npl_rpf_fec_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rpf_fec_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(fec);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fec", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rpf_fec_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rpf_fec_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rpf_fec_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_RPF_FEC_TABLE_ACTION_FOUND) {
        bv.set_bits(19, 0, payloads.found.pack());
    }
    
    return bv;
}


void npl_rpf_fec_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rpf_fec_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_RPF_FEC_TABLE_ACTION_FOUND) {
        payloads.found.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_rpf_fec_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rpf_fec_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rpf_fec_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RPF_FEC_TABLE_ACTION_FOUND) {
        fs_result.subfields.emplace_back("found", payloads.found.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rpf_fec_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rpf_fec_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(1, 0, rtf_step.pack());
    bv.set_bits(9, 2, lp_rtf_conf_set.pack());
    
    return bv;
}

void npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    rtf_step.unpack(bv.bits(1, 0));
    lp_rtf_conf_set.unpack(bv.bits(9, 2));
    
}

field_structure npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("rtf_step", rtf_step.to_field_structure());
    fs_result.subfields.emplace_back("lp_rtf_conf_set", lp_rtf_conf_set.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_RTF_CONF_SET_TO_OG_PCL_COMPRESS_BITS_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(3, 0, payloads.per_rtf_step_og_pcl_compress_bits.pack());
    }
    
    return bv;
}


void npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_RTF_CONF_SET_TO_OG_PCL_COMPRESS_BITS_MAPPING_TABLE_ACTION_WRITE) {
        payloads.per_rtf_step_og_pcl_compress_bits.unpack(bv.bits(3, 0));
    }
    
}


field_structure npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RTF_CONF_SET_TO_OG_PCL_COMPRESS_BITS_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.per_rtf_step_og_pcl_compress_bits", payloads.per_rtf_step_og_pcl_compress_bits.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rtf_conf_set_to_og_pcl_ids_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(1, 0, rtf_step.pack());
    bv.set_bits(9, 2, lp_rtf_conf_set.pack());
    
    return bv;
}

void npl_rtf_conf_set_to_og_pcl_ids_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    rtf_step.unpack(bv.bits(1, 0));
    lp_rtf_conf_set.unpack(bv.bits(9, 2));
    
}

field_structure npl_rtf_conf_set_to_og_pcl_ids_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rtf_conf_set_to_og_pcl_ids_mapping_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("rtf_step", rtf_step.to_field_structure());
    fs_result.subfields.emplace_back("lp_rtf_conf_set", lp_rtf_conf_set.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rtf_conf_set_to_og_pcl_ids_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rtf_conf_set_to_og_pcl_ids_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rtf_conf_set_to_og_pcl_ids_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_RTF_CONF_SET_TO_OG_PCL_IDS_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.per_rtf_step_og_pcl_ids.pack());
    }
    
    return bv;
}


void npl_rtf_conf_set_to_og_pcl_ids_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rtf_conf_set_to_og_pcl_ids_mapping_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_RTF_CONF_SET_TO_OG_PCL_IDS_MAPPING_TABLE_ACTION_WRITE) {
        payloads.per_rtf_step_og_pcl_ids.unpack(bv.bits(31, 0));
    }
    
}


field_structure npl_rtf_conf_set_to_og_pcl_ids_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rtf_conf_set_to_og_pcl_ids_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rtf_conf_set_to_og_pcl_ids_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RTF_CONF_SET_TO_OG_PCL_IDS_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.per_rtf_step_og_pcl_ids", payloads.per_rtf_step_og_pcl_ids.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rtf_conf_set_to_og_pcl_ids_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rtf_conf_set_to_og_pcl_ids_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rtf_conf_set_to_post_fwd_stage_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(0, 0, ip_version);
    bv.set_bits(8, 1, lp_rtf_conf_set.pack());
    
    return bv;
}

void npl_rtf_conf_set_to_post_fwd_stage_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    ip_version = (npl_ip_version_e)bv.bits(0, 0).get_value();
    lp_rtf_conf_set.unpack(bv.bits(8, 1));
    
}

field_structure npl_rtf_conf_set_to_post_fwd_stage_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rtf_conf_set_to_post_fwd_stage_mapping_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(ip_version);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ip_version", fs_subfield);
    
    fs_result.subfields.emplace_back("lp_rtf_conf_set", lp_rtf_conf_set.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rtf_conf_set_to_post_fwd_stage_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rtf_conf_set_to_post_fwd_stage_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rtf_conf_set_to_post_fwd_stage_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(13, 6, action);
    if (action == NPL_RTF_CONF_SET_TO_POST_FWD_STAGE_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(5, 0, payloads.post_fwd_params.pack());
    }
    
    return bv;
}


void npl_rtf_conf_set_to_post_fwd_stage_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rtf_conf_set_to_post_fwd_stage_mapping_table_action_e)bv.bits(13, 6).get_value();
    if (action == NPL_RTF_CONF_SET_TO_POST_FWD_STAGE_MAPPING_TABLE_ACTION_WRITE) {
        payloads.post_fwd_params.unpack(bv.bits(5, 0));
    }
    
}


field_structure npl_rtf_conf_set_to_post_fwd_stage_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rtf_conf_set_to_post_fwd_stage_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rtf_conf_set_to_post_fwd_stage_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RTF_CONF_SET_TO_POST_FWD_STAGE_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.post_fwd_params", payloads.post_fwd_params.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rtf_conf_set_to_post_fwd_stage_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rtf_conf_set_to_post_fwd_stage_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rtf_next_macro_static_table_set_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    bv.set_bits(10, 10, jump_to_fwd);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_rtf_next_macro_static_table_set_macro_payload_t::unpack(bit_vector64_t bv)
{
    jump_to_fwd = bv.bits(10, 10).get_value();
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_rtf_next_macro_static_table_set_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rtf_next_macro_static_table_set_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(jump_to_fwd);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("jump_to_fwd", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_rtf_next_macro_static_table_set_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rtf_next_macro_static_table_set_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rtf_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 19);
    
    bv.set_bits(3, 0, rtf_indications.pack());
    bv.set_bits(6, 4, next_rtf_stage);
    bv.set_bits(10, 7, pd_tunnel_ipv4_ipv6_init_rtf_stage.pack());
    bv.set_bits(18, 11, curr_and_next_prot_type.pack());
    
    return bv;
}

void npl_rtf_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    rtf_indications.unpack(bv.bits(3, 0));
    next_rtf_stage = (npl_rtf_stage_and_type_e)bv.bits(6, 4).get_value();
    pd_tunnel_ipv4_ipv6_init_rtf_stage.unpack(bv.bits(10, 7));
    curr_and_next_prot_type.unpack(bv.bits(18, 11));
    
}

field_structure npl_rtf_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rtf_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("rtf_indications", rtf_indications.to_field_structure());
    fs_subfield.flat_value = npl_enum_to_string(next_rtf_stage);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_rtf_stage", fs_subfield);
    
    fs_result.subfields.emplace_back("pd_tunnel_ipv4_ipv6_init_rtf_stage", pd_tunnel_ipv4_ipv6_init_rtf_stage.to_field_structure());
    fs_result.subfields.emplace_back("curr_and_next_prot_type", curr_and_next_prot_type.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rtf_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rtf_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rtf_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(18, 11, action);
    if (action == NPL_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
        bv.set_bits(10, 0, payloads.set_macro.pack());
    }
    
    return bv;
}


void npl_rtf_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rtf_next_macro_static_table_action_e)bv.bits(18, 11).get_value();
    if (action == NPL_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
        payloads.set_macro.unpack(bv.bits(10, 0));
    }
    
}


field_structure npl_rtf_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rtf_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rtf_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
        fs_result.subfields.emplace_back("set_macro", payloads.set_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rtf_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rtf_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_counters_block_config_table_config_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    bv.set_bits(3, 3, inc_bank_for_ifg_b);
    bv.set_bits(2, 2, inc_addr_for_set);
    bv.set_bits(1, 0, bank_set_type);
    return bv;
}

void npl_rx_counters_block_config_table_config_payload_t::unpack(bit_vector64_t bv)
{
    inc_bank_for_ifg_b = bv.bits(3, 3).get_value();
    inc_addr_for_set = bv.bits(2, 2).get_value();
    bank_set_type = (npl_rx_counters_set_type_e)bv.bits(1, 0).get_value();
}

field_structure npl_rx_counters_block_config_table_config_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_counters_block_config_table_config_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(inc_bank_for_ifg_b);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("inc_bank_for_ifg_b", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(inc_addr_for_set);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("inc_addr_for_set", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(bank_set_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("bank_set_type", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_rx_counters_block_config_table_config_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_counters_block_config_table_config_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_counters_block_config_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(6, 0, counter_block_id);
    
    return bv;
}

void npl_rx_counters_block_config_table_key_t::unpack(bit_vector64_t bv)
{
    counter_block_id = bv.bits(6, 0).get_value();
    
}

field_structure npl_rx_counters_block_config_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_counters_block_config_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(counter_block_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("counter_block_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_counters_block_config_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_counters_block_config_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_counters_block_config_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_RX_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_CONFIG) {
        bv.set_bits(3, 0, payloads.config.pack());
    }
    
    return bv;
}


void npl_rx_counters_block_config_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_counters_block_config_table_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_RX_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_CONFIG) {
        payloads.config.unpack(bv.bits(3, 0));
    }
    
}


field_structure npl_rx_counters_block_config_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_counters_block_config_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_counters_block_config_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_CONFIG) {
        fs_result.subfields.emplace_back("config", payloads.config.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_counters_block_config_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_counters_block_config_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_fwd_error_handling_counter_table_update_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, counter.pack());
    return bv;
}

void npl_rx_fwd_error_handling_counter_table_update_result_payload_t::unpack(bit_vector64_t bv)
{
    counter.unpack(bv.bits(19, 0));
}

field_structure npl_rx_fwd_error_handling_counter_table_update_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_fwd_error_handling_counter_table_update_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("counter", counter.to_field_structure());
    return fs_result;
}
std::string to_string(npl_rx_fwd_error_handling_counter_table_update_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_fwd_error_handling_counter_table_update_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_fwd_error_handling_counter_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(4, 0, pd_source_if_pif);
    bv.set_bits(5, 5, ser);
    
    return bv;
}

void npl_rx_fwd_error_handling_counter_table_key_t::unpack(bit_vector64_t bv)
{
    pd_source_if_pif = bv.bits(4, 0).get_value();
    ser = bv.bits(5, 5).get_value();
    
}

field_structure npl_rx_fwd_error_handling_counter_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_fwd_error_handling_counter_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pd_source_if_pif);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_source_if_pif", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ser);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ser", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_fwd_error_handling_counter_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_fwd_error_handling_counter_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_fwd_error_handling_counter_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_RX_FWD_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        bv.set_bits(19, 0, payloads.update_result.pack());
    }
    
    return bv;
}


void npl_rx_fwd_error_handling_counter_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_fwd_error_handling_counter_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_RX_FWD_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        payloads.update_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_rx_fwd_error_handling_counter_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_fwd_error_handling_counter_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_fwd_error_handling_counter_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_FWD_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        fs_result.subfields.emplace_back("update_result", payloads.update_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_fwd_error_handling_counter_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_fwd_error_handling_counter_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_fwd_error_handling_destination_table_update_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, destination);
    return bv;
}

void npl_rx_fwd_error_handling_destination_table_update_result_payload_t::unpack(bit_vector64_t bv)
{
    destination = bv.bits(19, 0).get_value();
}

field_structure npl_rx_fwd_error_handling_destination_table_update_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_fwd_error_handling_destination_table_update_result_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("destination", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_rx_fwd_error_handling_destination_table_update_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_fwd_error_handling_destination_table_update_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_fwd_error_handling_destination_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, ser);
    
    return bv;
}

void npl_rx_fwd_error_handling_destination_table_key_t::unpack(bit_vector64_t bv)
{
    ser = bv.bits(0, 0).get_value();
    
}

field_structure npl_rx_fwd_error_handling_destination_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_fwd_error_handling_destination_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ser);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ser", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_fwd_error_handling_destination_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_fwd_error_handling_destination_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_fwd_error_handling_destination_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        bv.set_bits(19, 0, payloads.update_result.pack());
    }
    
    return bv;
}


void npl_rx_fwd_error_handling_destination_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_fwd_error_handling_destination_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        payloads.update_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_rx_fwd_error_handling_destination_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_fwd_error_handling_destination_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_fwd_error_handling_destination_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        fs_result.subfields.emplace_back("update_result", payloads.update_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_fwd_error_handling_destination_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_fwd_error_handling_destination_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_ip_p_counter_offset_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(0, 0, per_protocol_count);
    bv.set_bits(2, 1, ip_ver_mc.pack());
    
    return bv;
}

void npl_rx_ip_p_counter_offset_static_table_key_t::unpack(bit_vector64_t bv)
{
    per_protocol_count = bv.bits(0, 0).get_value();
    ip_ver_mc.unpack(bv.bits(2, 1));
    
}

field_structure npl_rx_ip_p_counter_offset_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_ip_p_counter_offset_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(per_protocol_count);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("per_protocol_count", fs_subfield);
    
    fs_result.subfields.emplace_back("ip_ver_mc", ip_ver_mc.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_ip_p_counter_offset_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_ip_p_counter_offset_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_ip_p_counter_offset_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_RX_IP_P_COUNTER_OFFSET_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.macro_counters_update_counter_0_offset);
    }
    
    return bv;
}


void npl_rx_ip_p_counter_offset_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_ip_p_counter_offset_static_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_RX_IP_P_COUNTER_OFFSET_STATIC_TABLE_ACTION_WRITE) {
        payloads.macro_counters_update_counter_0_offset = bv.bits(2, 0).get_value();
    }
    
}


field_structure npl_rx_ip_p_counter_offset_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_ip_p_counter_offset_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_ip_p_counter_offset_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_IP_P_COUNTER_OFFSET_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.macro_counters_update_counter_0_offset);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.macro_counters_update_counter_0_offset", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_rx_ip_p_counter_offset_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_ip_p_counter_offset_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_map_npp_to_ssp_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, npp_attributes_index);
    
    return bv;
}

void npl_rx_map_npp_to_ssp_table_key_t::unpack(bit_vector64_t bv)
{
    npp_attributes_index = bv.bits(7, 0).get_value();
    
}

field_structure npl_rx_map_npp_to_ssp_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_map_npp_to_ssp_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(npp_attributes_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("npp_attributes_index", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_map_npp_to_ssp_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_map_npp_to_ssp_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_map_npp_to_ssp_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(34, 27, action);
    if (action == NPL_RX_MAP_NPP_TO_SSP_TABLE_ACTION_WRITE) {
        bv.set_bits(26, 0, payloads.local_npp_to_ssp_result.pack());
    }
    
    return bv;
}


void npl_rx_map_npp_to_ssp_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_map_npp_to_ssp_table_action_e)bv.bits(34, 27).get_value();
    if (action == NPL_RX_MAP_NPP_TO_SSP_TABLE_ACTION_WRITE) {
        payloads.local_npp_to_ssp_result.unpack(bv.bits(26, 0));
    }
    
}


field_structure npl_rx_map_npp_to_ssp_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_map_npp_to_ssp_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_map_npp_to_ssp_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_MAP_NPP_TO_SSP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.local_npp_to_ssp_result", payloads.local_npp_to_ssp_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_map_npp_to_ssp_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_map_npp_to_ssp_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_meter_block_meter_attribute_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 15);
    
    bv.set_bits(10, 0, meter_index.pack());
    bv.set_bits(14, 11, bank_index.pack());
    
    return bv;
}

void npl_rx_meter_block_meter_attribute_table_key_t::unpack(bit_vector64_t bv)
{
    meter_index.unpack(bv.bits(10, 0));
    bank_index.unpack(bv.bits(14, 11));
    
}

field_structure npl_rx_meter_block_meter_attribute_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_block_meter_attribute_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("meter_index", meter_index.to_field_structure());
    fs_result.subfields.emplace_back("bank_index", bank_index.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_meter_block_meter_attribute_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_meter_block_meter_attribute_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_meter_block_meter_attribute_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(14, 7, action);
    if (action == NPL_RX_METER_BLOCK_METER_ATTRIBUTE_TABLE_ACTION_WRITE) {
        bv.set_bits(6, 0, payloads.rx_meter_block_meter_attribute_result.pack());
    }
    
    return bv;
}


void npl_rx_meter_block_meter_attribute_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_meter_block_meter_attribute_table_action_e)bv.bits(14, 7).get_value();
    if (action == NPL_RX_METER_BLOCK_METER_ATTRIBUTE_TABLE_ACTION_WRITE) {
        payloads.rx_meter_block_meter_attribute_result.unpack(bv.bits(6, 0));
    }
    
}


field_structure npl_rx_meter_block_meter_attribute_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_block_meter_attribute_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_meter_block_meter_attribute_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_METER_BLOCK_METER_ATTRIBUTE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_meter_block_meter_attribute_result", payloads.rx_meter_block_meter_attribute_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_meter_block_meter_attribute_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_meter_block_meter_attribute_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_meter_block_meter_profile_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(3, 0, meter_profile_index.pack());
    bv.set_bits(7, 4, bank_index.pack());
    
    return bv;
}

void npl_rx_meter_block_meter_profile_table_key_t::unpack(bit_vector64_t bv)
{
    meter_profile_index.unpack(bv.bits(3, 0));
    bank_index.unpack(bv.bits(7, 4));
    
}

field_structure npl_rx_meter_block_meter_profile_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_block_meter_profile_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("meter_profile_index", meter_profile_index.to_field_structure());
    fs_result.subfields.emplace_back("bank_index", bank_index.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_meter_block_meter_profile_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_meter_block_meter_profile_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_meter_block_meter_profile_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(46, 39, action);
    if (action == NPL_RX_METER_BLOCK_METER_PROFILE_TABLE_ACTION_WRITE) {
        bv.set_bits(38, 0, payloads.rx_meter_block_meter_profile_result.pack());
    }
    
    return bv;
}


void npl_rx_meter_block_meter_profile_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_meter_block_meter_profile_table_action_e)bv.bits(46, 39).get_value();
    if (action == NPL_RX_METER_BLOCK_METER_PROFILE_TABLE_ACTION_WRITE) {
        payloads.rx_meter_block_meter_profile_result.unpack(bv.bits(38, 0));
    }
    
}


field_structure npl_rx_meter_block_meter_profile_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_block_meter_profile_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_meter_block_meter_profile_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_METER_BLOCK_METER_PROFILE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_meter_block_meter_profile_result", payloads.rx_meter_block_meter_profile_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_meter_block_meter_profile_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_meter_block_meter_profile_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_meter_block_meter_shaper_configuration_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 15);
    
    bv.set_bits(10, 0, meter_index.pack());
    bv.set_bits(14, 11, bank_index.pack());
    
    return bv;
}

void npl_rx_meter_block_meter_shaper_configuration_table_key_t::unpack(bit_vector64_t bv)
{
    meter_index.unpack(bv.bits(10, 0));
    bank_index.unpack(bv.bits(14, 11));
    
}

field_structure npl_rx_meter_block_meter_shaper_configuration_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_block_meter_shaper_configuration_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("meter_index", meter_index.to_field_structure());
    fs_result.subfields.emplace_back("bank_index", bank_index.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_meter_block_meter_shaper_configuration_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_meter_block_meter_shaper_configuration_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_meter_block_meter_shaper_configuration_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_RX_METER_BLOCK_METER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.rx_meter_block_meter_shaper_configuration_result.pack());
    }
    
    return bv;
}


void npl_rx_meter_block_meter_shaper_configuration_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_meter_block_meter_shaper_configuration_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_RX_METER_BLOCK_METER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
        payloads.rx_meter_block_meter_shaper_configuration_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_rx_meter_block_meter_shaper_configuration_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_block_meter_shaper_configuration_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_meter_block_meter_shaper_configuration_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_METER_BLOCK_METER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_meter_block_meter_shaper_configuration_result", payloads.rx_meter_block_meter_shaper_configuration_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_meter_block_meter_shaper_configuration_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_meter_block_meter_shaper_configuration_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_meter_distributed_meter_profile_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(3, 0, meter_profile_index.pack());
    bv.set_bits(5, 4, bank_index.pack());
    
    return bv;
}

void npl_rx_meter_distributed_meter_profile_table_key_t::unpack(bit_vector64_t bv)
{
    meter_profile_index.unpack(bv.bits(3, 0));
    bank_index.unpack(bv.bits(5, 4));
    
}

field_structure npl_rx_meter_distributed_meter_profile_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_distributed_meter_profile_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("meter_profile_index", meter_profile_index.to_field_structure());
    fs_result.subfields.emplace_back("bank_index", bank_index.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_meter_distributed_meter_profile_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_meter_distributed_meter_profile_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_rx_meter_distributed_meter_profile_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(84, 77, action);
    if (action == NPL_RX_METER_DISTRIBUTED_METER_PROFILE_TABLE_ACTION_WRITE) {
        bv.set_bits(76, 0, payloads.rx_meter_distributed_meter_profile_result.pack());
    }
    
    return bv;
}


void npl_rx_meter_distributed_meter_profile_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_rx_meter_distributed_meter_profile_table_action_e)bv.bits(84, 77).get_value();
    if (action == NPL_RX_METER_DISTRIBUTED_METER_PROFILE_TABLE_ACTION_WRITE) {
        payloads.rx_meter_distributed_meter_profile_result.unpack(bv.bits(76, 0));
    }
    
}


field_structure npl_rx_meter_distributed_meter_profile_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_distributed_meter_profile_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_meter_distributed_meter_profile_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_METER_DISTRIBUTED_METER_PROFILE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_meter_distributed_meter_profile_result", payloads.rx_meter_distributed_meter_profile_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_meter_distributed_meter_profile_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_meter_distributed_meter_profile_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_meter_exact_meter_decision_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(1, 0, meter_result_color.pack());
    bv.set_bits(3, 2, rate_limiter_result_color.pack());
    bv.set_bits(5, 4, meter_action_profile_index.pack());
    bv.set_bits(6, 6, ifg.pack());
    
    return bv;
}

void npl_rx_meter_exact_meter_decision_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    meter_result_color.unpack(bv.bits(1, 0));
    rate_limiter_result_color.unpack(bv.bits(3, 2));
    meter_action_profile_index.unpack(bv.bits(5, 4));
    ifg.unpack(bv.bits(6, 6));
    
}

field_structure npl_rx_meter_exact_meter_decision_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_exact_meter_decision_mapping_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("meter_result_color", meter_result_color.to_field_structure());
    fs_result.subfields.emplace_back("rate_limiter_result_color", rate_limiter_result_color.to_field_structure());
    fs_result.subfields.emplace_back("meter_action_profile_index", meter_action_profile_index.to_field_structure());
    fs_result.subfields.emplace_back("ifg", ifg.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_meter_exact_meter_decision_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_meter_exact_meter_decision_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_meter_exact_meter_decision_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(14, 7, action);
    if (action == NPL_RX_METER_EXACT_METER_DECISION_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(6, 0, payloads.rx_meter_exact_meter_decision_mapping_result.pack());
    }
    
    return bv;
}


void npl_rx_meter_exact_meter_decision_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_meter_exact_meter_decision_mapping_table_action_e)bv.bits(14, 7).get_value();
    if (action == NPL_RX_METER_EXACT_METER_DECISION_MAPPING_TABLE_ACTION_WRITE) {
        payloads.rx_meter_exact_meter_decision_mapping_result.unpack(bv.bits(6, 0));
    }
    
}


field_structure npl_rx_meter_exact_meter_decision_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_exact_meter_decision_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_meter_exact_meter_decision_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_METER_EXACT_METER_DECISION_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_meter_exact_meter_decision_mapping_result", payloads.rx_meter_exact_meter_decision_mapping_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_meter_exact_meter_decision_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_meter_exact_meter_decision_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_meter_meter_profile_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(3, 0, meter_profile_index.pack());
    bv.set_bits(5, 4, bank_index.pack());
    
    return bv;
}

void npl_rx_meter_meter_profile_table_key_t::unpack(bit_vector64_t bv)
{
    meter_profile_index.unpack(bv.bits(3, 0));
    bank_index.unpack(bv.bits(5, 4));
    
}

field_structure npl_rx_meter_meter_profile_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_meter_profile_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("meter_profile_index", meter_profile_index.to_field_structure());
    fs_result.subfields.emplace_back("bank_index", bank_index.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_meter_meter_profile_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_meter_meter_profile_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_meter_meter_profile_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(46, 39, action);
    if (action == NPL_RX_METER_METER_PROFILE_TABLE_ACTION_WRITE) {
        bv.set_bits(38, 0, payloads.rx_meter_meter_profile_result.pack());
    }
    
    return bv;
}


void npl_rx_meter_meter_profile_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_meter_meter_profile_table_action_e)bv.bits(46, 39).get_value();
    if (action == NPL_RX_METER_METER_PROFILE_TABLE_ACTION_WRITE) {
        payloads.rx_meter_meter_profile_result.unpack(bv.bits(38, 0));
    }
    
}


field_structure npl_rx_meter_meter_profile_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_meter_profile_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_meter_meter_profile_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_METER_METER_PROFILE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_meter_meter_profile_result", payloads.rx_meter_meter_profile_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_meter_meter_profile_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_meter_meter_profile_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_meter_meter_shaper_configuration_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(10, 0, meter_index.pack());
    bv.set_bits(12, 11, bank_index.pack());
    
    return bv;
}

void npl_rx_meter_meter_shaper_configuration_table_key_t::unpack(bit_vector64_t bv)
{
    meter_index.unpack(bv.bits(10, 0));
    bank_index.unpack(bv.bits(12, 11));
    
}

field_structure npl_rx_meter_meter_shaper_configuration_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_meter_shaper_configuration_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("meter_index", meter_index.to_field_structure());
    fs_result.subfields.emplace_back("bank_index", bank_index.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_meter_meter_shaper_configuration_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_meter_meter_shaper_configuration_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_meter_meter_shaper_configuration_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_RX_METER_METER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
        bv.set_bits(19, 0, payloads.rx_meter_meter_shaper_configuration_result.pack());
    }
    
    return bv;
}


void npl_rx_meter_meter_shaper_configuration_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_meter_meter_shaper_configuration_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_RX_METER_METER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
        payloads.rx_meter_meter_shaper_configuration_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_rx_meter_meter_shaper_configuration_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_meter_shaper_configuration_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_meter_meter_shaper_configuration_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_METER_METER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_meter_meter_shaper_configuration_result", payloads.rx_meter_meter_shaper_configuration_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_meter_meter_shaper_configuration_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_meter_meter_shaper_configuration_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_meter_meters_attribute_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(10, 0, meter_index.pack());
    bv.set_bits(12, 11, bank_index.pack());
    
    return bv;
}

void npl_rx_meter_meters_attribute_table_key_t::unpack(bit_vector64_t bv)
{
    meter_index.unpack(bv.bits(10, 0));
    bank_index.unpack(bv.bits(12, 11));
    
}

field_structure npl_rx_meter_meters_attribute_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_meters_attribute_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("meter_index", meter_index.to_field_structure());
    fs_result.subfields.emplace_back("bank_index", bank_index.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_meter_meters_attribute_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_meter_meters_attribute_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_meter_meters_attribute_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(14, 7, action);
    if (action == NPL_RX_METER_METERS_ATTRIBUTE_TABLE_ACTION_WRITE) {
        bv.set_bits(6, 0, payloads.rx_meter_meters_attribute_result.pack());
    }
    
    return bv;
}


void npl_rx_meter_meters_attribute_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_meter_meters_attribute_table_action_e)bv.bits(14, 7).get_value();
    if (action == NPL_RX_METER_METERS_ATTRIBUTE_TABLE_ACTION_WRITE) {
        payloads.rx_meter_meters_attribute_result.unpack(bv.bits(6, 0));
    }
    
}


field_structure npl_rx_meter_meters_attribute_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_meters_attribute_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_meter_meters_attribute_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_METER_METERS_ATTRIBUTE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_meter_meters_attribute_result", payloads.rx_meter_meters_attribute_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_meter_meters_attribute_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_meter_meters_attribute_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_meter_rate_limiter_shaper_configuration_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    
    bv.set_bits(6, 0, table_entry_index.pack());
    bv.set_bits(10, 7, table_index.pack());
    
    return bv;
}

void npl_rx_meter_rate_limiter_shaper_configuration_table_key_t::unpack(bit_vector64_t bv)
{
    table_entry_index.unpack(bv.bits(6, 0));
    table_index.unpack(bv.bits(10, 7));
    
}

field_structure npl_rx_meter_rate_limiter_shaper_configuration_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_rate_limiter_shaper_configuration_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("table_entry_index", table_entry_index.to_field_structure());
    fs_result.subfields.emplace_back("table_index", table_index.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_meter_rate_limiter_shaper_configuration_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_meter_rate_limiter_shaper_configuration_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_meter_rate_limiter_shaper_configuration_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_RX_METER_RATE_LIMITER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
        bv.set_bits(9, 0, payloads.rx_meter_rate_limiter_shaper_configuration_result.pack());
    }
    
    return bv;
}


void npl_rx_meter_rate_limiter_shaper_configuration_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_meter_rate_limiter_shaper_configuration_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_RX_METER_RATE_LIMITER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
        payloads.rx_meter_rate_limiter_shaper_configuration_result.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_rx_meter_rate_limiter_shaper_configuration_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_rate_limiter_shaper_configuration_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_meter_rate_limiter_shaper_configuration_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_METER_RATE_LIMITER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_meter_rate_limiter_shaper_configuration_result", payloads.rx_meter_rate_limiter_shaper_configuration_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_meter_rate_limiter_shaper_configuration_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_meter_rate_limiter_shaper_configuration_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_meter_stat_meter_decision_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(1, 0, meter_result_color.pack());
    bv.set_bits(3, 2, exact_meter_to_stat_meter_color.pack());
    bv.set_bits(5, 4, meter_action_profile_index.pack());
    bv.set_bits(7, 6, meter_bank_index.pack());
    
    return bv;
}

void npl_rx_meter_stat_meter_decision_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    meter_result_color.unpack(bv.bits(1, 0));
    exact_meter_to_stat_meter_color.unpack(bv.bits(3, 2));
    meter_action_profile_index.unpack(bv.bits(5, 4));
    meter_bank_index.unpack(bv.bits(7, 6));
    
}

field_structure npl_rx_meter_stat_meter_decision_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_stat_meter_decision_mapping_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("meter_result_color", meter_result_color.to_field_structure());
    fs_result.subfields.emplace_back("exact_meter_to_stat_meter_color", exact_meter_to_stat_meter_color.to_field_structure());
    fs_result.subfields.emplace_back("meter_action_profile_index", meter_action_profile_index.to_field_structure());
    fs_result.subfields.emplace_back("meter_bank_index", meter_bank_index.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_meter_stat_meter_decision_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_meter_stat_meter_decision_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_meter_stat_meter_decision_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(14, 7, action);
    if (action == NPL_RX_METER_STAT_METER_DECISION_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(6, 0, payloads.rx_meter_stat_meter_decision_mapping_result.pack());
    }
    
    return bv;
}


void npl_rx_meter_stat_meter_decision_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_meter_stat_meter_decision_mapping_table_action_e)bv.bits(14, 7).get_value();
    if (action == NPL_RX_METER_STAT_METER_DECISION_MAPPING_TABLE_ACTION_WRITE) {
        payloads.rx_meter_stat_meter_decision_mapping_result.unpack(bv.bits(6, 0));
    }
    
}


field_structure npl_rx_meter_stat_meter_decision_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_meter_stat_meter_decision_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_meter_stat_meter_decision_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_METER_STAT_METER_DECISION_MAPPING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_meter_stat_meter_decision_mapping_result", payloads.rx_meter_stat_meter_decision_mapping_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_meter_stat_meter_decision_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_meter_stat_meter_decision_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_npu_to_tm_dest_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(5, 0, rxpp_pd_fwd_destination_19_14_);
    
    return bv;
}

void npl_rx_npu_to_tm_dest_table_key_t::unpack(bit_vector64_t bv)
{
    rxpp_pd_fwd_destination_19_14_ = bv.bits(5, 0).get_value();
    
}

field_structure npl_rx_npu_to_tm_dest_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_npu_to_tm_dest_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_pd_fwd_destination_19_14_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_pd_fwd_destination_19_14_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_npu_to_tm_dest_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_npu_to_tm_dest_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_npu_to_tm_dest_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(13, 6, action);
    if (action == NPL_RX_NPU_TO_TM_DEST_TABLE_ACTION_WRITE) {
        bv.set_bits(5, 0, payloads.pd_rx_tm_destination_prefix);
    }
    
    return bv;
}


void npl_rx_npu_to_tm_dest_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_npu_to_tm_dest_table_action_e)bv.bits(13, 6).get_value();
    if (action == NPL_RX_NPU_TO_TM_DEST_TABLE_ACTION_WRITE) {
        payloads.pd_rx_tm_destination_prefix = bv.bits(5, 0).get_value();
    }
    
}


field_structure npl_rx_npu_to_tm_dest_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_npu_to_tm_dest_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_npu_to_tm_dest_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_NPU_TO_TM_DEST_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.pd_rx_tm_destination_prefix);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.pd_rx_tm_destination_prefix", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_rx_npu_to_tm_dest_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_npu_to_tm_dest_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_obm_code_table_rx_obm_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 41);
    bv.set_bits(40, 36, phb.pack());
    bv.set_bits(35, 16, destination.pack());
    bv.set_bits(15, 0, punt_encap_data_lsb.pack());
    return bv;
}

void npl_rx_obm_code_table_rx_obm_action_payload_t::unpack(bit_vector64_t bv)
{
    phb.unpack(bv.bits(40, 36));
    destination.unpack(bv.bits(35, 16));
    punt_encap_data_lsb.unpack(bv.bits(15, 0));
}

field_structure npl_rx_obm_code_table_rx_obm_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_obm_code_table_rx_obm_action_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("phb", phb.to_field_structure());
    fs_result.subfields.emplace_back("destination", destination.to_field_structure());
    fs_result.subfields.emplace_back("punt_encap_data_lsb", punt_encap_data_lsb.to_field_structure());
    return fs_result;
}
std::string to_string(npl_rx_obm_code_table_rx_obm_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_obm_code_table_rx_obm_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_obm_code_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, tx_to_rx_rcy_data.pack());
    
    return bv;
}

void npl_rx_obm_code_table_key_t::unpack(bit_vector64_t bv)
{
    tx_to_rx_rcy_data.unpack(bv.bits(7, 0));
    
}

field_structure npl_rx_obm_code_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_obm_code_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("tx_to_rx_rcy_data", tx_to_rx_rcy_data.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_rx_obm_code_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_obm_code_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_obm_code_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(48, 41, action);
    if (action == NPL_RX_OBM_CODE_TABLE_ACTION_RX_OBM_ACTION) {
        bv.set_bits(40, 0, payloads.rx_obm_action.pack());
    }
    
    return bv;
}


void npl_rx_obm_code_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_obm_code_table_action_e)bv.bits(48, 41).get_value();
    if (action == NPL_RX_OBM_CODE_TABLE_ACTION_RX_OBM_ACTION) {
        payloads.rx_obm_action.unpack(bv.bits(40, 0));
    }
    
}


field_structure npl_rx_obm_code_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_obm_code_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_obm_code_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_OBM_CODE_TABLE_ACTION_RX_OBM_ACTION) {
        fs_result.subfields.emplace_back("rx_obm_action", payloads.rx_obm_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_obm_code_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_obm_code_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_obm_punt_src_and_code_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(11, 0, punt_src_and_code);
    bv.set_bits(15, 12, is_dma);
    
    return bv;
}

void npl_rx_obm_punt_src_and_code_table_key_t::unpack(bit_vector64_t bv)
{
    punt_src_and_code = bv.bits(11, 0).get_value();
    is_dma = (npl_punt_nw_encap_type_e)bv.bits(15, 12).get_value();
    
}

field_structure npl_rx_obm_punt_src_and_code_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_obm_punt_src_and_code_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(punt_src_and_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("punt_src_and_code", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(is_dma);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_dma", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_obm_punt_src_and_code_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_obm_punt_src_and_code_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_rx_obm_punt_src_and_code_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(72, 65, action);
    if (action == NPL_RX_OBM_PUNT_SRC_AND_CODE_TABLE_ACTION_WRITE) {
        bv.set_bits(64, 0, payloads.rx_obm_punt_src_and_code_data.pack());
    }
    
    return bv;
}


void npl_rx_obm_punt_src_and_code_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_rx_obm_punt_src_and_code_table_action_e)bv.bits(72, 65).get_value();
    if (action == NPL_RX_OBM_PUNT_SRC_AND_CODE_TABLE_ACTION_WRITE) {
        payloads.rx_obm_punt_src_and_code_data.unpack(bv.bits(64, 0));
    }
    
}


field_structure npl_rx_obm_punt_src_and_code_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_obm_punt_src_and_code_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_obm_punt_src_and_code_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_OBM_PUNT_SRC_AND_CODE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rx_obm_punt_src_and_code_data", payloads.rx_obm_punt_src_and_code_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_obm_punt_src_and_code_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_obm_punt_src_and_code_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, meter_counter.pack());
    return bv;
}

void npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t::unpack(bit_vector64_t bv)
{
    meter_counter.unpack(bv.bits(19, 0));
}

field_structure npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("meter_counter", meter_counter.to_field_structure());
    return fs_result;
}
std::string to_string(npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_redirect_code_ext_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, redirect_code);
    
    return bv;
}

void npl_rx_redirect_code_ext_table_key_t::unpack(bit_vector64_t bv)
{
    redirect_code = bv.bits(7, 0).get_value();
    
}

field_structure npl_rx_redirect_code_ext_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_redirect_code_ext_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(redirect_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("redirect_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_redirect_code_ext_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_redirect_code_ext_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_redirect_code_ext_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_RX_REDIRECT_CODE_EXT_TABLE_ACTION_RX_REDIRECT_ACTION_EXT) {
        bv.set_bits(19, 0, payloads.rx_redirect_action_ext.pack());
    }
    
    return bv;
}


void npl_rx_redirect_code_ext_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_redirect_code_ext_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_RX_REDIRECT_CODE_EXT_TABLE_ACTION_RX_REDIRECT_ACTION_EXT) {
        payloads.rx_redirect_action_ext.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_rx_redirect_code_ext_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_redirect_code_ext_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_redirect_code_ext_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_REDIRECT_CODE_EXT_TABLE_ACTION_RX_REDIRECT_ACTION_EXT) {
        fs_result.subfields.emplace_back("rx_redirect_action_ext", payloads.rx_redirect_action_ext.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_redirect_code_ext_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_redirect_code_ext_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_rx_redirect_code_table_rx_redirect_action_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 94);
    bv.set_bits(93, 93, override_phb);
    bv.set_bits(92, 92, per_pif_trap_mode);
    bv.set_bits(91, 91, stamp_into_packet_header);
    bv.set_bits(90, 87, punt_sub_code);
    bv.set_bits(86, 86, disable_snoop);
    bv.set_bits(85, 85, is_l3_trap);
    bv.set_bits(84, 80, phb.pack());
    bv.set_bits(79, 60, destination);
    bv.set_bits(59, 48, ts_cmd.pack());
    bv.set_bits(47, 36, cntr_stamp_cmd.pack());
    bv.set_bits(35, 20, punt_encap_data_lsb.pack());
    bv.set_bits(19, 0, redirect_counter.pack());
    return bv;
}

void npl_rx_redirect_code_table_rx_redirect_action_payload_t::unpack(bit_vector128_t bv)
{
    override_phb = bv.bits(93, 93).get_value();
    per_pif_trap_mode = (npl_per_pif_trap_mode_e)bv.bits(92, 92).get_value();
    stamp_into_packet_header = (npl_stamp_on_headers_e)bv.bits(91, 91).get_value();
    punt_sub_code = bv.bits(90, 87).get_value();
    disable_snoop = bv.bits(86, 86).get_value();
    is_l3_trap = bv.bits(85, 85).get_value();
    phb.unpack(bv.bits(84, 80));
    destination = bv.bits(79, 60).get_value();
    ts_cmd.unpack(bv.bits(59, 48));
    cntr_stamp_cmd.unpack(bv.bits(47, 36));
    punt_encap_data_lsb.unpack(bv.bits(35, 20));
    redirect_counter.unpack(bv.bits(19, 0));
}

field_structure npl_rx_redirect_code_table_rx_redirect_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_redirect_code_table_rx_redirect_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(override_phb);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("override_phb", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(per_pif_trap_mode);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("per_pif_trap_mode", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(stamp_into_packet_header);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("stamp_into_packet_header", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(punt_sub_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("punt_sub_code", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(disable_snoop);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("disable_snoop", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_l3_trap);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_l3_trap", fs_subfield);
    
    fs_result.subfields.emplace_back("phb", phb.to_field_structure());
    fs_subfield.flat_value = to_hex_string(destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("destination", fs_subfield);
    
    fs_result.subfields.emplace_back("ts_cmd", ts_cmd.to_field_structure());
    fs_result.subfields.emplace_back("cntr_stamp_cmd", cntr_stamp_cmd.to_field_structure());
    fs_result.subfields.emplace_back("punt_encap_data_lsb", punt_encap_data_lsb.to_field_structure());
    fs_result.subfields.emplace_back("redirect_counter", redirect_counter.to_field_structure());
    return fs_result;
}
std::string to_string(npl_rx_redirect_code_table_rx_redirect_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_redirect_code_table_rx_redirect_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_redirect_code_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, redirect_code);
    
    return bv;
}

void npl_rx_redirect_code_table_key_t::unpack(bit_vector64_t bv)
{
    redirect_code = bv.bits(7, 0).get_value();
    
}

field_structure npl_rx_redirect_code_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_redirect_code_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(redirect_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("redirect_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_redirect_code_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_redirect_code_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_rx_redirect_code_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(101, 94, action);
    if (action == NPL_RX_REDIRECT_CODE_TABLE_ACTION_RX_REDIRECT_ACTION) {
        bv.set_bits(93, 0, payloads.rx_redirect_action.pack());
    }
    
    return bv;
}


void npl_rx_redirect_code_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_rx_redirect_code_table_action_e)bv.bits(101, 94).get_value();
    if (action == NPL_RX_REDIRECT_CODE_TABLE_ACTION_RX_REDIRECT_ACTION) {
        payloads.rx_redirect_action.unpack(bv.bits(93, 0));
    }
    
}


field_structure npl_rx_redirect_code_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_redirect_code_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_redirect_code_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_REDIRECT_CODE_TABLE_ACTION_RX_REDIRECT_ACTION) {
        fs_result.subfields.emplace_back("rx_redirect_action", payloads.rx_redirect_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_redirect_code_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_redirect_code_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    bv.set_bits(10, 10, is_last_rx_macro);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t::unpack(bit_vector64_t bv)
{
    is_last_rx_macro = bv.bits(10, 10).get_value();
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(is_last_rx_macro);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_last_rx_macro", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_redirect_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 22);
    
    bv.set_bits(4, 0, next_protocol_type);
    bv.set_bits(9, 5, protocol_type);
    bv.set_bits(17, 10, redirect_code);
    bv.set_bits(21, 18, cud_type);
    
    return bv;
}

void npl_rx_redirect_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    next_protocol_type = (npl_protocol_type_e)bv.bits(4, 0).get_value();
    protocol_type = (npl_protocol_type_e)bv.bits(9, 5).get_value();
    redirect_code = bv.bits(17, 10).get_value();
    cud_type = (npl_punt_cud_type_e)bv.bits(21, 18).get_value();
    
}

field_structure npl_rx_redirect_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_redirect_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(next_protocol_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("next_protocol_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(protocol_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("protocol_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(redirect_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("redirect_code", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(cud_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("cud_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_redirect_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_redirect_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_redirect_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(18, 11, action);
    if (action == NPL_RX_REDIRECT_NEXT_MACRO_STATIC_TABLE_ACTION_UPDATE_NEXT_MACRO) {
        bv.set_bits(10, 0, payloads.update_next_macro.pack());
    }
    
    return bv;
}


void npl_rx_redirect_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_redirect_next_macro_static_table_action_e)bv.bits(18, 11).get_value();
    if (action == NPL_RX_REDIRECT_NEXT_MACRO_STATIC_TABLE_ACTION_UPDATE_NEXT_MACRO) {
        payloads.update_next_macro.unpack(bv.bits(10, 0));
    }
    
}


field_structure npl_rx_redirect_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_redirect_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_redirect_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_REDIRECT_NEXT_MACRO_STATIC_TABLE_ACTION_UPDATE_NEXT_MACRO) {
        fs_result.subfields.emplace_back("update_next_macro", payloads.update_next_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_redirect_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_redirect_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_term_error_handling_counter_table_update_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, counter.pack());
    return bv;
}

void npl_rx_term_error_handling_counter_table_update_result_payload_t::unpack(bit_vector64_t bv)
{
    counter.unpack(bv.bits(19, 0));
}

field_structure npl_rx_term_error_handling_counter_table_update_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_term_error_handling_counter_table_update_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("counter", counter.to_field_structure());
    return fs_result;
}
std::string to_string(npl_rx_term_error_handling_counter_table_update_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_term_error_handling_counter_table_update_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_term_error_handling_counter_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(4, 0, pd_source_if_pif);
    bv.set_bits(5, 5, ser);
    
    return bv;
}

void npl_rx_term_error_handling_counter_table_key_t::unpack(bit_vector64_t bv)
{
    pd_source_if_pif = bv.bits(4, 0).get_value();
    ser = bv.bits(5, 5).get_value();
    
}

field_structure npl_rx_term_error_handling_counter_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_term_error_handling_counter_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pd_source_if_pif);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_source_if_pif", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ser);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ser", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_term_error_handling_counter_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_term_error_handling_counter_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_term_error_handling_counter_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_RX_TERM_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        bv.set_bits(19, 0, payloads.update_result.pack());
    }
    
    return bv;
}


void npl_rx_term_error_handling_counter_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_term_error_handling_counter_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_RX_TERM_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        payloads.update_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_rx_term_error_handling_counter_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_term_error_handling_counter_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_term_error_handling_counter_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_TERM_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        fs_result.subfields.emplace_back("update_result", payloads.update_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_term_error_handling_counter_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_term_error_handling_counter_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_term_error_handling_destination_table_update_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, destination);
    return bv;
}

void npl_rx_term_error_handling_destination_table_update_result_payload_t::unpack(bit_vector64_t bv)
{
    destination = bv.bits(19, 0).get_value();
}

field_structure npl_rx_term_error_handling_destination_table_update_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_term_error_handling_destination_table_update_result_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(destination);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("destination", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_rx_term_error_handling_destination_table_update_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_term_error_handling_destination_table_update_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rx_term_error_handling_destination_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, ser);
    
    return bv;
}

void npl_rx_term_error_handling_destination_table_key_t::unpack(bit_vector64_t bv)
{
    ser = bv.bits(0, 0).get_value();
    
}

field_structure npl_rx_term_error_handling_destination_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_term_error_handling_destination_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ser);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ser", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rx_term_error_handling_destination_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rx_term_error_handling_destination_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rx_term_error_handling_destination_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        bv.set_bits(19, 0, payloads.update_result.pack());
    }
    
    return bv;
}


void npl_rx_term_error_handling_destination_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rx_term_error_handling_destination_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        payloads.update_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_rx_term_error_handling_destination_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rx_term_error_handling_destination_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rx_term_error_handling_destination_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
        fs_result.subfields.emplace_back("update_result", payloads.update_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rx_term_error_handling_destination_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rx_term_error_handling_destination_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rxpdr_dsp_lookup_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, fwd_destination_lsb);
    
    return bv;
}

void npl_rxpdr_dsp_lookup_table_key_t::unpack(bit_vector64_t bv)
{
    fwd_destination_lsb = bv.bits(12, 0).get_value();
    
}

field_structure npl_rxpdr_dsp_lookup_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rxpdr_dsp_lookup_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(fwd_destination_lsb);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fwd_destination_lsb", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rxpdr_dsp_lookup_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rxpdr_dsp_lookup_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rxpdr_dsp_lookup_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(35, 28, action);
    if (action == NPL_RXPDR_DSP_LOOKUP_TABLE_ACTION_WRITE) {
        bv.set_bits(27, 0, payloads.rxpdr_dsp_lookup_table_result.pack());
    }
    
    return bv;
}


void npl_rxpdr_dsp_lookup_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rxpdr_dsp_lookup_table_action_e)bv.bits(35, 28).get_value();
    if (action == NPL_RXPDR_DSP_LOOKUP_TABLE_ACTION_WRITE) {
        payloads.rxpdr_dsp_lookup_table_result.unpack(bv.bits(27, 0));
    }
    
}


field_structure npl_rxpdr_dsp_lookup_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rxpdr_dsp_lookup_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rxpdr_dsp_lookup_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RXPDR_DSP_LOOKUP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rxpdr_dsp_lookup_table_result", payloads.rxpdr_dsp_lookup_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rxpdr_dsp_lookup_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rxpdr_dsp_lookup_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_rxpdr_dsp_tc_map_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(2, 0, rxpp_pd_tc);
    bv.set_bits(5, 3, rxpdr_dsp_lookup_table_result_tc_map_profile);
    
    return bv;
}

void npl_rxpdr_dsp_tc_map_key_t::unpack(bit_vector64_t bv)
{
    rxpp_pd_tc = bv.bits(2, 0).get_value();
    rxpdr_dsp_lookup_table_result_tc_map_profile = bv.bits(5, 3).get_value();
    
}

field_structure npl_rxpdr_dsp_tc_map_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rxpdr_dsp_tc_map_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_pd_tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_pd_tc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(rxpdr_dsp_lookup_table_result_tc_map_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpdr_dsp_lookup_table_result_tc_map_profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_rxpdr_dsp_tc_map_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_rxpdr_dsp_tc_map_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_rxpdr_dsp_tc_map_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_RXPDR_DSP_TC_MAP_ACTION_WRITE) {
        bv.set_bits(3, 0, payloads.rxpdr_dsp_tc_map_result.pack());
    }
    
    return bv;
}


void npl_rxpdr_dsp_tc_map_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_rxpdr_dsp_tc_map_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_RXPDR_DSP_TC_MAP_ACTION_WRITE) {
        payloads.rxpdr_dsp_tc_map_result.unpack(bv.bits(3, 0));
    }
    
}


field_structure npl_rxpdr_dsp_tc_map_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_rxpdr_dsp_tc_map_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_rxpdr_dsp_tc_map_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_RXPDR_DSP_TC_MAP_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rxpdr_dsp_tc_map_result", payloads.rxpdr_dsp_tc_map_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_rxpdr_dsp_tc_map_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_rxpdr_dsp_tc_map_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_sch_oqse_cfg_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(7, 0, oqse_pair_index.pack());
    bv.set_bits(8, 8, ifg.pack());
    
    return bv;
}

void npl_sch_oqse_cfg_key_t::unpack(bit_vector64_t bv)
{
    oqse_pair_index.unpack(bv.bits(7, 0));
    ifg.unpack(bv.bits(8, 8));
    
}

field_structure npl_sch_oqse_cfg_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_sch_oqse_cfg_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("oqse_pair_index", oqse_pair_index.to_field_structure());
    fs_result.subfields.emplace_back("ifg", ifg.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_sch_oqse_cfg_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_sch_oqse_cfg_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_sch_oqse_cfg_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(79, 72, action);
    if (action == NPL_SCH_OQSE_CFG_ACTION_WRITE) {
        bv.set_bits(71, 0, payloads.sch_oqse_cfg_result.pack());
    }
    
    return bv;
}


void npl_sch_oqse_cfg_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_sch_oqse_cfg_action_e)bv.bits(79, 72).get_value();
    if (action == NPL_SCH_OQSE_CFG_ACTION_WRITE) {
        payloads.sch_oqse_cfg_result.unpack(bv.bits(71, 0));
    }
    
}


field_structure npl_sch_oqse_cfg_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_sch_oqse_cfg_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_sch_oqse_cfg_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SCH_OQSE_CFG_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.sch_oqse_cfg_result", payloads.sch_oqse_cfg_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_sch_oqse_cfg_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_sch_oqse_cfg_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_second_ene_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, second_ene_macro_code);
    
    return bv;
}

void npl_second_ene_static_table_key_t::unpack(bit_vector64_t bv)
{
    second_ene_macro_code = bv.bits(1, 0).get_value();
    
}

field_structure npl_second_ene_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_second_ene_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(second_ene_macro_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("second_ene_macro_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_second_ene_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_second_ene_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_second_ene_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_SECOND_ENE_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.second_ene_macro.pack());
    }
    
    return bv;
}


void npl_second_ene_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_second_ene_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_SECOND_ENE_STATIC_TABLE_ACTION_WRITE) {
        payloads.second_ene_macro.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_second_ene_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_second_ene_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_second_ene_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SECOND_ENE_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.second_ene_macro", payloads.second_ene_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_second_ene_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_second_ene_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t::unpack(bit_vector64_t bv)
{
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_select_inject_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(4, 0, protocol);
    bv.set_bits(12, 5, local_inject_type_7_0_.pack());
    
    return bv;
}

void npl_select_inject_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    protocol = (npl_protocol_type_e)bv.bits(4, 0).get_value();
    local_inject_type_7_0_.unpack(bv.bits(12, 5));
    
}

field_structure npl_select_inject_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_select_inject_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(protocol);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("protocol", fs_subfield);
    
    fs_result.subfields.emplace_back("local_inject_type_7_0_", local_inject_type_7_0_.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_select_inject_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_select_inject_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_select_inject_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_SELECT_INJECT_NEXT_MACRO_STATIC_TABLE_ACTION_RX_INJECT_UP_NEXT_MACRO) {
        bv.set_bits(9, 0, payloads.rx_inject_up_next_macro.pack());
    }
    
    return bv;
}


void npl_select_inject_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_select_inject_next_macro_static_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_SELECT_INJECT_NEXT_MACRO_STATIC_TABLE_ACTION_RX_INJECT_UP_NEXT_MACRO) {
        payloads.rx_inject_up_next_macro.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_select_inject_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_select_inject_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_select_inject_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SELECT_INJECT_NEXT_MACRO_STATIC_TABLE_ACTION_RX_INJECT_UP_NEXT_MACRO) {
        fs_result.subfields.emplace_back("rx_inject_up_next_macro", payloads.rx_inject_up_next_macro.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_select_inject_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_select_inject_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_service_lp_attributes_table_write_payload_t::pack(void) const
{
    bit_vector192_t bv(0, 144);
    bv.set_bits(143, 0, mac_lp_attributes_payload.pack());
    return bv;
}

void npl_service_lp_attributes_table_write_payload_t::unpack(bit_vector192_t bv)
{
    mac_lp_attributes_payload.unpack(bv.bits(143, 0));
}

field_structure npl_service_lp_attributes_table_write_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_lp_attributes_table_write_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("mac_lp_attributes_payload", mac_lp_attributes_payload.to_field_structure());
    return fs_result;
}
std::string to_string(npl_service_lp_attributes_table_write_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_lp_attributes_table_write_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_lp_attributes_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, service_lp_attributes_table_key.pack());
    
    return bv;
}

void npl_service_lp_attributes_table_key_t::unpack(bit_vector64_t bv)
{
    service_lp_attributes_table_key.unpack(bv.bits(15, 0));
    
}

field_structure npl_service_lp_attributes_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_lp_attributes_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("service_lp_attributes_table_key", service_lp_attributes_table_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_lp_attributes_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_lp_attributes_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_service_lp_attributes_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(151, 144, action);
    if (action == NPL_SERVICE_LP_ATTRIBUTES_TABLE_ACTION_WRITE) {
        bv.set_bits(143, 0, payloads.write.pack());
    }
    
    return bv;
}


void npl_service_lp_attributes_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_service_lp_attributes_table_action_e)bv.bits(151, 144).get_value();
    if (action == NPL_SERVICE_LP_ATTRIBUTES_TABLE_ACTION_WRITE) {
        payloads.write.unpack(bv.bits(143, 0));
    }
    
}


field_structure npl_service_lp_attributes_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_lp_attributes_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_lp_attributes_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_LP_ATTRIBUTES_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("write", payloads.write.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_lp_attributes_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_lp_attributes_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_em0_ac_port_table_sm_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 30);
    bv.set_bits(29, 14, lp_id.pack());
    bv.set_bits(13, 0, relay_id.pack());
    return bv;
}

void npl_service_mapping_em0_ac_port_table_sm_payload_t::unpack(bit_vector64_t bv)
{
    lp_id.unpack(bv.bits(29, 14));
    relay_id.unpack(bv.bits(13, 0));
}

field_structure npl_service_mapping_em0_ac_port_table_sm_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_ac_port_table_sm_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lp_id", lp_id.to_field_structure());
    fs_result.subfields.emplace_back("relay_id", relay_id.to_field_structure());
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_ac_port_table_sm_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_em0_ac_port_table_sm_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_em0_ac_port_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, local_slp_id.pack());
    
    return bv;
}

void npl_service_mapping_em0_ac_port_table_key_t::unpack(bit_vector64_t bv)
{
    local_slp_id.unpack(bv.bits(15, 0));
    
}

field_structure npl_service_mapping_em0_ac_port_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_ac_port_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("local_slp_id", local_slp_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_ac_port_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_mapping_em0_ac_port_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_service_mapping_em0_ac_port_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(37, 30, action);
    if (action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TABLE_ACTION_SM) {
        bv.set_bits(29, 0, payloads.sm.pack());
    }
    
    return bv;
}


void npl_service_mapping_em0_ac_port_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_service_mapping_em0_ac_port_table_action_e)bv.bits(37, 30).get_value();
    if (action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TABLE_ACTION_SM) {
        payloads.sm.unpack(bv.bits(29, 0));
    }
    
}


field_structure npl_service_mapping_em0_ac_port_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_ac_port_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_mapping_em0_ac_port_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TABLE_ACTION_SM) {
        fs_result.subfields.emplace_back("sm", payloads.sm.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_ac_port_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_em0_ac_port_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_em0_ac_port_tag_table_sm_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 30);
    bv.set_bits(29, 14, lp_id.pack());
    bv.set_bits(13, 0, relay_id.pack());
    return bv;
}

void npl_service_mapping_em0_ac_port_tag_table_sm_payload_t::unpack(bit_vector64_t bv)
{
    lp_id.unpack(bv.bits(29, 14));
    relay_id.unpack(bv.bits(13, 0));
}

field_structure npl_service_mapping_em0_ac_port_tag_table_sm_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_ac_port_tag_table_sm_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lp_id", lp_id.to_field_structure());
    fs_result.subfields.emplace_back("relay_id", relay_id.to_field_structure());
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_ac_port_tag_table_sm_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_em0_ac_port_tag_table_sm_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_em0_ac_port_tag_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 28);
    
    bv.set_bits(15, 0, local_slp_id.pack());
    bv.set_bits(27, 16, vid1.pack());
    
    return bv;
}

void npl_service_mapping_em0_ac_port_tag_table_key_t::unpack(bit_vector64_t bv)
{
    local_slp_id.unpack(bv.bits(15, 0));
    vid1.unpack(bv.bits(27, 16));
    
}

field_structure npl_service_mapping_em0_ac_port_tag_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_ac_port_tag_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("local_slp_id", local_slp_id.to_field_structure());
    fs_result.subfields.emplace_back("vid1", vid1.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_ac_port_tag_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_mapping_em0_ac_port_tag_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_service_mapping_em0_ac_port_tag_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(37, 30, action);
    if (action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TAG_TABLE_ACTION_SM) {
        bv.set_bits(29, 0, payloads.sm.pack());
    }
    
    return bv;
}


void npl_service_mapping_em0_ac_port_tag_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_service_mapping_em0_ac_port_tag_table_action_e)bv.bits(37, 30).get_value();
    if (action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TAG_TABLE_ACTION_SM) {
        payloads.sm.unpack(bv.bits(29, 0));
    }
    
}


field_structure npl_service_mapping_em0_ac_port_tag_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_ac_port_tag_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_mapping_em0_ac_port_tag_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TAG_TABLE_ACTION_SM) {
        fs_result.subfields.emplace_back("sm", payloads.sm.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_ac_port_tag_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_em0_ac_port_tag_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 30);
    bv.set_bits(29, 14, lp_id.pack());
    bv.set_bits(13, 0, relay_id.pack());
    return bv;
}

void npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t::unpack(bit_vector64_t bv)
{
    lp_id.unpack(bv.bits(29, 14));
    relay_id.unpack(bv.bits(13, 0));
}

field_structure npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lp_id", lp_id.to_field_structure());
    fs_result.subfields.emplace_back("relay_id", relay_id.to_field_structure());
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_em0_ac_port_tag_tag_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 40);
    
    bv.set_bits(15, 0, local_slp_id.pack());
    bv.set_bits(27, 16, vid1.pack());
    bv.set_bits(39, 28, vid2.pack());
    
    return bv;
}

void npl_service_mapping_em0_ac_port_tag_tag_table_key_t::unpack(bit_vector64_t bv)
{
    local_slp_id.unpack(bv.bits(15, 0));
    vid1.unpack(bv.bits(27, 16));
    vid2.unpack(bv.bits(39, 28));
    
}

field_structure npl_service_mapping_em0_ac_port_tag_tag_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_ac_port_tag_tag_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("local_slp_id", local_slp_id.to_field_structure());
    fs_result.subfields.emplace_back("vid1", vid1.to_field_structure());
    fs_result.subfields.emplace_back("vid2", vid2.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_ac_port_tag_tag_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_mapping_em0_ac_port_tag_tag_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_service_mapping_em0_ac_port_tag_tag_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(37, 30, action);
    if (action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TAG_TAG_TABLE_ACTION_SM) {
        bv.set_bits(29, 0, payloads.sm.pack());
    }
    
    return bv;
}


void npl_service_mapping_em0_ac_port_tag_tag_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_service_mapping_em0_ac_port_tag_tag_table_action_e)bv.bits(37, 30).get_value();
    if (action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TAG_TAG_TABLE_ACTION_SM) {
        payloads.sm.unpack(bv.bits(29, 0));
    }
    
}


field_structure npl_service_mapping_em0_ac_port_tag_tag_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_ac_port_tag_tag_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_mapping_em0_ac_port_tag_tag_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TAG_TAG_TABLE_ACTION_SM) {
        fs_result.subfields.emplace_back("sm", payloads.sm.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_ac_port_tag_tag_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_em0_ac_port_tag_tag_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_em0_pwe_tag_table_sm_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 30);
    bv.set_bits(29, 14, lp_id.pack());
    bv.set_bits(13, 0, relay_id.pack());
    return bv;
}

void npl_service_mapping_em0_pwe_tag_table_sm_payload_t::unpack(bit_vector64_t bv)
{
    lp_id.unpack(bv.bits(29, 14));
    relay_id.unpack(bv.bits(13, 0));
}

field_structure npl_service_mapping_em0_pwe_tag_table_sm_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_pwe_tag_table_sm_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lp_id", lp_id.to_field_structure());
    fs_result.subfields.emplace_back("relay_id", relay_id.to_field_structure());
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_pwe_tag_table_sm_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_em0_pwe_tag_table_sm_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_em0_pwe_tag_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 28);
    
    bv.set_bits(15, 0, local_slp_id.pack());
    bv.set_bits(27, 16, vid1.pack());
    
    return bv;
}

void npl_service_mapping_em0_pwe_tag_table_key_t::unpack(bit_vector64_t bv)
{
    local_slp_id.unpack(bv.bits(15, 0));
    vid1.unpack(bv.bits(27, 16));
    
}

field_structure npl_service_mapping_em0_pwe_tag_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_pwe_tag_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("local_slp_id", local_slp_id.to_field_structure());
    fs_result.subfields.emplace_back("vid1", vid1.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_pwe_tag_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_mapping_em0_pwe_tag_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_service_mapping_em0_pwe_tag_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(37, 30, action);
    if (action == NPL_SERVICE_MAPPING_EM0_PWE_TAG_TABLE_ACTION_SM) {
        bv.set_bits(29, 0, payloads.sm.pack());
    }
    
    return bv;
}


void npl_service_mapping_em0_pwe_tag_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_service_mapping_em0_pwe_tag_table_action_e)bv.bits(37, 30).get_value();
    if (action == NPL_SERVICE_MAPPING_EM0_PWE_TAG_TABLE_ACTION_SM) {
        payloads.sm.unpack(bv.bits(29, 0));
    }
    
}


field_structure npl_service_mapping_em0_pwe_tag_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em0_pwe_tag_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_mapping_em0_pwe_tag_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_MAPPING_EM0_PWE_TAG_TABLE_ACTION_SM) {
        fs_result.subfields.emplace_back("sm", payloads.sm.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_mapping_em0_pwe_tag_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_em0_pwe_tag_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_em1_ac_port_tag_table_sm_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 30);
    bv.set_bits(29, 14, lp_id.pack());
    bv.set_bits(13, 0, relay_id.pack());
    return bv;
}

void npl_service_mapping_em1_ac_port_tag_table_sm_payload_t::unpack(bit_vector64_t bv)
{
    lp_id.unpack(bv.bits(29, 14));
    relay_id.unpack(bv.bits(13, 0));
}

field_structure npl_service_mapping_em1_ac_port_tag_table_sm_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em1_ac_port_tag_table_sm_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lp_id", lp_id.to_field_structure());
    fs_result.subfields.emplace_back("relay_id", relay_id.to_field_structure());
    return fs_result;
}
std::string to_string(npl_service_mapping_em1_ac_port_tag_table_sm_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_em1_ac_port_tag_table_sm_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_em1_ac_port_tag_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 28);
    
    bv.set_bits(15, 0, local_slp_id.pack());
    bv.set_bits(27, 16, vid1.pack());
    
    return bv;
}

void npl_service_mapping_em1_ac_port_tag_table_key_t::unpack(bit_vector64_t bv)
{
    local_slp_id.unpack(bv.bits(15, 0));
    vid1.unpack(bv.bits(27, 16));
    
}

field_structure npl_service_mapping_em1_ac_port_tag_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em1_ac_port_tag_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("local_slp_id", local_slp_id.to_field_structure());
    fs_result.subfields.emplace_back("vid1", vid1.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_mapping_em1_ac_port_tag_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_mapping_em1_ac_port_tag_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_service_mapping_em1_ac_port_tag_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(37, 30, action);
    if (action == NPL_SERVICE_MAPPING_EM1_AC_PORT_TAG_TABLE_ACTION_SM) {
        bv.set_bits(29, 0, payloads.sm.pack());
    }
    
    return bv;
}


void npl_service_mapping_em1_ac_port_tag_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_service_mapping_em1_ac_port_tag_table_action_e)bv.bits(37, 30).get_value();
    if (action == NPL_SERVICE_MAPPING_EM1_AC_PORT_TAG_TABLE_ACTION_SM) {
        payloads.sm.unpack(bv.bits(29, 0));
    }
    
}


field_structure npl_service_mapping_em1_ac_port_tag_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_em1_ac_port_tag_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_mapping_em1_ac_port_tag_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_MAPPING_EM1_AC_PORT_TAG_TABLE_ACTION_SM) {
        fs_result.subfields.emplace_back("sm", payloads.sm.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_mapping_em1_ac_port_tag_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_em1_ac_port_tag_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector384_t npl_service_mapping_tcam_ac_port_table_sm_payload_t::pack(void) const
{
    bit_vector384_t bv(0, 228);
    bv.set_bits(227, 84, lp_attr.pack());
    bv.set_bits(83, 68, lp_id.pack());
    bv.set_bits(67, 14, relay_table_payload.pack());
    bv.set_bits(13, 0, relay_id);
    return bv;
}

void npl_service_mapping_tcam_ac_port_table_sm_payload_t::unpack(bit_vector384_t bv)
{
    lp_attr.unpack(bv.bits(227, 84));
    lp_id.unpack(bv.bits(83, 68));
    relay_table_payload.unpack(bv.bits(67, 14));
    relay_id = bv.bits(13, 0).get_value();
}

field_structure npl_service_mapping_tcam_ac_port_table_sm_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_ac_port_table_sm_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lp_attr", lp_attr.to_field_structure());
    fs_result.subfields.emplace_back("lp_id", lp_id.to_field_structure());
    fs_result.subfields.emplace_back("relay_table_payload", relay_table_payload.to_field_structure());
    fs_subfield.flat_value = to_hex_string(relay_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("relay_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_ac_port_table_sm_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_tcam_ac_port_table_sm_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_tcam_ac_port_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, local_slp_id.pack());
    
    return bv;
}

void npl_service_mapping_tcam_ac_port_table_key_t::unpack(bit_vector64_t bv)
{
    local_slp_id.unpack(bv.bits(15, 0));
    
}

field_structure npl_service_mapping_tcam_ac_port_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_ac_port_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("local_slp_id", local_slp_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_ac_port_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_mapping_tcam_ac_port_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector384_t npl_service_mapping_tcam_ac_port_table_value_t::pack(void) const
{
    bit_vector384_t bv;
    bv.set_bits(235, 228, action);
    if (action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TABLE_ACTION_SM) {
        bv.set_bits(227, 0, payloads.sm.pack());
    }
    
    return bv;
}


void npl_service_mapping_tcam_ac_port_table_value_t::unpack(bit_vector384_t bv)
{
    action = (npl_service_mapping_tcam_ac_port_table_action_e)bv.bits(235, 228).get_value();
    if (action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TABLE_ACTION_SM) {
        payloads.sm.unpack(bv.bits(227, 0));
    }
    
}


field_structure npl_service_mapping_tcam_ac_port_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_ac_port_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_mapping_tcam_ac_port_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TABLE_ACTION_SM) {
        fs_result.subfields.emplace_back("sm", payloads.sm.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_ac_port_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_tcam_ac_port_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector384_t npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t::pack(void) const
{
    bit_vector384_t bv(0, 228);
    bv.set_bits(227, 84, lp_attr.pack());
    bv.set_bits(83, 68, lp_id.pack());
    bv.set_bits(67, 14, relay_table_payload.pack());
    bv.set_bits(13, 0, relay_id);
    return bv;
}

void npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t::unpack(bit_vector384_t bv)
{
    lp_attr.unpack(bv.bits(227, 84));
    lp_id.unpack(bv.bits(83, 68));
    relay_table_payload.unpack(bv.bits(67, 14));
    relay_id = bv.bits(13, 0).get_value();
}

field_structure npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lp_attr", lp_attr.to_field_structure());
    fs_result.subfields.emplace_back("lp_id", lp_id.to_field_structure());
    fs_result.subfields.emplace_back("relay_table_payload", relay_table_payload.to_field_structure());
    fs_subfield.flat_value = to_hex_string(relay_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("relay_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_tcam_ac_port_tag_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 28);
    
    bv.set_bits(15, 0, local_slp_id.pack());
    bv.set_bits(27, 16, vid1.pack());
    
    return bv;
}

void npl_service_mapping_tcam_ac_port_tag_table_key_t::unpack(bit_vector64_t bv)
{
    local_slp_id.unpack(bv.bits(15, 0));
    vid1.unpack(bv.bits(27, 16));
    
}

field_structure npl_service_mapping_tcam_ac_port_tag_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_ac_port_tag_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("local_slp_id", local_slp_id.to_field_structure());
    fs_result.subfields.emplace_back("vid1", vid1.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_ac_port_tag_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_mapping_tcam_ac_port_tag_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector384_t npl_service_mapping_tcam_ac_port_tag_table_value_t::pack(void) const
{
    bit_vector384_t bv;
    bv.set_bits(235, 228, action);
    if (action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TABLE_ACTION_SM) {
        bv.set_bits(227, 0, payloads.sm.pack());
    }
    
    return bv;
}


void npl_service_mapping_tcam_ac_port_tag_table_value_t::unpack(bit_vector384_t bv)
{
    action = (npl_service_mapping_tcam_ac_port_tag_table_action_e)bv.bits(235, 228).get_value();
    if (action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TABLE_ACTION_SM) {
        payloads.sm.unpack(bv.bits(227, 0));
    }
    
}


field_structure npl_service_mapping_tcam_ac_port_tag_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_ac_port_tag_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_mapping_tcam_ac_port_tag_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TABLE_ACTION_SM) {
        fs_result.subfields.emplace_back("sm", payloads.sm.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_ac_port_tag_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_tcam_ac_port_tag_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector384_t npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t::pack(void) const
{
    bit_vector384_t bv(0, 228);
    bv.set_bits(227, 84, lp_attr.pack());
    bv.set_bits(83, 68, lp_id.pack());
    bv.set_bits(67, 14, relay_table_payload.pack());
    bv.set_bits(13, 0, relay_id);
    return bv;
}

void npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t::unpack(bit_vector384_t bv)
{
    lp_attr.unpack(bv.bits(227, 84));
    lp_id.unpack(bv.bits(83, 68));
    relay_table_payload.unpack(bv.bits(67, 14));
    relay_id = bv.bits(13, 0).get_value();
}

field_structure npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lp_attr", lp_attr.to_field_structure());
    fs_result.subfields.emplace_back("lp_id", lp_id.to_field_structure());
    fs_result.subfields.emplace_back("relay_table_payload", relay_table_payload.to_field_structure());
    fs_subfield.flat_value = to_hex_string(relay_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("relay_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_tcam_ac_port_tag_tag_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 40);
    
    bv.set_bits(15, 0, local_slp_id.pack());
    bv.set_bits(27, 16, vid1.pack());
    bv.set_bits(39, 28, vid2.pack());
    
    return bv;
}

void npl_service_mapping_tcam_ac_port_tag_tag_table_key_t::unpack(bit_vector64_t bv)
{
    local_slp_id.unpack(bv.bits(15, 0));
    vid1.unpack(bv.bits(27, 16));
    vid2.unpack(bv.bits(39, 28));
    
}

field_structure npl_service_mapping_tcam_ac_port_tag_tag_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_ac_port_tag_tag_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("local_slp_id", local_slp_id.to_field_structure());
    fs_result.subfields.emplace_back("vid1", vid1.to_field_structure());
    fs_result.subfields.emplace_back("vid2", vid2.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_ac_port_tag_tag_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_mapping_tcam_ac_port_tag_tag_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector384_t npl_service_mapping_tcam_ac_port_tag_tag_table_value_t::pack(void) const
{
    bit_vector384_t bv;
    bv.set_bits(235, 228, action);
    if (action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TAG_TABLE_ACTION_SM) {
        bv.set_bits(227, 0, payloads.sm.pack());
    }
    
    return bv;
}


void npl_service_mapping_tcam_ac_port_tag_tag_table_value_t::unpack(bit_vector384_t bv)
{
    action = (npl_service_mapping_tcam_ac_port_tag_tag_table_action_e)bv.bits(235, 228).get_value();
    if (action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TAG_TABLE_ACTION_SM) {
        payloads.sm.unpack(bv.bits(227, 0));
    }
    
}


field_structure npl_service_mapping_tcam_ac_port_tag_tag_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_ac_port_tag_tag_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_mapping_tcam_ac_port_tag_tag_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TAG_TABLE_ACTION_SM) {
        fs_result.subfields.emplace_back("sm", payloads.sm.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_ac_port_tag_tag_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_tcam_ac_port_tag_tag_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector384_t npl_service_mapping_tcam_pwe_tag_table_sm_payload_t::pack(void) const
{
    bit_vector384_t bv(0, 228);
    bv.set_bits(227, 84, lp_attr.pack());
    bv.set_bits(83, 68, lp_id.pack());
    bv.set_bits(67, 14, relay_table_payload.pack());
    bv.set_bits(13, 0, relay_id);
    return bv;
}

void npl_service_mapping_tcam_pwe_tag_table_sm_payload_t::unpack(bit_vector384_t bv)
{
    lp_attr.unpack(bv.bits(227, 84));
    lp_id.unpack(bv.bits(83, 68));
    relay_table_payload.unpack(bv.bits(67, 14));
    relay_id = bv.bits(13, 0).get_value();
}

field_structure npl_service_mapping_tcam_pwe_tag_table_sm_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_pwe_tag_table_sm_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lp_attr", lp_attr.to_field_structure());
    fs_result.subfields.emplace_back("lp_id", lp_id.to_field_structure());
    fs_result.subfields.emplace_back("relay_table_payload", relay_table_payload.to_field_structure());
    fs_subfield.flat_value = to_hex_string(relay_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("relay_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_pwe_tag_table_sm_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_tcam_pwe_tag_table_sm_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_mapping_tcam_pwe_tag_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 28);
    
    bv.set_bits(15, 0, local_slp_id.pack());
    bv.set_bits(27, 16, vid1.pack());
    
    return bv;
}

void npl_service_mapping_tcam_pwe_tag_table_key_t::unpack(bit_vector64_t bv)
{
    local_slp_id.unpack(bv.bits(15, 0));
    vid1.unpack(bv.bits(27, 16));
    
}

field_structure npl_service_mapping_tcam_pwe_tag_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_pwe_tag_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("local_slp_id", local_slp_id.to_field_structure());
    fs_result.subfields.emplace_back("vid1", vid1.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_pwe_tag_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_mapping_tcam_pwe_tag_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector384_t npl_service_mapping_tcam_pwe_tag_table_value_t::pack(void) const
{
    bit_vector384_t bv;
    bv.set_bits(235, 228, action);
    if (action == NPL_SERVICE_MAPPING_TCAM_PWE_TAG_TABLE_ACTION_SM) {
        bv.set_bits(227, 0, payloads.sm.pack());
    }
    
    return bv;
}


void npl_service_mapping_tcam_pwe_tag_table_value_t::unpack(bit_vector384_t bv)
{
    action = (npl_service_mapping_tcam_pwe_tag_table_action_e)bv.bits(235, 228).get_value();
    if (action == NPL_SERVICE_MAPPING_TCAM_PWE_TAG_TABLE_ACTION_SM) {
        payloads.sm.unpack(bv.bits(227, 0));
    }
    
}


field_structure npl_service_mapping_tcam_pwe_tag_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_mapping_tcam_pwe_tag_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_mapping_tcam_pwe_tag_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_MAPPING_TCAM_PWE_TAG_TABLE_ACTION_SM) {
        fs_result.subfields.emplace_back("sm", payloads.sm.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_mapping_tcam_pwe_tag_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_mapping_tcam_pwe_tag_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_relay_attributes_table_relay_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 54);
    bv.set_bits(53, 0, relay_table_payload.pack());
    return bv;
}

void npl_service_relay_attributes_table_relay_payload_t::unpack(bit_vector64_t bv)
{
    relay_table_payload.unpack(bv.bits(53, 0));
}

field_structure npl_service_relay_attributes_table_relay_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_relay_attributes_table_relay_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("relay_table_payload", relay_table_payload.to_field_structure());
    return fs_result;
}
std::string to_string(npl_service_relay_attributes_table_relay_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_relay_attributes_table_relay_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_service_relay_attributes_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 14);
    
    bv.set_bits(13, 0, relay_id.pack());
    
    return bv;
}

void npl_service_relay_attributes_table_key_t::unpack(bit_vector64_t bv)
{
    relay_id.unpack(bv.bits(13, 0));
    
}

field_structure npl_service_relay_attributes_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_relay_attributes_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("relay_id", relay_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_service_relay_attributes_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_service_relay_attributes_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_service_relay_attributes_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(61, 54, action);
    if (action == NPL_SERVICE_RELAY_ATTRIBUTES_TABLE_ACTION_RELAY) {
        bv.set_bits(53, 0, payloads.relay.pack());
    }
    
    return bv;
}


void npl_service_relay_attributes_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_service_relay_attributes_table_action_e)bv.bits(61, 54).get_value();
    if (action == NPL_SERVICE_RELAY_ATTRIBUTES_TABLE_ACTION_RELAY) {
        payloads.relay.unpack(bv.bits(53, 0));
    }
    
}


field_structure npl_service_relay_attributes_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_service_relay_attributes_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_service_relay_attributes_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SERVICE_RELAY_ATTRIBUTES_TABLE_ACTION_RELAY) {
        fs_result.subfields.emplace_back("relay", payloads.relay.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_service_relay_attributes_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_service_relay_attributes_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 12, bytes_to_remove);
    bv.set_bits(11, 8, new_hdr_type);
    bv.set_bits(7, 0, ene_macro_id);
    return bv;
}

void npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t::unpack(bit_vector64_t bv)
{
    bytes_to_remove = bv.bits(19, 12).get_value();
    new_hdr_type = (npl_fabric_header_type_e)bv.bits(11, 8).get_value();
    ene_macro_id = (npl_ene_macro_ids_e)bv.bits(7, 0).get_value();
}

field_structure npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(bytes_to_remove);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("bytes_to_remove", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(new_hdr_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("new_hdr_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(ene_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ene_macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_set_ene_macro_and_bytes_to_remove_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(0, 0, plb_header_type);
    bv.set_bits(4, 1, hdr_type);
    
    return bv;
}

void npl_set_ene_macro_and_bytes_to_remove_table_key_t::unpack(bit_vector64_t bv)
{
    plb_header_type = (npl_plb_header_type_e)bv.bits(0, 0).get_value();
    hdr_type = (npl_fabric_header_type_e)bv.bits(4, 1).get_value();
    
}

field_structure npl_set_ene_macro_and_bytes_to_remove_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_set_ene_macro_and_bytes_to_remove_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(plb_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("plb_header_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(hdr_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("hdr_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_set_ene_macro_and_bytes_to_remove_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_set_ene_macro_and_bytes_to_remove_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_set_ene_macro_and_bytes_to_remove_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE_ACTION_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE) {
        bv.set_bits(19, 0, payloads.set_ene_macro_and_bytes_to_remove_table.pack());
    }
    
    return bv;
}


void npl_set_ene_macro_and_bytes_to_remove_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_set_ene_macro_and_bytes_to_remove_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE_ACTION_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE) {
        payloads.set_ene_macro_and_bytes_to_remove_table.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_set_ene_macro_and_bytes_to_remove_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_set_ene_macro_and_bytes_to_remove_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_set_ene_macro_and_bytes_to_remove_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE_ACTION_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE) {
        fs_result.subfields.emplace_back("set_ene_macro_and_bytes_to_remove_table", payloads.set_ene_macro_and_bytes_to_remove_table.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_set_ene_macro_and_bytes_to_remove_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_set_ene_macro_and_bytes_to_remove_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_sgacl_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    
    bv.set_bits(3, 0, 0x0);
    bv.set_bits(4, 4, 0x0);
    bv.set_bits(5, 5, 0x0);
    bv.set_bits(6, 6, 0x0);
    bv.set_bits(7, 7, 0x0);
    bv.set_bits(8, 8, 0x0);
    bv.set_bits(9, 9, 0x0);
    bv.set_bits(10, 10, 0x0);
    
    return bv;
}

void npl_sgacl_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_sgacl_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_sgacl_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_sgacl_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_sgacl_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_sgacl_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_SGACL_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.sgacl_payload.pack());
    }
    
    return bv;
}


void npl_sgacl_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_sgacl_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_SGACL_TABLE_ACTION_WRITE) {
        payloads.sgacl_payload.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_sgacl_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_sgacl_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_sgacl_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SGACL_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.sgacl_payload", payloads.sgacl_payload.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_sgacl_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_sgacl_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_sip_index_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, sip_index);
    
    return bv;
}

void npl_sip_index_table_key_t::unpack(bit_vector64_t bv)
{
    sip_index = bv.bits(3, 0).get_value();
    
}

field_structure npl_sip_index_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_sip_index_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(sip_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sip_index", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_sip_index_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_sip_index_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_sip_index_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(39, 32, action);
    if (action == NPL_SIP_INDEX_TABLE_ACTION_WRITE) {
        bv.set_bits(31, 0, payloads.sip);
    }
    
    return bv;
}


void npl_sip_index_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_sip_index_table_action_e)bv.bits(39, 32).get_value();
    if (action == NPL_SIP_INDEX_TABLE_ACTION_WRITE) {
        payloads.sip = bv.bits(31, 0).get_value();
    }
    
}


field_structure npl_sip_index_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_sip_index_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_sip_index_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SIP_INDEX_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.sip);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.sip", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_sip_index_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_sip_index_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_slice_modes_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 3);
    
    bv.set_bits(2, 0, slice_id);
    
    return bv;
}

void npl_slice_modes_table_key_t::unpack(bit_vector64_t bv)
{
    slice_id = bv.bits(2, 0).get_value();
    
}

field_structure npl_slice_modes_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_slice_modes_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(slice_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("slice_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_slice_modes_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_slice_modes_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_slice_modes_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_SLICE_MODES_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.slice_modes_table_in_out_vars_slice_mode);
    }
    
    return bv;
}


void npl_slice_modes_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_slice_modes_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_SLICE_MODES_TABLE_ACTION_WRITE) {
        payloads.slice_modes_table_in_out_vars_slice_mode = (npl_slice_mode_e)bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_slice_modes_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_slice_modes_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_slice_modes_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SLICE_MODES_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = npl_enum_to_string(payloads.slice_modes_table_in_out_vars_slice_mode);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.slice_modes_table_in_out_vars_slice_mode", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_slice_modes_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_slice_modes_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_slp_based_forwarding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 14);
    
    bv.set_bits(13, 0, slp_id.pack());
    
    return bv;
}

void npl_slp_based_forwarding_table_key_t::unpack(bit_vector64_t bv)
{
    slp_id.unpack(bv.bits(13, 0));
    
}

field_structure npl_slp_based_forwarding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_slp_based_forwarding_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("slp_id", slp_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_slp_based_forwarding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_slp_based_forwarding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_slp_based_forwarding_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(51, 44, action);
    if (action == NPL_SLP_BASED_FORWARDING_TABLE_ACTION_WRITE) {
        bv.set_bits(43, 0, payloads.slp_fwd_result.pack());
    }
    
    return bv;
}


void npl_slp_based_forwarding_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_slp_based_forwarding_table_action_e)bv.bits(51, 44).get_value();
    if (action == NPL_SLP_BASED_FORWARDING_TABLE_ACTION_WRITE) {
        payloads.slp_fwd_result.unpack(bv.bits(43, 0));
    }
    
}


field_structure npl_slp_based_forwarding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_slp_based_forwarding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_slp_based_forwarding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SLP_BASED_FORWARDING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.slp_fwd_result", payloads.slp_fwd_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_slp_based_forwarding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_slp_based_forwarding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_small_encap_mpls_he_asbr_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 28);
    
    bv.set_bits(11, 0, nh_ptr);
    bv.set_bits(27, 12, asbr);
    
    return bv;
}

void npl_small_encap_mpls_he_asbr_table_key_t::unpack(bit_vector64_t bv)
{
    nh_ptr = bv.bits(11, 0).get_value();
    asbr = bv.bits(27, 12).get_value();
    
}

field_structure npl_small_encap_mpls_he_asbr_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_small_encap_mpls_he_asbr_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(nh_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("nh_ptr", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(asbr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("asbr", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_small_encap_mpls_he_asbr_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_small_encap_mpls_he_asbr_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_small_encap_mpls_he_asbr_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(87, 80, action);
    if (action == NPL_SMALL_ENCAP_MPLS_HE_ASBR_TABLE_ACTION_WRITE) {
        bv.set_bits(79, 0, payloads.lsp_encap_mapping_data_payload_asbr.pack());
    }
    
    return bv;
}


void npl_small_encap_mpls_he_asbr_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_small_encap_mpls_he_asbr_table_action_e)bv.bits(87, 80).get_value();
    if (action == NPL_SMALL_ENCAP_MPLS_HE_ASBR_TABLE_ACTION_WRITE) {
        payloads.lsp_encap_mapping_data_payload_asbr.unpack(bv.bits(79, 0));
    }
    
}


field_structure npl_small_encap_mpls_he_asbr_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_small_encap_mpls_he_asbr_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_small_encap_mpls_he_asbr_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SMALL_ENCAP_MPLS_HE_ASBR_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lsp_encap_mapping_data_payload_asbr", payloads.lsp_encap_mapping_data_payload_asbr.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_small_encap_mpls_he_asbr_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_small_encap_mpls_he_asbr_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_small_encap_mpls_he_te_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 28);
    
    bv.set_bits(11, 0, nh_ptr);
    bv.set_bits(27, 12, te_tunnel);
    
    return bv;
}

void npl_small_encap_mpls_he_te_table_key_t::unpack(bit_vector64_t bv)
{
    nh_ptr = bv.bits(11, 0).get_value();
    te_tunnel = bv.bits(27, 12).get_value();
    
}

field_structure npl_small_encap_mpls_he_te_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_small_encap_mpls_he_te_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(nh_ptr);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("nh_ptr", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(te_tunnel);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("te_tunnel", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_small_encap_mpls_he_te_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_small_encap_mpls_he_te_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_small_encap_mpls_he_te_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(87, 80, action);
    if (action == NPL_SMALL_ENCAP_MPLS_HE_TE_TABLE_ACTION_WRITE) {
        bv.set_bits(79, 0, payloads.lsp_encap_mapping_data_payload_asbr.pack());
    }
    
    return bv;
}


void npl_small_encap_mpls_he_te_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_small_encap_mpls_he_te_table_action_e)bv.bits(87, 80).get_value();
    if (action == NPL_SMALL_ENCAP_MPLS_HE_TE_TABLE_ACTION_WRITE) {
        payloads.lsp_encap_mapping_data_payload_asbr.unpack(bv.bits(79, 0));
    }
    
}


field_structure npl_small_encap_mpls_he_te_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_small_encap_mpls_he_te_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_small_encap_mpls_he_te_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SMALL_ENCAP_MPLS_HE_TE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.lsp_encap_mapping_data_payload_asbr", payloads.lsp_encap_mapping_data_payload_asbr.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_small_encap_mpls_he_te_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_small_encap_mpls_he_te_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_snoop_code_hw_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, pd_common_leaba_fields_snoop_code);
    
    return bv;
}

void npl_snoop_code_hw_table_key_t::unpack(bit_vector64_t bv)
{
    pd_common_leaba_fields_snoop_code = bv.bits(7, 0).get_value();
    
}

field_structure npl_snoop_code_hw_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_snoop_code_hw_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pd_common_leaba_fields_snoop_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_common_leaba_fields_snoop_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_snoop_code_hw_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_snoop_code_hw_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_snoop_code_hw_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(12, 5, action);
    if (action == NPL_SNOOP_CODE_HW_TABLE_ACTION_WRITE) {
        bv.set_bits(4, 0, payloads.rxpp_pd_in_mirror_cmd0);
    }
    
    return bv;
}


void npl_snoop_code_hw_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_snoop_code_hw_table_action_e)bv.bits(12, 5).get_value();
    if (action == NPL_SNOOP_CODE_HW_TABLE_ACTION_WRITE) {
        payloads.rxpp_pd_in_mirror_cmd0 = bv.bits(4, 0).get_value();
    }
    
}


field_structure npl_snoop_code_hw_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_snoop_code_hw_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_snoop_code_hw_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SNOOP_CODE_HW_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.rxpp_pd_in_mirror_cmd0);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.rxpp_pd_in_mirror_cmd0", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_snoop_code_hw_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_snoop_code_hw_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector384_t npl_snoop_table_key_t::pack(void) const
{
    bit_vector384_t bv(0, 199);
    
    bv.set_bits(1, 0, trap_conditions.pack());
    bv.set_bits(198, 2, traps.pack());
    
    return bv;
}

void npl_snoop_table_key_t::unpack(bit_vector384_t bv)
{
    trap_conditions.unpack(bv.bits(1, 0));
    traps.unpack(bv.bits(198, 2));
    
}

field_structure npl_snoop_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_snoop_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("trap_conditions", trap_conditions.to_field_structure());
    fs_result.subfields.emplace_back("traps", traps.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_snoop_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_snoop_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_snoop_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_SNOOP_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.snoop_code.pack());
    }
    
    return bv;
}


void npl_snoop_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_snoop_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_SNOOP_TABLE_ACTION_WRITE) {
        payloads.snoop_code.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_snoop_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_snoop_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_snoop_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SNOOP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.snoop_code", payloads.snoop_code.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_snoop_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_snoop_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_snoop_to_dsp_in_npu_soft_header_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, device_snoop_code);
    
    return bv;
}

void npl_snoop_to_dsp_in_npu_soft_header_table_key_t::unpack(bit_vector64_t bv)
{
    device_snoop_code = bv.bits(7, 0).get_value();
    
}

field_structure npl_snoop_to_dsp_in_npu_soft_header_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_snoop_to_dsp_in_npu_soft_header_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(device_snoop_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("device_snoop_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_snoop_to_dsp_in_npu_soft_header_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_snoop_to_dsp_in_npu_soft_header_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_snoop_to_dsp_in_npu_soft_header_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_SNOOP_TO_DSP_IN_NPU_SOFT_HEADER_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.update_dsp_in_npu_soft_header);
    }
    
    return bv;
}


void npl_snoop_to_dsp_in_npu_soft_header_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_snoop_to_dsp_in_npu_soft_header_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_SNOOP_TO_DSP_IN_NPU_SOFT_HEADER_TABLE_ACTION_WRITE) {
        payloads.update_dsp_in_npu_soft_header = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_snoop_to_dsp_in_npu_soft_header_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_snoop_to_dsp_in_npu_soft_header_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_snoop_to_dsp_in_npu_soft_header_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SNOOP_TO_DSP_IN_NPU_SOFT_HEADER_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.update_dsp_in_npu_soft_header);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.update_dsp_in_npu_soft_header", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_snoop_to_dsp_in_npu_soft_header_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_snoop_to_dsp_in_npu_soft_header_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector128_t npl_source_pif_hw_table_init_rx_data_payload_t::pack(void) const
{
    bit_vector128_t bv(0, 68);
    bv.set_bits(67, 64, initial_layer_index);
    bv.set_bits(63, 14, initial_rx_data.pack());
    bv.set_bits(13, 12, tag_swap_cmd);
    bv.set_bits(11, 6, np_macro_id);
    bv.set_bits(5, 0, fi_macro_id);
    return bv;
}

void npl_source_pif_hw_table_init_rx_data_payload_t::unpack(bit_vector128_t bv)
{
    initial_layer_index = bv.bits(67, 64).get_value();
    initial_rx_data.unpack(bv.bits(63, 14));
    tag_swap_cmd = (npl_tag_swap_cmd_e)bv.bits(13, 12).get_value();
    np_macro_id = bv.bits(11, 6).get_value();
    fi_macro_id = bv.bits(5, 0).get_value();
}

field_structure npl_source_pif_hw_table_init_rx_data_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_source_pif_hw_table_init_rx_data_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(initial_layer_index);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("initial_layer_index", fs_subfield);
    
    fs_result.subfields.emplace_back("initial_rx_data", initial_rx_data.to_field_structure());
    fs_subfield.flat_value = npl_enum_to_string(tag_swap_cmd);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tag_swap_cmd", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(np_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("np_macro_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(fi_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fi_macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_source_pif_hw_table_init_rx_data_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_source_pif_hw_table_init_rx_data_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_source_pif_hw_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(0, 0, rxpp_npu_input_ifg);
    bv.set_bits(5, 1, rxpp_npu_input_ifg_rx_fd_source_pif);
    
    return bv;
}

void npl_source_pif_hw_table_key_t::unpack(bit_vector64_t bv)
{
    rxpp_npu_input_ifg = bv.bits(0, 0).get_value();
    rxpp_npu_input_ifg_rx_fd_source_pif = bv.bits(5, 1).get_value();
    
}

field_structure npl_source_pif_hw_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_source_pif_hw_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_npu_input_ifg);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_npu_input_ifg", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(rxpp_npu_input_ifg_rx_fd_source_pif);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_npu_input_ifg_rx_fd_source_pif", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_source_pif_hw_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_source_pif_hw_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_source_pif_hw_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(75, 68, action);
    if (action == NPL_SOURCE_PIF_HW_TABLE_ACTION_INIT_RX_DATA) {
        bv.set_bits(67, 0, payloads.init_rx_data.pack());
    }
    
    return bv;
}


void npl_source_pif_hw_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_source_pif_hw_table_action_e)bv.bits(75, 68).get_value();
    if (action == NPL_SOURCE_PIF_HW_TABLE_ACTION_INIT_RX_DATA) {
        payloads.init_rx_data.unpack(bv.bits(67, 0));
    }
    
}


field_structure npl_source_pif_hw_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_source_pif_hw_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_source_pif_hw_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SOURCE_PIF_HW_TABLE_ACTION_INIT_RX_DATA) {
        fs_result.subfields.emplace_back("init_rx_data", payloads.init_rx_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_source_pif_hw_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_source_pif_hw_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_stage2_lb_group_size_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, ecmp_id);
    
    return bv;
}

void npl_stage2_lb_group_size_table_key_t::unpack(bit_vector64_t bv)
{
    ecmp_id = bv.bits(12, 0).get_value();
    
}

field_structure npl_stage2_lb_group_size_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_stage2_lb_group_size_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ecmp_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ecmp_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_stage2_lb_group_size_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_stage2_lb_group_size_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_stage2_lb_group_size_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_STAGE2_LB_GROUP_SIZE_TABLE_ACTION_WRITE) {
        bv.set_bits(9, 0, payloads.stage2_lb_group_size_table_result.pack());
    }
    
    return bv;
}


void npl_stage2_lb_group_size_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_stage2_lb_group_size_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_STAGE2_LB_GROUP_SIZE_TABLE_ACTION_WRITE) {
        payloads.stage2_lb_group_size_table_result.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_stage2_lb_group_size_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_stage2_lb_group_size_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_stage2_lb_group_size_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_STAGE2_LB_GROUP_SIZE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.stage2_lb_group_size_table_result", payloads.stage2_lb_group_size_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_stage2_lb_group_size_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_stage2_lb_group_size_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_stage2_lb_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 30);
    
    bv.set_bits(13, 0, group_id);
    bv.set_bits(29, 14, member_id);
    
    return bv;
}

void npl_stage2_lb_table_key_t::unpack(bit_vector64_t bv)
{
    group_id = bv.bits(13, 0).get_value();
    member_id = bv.bits(29, 14).get_value();
    
}

field_structure npl_stage2_lb_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_stage2_lb_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(group_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("group_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(member_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("member_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_stage2_lb_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_stage2_lb_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_stage2_lb_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(36, 29, action);
    if (action == NPL_STAGE2_LB_TABLE_ACTION_WRITE) {
        bv.set_bits(28, 0, payloads.stage2_lb_result.pack());
    }
    
    return bv;
}


void npl_stage2_lb_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_stage2_lb_table_action_e)bv.bits(36, 29).get_value();
    if (action == NPL_STAGE2_LB_TABLE_ACTION_WRITE) {
        payloads.stage2_lb_result.unpack(bv.bits(28, 0));
    }
    
}


field_structure npl_stage2_lb_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_stage2_lb_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_stage2_lb_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_STAGE2_LB_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.stage2_lb_result", payloads.stage2_lb_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_stage2_lb_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_stage2_lb_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_stage3_lb_group_size_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, stage3_lb_id);
    
    return bv;
}

void npl_stage3_lb_group_size_table_key_t::unpack(bit_vector64_t bv)
{
    stage3_lb_id = bv.bits(12, 0).get_value();
    
}

field_structure npl_stage3_lb_group_size_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_stage3_lb_group_size_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(stage3_lb_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("stage3_lb_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_stage3_lb_group_size_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_stage3_lb_group_size_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_stage3_lb_group_size_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(17, 10, action);
    if (action == NPL_STAGE3_LB_GROUP_SIZE_TABLE_ACTION_WRITE) {
        bv.set_bits(9, 0, payloads.stage3_lb_group_size_table_result.pack());
    }
    
    return bv;
}


void npl_stage3_lb_group_size_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_stage3_lb_group_size_table_action_e)bv.bits(17, 10).get_value();
    if (action == NPL_STAGE3_LB_GROUP_SIZE_TABLE_ACTION_WRITE) {
        payloads.stage3_lb_group_size_table_result.unpack(bv.bits(9, 0));
    }
    
}


field_structure npl_stage3_lb_group_size_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_stage3_lb_group_size_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_stage3_lb_group_size_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_STAGE3_LB_GROUP_SIZE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.stage3_lb_group_size_table_result", payloads.stage3_lb_group_size_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_stage3_lb_group_size_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_stage3_lb_group_size_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_stage3_lb_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 30);
    
    bv.set_bits(13, 0, group_id);
    bv.set_bits(29, 14, member_id);
    
    return bv;
}

void npl_stage3_lb_table_key_t::unpack(bit_vector64_t bv)
{
    group_id = bv.bits(13, 0).get_value();
    member_id = bv.bits(29, 14).get_value();
    
}

field_structure npl_stage3_lb_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_stage3_lb_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(group_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("group_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(member_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("member_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_stage3_lb_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_stage3_lb_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_stage3_lb_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(47, 40, action);
    if (action == NPL_STAGE3_LB_TABLE_ACTION_WRITE) {
        bv.set_bits(39, 0, payloads.stage3_lb_result.pack());
    }
    
    return bv;
}


void npl_stage3_lb_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_stage3_lb_table_action_e)bv.bits(47, 40).get_value();
    if (action == NPL_STAGE3_LB_TABLE_ACTION_WRITE) {
        payloads.stage3_lb_result.unpack(bv.bits(39, 0));
    }
    
}


field_structure npl_stage3_lb_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_stage3_lb_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_stage3_lb_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_STAGE3_LB_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.stage3_lb_result", payloads.stage3_lb_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_stage3_lb_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_stage3_lb_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_stage3_lb_type_decoding_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, type);
    
    return bv;
}

void npl_stage3_lb_type_decoding_table_key_t::unpack(bit_vector64_t bv)
{
    type = (npl_stage3_lb_entry_type_e)bv.bits(1, 0).get_value();
    
}

field_structure npl_stage3_lb_type_decoding_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_stage3_lb_type_decoding_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_stage3_lb_type_decoding_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_stage3_lb_type_decoding_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_stage3_lb_type_decoding_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(70, 63, action);
    if (action == NPL_STAGE3_LB_TYPE_DECODING_TABLE_ACTION_WRITE) {
        bv.set_bits(62, 0, payloads.stage3_lb_type_decoding_table_result.pack());
    }
    
    return bv;
}


void npl_stage3_lb_type_decoding_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_stage3_lb_type_decoding_table_action_e)bv.bits(70, 63).get_value();
    if (action == NPL_STAGE3_LB_TYPE_DECODING_TABLE_ACTION_WRITE) {
        payloads.stage3_lb_type_decoding_table_result.unpack(bv.bits(62, 0));
    }
    
}


field_structure npl_stage3_lb_type_decoding_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_stage3_lb_type_decoding_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_stage3_lb_type_decoding_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_STAGE3_LB_TYPE_DECODING_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.stage3_lb_type_decoding_table_result", payloads.stage3_lb_type_decoding_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_stage3_lb_type_decoding_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_stage3_lb_type_decoding_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_svl_next_macro_static_table_svl_next_macro_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 12);
    bv.set_bits(11, 11, ipc_trap);
    bv.set_bits(10, 10, protocol_trap);
    bv.set_bits(9, 8, pl_inc);
    bv.set_bits(7, 0, macro_id);
    return bv;
}

void npl_svl_next_macro_static_table_svl_next_macro_action_payload_t::unpack(bit_vector64_t bv)
{
    ipc_trap = bv.bits(11, 11).get_value();
    protocol_trap = bv.bits(10, 10).get_value();
    pl_inc = bv.bits(9, 8).get_value();
    macro_id = bv.bits(7, 0).get_value();
}

field_structure npl_svl_next_macro_static_table_svl_next_macro_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_svl_next_macro_static_table_svl_next_macro_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ipc_trap);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ipc_trap", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(protocol_trap);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("protocol_trap", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pl_inc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pl_inc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_svl_next_macro_static_table_svl_next_macro_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_svl_next_macro_static_table_svl_next_macro_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_svl_next_macro_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(7, 0, mac_da_prefix);
    bv.set_bits(12, 8, type);
    
    return bv;
}

void npl_svl_next_macro_static_table_key_t::unpack(bit_vector64_t bv)
{
    mac_da_prefix = bv.bits(7, 0).get_value();
    type = (npl_protocol_type_e)bv.bits(12, 8).get_value();
    
}

field_structure npl_svl_next_macro_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_svl_next_macro_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(mac_da_prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_da_prefix", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_svl_next_macro_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_svl_next_macro_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_svl_next_macro_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(19, 12, action);
    if (action == NPL_SVL_NEXT_MACRO_STATIC_TABLE_ACTION_SVL_NEXT_MACRO_ACTION) {
        bv.set_bits(11, 0, payloads.svl_next_macro_action.pack());
    }
    
    return bv;
}


void npl_svl_next_macro_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_svl_next_macro_static_table_action_e)bv.bits(19, 12).get_value();
    if (action == NPL_SVL_NEXT_MACRO_STATIC_TABLE_ACTION_SVL_NEXT_MACRO_ACTION) {
        payloads.svl_next_macro_action.unpack(bv.bits(11, 0));
    }
    
}


field_structure npl_svl_next_macro_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_svl_next_macro_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_svl_next_macro_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_SVL_NEXT_MACRO_STATIC_TABLE_ACTION_SVL_NEXT_MACRO_ACTION) {
        fs_result.subfields.emplace_back("svl_next_macro_action", payloads.svl_next_macro_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_svl_next_macro_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_svl_next_macro_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_te_headend_lsp_counter_offset_table_offsets_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    bv.set_bits(5, 3, lsp_counter_offset.pack());
    bv.set_bits(2, 0, php_counter_offset.pack());
    return bv;
}

void npl_te_headend_lsp_counter_offset_table_offsets_payload_t::unpack(bit_vector64_t bv)
{
    lsp_counter_offset.unpack(bv.bits(5, 3));
    php_counter_offset.unpack(bv.bits(2, 0));
}

field_structure npl_te_headend_lsp_counter_offset_table_offsets_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_te_headend_lsp_counter_offset_table_offsets_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("lsp_counter_offset", lsp_counter_offset.to_field_structure());
    fs_result.subfields.emplace_back("php_counter_offset", php_counter_offset.to_field_structure());
    return fs_result;
}
std::string to_string(npl_te_headend_lsp_counter_offset_table_offsets_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_te_headend_lsp_counter_offset_table_offsets_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_te_headend_lsp_counter_offset_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(3, 0, l3_encap_type);
    bv.set_bits(7, 4, fwd_header_type);
    bv.set_bits(8, 8, is_mc);
    
    return bv;
}

void npl_te_headend_lsp_counter_offset_table_key_t::unpack(bit_vector64_t bv)
{
    l3_encap_type = (npl_npu_encap_l3_header_type_e)bv.bits(3, 0).get_value();
    fwd_header_type = (npl_fwd_header_type_e)bv.bits(7, 4).get_value();
    is_mc = bv.bits(8, 8).get_value();
    
}

field_structure npl_te_headend_lsp_counter_offset_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_te_headend_lsp_counter_offset_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(l3_encap_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_encap_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fwd_header_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_mc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_mc", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_te_headend_lsp_counter_offset_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_te_headend_lsp_counter_offset_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_te_headend_lsp_counter_offset_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(13, 6, action);
    if (action == NPL_TE_HEADEND_LSP_COUNTER_OFFSET_TABLE_ACTION_OFFSETS) {
        bv.set_bits(5, 0, payloads.offsets.pack());
    }
    
    return bv;
}


void npl_te_headend_lsp_counter_offset_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_te_headend_lsp_counter_offset_table_action_e)bv.bits(13, 6).get_value();
    if (action == NPL_TE_HEADEND_LSP_COUNTER_OFFSET_TABLE_ACTION_OFFSETS) {
        payloads.offsets.unpack(bv.bits(5, 0));
    }
    
}


field_structure npl_te_headend_lsp_counter_offset_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_te_headend_lsp_counter_offset_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_te_headend_lsp_counter_offset_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TE_HEADEND_LSP_COUNTER_OFFSET_TABLE_ACTION_OFFSETS) {
        fs_result.subfields.emplace_back("offsets", payloads.offsets.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_te_headend_lsp_counter_offset_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_te_headend_lsp_counter_offset_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_termination_to_forwarding_fi_hardwired_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, packet_protocol_layer_current__header_0__header_info_type);
    
    return bv;
}

void npl_termination_to_forwarding_fi_hardwired_table_key_t::unpack(bit_vector64_t bv)
{
    packet_protocol_layer_current__header_0__header_info_type = (npl_protocol_type_e)bv.bits(4, 0).get_value();
    
}

field_structure npl_termination_to_forwarding_fi_hardwired_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_termination_to_forwarding_fi_hardwired_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(packet_protocol_layer_current__header_0__header_info_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_protocol_layer_current__header_0__header_info_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_termination_to_forwarding_fi_hardwired_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_termination_to_forwarding_fi_hardwired_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_termination_to_forwarding_fi_hardwired_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(9, 2, action);
    if (action == NPL_TERMINATION_TO_FORWARDING_FI_HARDWIRED_TABLE_ACTION_WRITE) {
        bv.set_bits(1, 0, payloads.termination_to_forwarding_fields_fi_hardwired_type);
    }
    
    return bv;
}


void npl_termination_to_forwarding_fi_hardwired_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_termination_to_forwarding_fi_hardwired_table_action_e)bv.bits(9, 2).get_value();
    if (action == NPL_TERMINATION_TO_FORWARDING_FI_HARDWIRED_TABLE_ACTION_WRITE) {
        payloads.termination_to_forwarding_fields_fi_hardwired_type = (npl_fi_hardwired_type_e)bv.bits(1, 0).get_value();
    }
    
}


field_structure npl_termination_to_forwarding_fi_hardwired_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_termination_to_forwarding_fi_hardwired_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_termination_to_forwarding_fi_hardwired_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TERMINATION_TO_FORWARDING_FI_HARDWIRED_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = npl_enum_to_string(payloads.termination_to_forwarding_fields_fi_hardwired_type);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.termination_to_forwarding_fields_fi_hardwired_type", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_termination_to_forwarding_fi_hardwired_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_termination_to_forwarding_fi_hardwired_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tm_ibm_cmd_to_destination_found_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    bv.set_bits(8, 6, dest_slice_id);
    bv.set_bits(5, 1, dest_pif);
    bv.set_bits(0, 0, dest_ifg);
    return bv;
}

void npl_tm_ibm_cmd_to_destination_found_payload_t::unpack(bit_vector64_t bv)
{
    dest_slice_id = bv.bits(8, 6).get_value();
    dest_pif = bv.bits(5, 1).get_value();
    dest_ifg = bv.bits(0, 0).get_value();
}

field_structure npl_tm_ibm_cmd_to_destination_found_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tm_ibm_cmd_to_destination_found_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dest_slice_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_slice_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dest_pif);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_pif", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dest_ifg);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_ifg", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_tm_ibm_cmd_to_destination_found_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tm_ibm_cmd_to_destination_found_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tm_ibm_cmd_to_destination_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, rxpp_to_txpp_local_vars_mirror_command);
    
    return bv;
}

void npl_tm_ibm_cmd_to_destination_key_t::unpack(bit_vector64_t bv)
{
    rxpp_to_txpp_local_vars_mirror_command = bv.bits(4, 0).get_value();
    
}

field_structure npl_tm_ibm_cmd_to_destination_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tm_ibm_cmd_to_destination_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_to_txpp_local_vars_mirror_command);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_to_txpp_local_vars_mirror_command", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_tm_ibm_cmd_to_destination_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_tm_ibm_cmd_to_destination_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_tm_ibm_cmd_to_destination_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(16, 9, action);
    if (action == NPL_TM_IBM_CMD_TO_DESTINATION_ACTION_FOUND) {
        bv.set_bits(8, 0, payloads.found.pack());
    }
    
    return bv;
}


void npl_tm_ibm_cmd_to_destination_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_tm_ibm_cmd_to_destination_action_e)bv.bits(16, 9).get_value();
    if (action == NPL_TM_IBM_CMD_TO_DESTINATION_ACTION_FOUND) {
        payloads.found.unpack(bv.bits(8, 0));
    }
    
}


field_structure npl_tm_ibm_cmd_to_destination_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tm_ibm_cmd_to_destination_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_tm_ibm_cmd_to_destination_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TM_IBM_CMD_TO_DESTINATION_ACTION_FOUND) {
        fs_result.subfields.emplace_back("found", payloads.found.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_tm_ibm_cmd_to_destination_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tm_ibm_cmd_to_destination_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_ts_cmd_hw_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, pd_tx_common_tx_leaba_fields_ts_command_op);
    
    return bv;
}

void npl_ts_cmd_hw_static_table_key_t::unpack(bit_vector64_t bv)
{
    pd_tx_common_tx_leaba_fields_ts_command_op = bv.bits(3, 0).get_value();
    
}

field_structure npl_ts_cmd_hw_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ts_cmd_hw_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pd_tx_common_tx_leaba_fields_ts_command_op);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_tx_common_tx_leaba_fields_ts_command_op", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_ts_cmd_hw_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_ts_cmd_hw_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_ts_cmd_hw_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_TS_CMD_HW_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.ts_cmd_trans.pack());
    }
    
    return bv;
}


void npl_ts_cmd_hw_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_ts_cmd_hw_static_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_TS_CMD_HW_STATIC_TABLE_ACTION_WRITE) {
        payloads.ts_cmd_trans.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_ts_cmd_hw_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_ts_cmd_hw_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_ts_cmd_hw_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TS_CMD_HW_STATIC_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ts_cmd_trans", payloads.ts_cmd_trans.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_ts_cmd_hw_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_ts_cmd_hw_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tunnel_dlp_p_counter_offset_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(3, 0, fwd_header_type);
    bv.set_bits(7, 4, l3_encap_type);
    bv.set_bits(8, 8, is_mpls);
    bv.set_bits(9, 9, is_mc);
    
    return bv;
}

void npl_tunnel_dlp_p_counter_offset_table_key_t::unpack(bit_vector64_t bv)
{
    fwd_header_type = (npl_fwd_header_type_e)bv.bits(3, 0).get_value();
    l3_encap_type = (npl_npu_encap_l3_header_type_e)bv.bits(7, 4).get_value();
    is_mpls = bv.bits(8, 8).get_value();
    is_mc = bv.bits(9, 9).get_value();
    
}

field_structure npl_tunnel_dlp_p_counter_offset_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tunnel_dlp_p_counter_offset_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("fwd_header_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(l3_encap_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_encap_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_mpls);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_mpls", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(is_mc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_mc", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_tunnel_dlp_p_counter_offset_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_tunnel_dlp_p_counter_offset_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_tunnel_dlp_p_counter_offset_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_TUNNEL_DLP_P_COUNTER_OFFSET_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.cntr_offset.pack());
    }
    
    return bv;
}


void npl_tunnel_dlp_p_counter_offset_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_tunnel_dlp_p_counter_offset_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_TUNNEL_DLP_P_COUNTER_OFFSET_TABLE_ACTION_WRITE) {
        payloads.cntr_offset.unpack(bv.bits(2, 0));
    }
    
}


field_structure npl_tunnel_dlp_p_counter_offset_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tunnel_dlp_p_counter_offset_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_tunnel_dlp_p_counter_offset_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TUNNEL_DLP_P_COUNTER_OFFSET_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.cntr_offset", payloads.cntr_offset.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_tunnel_dlp_p_counter_offset_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tunnel_dlp_p_counter_offset_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tunnel_qos_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(0, 0, l3_dlp_is_group_qos);
    bv.set_bits(1, 1, lp_set);
    
    return bv;
}

void npl_tunnel_qos_static_table_key_t::unpack(bit_vector64_t bv)
{
    l3_dlp_is_group_qos = bv.bits(0, 0).get_value();
    lp_set = bv.bits(1, 1).get_value();
    
}

field_structure npl_tunnel_qos_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tunnel_qos_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(l3_dlp_is_group_qos);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l3_dlp_is_group_qos", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(lp_set);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("lp_set", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_tunnel_qos_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_tunnel_qos_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_tunnel_qos_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(7, 0, action);
    
    return bv;
}


void npl_tunnel_qos_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_tunnel_qos_static_table_action_e)bv.bits(7, 0).get_value();
    
}


field_structure npl_tunnel_qos_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tunnel_qos_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_tunnel_qos_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_tunnel_qos_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tunnel_qos_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tx_counters_block_config_table_config_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    bv.set_bits(3, 3, inc_bank_for_ifg_b);
    bv.set_bits(2, 2, inc_addr_for_set);
    bv.set_bits(1, 0, bank_set_type);
    return bv;
}

void npl_tx_counters_block_config_table_config_payload_t::unpack(bit_vector64_t bv)
{
    inc_bank_for_ifg_b = bv.bits(3, 3).get_value();
    inc_addr_for_set = bv.bits(2, 2).get_value();
    bank_set_type = (npl_tx_counters_set_type_e)bv.bits(1, 0).get_value();
}

field_structure npl_tx_counters_block_config_table_config_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_counters_block_config_table_config_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(inc_bank_for_ifg_b);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("inc_bank_for_ifg_b", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(inc_addr_for_set);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("inc_addr_for_set", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(bank_set_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("bank_set_type", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_tx_counters_block_config_table_config_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tx_counters_block_config_table_config_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tx_counters_block_config_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 7);
    
    bv.set_bits(6, 0, counter_block_id);
    
    return bv;
}

void npl_tx_counters_block_config_table_key_t::unpack(bit_vector64_t bv)
{
    counter_block_id = bv.bits(6, 0).get_value();
    
}

field_structure npl_tx_counters_block_config_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_counters_block_config_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(counter_block_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("counter_block_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_tx_counters_block_config_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_tx_counters_block_config_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_tx_counters_block_config_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_TX_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_CONFIG) {
        bv.set_bits(3, 0, payloads.config.pack());
    }
    
    return bv;
}


void npl_tx_counters_block_config_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_tx_counters_block_config_table_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_TX_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_CONFIG) {
        payloads.config.unpack(bv.bits(3, 0));
    }
    
}


field_structure npl_tx_counters_block_config_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_counters_block_config_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_tx_counters_block_config_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TX_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_CONFIG) {
        fs_result.subfields.emplace_back("config", payloads.config.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_tx_counters_block_config_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tx_counters_block_config_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tx_error_handling_counter_table_update_result_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 20);
    bv.set_bits(19, 0, counter.pack());
    return bv;
}

void npl_tx_error_handling_counter_table_update_result_payload_t::unpack(bit_vector64_t bv)
{
    counter.unpack(bv.bits(19, 0));
}

field_structure npl_tx_error_handling_counter_table_update_result_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_error_handling_counter_table_update_result_payload_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("counter", counter.to_field_structure());
    return fs_result;
}
std::string to_string(npl_tx_error_handling_counter_table_update_result_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tx_error_handling_counter_table_update_result_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tx_error_handling_counter_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(4, 0, dest_pif);
    bv.set_bits(5, 5, ser);
    
    return bv;
}

void npl_tx_error_handling_counter_table_key_t::unpack(bit_vector64_t bv)
{
    dest_pif = bv.bits(4, 0).get_value();
    ser = bv.bits(5, 5).get_value();
    
}

field_structure npl_tx_error_handling_counter_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_error_handling_counter_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(dest_pif);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dest_pif", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ser);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ser", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_tx_error_handling_counter_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_tx_error_handling_counter_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_tx_error_handling_counter_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(27, 20, action);
    if (action == NPL_TX_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        bv.set_bits(19, 0, payloads.update_result.pack());
    }
    
    return bv;
}


void npl_tx_error_handling_counter_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_tx_error_handling_counter_table_action_e)bv.bits(27, 20).get_value();
    if (action == NPL_TX_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        payloads.update_result.unpack(bv.bits(19, 0));
    }
    
}


field_structure npl_tx_error_handling_counter_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_error_handling_counter_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_tx_error_handling_counter_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TX_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
        fs_result.subfields.emplace_back("update_result", payloads.update_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_tx_error_handling_counter_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tx_error_handling_counter_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector192_t npl_tx_punt_eth_encap_table_found_payload_t::pack(void) const
{
    bit_vector192_t bv(0, 129);
    bv.set_bits(128, 128, wide_bit);
    bv.set_bits(127, 124, eth_pcp_dei.pack());
    bv.set_bits(123, 0, punt_eth_or_npu_host_encap.pack());
    return bv;
}

void npl_tx_punt_eth_encap_table_found_payload_t::unpack(bit_vector192_t bv)
{
    wide_bit = bv.bits(128, 128).get_value();
    eth_pcp_dei.unpack(bv.bits(127, 124));
    punt_eth_or_npu_host_encap.unpack(bv.bits(123, 0));
}

field_structure npl_tx_punt_eth_encap_table_found_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_punt_eth_encap_table_found_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(wide_bit);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("wide_bit", fs_subfield);
    
    fs_result.subfields.emplace_back("eth_pcp_dei", eth_pcp_dei.to_field_structure());
    fs_result.subfields.emplace_back("punt_eth_or_npu_host_encap", punt_eth_or_npu_host_encap.to_field_structure());
    return fs_result;
}
std::string to_string(npl_tx_punt_eth_encap_table_found_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tx_punt_eth_encap_table_found_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tx_punt_eth_encap_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 9);
    
    bv.set_bits(8, 0, punt_encap);
    
    return bv;
}

void npl_tx_punt_eth_encap_table_key_t::unpack(bit_vector64_t bv)
{
    punt_encap = bv.bits(8, 0).get_value();
    
}

field_structure npl_tx_punt_eth_encap_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_punt_eth_encap_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(punt_encap);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("punt_encap", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_tx_punt_eth_encap_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_tx_punt_eth_encap_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_tx_punt_eth_encap_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(136, 129, action);
    if (action == NPL_TX_PUNT_ETH_ENCAP_TABLE_ACTION_FOUND) {
        bv.set_bits(128, 0, payloads.found.pack());
    }
    
    return bv;
}


void npl_tx_punt_eth_encap_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_tx_punt_eth_encap_table_action_e)bv.bits(136, 129).get_value();
    if (action == NPL_TX_PUNT_ETH_ENCAP_TABLE_ACTION_FOUND) {
        payloads.found.unpack(bv.bits(128, 0));
    }
    
}


field_structure npl_tx_punt_eth_encap_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_punt_eth_encap_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_tx_punt_eth_encap_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TX_PUNT_ETH_ENCAP_TABLE_ACTION_FOUND) {
        fs_result.subfields.emplace_back("found", payloads.found.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_tx_punt_eth_encap_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tx_punt_eth_encap_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tx_redirect_code_table_tx_redirect_action_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 40);
    bv.set_bits(39, 37, is_drop_action);
    bv.set_bits(36, 36, stamp_into_packet_header);
    bv.set_bits(35, 24, cntr_stamp_cmd.pack());
    bv.set_bits(23, 12, ts_cmd.pack());
    bv.set_bits(11, 0, tx_punt_nw_encap_ptr.pack());
    return bv;
}

void npl_tx_redirect_code_table_tx_redirect_action_payload_t::unpack(bit_vector64_t bv)
{
    is_drop_action = (npl_redirect_is_drop_action_e)bv.bits(39, 37).get_value();
    stamp_into_packet_header = (npl_stamp_on_headers_e)bv.bits(36, 36).get_value();
    cntr_stamp_cmd.unpack(bv.bits(35, 24));
    ts_cmd.unpack(bv.bits(23, 12));
    tx_punt_nw_encap_ptr.unpack(bv.bits(11, 0));
}

field_structure npl_tx_redirect_code_table_tx_redirect_action_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_redirect_code_table_tx_redirect_action_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_enum_to_string(is_drop_action);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_drop_action", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(stamp_into_packet_header);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("stamp_into_packet_header", fs_subfield);
    
    fs_result.subfields.emplace_back("cntr_stamp_cmd", cntr_stamp_cmd.to_field_structure());
    fs_result.subfields.emplace_back("ts_cmd", ts_cmd.to_field_structure());
    fs_result.subfields.emplace_back("tx_punt_nw_encap_ptr", tx_punt_nw_encap_ptr.to_field_structure());
    return fs_result;
}
std::string to_string(npl_tx_redirect_code_table_tx_redirect_action_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tx_redirect_code_table_tx_redirect_action_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_tx_redirect_code_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(7, 0, tx_redirect_code);
    
    return bv;
}

void npl_tx_redirect_code_table_key_t::unpack(bit_vector64_t bv)
{
    tx_redirect_code = bv.bits(7, 0).get_value();
    
}

field_structure npl_tx_redirect_code_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_redirect_code_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(tx_redirect_code);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("tx_redirect_code", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_tx_redirect_code_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_tx_redirect_code_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_tx_redirect_code_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(47, 40, action);
    if (action == NPL_TX_REDIRECT_CODE_TABLE_ACTION_TX_REDIRECT_ACTION) {
        bv.set_bits(39, 0, payloads.tx_redirect_action.pack());
    }
    
    return bv;
}


void npl_tx_redirect_code_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_tx_redirect_code_table_action_e)bv.bits(47, 40).get_value();
    if (action == NPL_TX_REDIRECT_CODE_TABLE_ACTION_TX_REDIRECT_ACTION) {
        payloads.tx_redirect_action.unpack(bv.bits(39, 0));
    }
    
}


field_structure npl_tx_redirect_code_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_tx_redirect_code_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_tx_redirect_code_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TX_REDIRECT_CODE_TABLE_ACTION_TX_REDIRECT_ACTION) {
        fs_result.subfields.emplace_back("tx_redirect_action", payloads.tx_redirect_action.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_tx_redirect_code_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_tx_redirect_code_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpdr_mc_list_size_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 16);
    
    bv.set_bits(15, 0, rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid);
    
    return bv;
}

void npl_txpdr_mc_list_size_table_key_t::unpack(bit_vector64_t bv)
{
    rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid = bv.bits(15, 0).get_value();
    
}

field_structure npl_txpdr_mc_list_size_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpdr_mc_list_size_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_txpdr_mc_list_size_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_txpdr_mc_list_size_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_txpdr_mc_list_size_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(18, 11, action);
    if (action == NPL_TXPDR_MC_LIST_SIZE_TABLE_ACTION_WRITE) {
        bv.set_bits(10, 0, payloads.txpdr_local_vars_mc_group_size);
    }
    
    return bv;
}


void npl_txpdr_mc_list_size_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_txpdr_mc_list_size_table_action_e)bv.bits(18, 11).get_value();
    if (action == NPL_TXPDR_MC_LIST_SIZE_TABLE_ACTION_WRITE) {
        payloads.txpdr_local_vars_mc_group_size = bv.bits(10, 0).get_value();
    }
    
}


field_structure npl_txpdr_mc_list_size_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpdr_mc_list_size_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_txpdr_mc_list_size_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TXPDR_MC_LIST_SIZE_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.txpdr_local_vars_mc_group_size);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.txpdr_local_vars_mc_group_size", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_txpdr_mc_list_size_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpdr_mc_list_size_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpdr_tc_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(2, 0, rxpp_pd_tc);
    bv.set_bits(5, 3, txpdr_local_vars_tc_map_profile);
    
    return bv;
}

void npl_txpdr_tc_map_table_key_t::unpack(bit_vector64_t bv)
{
    rxpp_pd_tc = bv.bits(2, 0).get_value();
    txpdr_local_vars_tc_map_profile = bv.bits(5, 3).get_value();
    
}

field_structure npl_txpdr_tc_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpdr_tc_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_pd_tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_pd_tc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(txpdr_local_vars_tc_map_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("txpdr_local_vars_tc_map_profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_txpdr_tc_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_txpdr_tc_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_txpdr_tc_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_TXPDR_TC_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.txpdr_local_vars_tc_offset);
    }
    
    return bv;
}


void npl_txpdr_tc_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_txpdr_tc_map_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_TXPDR_TC_MAP_TABLE_ACTION_WRITE) {
        payloads.txpdr_local_vars_tc_offset = bv.bits(2, 0).get_value();
    }
    
}


field_structure npl_txpdr_tc_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpdr_tc_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_txpdr_tc_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TXPDR_TC_MAP_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.txpdr_local_vars_tc_offset);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.txpdr_local_vars_tc_offset", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_txpdr_tc_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpdr_tc_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpp_dlp_profile_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 14);
    
    bv.set_bits(11, 0, txpp_dlp_profile_info_dlp_msbs_11_0);
    bv.set_bits(13, 12, txpp_dlp_profile_info_dlp_msbs_13_12);
    
    return bv;
}

void npl_txpp_dlp_profile_table_key_t::unpack(bit_vector64_t bv)
{
    txpp_dlp_profile_info_dlp_msbs_11_0 = bv.bits(11, 0).get_value();
    txpp_dlp_profile_info_dlp_msbs_13_12 = bv.bits(13, 12).get_value();
    
}

field_structure npl_txpp_dlp_profile_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_dlp_profile_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(txpp_dlp_profile_info_dlp_msbs_11_0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("txpp_dlp_profile_info_dlp_msbs_11_0", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(txpp_dlp_profile_info_dlp_msbs_13_12);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("txpp_dlp_profile_info_dlp_msbs_13_12", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_txpp_dlp_profile_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_txpp_dlp_profile_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_txpp_dlp_profile_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(15, 8, action);
    if (action == NPL_TXPP_DLP_PROFILE_TABLE_ACTION_WRITE) {
        bv.set_bits(7, 0, payloads.pd_tx_dlp_profile.pack());
    }
    
    return bv;
}


void npl_txpp_dlp_profile_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_txpp_dlp_profile_table_action_e)bv.bits(15, 8).get_value();
    if (action == NPL_TXPP_DLP_PROFILE_TABLE_ACTION_WRITE) {
        payloads.pd_tx_dlp_profile.unpack(bv.bits(7, 0));
    }
    
}


field_structure npl_txpp_dlp_profile_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_dlp_profile_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_txpp_dlp_profile_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TXPP_DLP_PROFILE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.pd_tx_dlp_profile", payloads.pd_tx_dlp_profile.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_txpp_dlp_profile_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpp_dlp_profile_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpp_encap_qos_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(6, 0, packet_protocol_layer_none__tx_npu_header_encap_qos_tag);
    bv.set_bits(8, 7, pd_tx_out_color);
    bv.set_bits(12, 9, packet_protocol_layer_none__tx_npu_header_slp_qos_id);
    
    return bv;
}

void npl_txpp_encap_qos_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    packet_protocol_layer_none__tx_npu_header_encap_qos_tag = bv.bits(6, 0).get_value();
    pd_tx_out_color = bv.bits(8, 7).get_value();
    packet_protocol_layer_none__tx_npu_header_slp_qos_id = bv.bits(12, 9).get_value();
    
}

field_structure npl_txpp_encap_qos_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_encap_qos_mapping_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(packet_protocol_layer_none__tx_npu_header_encap_qos_tag);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_protocol_layer_none__tx_npu_header_encap_qos_tag", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pd_tx_out_color);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_tx_out_color", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(packet_protocol_layer_none__tx_npu_header_slp_qos_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_protocol_layer_none__tx_npu_header_slp_qos_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_txpp_encap_qos_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_txpp_encap_qos_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_txpp_encap_qos_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(14, 7, action);
    if (action == NPL_TXPP_ENCAP_QOS_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(6, 0, payloads.txpp_npu_header_encap_qos_tag);
    }
    
    return bv;
}


void npl_txpp_encap_qos_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_txpp_encap_qos_mapping_table_action_e)bv.bits(14, 7).get_value();
    if (action == NPL_TXPP_ENCAP_QOS_MAPPING_TABLE_ACTION_WRITE) {
        payloads.txpp_npu_header_encap_qos_tag = bv.bits(6, 0).get_value();
    }
    
}


field_structure npl_txpp_encap_qos_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_encap_qos_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_txpp_encap_qos_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TXPP_ENCAP_QOS_MAPPING_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.txpp_npu_header_encap_qos_tag);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.txpp_npu_header_encap_qos_tag", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_txpp_encap_qos_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpp_encap_qos_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpp_first_enc_type_to_second_enc_type_offset_key_t::pack(void) const
{
    bit_vector64_t bv(0, 4);
    
    bv.set_bits(3, 0, packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_);
    
    return bv;
}

void npl_txpp_first_enc_type_to_second_enc_type_offset_key_t::unpack(bit_vector64_t bv)
{
    packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_ = bv.bits(3, 0).get_value();
    
}

field_structure npl_txpp_first_enc_type_to_second_enc_type_offset_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_first_enc_type_to_second_enc_type_offset_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_txpp_first_enc_type_to_second_enc_type_offset_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_txpp_first_enc_type_to_second_enc_type_offset_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_txpp_first_enc_type_to_second_enc_type_offset_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_TXPP_FIRST_ENC_TYPE_TO_SECOND_ENC_TYPE_OFFSET_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.txpp_first_encap_is_wide.pack());
    }
    
    return bv;
}


void npl_txpp_first_enc_type_to_second_enc_type_offset_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_txpp_first_enc_type_to_second_enc_type_offset_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_TXPP_FIRST_ENC_TYPE_TO_SECOND_ENC_TYPE_OFFSET_ACTION_WRITE) {
        payloads.txpp_first_encap_is_wide.unpack(bv.bits(0, 0));
    }
    
}


field_structure npl_txpp_first_enc_type_to_second_enc_type_offset_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_first_enc_type_to_second_enc_type_offset_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_txpp_first_enc_type_to_second_enc_type_offset_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TXPP_FIRST_ENC_TYPE_TO_SECOND_ENC_TYPE_OFFSET_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.txpp_first_encap_is_wide", payloads.txpp_first_encap_is_wide.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_txpp_first_enc_type_to_second_enc_type_offset_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpp_first_enc_type_to_second_enc_type_offset_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpp_fwd_header_type_is_l2_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 8);
    
    bv.set_bits(3, 0, packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_);
    bv.set_bits(7, 4, packet_protocol_layer_0__tx_npu_header_fwd_header_type);
    
    return bv;
}

void npl_txpp_fwd_header_type_is_l2_table_key_t::unpack(bit_vector64_t bv)
{
    packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_ = bv.bits(3, 0).get_value();
    packet_protocol_layer_0__tx_npu_header_fwd_header_type = (npl_fwd_header_type_e)bv.bits(7, 4).get_value();
    
}

field_structure npl_txpp_fwd_header_type_is_l2_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_fwd_header_type_is_l2_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(packet_protocol_layer_0__tx_npu_header_fwd_header_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_protocol_layer_0__tx_npu_header_fwd_header_type", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_txpp_fwd_header_type_is_l2_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_txpp_fwd_header_type_is_l2_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_txpp_fwd_header_type_is_l2_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_TXPP_FWD_HEADER_TYPE_IS_L2_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.txpp_dlp_profile_info_fwd_header_type_is_l2);
    }
    
    return bv;
}


void npl_txpp_fwd_header_type_is_l2_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_txpp_fwd_header_type_is_l2_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_TXPP_FWD_HEADER_TYPE_IS_L2_TABLE_ACTION_WRITE) {
        payloads.txpp_dlp_profile_info_fwd_header_type_is_l2 = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_txpp_fwd_header_type_is_l2_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_fwd_header_type_is_l2_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_txpp_fwd_header_type_is_l2_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TXPP_FWD_HEADER_TYPE_IS_L2_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.txpp_dlp_profile_info_fwd_header_type_is_l2);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.txpp_dlp_profile_info_fwd_header_type_is_l2", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_txpp_fwd_header_type_is_l2_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpp_fwd_header_type_is_l2_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpp_fwd_qos_mapping_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(6, 0, packet_protocol_layer_none__tx_npu_header_fwd_qos_tag);
    bv.set_bits(8, 7, pd_tx_out_color);
    bv.set_bits(12, 9, packet_protocol_layer_none__tx_npu_header_slp_qos_id);
    
    return bv;
}

void npl_txpp_fwd_qos_mapping_table_key_t::unpack(bit_vector64_t bv)
{
    packet_protocol_layer_none__tx_npu_header_fwd_qos_tag = bv.bits(6, 0).get_value();
    pd_tx_out_color = bv.bits(8, 7).get_value();
    packet_protocol_layer_none__tx_npu_header_slp_qos_id = bv.bits(12, 9).get_value();
    
}

field_structure npl_txpp_fwd_qos_mapping_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_fwd_qos_mapping_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(packet_protocol_layer_none__tx_npu_header_fwd_qos_tag);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_protocol_layer_none__tx_npu_header_fwd_qos_tag", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pd_tx_out_color);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_tx_out_color", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(packet_protocol_layer_none__tx_npu_header_slp_qos_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("packet_protocol_layer_none__tx_npu_header_slp_qos_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_txpp_fwd_qos_mapping_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_txpp_fwd_qos_mapping_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_txpp_fwd_qos_mapping_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(14, 7, action);
    if (action == NPL_TXPP_FWD_QOS_MAPPING_TABLE_ACTION_WRITE) {
        bv.set_bits(6, 0, payloads.txpp_npu_header_fwd_qos_tag);
    }
    
    return bv;
}


void npl_txpp_fwd_qos_mapping_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_txpp_fwd_qos_mapping_table_action_e)bv.bits(14, 7).get_value();
    if (action == NPL_TXPP_FWD_QOS_MAPPING_TABLE_ACTION_WRITE) {
        payloads.txpp_npu_header_fwd_qos_tag = bv.bits(6, 0).get_value();
    }
    
}


field_structure npl_txpp_fwd_qos_mapping_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_fwd_qos_mapping_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_txpp_fwd_qos_mapping_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TXPP_FWD_QOS_MAPPING_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.txpp_npu_header_fwd_qos_tag);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.txpp_npu_header_fwd_qos_tag", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_txpp_fwd_qos_mapping_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpp_fwd_qos_mapping_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpp_ibm_enables_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 1);
    
    bv.set_bits(0, 0, 0x0);
    
    return bv;
}

void npl_txpp_ibm_enables_table_key_t::unpack(bit_vector64_t bv)
{
    
    
}

field_structure npl_txpp_ibm_enables_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_ibm_enables_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(0x0);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("0x0", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_txpp_ibm_enables_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_txpp_ibm_enables_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector192_t npl_txpp_ibm_enables_table_value_t::pack(void) const
{
    bit_vector192_t bv;
    bv.set_bits(166, 159, action);
    if (action == NPL_TXPP_IBM_ENABLES_TABLE_ACTION_WRITE) {
        bv.set_bits(158, 0, payloads.ibm_enables_table_result.pack());
    }
    
    return bv;
}


void npl_txpp_ibm_enables_table_value_t::unpack(bit_vector192_t bv)
{
    action = (npl_txpp_ibm_enables_table_action_e)bv.bits(166, 159).get_value();
    if (action == NPL_TXPP_IBM_ENABLES_TABLE_ACTION_WRITE) {
        payloads.ibm_enables_table_result.unpack(bv.bits(158, 0));
    }
    
}


field_structure npl_txpp_ibm_enables_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_ibm_enables_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_txpp_ibm_enables_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TXPP_IBM_ENABLES_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.ibm_enables_table_result", payloads.ibm_enables_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_txpp_ibm_enables_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpp_ibm_enables_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpp_initial_npe_macro_table_init_tx_data_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    bv.set_bits(5, 0, np_macro_id);
    return bv;
}

void npl_txpp_initial_npe_macro_table_init_tx_data_payload_t::unpack(bit_vector64_t bv)
{
    np_macro_id = bv.bits(5, 0).get_value();
}

field_structure npl_txpp_initial_npe_macro_table_init_tx_data_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_initial_npe_macro_table_init_tx_data_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(np_macro_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("np_macro_id", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_txpp_initial_npe_macro_table_init_tx_data_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpp_initial_npe_macro_table_init_tx_data_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpp_initial_npe_macro_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    
    bv.set_bits(12, 0, txpp_first_macro_table_key.pack());
    
    return bv;
}

void npl_txpp_initial_npe_macro_table_key_t::unpack(bit_vector64_t bv)
{
    txpp_first_macro_table_key.unpack(bv.bits(12, 0));
    
}

field_structure npl_txpp_initial_npe_macro_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_initial_npe_macro_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("txpp_first_macro_table_key", txpp_first_macro_table_key.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_txpp_initial_npe_macro_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_txpp_initial_npe_macro_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_txpp_initial_npe_macro_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(13, 6, action);
    if (action == NPL_TXPP_INITIAL_NPE_MACRO_TABLE_ACTION_INIT_TX_DATA) {
        bv.set_bits(5, 0, payloads.init_tx_data.pack());
    }
    
    return bv;
}


void npl_txpp_initial_npe_macro_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_txpp_initial_npe_macro_table_action_e)bv.bits(13, 6).get_value();
    if (action == NPL_TXPP_INITIAL_NPE_MACRO_TABLE_ACTION_INIT_TX_DATA) {
        payloads.init_tx_data.unpack(bv.bits(5, 0));
    }
    
}


field_structure npl_txpp_initial_npe_macro_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_initial_npe_macro_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_txpp_initial_npe_macro_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TXPP_INITIAL_NPE_MACRO_TABLE_ACTION_INIT_TX_DATA) {
        fs_result.subfields.emplace_back("init_tx_data", payloads.init_tx_data.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_txpp_initial_npe_macro_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpp_initial_npe_macro_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_txpp_mapping_qos_tag_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    
    bv.set_bits(3, 0, qos_id);
    bv.set_bits(10, 4, qos_tag);
    
    return bv;
}

void npl_txpp_mapping_qos_tag_table_key_t::unpack(bit_vector64_t bv)
{
    qos_id = bv.bits(3, 0).get_value();
    qos_tag = bv.bits(10, 4).get_value();
    
}

field_structure npl_txpp_mapping_qos_tag_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_mapping_qos_tag_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(qos_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("qos_id", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(qos_tag);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("qos_tag", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_txpp_mapping_qos_tag_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_txpp_mapping_qos_tag_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_txpp_mapping_qos_tag_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(37, 30, action);
    if (action == NPL_TXPP_MAPPING_QOS_TAG_TABLE_ACTION_WRITE) {
        bv.set_bits(29, 0, payloads.egress_qos_result.pack());
    }
    
    return bv;
}


void npl_txpp_mapping_qos_tag_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_txpp_mapping_qos_tag_table_action_e)bv.bits(37, 30).get_value();
    if (action == NPL_TXPP_MAPPING_QOS_TAG_TABLE_ACTION_WRITE) {
        payloads.egress_qos_result.unpack(bv.bits(29, 0));
    }
    
}


field_structure npl_txpp_mapping_qos_tag_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_txpp_mapping_qos_tag_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_txpp_mapping_qos_tag_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_TXPP_MAPPING_QOS_TAG_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.egress_qos_result", payloads.egress_qos_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_txpp_mapping_qos_tag_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_txpp_mapping_qos_tag_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_uc_ibm_tc_map_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 6);
    
    bv.set_bits(2, 0, rxpp_pd_tc);
    bv.set_bits(5, 3, ibm_cmd_table_result_tc_map_profile);
    
    return bv;
}

void npl_uc_ibm_tc_map_table_key_t::unpack(bit_vector64_t bv)
{
    rxpp_pd_tc = bv.bits(2, 0).get_value();
    ibm_cmd_table_result_tc_map_profile = bv.bits(5, 3).get_value();
    
}

field_structure npl_uc_ibm_tc_map_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_uc_ibm_tc_map_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(rxpp_pd_tc);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("rxpp_pd_tc", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(ibm_cmd_table_result_tc_map_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ibm_cmd_table_result_tc_map_profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_uc_ibm_tc_map_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_uc_ibm_tc_map_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_uc_ibm_tc_map_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(11, 4, action);
    if (action == NPL_UC_IBM_TC_MAP_TABLE_ACTION_WRITE) {
        bv.set_bits(3, 0, payloads.rxpdr_ibm_tc_map_result.pack());
    }
    
    return bv;
}


void npl_uc_ibm_tc_map_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_uc_ibm_tc_map_table_action_e)bv.bits(11, 4).get_value();
    if (action == NPL_UC_IBM_TC_MAP_TABLE_ACTION_WRITE) {
        payloads.rxpdr_ibm_tc_map_result.unpack(bv.bits(3, 0));
    }
    
}


field_structure npl_uc_ibm_tc_map_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_uc_ibm_tc_map_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_uc_ibm_tc_map_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_UC_IBM_TC_MAP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.rxpdr_ibm_tc_map_result", payloads.rxpdr_ibm_tc_map_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_uc_ibm_tc_map_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_uc_ibm_tc_map_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_urpf_ipsa_dest_is_lpts_static_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, ipsa_dest_prefix);
    
    return bv;
}

void npl_urpf_ipsa_dest_is_lpts_static_table_key_t::unpack(bit_vector64_t bv)
{
    ipsa_dest_prefix = bv.bits(4, 0).get_value();
    
}

field_structure npl_urpf_ipsa_dest_is_lpts_static_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_urpf_ipsa_dest_is_lpts_static_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(ipsa_dest_prefix);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("ipsa_dest_prefix", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_urpf_ipsa_dest_is_lpts_static_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_urpf_ipsa_dest_is_lpts_static_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_urpf_ipsa_dest_is_lpts_static_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(8, 1, action);
    if (action == NPL_URPF_IPSA_DEST_IS_LPTS_STATIC_TABLE_ACTION_WRITE) {
        bv.set_bits(0, 0, payloads.is_lpts_prefix);
    }
    
    return bv;
}


void npl_urpf_ipsa_dest_is_lpts_static_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_urpf_ipsa_dest_is_lpts_static_table_action_e)bv.bits(8, 1).get_value();
    if (action == NPL_URPF_IPSA_DEST_IS_LPTS_STATIC_TABLE_ACTION_WRITE) {
        payloads.is_lpts_prefix = bv.bits(0, 0).get_value();
    }
    
}


field_structure npl_urpf_ipsa_dest_is_lpts_static_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_urpf_ipsa_dest_is_lpts_static_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_urpf_ipsa_dest_is_lpts_static_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_URPF_IPSA_DEST_IS_LPTS_STATIC_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.is_lpts_prefix);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.is_lpts_prefix", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_urpf_ipsa_dest_is_lpts_static_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_urpf_ipsa_dest_is_lpts_static_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_vlan_edit_tpid1_profile_hw_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, vlan_edit_info_tpid_profile);
    
    return bv;
}

void npl_vlan_edit_tpid1_profile_hw_table_key_t::unpack(bit_vector64_t bv)
{
    vlan_edit_info_tpid_profile = bv.bits(1, 0).get_value();
    
}

field_structure npl_vlan_edit_tpid1_profile_hw_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vlan_edit_tpid1_profile_hw_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(vlan_edit_info_tpid_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vlan_edit_info_tpid_profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_vlan_edit_tpid1_profile_hw_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_vlan_edit_tpid1_profile_hw_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_vlan_edit_tpid1_profile_hw_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_VLAN_EDIT_TPID1_PROFILE_HW_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.vlan_edit_info_tpid1);
    }
    
    return bv;
}


void npl_vlan_edit_tpid1_profile_hw_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_vlan_edit_tpid1_profile_hw_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_VLAN_EDIT_TPID1_PROFILE_HW_TABLE_ACTION_WRITE) {
        payloads.vlan_edit_info_tpid1 = bv.bits(15, 0).get_value();
    }
    
}


field_structure npl_vlan_edit_tpid1_profile_hw_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vlan_edit_tpid1_profile_hw_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_vlan_edit_tpid1_profile_hw_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VLAN_EDIT_TPID1_PROFILE_HW_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.vlan_edit_info_tpid1);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.vlan_edit_info_tpid1", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_vlan_edit_tpid1_profile_hw_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_vlan_edit_tpid1_profile_hw_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_vlan_edit_tpid2_profile_hw_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 2);
    
    bv.set_bits(1, 0, vlan_edit_info_tpid_profile);
    
    return bv;
}

void npl_vlan_edit_tpid2_profile_hw_table_key_t::unpack(bit_vector64_t bv)
{
    vlan_edit_info_tpid_profile = bv.bits(1, 0).get_value();
    
}

field_structure npl_vlan_edit_tpid2_profile_hw_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vlan_edit_tpid2_profile_hw_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(vlan_edit_info_tpid_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vlan_edit_info_tpid_profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_vlan_edit_tpid2_profile_hw_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_vlan_edit_tpid2_profile_hw_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_vlan_edit_tpid2_profile_hw_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(23, 16, action);
    if (action == NPL_VLAN_EDIT_TPID2_PROFILE_HW_TABLE_ACTION_WRITE) {
        bv.set_bits(15, 0, payloads.vlan_edit_info_tpid2);
    }
    
    return bv;
}


void npl_vlan_edit_tpid2_profile_hw_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_vlan_edit_tpid2_profile_hw_table_action_e)bv.bits(23, 16).get_value();
    if (action == NPL_VLAN_EDIT_TPID2_PROFILE_HW_TABLE_ACTION_WRITE) {
        payloads.vlan_edit_info_tpid2 = bv.bits(15, 0).get_value();
    }
    
}


field_structure npl_vlan_edit_tpid2_profile_hw_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vlan_edit_tpid2_profile_hw_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_vlan_edit_tpid2_profile_hw_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VLAN_EDIT_TPID2_PROFILE_HW_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.vlan_edit_info_tpid2);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.vlan_edit_info_tpid2", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_vlan_edit_tpid2_profile_hw_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_vlan_edit_tpid2_profile_hw_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_vlan_format_table_update_payload_t::pack(void) const
{
    bit_vector64_t bv(0, 13);
    bv.set_bits(12, 12, vid_from_port);
    bv.set_bits(11, 11, mac_termination_type);
    bv.set_bits(10, 7, sm_selector);
    bv.set_bits(6, 3, sm_logical_db);
    bv.set_bits(2, 2, pcp_dei_from_port);
    bv.set_bits(1, 1, dummy_bit);
    bv.set_bits(0, 0, enable_l3_qos);
    return bv;
}

void npl_vlan_format_table_update_payload_t::unpack(bit_vector64_t bv)
{
    vid_from_port = bv.bits(12, 12).get_value();
    mac_termination_type = (npl_mac_termination_type_e)bv.bits(11, 11).get_value();
    sm_selector = (npl_service_mapping_selector_e)bv.bits(10, 7).get_value();
    sm_logical_db = (npl_service_mapping_logical_db_e)bv.bits(6, 3).get_value();
    pcp_dei_from_port = bv.bits(2, 2).get_value();
    dummy_bit = bv.bits(1, 1).get_value();
    enable_l3_qos = bv.bits(0, 0).get_value();
}

field_structure npl_vlan_format_table_update_payload_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vlan_format_table_update_payload_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(vid_from_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vid_from_port", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(mac_termination_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("mac_termination_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(sm_selector);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sm_selector", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(sm_logical_db);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("sm_logical_db", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pcp_dei_from_port);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pcp_dei_from_port", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(dummy_bit);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("dummy_bit", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(enable_l3_qos);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("enable_l3_qos", fs_subfield);
    
    return fs_result;
}
std::string to_string(npl_vlan_format_table_update_payload_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_vlan_format_table_update_payload_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_vlan_format_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 15);
    
    bv.set_bits(0, 0, is_priority);
    bv.set_bits(5, 1, header_2_type);
    bv.set_bits(10, 6, header_1_type);
    bv.set_bits(14, 11, vlan_profile);
    
    return bv;
}

void npl_vlan_format_table_key_t::unpack(bit_vector64_t bv)
{
    is_priority = bv.bits(0, 0).get_value();
    header_2_type = (npl_protocol_type_e)bv.bits(5, 1).get_value();
    header_1_type = (npl_protocol_type_e)bv.bits(10, 6).get_value();
    vlan_profile = bv.bits(14, 11).get_value();
    
}

field_structure npl_vlan_format_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vlan_format_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(is_priority);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("is_priority", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(header_2_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("header_2_type", fs_subfield);
    
    fs_subfield.flat_value = npl_enum_to_string(header_1_type);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("header_1_type", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(vlan_profile);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vlan_profile", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_vlan_format_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_vlan_format_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_vlan_format_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(20, 13, action);
    if (action == NPL_VLAN_FORMAT_TABLE_ACTION_UPDATE) {
        bv.set_bits(12, 0, payloads.update.pack());
    }
    
    return bv;
}


void npl_vlan_format_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_vlan_format_table_action_e)bv.bits(20, 13).get_value();
    if (action == NPL_VLAN_FORMAT_TABLE_ACTION_UPDATE) {
        payloads.update.unpack(bv.bits(12, 0));
    }
    
}


field_structure npl_vlan_format_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vlan_format_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_vlan_format_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VLAN_FORMAT_TABLE_ACTION_UPDATE) {
        fs_result.subfields.emplace_back("update", payloads.update.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_vlan_format_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_vlan_format_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_vni_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 24);
    
    bv.set_bits(23, 0, vni);
    
    return bv;
}

void npl_vni_table_key_t::unpack(bit_vector64_t bv)
{
    vni = bv.bits(23, 0).get_value();
    
}

field_structure npl_vni_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vni_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(vni);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vni", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_vni_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_vni_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_vni_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(45, 38, action);
    if (action == NPL_VNI_TABLE_ACTION_WRITE) {
        bv.set_bits(37, 0, payloads.vni_table_result.pack());
    }
    
    return bv;
}


void npl_vni_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_vni_table_action_e)bv.bits(45, 38).get_value();
    if (action == NPL_VNI_TABLE_ACTION_WRITE) {
        payloads.vni_table_result.unpack(bv.bits(37, 0));
    }
    
}


field_structure npl_vni_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vni_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_vni_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VNI_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.vni_table_result", payloads.vni_table_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_vni_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_vni_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 11);
    
    bv.set_bits(2, 0, buffer_voq_size_level);
    bv.set_bits(4, 3, buffer_pool_available_level);
    bv.set_bits(5, 5, free_dram_cntx);
    bv.set_bits(10, 6, profile_id.pack());
    
    return bv;
}

void npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_key_t::unpack(bit_vector64_t bv)
{
    buffer_voq_size_level = bv.bits(2, 0).get_value();
    buffer_pool_available_level = bv.bits(4, 3).get_value();
    free_dram_cntx = bv.bits(5, 5).get_value();
    profile_id.unpack(bv.bits(10, 6));
    
}

field_structure npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(buffer_voq_size_level);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("buffer_voq_size_level", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(buffer_pool_available_level);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("buffer_pool_available_level", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(free_dram_cntx);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("free_dram_cntx", fs_subfield);
    
    fs_result.subfields.emplace_back("profile_id", profile_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_VOQ_CGM_SLICE_BUFFERS_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.pack());
    }
    
    return bv;
}


void npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_VOQ_CGM_SLICE_BUFFERS_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE) {
        payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VOQ_CGM_SLICE_BUFFERS_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result", payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_voq_cgm_slice_dram_cgm_profile_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, profile_id.pack());
    
    return bv;
}

void npl_voq_cgm_slice_dram_cgm_profile_table_key_t::unpack(bit_vector64_t bv)
{
    profile_id.unpack(bv.bits(4, 0));
    
}

field_structure npl_voq_cgm_slice_dram_cgm_profile_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_dram_cgm_profile_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("profile_id", profile_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_dram_cgm_profile_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_voq_cgm_slice_dram_cgm_profile_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_voq_cgm_slice_dram_cgm_profile_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(113, 106, action);
    if (action == NPL_VOQ_CGM_SLICE_DRAM_CGM_PROFILE_TABLE_ACTION_WRITE) {
        bv.set_bits(105, 0, payloads.voq_cgm_slice_dram_cgm_profile_result.pack());
    }
    
    return bv;
}


void npl_voq_cgm_slice_dram_cgm_profile_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_voq_cgm_slice_dram_cgm_profile_table_action_e)bv.bits(113, 106).get_value();
    if (action == NPL_VOQ_CGM_SLICE_DRAM_CGM_PROFILE_TABLE_ACTION_WRITE) {
        payloads.voq_cgm_slice_dram_cgm_profile_result.unpack(bv.bits(105, 0));
    }
    
}


field_structure npl_voq_cgm_slice_dram_cgm_profile_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_dram_cgm_profile_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_voq_cgm_slice_dram_cgm_profile_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VOQ_CGM_SLICE_DRAM_CGM_PROFILE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.voq_cgm_slice_dram_cgm_profile_result", payloads.voq_cgm_slice_dram_cgm_profile_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_dram_cgm_profile_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_voq_cgm_slice_dram_cgm_profile_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 10);
    
    bv.set_bits(2, 0, pd_voq_fill_level);
    bv.set_bits(4, 3, pd_pool_available_level);
    bv.set_bits(9, 5, profile_id.pack());
    
    return bv;
}

void npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_key_t::unpack(bit_vector64_t bv)
{
    pd_voq_fill_level = bv.bits(2, 0).get_value();
    pd_pool_available_level = bv.bits(4, 3).get_value();
    profile_id.unpack(bv.bits(9, 5));
    
}

field_structure npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(pd_voq_fill_level);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_voq_fill_level", fs_subfield);
    
    fs_subfield.flat_value = to_hex_string(pd_pool_available_level);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("pd_pool_available_level", fs_subfield);
    
    fs_result.subfields.emplace_back("profile_id", profile_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(71, 64, action);
    if (action == NPL_VOQ_CGM_SLICE_PD_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE) {
        bv.set_bits(63, 0, payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.pack());
    }
    
    return bv;
}


void npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_action_e)bv.bits(71, 64).get_value();
    if (action == NPL_VOQ_CGM_SLICE_PD_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE) {
        payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.unpack(bv.bits(63, 0));
    }
    
}


field_structure npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VOQ_CGM_SLICE_PD_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result", payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_voq_cgm_slice_profile_buff_region_thresholds_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, profile_id.pack());
    
    return bv;
}

void npl_voq_cgm_slice_profile_buff_region_thresholds_table_key_t::unpack(bit_vector64_t bv)
{
    profile_id.unpack(bv.bits(4, 0));
    
}

field_structure npl_voq_cgm_slice_profile_buff_region_thresholds_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_profile_buff_region_thresholds_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("profile_id", profile_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_profile_buff_region_thresholds_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_voq_cgm_slice_profile_buff_region_thresholds_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_voq_cgm_slice_profile_buff_region_thresholds_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(105, 98, action);
    if (action == NPL_VOQ_CGM_SLICE_PROFILE_BUFF_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
        bv.set_bits(97, 0, payloads.voq_cgm_slice_profile_buff_region_thresholds_results.pack());
    }
    
    return bv;
}


void npl_voq_cgm_slice_profile_buff_region_thresholds_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_voq_cgm_slice_profile_buff_region_thresholds_table_action_e)bv.bits(105, 98).get_value();
    if (action == NPL_VOQ_CGM_SLICE_PROFILE_BUFF_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
        payloads.voq_cgm_slice_profile_buff_region_thresholds_results.unpack(bv.bits(97, 0));
    }
    
}


field_structure npl_voq_cgm_slice_profile_buff_region_thresholds_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_profile_buff_region_thresholds_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_voq_cgm_slice_profile_buff_region_thresholds_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VOQ_CGM_SLICE_PROFILE_BUFF_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.voq_cgm_slice_profile_buff_region_thresholds_results", payloads.voq_cgm_slice_profile_buff_region_thresholds_results.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_profile_buff_region_thresholds_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_voq_cgm_slice_profile_buff_region_thresholds_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, profile_id.pack());
    
    return bv;
}

void npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_key_t::unpack(bit_vector64_t bv)
{
    profile_id.unpack(bv.bits(4, 0));
    
}

field_structure npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("profile_id", profile_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(127, 120, action);
    if (action == NPL_VOQ_CGM_SLICE_PROFILE_PKT_ENQ_TIME_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
        bv.set_bits(119, 0, payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pack());
    }
    
    return bv;
}


void npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_action_e)bv.bits(127, 120).get_value();
    if (action == NPL_VOQ_CGM_SLICE_PROFILE_PKT_ENQ_TIME_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
        payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.unpack(bv.bits(119, 0));
    }
    
}


field_structure npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VOQ_CGM_SLICE_PROFILE_PKT_ENQ_TIME_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results", payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_voq_cgm_slice_profile_pkt_region_thresholds_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, profile_id.pack());
    
    return bv;
}

void npl_voq_cgm_slice_profile_pkt_region_thresholds_table_key_t::unpack(bit_vector64_t bv)
{
    profile_id.unpack(bv.bits(4, 0));
    
}

field_structure npl_voq_cgm_slice_profile_pkt_region_thresholds_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_profile_pkt_region_thresholds_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("profile_id", profile_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_profile_pkt_region_thresholds_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_voq_cgm_slice_profile_pkt_region_thresholds_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_voq_cgm_slice_profile_pkt_region_thresholds_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(105, 98, action);
    if (action == NPL_VOQ_CGM_SLICE_PROFILE_PKT_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
        bv.set_bits(97, 0, payloads.voq_cgm_slice_profile_pkt_region_thresholds_results.pack());
    }
    
    return bv;
}


void npl_voq_cgm_slice_profile_pkt_region_thresholds_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_voq_cgm_slice_profile_pkt_region_thresholds_table_action_e)bv.bits(105, 98).get_value();
    if (action == NPL_VOQ_CGM_SLICE_PROFILE_PKT_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
        payloads.voq_cgm_slice_profile_pkt_region_thresholds_results.unpack(bv.bits(97, 0));
    }
    
}


field_structure npl_voq_cgm_slice_profile_pkt_region_thresholds_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_profile_pkt_region_thresholds_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_voq_cgm_slice_profile_pkt_region_thresholds_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VOQ_CGM_SLICE_PROFILE_PKT_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.voq_cgm_slice_profile_pkt_region_thresholds_results", payloads.voq_cgm_slice_profile_pkt_region_thresholds_results.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_profile_pkt_region_thresholds_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_voq_cgm_slice_profile_pkt_region_thresholds_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_voq_cgm_slice_slice_cgm_profile_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 5);
    
    bv.set_bits(4, 0, profile_id.pack());
    
    return bv;
}

void npl_voq_cgm_slice_slice_cgm_profile_table_key_t::unpack(bit_vector64_t bv)
{
    profile_id.unpack(bv.bits(4, 0));
    
}

field_structure npl_voq_cgm_slice_slice_cgm_profile_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_slice_cgm_profile_table_key_t";
    field_structure fs_subfield;
    fs_result.subfields.emplace_back("profile_id", profile_id.to_field_structure());
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_slice_cgm_profile_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_voq_cgm_slice_slice_cgm_profile_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_voq_cgm_slice_slice_cgm_profile_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(10, 3, action);
    if (action == NPL_VOQ_CGM_SLICE_SLICE_CGM_PROFILE_TABLE_ACTION_WRITE) {
        bv.set_bits(2, 0, payloads.voq_cgm_slice_slice_cgm_profile_result.pack());
    }
    
    return bv;
}


void npl_voq_cgm_slice_slice_cgm_profile_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_voq_cgm_slice_slice_cgm_profile_table_action_e)bv.bits(10, 3).get_value();
    if (action == NPL_VOQ_CGM_SLICE_SLICE_CGM_PROFILE_TABLE_ACTION_WRITE) {
        payloads.voq_cgm_slice_slice_cgm_profile_result.unpack(bv.bits(2, 0));
    }
    
}


field_structure npl_voq_cgm_slice_slice_cgm_profile_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_voq_cgm_slice_slice_cgm_profile_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_voq_cgm_slice_slice_cgm_profile_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VOQ_CGM_SLICE_SLICE_CGM_PROFILE_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.voq_cgm_slice_slice_cgm_profile_result", payloads.voq_cgm_slice_slice_cgm_profile_result.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_voq_cgm_slice_slice_cgm_profile_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_voq_cgm_slice_slice_cgm_profile_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_vsid_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 24);
    
    bv.set_bits(23, 0, vsid);
    
    return bv;
}

void npl_vsid_table_key_t::unpack(bit_vector64_t bv)
{
    vsid = bv.bits(23, 0).get_value();
    
}

field_structure npl_vsid_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vsid_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(vsid);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("vsid", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_vsid_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_vsid_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector64_t npl_vsid_table_value_t::pack(void) const
{
    bit_vector64_t bv;
    bv.set_bits(21, 14, action);
    if (action == NPL_VSID_TABLE_ACTION_WRITE) {
        bv.set_bits(13, 0, payloads.l2_relay_attributes_id);
    }
    
    return bv;
}


void npl_vsid_table_value_t::unpack(bit_vector64_t bv)
{
    action = (npl_vsid_table_action_e)bv.bits(21, 14).get_value();
    if (action == NPL_VSID_TABLE_ACTION_WRITE) {
        payloads.l2_relay_attributes_id = bv.bits(13, 0).get_value();
    }
    
}


field_structure npl_vsid_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vsid_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_vsid_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VSID_TABLE_ACTION_WRITE) {
        fs_subfield.flat_value = to_hex_string(payloads.l2_relay_attributes_id);
        fs_subfield.field_type = "int";
        fs_result.subfields.emplace_back("payloads.l2_relay_attributes_id", fs_subfield);
        
    }
    
    return fs_result;
}
std::string to_string(npl_vsid_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_vsid_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

bit_vector64_t npl_vxlan_l2_dlp_table_key_t::pack(void) const
{
    bit_vector64_t bv(0, 18);
    
    bv.set_bits(17, 0, l2_dlp_id_key_id);
    
    return bv;
}

void npl_vxlan_l2_dlp_table_key_t::unpack(bit_vector64_t bv)
{
    l2_dlp_id_key_id = bv.bits(17, 0).get_value();
    
}

field_structure npl_vxlan_l2_dlp_table_key_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vxlan_l2_dlp_table_key_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = to_hex_string(l2_dlp_id_key_id);
    fs_subfield.field_type = "int";
    fs_result.subfields.emplace_back("l2_dlp_id_key_id", fs_subfield);
    
    
    return fs_result;
}
std::string to_string(npl_vxlan_l2_dlp_table_key_t element)
{
    return to_string(element.to_field_structure());
}

std::string to_short_string(npl_vxlan_l2_dlp_table_key_t element)
{
    return to_short_string(element.to_field_structure());
}


bit_vector128_t npl_vxlan_l2_dlp_table_value_t::pack(void) const
{
    bit_vector128_t bv;
    bv.set_bits(82, 75, action);
    if (action == NPL_VXLAN_L2_DLP_TABLE_ACTION_WRITE) {
        bv.set_bits(74, 0, payloads.vxlan_tunnel_attributes.pack());
    }
    
    return bv;
}


void npl_vxlan_l2_dlp_table_value_t::unpack(bit_vector128_t bv)
{
    action = (npl_vxlan_l2_dlp_table_action_e)bv.bits(82, 75).get_value();
    if (action == NPL_VXLAN_L2_DLP_TABLE_ACTION_WRITE) {
        payloads.vxlan_tunnel_attributes.unpack(bv.bits(74, 0));
    }
    
}


field_structure npl_vxlan_l2_dlp_table_value_t::to_field_structure() const
{
    field_structure fs_result;
    fs_result.flat_value = pack().to_string();
    fs_result.field_type = "npl_vxlan_l2_dlp_table_value_t";
    field_structure fs_subfield;
    fs_subfield.flat_value = npl_action_enum_to_string(action);
    fs_subfield.field_type = "npl_vxlan_l2_dlp_table_action_e";
    fs_result.subfields.emplace_back("action", fs_subfield);
    
    if (action == NPL_VXLAN_L2_DLP_TABLE_ACTION_WRITE) {
        fs_result.subfields.emplace_back("payloads.vxlan_tunnel_attributes", payloads.vxlan_tunnel_attributes.to_field_structure());
    }
    
    return fs_result;
}
std::string to_string(npl_vxlan_l2_dlp_table_value_t element)
{
    return to_string(element.to_field_structure());
}
std::string to_short_string(npl_vxlan_l2_dlp_table_value_t element)
{
    return to_short_string(element.to_field_structure());
}

