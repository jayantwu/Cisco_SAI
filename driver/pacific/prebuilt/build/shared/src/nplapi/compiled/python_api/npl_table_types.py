
# This file has been automatically generated using nplc.py. Do not edit it manually.
# Version: 1.76.2_0.0.0.0 generated on devsrv15.leaba.local at 2021-05-12 16:09:15


from python_npl_api_base_structs import *
from npl_types import *
from npl_enums import *

# API-s for table: acl_map_fi_header_type_to_protocol_number_table

NPL_ACL_MAP_FI_HEADER_TYPE_TO_PROTOCOL_NUMBER_TABLE_ACTION_UPDATE = 0x0

class npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t(basic_npl_struct):
    def __init__(self, is_valid=0, acl_l4_protocol=0, protocol_type=0):
        super().__init__(19)
        self.is_valid = is_valid
        self.acl_l4_protocol = acl_l4_protocol
        self.protocol_type = protocol_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def is_valid(self):
        return self._get_field_value(18, 1)
    @is_valid.setter
    def is_valid(self, value):
        self._set_field_value('field is_valid', 18, 1, int, value)
    @property
    def acl_l4_protocol(self):
        return self._get_field_value(16, 2)
    @acl_l4_protocol.setter
    def acl_l4_protocol(self, value):
        self._set_field_value('field acl_l4_protocol', 16, 2, int, value)
    @property
    def protocol_type(self):
        return npl_protocol_type_padded_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @protocol_type.setter
    def protocol_type(self, value):
        self._set_field_value('field protocol_type', 0, 16, npl_protocol_type_padded_t, value)




class npl_acl_map_fi_header_type_to_protocol_number_table_key_t(basic_npl_struct):
    def __init__(self, fi_hdr_type=0):
        super().__init__(5)
        self.fi_hdr_type = fi_hdr_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_acl_map_fi_header_type_to_protocol_number_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fi_hdr_type(self):
        return self._get_field_value(0, 5)
    @fi_hdr_type.setter
    def fi_hdr_type(self, value):
        self._set_field_value('field fi_hdr_type', 0, 5, int, value)

class npl_acl_map_fi_header_type_to_protocol_number_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(19)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_acl_map_fi_header_type_to_protocol_number_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update(self):
        return npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update.setter
    def update(self, value):
        self._set_field_value('field update', 0, 19, npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t, value)

class npl_acl_map_fi_header_type_to_protocol_number_table_value_t(basic_npl_struct):
    def __init__(self, is_valid=0, acl_l4_protocol=0, protocol_type=0):
        super().__init__(27)
        self.payloads.update = npl_acl_map_fi_header_type_to_protocol_number_table_update_payload_t(is_valid, acl_l4_protocol, protocol_type)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_acl_map_fi_header_type_to_protocol_number_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(19, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 19, 8, int, value)
    @property
    def payloads(self):
        return npl_acl_map_fi_header_type_to_protocol_number_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 19, npl_acl_map_fi_header_type_to_protocol_number_table_payloads_t, value)



# API-s for table: additional_labels_table

NPL_ADDITIONAL_LABELS_TABLE_ACTION_WRITE = 0x0

class npl_additional_labels_table_key_t(basic_npl_struct):
    def __init__(self, labels_index=0):
        super().__init__(12)
        self.labels_index = labels_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_additional_labels_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def labels_index(self):
        return self._get_field_value(0, 12)
    @labels_index.setter
    def labels_index(self, value):
        self._set_field_value('field labels_index', 0, 12, int, value)

class npl_additional_labels_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_additional_labels_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def additional_labels(self):
        return npl_additional_labels_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @additional_labels.setter
    def additional_labels(self, value):
        self._set_field_value('field additional_labels', 0, 120, npl_additional_labels_t, value)

class npl_additional_labels_table_value_t(basic_npl_struct):
    def __init__(self, additional_labels=0):
        super().__init__(128)
        self.payloads.additional_labels = additional_labels

    def _get_as_sub_field(data, offset_in_data):
        result = npl_additional_labels_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_additional_labels_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_additional_labels_table_payloads_t, value)



# API-s for table: additional_labels_table_compound

NPL_ADDITIONAL_LABELS_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_additional_labels_table_compound_key_t(basic_npl_struct):
    def __init__(self, labels_index=0):
        super().__init__(18)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0x5)
        self.labels_index = labels_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_additional_labels_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_SMALL_EM_ADDITIONAL_LABELS_LDB_exact_0x5(self):
        return self._get_field_value(2, 4)
    @property
    def labels_index(self):
        return self._get_field_value(6, 12)
    @labels_index.setter
    def labels_index(self, value):
        self._set_field_value('field labels_index', 6, 12, int, value)

class npl_additional_labels_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_additional_labels_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def additional_labels(self):
        return npl_additional_labels_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @additional_labels.setter
    def additional_labels(self, value):
        self._set_field_value('field additional_labels', 0, 120, npl_additional_labels_t, value)

class npl_additional_labels_table_compound_value_t(basic_npl_struct):
    def __init__(self, additional_labels=0):
        super().__init__(128)
        self.payloads.additional_labels = additional_labels

    def _get_as_sub_field(data, offset_in_data):
        result = npl_additional_labels_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_additional_labels_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_additional_labels_table_compound_payloads_t, value)



# API-s for table: adj_compound_table

NPL_ADJ_COMPOUND_TABLE_ACTION_UPDATE = 0x0

class npl_adj_compound_table_update_payload_t(basic_npl_struct):
    def __init__(self, nh_payload=0, nh_da=0):
        super().__init__(116)
        self.nh_payload = nh_payload
        self.nh_da = nh_da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_adj_compound_table_update_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def nh_payload(self):
        return npl_nh_payload_t._get_as_sub_field(self._data, self._offset_in_data + 48)
    @nh_payload.setter
    def nh_payload(self, value):
        self._set_field_value('field nh_payload', 48, 68, npl_nh_payload_t, value)
    @property
    def nh_da(self):
        return self._get_field_value(0, 48)
    @nh_da.setter
    def nh_da(self, value):
        self._set_field_value('field nh_da', 0, 48, int, value)




class npl_adj_compound_table_key_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_ptr=0):
        super().__init__(12)
        self.l3_tx_local_vars_nh_ptr = l3_tx_local_vars_nh_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_adj_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_tx_local_vars_nh_ptr(self):
        return self._get_field_value(0, 12)
    @l3_tx_local_vars_nh_ptr.setter
    def l3_tx_local_vars_nh_ptr(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_ptr', 0, 12, int, value)

class npl_adj_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(116)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_adj_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update(self):
        return npl_adj_compound_table_update_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update.setter
    def update(self, value):
        self._set_field_value('field update', 0, 116, npl_adj_compound_table_update_payload_t, value)

class npl_adj_compound_table_value_t(basic_npl_struct):
    def __init__(self, nh_payload=0, nh_da=0):
        super().__init__(124)
        self.payloads.update = npl_adj_compound_table_update_payload_t(nh_payload, nh_da)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_adj_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(116, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 116, 8, int, value)
    @property
    def payloads(self):
        return npl_adj_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 116, npl_adj_compound_table_payloads_t, value)



# API-s for table: align_dsp_mtu_pack_table

NPL_ALIGN_DSP_MTU_PACK_TABLE_ACTION_WRITE = 0x0

class npl_align_dsp_mtu_pack_table_key_t(basic_npl_struct):
    def __init__(self, pd_pkt_size=0, padding_vars_dsp_mtu_w_fabric_offset=0, padding_vars_pad_constant=0):
        super().__init__(40)
        self._set_field_value('const field', 14, 2, int, 0x0)
        self._set_field_value('const field', 30, 2, int, 0x0)
        self.pd_pkt_size = pd_pkt_size
        self.padding_vars_dsp_mtu_w_fabric_offset = padding_vars_dsp_mtu_w_fabric_offset
        self.padding_vars_pad_constant = padding_vars_pad_constant

    def _get_as_sub_field(data, offset_in_data):
        result = npl_align_dsp_mtu_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_pkt_size(self):
        return self._get_field_value(0, 14)
    @pd_pkt_size.setter
    def pd_pkt_size(self, value):
        self._set_field_value('field pd_pkt_size', 0, 14, int, value)
    @property
    def const1_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def padding_vars_dsp_mtu_w_fabric_offset(self):
        return self._get_field_value(16, 14)
    @padding_vars_dsp_mtu_w_fabric_offset.setter
    def padding_vars_dsp_mtu_w_fabric_offset(self, value):
        self._set_field_value('field padding_vars_dsp_mtu_w_fabric_offset', 16, 14, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(30, 2)
    @property
    def padding_vars_pad_constant(self):
        return self._get_field_value(32, 8)
    @padding_vars_pad_constant.setter
    def padding_vars_pad_constant(self, value):
        self._set_field_value('field padding_vars_pad_constant', 32, 8, int, value)

class npl_align_dsp_mtu_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(46)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_align_dsp_mtu_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def padding_vars_mtu_and_pkt_size(self):
        return npl_mtu_and_pkt_size_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @padding_vars_mtu_and_pkt_size.setter
    def padding_vars_mtu_and_pkt_size(self, value):
        self._set_field_value('field padding_vars_mtu_and_pkt_size', 0, 46, npl_mtu_and_pkt_size_t, value)

class npl_align_dsp_mtu_pack_table_value_t(basic_npl_struct):
    def __init__(self, padding_vars_mtu_and_pkt_size=0):
        super().__init__(54)
        self.payloads.padding_vars_mtu_and_pkt_size = padding_vars_mtu_and_pkt_size

    def _get_as_sub_field(data, offset_in_data):
        result = npl_align_dsp_mtu_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(46, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 46, 8, int, value)
    @property
    def payloads(self):
        return npl_align_dsp_mtu_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 46, npl_align_dsp_mtu_pack_table_payloads_t, value)



# API-s for table: all_reachable_vector

NPL_ALL_REACHABLE_VECTOR_ACTION_WRITE = 0x0

class npl_all_reachable_vector_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_all_reachable_vector_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_all_reachable_vector_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(108)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_all_reachable_vector_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def all_reachable_vector_result(self):
        return npl_all_reachable_vector_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @all_reachable_vector_result.setter
    def all_reachable_vector_result(self, value):
        self._set_field_value('field all_reachable_vector_result', 0, 108, npl_all_reachable_vector_result_t, value)

class npl_all_reachable_vector_value_t(basic_npl_struct):
    def __init__(self, all_reachable_vector_result=0):
        super().__init__(116)
        self.payloads.all_reachable_vector_result = all_reachable_vector_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_all_reachable_vector_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(108, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 108, 8, int, value)
    @property
    def payloads(self):
        return npl_all_reachable_vector_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 108, npl_all_reachable_vector_payloads_t, value)



# API-s for table: asbr_label_table_compound

NPL_ASBR_LABEL_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_asbr_label_table_compound_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_encap_tunnel_headend_asbr=0, tx_npu_header_encap_tunnel_headend_lsp_dest_prefix=0):
        super().__init__(38)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0xf)
        self.tx_npu_header_encap_tunnel_headend_asbr = tx_npu_header_encap_tunnel_headend_asbr
        self.tx_npu_header_encap_tunnel_headend_lsp_dest_prefix = tx_npu_header_encap_tunnel_headend_lsp_dest_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_asbr_label_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_MPLS_ASBR_LABEL_LDB_exact_0xf(self):
        return self._get_field_value(2, 4)
    @property
    def tx_npu_header_encap_tunnel_headend_asbr(self):
        return self._get_field_value(6, 16)
    @tx_npu_header_encap_tunnel_headend_asbr.setter
    def tx_npu_header_encap_tunnel_headend_asbr(self, value):
        self._set_field_value('field tx_npu_header_encap_tunnel_headend_asbr', 6, 16, int, value)
    @property
    def tx_npu_header_encap_tunnel_headend_lsp_dest_prefix(self):
        return self._get_field_value(22, 16)
    @tx_npu_header_encap_tunnel_headend_lsp_dest_prefix.setter
    def tx_npu_header_encap_tunnel_headend_lsp_dest_prefix(self, value):
        self._set_field_value('field tx_npu_header_encap_tunnel_headend_lsp_dest_prefix', 22, 16, int, value)

class npl_asbr_label_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(45)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_asbr_label_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def large_em_label_encap_data_and_counter_ptr(self):
        return npl_large_em_label_encap_data_and_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @large_em_label_encap_data_and_counter_ptr.setter
    def large_em_label_encap_data_and_counter_ptr(self, value):
        self._set_field_value('field large_em_label_encap_data_and_counter_ptr', 0, 45, npl_large_em_label_encap_data_and_counter_ptr_t, value)

class npl_asbr_label_table_compound_value_t(basic_npl_struct):
    def __init__(self, large_em_label_encap_data_and_counter_ptr=0):
        super().__init__(53)
        self.payloads.large_em_label_encap_data_and_counter_ptr = large_em_label_encap_data_and_counter_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_asbr_label_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(45, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 45, 8, int, value)
    @property
    def payloads(self):
        return npl_asbr_label_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 45, npl_asbr_label_table_compound_payloads_t, value)



# API-s for table: bfd_desired_tx_interval_table

NPL_BFD_DESIRED_TX_INTERVAL_TABLE_ACTION_WRITE = 0x0

class npl_bfd_desired_tx_interval_table_key_t(basic_npl_struct):
    def __init__(self, interval_selector=0):
        super().__init__(3)
        self.interval_selector = interval_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_desired_tx_interval_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def interval_selector(self):
        return self._get_field_value(0, 3)
    @interval_selector.setter
    def interval_selector(self, value):
        self._set_field_value('field interval_selector', 0, 3, int, value)

class npl_bfd_desired_tx_interval_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_desired_tx_interval_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def desired_min_tx_interval(self):
        return self._get_field_value(0, 32)
    @desired_min_tx_interval.setter
    def desired_min_tx_interval(self, value):
        self._set_field_value('field desired_min_tx_interval', 0, 32, int, value)

class npl_bfd_desired_tx_interval_table_value_t(basic_npl_struct):
    def __init__(self, desired_min_tx_interval=0):
        super().__init__(40)
        self.payloads.desired_min_tx_interval = desired_min_tx_interval

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_desired_tx_interval_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_desired_tx_interval_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_bfd_desired_tx_interval_table_payloads_t, value)



# API-s for table: bfd_detection_multiple_table

NPL_BFD_DETECTION_MULTIPLE_TABLE_ACTION_WRITE = 0x0

class npl_bfd_detection_multiple_table_key_t(basic_npl_struct):
    def __init__(self, interval_selector=0):
        super().__init__(3)
        self.interval_selector = interval_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_detection_multiple_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def interval_selector(self):
        return self._get_field_value(0, 3)
    @interval_selector.setter
    def interval_selector(self, value):
        self._set_field_value('field interval_selector', 0, 3, int, value)

class npl_bfd_detection_multiple_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_detection_multiple_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def detection_mult(self):
        return self._get_field_value(0, 8)
    @detection_mult.setter
    def detection_mult(self, value):
        self._set_field_value('field detection_mult', 0, 8, int, value)

class npl_bfd_detection_multiple_table_value_t(basic_npl_struct):
    def __init__(self, detection_mult=0):
        super().__init__(16)
        self.payloads.detection_mult = detection_mult

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_detection_multiple_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_detection_multiple_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_bfd_detection_multiple_table_payloads_t, value)



# API-s for table: bfd_event_queue_compound_table

NPL_BFD_EVENT_QUEUE_COMPOUND_TABLE_ACTION_NO_OP = 0x0

class npl_bfd_event_queue_compound_table_key_t(basic_npl_struct):
    def __init__(self, bfd_flags=0, bfd_diag_code=0, bfd_oamp_evt=0, bfd_mep_id=0, bfd_rmep_id=0):
        super().__init__(50)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self._set_field_value('const field', 1, 2, int, 0x1)
        self.bfd_flags = bfd_flags
        self.bfd_diag_code = bfd_diag_code
        self.bfd_oamp_evt = bfd_oamp_evt
        self.bfd_mep_id = bfd_mep_id
        self.bfd_rmep_id = bfd_rmep_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_event_queue_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def const2_NPUH_EVENTQ_BFD_ID_exact_0x1(self):
        return self._get_field_value(1, 2)
    @property
    def bfd_flags(self):
        return self._get_field_value(3, 8)
    @bfd_flags.setter
    def bfd_flags(self, value):
        self._set_field_value('field bfd_flags', 3, 8, int, value)
    @property
    def bfd_diag_code(self):
        return self._get_field_value(11, 5)
    @bfd_diag_code.setter
    def bfd_diag_code(self, value):
        self._set_field_value('field bfd_diag_code', 11, 5, int, value)
    @property
    def bfd_oamp_evt(self):
        return self._get_field_value(16, 8)
    @bfd_oamp_evt.setter
    def bfd_oamp_evt(self, value):
        self._set_field_value('field bfd_oamp_evt', 16, 8, int, value)
    @property
    def bfd_mep_id(self):
        return self._get_field_value(24, 13)
    @bfd_mep_id.setter
    def bfd_mep_id(self, value):
        self._set_field_value('field bfd_mep_id', 24, 13, int, value)
    @property
    def bfd_rmep_id(self):
        return self._get_field_value(37, 13)
    @bfd_rmep_id.setter
    def bfd_rmep_id(self, value):
        self._set_field_value('field bfd_rmep_id', 37, 13, int, value)

class npl_bfd_event_queue_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_event_queue_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_bfd_event_queue_compound_table_value_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(8)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_event_queue_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_event_queue_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_bfd_event_queue_compound_table_payloads_t, value)



# API-s for table: bfd_event_queue_table

NPL_BFD_EVENT_QUEUE_TABLE_ACTION_NO_OP = 0x0

class npl_bfd_event_queue_table_key_t(basic_npl_struct):
    def __init__(self, flags_and_state=0, diag_code=0, oamp_event=0, mep_id=0, rmep_id=0):
        super().__init__(72)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self._set_field_value('const field', 1, 2, int, 0x1)
        self._set_field_value('const field', 50, 22, int, 0x0)
        self.flags_and_state = flags_and_state
        self.diag_code = diag_code
        self.oamp_event = oamp_event
        self.mep_id = mep_id
        self.rmep_id = rmep_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_event_queue_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def const2_NPUH_EVENTQ_BFD_ID_exact_0x1(self):
        return self._get_field_value(1, 2)
    @property
    def flags_and_state(self):
        return self._get_field_value(3, 8)
    @flags_and_state.setter
    def flags_and_state(self, value):
        self._set_field_value('field flags_and_state', 3, 8, int, value)
    @property
    def diag_code(self):
        return self._get_field_value(11, 5)
    @diag_code.setter
    def diag_code(self, value):
        self._set_field_value('field diag_code', 11, 5, int, value)
    @property
    def oamp_event(self):
        return self._get_field_value(16, 8)
    @oamp_event.setter
    def oamp_event(self, value):
        self._set_field_value('field oamp_event', 16, 8, int, value)
    @property
    def mep_id(self):
        return self._get_field_value(24, 13)
    @mep_id.setter
    def mep_id(self, value):
        self._set_field_value('field mep_id', 24, 13, int, value)
    @property
    def rmep_id(self):
        return self._get_field_value(37, 13)
    @rmep_id.setter
    def rmep_id(self, value):
        self._set_field_value('field rmep_id', 37, 13, int, value)
    @property
    def const3_22b0_exact_0x0(self):
        return self._get_field_value(50, 22)

class npl_bfd_event_queue_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_event_queue_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_bfd_event_queue_table_value_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(8)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_event_queue_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_event_queue_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_bfd_event_queue_table_payloads_t, value)



# API-s for table: bfd_extra_mp_table

NPL_BFD_EXTRA_MP_TABLE_ACTION_UPDATE_MEP_ATTRIBUTES = 0x0

class npl_bfd_extra_mp_table_update_mep_attributes_payload_t(basic_npl_struct):
    def __init__(self, bfd_mp_payload=0, bfd_aux=0):
        super().__init__(320)
        self.bfd_mp_payload = bfd_mp_payload
        self.bfd_aux = bfd_aux

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_extra_mp_table_update_mep_attributes_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def bfd_mp_payload(self):
        return npl_mp_table_rd_app_t._get_as_sub_field(self._data, self._offset_in_data + 160)
    @bfd_mp_payload.setter
    def bfd_mp_payload(self, value):
        self._set_field_value('field bfd_mp_payload', 160, 160, npl_mp_table_rd_app_t, value)
    @property
    def bfd_aux(self):
        return npl_bfd_aux_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_aux.setter
    def bfd_aux(self, value):
        self._set_field_value('field bfd_aux', 0, 160, npl_bfd_aux_payload_t, value)




class npl_bfd_extra_mp_table_key_t(basic_npl_struct):
    def __init__(self, mp_index_id=0):
        super().__init__(14)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self.mp_index_id = mp_index_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_extra_mp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def mp_index_id(self):
        return self._get_field_value(1, 13)
    @mp_index_id.setter
    def mp_index_id(self, value):
        self._set_field_value('field mp_index_id', 1, 13, int, value)

class npl_bfd_extra_mp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(320)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_extra_mp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_mep_attributes(self):
        return npl_bfd_extra_mp_table_update_mep_attributes_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_mep_attributes.setter
    def update_mep_attributes(self, value):
        self._set_field_value('field update_mep_attributes', 0, 320, npl_bfd_extra_mp_table_update_mep_attributes_payload_t, value)

class npl_bfd_extra_mp_table_value_t(basic_npl_struct):
    def __init__(self, bfd_mp_payload=0, bfd_aux=0):
        super().__init__(328)
        self.payloads.update_mep_attributes = npl_bfd_extra_mp_table_update_mep_attributes_payload_t(bfd_mp_payload, bfd_aux)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_extra_mp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(320, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 320, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_extra_mp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 320, npl_bfd_extra_mp_table_payloads_t, value)



# API-s for table: bfd_inject_inner_da_high_table

NPL_BFD_INJECT_INNER_DA_HIGH_TABLE_ACTION_SET_INJECT_INNER_DA = 0x0

class npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t(basic_npl_struct):
    def __init__(self, da=0):
        super().__init__(16)
        self.da = da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def da(self):
        return self._get_field_value(0, 16)
    @da.setter
    def da(self, value):
        self._set_field_value('field da', 0, 16, int, value)




class npl_bfd_inject_inner_da_high_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x1)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_da_high_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)

class npl_bfd_inject_inner_da_high_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_da_high_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_inject_inner_da(self):
        return npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_inject_inner_da.setter
    def set_inject_inner_da(self, value):
        self._set_field_value('field set_inject_inner_da', 0, 16, npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t, value)

class npl_bfd_inject_inner_da_high_table_value_t(basic_npl_struct):
    def __init__(self, da=0):
        super().__init__(24)
        self.payloads.set_inject_inner_da = npl_bfd_inject_inner_da_high_table_set_inject_inner_da_payload_t(da)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_da_high_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_inject_inner_da_high_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_bfd_inject_inner_da_high_table_payloads_t, value)



# API-s for table: bfd_inject_inner_da_low_table

NPL_BFD_INJECT_INNER_DA_LOW_TABLE_ACTION_SET_INJECT_INNER_DA = 0x0

class npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t(basic_npl_struct):
    def __init__(self, da=0):
        super().__init__(32)
        self.da = da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def da(self):
        return self._get_field_value(0, 32)
    @da.setter
    def da(self, value):
        self._set_field_value('field da', 0, 32, int, value)




class npl_bfd_inject_inner_da_low_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x1)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_da_low_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)

class npl_bfd_inject_inner_da_low_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_da_low_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_inject_inner_da(self):
        return npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_inject_inner_da.setter
    def set_inject_inner_da(self, value):
        self._set_field_value('field set_inject_inner_da', 0, 32, npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t, value)

class npl_bfd_inject_inner_da_low_table_value_t(basic_npl_struct):
    def __init__(self, da=0):
        super().__init__(40)
        self.payloads.set_inject_inner_da = npl_bfd_inject_inner_da_low_table_set_inject_inner_da_payload_t(da)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_da_low_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_inject_inner_da_low_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_bfd_inject_inner_da_low_table_payloads_t, value)



# API-s for table: bfd_inject_inner_ethernet_header_static_table

NPL_BFD_INJECT_INNER_ETHERNET_HEADER_STATIC_TABLE_ACTION_SET_INNER_INJECT_ETH = 0x0

class npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t(basic_npl_struct):
    def __init__(self, type=0, pkt_size=0, size1=0, size2=0, size3=0, bitmap=0):
        super().__init__(60)
        self.type = type
        self.pkt_size = pkt_size
        self.size1 = size1
        self.size2 = size2
        self.size3 = size3
        self.bitmap = bitmap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def type(self):
        return self._get_field_value(44, 16)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 44, 16, int, value)
    @property
    def pkt_size(self):
        return self._get_field_value(30, 14)
    @pkt_size.setter
    def pkt_size(self, value):
        self._set_field_value('field pkt_size', 30, 14, int, value)
    @property
    def size1(self):
        return self._get_field_value(22, 8)
    @size1.setter
    def size1(self, value):
        self._set_field_value('field size1', 22, 8, int, value)
    @property
    def size2(self):
        return self._get_field_value(14, 8)
    @size2.setter
    def size2(self, value):
        self._set_field_value('field size2', 14, 8, int, value)
    @property
    def size3(self):
        return self._get_field_value(6, 8)
    @size3.setter
    def size3(self, value):
        self._set_field_value('field size3', 6, 8, int, value)
    @property
    def bitmap(self):
        return self._get_field_value(0, 6)
    @bitmap.setter
    def bitmap(self, value):
        self._set_field_value('field bitmap', 0, 6, int, value)




class npl_bfd_inject_inner_ethernet_header_static_table_key_t(basic_npl_struct):
    def __init__(self, transport=0, requires_inject_up=0):
        super().__init__(4)
        self.transport = transport
        self.requires_inject_up = requires_inject_up

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_ethernet_header_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def transport(self):
        return npl_bfd_transport_and_label_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @transport.setter
    def transport(self, value):
        self._set_field_value('field transport', 0, 3, npl_bfd_transport_and_label_t, value)
    @property
    def requires_inject_up(self):
        return self._get_field_value(3, 1)
    @requires_inject_up.setter
    def requires_inject_up(self, value):
        self._set_field_value('field requires_inject_up', 3, 1, int, value)

class npl_bfd_inject_inner_ethernet_header_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(60)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_ethernet_header_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_inner_inject_eth(self):
        return npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_inner_inject_eth.setter
    def set_inner_inject_eth(self, value):
        self._set_field_value('field set_inner_inject_eth', 0, 60, npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t, value)

class npl_bfd_inject_inner_ethernet_header_static_table_value_t(basic_npl_struct):
    def __init__(self, type=0, pkt_size=0, size1=0, size2=0, size3=0, bitmap=0):
        super().__init__(68)
        self.payloads.set_inner_inject_eth = npl_bfd_inject_inner_ethernet_header_static_table_set_inner_inject_eth_payload_t(type, pkt_size, size1, size2, size3, bitmap)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_inner_ethernet_header_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(60, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 60, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_inject_inner_ethernet_header_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 60, npl_bfd_inject_inner_ethernet_header_static_table_payloads_t, value)



# API-s for table: bfd_inject_ttl_static_table

NPL_BFD_INJECT_TTL_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_bfd_inject_ttl_static_table_key_t(basic_npl_struct):
    def __init__(self, requires_label=0, requires_inject_up=0):
        super().__init__(2)
        self.requires_label = requires_label
        self.requires_inject_up = requires_inject_up

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_ttl_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def requires_label(self):
        return self._get_field_value(0, 1)
    @requires_label.setter
    def requires_label(self, value):
        self._set_field_value('field requires_label', 0, 1, int, value)
    @property
    def requires_inject_up(self):
        return self._get_field_value(1, 1)
    @requires_inject_up.setter
    def requires_inject_up(self, value):
        self._set_field_value('field requires_inject_up', 1, 1, int, value)

class npl_bfd_inject_ttl_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_ttl_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_inject_ttl(self):
        return npl_bfd_inject_ttl_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_inject_ttl.setter
    def bfd_inject_ttl(self, value):
        self._set_field_value('field bfd_inject_ttl', 0, 8, npl_bfd_inject_ttl_t, value)

class npl_bfd_inject_ttl_static_table_value_t(basic_npl_struct):
    def __init__(self, bfd_inject_ttl=0):
        super().__init__(16)
        self.payloads.bfd_inject_ttl = bfd_inject_ttl

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_inject_ttl_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_inject_ttl_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_bfd_inject_ttl_static_table_payloads_t, value)



# API-s for table: bfd_ipv6_sip_A_table

NPL_BFD_IPV6_SIP_A_TABLE_ACTION_WRITE = 0x0

class npl_bfd_ipv6_sip_A_table_key_t(basic_npl_struct):
    def __init__(self, bfd_ipv6_selector=0):
        super().__init__(8)
        self.bfd_ipv6_selector = bfd_ipv6_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_A_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_ipv6_selector(self):
        return npl_bfd_ipv6_selector_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_ipv6_selector.setter
    def bfd_ipv6_selector(self, value):
        self._set_field_value('field bfd_ipv6_selector', 0, 8, npl_bfd_ipv6_selector_t, value)

class npl_bfd_ipv6_sip_A_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_A_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_local_ipv6_A_sip(self):
        return npl_bfd_local_ipv6_sip_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_local_ipv6_A_sip.setter
    def bfd_local_ipv6_A_sip(self, value):
        self._set_field_value('field bfd_local_ipv6_A_sip', 0, 32, npl_bfd_local_ipv6_sip_t, value)

class npl_bfd_ipv6_sip_A_table_value_t(basic_npl_struct):
    def __init__(self, bfd_local_ipv6_A_sip=0):
        super().__init__(40)
        self.payloads.bfd_local_ipv6_A_sip = bfd_local_ipv6_A_sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_A_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_ipv6_sip_A_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_bfd_ipv6_sip_A_table_payloads_t, value)



# API-s for table: bfd_ipv6_sip_B_table

NPL_BFD_IPV6_SIP_B_TABLE_ACTION_WRITE = 0x0

class npl_bfd_ipv6_sip_B_table_key_t(basic_npl_struct):
    def __init__(self, bfd_ipv6_selector=0):
        super().__init__(8)
        self.bfd_ipv6_selector = bfd_ipv6_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_B_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_ipv6_selector(self):
        return npl_bfd_ipv6_selector_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_ipv6_selector.setter
    def bfd_ipv6_selector(self, value):
        self._set_field_value('field bfd_ipv6_selector', 0, 8, npl_bfd_ipv6_selector_t, value)

class npl_bfd_ipv6_sip_B_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_B_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_local_ipv6_B_sip(self):
        return npl_bfd_local_ipv6_sip_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_local_ipv6_B_sip.setter
    def bfd_local_ipv6_B_sip(self, value):
        self._set_field_value('field bfd_local_ipv6_B_sip', 0, 32, npl_bfd_local_ipv6_sip_t, value)

class npl_bfd_ipv6_sip_B_table_value_t(basic_npl_struct):
    def __init__(self, bfd_local_ipv6_B_sip=0):
        super().__init__(40)
        self.payloads.bfd_local_ipv6_B_sip = bfd_local_ipv6_B_sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_B_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_ipv6_sip_B_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_bfd_ipv6_sip_B_table_payloads_t, value)



# API-s for table: bfd_ipv6_sip_C_table

NPL_BFD_IPV6_SIP_C_TABLE_ACTION_WRITE = 0x0

class npl_bfd_ipv6_sip_C_table_key_t(basic_npl_struct):
    def __init__(self, bfd_ipv6_selector=0):
        super().__init__(8)
        self.bfd_ipv6_selector = bfd_ipv6_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_C_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_ipv6_selector(self):
        return npl_bfd_ipv6_selector_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_ipv6_selector.setter
    def bfd_ipv6_selector(self, value):
        self._set_field_value('field bfd_ipv6_selector', 0, 8, npl_bfd_ipv6_selector_t, value)

class npl_bfd_ipv6_sip_C_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_C_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_local_ipv6_C_sip(self):
        return npl_bfd_local_ipv6_sip_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_local_ipv6_C_sip.setter
    def bfd_local_ipv6_C_sip(self, value):
        self._set_field_value('field bfd_local_ipv6_C_sip', 0, 32, npl_bfd_local_ipv6_sip_t, value)

class npl_bfd_ipv6_sip_C_table_value_t(basic_npl_struct):
    def __init__(self, bfd_local_ipv6_C_sip=0):
        super().__init__(40)
        self.payloads.bfd_local_ipv6_C_sip = bfd_local_ipv6_C_sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_C_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_ipv6_sip_C_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_bfd_ipv6_sip_C_table_payloads_t, value)



# API-s for table: bfd_ipv6_sip_D_table

NPL_BFD_IPV6_SIP_D_TABLE_ACTION_WRITE = 0x0

class npl_bfd_ipv6_sip_D_table_key_t(basic_npl_struct):
    def __init__(self, bfd_ipv6_selector=0):
        super().__init__(8)
        self.bfd_ipv6_selector = bfd_ipv6_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_D_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_ipv6_selector(self):
        return npl_bfd_ipv6_selector_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_ipv6_selector.setter
    def bfd_ipv6_selector(self, value):
        self._set_field_value('field bfd_ipv6_selector', 0, 8, npl_bfd_ipv6_selector_t, value)

class npl_bfd_ipv6_sip_D_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_D_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_local_ipv6_D_sip(self):
        return npl_bfd_local_ipv6_sip_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_local_ipv6_D_sip.setter
    def bfd_local_ipv6_D_sip(self, value):
        self._set_field_value('field bfd_local_ipv6_D_sip', 0, 32, npl_bfd_local_ipv6_sip_t, value)

class npl_bfd_ipv6_sip_D_table_value_t(basic_npl_struct):
    def __init__(self, bfd_local_ipv6_D_sip=0):
        super().__init__(40)
        self.payloads.bfd_local_ipv6_D_sip = bfd_local_ipv6_D_sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_ipv6_sip_D_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_ipv6_sip_D_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_bfd_ipv6_sip_D_table_payloads_t, value)



# API-s for table: bfd_mp_mapping_compound_table

NPL_BFD_MP_MAPPING_COMPOUND_TABLE_ACTION_UPDATE_MEP_ATTRIBUTES = 0x0

class npl_bfd_mp_mapping_compound_table_update_mep_attributes_payload_t(basic_npl_struct):
    def __init__(self, em_bfd_payload=0, bfd_mp_payload=0, bfd_aux=0, bfd_rmep_payload=0):
        super().__init__(408)
        self.em_bfd_payload = em_bfd_payload
        self.bfd_mp_payload = bfd_mp_payload
        self.bfd_aux = bfd_aux
        self.bfd_rmep_payload = bfd_rmep_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_mp_mapping_compound_table_update_mep_attributes_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def em_bfd_payload(self):
        return npl_em_payload_t._get_as_sub_field(self._data, self._offset_in_data + 368)
    @em_bfd_payload.setter
    def em_bfd_payload(self, value):
        self._set_field_value('field em_bfd_payload', 368, 40, npl_em_payload_t, value)
    @property
    def bfd_mp_payload(self):
        return npl_bfd_mp_table_shared_payload_t._get_as_sub_field(self._data, self._offset_in_data + 208)
    @bfd_mp_payload.setter
    def bfd_mp_payload(self, value):
        self._set_field_value('field bfd_mp_payload', 208, 160, npl_bfd_mp_table_shared_payload_t, value)
    @property
    def bfd_aux(self):
        return npl_bfd_aux_payload_t._get_as_sub_field(self._data, self._offset_in_data + 48)
    @bfd_aux.setter
    def bfd_aux(self, value):
        self._set_field_value('field bfd_aux', 48, 160, npl_bfd_aux_payload_t, value)
    @property
    def bfd_rmep_payload(self):
        return npl_bfd_remote_session_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_rmep_payload.setter
    def bfd_rmep_payload(self, value):
        self._set_field_value('field bfd_rmep_payload', 0, 48, npl_bfd_remote_session_attributes_t, value)




class npl_bfd_mp_mapping_compound_table_key_t(basic_npl_struct):
    def __init__(self, udp_dest_port=0, your_discr=0):
        super().__init__(50)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self.udp_dest_port = udp_dest_port
        self.your_discr = your_discr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_mp_mapping_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_BFD_TBL_ID_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def udp_dest_port(self):
        return self._get_field_value(2, 16)
    @udp_dest_port.setter
    def udp_dest_port(self, value):
        self._set_field_value('field udp_dest_port', 2, 16, int, value)
    @property
    def your_discr(self):
        return self._get_field_value(18, 32)
    @your_discr.setter
    def your_discr(self, value):
        self._set_field_value('field your_discr', 18, 32, int, value)

class npl_bfd_mp_mapping_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(408)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_mp_mapping_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_mep_attributes(self):
        return npl_bfd_mp_mapping_compound_table_update_mep_attributes_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_mep_attributes.setter
    def update_mep_attributes(self, value):
        self._set_field_value('field update_mep_attributes', 0, 408, npl_bfd_mp_mapping_compound_table_update_mep_attributes_payload_t, value)

class npl_bfd_mp_mapping_compound_table_value_t(basic_npl_struct):
    def __init__(self, em_bfd_payload=0, bfd_mp_payload=0, bfd_aux=0, bfd_rmep_payload=0):
        super().__init__(416)
        self.payloads.update_mep_attributes = npl_bfd_mp_mapping_compound_table_update_mep_attributes_payload_t(em_bfd_payload, bfd_mp_payload, bfd_aux, bfd_rmep_payload)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_mp_mapping_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(408, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 408, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_mp_mapping_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 408, npl_bfd_mp_mapping_compound_table_payloads_t, value)



# API-s for table: bfd_punt_encap_static_table

NPL_BFD_PUNT_ENCAP_STATIC_TABLE_ACTION_BFD_HDR_PUNT_ENCAP_ACTION = 0x0

class npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t(basic_npl_struct):
    def __init__(self, fwd_offset=0, nmret=0, lpts_punt_encap=0):
        super().__init__(27)
        self.fwd_offset = fwd_offset
        self.nmret = nmret
        self.lpts_punt_encap = lpts_punt_encap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def fwd_offset(self):
        return self._get_field_value(20, 7)
    @fwd_offset.setter
    def fwd_offset(self, value):
        self._set_field_value('field fwd_offset', 20, 7, int, value)
    @property
    def nmret(self):
        return self._get_field_value(16, 4)
    @nmret.setter
    def nmret(self, value):
        self._set_field_value('field nmret', 16, 4, int, value)
    @property
    def lpts_punt_encap(self):
        return npl_lpts_tcam_first_result_encap_data_msb_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpts_punt_encap.setter
    def lpts_punt_encap(self, value):
        self._set_field_value('field lpts_punt_encap', 0, 16, npl_lpts_tcam_first_result_encap_data_msb_t, value)




class npl_bfd_punt_encap_static_table_key_t(basic_npl_struct):
    def __init__(self, encap_result=0):
        super().__init__(1)
        self.encap_result = encap_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_punt_encap_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def encap_result(self):
        return self._get_field_value(0, 1)
    @encap_result.setter
    def encap_result(self, value):
        self._set_field_value('field encap_result', 0, 1, int, value)

class npl_bfd_punt_encap_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(27)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_punt_encap_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_hdr_punt_encap_action(self):
        return npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_hdr_punt_encap_action.setter
    def bfd_hdr_punt_encap_action(self, value):
        self._set_field_value('field bfd_hdr_punt_encap_action', 0, 27, npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t, value)

class npl_bfd_punt_encap_static_table_value_t(basic_npl_struct):
    def __init__(self, fwd_offset=0, nmret=0, lpts_punt_encap=0):
        super().__init__(35)
        self.payloads.bfd_hdr_punt_encap_action = npl_bfd_punt_encap_static_table_bfd_hdr_punt_encap_action_payload_t(fwd_offset, nmret, lpts_punt_encap)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_punt_encap_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(27, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 27, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_punt_encap_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 27, npl_bfd_punt_encap_static_table_payloads_t, value)



# API-s for table: bfd_required_tx_interval_table

NPL_BFD_REQUIRED_TX_INTERVAL_TABLE_ACTION_WRITE = 0x0

class npl_bfd_required_tx_interval_table_key_t(basic_npl_struct):
    def __init__(self, interval_selector=0):
        super().__init__(3)
        self.interval_selector = interval_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_required_tx_interval_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def interval_selector(self):
        return self._get_field_value(0, 3)
    @interval_selector.setter
    def interval_selector(self, value):
        self._set_field_value('field interval_selector', 0, 3, int, value)

class npl_bfd_required_tx_interval_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_required_tx_interval_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def required_min_tx_interval(self):
        return self._get_field_value(0, 32)
    @required_min_tx_interval.setter
    def required_min_tx_interval(self, value):
        self._set_field_value('field required_min_tx_interval', 0, 32, int, value)

class npl_bfd_required_tx_interval_table_value_t(basic_npl_struct):
    def __init__(self, required_min_tx_interval=0):
        super().__init__(40)
        self.payloads.required_min_tx_interval = required_min_tx_interval

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_required_tx_interval_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_required_tx_interval_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_bfd_required_tx_interval_table_payloads_t, value)



# API-s for table: bfd_rx_table

NPL_BFD_RX_TABLE_ACTION_WRITE = 0x0

class npl_bfd_rx_table_key_t(basic_npl_struct):
    def __init__(self, protocol_type=0, dst_port=0, your_discr_23_16_=0, your_discr_31_16_=0):
        super().__init__(41)
        self.protocol_type = protocol_type
        self.dst_port = dst_port
        self.your_discr_23_16_ = your_discr_23_16_
        self.your_discr_31_16_ = your_discr_31_16_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_rx_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def protocol_type(self):
        return self._get_field_value(0, 1)
    @protocol_type.setter
    def protocol_type(self, value):
        self._set_field_value('field protocol_type', 0, 1, int, value)
    @property
    def dst_port(self):
        return self._get_field_value(1, 16)
    @dst_port.setter
    def dst_port(self, value):
        self._set_field_value('field dst_port', 1, 16, int, value)
    @property
    def your_discr_23_16_(self):
        return self._get_field_value(17, 8)
    @your_discr_23_16_.setter
    def your_discr_23_16_(self, value):
        self._set_field_value('field your_discr_23_16_', 17, 8, int, value)
    @property
    def your_discr_31_16_(self):
        return self._get_field_value(25, 16)
    @your_discr_31_16_.setter
    def your_discr_31_16_(self, value):
        self._set_field_value('field your_discr_31_16_', 25, 16, int, value)

class npl_bfd_rx_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_rx_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_em_lookup_result(self):
        return npl_bfd_em_lookup_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_em_lookup_result.setter
    def bfd_em_lookup_result(self, value):
        self._set_field_value('field bfd_em_lookup_result', 0, 44, npl_bfd_em_lookup_t, value)

class npl_bfd_rx_table_value_t(basic_npl_struct):
    def __init__(self, bfd_em_lookup_result=0):
        super().__init__(52)
        self.payloads.bfd_em_lookup_result = bfd_em_lookup_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_rx_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_rx_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_bfd_rx_table_payloads_t, value)



# API-s for table: bfd_rx_table_compound

NPL_BFD_RX_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_bfd_rx_table_compound_key_t(basic_npl_struct):
    def __init__(self, bfd_rx_local_vars_protocol_type=0, packet_header_1__udp_header_dst_port=0, packet_header_1__udp_bfd_udp_bfd_async_your_discr_23_16_=0, packet_header_1__udp_bfd_udp_bfd_async_your_discr_31_16_=0):
        super().__init__(49)
        self._set_field_value('const field', 0, 8, int, 0xdd)
        self.bfd_rx_local_vars_protocol_type = bfd_rx_local_vars_protocol_type
        self.packet_header_1__udp_header_dst_port = packet_header_1__udp_header_dst_port
        self.packet_header_1__udp_bfd_udp_bfd_async_your_discr_23_16_ = packet_header_1__udp_bfd_udp_bfd_async_your_discr_23_16_
        self.packet_header_1__udp_bfd_udp_bfd_async_your_discr_31_16_ = packet_header_1__udp_bfd_udp_bfd_async_your_discr_31_16_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_rx_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_EM_LDB_BFD_LKUP_exact_0xdd(self):
        return self._get_field_value(0, 8)
    @property
    def bfd_rx_local_vars_protocol_type(self):
        return self._get_field_value(8, 1)
    @bfd_rx_local_vars_protocol_type.setter
    def bfd_rx_local_vars_protocol_type(self, value):
        self._set_field_value('field bfd_rx_local_vars_protocol_type', 8, 1, int, value)
    @property
    def packet_header_1__udp_header_dst_port(self):
        return self._get_field_value(9, 16)
    @packet_header_1__udp_header_dst_port.setter
    def packet_header_1__udp_header_dst_port(self, value):
        self._set_field_value('field packet_header_1__udp_header_dst_port', 9, 16, int, value)
    @property
    def packet_header_1__udp_bfd_udp_bfd_async_your_discr_23_16_(self):
        return self._get_field_value(25, 8)
    @packet_header_1__udp_bfd_udp_bfd_async_your_discr_23_16_.setter
    def packet_header_1__udp_bfd_udp_bfd_async_your_discr_23_16_(self, value):
        self._set_field_value('field packet_header_1__udp_bfd_udp_bfd_async_your_discr_23_16_', 25, 8, int, value)
    @property
    def packet_header_1__udp_bfd_udp_bfd_async_your_discr_31_16_(self):
        return self._get_field_value(33, 16)
    @packet_header_1__udp_bfd_udp_bfd_async_your_discr_31_16_.setter
    def packet_header_1__udp_bfd_udp_bfd_async_your_discr_31_16_(self, value):
        self._set_field_value('field packet_header_1__udp_bfd_udp_bfd_async_your_discr_31_16_', 33, 16, int, value)

class npl_bfd_rx_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_rx_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_em_compound_results(self):
        return npl_bfd_em_compound_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_em_compound_results.setter
    def bfd_em_compound_results(self, value):
        self._set_field_value('field bfd_em_compound_results', 0, 44, npl_bfd_em_compound_results_t, value)

class npl_bfd_rx_table_compound_value_t(basic_npl_struct):
    def __init__(self, bfd_em_compound_results=0):
        super().__init__(52)
        self.payloads.bfd_em_compound_results = bfd_em_compound_results

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_rx_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_rx_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_bfd_rx_table_compound_payloads_t, value)



# API-s for table: bfd_set_inject_type_static_table

NPL_BFD_SET_INJECT_TYPE_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_bfd_set_inject_type_static_table_key_t(basic_npl_struct):
    def __init__(self, pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up=0):
        super().__init__(1)
        self.pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up = pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_set_inject_type_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up(self):
        return self._get_field_value(0, 1)
    @pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up.setter
    def pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up(self, value):
        self._set_field_value('field pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up', 0, 1, int, value)

class npl_bfd_set_inject_type_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_set_inject_type_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_inject_header_inject_header_type(self):
        return self._get_field_value(0, 8)
    @packet_inject_header_inject_header_type.setter
    def packet_inject_header_inject_header_type(self, value):
        self._set_field_value('field packet_inject_header_inject_header_type', 0, 8, int, value)

class npl_bfd_set_inject_type_static_table_value_t(basic_npl_struct):
    def __init__(self, packet_inject_header_inject_header_type=0):
        super().__init__(16)
        self.payloads.packet_inject_header_inject_header_type = packet_inject_header_inject_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_set_inject_type_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_set_inject_type_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_bfd_set_inject_type_static_table_payloads_t, value)



# API-s for table: bfd_udp_port_map_static_table

NPL_BFD_UDP_PORT_MAP_STATIC_TABLE_ACTION_BFD_UDP_PORT_RESULT = 0x0

class npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t(basic_npl_struct):
    def __init__(self, bfd_valid=0, pl_inc=0, macro_id=0):
        super().__init__(11)
        self.bfd_valid = bfd_valid
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def bfd_valid(self):
        return self._get_field_value(10, 1)
    @bfd_valid.setter
    def bfd_valid(self, value):
        self._set_field_value('field bfd_valid', 10, 1, int, value)
    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_bfd_udp_port_map_static_table_key_t(basic_npl_struct):
    def __init__(self, packet_header_1__udp_header_dst_port=0, packet_ipv6_header_next_header=0, packet_ipv4_header_protocol=0, packet_header_info_type=0, pd_redirect_stage_vars_skip_bfd_or_ttl_255=0):
        super().__init__(38)
        self.packet_header_1__udp_header_dst_port = packet_header_1__udp_header_dst_port
        self.packet_ipv6_header_next_header = packet_ipv6_header_next_header
        self.packet_ipv4_header_protocol = packet_ipv4_header_protocol
        self.packet_header_info_type = packet_header_info_type
        self.pd_redirect_stage_vars_skip_bfd_or_ttl_255 = pd_redirect_stage_vars_skip_bfd_or_ttl_255

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_udp_port_map_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_header_1__udp_header_dst_port(self):
        return self._get_field_value(0, 16)
    @packet_header_1__udp_header_dst_port.setter
    def packet_header_1__udp_header_dst_port(self, value):
        self._set_field_value('field packet_header_1__udp_header_dst_port', 0, 16, int, value)
    @property
    def packet_ipv6_header_next_header(self):
        return self._get_field_value(16, 8)
    @packet_ipv6_header_next_header.setter
    def packet_ipv6_header_next_header(self, value):
        self._set_field_value('field packet_ipv6_header_next_header', 16, 8, int, value)
    @property
    def packet_ipv4_header_protocol(self):
        return self._get_field_value(24, 8)
    @packet_ipv4_header_protocol.setter
    def packet_ipv4_header_protocol(self, value):
        self._set_field_value('field packet_ipv4_header_protocol', 24, 8, int, value)
    @property
    def packet_header_info_type(self):
        return self._get_field_value(32, 5)
    @packet_header_info_type.setter
    def packet_header_info_type(self, value):
        self._set_field_value('field packet_header_info_type', 32, 5, int, value)
    @property
    def pd_redirect_stage_vars_skip_bfd_or_ttl_255(self):
        return self._get_field_value(37, 1)
    @pd_redirect_stage_vars_skip_bfd_or_ttl_255.setter
    def pd_redirect_stage_vars_skip_bfd_or_ttl_255(self, value):
        self._set_field_value('field pd_redirect_stage_vars_skip_bfd_or_ttl_255', 37, 1, int, value)

class npl_bfd_udp_port_map_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(11)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_udp_port_map_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_udp_port_result(self):
        return npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_udp_port_result.setter
    def bfd_udp_port_result(self, value):
        self._set_field_value('field bfd_udp_port_result', 0, 11, npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t, value)

class npl_bfd_udp_port_map_static_table_value_t(basic_npl_struct):
    def __init__(self, bfd_valid=0, pl_inc=0, macro_id=0):
        super().__init__(19)
        self.payloads.bfd_udp_port_result = npl_bfd_udp_port_map_static_table_bfd_udp_port_result_payload_t(bfd_valid, pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_udp_port_map_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(11, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 11, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_udp_port_map_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 11, npl_bfd_udp_port_map_static_table_payloads_t, value)



# API-s for table: bfd_udp_port_static_table

NPL_BFD_UDP_PORT_STATIC_TABLE_ACTION_BFD_UDP_PORT_STATIC_RESULT = 0x0

class npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t(basic_npl_struct):
    def __init__(self, l4_ports=0, length=0):
        super().__init__(48)
        self.l4_ports = l4_ports
        self.length = length

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def l4_ports(self):
        return npl_l4_ports_header_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @l4_ports.setter
    def l4_ports(self, value):
        self._set_field_value('field l4_ports', 16, 32, npl_l4_ports_header_t, value)
    @property
    def length(self):
        return self._get_field_value(0, 16)
    @length.setter
    def length(self, value):
        self._set_field_value('field length', 0, 16, int, value)




class npl_bfd_udp_port_static_table_key_t(basic_npl_struct):
    def __init__(self, pd_pd_npu_host_inject_fields_aux_data_bfd_session_type=0):
        super().__init__(2)
        self.pd_pd_npu_host_inject_fields_aux_data_bfd_session_type = pd_pd_npu_host_inject_fields_aux_data_bfd_session_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_udp_port_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_pd_npu_host_inject_fields_aux_data_bfd_session_type(self):
        return self._get_field_value(0, 2)
    @pd_pd_npu_host_inject_fields_aux_data_bfd_session_type.setter
    def pd_pd_npu_host_inject_fields_aux_data_bfd_session_type(self, value):
        self._set_field_value('field pd_pd_npu_host_inject_fields_aux_data_bfd_session_type', 0, 2, int, value)

class npl_bfd_udp_port_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_udp_port_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_udp_port_static_result(self):
        return npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_udp_port_static_result.setter
    def bfd_udp_port_static_result(self, value):
        self._set_field_value('field bfd_udp_port_static_result', 0, 48, npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t, value)

class npl_bfd_udp_port_static_table_value_t(basic_npl_struct):
    def __init__(self, l4_ports=0, length=0):
        super().__init__(56)
        self.payloads.bfd_udp_port_static_result = npl_bfd_udp_port_static_table_bfd_udp_port_static_result_payload_t(l4_ports, length)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_bfd_udp_port_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_bfd_udp_port_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_bfd_udp_port_static_table_payloads_t, value)



# API-s for table: bitmap_oqg_map_table

NPL_BITMAP_OQG_MAP_TABLE_ACTION_WRITE = 0x0

class npl_bitmap_oqg_map_table_key_t(basic_npl_struct):
    def __init__(self, bitmap_oqg_map_index_index=0):
        super().__init__(8)
        self.bitmap_oqg_map_index_index = bitmap_oqg_map_index_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bitmap_oqg_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bitmap_oqg_map_index_index(self):
        return self._get_field_value(0, 8)
    @bitmap_oqg_map_index_index.setter
    def bitmap_oqg_map_index_index(self, value):
        self._set_field_value('field bitmap_oqg_map_index_index', 0, 8, int, value)

class npl_bitmap_oqg_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bitmap_oqg_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bitmap_oqg_map_result_oqg_id(self):
        return self._get_field_value(0, 8)
    @bitmap_oqg_map_result_oqg_id.setter
    def bitmap_oqg_map_result_oqg_id(self, value):
        self._set_field_value('field bitmap_oqg_map_result_oqg_id', 0, 8, int, value)

class npl_bitmap_oqg_map_table_value_t(basic_npl_struct):
    def __init__(self, bitmap_oqg_map_result_oqg_id=0):
        super().__init__(16)
        self.payloads.bitmap_oqg_map_result_oqg_id = bitmap_oqg_map_result_oqg_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bitmap_oqg_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_bitmap_oqg_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_bitmap_oqg_map_table_payloads_t, value)



# API-s for table: bvn_tc_map_table

NPL_BVN_TC_MAP_TABLE_ACTION_WRITE = 0x0

class npl_bvn_tc_map_table_key_t(basic_npl_struct):
    def __init__(self, tc=0, tc_map_profile=0):
        super().__init__(6)
        self.tc = tc
        self.tc_map_profile = tc_map_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bvn_tc_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tc(self):
        return self._get_field_value(0, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 0, 3, int, value)
    @property
    def tc_map_profile(self):
        return self._get_field_value(3, 3)
    @tc_map_profile.setter
    def tc_map_profile(self, value):
        self._set_field_value('field tc_map_profile', 3, 3, int, value)

class npl_bvn_tc_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bvn_tc_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bvn_offset(self):
        return self._get_field_value(0, 3)
    @bvn_offset.setter
    def bvn_offset(self, value):
        self._set_field_value('field bvn_offset', 0, 3, int, value)

class npl_bvn_tc_map_table_value_t(basic_npl_struct):
    def __init__(self, bvn_offset=0):
        super().__init__(11)
        self.payloads.bvn_offset = bvn_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_bvn_tc_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_bvn_tc_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_bvn_tc_map_table_payloads_t, value)



# API-s for table: calc_checksum_enable_table

NPL_CALC_CHECKSUM_ENABLE_TABLE_ACTION_WRITE = 0x0

class npl_calc_checksum_enable_table_key_t(basic_npl_struct):
    def __init__(self, txpp_npe_to_npe_metadata_fwd_header_type=0):
        super().__init__(4)
        self.txpp_npe_to_npe_metadata_fwd_header_type = txpp_npe_to_npe_metadata_fwd_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_calc_checksum_enable_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def txpp_npe_to_npe_metadata_fwd_header_type(self):
        return self._get_field_value(0, 4)
    @txpp_npe_to_npe_metadata_fwd_header_type.setter
    def txpp_npe_to_npe_metadata_fwd_header_type(self, value):
        self._set_field_value('field txpp_npe_to_npe_metadata_fwd_header_type', 0, 4, int, value)

class npl_calc_checksum_enable_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_calc_checksum_enable_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def calc_checksum_enable(self):
        return npl_calc_checksum_enable_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @calc_checksum_enable.setter
    def calc_checksum_enable(self, value):
        self._set_field_value('field calc_checksum_enable', 0, 1, npl_calc_checksum_enable_t, value)

class npl_calc_checksum_enable_table_value_t(basic_npl_struct):
    def __init__(self, calc_checksum_enable=0):
        super().__init__(9)
        self.payloads.calc_checksum_enable = calc_checksum_enable

    def _get_as_sub_field(data, offset_in_data):
        result = npl_calc_checksum_enable_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_calc_checksum_enable_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_calc_checksum_enable_table_payloads_t, value)



# API-s for table: ccm_flags_table

NPL_CCM_FLAGS_TABLE_ACTION_WRITE = 0x0

class npl_ccm_flags_table_key_t(basic_npl_struct):
    def __init__(self, ccm_period=0, tx_rdi=0):
        super().__init__(4)
        self.ccm_period = ccm_period
        self.tx_rdi = tx_rdi

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ccm_flags_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ccm_period(self):
        return self._get_field_value(0, 3)
    @ccm_period.setter
    def ccm_period(self, value):
        self._set_field_value('field ccm_period', 0, 3, int, value)
    @property
    def tx_rdi(self):
        return self._get_field_value(3, 1)
    @tx_rdi.setter
    def tx_rdi(self, value):
        self._set_field_value('field tx_rdi', 3, 1, int, value)

class npl_ccm_flags_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ccm_flags_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def flags(self):
        return self._get_field_value(0, 8)
    @flags.setter
    def flags(self, value):
        self._set_field_value('field flags', 0, 8, int, value)

class npl_ccm_flags_table_value_t(basic_npl_struct):
    def __init__(self, flags=0):
        super().__init__(16)
        self.payloads.flags = flags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ccm_flags_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_ccm_flags_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_ccm_flags_table_payloads_t, value)



# API-s for table: cif2npa_c_lri_macro

NPL_CIF2NPA_C_LRI_MACRO_ACTION_WRITE = 0x0

class npl_cif2npa_c_lri_macro_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_cif2npa_c_lri_macro_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_cif2npa_c_lri_macro_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cif2npa_c_lri_macro_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def next_macro_update_next_macro_id(self):
        return self._get_field_value(0, 8)
    @next_macro_update_next_macro_id.setter
    def next_macro_update_next_macro_id(self, value):
        self._set_field_value('field next_macro_update_next_macro_id', 0, 8, int, value)

class npl_cif2npa_c_lri_macro_value_t(basic_npl_struct):
    def __init__(self, next_macro_update_next_macro_id=0):
        super().__init__(16)
        self.payloads.next_macro_update_next_macro_id = next_macro_update_next_macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cif2npa_c_lri_macro_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_cif2npa_c_lri_macro_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_cif2npa_c_lri_macro_payloads_t, value)



# API-s for table: cif2npa_c_mps_macro

NPL_CIF2NPA_C_MPS_MACRO_ACTION_WRITE = 0x0

class npl_cif2npa_c_mps_macro_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_cif2npa_c_mps_macro_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_cif2npa_c_mps_macro_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cif2npa_c_mps_macro_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def next_macro_update_next_macro_id(self):
        return self._get_field_value(0, 8)
    @next_macro_update_next_macro_id.setter
    def next_macro_update_next_macro_id(self, value):
        self._set_field_value('field next_macro_update_next_macro_id', 0, 8, int, value)

class npl_cif2npa_c_mps_macro_value_t(basic_npl_struct):
    def __init__(self, next_macro_update_next_macro_id=0):
        super().__init__(16)
        self.payloads.next_macro_update_next_macro_id = next_macro_update_next_macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cif2npa_c_mps_macro_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_cif2npa_c_mps_macro_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_cif2npa_c_mps_macro_payloads_t, value)



# API-s for table: counters_block_config_table

NPL_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_WRITE = 0x0

class npl_counters_block_config_table_key_t(basic_npl_struct):
    def __init__(self, counter_block_id=0):
        super().__init__(7)
        self.counter_block_id = counter_block_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_counters_block_config_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def counter_block_id(self):
        return self._get_field_value(0, 7)
    @counter_block_id.setter
    def counter_block_id(self, value):
        self._set_field_value('field counter_block_id', 0, 7, int, value)

class npl_counters_block_config_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_counters_block_config_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def counters_block_config(self):
        return npl_counters_block_config_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counters_block_config.setter
    def counters_block_config(self, value):
        self._set_field_value('field counters_block_config', 0, 24, npl_counters_block_config_t, value)

class npl_counters_block_config_table_value_t(basic_npl_struct):
    def __init__(self, counters_block_config=0):
        super().__init__(32)
        self.payloads.counters_block_config = counters_block_config

    def _get_as_sub_field(data, offset_in_data):
        result = npl_counters_block_config_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_counters_block_config_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_counters_block_config_table_payloads_t, value)



# API-s for table: counters_voq_block_map_table

NPL_COUNTERS_VOQ_BLOCK_MAP_TABLE_ACTION_WRITE = 0x0

class npl_counters_voq_block_map_table_key_t(basic_npl_struct):
    def __init__(self, voq_base_id=0):
        super().__init__(10)
        self.voq_base_id = voq_base_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_counters_voq_block_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def voq_base_id(self):
        return self._get_field_value(0, 10)
    @voq_base_id.setter
    def voq_base_id(self, value):
        self._set_field_value('field voq_base_id', 0, 10, int, value)

class npl_counters_voq_block_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(23)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_counters_voq_block_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def counters_voq_block_map_result(self):
        return npl_counters_voq_block_map_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counters_voq_block_map_result.setter
    def counters_voq_block_map_result(self, value):
        self._set_field_value('field counters_voq_block_map_result', 0, 23, npl_counters_voq_block_map_result_t, value)

class npl_counters_voq_block_map_table_value_t(basic_npl_struct):
    def __init__(self, counters_voq_block_map_result=0):
        super().__init__(31)
        self.payloads.counters_voq_block_map_result = counters_voq_block_map_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_counters_voq_block_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(23, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 23, 8, int, value)
    @property
    def payloads(self):
        return npl_counters_voq_block_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 23, npl_counters_voq_block_map_table_payloads_t, value)



# API-s for table: cud_is_multicast_bitmap

NPL_CUD_IS_MULTICAST_BITMAP_ACTION_WRITE = 0x0

class npl_cud_is_multicast_bitmap_key_t(basic_npl_struct):
    def __init__(self, tx_cud_prefix=0):
        super().__init__(4)
        self.tx_cud_prefix = tx_cud_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cud_is_multicast_bitmap_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_cud_prefix(self):
        return self._get_field_value(0, 4)
    @tx_cud_prefix.setter
    def tx_cud_prefix(self, value):
        self._set_field_value('field tx_cud_prefix', 0, 4, int, value)

class npl_cud_is_multicast_bitmap_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cud_is_multicast_bitmap_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def cud_mapping_local_vars_cud_is_multicast(self):
        return self._get_field_value(0, 1)
    @cud_mapping_local_vars_cud_is_multicast.setter
    def cud_mapping_local_vars_cud_is_multicast(self, value):
        self._set_field_value('field cud_mapping_local_vars_cud_is_multicast', 0, 1, int, value)

class npl_cud_is_multicast_bitmap_value_t(basic_npl_struct):
    def __init__(self, cud_mapping_local_vars_cud_is_multicast=0):
        super().__init__(9)
        self.payloads.cud_mapping_local_vars_cud_is_multicast = cud_mapping_local_vars_cud_is_multicast

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cud_is_multicast_bitmap_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_cud_is_multicast_bitmap_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_cud_is_multicast_bitmap_payloads_t, value)



# API-s for table: cud_narrow_hw_table

NPL_CUD_NARROW_HW_TABLE_ACTION_WRITE = 0x0

class npl_cud_narrow_hw_table_key_t(basic_npl_struct):
    def __init__(self, cud_mapping_local_vars_mc_copy_id_12_0_=0):
        super().__init__(13)
        self.cud_mapping_local_vars_mc_copy_id_12_0_ = cud_mapping_local_vars_mc_copy_id_12_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cud_narrow_hw_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def cud_mapping_local_vars_mc_copy_id_12_0_(self):
        return self._get_field_value(0, 13)
    @cud_mapping_local_vars_mc_copy_id_12_0_.setter
    def cud_mapping_local_vars_mc_copy_id_12_0_(self, value):
        self._set_field_value('field cud_mapping_local_vars_mc_copy_id_12_0_', 0, 13, int, value)

class npl_cud_narrow_hw_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cud_narrow_hw_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def cud_mapping_local_vars_narrow_mc_cud(self):
        return self._get_field_value(0, 40)
    @cud_mapping_local_vars_narrow_mc_cud.setter
    def cud_mapping_local_vars_narrow_mc_cud(self, value):
        self._set_field_value('field cud_mapping_local_vars_narrow_mc_cud', 0, 40, int, value)

class npl_cud_narrow_hw_table_value_t(basic_npl_struct):
    def __init__(self, cud_mapping_local_vars_narrow_mc_cud=0):
        super().__init__(48)
        self.payloads.cud_mapping_local_vars_narrow_mc_cud = cud_mapping_local_vars_narrow_mc_cud

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cud_narrow_hw_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(40, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 40, 8, int, value)
    @property
    def payloads(self):
        return npl_cud_narrow_hw_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 40, npl_cud_narrow_hw_table_payloads_t, value)



# API-s for table: cud_wide_hw_table

NPL_CUD_WIDE_HW_TABLE_ACTION_WRITE = 0x0

class npl_cud_wide_hw_table_key_t(basic_npl_struct):
    def __init__(self, cud_mapping_local_vars_mc_copy_id_12_1_=0):
        super().__init__(12)
        self.cud_mapping_local_vars_mc_copy_id_12_1_ = cud_mapping_local_vars_mc_copy_id_12_1_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cud_wide_hw_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def cud_mapping_local_vars_mc_copy_id_12_1_(self):
        return self._get_field_value(0, 12)
    @cud_mapping_local_vars_mc_copy_id_12_1_.setter
    def cud_mapping_local_vars_mc_copy_id_12_1_(self, value):
        self._set_field_value('field cud_mapping_local_vars_mc_copy_id_12_1_', 0, 12, int, value)

class npl_cud_wide_hw_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cud_wide_hw_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def cud_mapping_local_vars_wide_mc_cud(self):
        return npl_cud_mapping_local_vars_t_anonymous_union_wide_mc_cud_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @cud_mapping_local_vars_wide_mc_cud.setter
    def cud_mapping_local_vars_wide_mc_cud(self, value):
        self._set_field_value('field cud_mapping_local_vars_wide_mc_cud', 0, 80, npl_cud_mapping_local_vars_t_anonymous_union_wide_mc_cud_t, value)

class npl_cud_wide_hw_table_value_t(basic_npl_struct):
    def __init__(self, cud_mapping_local_vars_wide_mc_cud=0):
        super().__init__(88)
        self.payloads.cud_mapping_local_vars_wide_mc_cud = cud_mapping_local_vars_wide_mc_cud

    def _get_as_sub_field(data, offset_in_data):
        result = npl_cud_wide_hw_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_cud_wide_hw_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_cud_wide_hw_table_payloads_t, value)



# API-s for table: default_egress_ipv4_sec_acl_compound_table

NPL_DEFAULT_EGRESS_IPV4_SEC_ACL_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_default_egress_ipv4_sec_acl_compound_table_key_t(basic_npl_struct):
    def __init__(self, acl_id1=0, first_fragment1=0, tcp_flags1=0, proto1=0, ttl1=0, qos_tag1=0, sport1=0, sip_dip1=0):
        super().__init__(133)
        self._set_field_value('const field', 0, 4, int, 0x2)
        self.acl_id1 = acl_id1
        self.first_fragment1 = first_fragment1
        self.tcp_flags1 = tcp_flags1
        self.proto1 = proto1
        self.ttl1 = ttl1
        self.qos_tag1 = qos_tag1
        self.sport1 = sport1
        self.sip_dip1 = sip_dip1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv4_sec_acl_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_EGRESS_ACL_DB_IPV4_SEC_DEFAULT_ternary_0x2(self):
        return self._get_field_value(0, 4)
    @property
    def acl_id1(self):
        return self._get_field_value(4, 4)
    @acl_id1.setter
    def acl_id1(self, value):
        self._set_field_value('field acl_id1', 4, 4, int, value)
    @property
    def first_fragment1(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @first_fragment1.setter
    def first_fragment1(self, value):
        self._set_field_value('field first_fragment1', 8, 1, npl_bool_t, value)
    @property
    def tcp_flags1(self):
        return self._get_field_value(9, 6)
    @tcp_flags1.setter
    def tcp_flags1(self, value):
        self._set_field_value('field tcp_flags1', 9, 6, int, value)
    @property
    def proto1(self):
        return self._get_field_value(15, 8)
    @proto1.setter
    def proto1(self, value):
        self._set_field_value('field proto1', 15, 8, int, value)
    @property
    def ttl1(self):
        return self._get_field_value(23, 8)
    @ttl1.setter
    def ttl1(self, value):
        self._set_field_value('field ttl1', 23, 8, int, value)
    @property
    def qos_tag1(self):
        return self._get_field_value(31, 6)
    @qos_tag1.setter
    def qos_tag1(self, value):
        self._set_field_value('field qos_tag1', 31, 6, int, value)
    @property
    def sport1(self):
        return npl_l4_ports_header_t._get_as_sub_field(self._data, self._offset_in_data + 37)
    @sport1.setter
    def sport1(self, value):
        self._set_field_value('field sport1', 37, 32, npl_l4_ports_header_t, value)
    @property
    def sip_dip1(self):
        return npl_ipv4_sip_dip_t._get_as_sub_field(self._data, self._offset_in_data + 69)
    @sip_dip1.setter
    def sip_dip1(self, value):
        self._set_field_value('field sip_dip1', 69, 64, npl_ipv4_sip_dip_t, value)

class npl_default_egress_ipv4_sec_acl_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv4_sec_acl_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def egress_sec_acl_result(self):
        return npl_egress_sec_acl_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @egress_sec_acl_result.setter
    def egress_sec_acl_result(self, value):
        self._set_field_value('field egress_sec_acl_result', 0, 24, npl_egress_sec_acl_result_t, value)

class npl_default_egress_ipv4_sec_acl_compound_table_value_t(basic_npl_struct):
    def __init__(self, egress_sec_acl_result=0):
        super().__init__(32)
        self.payloads.egress_sec_acl_result = egress_sec_acl_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv4_sec_acl_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_default_egress_ipv4_sec_acl_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_default_egress_ipv4_sec_acl_compound_table_payloads_t, value)



# API-s for table: default_egress_ipv4_sec_acl_table

NPL_DEFAULT_EGRESS_IPV4_SEC_ACL_TABLE_ACTION_WRITE = 0x0

class npl_default_egress_ipv4_sec_acl_table_key_t(basic_npl_struct):
    def __init__(self, acl_id=0, ip_first_fragment=0, tcp_flags=0, protocol=0, new_ttl=0, fwd_qos_tag_5_0_=0, dst_port=0, src_port=0, dip=0, sip=0):
        super().__init__(129)
        self.acl_id = acl_id
        self.ip_first_fragment = ip_first_fragment
        self.tcp_flags = tcp_flags
        self.protocol = protocol
        self.new_ttl = new_ttl
        self.fwd_qos_tag_5_0_ = fwd_qos_tag_5_0_
        self.dst_port = dst_port
        self.src_port = src_port
        self.dip = dip
        self.sip = sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv4_sec_acl_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def acl_id(self):
        return self._get_field_value(0, 4)
    @acl_id.setter
    def acl_id(self, value):
        self._set_field_value('field acl_id', 0, 4, int, value)
    @property
    def ip_first_fragment(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @ip_first_fragment.setter
    def ip_first_fragment(self, value):
        self._set_field_value('field ip_first_fragment', 4, 1, npl_bool_t, value)
    @property
    def tcp_flags(self):
        return self._get_field_value(5, 6)
    @tcp_flags.setter
    def tcp_flags(self, value):
        self._set_field_value('field tcp_flags', 5, 6, int, value)
    @property
    def protocol(self):
        return self._get_field_value(11, 8)
    @protocol.setter
    def protocol(self, value):
        self._set_field_value('field protocol', 11, 8, int, value)
    @property
    def new_ttl(self):
        return self._get_field_value(19, 8)
    @new_ttl.setter
    def new_ttl(self, value):
        self._set_field_value('field new_ttl', 19, 8, int, value)
    @property
    def fwd_qos_tag_5_0_(self):
        return self._get_field_value(27, 6)
    @fwd_qos_tag_5_0_.setter
    def fwd_qos_tag_5_0_(self, value):
        self._set_field_value('field fwd_qos_tag_5_0_', 27, 6, int, value)
    @property
    def dst_port(self):
        return self._get_field_value(33, 16)
    @dst_port.setter
    def dst_port(self, value):
        self._set_field_value('field dst_port', 33, 16, int, value)
    @property
    def src_port(self):
        return self._get_field_value(49, 16)
    @src_port.setter
    def src_port(self, value):
        self._set_field_value('field src_port', 49, 16, int, value)
    @property
    def dip(self):
        return self._get_field_value(65, 32)
    @dip.setter
    def dip(self, value):
        self._set_field_value('field dip', 65, 32, int, value)
    @property
    def sip(self):
        return self._get_field_value(97, 32)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 97, 32, int, value)

class npl_default_egress_ipv4_sec_acl_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv4_sec_acl_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def egress_sec_acl_result(self):
        return npl_egress_sec_acl_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @egress_sec_acl_result.setter
    def egress_sec_acl_result(self, value):
        self._set_field_value('field egress_sec_acl_result', 0, 24, npl_egress_sec_acl_result_t, value)

class npl_default_egress_ipv4_sec_acl_table_value_t(basic_npl_struct):
    def __init__(self, egress_sec_acl_result=0):
        super().__init__(32)
        self.payloads.egress_sec_acl_result = egress_sec_acl_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv4_sec_acl_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_default_egress_ipv4_sec_acl_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_default_egress_ipv4_sec_acl_table_payloads_t, value)



# API-s for table: default_egress_ipv6_acl_compound_table

NPL_DEFAULT_EGRESS_IPV6_ACL_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_default_egress_ipv6_acl_compound_table_key_t(basic_npl_struct):
    def __init__(self, tcp_flags=0, qos_tag=0, src_port=0, sip=0, tx_npu_header_ip_first_fragment=0, dip=0, encap_local_vars_sec_acl_ids_acl_v6_id=0, dst_port=0, next_header=0):
        super().__init__(320)
        self._set_field_value('const field', 0, 4, int, 0x1)
        self._set_field_value('const field', 160, 3, int, 0x1)
        self.tcp_flags = tcp_flags
        self.qos_tag = qos_tag
        self.src_port = src_port
        self.sip = sip
        self.tx_npu_header_ip_first_fragment = tx_npu_header_ip_first_fragment
        self.dip = dip
        self.encap_local_vars_sec_acl_ids_acl_v6_id = encap_local_vars_sec_acl_ids_acl_v6_id
        self.dst_port = dst_port
        self.next_header = next_header

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv6_acl_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_EGRESS_ACL_DB_IPV6_MASTER_DEFAULT_ternary_0x1(self):
        return self._get_field_value(0, 4)
    @property
    def tcp_flags(self):
        return self._get_field_value(4, 6)
    @tcp_flags.setter
    def tcp_flags(self, value):
        self._set_field_value('field tcp_flags', 4, 6, int, value)
    @property
    def qos_tag(self):
        return self._get_field_value(10, 6)
    @qos_tag.setter
    def qos_tag(self, value):
        self._set_field_value('field qos_tag', 10, 6, int, value)
    @property
    def src_port(self):
        return self._get_field_value(16, 16)
    @src_port.setter
    def src_port(self, value):
        self._set_field_value('field src_port', 16, 16, int, value)
    @property
    def sip(self):
        return self._get_field_value(32, 128)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 32, 128, int, value)
    @property
    def const2_EGRESS_ACL_DB_IPV6_MASTER_DEFAULT_2_0__ternary_0x1(self):
        return self._get_field_value(160, 3)
    @property
    def tx_npu_header_ip_first_fragment(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 163)
    @tx_npu_header_ip_first_fragment.setter
    def tx_npu_header_ip_first_fragment(self, value):
        self._set_field_value('field tx_npu_header_ip_first_fragment', 163, 1, npl_bool_t, value)
    @property
    def dip(self):
        return self._get_field_value(164, 128)
    @dip.setter
    def dip(self, value):
        self._set_field_value('field dip', 164, 128, int, value)
    @property
    def encap_local_vars_sec_acl_ids_acl_v6_id(self):
        return self._get_field_value(292, 4)
    @encap_local_vars_sec_acl_ids_acl_v6_id.setter
    def encap_local_vars_sec_acl_ids_acl_v6_id(self, value):
        self._set_field_value('field encap_local_vars_sec_acl_ids_acl_v6_id', 292, 4, int, value)
    @property
    def dst_port(self):
        return self._get_field_value(296, 16)
    @dst_port.setter
    def dst_port(self, value):
        self._set_field_value('field dst_port', 296, 16, int, value)
    @property
    def next_header(self):
        return self._get_field_value(312, 8)
    @next_header.setter
    def next_header(self, value):
        self._set_field_value('field next_header', 312, 8, int, value)

class npl_default_egress_ipv6_acl_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv6_acl_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def egress_ipv6_acl_result_egress_ipv6_acl_result(self):
        return npl_egress_ipv6_acl_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @egress_ipv6_acl_result_egress_ipv6_acl_result.setter
    def egress_ipv6_acl_result_egress_ipv6_acl_result(self, value):
        self._set_field_value('field egress_ipv6_acl_result_egress_ipv6_acl_result', 0, 24, npl_egress_ipv6_acl_result_t, value)

class npl_default_egress_ipv6_acl_compound_table_value_t(basic_npl_struct):
    def __init__(self, egress_ipv6_acl_result_egress_ipv6_acl_result=0):
        super().__init__(32)
        self.payloads.egress_ipv6_acl_result_egress_ipv6_acl_result = egress_ipv6_acl_result_egress_ipv6_acl_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv6_acl_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_default_egress_ipv6_acl_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_default_egress_ipv6_acl_compound_table_payloads_t, value)



# API-s for table: default_egress_ipv6_acl_sec_table

NPL_DEFAULT_EGRESS_IPV6_ACL_SEC_TABLE_ACTION_WRITE = 0x0

class npl_default_egress_ipv6_acl_sec_table_key_t(basic_npl_struct):
    def __init__(self, tcp_flags=0, qos_tag=0, src_port=0, sip=0, first_fragment=0, dip=0, acl_id=0, dst_port=0, next_header=0):
        super().__init__(320)
        self._set_field_value('const field', 0, 4, int, 0x1)
        self._set_field_value('const field', 160, 3, int, 0x1)
        self.tcp_flags = tcp_flags
        self.qos_tag = qos_tag
        self.src_port = src_port
        self.sip = sip
        self.first_fragment = first_fragment
        self.dip = dip
        self.acl_id = acl_id
        self.dst_port = dst_port
        self.next_header = next_header

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv6_acl_sec_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_EGRESS_ACL_DB_IPV6_MASTER_DEFAULT_ternary_0x1(self):
        return self._get_field_value(0, 4)
    @property
    def tcp_flags(self):
        return self._get_field_value(4, 6)
    @tcp_flags.setter
    def tcp_flags(self, value):
        self._set_field_value('field tcp_flags', 4, 6, int, value)
    @property
    def qos_tag(self):
        return self._get_field_value(10, 6)
    @qos_tag.setter
    def qos_tag(self, value):
        self._set_field_value('field qos_tag', 10, 6, int, value)
    @property
    def src_port(self):
        return self._get_field_value(16, 16)
    @src_port.setter
    def src_port(self, value):
        self._set_field_value('field src_port', 16, 16, int, value)
    @property
    def sip(self):
        return self._get_field_value(32, 128)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 32, 128, int, value)
    @property
    def const2_EGRESS_ACL_DB_IPV6_MASTER_DEFAULT_2_0__ternary_0x1(self):
        return self._get_field_value(160, 3)
    @property
    def first_fragment(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 163)
    @first_fragment.setter
    def first_fragment(self, value):
        self._set_field_value('field first_fragment', 163, 1, npl_bool_t, value)
    @property
    def dip(self):
        return self._get_field_value(164, 128)
    @dip.setter
    def dip(self, value):
        self._set_field_value('field dip', 164, 128, int, value)
    @property
    def acl_id(self):
        return self._get_field_value(292, 4)
    @acl_id.setter
    def acl_id(self, value):
        self._set_field_value('field acl_id', 292, 4, int, value)
    @property
    def dst_port(self):
        return self._get_field_value(296, 16)
    @dst_port.setter
    def dst_port(self, value):
        self._set_field_value('field dst_port', 296, 16, int, value)
    @property
    def next_header(self):
        return self._get_field_value(312, 8)
    @next_header.setter
    def next_header(self, value):
        self._set_field_value('field next_header', 312, 8, int, value)

class npl_default_egress_ipv6_acl_sec_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv6_acl_sec_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sec_action(self):
        return npl_egress_sec_acl_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sec_action.setter
    def sec_action(self, value):
        self._set_field_value('field sec_action', 0, 24, npl_egress_sec_acl_result_t, value)

class npl_default_egress_ipv6_acl_sec_table_value_t(basic_npl_struct):
    def __init__(self, sec_action=0):
        super().__init__(32)
        self.payloads.sec_action = sec_action

    def _get_as_sub_field(data, offset_in_data):
        result = npl_default_egress_ipv6_acl_sec_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_default_egress_ipv6_acl_sec_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_default_egress_ipv6_acl_sec_table_payloads_t, value)



# API-s for table: dest_slice_voq_map_table

NPL_DEST_SLICE_VOQ_MAP_TABLE_ACTION_WRITE = 0x0

class npl_dest_slice_voq_map_table_key_t(basic_npl_struct):
    def __init__(self, calc_msvoq_num_input_tx_slice=0):
        super().__init__(3)
        self.calc_msvoq_num_input_tx_slice = calc_msvoq_num_input_tx_slice

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dest_slice_voq_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def calc_msvoq_num_input_tx_slice(self):
        return self._get_field_value(0, 3)
    @calc_msvoq_num_input_tx_slice.setter
    def calc_msvoq_num_input_tx_slice(self, value):
        self._set_field_value('field calc_msvoq_num_input_tx_slice', 0, 3, int, value)

class npl_dest_slice_voq_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dest_slice_voq_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dest_slice_voq_map_table_result(self):
        return npl_dest_slice_voq_map_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dest_slice_voq_map_table_result.setter
    def dest_slice_voq_map_table_result(self, value):
        self._set_field_value('field dest_slice_voq_map_table_result', 0, 16, npl_dest_slice_voq_map_table_result_t, value)

class npl_dest_slice_voq_map_table_value_t(basic_npl_struct):
    def __init__(self, dest_slice_voq_map_table_result=0):
        super().__init__(24)
        self.payloads.dest_slice_voq_map_table_result = dest_slice_voq_map_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dest_slice_voq_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_dest_slice_voq_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_dest_slice_voq_map_table_payloads_t, value)



# API-s for table: destination_decoding_table

NPL_DESTINATION_DECODING_TABLE_ACTION_WRITE = 0x0

class npl_destination_decoding_table_key_t(basic_npl_struct):
    def __init__(self, destination_encoding=0):
        super().__init__(5)
        self.destination_encoding = destination_encoding

    def _get_as_sub_field(data, offset_in_data):
        result = npl_destination_decoding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def destination_encoding(self):
        return self._get_field_value(0, 5)
    @destination_encoding.setter
    def destination_encoding(self, value):
        self._set_field_value('field destination_encoding', 0, 5, int, value)

class npl_destination_decoding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_destination_decoding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def destination_decoding_table_result(self):
        return npl_destination_decoding_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @destination_decoding_table_result.setter
    def destination_decoding_table_result(self, value):
        self._set_field_value('field destination_decoding_table_result', 0, 8, npl_destination_decoding_table_result_t, value)

class npl_destination_decoding_table_value_t(basic_npl_struct):
    def __init__(self, destination_decoding_table_result=0):
        super().__init__(16)
        self.payloads.destination_decoding_table_result = destination_decoding_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_destination_decoding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_destination_decoding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_destination_decoding_table_payloads_t, value)



# API-s for table: device_mode_table

NPL_DEVICE_MODE_TABLE_ACTION_WRITE = 0x0

class npl_device_mode_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_device_mode_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_device_mode_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_device_mode_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def device_mode_table_result(self):
        return npl_device_mode_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @device_mode_table_result.setter
    def device_mode_table_result(self, value):
        self._set_field_value('field device_mode_table_result', 0, 2, npl_device_mode_table_result_t, value)

class npl_device_mode_table_value_t(basic_npl_struct):
    def __init__(self, device_mode_table_result=0):
        super().__init__(10)
        self.payloads.device_mode_table_result = device_mode_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_device_mode_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_device_mode_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_device_mode_table_payloads_t, value)



# API-s for table: dsp_l2_attributes_table

NPL_DSP_L2_ATTRIBUTES_TABLE_ACTION_WRITE = 0x0

class npl_dsp_l2_attributes_table_key_t(basic_npl_struct):
    def __init__(self, omd_txpp=0):
        super().__init__(6)
        self.omd_txpp = omd_txpp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dsp_l2_attributes_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def omd_txpp(self):
        return self._get_field_value(0, 6)
    @omd_txpp.setter
    def omd_txpp(self, value):
        self._set_field_value('field omd_txpp', 0, 6, int, value)

class npl_dsp_l2_attributes_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(52)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dsp_l2_attributes_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dsp_l2_attributes(self):
        return npl_dsp_l2_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dsp_l2_attributes.setter
    def dsp_l2_attributes(self, value):
        self._set_field_value('field dsp_l2_attributes', 0, 52, npl_dsp_l2_attributes_t, value)

class npl_dsp_l2_attributes_table_value_t(basic_npl_struct):
    def __init__(self, dsp_l2_attributes=0):
        super().__init__(60)
        self.payloads.dsp_l2_attributes = dsp_l2_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dsp_l2_attributes_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(52, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 52, 8, int, value)
    @property
    def payloads(self):
        return npl_dsp_l2_attributes_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 52, npl_dsp_l2_attributes_table_payloads_t, value)



# API-s for table: dsp_l3_attributes_table

NPL_DSP_L3_ATTRIBUTES_TABLE_ACTION_WRITE = 0x0

class npl_dsp_l3_attributes_table_key_t(basic_npl_struct):
    def __init__(self, omd_txpp=0):
        super().__init__(6)
        self.omd_txpp = omd_txpp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dsp_l3_attributes_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def omd_txpp(self):
        return self._get_field_value(0, 6)
    @omd_txpp.setter
    def omd_txpp(self, value):
        self._set_field_value('field omd_txpp', 0, 6, int, value)

class npl_dsp_l3_attributes_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(38)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dsp_l3_attributes_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dsp_l3_attributes(self):
        return npl_dsp_l3_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dsp_l3_attributes.setter
    def dsp_l3_attributes(self, value):
        self._set_field_value('field dsp_l3_attributes', 0, 38, npl_dsp_l3_attributes_t, value)

class npl_dsp_l3_attributes_table_value_t(basic_npl_struct):
    def __init__(self, dsp_l3_attributes=0):
        super().__init__(46)
        self.payloads.dsp_l3_attributes = dsp_l3_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dsp_l3_attributes_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(38, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 38, 8, int, value)
    @property
    def payloads(self):
        return npl_dsp_l3_attributes_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 38, npl_dsp_l3_attributes_table_payloads_t, value)



# API-s for table: dummy_dip_index_table

NPL_DUMMY_DIP_INDEX_TABLE_ACTION_WRITE = 0x0

class npl_dummy_dip_index_table_key_t(basic_npl_struct):
    def __init__(self, dummy_dip_index=0):
        super().__init__(9)
        self.dummy_dip_index = dummy_dip_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dummy_dip_index_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dummy_dip_index(self):
        return npl_dip_index_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dummy_dip_index.setter
    def dummy_dip_index(self, value):
        self._set_field_value('field dummy_dip_index', 0, 9, npl_dip_index_t, value)

class npl_dummy_dip_index_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dummy_dip_index_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dummy_data(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dummy_data.setter
    def dummy_data(self, value):
        self._set_field_value('field dummy_data', 0, 1, npl_bool_t, value)

class npl_dummy_dip_index_table_value_t(basic_npl_struct):
    def __init__(self, dummy_data=0):
        super().__init__(9)
        self.payloads.dummy_data = dummy_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_dummy_dip_index_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_dummy_dip_index_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_dummy_dip_index_table_payloads_t, value)



# API-s for table: ecn_remark_static_table

NPL_ECN_REMARK_STATIC_TABLE_ACTION_SET_VALUE = 0x0

class npl_ecn_remark_static_table_set_value_payload_t(basic_npl_struct):
    def __init__(self, new_ecn=0, en_ecn_counting=0):
        super().__init__(3)
        self.new_ecn = new_ecn
        self.en_ecn_counting = en_ecn_counting

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ecn_remark_static_table_set_value_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def new_ecn(self):
        return self._get_field_value(1, 2)
    @new_ecn.setter
    def new_ecn(self, value):
        self._set_field_value('field new_ecn', 1, 2, int, value)
    @property
    def en_ecn_counting(self):
        return self._get_field_value(0, 1)
    @en_ecn_counting.setter
    def en_ecn_counting(self, value):
        self._set_field_value('field en_ecn_counting', 0, 1, int, value)




class npl_ecn_remark_static_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_tos_3_0_=0, packet_ipv4_header_tos_3_0_=0, tx_npu_header_fwd_header_type=0, pd_cong_on=0):
        super().__init__(13)
        self.packet_ipv6_header_tos_3_0_ = packet_ipv6_header_tos_3_0_
        self.packet_ipv4_header_tos_3_0_ = packet_ipv4_header_tos_3_0_
        self.tx_npu_header_fwd_header_type = tx_npu_header_fwd_header_type
        self.pd_cong_on = pd_cong_on

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ecn_remark_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_ipv6_header_tos_3_0_(self):
        return self._get_field_value(0, 4)
    @packet_ipv6_header_tos_3_0_.setter
    def packet_ipv6_header_tos_3_0_(self, value):
        self._set_field_value('field packet_ipv6_header_tos_3_0_', 0, 4, int, value)
    @property
    def packet_ipv4_header_tos_3_0_(self):
        return self._get_field_value(4, 4)
    @packet_ipv4_header_tos_3_0_.setter
    def packet_ipv4_header_tos_3_0_(self, value):
        self._set_field_value('field packet_ipv4_header_tos_3_0_', 4, 4, int, value)
    @property
    def tx_npu_header_fwd_header_type(self):
        return self._get_field_value(8, 4)
    @tx_npu_header_fwd_header_type.setter
    def tx_npu_header_fwd_header_type(self, value):
        self._set_field_value('field tx_npu_header_fwd_header_type', 8, 4, int, value)
    @property
    def pd_cong_on(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 12)
    @pd_cong_on.setter
    def pd_cong_on(self, value):
        self._set_field_value('field pd_cong_on', 12, 1, npl_bool_t, value)

class npl_ecn_remark_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ecn_remark_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_value(self):
        return npl_ecn_remark_static_table_set_value_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_value.setter
    def set_value(self, value):
        self._set_field_value('field set_value', 0, 3, npl_ecn_remark_static_table_set_value_payload_t, value)

class npl_ecn_remark_static_table_value_t(basic_npl_struct):
    def __init__(self, new_ecn=0, en_ecn_counting=0):
        super().__init__(11)
        self.payloads.set_value = npl_ecn_remark_static_table_set_value_payload_t(new_ecn, en_ecn_counting)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ecn_remark_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_ecn_remark_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_ecn_remark_static_table_payloads_t, value)



# API-s for table: egress_mac_ipv4_sec_acl_table

NPL_EGRESS_MAC_IPV4_SEC_ACL_TABLE_ACTION_WRITE = 0x0

class npl_egress_mac_ipv4_sec_acl_table_key_t(basic_npl_struct):
    def __init__(self, acl_id=0, ip_first_fragment=0, tcp_flags=0, ttl_and_protocol=0, tos=0, l4_ports=0, sip_dip=0):
        super().__init__(131)
        self.acl_id = acl_id
        self.ip_first_fragment = ip_first_fragment
        self.tcp_flags = tcp_flags
        self.ttl_and_protocol = ttl_and_protocol
        self.tos = tos
        self.l4_ports = l4_ports
        self.sip_dip = sip_dip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_egress_mac_ipv4_sec_acl_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def acl_id(self):
        return self._get_field_value(0, 4)
    @acl_id.setter
    def acl_id(self, value):
        self._set_field_value('field acl_id', 0, 4, int, value)
    @property
    def ip_first_fragment(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @ip_first_fragment.setter
    def ip_first_fragment(self, value):
        self._set_field_value('field ip_first_fragment', 4, 1, npl_bool_t, value)
    @property
    def tcp_flags(self):
        return self._get_field_value(5, 6)
    @tcp_flags.setter
    def tcp_flags(self, value):
        self._set_field_value('field tcp_flags', 5, 6, int, value)
    @property
    def ttl_and_protocol(self):
        return npl_ipv4_ttl_and_protocol_t._get_as_sub_field(self._data, self._offset_in_data + 11)
    @ttl_and_protocol.setter
    def ttl_and_protocol(self, value):
        self._set_field_value('field ttl_and_protocol', 11, 16, npl_ipv4_ttl_and_protocol_t, value)
    @property
    def tos(self):
        return npl_tos_t._get_as_sub_field(self._data, self._offset_in_data + 27)
    @tos.setter
    def tos(self, value):
        self._set_field_value('field tos', 27, 8, npl_tos_t, value)
    @property
    def l4_ports(self):
        return npl_l4_ports_header_t._get_as_sub_field(self._data, self._offset_in_data + 35)
    @l4_ports.setter
    def l4_ports(self, value):
        self._set_field_value('field l4_ports', 35, 32, npl_l4_ports_header_t, value)
    @property
    def sip_dip(self):
        return npl_ipv4_sip_dip_t._get_as_sub_field(self._data, self._offset_in_data + 67)
    @sip_dip.setter
    def sip_dip(self, value):
        self._set_field_value('field sip_dip', 67, 64, npl_ipv4_sip_dip_t, value)

class npl_egress_mac_ipv4_sec_acl_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_egress_mac_ipv4_sec_acl_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def egress_sec_acl_result(self):
        return npl_egress_sec_acl_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @egress_sec_acl_result.setter
    def egress_sec_acl_result(self, value):
        self._set_field_value('field egress_sec_acl_result', 0, 24, npl_egress_sec_acl_result_t, value)

class npl_egress_mac_ipv4_sec_acl_table_value_t(basic_npl_struct):
    def __init__(self, egress_sec_acl_result=0):
        super().__init__(32)
        self.payloads.egress_sec_acl_result = egress_sec_acl_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_egress_mac_ipv4_sec_acl_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_egress_mac_ipv4_sec_acl_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_egress_mac_ipv4_sec_acl_table_payloads_t, value)



# API-s for table: egress_nh_and_svi_direct0_table

NPL_EGRESS_NH_AND_SVI_DIRECT0_TABLE_ACTION_WRITE = 0x0

class npl_egress_nh_and_svi_direct0_table_key_t(basic_npl_struct):
    def __init__(self, egress_direct0_key=0):
        super().__init__(12)
        self.egress_direct0_key = egress_direct0_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_egress_nh_and_svi_direct0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def egress_direct0_key(self):
        return npl_egress_direct0_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @egress_direct0_key.setter
    def egress_direct0_key(self, value):
        self._set_field_value('field egress_direct0_key', 0, 12, npl_egress_direct0_key_t, value)

class npl_egress_nh_and_svi_direct0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(119)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_egress_nh_and_svi_direct0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def nh_and_svi_payload(self):
        return npl_nh_and_svi_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @nh_and_svi_payload.setter
    def nh_and_svi_payload(self, value):
        self._set_field_value('field nh_and_svi_payload', 0, 119, npl_nh_and_svi_payload_t, value)

class npl_egress_nh_and_svi_direct0_table_value_t(basic_npl_struct):
    def __init__(self, nh_and_svi_payload=0):
        super().__init__(127)
        self.payloads.nh_and_svi_payload = nh_and_svi_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_egress_nh_and_svi_direct0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(119, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 119, 8, int, value)
    @property
    def payloads(self):
        return npl_egress_nh_and_svi_direct0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 119, npl_egress_nh_and_svi_direct0_table_payloads_t, value)



# API-s for table: egress_nh_and_svi_direct1_table

NPL_EGRESS_NH_AND_SVI_DIRECT1_TABLE_ACTION_WRITE = 0x0

class npl_egress_nh_and_svi_direct1_table_key_t(basic_npl_struct):
    def __init__(self, egress_direct1_key=0):
        super().__init__(10)
        self.egress_direct1_key = egress_direct1_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_egress_nh_and_svi_direct1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def egress_direct1_key(self):
        return npl_egress_direct1_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @egress_direct1_key.setter
    def egress_direct1_key(self, value):
        self._set_field_value('field egress_direct1_key', 0, 10, npl_egress_direct1_key_t, value)

class npl_egress_nh_and_svi_direct1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(119)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_egress_nh_and_svi_direct1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def nh_and_svi_payload(self):
        return npl_nh_and_svi_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @nh_and_svi_payload.setter
    def nh_and_svi_payload(self, value):
        self._set_field_value('field nh_and_svi_payload', 0, 119, npl_nh_and_svi_payload_t, value)

class npl_egress_nh_and_svi_direct1_table_value_t(basic_npl_struct):
    def __init__(self, nh_and_svi_payload=0):
        super().__init__(127)
        self.payloads.nh_and_svi_payload = nh_and_svi_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_egress_nh_and_svi_direct1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(119, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 119, 8, int, value)
    @property
    def payloads(self):
        return npl_egress_nh_and_svi_direct1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 119, npl_egress_nh_and_svi_direct1_table_payloads_t, value)



# API-s for table: em_mp_table

NPL_EM_MP_TABLE_ACTION_WRITE = 0x0

class npl_em_mp_table_key_t(basic_npl_struct):
    def __init__(self, udp_dest_port=0, your_discr=0):
        super().__init__(48)
        self.udp_dest_port = udp_dest_port
        self.your_discr = your_discr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_em_mp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def udp_dest_port(self):
        return self._get_field_value(0, 16)
    @udp_dest_port.setter
    def udp_dest_port(self, value):
        self._set_field_value('field udp_dest_port', 0, 16, int, value)
    @property
    def your_discr(self):
        return self._get_field_value(16, 32)
    @your_discr.setter
    def your_discr(self, value):
        self._set_field_value('field your_discr', 16, 32, int, value)

class npl_em_mp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_em_mp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bfd_em_payload(self):
        return npl_em_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @bfd_em_payload.setter
    def bfd_em_payload(self, value):
        self._set_field_value('field bfd_em_payload', 0, 40, npl_em_payload_t, value)

class npl_em_mp_table_value_t(basic_npl_struct):
    def __init__(self, bfd_em_payload=0):
        super().__init__(48)
        self.payloads.bfd_em_payload = bfd_em_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_em_mp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(40, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 40, 8, int, value)
    @property
    def payloads(self):
        return npl_em_mp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 40, npl_em_mp_table_payloads_t, value)



# API-s for table: em_pfc_cong_table

NPL_EM_PFC_CONG_TABLE_ACTION_WRITE = 0x0

class npl_em_pfc_cong_table_key_t(basic_npl_struct):
    def __init__(self, dsp4=0, dsp3=0, dsp2=0, dsp1=0, tc=0, slice=0):
        super().__init__(48)
        self.dsp4 = dsp4
        self.dsp3 = dsp3
        self.dsp2 = dsp2
        self.dsp1 = dsp1
        self.tc = tc
        self.slice = slice

    def _get_as_sub_field(data, offset_in_data):
        result = npl_em_pfc_cong_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dsp4(self):
        return self._get_field_value(0, 6)
    @dsp4.setter
    def dsp4(self, value):
        self._set_field_value('field dsp4', 0, 6, int, value)
    @property
    def dsp3(self):
        return self._get_field_value(6, 12)
    @dsp3.setter
    def dsp3(self, value):
        self._set_field_value('field dsp3', 6, 12, int, value)
    @property
    def dsp2(self):
        return self._get_field_value(18, 12)
    @dsp2.setter
    def dsp2(self, value):
        self._set_field_value('field dsp2', 18, 12, int, value)
    @property
    def dsp1(self):
        return self._get_field_value(30, 12)
    @dsp1.setter
    def dsp1(self, value):
        self._set_field_value('field dsp1', 30, 12, int, value)
    @property
    def tc(self):
        return self._get_field_value(42, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 42, 3, int, value)
    @property
    def slice(self):
        return self._get_field_value(45, 3)
    @slice.setter
    def slice(self, value):
        self._set_field_value('field slice', 45, 3, int, value)

class npl_em_pfc_cong_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_em_pfc_cong_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def em_payload(self):
        return npl_em_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @em_payload.setter
    def em_payload(self, value):
        self._set_field_value('field em_payload', 0, 40, npl_em_payload_t, value)

class npl_em_pfc_cong_table_value_t(basic_npl_struct):
    def __init__(self, em_payload=0):
        super().__init__(48)
        self.payloads.em_payload = em_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_em_pfc_cong_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(40, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 40, 8, int, value)
    @property
    def payloads(self):
        return npl_em_pfc_cong_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 40, npl_em_pfc_cong_table_payloads_t, value)



# API-s for table: ene_byte_addition_static_table

NPL_ENE_BYTE_ADDITION_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_ene_byte_addition_static_table_key_t(basic_npl_struct):
    def __init__(self, pd_ene_macro_ids_2_=0, pd_ene_macro_ids_1_=0, pd_ene_macro_ids_0_=0, pd_first_ene_macro=0):
        super().__init__(32)
        self.pd_ene_macro_ids_2_ = pd_ene_macro_ids_2_
        self.pd_ene_macro_ids_1_ = pd_ene_macro_ids_1_
        self.pd_ene_macro_ids_0_ = pd_ene_macro_ids_0_
        self.pd_first_ene_macro = pd_first_ene_macro

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_byte_addition_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_ene_macro_ids_2_(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pd_ene_macro_ids_2_.setter
    def pd_ene_macro_ids_2_(self, value):
        self._set_field_value('field pd_ene_macro_ids_2_', 0, 8, npl_ene_macro_id_t, value)
    @property
    def pd_ene_macro_ids_1_(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @pd_ene_macro_ids_1_.setter
    def pd_ene_macro_ids_1_(self, value):
        self._set_field_value('field pd_ene_macro_ids_1_', 8, 8, npl_ene_macro_id_t, value)
    @property
    def pd_ene_macro_ids_0_(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @pd_ene_macro_ids_0_.setter
    def pd_ene_macro_ids_0_(self, value):
        self._set_field_value('field pd_ene_macro_ids_0_', 16, 8, npl_ene_macro_id_t, value)
    @property
    def pd_first_ene_macro(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 24)
    @pd_first_ene_macro.setter
    def pd_first_ene_macro(self, value):
        self._set_field_value('field pd_first_ene_macro', 24, 8, npl_ene_macro_id_t, value)

class npl_ene_byte_addition_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(14)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_byte_addition_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def padding_vars_ene_byte_addition(self):
        return self._get_field_value(0, 14)
    @padding_vars_ene_byte_addition.setter
    def padding_vars_ene_byte_addition(self, value):
        self._set_field_value('field padding_vars_ene_byte_addition', 0, 14, int, value)

class npl_ene_byte_addition_static_table_value_t(basic_npl_struct):
    def __init__(self, padding_vars_ene_byte_addition=0):
        super().__init__(22)
        self.payloads.padding_vars_ene_byte_addition = padding_vars_ene_byte_addition

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_byte_addition_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(14, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 14, 8, int, value)
    @property
    def payloads(self):
        return npl_ene_byte_addition_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 14, npl_ene_byte_addition_static_table_payloads_t, value)



# API-s for table: ene_macro_code_tpid_profile_static_table

NPL_ENE_MACRO_CODE_TPID_PROFILE_STATIC_TABLE_ACTION_SET_VALUE = 0x0

class npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t(basic_npl_struct):
    def __init__(self, ene_encap_macro_id=0, ene_encap_tpid=0):
        super().__init__(24)
        self.ene_encap_macro_id = ene_encap_macro_id
        self.ene_encap_tpid = ene_encap_tpid

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ene_encap_macro_id(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @ene_encap_macro_id.setter
    def ene_encap_macro_id(self, value):
        self._set_field_value('field ene_encap_macro_id', 16, 8, npl_ene_macro_id_t, value)
    @property
    def ene_encap_tpid(self):
        return self._get_field_value(0, 16)
    @ene_encap_tpid.setter
    def ene_encap_tpid(self, value):
        self._set_field_value('field ene_encap_tpid', 0, 16, int, value)




class npl_ene_macro_code_tpid_profile_static_table_key_t(basic_npl_struct):
    def __init__(self, macro_code=0, tpid_profile=0):
        super().__init__(4)
        self.macro_code = macro_code
        self.tpid_profile = tpid_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_macro_code_tpid_profile_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def macro_code(self):
        return self._get_field_value(0, 2)
    @macro_code.setter
    def macro_code(self, value):
        self._set_field_value('field macro_code', 0, 2, int, value)
    @property
    def tpid_profile(self):
        return self._get_field_value(2, 2)
    @tpid_profile.setter
    def tpid_profile(self, value):
        self._set_field_value('field tpid_profile', 2, 2, int, value)

class npl_ene_macro_code_tpid_profile_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_macro_code_tpid_profile_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_value(self):
        return npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_value.setter
    def set_value(self, value):
        self._set_field_value('field set_value', 0, 24, npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t, value)

class npl_ene_macro_code_tpid_profile_static_table_value_t(basic_npl_struct):
    def __init__(self, ene_encap_macro_id=0, ene_encap_tpid=0):
        super().__init__(32)
        self.payloads.set_value = npl_ene_macro_code_tpid_profile_static_table_set_value_payload_t(ene_encap_macro_id, ene_encap_tpid)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_macro_code_tpid_profile_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ene_macro_code_tpid_profile_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ene_macro_code_tpid_profile_static_table_payloads_t, value)



# API-s for table: ene_npu_header_punt_data_pack_table

NPL_ENE_NPU_HEADER_PUNT_DATA_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ene_npu_header_punt_data_pack_table_key_option_true_value_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_local_current_header_format=0, tx_npu_header_app_soft_npuh_dsp_on_npu=0, tx_punt_local_var_local_ene_punt_sub_code=0, tx_punt_local_var_current_nw_hdr_offset=0, tx_punt_local_var_ene_punt_data_source=0, tx_punt_local_var_ene_punt_fwd_header_type=0):
        super().__init__(64)
        self.tx_punt_local_var_local_current_header_format = tx_punt_local_var_local_current_header_format
        self.tx_npu_header_app_soft_npuh_dsp_on_npu = tx_npu_header_app_soft_npuh_dsp_on_npu
        self.tx_punt_local_var_local_ene_punt_sub_code = tx_punt_local_var_local_ene_punt_sub_code
        self.tx_punt_local_var_current_nw_hdr_offset = tx_punt_local_var_current_nw_hdr_offset
        self.tx_punt_local_var_ene_punt_data_source = tx_punt_local_var_ene_punt_data_source
        self.tx_punt_local_var_ene_punt_fwd_header_type = tx_punt_local_var_ene_punt_fwd_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_npu_header_punt_data_pack_table_key_option_true_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def tx_punt_local_var_local_current_header_format(self):
        return self._get_field_value(0, 8)
    @tx_punt_local_var_local_current_header_format.setter
    def tx_punt_local_var_local_current_header_format(self, value):
        self._set_field_value('field tx_punt_local_var_local_current_header_format', 0, 8, int, value)
    @property
    def tx_npu_header_app_soft_npuh_dsp_on_npu(self):
        return self._get_field_value(8, 12)
    @tx_npu_header_app_soft_npuh_dsp_on_npu.setter
    def tx_npu_header_app_soft_npuh_dsp_on_npu(self, value):
        self._set_field_value('field tx_npu_header_app_soft_npuh_dsp_on_npu', 8, 12, int, value)
    @property
    def const1_4h0_exact_0x0(self):
        return self._get_field_value(20, 4)
    @property
    def const2_16hFFFF_exact_0xffff(self):
        return self._get_field_value(24, 16)
    @property
    def tx_punt_local_var_local_ene_punt_sub_code(self):
        return self._get_field_value(40, 8)
    @tx_punt_local_var_local_ene_punt_sub_code.setter
    def tx_punt_local_var_local_ene_punt_sub_code(self, value):
        self._set_field_value('field tx_punt_local_var_local_ene_punt_sub_code', 40, 8, int, value)
    @property
    def tx_punt_local_var_current_nw_hdr_offset(self):
        return self._get_field_value(48, 8)
    @tx_punt_local_var_current_nw_hdr_offset.setter
    def tx_punt_local_var_current_nw_hdr_offset(self, value):
        self._set_field_value('field tx_punt_local_var_current_nw_hdr_offset', 48, 8, int, value)
    @property
    def tx_punt_local_var_ene_punt_data_source(self):
        return self._get_field_value(56, 4)
    @tx_punt_local_var_ene_punt_data_source.setter
    def tx_punt_local_var_ene_punt_data_source(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_data_source', 56, 4, int, value)
    @property
    def tx_punt_local_var_ene_punt_fwd_header_type(self):
        return self._get_field_value(60, 4)
    @tx_punt_local_var_ene_punt_fwd_header_type.setter
    def tx_punt_local_var_ene_punt_fwd_header_type(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_fwd_header_type', 60, 4, int, value)



class npl_ene_npu_header_punt_data_pack_table_key_option_false_value_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_local_current_header_format=0, tx_npu_header_app_soft_npuh_ssp_on_npu=0, tx_punt_local_var_local_ene_punt_sub_code=0, tx_punt_local_var_current_nw_hdr_offset=0, tx_punt_local_var_ene_punt_data_source=0, tx_punt_local_var_ene_punt_fwd_header_type=0):
        super().__init__(64)
        self.tx_punt_local_var_local_current_header_format = tx_punt_local_var_local_current_header_format
        self.tx_npu_header_app_soft_npuh_ssp_on_npu = tx_npu_header_app_soft_npuh_ssp_on_npu
        self.tx_punt_local_var_local_ene_punt_sub_code = tx_punt_local_var_local_ene_punt_sub_code
        self.tx_punt_local_var_current_nw_hdr_offset = tx_punt_local_var_current_nw_hdr_offset
        self.tx_punt_local_var_ene_punt_data_source = tx_punt_local_var_ene_punt_data_source
        self.tx_punt_local_var_ene_punt_fwd_header_type = tx_punt_local_var_ene_punt_fwd_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_npu_header_punt_data_pack_table_key_option_false_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def tx_punt_local_var_local_current_header_format(self):
        return self._get_field_value(0, 8)
    @tx_punt_local_var_local_current_header_format.setter
    def tx_punt_local_var_local_current_header_format(self, value):
        self._set_field_value('field tx_punt_local_var_local_current_header_format', 0, 8, int, value)
    @property
    def const1_16hFFFF_exact_0xffff(self):
        return self._get_field_value(8, 16)
    @property
    def tx_npu_header_app_soft_npuh_ssp_on_npu(self):
        return self._get_field_value(24, 12)
    @tx_npu_header_app_soft_npuh_ssp_on_npu.setter
    def tx_npu_header_app_soft_npuh_ssp_on_npu(self, value):
        self._set_field_value('field tx_npu_header_app_soft_npuh_ssp_on_npu', 24, 12, int, value)
    @property
    def const2_4h0_exact_0x0(self):
        return self._get_field_value(36, 4)
    @property
    def tx_punt_local_var_local_ene_punt_sub_code(self):
        return self._get_field_value(40, 8)
    @tx_punt_local_var_local_ene_punt_sub_code.setter
    def tx_punt_local_var_local_ene_punt_sub_code(self, value):
        self._set_field_value('field tx_punt_local_var_local_ene_punt_sub_code', 40, 8, int, value)
    @property
    def tx_punt_local_var_current_nw_hdr_offset(self):
        return self._get_field_value(48, 8)
    @tx_punt_local_var_current_nw_hdr_offset.setter
    def tx_punt_local_var_current_nw_hdr_offset(self, value):
        self._set_field_value('field tx_punt_local_var_current_nw_hdr_offset', 48, 8, int, value)
    @property
    def tx_punt_local_var_ene_punt_data_source(self):
        return self._get_field_value(56, 4)
    @tx_punt_local_var_ene_punt_data_source.setter
    def tx_punt_local_var_ene_punt_data_source(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_data_source', 56, 4, int, value)
    @property
    def tx_punt_local_var_ene_punt_fwd_header_type(self):
        return self._get_field_value(60, 4)
    @tx_punt_local_var_ene_punt_fwd_header_type.setter
    def tx_punt_local_var_ene_punt_fwd_header_type(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_fwd_header_type', 60, 4, int, value)




class ene_npu_header_punt_data_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ene_npu_header_punt_data_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_TRUE_VALUE(self):
        return npl_ene_npu_header_punt_data_pack_table_key_option_true_value_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TRUE_VALUE.setter
    def NPL_TRUE_VALUE(self, value):
        self._set_field_value('field NPL_TRUE_VALUE', 0, 64, npl_ene_npu_header_punt_data_pack_table_key_option_true_value_t, value)
    @property
    def NPL_FALSE_VALUE(self):
        return npl_ene_npu_header_punt_data_pack_table_key_option_false_value_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_FALSE_VALUE.setter
    def NPL_FALSE_VALUE(self, value):
        self._set_field_value('field NPL_FALSE_VALUE', 0, 64, npl_ene_npu_header_punt_data_pack_table_key_option_false_value_t, value)

class npl_ene_npu_header_punt_data_pack_table_key_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_cud_is_obm_val=0):
        super().__init__(64)
        self.tx_punt_local_var_cud_is_obm_val = tx_punt_local_var_cud_is_obm_val

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_npu_header_punt_data_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _tx_punt_local_var_cud_is_obm_val = 0
    @property
    def tx_punt_local_var_cud_is_obm_val(self):
        return self._tx_punt_local_var_cud_is_obm_val
    @tx_punt_local_var_cud_is_obm_val.setter
    def tx_punt_local_var_cud_is_obm_val(self, value):
        self._tx_punt_local_var_cud_is_obm_val = value
        if tx_punt_local_var_cud_is_obm_val == NPL_TRUE_VALUE:
            self._set_field_value('const field', 20, 4, int, 0x0)
        if tx_punt_local_var_cud_is_obm_val == NPL_TRUE_VALUE:
            self._set_field_value('const field', 24, 16, int, 0xffff)
        if tx_punt_local_var_cud_is_obm_val == NPL_FALSE_VALUE:
            self._set_field_value('const field', 8, 16, int, 0xffff)
        if tx_punt_local_var_cud_is_obm_val == NPL_FALSE_VALUE:
            self._set_field_value('const field', 36, 4, int, 0x0)

    @property
    def options(self):
        return ene_npu_header_punt_data_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 64 - 0, ene_npu_header_punt_data_pack_table_key_options_t, value)

class npl_ene_npu_header_punt_data_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_npu_header_punt_data_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_ene_punt_data_on_npuh(self):
        return npl_ene_punt_data_on_npuh_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_punt_local_var_ene_punt_data_on_npuh.setter
    def tx_punt_local_var_ene_punt_data_on_npuh(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_data_on_npuh', 0, 64, npl_ene_punt_data_on_npuh_t, value)

class npl_ene_npu_header_punt_data_pack_table_value_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_ene_punt_data_on_npuh=0):
        super().__init__(72)
        self.payloads.tx_punt_local_var_ene_punt_data_on_npuh = tx_punt_local_var_ene_punt_data_on_npuh

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_npu_header_punt_data_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ene_npu_header_punt_data_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ene_npu_header_punt_data_pack_table_payloads_t, value)



# API-s for table: ene_npu_header_punt_rcy_data_pack_table

NPL_ENE_NPU_HEADER_PUNT_RCY_DATA_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ene_npu_header_punt_rcy_data_pack_table_key_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_local_current_header_format=0, tx_punt_local_var_punt_dsp_attributes_dsp=0, tx_punt_local_var_punt_ssp=0, tx_punt_local_var_local_ene_punt_sub_code=0, tx_punt_local_var_current_nw_hdr_offset=0, tx_punt_local_var_ene_punt_data_source=0, tx_punt_local_var_ene_punt_fwd_header_type=0):
        super().__init__(64)
        self.tx_punt_local_var_local_current_header_format = tx_punt_local_var_local_current_header_format
        self.tx_punt_local_var_punt_dsp_attributes_dsp = tx_punt_local_var_punt_dsp_attributes_dsp
        self.tx_punt_local_var_punt_ssp = tx_punt_local_var_punt_ssp
        self.tx_punt_local_var_local_ene_punt_sub_code = tx_punt_local_var_local_ene_punt_sub_code
        self.tx_punt_local_var_current_nw_hdr_offset = tx_punt_local_var_current_nw_hdr_offset
        self.tx_punt_local_var_ene_punt_data_source = tx_punt_local_var_ene_punt_data_source
        self.tx_punt_local_var_ene_punt_fwd_header_type = tx_punt_local_var_ene_punt_fwd_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_npu_header_punt_rcy_data_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_local_current_header_format(self):
        return self._get_field_value(0, 8)
    @tx_punt_local_var_local_current_header_format.setter
    def tx_punt_local_var_local_current_header_format(self, value):
        self._set_field_value('field tx_punt_local_var_local_current_header_format', 0, 8, int, value)
    @property
    def tx_punt_local_var_punt_dsp_attributes_dsp(self):
        return self._get_field_value(8, 16)
    @tx_punt_local_var_punt_dsp_attributes_dsp.setter
    def tx_punt_local_var_punt_dsp_attributes_dsp(self, value):
        self._set_field_value('field tx_punt_local_var_punt_dsp_attributes_dsp', 8, 16, int, value)
    @property
    def tx_punt_local_var_punt_ssp(self):
        return npl_punt_ssp_t._get_as_sub_field(self._data, self._offset_in_data + 24)
    @tx_punt_local_var_punt_ssp.setter
    def tx_punt_local_var_punt_ssp(self, value):
        self._set_field_value('field tx_punt_local_var_punt_ssp', 24, 16, npl_punt_ssp_t, value)
    @property
    def tx_punt_local_var_local_ene_punt_sub_code(self):
        return self._get_field_value(40, 8)
    @tx_punt_local_var_local_ene_punt_sub_code.setter
    def tx_punt_local_var_local_ene_punt_sub_code(self, value):
        self._set_field_value('field tx_punt_local_var_local_ene_punt_sub_code', 40, 8, int, value)
    @property
    def tx_punt_local_var_current_nw_hdr_offset(self):
        return self._get_field_value(48, 8)
    @tx_punt_local_var_current_nw_hdr_offset.setter
    def tx_punt_local_var_current_nw_hdr_offset(self, value):
        self._set_field_value('field tx_punt_local_var_current_nw_hdr_offset', 48, 8, int, value)
    @property
    def tx_punt_local_var_ene_punt_data_source(self):
        return self._get_field_value(56, 4)
    @tx_punt_local_var_ene_punt_data_source.setter
    def tx_punt_local_var_ene_punt_data_source(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_data_source', 56, 4, int, value)
    @property
    def tx_punt_local_var_ene_punt_fwd_header_type(self):
        return self._get_field_value(60, 4)
    @tx_punt_local_var_ene_punt_fwd_header_type.setter
    def tx_punt_local_var_ene_punt_fwd_header_type(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_fwd_header_type', 60, 4, int, value)

class npl_ene_npu_header_punt_rcy_data_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_npu_header_punt_rcy_data_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_ene_punt_data_on_npuh(self):
        return npl_ene_punt_data_on_npuh_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_punt_local_var_ene_punt_data_on_npuh.setter
    def tx_punt_local_var_ene_punt_data_on_npuh(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_data_on_npuh', 0, 64, npl_ene_punt_data_on_npuh_t, value)

class npl_ene_npu_header_punt_rcy_data_pack_table_value_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_ene_punt_data_on_npuh=0):
        super().__init__(72)
        self.payloads.tx_punt_local_var_ene_punt_data_on_npuh = tx_punt_local_var_ene_punt_data_on_npuh

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ene_npu_header_punt_rcy_data_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ene_npu_header_punt_rcy_data_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ene_npu_header_punt_rcy_data_pack_table_payloads_t, value)



# API-s for table: erpp_fabric_counters_offset_table

NPL_ERPP_FABRIC_COUNTERS_OFFSET_TABLE_ACTION_UPDATE_COUNTER_OFFSET = 0x0

class npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t(basic_npl_struct):
    def __init__(self, counter_offset=0):
        super().__init__(3)
        self.counter_offset = counter_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def counter_offset(self):
        return npl_common_cntr_offset_and_padding_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter_offset.setter
    def counter_offset(self, value):
        self._set_field_value('field counter_offset', 0, 3, npl_common_cntr_offset_and_padding_t, value)




class npl_erpp_fabric_counters_offset_table_key_t(basic_npl_struct):
    def __init__(self, dp=0, tc=0, vce=0):
        super().__init__(6)
        self.dp = dp
        self.tc = tc
        self.vce = vce

    def _get_as_sub_field(data, offset_in_data):
        result = npl_erpp_fabric_counters_offset_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dp(self):
        return self._get_field_value(0, 2)
    @dp.setter
    def dp(self, value):
        self._set_field_value('field dp', 0, 2, int, value)
    @property
    def tc(self):
        return self._get_field_value(2, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 2, 3, int, value)
    @property
    def vce(self):
        return self._get_field_value(5, 1)
    @vce.setter
    def vce(self, value):
        self._set_field_value('field vce', 5, 1, int, value)

class npl_erpp_fabric_counters_offset_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_erpp_fabric_counters_offset_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_counter_offset(self):
        return npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_counter_offset.setter
    def update_counter_offset(self, value):
        self._set_field_value('field update_counter_offset', 0, 3, npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t, value)

class npl_erpp_fabric_counters_offset_table_value_t(basic_npl_struct):
    def __init__(self, counter_offset=0):
        super().__init__(11)
        self.payloads.update_counter_offset = npl_erpp_fabric_counters_offset_table_update_counter_offset_payload_t(counter_offset)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_erpp_fabric_counters_offset_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_erpp_fabric_counters_offset_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_erpp_fabric_counters_offset_table_payloads_t, value)



# API-s for table: erpp_fabric_counters_table

NPL_ERPP_FABRIC_COUNTERS_TABLE_ACTION_UPDATE_COUNTERS = 0x0

class npl_erpp_fabric_counters_table_update_counters_payload_t(basic_npl_struct):
    def __init__(self, debug_conter_valid=0, debug_counter_ptr=0):
        super().__init__(21)
        self.debug_conter_valid = debug_conter_valid
        self.debug_counter_ptr = debug_counter_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_erpp_fabric_counters_table_update_counters_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def debug_conter_valid(self):
        return self._get_field_value(20, 1)
    @debug_conter_valid.setter
    def debug_conter_valid(self, value):
        self._set_field_value('field debug_conter_valid', 20, 1, int, value)
    @property
    def debug_counter_ptr(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @debug_counter_ptr.setter
    def debug_counter_ptr(self, value):
        self._set_field_value('field debug_counter_ptr', 0, 20, npl_counter_ptr_t, value)




class npl_erpp_fabric_counters_table_key_t(basic_npl_struct):
    def __init__(self, dest_oq=0, dest_slice=0, dest_device=0):
        super().__init__(21)
        self.dest_oq = dest_oq
        self.dest_slice = dest_slice
        self.dest_device = dest_device

    def _get_as_sub_field(data, offset_in_data):
        result = npl_erpp_fabric_counters_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dest_oq(self):
        return self._get_field_value(0, 9)
    @dest_oq.setter
    def dest_oq(self, value):
        self._set_field_value('field dest_oq', 0, 9, int, value)
    @property
    def dest_slice(self):
        return self._get_field_value(9, 3)
    @dest_slice.setter
    def dest_slice(self, value):
        self._set_field_value('field dest_slice', 9, 3, int, value)
    @property
    def dest_device(self):
        return self._get_field_value(12, 9)
    @dest_device.setter
    def dest_device(self, value):
        self._set_field_value('field dest_device', 12, 9, int, value)

class npl_erpp_fabric_counters_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(21)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_erpp_fabric_counters_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_counters(self):
        return npl_erpp_fabric_counters_table_update_counters_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_counters.setter
    def update_counters(self, value):
        self._set_field_value('field update_counters', 0, 21, npl_erpp_fabric_counters_table_update_counters_payload_t, value)

class npl_erpp_fabric_counters_table_value_t(basic_npl_struct):
    def __init__(self, debug_conter_valid=0, debug_counter_ptr=0):
        super().__init__(29)
        self.payloads.update_counters = npl_erpp_fabric_counters_table_update_counters_payload_t(debug_conter_valid, debug_counter_ptr)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_erpp_fabric_counters_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(21, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 21, 8, int, value)
    @property
    def payloads(self):
        return npl_erpp_fabric_counters_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 21, npl_erpp_fabric_counters_table_payloads_t, value)



# API-s for table: eth_meter_profile_mapping_table

NPL_ETH_METER_PROFILE_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_eth_meter_profile_mapping_table_key_t(basic_npl_struct):
    def __init__(self, qos_id=0):
        super().__init__(4)
        self.qos_id = qos_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_meter_profile_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_id(self):
        return self._get_field_value(0, 4)
    @qos_id.setter
    def qos_id(self, value):
        self._set_field_value('field qos_id', 0, 4, int, value)

class npl_eth_meter_profile_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_meter_profile_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def slp_qos_id(self):
        return self._get_field_value(0, 4)
    @slp_qos_id.setter
    def slp_qos_id(self, value):
        self._set_field_value('field slp_qos_id', 0, 4, int, value)

class npl_eth_meter_profile_mapping_table_value_t(basic_npl_struct):
    def __init__(self, slp_qos_id=0):
        super().__init__(12)
        self.payloads.slp_qos_id = slp_qos_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_meter_profile_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_eth_meter_profile_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_eth_meter_profile_mapping_table_payloads_t, value)



# API-s for table: eth_mp_mapping_compound_table

NPL_ETH_MP_MAPPING_COMPOUND_TABLE_ACTION_UPDATE_MEP_ATTRIBUTES = 0x0

class npl_eth_mp_mapping_compound_table_update_mep_attributes_payload_t(basic_npl_struct):
    def __init__(self, em_eth_oam_payload=0, eth_oam_mp_payload=0, meg_id=0, rmep_payload=0):
        super().__init__(271)
        self.em_eth_oam_payload = em_eth_oam_payload
        self.eth_oam_mp_payload = eth_oam_mp_payload
        self.meg_id = meg_id
        self.rmep_payload = rmep_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_mp_mapping_compound_table_update_mep_attributes_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def em_eth_oam_payload(self):
        return npl_em_payload_t._get_as_sub_field(self._data, self._offset_in_data + 231)
    @em_eth_oam_payload.setter
    def em_eth_oam_payload(self, value):
        self._set_field_value('field em_eth_oam_payload', 231, 40, npl_em_payload_t, value)
    @property
    def eth_oam_mp_payload(self):
        return npl_eth_mp_table_shared_payload_t._get_as_sub_field(self._data, self._offset_in_data + 131)
    @eth_oam_mp_payload.setter
    def eth_oam_mp_payload(self, value):
        self._set_field_value('field eth_oam_mp_payload', 131, 100, npl_eth_mp_table_shared_payload_t, value)
    @property
    def meg_id(self):
        return npl_eth_oam_aux_shared_payload_t._get_as_sub_field(self._data, self._offset_in_data + 11)
    @meg_id.setter
    def meg_id(self, value):
        self._set_field_value('field meg_id', 11, 120, npl_eth_oam_aux_shared_payload_t, value)
    @property
    def rmep_payload(self):
        return npl_eth_rmep_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rmep_payload.setter
    def rmep_payload(self, value):
        self._set_field_value('field rmep_payload', 0, 11, npl_eth_rmep_attributes_t, value)




class npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_ccm_up_t(basic_npl_struct):
    def __init__(self, eth_oam_local_vars_mep_mapping_selector=0, packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id=0, packet_protocol_layer_2__header_0__eth_oam_header_md_level=0, packet_oamp_punt_header_l2_dlp_id=0):
        super().__init__(38)
        self.eth_oam_local_vars_mep_mapping_selector = eth_oam_local_vars_mep_mapping_selector
        self.packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id = packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id
        self.packet_protocol_layer_2__header_0__eth_oam_header_md_level = packet_protocol_layer_2__header_0__eth_oam_header_md_level
        self.packet_oamp_punt_header_l2_dlp_id = packet_oamp_punt_header_l2_dlp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_ccm_up_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_ETH_TBL_ID_exact_0x0(self):
        return self._get_field_value(0, 2)
    @property
    def eth_oam_local_vars_mep_mapping_selector(self):
        return self._get_field_value(2, 2)
    @eth_oam_local_vars_mep_mapping_selector.setter
    def eth_oam_local_vars_mep_mapping_selector(self, value):
        self._set_field_value('field eth_oam_local_vars_mep_mapping_selector', 2, 2, int, value)
    @property
    def packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id(self):
        return self._get_field_value(4, 13)
    @packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id.setter
    def packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id(self, value):
        self._set_field_value('field packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id', 4, 13, int, value)
    @property
    def packet_protocol_layer_2__header_0__eth_oam_header_md_level(self):
        return self._get_field_value(17, 3)
    @packet_protocol_layer_2__header_0__eth_oam_header_md_level.setter
    def packet_protocol_layer_2__header_0__eth_oam_header_md_level(self, value):
        self._set_field_value('field packet_protocol_layer_2__header_0__eth_oam_header_md_level', 17, 3, int, value)
    @property
    def packet_oamp_punt_header_l2_dlp_id(self):
        return self._get_field_value(20, 18)
    @packet_oamp_punt_header_l2_dlp_id.setter
    def packet_oamp_punt_header_l2_dlp_id(self, value):
        self._set_field_value('field packet_oamp_punt_header_l2_dlp_id', 20, 18, int, value)



class npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_ccm_down_t(basic_npl_struct):
    def __init__(self, eth_oam_local_vars_mep_mapping_selector=0, packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id=0, packet_protocol_layer_2__header_0__eth_oam_header_md_level=0, packet_oamp_punt_header_l2_slp_id=0):
        super().__init__(38)
        self.eth_oam_local_vars_mep_mapping_selector = eth_oam_local_vars_mep_mapping_selector
        self.packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id = packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id
        self.packet_protocol_layer_2__header_0__eth_oam_header_md_level = packet_protocol_layer_2__header_0__eth_oam_header_md_level
        self.packet_oamp_punt_header_l2_slp_id = packet_oamp_punt_header_l2_slp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_ccm_down_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_ETH_TBL_ID_exact_0x0(self):
        return self._get_field_value(0, 2)
    @property
    def eth_oam_local_vars_mep_mapping_selector(self):
        return self._get_field_value(2, 2)
    @eth_oam_local_vars_mep_mapping_selector.setter
    def eth_oam_local_vars_mep_mapping_selector(self, value):
        self._set_field_value('field eth_oam_local_vars_mep_mapping_selector', 2, 2, int, value)
    @property
    def packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id(self):
        return self._get_field_value(4, 13)
    @packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id.setter
    def packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id(self, value):
        self._set_field_value('field packet_protocol_layer_2__header_1__eth_oam_ccm_mep_id', 4, 13, int, value)
    @property
    def packet_protocol_layer_2__header_0__eth_oam_header_md_level(self):
        return self._get_field_value(17, 3)
    @packet_protocol_layer_2__header_0__eth_oam_header_md_level.setter
    def packet_protocol_layer_2__header_0__eth_oam_header_md_level(self, value):
        self._set_field_value('field packet_protocol_layer_2__header_0__eth_oam_header_md_level', 17, 3, int, value)
    @property
    def packet_oamp_punt_header_l2_slp_id(self):
        return self._get_field_value(20, 18)
    @packet_oamp_punt_header_l2_slp_id.setter
    def packet_oamp_punt_header_l2_slp_id(self, value):
        self._set_field_value('field packet_oamp_punt_header_l2_slp_id', 20, 18, int, value)



class npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_not_ccm_up_t(basic_npl_struct):
    def __init__(self, eth_oam_local_vars_mep_mapping_selector=0, packet_protocol_layer_2__header_0__eth_oam_header_md_level=0, packet_oamp_punt_header_l2_dlp_id=0):
        super().__init__(25)
        self.eth_oam_local_vars_mep_mapping_selector = eth_oam_local_vars_mep_mapping_selector
        self.packet_protocol_layer_2__header_0__eth_oam_header_md_level = packet_protocol_layer_2__header_0__eth_oam_header_md_level
        self.packet_oamp_punt_header_l2_dlp_id = packet_oamp_punt_header_l2_dlp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_not_ccm_up_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_ETH_TBL_ID_exact_0x0(self):
        return self._get_field_value(0, 2)
    @property
    def eth_oam_local_vars_mep_mapping_selector(self):
        return self._get_field_value(2, 2)
    @eth_oam_local_vars_mep_mapping_selector.setter
    def eth_oam_local_vars_mep_mapping_selector(self, value):
        self._set_field_value('field eth_oam_local_vars_mep_mapping_selector', 2, 2, int, value)
    @property
    def packet_protocol_layer_2__header_0__eth_oam_header_md_level(self):
        return self._get_field_value(4, 3)
    @packet_protocol_layer_2__header_0__eth_oam_header_md_level.setter
    def packet_protocol_layer_2__header_0__eth_oam_header_md_level(self, value):
        self._set_field_value('field packet_protocol_layer_2__header_0__eth_oam_header_md_level', 4, 3, int, value)
    @property
    def packet_oamp_punt_header_l2_dlp_id(self):
        return self._get_field_value(7, 18)
    @packet_oamp_punt_header_l2_dlp_id.setter
    def packet_oamp_punt_header_l2_dlp_id(self, value):
        self._set_field_value('field packet_oamp_punt_header_l2_dlp_id', 7, 18, int, value)



class npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_not_ccm_down_t(basic_npl_struct):
    def __init__(self, eth_oam_local_vars_mep_mapping_selector=0, packet_protocol_layer_2__header_0__eth_oam_header_md_level=0, packet_oamp_punt_header_l2_slp_id=0):
        super().__init__(25)
        self.eth_oam_local_vars_mep_mapping_selector = eth_oam_local_vars_mep_mapping_selector
        self.packet_protocol_layer_2__header_0__eth_oam_header_md_level = packet_protocol_layer_2__header_0__eth_oam_header_md_level
        self.packet_oamp_punt_header_l2_slp_id = packet_oamp_punt_header_l2_slp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_not_ccm_down_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_ETH_TBL_ID_exact_0x0(self):
        return self._get_field_value(0, 2)
    @property
    def eth_oam_local_vars_mep_mapping_selector(self):
        return self._get_field_value(2, 2)
    @eth_oam_local_vars_mep_mapping_selector.setter
    def eth_oam_local_vars_mep_mapping_selector(self, value):
        self._set_field_value('field eth_oam_local_vars_mep_mapping_selector', 2, 2, int, value)
    @property
    def packet_protocol_layer_2__header_0__eth_oam_header_md_level(self):
        return self._get_field_value(4, 3)
    @packet_protocol_layer_2__header_0__eth_oam_header_md_level.setter
    def packet_protocol_layer_2__header_0__eth_oam_header_md_level(self, value):
        self._set_field_value('field packet_protocol_layer_2__header_0__eth_oam_header_md_level', 4, 3, int, value)
    @property
    def packet_oamp_punt_header_l2_slp_id(self):
        return self._get_field_value(7, 18)
    @packet_oamp_punt_header_l2_slp_id.setter
    def packet_oamp_punt_header_l2_slp_id(self, value):
        self._set_field_value('field packet_oamp_punt_header_l2_slp_id', 7, 18, int, value)




class eth_mp_mapping_compound_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(38 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = eth_mp_mapping_compound_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_MEP_MAPPING_SELECTOR_CCM_UP(self):
        return npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_ccm_up_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_MEP_MAPPING_SELECTOR_CCM_UP.setter
    def NPL_MEP_MAPPING_SELECTOR_CCM_UP(self, value):
        self._set_field_value('field NPL_MEP_MAPPING_SELECTOR_CCM_UP', 0, 38, npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_ccm_up_t, value)
    @property
    def NPL_MEP_MAPPING_SELECTOR_CCM_DOWN(self):
        return npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_ccm_down_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_MEP_MAPPING_SELECTOR_CCM_DOWN.setter
    def NPL_MEP_MAPPING_SELECTOR_CCM_DOWN(self, value):
        self._set_field_value('field NPL_MEP_MAPPING_SELECTOR_CCM_DOWN', 0, 38, npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_ccm_down_t, value)
    @property
    def NPL_MEP_MAPPING_SELECTOR_NOT_CCM_UP(self):
        return npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_not_ccm_up_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_MEP_MAPPING_SELECTOR_NOT_CCM_UP.setter
    def NPL_MEP_MAPPING_SELECTOR_NOT_CCM_UP(self, value):
        self._set_field_value('field NPL_MEP_MAPPING_SELECTOR_NOT_CCM_UP', 0, 25, npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_not_ccm_up_t, value)
    @property
    def NPL_MEP_MAPPING_SELECTOR_NOT_CCM_DOWN(self):
        return npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_not_ccm_down_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_MEP_MAPPING_SELECTOR_NOT_CCM_DOWN.setter
    def NPL_MEP_MAPPING_SELECTOR_NOT_CCM_DOWN(self, value):
        self._set_field_value('field NPL_MEP_MAPPING_SELECTOR_NOT_CCM_DOWN', 0, 25, npl_eth_mp_mapping_compound_table_key_option_mep_mapping_selector_not_ccm_down_t, value)

class npl_eth_mp_mapping_compound_table_key_t(basic_npl_struct):
    def __init__(self, eth_oam_local_vars_mep_mapping_selector=0):
        super().__init__(38)
        self.eth_oam_local_vars_mep_mapping_selector = eth_oam_local_vars_mep_mapping_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_mp_mapping_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _eth_oam_local_vars_mep_mapping_selector = 0
    @property
    def eth_oam_local_vars_mep_mapping_selector(self):
        return self._eth_oam_local_vars_mep_mapping_selector
    @eth_oam_local_vars_mep_mapping_selector.setter
    def eth_oam_local_vars_mep_mapping_selector(self, value):
        self._eth_oam_local_vars_mep_mapping_selector = value
        if eth_oam_local_vars_mep_mapping_selector == NPL_MEP_MAPPING_SELECTOR_CCM_UP:
            self._set_field_value('const field', 0, 2, int, 0x0)
        if eth_oam_local_vars_mep_mapping_selector == NPL_MEP_MAPPING_SELECTOR_CCM_DOWN:
            self._set_field_value('const field', 0, 2, int, 0x0)
        if eth_oam_local_vars_mep_mapping_selector == NPL_MEP_MAPPING_SELECTOR_NOT_CCM_UP:
            self._set_field_value('const field', 0, 2, int, 0x0)
        if eth_oam_local_vars_mep_mapping_selector == NPL_MEP_MAPPING_SELECTOR_NOT_CCM_DOWN:
            self._set_field_value('const field', 0, 2, int, 0x0)

    @property
    def options(self):
        return eth_mp_mapping_compound_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 38 - 0, eth_mp_mapping_compound_table_key_options_t, value)

class npl_eth_mp_mapping_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(271)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_mp_mapping_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_mep_attributes(self):
        return npl_eth_mp_mapping_compound_table_update_mep_attributes_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_mep_attributes.setter
    def update_mep_attributes(self, value):
        self._set_field_value('field update_mep_attributes', 0, 271, npl_eth_mp_mapping_compound_table_update_mep_attributes_payload_t, value)

class npl_eth_mp_mapping_compound_table_value_t(basic_npl_struct):
    def __init__(self, em_eth_oam_payload=0, eth_oam_mp_payload=0, meg_id=0, rmep_payload=0):
        super().__init__(279)
        self.payloads.update_mep_attributes = npl_eth_mp_mapping_compound_table_update_mep_attributes_payload_t(em_eth_oam_payload, eth_oam_mp_payload, meg_id, rmep_payload)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_mp_mapping_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(271, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 271, 8, int, value)
    @property
    def payloads(self):
        return npl_eth_mp_mapping_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 271, npl_eth_mp_mapping_compound_table_payloads_t, value)



# API-s for table: eth_oam_set_da_mc2_static_table

NPL_ETH_OAM_SET_DA_MC2_STATIC_TABLE_ACTION_SET_DA = 0x0

class npl_eth_oam_set_da_mc2_static_table_set_da_payload_t(basic_npl_struct):
    def __init__(self, da=0):
        super().__init__(13)
        self.da = da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_oam_set_da_mc2_static_table_set_da_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def da(self):
        return self._get_field_value(0, 13)
    @da.setter
    def da(self, value):
        self._set_field_value('field da', 0, 13, int, value)




class npl_eth_oam_set_da_mc2_static_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x1)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_oam_set_da_mc2_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)

class npl_eth_oam_set_da_mc2_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(13)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_oam_set_da_mc2_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_da(self):
        return npl_eth_oam_set_da_mc2_static_table_set_da_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_da.setter
    def set_da(self, value):
        self._set_field_value('field set_da', 0, 13, npl_eth_oam_set_da_mc2_static_table_set_da_payload_t, value)

class npl_eth_oam_set_da_mc2_static_table_value_t(basic_npl_struct):
    def __init__(self, da=0):
        super().__init__(21)
        self.payloads.set_da = npl_eth_oam_set_da_mc2_static_table_set_da_payload_t(da)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_oam_set_da_mc2_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(13, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 13, 8, int, value)
    @property
    def payloads(self):
        return npl_eth_oam_set_da_mc2_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 13, npl_eth_oam_set_da_mc2_static_table_payloads_t, value)



# API-s for table: eth_oam_set_da_mc_static_table

NPL_ETH_OAM_SET_DA_MC_STATIC_TABLE_ACTION_SET_DA = 0x0

class npl_eth_oam_set_da_mc_static_table_set_da_payload_t(basic_npl_struct):
    def __init__(self, da=0):
        super().__init__(32)
        self.da = da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_oam_set_da_mc_static_table_set_da_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def da(self):
        return self._get_field_value(0, 32)
    @da.setter
    def da(self, value):
        self._set_field_value('field da', 0, 32, int, value)




class npl_eth_oam_set_da_mc_static_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x1)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_oam_set_da_mc_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)

class npl_eth_oam_set_da_mc_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_oam_set_da_mc_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_da(self):
        return npl_eth_oam_set_da_mc_static_table_set_da_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_da.setter
    def set_da(self, value):
        self._set_field_value('field set_da', 0, 32, npl_eth_oam_set_da_mc_static_table_set_da_payload_t, value)

class npl_eth_oam_set_da_mc_static_table_value_t(basic_npl_struct):
    def __init__(self, da=0):
        super().__init__(40)
        self.payloads.set_da = npl_eth_oam_set_da_mc_static_table_set_da_payload_t(da)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_oam_set_da_mc_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_eth_oam_set_da_mc_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_eth_oam_set_da_mc_static_table_payloads_t, value)



# API-s for table: eth_rtf_conf_set_mapping_table

NPL_ETH_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_eth_rtf_conf_set_mapping_table_key_t(basic_npl_struct):
    def __init__(self, rtf_step=0, lp_rtf_conf_set=0):
        super().__init__(10)
        self.rtf_step = rtf_step
        self.lp_rtf_conf_set = lp_rtf_conf_set

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_rtf_conf_set_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_step(self):
        return npl_rtf_step_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_step.setter
    def rtf_step(self, value):
        self._set_field_value('field rtf_step', 0, 2, npl_rtf_step_t, value)
    @property
    def lp_rtf_conf_set(self):
        return npl_lp_rtf_conf_set_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @lp_rtf_conf_set.setter
    def lp_rtf_conf_set(self, value):
        self._set_field_value('field lp_rtf_conf_set', 2, 8, npl_lp_rtf_conf_set_t, value)

class npl_eth_rtf_conf_set_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(12)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_rtf_conf_set_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def eth_rtf_iteration_prop(self):
        return npl_eth_rtf_iteration_properties_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @eth_rtf_iteration_prop.setter
    def eth_rtf_iteration_prop(self, value):
        self._set_field_value('field eth_rtf_iteration_prop', 0, 12, npl_eth_rtf_iteration_properties_t, value)

class npl_eth_rtf_conf_set_mapping_table_value_t(basic_npl_struct):
    def __init__(self, eth_rtf_iteration_prop=0):
        super().__init__(20)
        self.payloads.eth_rtf_iteration_prop = eth_rtf_iteration_prop

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_rtf_conf_set_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(12, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 12, 8, int, value)
    @property
    def payloads(self):
        return npl_eth_rtf_conf_set_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 12, npl_eth_rtf_conf_set_mapping_table_payloads_t, value)



# API-s for table: eth_rtf_next_macro_pack_fields_table

NPL_ETH_RTF_NEXT_MACRO_PACK_FIELDS_TABLE_ACTION_WRITE = 0x0

class npl_eth_rtf_next_macro_pack_fields_table_key_option_ipv4_hdr_prefix_t(basic_npl_struct):
    def __init__(self, ipv4_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields=0, packet_protocol_layer_next__type_3_0_=0):
        super().__init__(12)
        self.ipv4_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields = ipv4_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields
        self.packet_protocol_layer_next__type_3_0_ = packet_protocol_layer_next__type_3_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_rtf_next_macro_pack_fields_table_key_option_ipv4_hdr_prefix_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ipv4_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields(self):
        return npl_stop_on_step_and_next_stage_compressed_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ipv4_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields.setter
    def ipv4_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields(self, value):
        self._set_field_value('field ipv4_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields', 0, 4, npl_stop_on_step_and_next_stage_compressed_fields_t, value)
    @property
    def packet_protocol_layer_next__type_3_0_(self):
        return self._get_field_value(4, 4)
    @packet_protocol_layer_next__type_3_0_.setter
    def packet_protocol_layer_next__type_3_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__type_3_0_', 4, 4, int, value)
    @property
    def const1_PROTOCOL_TYPE_IPV4_3_0__exact_0x4(self):
        return self._get_field_value(8, 4)



class npl_eth_rtf_next_macro_pack_fields_table_key_option_ipv6_hdr_prefix_t(basic_npl_struct):
    def __init__(self, ipv6_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields=0, packet_protocol_layer_next__type_3_0_=0):
        super().__init__(12)
        self.ipv6_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields = ipv6_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields
        self.packet_protocol_layer_next__type_3_0_ = packet_protocol_layer_next__type_3_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_rtf_next_macro_pack_fields_table_key_option_ipv6_hdr_prefix_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ipv6_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields(self):
        return npl_stop_on_step_and_next_stage_compressed_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ipv6_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields.setter
    def ipv6_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields(self, value):
        self._set_field_value('field ipv6_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields', 0, 4, npl_stop_on_step_and_next_stage_compressed_fields_t, value)
    @property
    def packet_protocol_layer_next__type_3_0_(self):
        return self._get_field_value(4, 4)
    @packet_protocol_layer_next__type_3_0_.setter
    def packet_protocol_layer_next__type_3_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__type_3_0_', 4, 4, int, value)
    @property
    def const1_PROTOCOL_TYPE_IPV6_3_0__exact_0x6(self):
        return self._get_field_value(8, 4)



class npl_eth_rtf_next_macro_pack_fields_table_key_option_eth_hdr_prefix_t(basic_npl_struct):
    def __init__(self, eth_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields=0, packet_protocol_layer_next__type_3_0_=0):
        super().__init__(12)
        self.eth_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields = eth_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields
        self.packet_protocol_layer_next__type_3_0_ = packet_protocol_layer_next__type_3_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_rtf_next_macro_pack_fields_table_key_option_eth_hdr_prefix_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def eth_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields(self):
        return npl_stop_on_step_and_next_stage_compressed_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @eth_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields.setter
    def eth_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields(self, value):
        self._set_field_value('field eth_rtf_iteration_prop_stop_on_step_and_next_stage_compressed_fields', 0, 4, npl_stop_on_step_and_next_stage_compressed_fields_t, value)
    @property
    def packet_protocol_layer_next__type_3_0_(self):
        return self._get_field_value(4, 4)
    @packet_protocol_layer_next__type_3_0_.setter
    def packet_protocol_layer_next__type_3_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__type_3_0_', 4, 4, int, value)
    @property
    def const1_4b0_exact_0x0(self):
        return self._get_field_value(8, 4)




class eth_rtf_next_macro_pack_fields_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(12 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = eth_rtf_next_macro_pack_fields_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_IPV4_HDR_PREFIX(self):
        return npl_eth_rtf_next_macro_pack_fields_table_key_option_ipv4_hdr_prefix_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IPV4_HDR_PREFIX.setter
    def NPL_IPV4_HDR_PREFIX(self, value):
        self._set_field_value('field NPL_IPV4_HDR_PREFIX', 0, 12, npl_eth_rtf_next_macro_pack_fields_table_key_option_ipv4_hdr_prefix_t, value)
    @property
    def NPL_IPV6_HDR_PREFIX(self):
        return npl_eth_rtf_next_macro_pack_fields_table_key_option_ipv6_hdr_prefix_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IPV6_HDR_PREFIX.setter
    def NPL_IPV6_HDR_PREFIX(self, value):
        self._set_field_value('field NPL_IPV6_HDR_PREFIX', 0, 12, npl_eth_rtf_next_macro_pack_fields_table_key_option_ipv6_hdr_prefix_t, value)
    @property
    def NPL_ETH_HDR_PREFIX(self):
        return npl_eth_rtf_next_macro_pack_fields_table_key_option_eth_hdr_prefix_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_ETH_HDR_PREFIX.setter
    def NPL_ETH_HDR_PREFIX(self, value):
        self._set_field_value('field NPL_ETH_HDR_PREFIX', 0, 12, npl_eth_rtf_next_macro_pack_fields_table_key_option_eth_hdr_prefix_t, value)

class npl_eth_rtf_next_macro_pack_fields_table_key_t(basic_npl_struct):
    def __init__(self, rtf_acl_local_vars_hdr_type_for_rtf=0):
        super().__init__(12)
        self.rtf_acl_local_vars_hdr_type_for_rtf = rtf_acl_local_vars_hdr_type_for_rtf

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_rtf_next_macro_pack_fields_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _rtf_acl_local_vars_hdr_type_for_rtf = 0
    @property
    def rtf_acl_local_vars_hdr_type_for_rtf(self):
        return self._rtf_acl_local_vars_hdr_type_for_rtf
    @rtf_acl_local_vars_hdr_type_for_rtf.setter
    def rtf_acl_local_vars_hdr_type_for_rtf(self, value):
        self._rtf_acl_local_vars_hdr_type_for_rtf = value
        if rtf_acl_local_vars_hdr_type_for_rtf == NPL_IPV4_HDR_PREFIX:
            self._set_field_value('const field', 8, 4, int, 0x4)
        if rtf_acl_local_vars_hdr_type_for_rtf == NPL_IPV6_HDR_PREFIX:
            self._set_field_value('const field', 8, 4, int, 0x6)
        if rtf_acl_local_vars_hdr_type_for_rtf == NPL_ETH_HDR_PREFIX:
            self._set_field_value('const field', 8, 4, int, 0x0)

    @property
    def options(self):
        return eth_rtf_next_macro_pack_fields_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 12 - 0, eth_rtf_next_macro_pack_fields_table_key_options_t, value)

class npl_eth_rtf_next_macro_pack_fields_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(12)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_rtf_next_macro_pack_fields_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_acl_local_vars_rtf_next_macro_pack_fields(self):
        return npl_rtf_next_macro_pack_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_acl_local_vars_rtf_next_macro_pack_fields.setter
    def rtf_acl_local_vars_rtf_next_macro_pack_fields(self, value):
        self._set_field_value('field rtf_acl_local_vars_rtf_next_macro_pack_fields', 0, 12, npl_rtf_next_macro_pack_fields_t, value)

class npl_eth_rtf_next_macro_pack_fields_table_value_t(basic_npl_struct):
    def __init__(self, rtf_acl_local_vars_rtf_next_macro_pack_fields=0):
        super().__init__(20)
        self.payloads.rtf_acl_local_vars_rtf_next_macro_pack_fields = rtf_acl_local_vars_rtf_next_macro_pack_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eth_rtf_next_macro_pack_fields_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(12, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 12, 8, int, value)
    @property
    def payloads(self):
        return npl_eth_rtf_next_macro_pack_fields_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 12, npl_eth_rtf_next_macro_pack_fields_table_payloads_t, value)



# API-s for table: eve_byte_addition_static_table

NPL_EVE_BYTE_ADDITION_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_eve_byte_addition_static_table_key_t(basic_npl_struct):
    def __init__(self, padding_vars_eve_16_14_=0, padding_vars_eve_27_26_=0):
        super().__init__(5)
        self.padding_vars_eve_16_14_ = padding_vars_eve_16_14_
        self.padding_vars_eve_27_26_ = padding_vars_eve_27_26_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eve_byte_addition_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def padding_vars_eve_16_14_(self):
        return self._get_field_value(0, 3)
    @padding_vars_eve_16_14_.setter
    def padding_vars_eve_16_14_(self, value):
        self._set_field_value('field padding_vars_eve_16_14_', 0, 3, int, value)
    @property
    def padding_vars_eve_27_26_(self):
        return self._get_field_value(3, 2)
    @padding_vars_eve_27_26_.setter
    def padding_vars_eve_27_26_(self, value):
        self._set_field_value('field padding_vars_eve_27_26_', 3, 2, int, value)

class npl_eve_byte_addition_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(14)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eve_byte_addition_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def padding_vars_eve_byte_addition(self):
        return self._get_field_value(0, 14)
    @padding_vars_eve_byte_addition.setter
    def padding_vars_eve_byte_addition(self, value):
        self._set_field_value('field padding_vars_eve_byte_addition', 0, 14, int, value)

class npl_eve_byte_addition_static_table_value_t(basic_npl_struct):
    def __init__(self, padding_vars_eve_byte_addition=0):
        super().__init__(22)
        self.payloads.padding_vars_eve_byte_addition = padding_vars_eve_byte_addition

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eve_byte_addition_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(14, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 14, 8, int, value)
    @property
    def payloads(self):
        return npl_eve_byte_addition_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 14, npl_eve_byte_addition_static_table_payloads_t, value)



# API-s for table: eve_to_ethernet_ene_static_table

NPL_EVE_TO_ETHERNET_ENE_STATIC_TABLE_ACTION_SET_VALUE = 0x0

class npl_eve_to_ethernet_ene_static_table_set_value_payload_t(basic_npl_struct):
    def __init__(self, ene_encap_tpid=0, ene_encap_macro_id=0):
        super().__init__(24)
        self.ene_encap_tpid = ene_encap_tpid
        self.ene_encap_macro_id = ene_encap_macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eve_to_ethernet_ene_static_table_set_value_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ene_encap_tpid(self):
        return self._get_field_value(8, 16)
    @ene_encap_tpid.setter
    def ene_encap_tpid(self, value):
        self._set_field_value('field ene_encap_tpid', 8, 16, int, value)
    @property
    def ene_encap_macro_id(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ene_encap_macro_id.setter
    def ene_encap_macro_id(self, value):
        self._set_field_value('field ene_encap_macro_id', 0, 8, npl_ene_macro_id_t, value)




class npl_eve_to_ethernet_ene_static_table_key_t(basic_npl_struct):
    def __init__(self, sub_type=0, main_type=0):
        super().__init__(7)
        self.sub_type = sub_type
        self.main_type = main_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eve_to_ethernet_ene_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sub_type(self):
        return npl_svi_eve_sub_type_plus_prf_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sub_type.setter
    def sub_type(self, value):
        self._set_field_value('field sub_type', 0, 5, npl_svi_eve_sub_type_plus_prf_t, value)
    @property
    def main_type(self):
        return self._get_field_value(5, 2)
    @main_type.setter
    def main_type(self, value):
        self._set_field_value('field main_type', 5, 2, int, value)

class npl_eve_to_ethernet_ene_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_eve_to_ethernet_ene_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_value(self):
        return npl_eve_to_ethernet_ene_static_table_set_value_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_value.setter
    def set_value(self, value):
        self._set_field_value('field set_value', 0, 24, npl_eve_to_ethernet_ene_static_table_set_value_payload_t, value)

class npl_eve_to_ethernet_ene_static_table_value_t(basic_npl_struct):
    def __init__(self, ene_encap_tpid=0, ene_encap_macro_id=0):
        super().__init__(32)
        self.payloads.set_value = npl_eve_to_ethernet_ene_static_table_set_value_payload_t(ene_encap_tpid, ene_encap_macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_eve_to_ethernet_ene_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_eve_to_ethernet_ene_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_eve_to_ethernet_ene_static_table_payloads_t, value)



# API-s for table: event_queue_push_compound_table

NPL_EVENT_QUEUE_PUSH_COMPOUND_TABLE_ACTION_NO_OP = 0x0

class npl_event_queue_push_compound_table_key_t(basic_npl_struct):
    def __init__(self, event_to_push_rmep_last_time=0, event_to_push_rmep_id=0, event_to_push_rmep_state_table_data=0):
        super().__init__(61)
        self.event_to_push_rmep_last_time = event_to_push_rmep_last_time
        self.event_to_push_rmep_id = event_to_push_rmep_id
        self.event_to_push_rmep_state_table_data = event_to_push_rmep_state_table_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_event_queue_push_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def event_to_push_rmep_last_time(self):
        return self._get_field_value(0, 32)
    @event_to_push_rmep_last_time.setter
    def event_to_push_rmep_last_time(self, value):
        self._set_field_value('field event_to_push_rmep_last_time', 0, 32, int, value)
    @property
    def event_to_push_rmep_id(self):
        return self._get_field_value(32, 13)
    @event_to_push_rmep_id.setter
    def event_to_push_rmep_id(self, value):
        self._set_field_value('field event_to_push_rmep_id', 32, 13, int, value)
    @property
    def event_to_push_rmep_state_table_data(self):
        return self._get_field_value(45, 16)
    @event_to_push_rmep_state_table_data.setter
    def event_to_push_rmep_state_table_data(self, value):
        self._set_field_value('field event_to_push_rmep_state_table_data', 45, 16, int, value)

class npl_event_queue_push_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_event_queue_push_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_event_queue_push_compound_table_value_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(8)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_event_queue_push_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_event_queue_push_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_event_queue_push_compound_table_payloads_t, value)



# API-s for table: event_queue_table

NPL_EVENT_QUEUE_TABLE_ACTION_WRITE = 0x0

class npl_event_queue_table_key_t(basic_npl_struct):
    def __init__(self, event_queue_address=0):
        super().__init__(10)
        self.event_queue_address = event_queue_address

    def _get_as_sub_field(data, offset_in_data):
        result = npl_event_queue_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def event_queue_address(self):
        return npl_event_queue_address_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @event_queue_address.setter
    def event_queue_address(self, value):
        self._set_field_value('field event_queue_address', 0, 10, npl_event_queue_address_t, value)

class npl_event_queue_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(61)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_event_queue_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def event_queue_result(self):
        return npl_event_to_send_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @event_queue_result.setter
    def event_queue_result(self, value):
        self._set_field_value('field event_queue_result', 0, 61, npl_event_to_send_t, value)

class npl_event_queue_table_value_t(basic_npl_struct):
    def __init__(self, event_queue_result=0):
        super().__init__(69)
        self.payloads.event_queue_result = event_queue_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_event_queue_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(61, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 61, 8, int, value)
    @property
    def payloads(self):
        return npl_event_queue_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 61, npl_event_queue_table_payloads_t, value)



# API-s for table: external_aux_table

NPL_EXTERNAL_AUX_TABLE_ACTION_WRITE = 0x0

class npl_external_aux_table_key_t(basic_npl_struct):
    def __init__(self, aux_table_key=0):
        super().__init__(12)
        self.aux_table_key = aux_table_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_external_aux_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def aux_table_key(self):
        return npl_aux_table_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @aux_table_key.setter
    def aux_table_key(self, value):
        self._set_field_value('field aux_table_key', 0, 12, npl_aux_table_key_t, value)

class npl_external_aux_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_external_aux_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def aux_table_result(self):
        return npl_aux_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @aux_table_result.setter
    def aux_table_result(self, value):
        self._set_field_value('field aux_table_result', 0, 160, npl_aux_table_result_t, value)

class npl_external_aux_table_value_t(basic_npl_struct):
    def __init__(self, aux_table_result=0):
        super().__init__(168)
        self.payloads.aux_table_result = aux_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_external_aux_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_external_aux_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_external_aux_table_payloads_t, value)



# API-s for table: fabric_and_tm_header_size_static_table

NPL_FABRIC_AND_TM_HEADER_SIZE_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_fabric_and_tm_header_size_static_table_key_t(basic_npl_struct):
    def __init__(self, npuh_size=0, tm_header_type=0, fabric_header_type=0):
        super().__init__(13)
        self.npuh_size = npuh_size
        self.tm_header_type = tm_header_type
        self.fabric_header_type = fabric_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_and_tm_header_size_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def npuh_size(self):
        return self._get_field_value(0, 7)
    @npuh_size.setter
    def npuh_size(self, value):
        self._set_field_value('field npuh_size', 0, 7, int, value)
    @property
    def tm_header_type(self):
        return self._get_field_value(7, 2)
    @tm_header_type.setter
    def tm_header_type(self, value):
        self._set_field_value('field tm_header_type', 7, 2, int, value)
    @property
    def fabric_header_type(self):
        return self._get_field_value(9, 4)
    @fabric_header_type.setter
    def fabric_header_type(self, value):
        self._set_field_value('field fabric_header_type', 9, 4, int, value)

class npl_fabric_and_tm_header_size_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_and_tm_header_size_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fabric_tm_npu_headers_size(self):
        return self._get_field_value(0, 6)
    @fabric_tm_npu_headers_size.setter
    def fabric_tm_npu_headers_size(self, value):
        self._set_field_value('field fabric_tm_npu_headers_size', 0, 6, int, value)

class npl_fabric_and_tm_header_size_static_table_value_t(basic_npl_struct):
    def __init__(self, fabric_tm_npu_headers_size=0):
        super().__init__(14)
        self.payloads.fabric_tm_npu_headers_size = fabric_tm_npu_headers_size

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_and_tm_header_size_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_and_tm_header_size_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_fabric_and_tm_header_size_static_table_payloads_t, value)



# API-s for table: fabric_error_checker_key_pack_table

NPL_FABRIC_ERROR_CHECKER_KEY_PACK_TABLE_ACTION_WRITE = 0x0

class npl_fabric_error_checker_key_pack_table_key_t(basic_npl_struct):
    def __init__(self, pd_single_fragment_packet=0, mismatch_first_packet_size=0, mismatch_issu_codespace=0):
        super().__init__(3)
        self.pd_single_fragment_packet = pd_single_fragment_packet
        self.mismatch_first_packet_size = mismatch_first_packet_size
        self.mismatch_issu_codespace = mismatch_issu_codespace

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_error_checker_key_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_single_fragment_packet(self):
        return self._get_field_value(0, 1)
    @pd_single_fragment_packet.setter
    def pd_single_fragment_packet(self, value):
        self._set_field_value('field pd_single_fragment_packet', 0, 1, int, value)
    @property
    def mismatch_first_packet_size(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @mismatch_first_packet_size.setter
    def mismatch_first_packet_size(self, value):
        self._set_field_value('field mismatch_first_packet_size', 1, 1, npl_bool_t, value)
    @property
    def mismatch_issu_codespace(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @mismatch_issu_codespace.setter
    def mismatch_issu_codespace(self, value):
        self._set_field_value('field mismatch_issu_codespace', 2, 1, npl_bool_t, value)

class npl_fabric_error_checker_key_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_error_checker_key_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mismatch_indications(self):
        return npl_mismatch_indications_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mismatch_indications.setter
    def mismatch_indications(self, value):
        self._set_field_value('field mismatch_indications', 0, 3, npl_mismatch_indications_t, value)

class npl_fabric_error_checker_key_pack_table_value_t(basic_npl_struct):
    def __init__(self, mismatch_indications=0):
        super().__init__(11)
        self.payloads.mismatch_indications = mismatch_indications

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_error_checker_key_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_error_checker_key_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_fabric_error_checker_key_pack_table_payloads_t, value)



# API-s for table: fabric_header_ene_macro_table

NPL_FABRIC_HEADER_ENE_MACRO_TABLE_ACTION_UPDATE = 0x0

class npl_fabric_header_ene_macro_table_update_payload_t(basic_npl_struct):
    def __init__(self, ene_macro_id=0):
        super().__init__(8)
        self.ene_macro_id = ene_macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_header_ene_macro_table_update_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ene_macro_id(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ene_macro_id.setter
    def ene_macro_id(self, value):
        self._set_field_value('field ene_macro_id', 0, 8, npl_ene_macro_id_t, value)




class npl_fabric_header_ene_macro_table_key_t(basic_npl_struct):
    def __init__(self, fabric_header_type=0):
        super().__init__(4)
        self.fabric_header_type = fabric_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_header_ene_macro_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fabric_header_type(self):
        return self._get_field_value(0, 4)
    @fabric_header_type.setter
    def fabric_header_type(self, value):
        self._set_field_value('field fabric_header_type', 0, 4, int, value)

class npl_fabric_header_ene_macro_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_header_ene_macro_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update(self):
        return npl_fabric_header_ene_macro_table_update_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update.setter
    def update(self, value):
        self._set_field_value('field update', 0, 8, npl_fabric_header_ene_macro_table_update_payload_t, value)

class npl_fabric_header_ene_macro_table_value_t(basic_npl_struct):
    def __init__(self, ene_macro_id=0):
        super().__init__(16)
        self.payloads.update = npl_fabric_header_ene_macro_table_update_payload_t(ene_macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_header_ene_macro_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_header_ene_macro_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_fabric_header_ene_macro_table_payloads_t, value)



# API-s for table: fabric_header_start_table

NPL_FABRIC_HEADER_START_TABLE_ACTION_WRITE = 0x0

class npl_fabric_header_start_table_key_t(basic_npl_struct):
    def __init__(self, packet_fabric_header_start_ctrl_1_0_=0, device_tx_cong_on=0, packet_fabric_header_start_ctrl_3_=0):
        super().__init__(4)
        self.packet_fabric_header_start_ctrl_1_0_ = packet_fabric_header_start_ctrl_1_0_
        self.device_tx_cong_on = device_tx_cong_on
        self.packet_fabric_header_start_ctrl_3_ = packet_fabric_header_start_ctrl_3_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_header_start_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_fabric_header_start_ctrl_1_0_(self):
        return self._get_field_value(0, 2)
    @packet_fabric_header_start_ctrl_1_0_.setter
    def packet_fabric_header_start_ctrl_1_0_(self, value):
        self._set_field_value('field packet_fabric_header_start_ctrl_1_0_', 0, 2, int, value)
    @property
    def device_tx_cong_on(self):
        return self._get_field_value(2, 1)
    @device_tx_cong_on.setter
    def device_tx_cong_on(self, value):
        self._set_field_value('field device_tx_cong_on', 2, 1, int, value)
    @property
    def packet_fabric_header_start_ctrl_3_(self):
        return self._get_field_value(3, 1)
    @packet_fabric_header_start_ctrl_3_.setter
    def packet_fabric_header_start_ctrl_3_(self, value):
        self._set_field_value('field packet_fabric_header_start_ctrl_3_', 3, 1, int, value)

class npl_fabric_header_start_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_header_start_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_fabric_template_fabric_header_start_ctrl(self):
        return npl_fabric_header_start_template_t_anonymous_union_ctrl_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pd_fabric_template_fabric_header_start_ctrl.setter
    def pd_fabric_template_fabric_header_start_ctrl(self, value):
        self._set_field_value('field pd_fabric_template_fabric_header_start_ctrl', 0, 4, npl_fabric_header_start_template_t_anonymous_union_ctrl_t, value)

class npl_fabric_header_start_table_value_t(basic_npl_struct):
    def __init__(self, pd_fabric_template_fabric_header_start_ctrl=0):
        super().__init__(12)
        self.payloads.pd_fabric_template_fabric_header_start_ctrl = pd_fabric_template_fabric_header_start_ctrl

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_header_start_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_header_start_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_fabric_header_start_table_payloads_t, value)



# API-s for table: fabric_header_types_static_table

NPL_FABRIC_HEADER_TYPES_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_fabric_header_types_static_table_key_t(basic_npl_struct):
    def __init__(self, fabric_header_type=0):
        super().__init__(4)
        self.fabric_header_type = fabric_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_header_types_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fabric_header_type(self):
        return self._get_field_value(0, 4)
    @fabric_header_type.setter
    def fabric_header_type(self, value):
        self._set_field_value('field fabric_header_type', 0, 4, int, value)

class npl_fabric_header_types_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_header_types_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fabric_header_type_ok(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fabric_header_type_ok.setter
    def fabric_header_type_ok(self, value):
        self._set_field_value('field fabric_header_type_ok', 0, 1, npl_bool_t, value)

class npl_fabric_header_types_static_table_value_t(basic_npl_struct):
    def __init__(self, fabric_header_type_ok=0):
        super().__init__(9)
        self.payloads.fabric_header_type_ok = fabric_header_type_ok

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_header_types_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_header_types_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_fabric_header_types_static_table_payloads_t, value)



# API-s for table: fabric_headers_type_table

NPL_FABRIC_HEADERS_TYPE_TABLE_ACTION_UPDATE_FABRIC_LOCAL_VARS = 0x0

class npl_fabric_headers_type_table_update_fabric_local_vars_payload_t(basic_npl_struct):
    def __init__(self, fabric_header_type=0):
        super().__init__(4)
        self.fabric_header_type = fabric_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_headers_type_table_update_fabric_local_vars_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def fabric_header_type(self):
        return self._get_field_value(0, 4)
    @fabric_header_type.setter
    def fabric_header_type(self, value):
        self._set_field_value('field fabric_header_type', 0, 4, int, value)




class npl_fabric_headers_type_table_key_t(basic_npl_struct):
    def __init__(self, start_packing=0, plb_header_type=0, initial_fabric_header_type=0):
        super().__init__(6)
        self.start_packing = start_packing
        self.plb_header_type = plb_header_type
        self.initial_fabric_header_type = initial_fabric_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_headers_type_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def start_packing(self):
        return self._get_field_value(0, 1)
    @start_packing.setter
    def start_packing(self, value):
        self._set_field_value('field start_packing', 0, 1, int, value)
    @property
    def plb_header_type(self):
        return self._get_field_value(1, 1)
    @plb_header_type.setter
    def plb_header_type(self, value):
        self._set_field_value('field plb_header_type', 1, 1, int, value)
    @property
    def initial_fabric_header_type(self):
        return self._get_field_value(2, 4)
    @initial_fabric_header_type.setter
    def initial_fabric_header_type(self, value):
        self._set_field_value('field initial_fabric_header_type', 2, 4, int, value)

class npl_fabric_headers_type_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_headers_type_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_fabric_local_vars(self):
        return npl_fabric_headers_type_table_update_fabric_local_vars_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_fabric_local_vars.setter
    def update_fabric_local_vars(self, value):
        self._set_field_value('field update_fabric_local_vars', 0, 4, npl_fabric_headers_type_table_update_fabric_local_vars_payload_t, value)

class npl_fabric_headers_type_table_value_t(basic_npl_struct):
    def __init__(self, fabric_header_type=0):
        super().__init__(12)
        self.payloads.update_fabric_local_vars = npl_fabric_headers_type_table_update_fabric_local_vars_payload_t(fabric_header_type)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_headers_type_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_headers_type_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_fabric_headers_type_table_payloads_t, value)



# API-s for table: fabric_init_cfg

NPL_FABRIC_INIT_CFG_ACTION_UPDATE = 0x0

class npl_fabric_init_cfg_update_payload_t(basic_npl_struct):
    def __init__(self, fabric_init_cfg_hit_=0, fabric_cfg_=0):
        super().__init__(12)
        self.fabric_init_cfg_hit_ = fabric_init_cfg_hit_
        self.fabric_cfg_ = fabric_cfg_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_init_cfg_update_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def fabric_init_cfg_hit_(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 11)
    @fabric_init_cfg_hit_.setter
    def fabric_init_cfg_hit_(self, value):
        self._set_field_value('field fabric_init_cfg_hit_', 11, 1, npl_bool_t, value)
    @property
    def fabric_cfg_(self):
        return npl_fabric_cfg_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fabric_cfg_.setter
    def fabric_cfg_(self, value):
        self._set_field_value('field fabric_cfg_', 0, 11, npl_fabric_cfg_t, value)




class npl_fabric_init_cfg_key_t(basic_npl_struct):
    def __init__(self, ser=0):
        super().__init__(1)
        self.ser = ser

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_init_cfg_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ser(self):
        return self._get_field_value(0, 1)
    @ser.setter
    def ser(self, value):
        self._set_field_value('field ser', 0, 1, int, value)

class npl_fabric_init_cfg_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(12)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_init_cfg_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update(self):
        return npl_fabric_init_cfg_update_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update.setter
    def update(self, value):
        self._set_field_value('field update', 0, 12, npl_fabric_init_cfg_update_payload_t, value)

class npl_fabric_init_cfg_value_t(basic_npl_struct):
    def __init__(self, fabric_init_cfg_hit_=0, fabric_cfg_=0):
        super().__init__(20)
        self.payloads.update = npl_fabric_init_cfg_update_payload_t(fabric_init_cfg_hit_, fabric_cfg_)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_init_cfg_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(12, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 12, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_init_cfg_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 12, npl_fabric_init_cfg_payloads_t, value)



# API-s for table: fabric_npuh_size_calculation_static_table

NPL_FABRIC_NPUH_SIZE_CALCULATION_STATIC_TABLE_ACTION_UPDATE_NPUH_SIZE = 0x0

class npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t(basic_npl_struct):
    def __init__(self, is_inject_pkt=0, is_network_pkt=0, ene_with_soft_npuh=0, npuh_size=0):
        super().__init__(10)
        self.is_inject_pkt = is_inject_pkt
        self.is_network_pkt = is_network_pkt
        self.ene_with_soft_npuh = ene_with_soft_npuh
        self.npuh_size = npuh_size

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def is_inject_pkt(self):
        return self._get_field_value(9, 1)
    @is_inject_pkt.setter
    def is_inject_pkt(self, value):
        self._set_field_value('field is_inject_pkt', 9, 1, int, value)
    @property
    def is_network_pkt(self):
        return self._get_field_value(8, 1)
    @is_network_pkt.setter
    def is_network_pkt(self, value):
        self._set_field_value('field is_network_pkt', 8, 1, int, value)
    @property
    def ene_with_soft_npuh(self):
        return self._get_field_value(7, 1)
    @ene_with_soft_npuh.setter
    def ene_with_soft_npuh(self, value):
        self._set_field_value('field ene_with_soft_npuh', 7, 1, int, value)
    @property
    def npuh_size(self):
        return self._get_field_value(0, 7)
    @npuh_size.setter
    def npuh_size(self, value):
        self._set_field_value('field npuh_size', 0, 7, int, value)




class npl_fabric_npuh_size_calculation_static_table_key_t(basic_npl_struct):
    def __init__(self, packet_tx_npu_header_is_inject_up=0, packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type=0, packet_tx_npu_header_fwd_header_type=0, device_tx_cud_msb_4bits=0):
        super().__init__(13)
        self.packet_tx_npu_header_is_inject_up = packet_tx_npu_header_is_inject_up
        self.packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type = packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type
        self.packet_tx_npu_header_fwd_header_type = packet_tx_npu_header_fwd_header_type
        self.device_tx_cud_msb_4bits = device_tx_cud_msb_4bits

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_npuh_size_calculation_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_tx_npu_header_is_inject_up(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @packet_tx_npu_header_is_inject_up.setter
    def packet_tx_npu_header_is_inject_up(self, value):
        self._set_field_value('field packet_tx_npu_header_is_inject_up', 0, 1, npl_bool_t, value)
    @property
    def packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type(self):
        return self._get_field_value(1, 4)
    @packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type.setter
    def packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type(self, value):
        self._set_field_value('field packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type', 1, 4, int, value)
    @property
    def packet_tx_npu_header_fwd_header_type(self):
        return self._get_field_value(5, 4)
    @packet_tx_npu_header_fwd_header_type.setter
    def packet_tx_npu_header_fwd_header_type(self, value):
        self._set_field_value('field packet_tx_npu_header_fwd_header_type', 5, 4, int, value)
    @property
    def device_tx_cud_msb_4bits(self):
        return self._get_field_value(9, 4)
    @device_tx_cud_msb_4bits.setter
    def device_tx_cud_msb_4bits(self, value):
        self._set_field_value('field device_tx_cud_msb_4bits', 9, 4, int, value)

class npl_fabric_npuh_size_calculation_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_npuh_size_calculation_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_npuh_size(self):
        return npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_npuh_size.setter
    def update_npuh_size(self, value):
        self._set_field_value('field update_npuh_size', 0, 10, npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t, value)

class npl_fabric_npuh_size_calculation_static_table_value_t(basic_npl_struct):
    def __init__(self, is_inject_pkt=0, is_network_pkt=0, ene_with_soft_npuh=0, npuh_size=0):
        super().__init__(18)
        self.payloads.update_npuh_size = npl_fabric_npuh_size_calculation_static_table_update_npuh_size_payload_t(is_inject_pkt, is_network_pkt, ene_with_soft_npuh, npuh_size)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_npuh_size_calculation_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_npuh_size_calculation_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_fabric_npuh_size_calculation_static_table_payloads_t, value)



# API-s for table: fabric_out_color_map_table

NPL_FABRIC_OUT_COLOR_MAP_TABLE_ACTION_WRITE = 0x0

class npl_fabric_out_color_map_table_key_t(basic_npl_struct):
    def __init__(self, out_color=0):
        super().__init__(2)
        self.out_color = out_color

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_out_color_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def out_color(self):
        return self._get_field_value(0, 2)
    @out_color.setter
    def out_color(self, value):
        self._set_field_value('field out_color', 0, 2, int, value)

class npl_fabric_out_color_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_out_color_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dp(self):
        return self._get_field_value(0, 6)
    @dp.setter
    def dp(self, value):
        self._set_field_value('field dp', 0, 6, int, value)

class npl_fabric_out_color_map_table_value_t(basic_npl_struct):
    def __init__(self, dp=0):
        super().__init__(14)
        self.payloads.dp = dp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_out_color_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_out_color_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_fabric_out_color_map_table_payloads_t, value)



# API-s for table: fabric_rx_fwd_error_handling_counter_table

NPL_FABRIC_RX_FWD_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT = 0x0

class npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t(basic_npl_struct):
    def __init__(self, counter=0):
        super().__init__(20)
        self.counter = counter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter.setter
    def counter(self, value):
        self._set_field_value('field counter', 0, 20, npl_counter_ptr_t, value)




class npl_fabric_rx_fwd_error_handling_counter_table_key_t(basic_npl_struct):
    def __init__(self, error_code=0, ser=0):
        super().__init__(4)
        self.error_code = error_code
        self.ser = ser

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_fwd_error_handling_counter_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def error_code(self):
        return self._get_field_value(0, 3)
    @error_code.setter
    def error_code(self, value):
        self._set_field_value('field error_code', 0, 3, int, value)
    @property
    def ser(self):
        return self._get_field_value(3, 1)
    @ser.setter
    def ser(self, value):
        self._set_field_value('field ser', 3, 1, int, value)

class npl_fabric_rx_fwd_error_handling_counter_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_fwd_error_handling_counter_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_result(self):
        return npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_result.setter
    def update_result(self, value):
        self._set_field_value('field update_result', 0, 20, npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t, value)

class npl_fabric_rx_fwd_error_handling_counter_table_value_t(basic_npl_struct):
    def __init__(self, counter=0):
        super().__init__(28)
        self.payloads.update_result = npl_fabric_rx_fwd_error_handling_counter_table_update_result_payload_t(counter)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_fwd_error_handling_counter_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_rx_fwd_error_handling_counter_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_fabric_rx_fwd_error_handling_counter_table_payloads_t, value)



# API-s for table: fabric_rx_fwd_error_handling_destination_table

NPL_FABRIC_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT = 0x0

class npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t(basic_npl_struct):
    def __init__(self, destination=0):
        super().__init__(20)
        self.destination = destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def destination(self):
        return self._get_field_value(0, 20)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 0, 20, int, value)




class npl_fabric_rx_fwd_error_handling_destination_table_key_t(basic_npl_struct):
    def __init__(self, error_code=0, ser=0):
        super().__init__(4)
        self.error_code = error_code
        self.ser = ser

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_fwd_error_handling_destination_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def error_code(self):
        return self._get_field_value(0, 3)
    @error_code.setter
    def error_code(self, value):
        self._set_field_value('field error_code', 0, 3, int, value)
    @property
    def ser(self):
        return self._get_field_value(3, 1)
    @ser.setter
    def ser(self, value):
        self._set_field_value('field ser', 3, 1, int, value)

class npl_fabric_rx_fwd_error_handling_destination_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_fwd_error_handling_destination_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_result(self):
        return npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_result.setter
    def update_result(self, value):
        self._set_field_value('field update_result', 0, 20, npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t, value)

class npl_fabric_rx_fwd_error_handling_destination_table_value_t(basic_npl_struct):
    def __init__(self, destination=0):
        super().__init__(28)
        self.payloads.update_result = npl_fabric_rx_fwd_error_handling_destination_table_update_result_payload_t(destination)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_fwd_error_handling_destination_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_rx_fwd_error_handling_destination_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_fabric_rx_fwd_error_handling_destination_table_payloads_t, value)



# API-s for table: fabric_rx_term_error_handling_counter_table

NPL_FABRIC_RX_TERM_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT = 0x0

class npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t(basic_npl_struct):
    def __init__(self, counter=0):
        super().__init__(20)
        self.counter = counter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter.setter
    def counter(self, value):
        self._set_field_value('field counter', 0, 20, npl_counter_ptr_t, value)




class npl_fabric_rx_term_error_handling_counter_table_key_t(basic_npl_struct):
    def __init__(self, ser=0):
        super().__init__(1)
        self.ser = ser

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_term_error_handling_counter_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ser(self):
        return self._get_field_value(0, 1)
    @ser.setter
    def ser(self, value):
        self._set_field_value('field ser', 0, 1, int, value)

class npl_fabric_rx_term_error_handling_counter_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_term_error_handling_counter_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_result(self):
        return npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_result.setter
    def update_result(self, value):
        self._set_field_value('field update_result', 0, 20, npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t, value)

class npl_fabric_rx_term_error_handling_counter_table_value_t(basic_npl_struct):
    def __init__(self, counter=0):
        super().__init__(28)
        self.payloads.update_result = npl_fabric_rx_term_error_handling_counter_table_update_result_payload_t(counter)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_term_error_handling_counter_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_rx_term_error_handling_counter_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_fabric_rx_term_error_handling_counter_table_payloads_t, value)



# API-s for table: fabric_rx_term_error_handling_destination_table

NPL_FABRIC_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT = 0x0

class npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t(basic_npl_struct):
    def __init__(self, destination=0):
        super().__init__(20)
        self.destination = destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def destination(self):
        return self._get_field_value(0, 20)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 0, 20, int, value)




class npl_fabric_rx_term_error_handling_destination_table_key_t(basic_npl_struct):
    def __init__(self, ser=0):
        super().__init__(1)
        self.ser = ser

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_term_error_handling_destination_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ser(self):
        return self._get_field_value(0, 1)
    @ser.setter
    def ser(self, value):
        self._set_field_value('field ser', 0, 1, int, value)

class npl_fabric_rx_term_error_handling_destination_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_term_error_handling_destination_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_result(self):
        return npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_result.setter
    def update_result(self, value):
        self._set_field_value('field update_result', 0, 20, npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t, value)

class npl_fabric_rx_term_error_handling_destination_table_value_t(basic_npl_struct):
    def __init__(self, destination=0):
        super().__init__(28)
        self.payloads.update_result = npl_fabric_rx_term_error_handling_destination_table_update_result_payload_t(destination)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_rx_term_error_handling_destination_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_rx_term_error_handling_destination_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_fabric_rx_term_error_handling_destination_table_payloads_t, value)



# API-s for table: fabric_scaled_mc_map_to_netork_slice_static_table

NPL_FABRIC_SCALED_MC_MAP_TO_NETORK_SLICE_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_fabric_scaled_mc_map_to_netork_slice_static_table_key_t(basic_npl_struct):
    def __init__(self, smcid_lsb=0):
        super().__init__(4)
        self.smcid_lsb = smcid_lsb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_scaled_mc_map_to_netork_slice_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def smcid_lsb(self):
        return self._get_field_value(0, 4)
    @smcid_lsb.setter
    def smcid_lsb(self, value):
        self._set_field_value('field smcid_lsb', 0, 4, int, value)

class npl_fabric_scaled_mc_map_to_netork_slice_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_scaled_mc_map_to_netork_slice_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def network_slice_mcid(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @network_slice_mcid.setter
    def network_slice_mcid(self, value):
        self._set_field_value('field network_slice_mcid', 0, 20, npl_destination_t, value)

class npl_fabric_scaled_mc_map_to_netork_slice_static_table_value_t(basic_npl_struct):
    def __init__(self, network_slice_mcid=0):
        super().__init__(28)
        self.payloads.network_slice_mcid = network_slice_mcid

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_scaled_mc_map_to_netork_slice_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_scaled_mc_map_to_netork_slice_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_fabric_scaled_mc_map_to_netork_slice_static_table_payloads_t, value)



# API-s for table: fabric_smcid_threshold_table

NPL_FABRIC_SMCID_THRESHOLD_TABLE_ACTION_WRITE = 0x0

class npl_fabric_smcid_threshold_table_key_t(basic_npl_struct):
    def __init__(self, dummy=0):
        super().__init__(1)
        self.dummy = dummy

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_smcid_threshold_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dummy(self):
        return self._get_field_value(0, 1)
    @dummy.setter
    def dummy(self, value):
        self._set_field_value('field dummy', 0, 1, int, value)

class npl_fabric_smcid_threshold_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_smcid_threshold_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def smcid_threshold(self):
        return npl_mcid_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @smcid_threshold.setter
    def smcid_threshold(self, value):
        self._set_field_value('field smcid_threshold', 0, 16, npl_mcid_t, value)

class npl_fabric_smcid_threshold_table_value_t(basic_npl_struct):
    def __init__(self, smcid_threshold=0):
        super().__init__(24)
        self.payloads.smcid_threshold = smcid_threshold

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_smcid_threshold_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_smcid_threshold_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_fabric_smcid_threshold_table_payloads_t, value)



# API-s for table: fabric_term_error_checker_static_table

NPL_FABRIC_TERM_ERROR_CHECKER_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_fabric_term_error_checker_static_table_key_t(basic_npl_struct):
    def __init__(self, mismatch_indications=0, fabric_init_cfg_table_hit=0, fabric_header_type_ok=0, is_keepalive=0):
        super().__init__(6)
        self.mismatch_indications = mismatch_indications
        self.fabric_init_cfg_table_hit = fabric_init_cfg_table_hit
        self.fabric_header_type_ok = fabric_header_type_ok
        self.is_keepalive = is_keepalive

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_term_error_checker_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mismatch_indications(self):
        return npl_mismatch_indications_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mismatch_indications.setter
    def mismatch_indications(self, value):
        self._set_field_value('field mismatch_indications', 0, 3, npl_mismatch_indications_t, value)
    @property
    def fabric_init_cfg_table_hit(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 3)
    @fabric_init_cfg_table_hit.setter
    def fabric_init_cfg_table_hit(self, value):
        self._set_field_value('field fabric_init_cfg_table_hit', 3, 1, npl_bool_t, value)
    @property
    def fabric_header_type_ok(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @fabric_header_type_ok.setter
    def fabric_header_type_ok(self, value):
        self._set_field_value('field fabric_header_type_ok', 4, 1, npl_bool_t, value)
    @property
    def is_keepalive(self):
        return self._get_field_value(5, 1)
    @is_keepalive.setter
    def is_keepalive(self, value):
        self._set_field_value('field is_keepalive', 5, 1, int, value)

class npl_fabric_term_error_checker_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_term_error_checker_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_fabric_error_event_error_code(self):
        return self._get_field_value(0, 3)
    @pd_fabric_error_event_error_code.setter
    def pd_fabric_error_event_error_code(self, value):
        self._set_field_value('field pd_fabric_error_event_error_code', 0, 3, int, value)

class npl_fabric_term_error_checker_static_table_value_t(basic_npl_struct):
    def __init__(self, pd_fabric_error_event_error_code=0):
        super().__init__(11)
        self.payloads.pd_fabric_error_event_error_code = pd_fabric_error_event_error_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_term_error_checker_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_term_error_checker_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_fabric_term_error_checker_static_table_payloads_t, value)



# API-s for table: fabric_tm_headers_table

NPL_FABRIC_TM_HEADERS_TABLE_ACTION_UPDATE_FABRIC_LOCAL_VARS = 0x0

class npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t(basic_npl_struct):
    def __init__(self, ingress_multicast=0, tm_header_type=0, initial_fabric_header_type=0, ctrl=0):
        super().__init__(11)
        self.ingress_multicast = ingress_multicast
        self.tm_header_type = tm_header_type
        self.initial_fabric_header_type = initial_fabric_header_type
        self.ctrl = ctrl

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ingress_multicast(self):
        return self._get_field_value(10, 1)
    @ingress_multicast.setter
    def ingress_multicast(self, value):
        self._set_field_value('field ingress_multicast', 10, 1, int, value)
    @property
    def tm_header_type(self):
        return self._get_field_value(8, 2)
    @tm_header_type.setter
    def tm_header_type(self, value):
        self._set_field_value('field tm_header_type', 8, 2, int, value)
    @property
    def initial_fabric_header_type(self):
        return self._get_field_value(4, 4)
    @initial_fabric_header_type.setter
    def initial_fabric_header_type(self, value):
        self._set_field_value('field initial_fabric_header_type', 4, 4, int, value)
    @property
    def ctrl(self):
        return npl_fabric_header_start_template_t_anonymous_union_ctrl_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ctrl.setter
    def ctrl(self, value):
        self._set_field_value('field ctrl', 0, 4, npl_fabric_header_start_template_t_anonymous_union_ctrl_t, value)




class npl_fabric_tm_headers_table_key_t(basic_npl_struct):
    def __init__(self, tx_cud_prefix=0, fabric_oq_type=0):
        super().__init__(7)
        self.tx_cud_prefix = tx_cud_prefix
        self.fabric_oq_type = fabric_oq_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_tm_headers_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_cud_prefix(self):
        return self._get_field_value(0, 4)
    @tx_cud_prefix.setter
    def tx_cud_prefix(self, value):
        self._set_field_value('field tx_cud_prefix', 0, 4, int, value)
    @property
    def fabric_oq_type(self):
        return self._get_field_value(4, 3)
    @fabric_oq_type.setter
    def fabric_oq_type(self, value):
        self._set_field_value('field fabric_oq_type', 4, 3, int, value)

class npl_fabric_tm_headers_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(11)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_tm_headers_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_fabric_local_vars(self):
        return npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_fabric_local_vars.setter
    def update_fabric_local_vars(self, value):
        self._set_field_value('field update_fabric_local_vars', 0, 11, npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t, value)

class npl_fabric_tm_headers_table_value_t(basic_npl_struct):
    def __init__(self, ingress_multicast=0, tm_header_type=0, initial_fabric_header_type=0, ctrl=0):
        super().__init__(19)
        self.payloads.update_fabric_local_vars = npl_fabric_tm_headers_table_update_fabric_local_vars_payload_t(ingress_multicast, tm_header_type, initial_fabric_header_type, ctrl)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_tm_headers_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(11, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 11, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_tm_headers_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 11, npl_fabric_tm_headers_table_payloads_t, value)



# API-s for table: fabric_transmit_error_checker_static_table

NPL_FABRIC_TRANSMIT_ERROR_CHECKER_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_fabric_transmit_error_checker_static_table_key_t(basic_npl_struct):
    def __init__(self, pkt_issu=0, expected_issu=0, fabric_init_cfg_table_hit=0, npu_header=0):
        super().__init__(7)
        self.pkt_issu = pkt_issu
        self.expected_issu = expected_issu
        self.fabric_init_cfg_table_hit = fabric_init_cfg_table_hit
        self.npu_header = npu_header

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_transmit_error_checker_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pkt_issu(self):
        return self._get_field_value(0, 1)
    @pkt_issu.setter
    def pkt_issu(self, value):
        self._set_field_value('field pkt_issu', 0, 1, int, value)
    @property
    def expected_issu(self):
        return self._get_field_value(1, 1)
    @expected_issu.setter
    def expected_issu(self, value):
        self._set_field_value('field expected_issu', 1, 1, int, value)
    @property
    def fabric_init_cfg_table_hit(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @fabric_init_cfg_table_hit.setter
    def fabric_init_cfg_table_hit(self, value):
        self._set_field_value('field fabric_init_cfg_table_hit', 2, 1, npl_bool_t, value)
    @property
    def npu_header(self):
        return self._get_field_value(3, 4)
    @npu_header.setter
    def npu_header(self, value):
        self._set_field_value('field npu_header', 3, 4, int, value)

class npl_fabric_transmit_error_checker_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_transmit_error_checker_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fabric_error_event_error_code(self):
        return self._get_field_value(0, 3)
    @fabric_error_event_error_code.setter
    def fabric_error_event_error_code(self, value):
        self._set_field_value('field fabric_error_event_error_code', 0, 3, int, value)

class npl_fabric_transmit_error_checker_static_table_value_t(basic_npl_struct):
    def __init__(self, fabric_error_event_error_code=0):
        super().__init__(11)
        self.payloads.fabric_error_event_error_code = fabric_error_event_error_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fabric_transmit_error_checker_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_fabric_transmit_error_checker_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_fabric_transmit_error_checker_static_table_payloads_t, value)



# API-s for table: fb_link_2_link_bundle_table

NPL_FB_LINK_2_LINK_BUNDLE_TABLE_ACTION_WRITE = 0x0

class npl_fb_link_2_link_bundle_table_key_t(basic_npl_struct):
    def __init__(self, fe_uc_random_fb_link=0):
        super().__init__(7)
        self.fe_uc_random_fb_link = fe_uc_random_fb_link

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fb_link_2_link_bundle_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fe_uc_random_fb_link(self):
        return npl_fe_uc_random_fb_link_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fe_uc_random_fb_link.setter
    def fe_uc_random_fb_link(self, value):
        self._set_field_value('field fe_uc_random_fb_link', 0, 7, npl_fe_uc_random_fb_link_t, value)

class npl_fb_link_2_link_bundle_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fb_link_2_link_bundle_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fb_link_2_link_bundle_table_result(self):
        return npl_fb_link_2_link_bundle_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fb_link_2_link_bundle_table_result.setter
    def fb_link_2_link_bundle_table_result(self, value):
        self._set_field_value('field fb_link_2_link_bundle_table_result', 0, 6, npl_fb_link_2_link_bundle_table_result_t, value)

class npl_fb_link_2_link_bundle_table_value_t(basic_npl_struct):
    def __init__(self, fb_link_2_link_bundle_table_result=0):
        super().__init__(14)
        self.payloads.fb_link_2_link_bundle_table_result = fb_link_2_link_bundle_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fb_link_2_link_bundle_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_fb_link_2_link_bundle_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_fb_link_2_link_bundle_table_payloads_t, value)



# API-s for table: fe_broadcast_bmp_table

NPL_FE_BROADCAST_BMP_TABLE_ACTION_WRITE = 0x0

class npl_fe_broadcast_bmp_table_key_t(basic_npl_struct):
    def __init__(self, random_bc_bmp_entry=0):
        super().__init__(7)
        self.random_bc_bmp_entry = random_bc_bmp_entry

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_broadcast_bmp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def random_bc_bmp_entry(self):
        return npl_random_bc_bmp_entry_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @random_bc_bmp_entry.setter
    def random_bc_bmp_entry(self, value):
        self._set_field_value('field random_bc_bmp_entry', 0, 7, npl_random_bc_bmp_entry_t, value)

class npl_fe_broadcast_bmp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(108)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_broadcast_bmp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fe_broadcast_bmp_table_result(self):
        return npl_fe_broadcast_bmp_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fe_broadcast_bmp_table_result.setter
    def fe_broadcast_bmp_table_result(self, value):
        self._set_field_value('field fe_broadcast_bmp_table_result', 0, 108, npl_fe_broadcast_bmp_table_result_t, value)

class npl_fe_broadcast_bmp_table_value_t(basic_npl_struct):
    def __init__(self, fe_broadcast_bmp_table_result=0):
        super().__init__(116)
        self.payloads.fe_broadcast_bmp_table_result = fe_broadcast_bmp_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_broadcast_bmp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(108, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 108, 8, int, value)
    @property
    def payloads(self):
        return npl_fe_broadcast_bmp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 108, npl_fe_broadcast_bmp_table_payloads_t, value)



# API-s for table: fe_rlb_uc_tx_fb_link_to_oq_map_table

NPL_FE_RLB_UC_TX_FB_LINK_TO_OQ_MAP_TABLE_ACTION_WRITE = 0x0

class npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_key_t(basic_npl_struct):
    def __init__(self, fe_uc_bundle_selected_link=0):
        super().__init__(7)
        self.fe_uc_bundle_selected_link = fe_uc_bundle_selected_link

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fe_uc_bundle_selected_link(self):
        return npl_fe_uc_bundle_selected_link_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fe_uc_bundle_selected_link.setter
    def fe_uc_bundle_selected_link(self, value):
        self._set_field_value('field fe_uc_bundle_selected_link', 0, 7, npl_fe_uc_bundle_selected_link_t, value)

class npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(9)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fe_rlb_uc_tx_fb_link_to_oq_map_table_result(self):
        return npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fe_rlb_uc_tx_fb_link_to_oq_map_table_result.setter
    def fe_rlb_uc_tx_fb_link_to_oq_map_table_result(self, value):
        self._set_field_value('field fe_rlb_uc_tx_fb_link_to_oq_map_table_result', 0, 9, npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_result_t, value)

class npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_value_t(basic_npl_struct):
    def __init__(self, fe_rlb_uc_tx_fb_link_to_oq_map_table_result=0):
        super().__init__(17)
        self.payloads.fe_rlb_uc_tx_fb_link_to_oq_map_table_result = fe_rlb_uc_tx_fb_link_to_oq_map_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(9, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 9, 8, int, value)
    @property
    def payloads(self):
        return npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 9, npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_payloads_t, value)



# API-s for table: fe_smcid_threshold_table

NPL_FE_SMCID_THRESHOLD_TABLE_ACTION_WRITE = 0x0

class npl_fe_smcid_threshold_table_key_t(basic_npl_struct):
    def __init__(self, dummy=0):
        super().__init__(1)
        self.dummy = dummy

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_smcid_threshold_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dummy(self):
        return self._get_field_value(0, 1)
    @dummy.setter
    def dummy(self, value):
        self._set_field_value('field dummy', 0, 1, int, value)

class npl_fe_smcid_threshold_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_smcid_threshold_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def smcid_threshold(self):
        return npl_mcid_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @smcid_threshold.setter
    def smcid_threshold(self, value):
        self._set_field_value('field smcid_threshold', 0, 16, npl_mcid_t, value)

class npl_fe_smcid_threshold_table_value_t(basic_npl_struct):
    def __init__(self, smcid_threshold=0):
        super().__init__(24)
        self.payloads.smcid_threshold = smcid_threshold

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_smcid_threshold_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_fe_smcid_threshold_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_fe_smcid_threshold_table_payloads_t, value)



# API-s for table: fe_smcid_to_mcid_compound_table

NPL_FE_SMCID_TO_MCID_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_fe_smcid_to_mcid_compound_table_key_t(basic_npl_struct):
    def __init__(self, system_mcid_17_3_=0):
        super().__init__(15)
        self.system_mcid_17_3_ = system_mcid_17_3_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_smcid_to_mcid_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def system_mcid_17_3_(self):
        return self._get_field_value(0, 15)
    @system_mcid_17_3_.setter
    def system_mcid_17_3_(self, value):
        self._set_field_value('field system_mcid_17_3_', 0, 15, int, value)

class npl_fe_smcid_to_mcid_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(144)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_smcid_to_mcid_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mcid_array(self):
        return npl_mcid_array_wrapper_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mcid_array.setter
    def mcid_array(self, value):
        self._set_field_value('field mcid_array', 0, 144, npl_mcid_array_wrapper_t, value)

class npl_fe_smcid_to_mcid_compound_table_value_t(basic_npl_struct):
    def __init__(self, mcid_array=0):
        super().__init__(152)
        self.payloads.mcid_array = mcid_array

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_smcid_to_mcid_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(144, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 144, 8, int, value)
    @property
    def payloads(self):
        return npl_fe_smcid_to_mcid_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 144, npl_fe_smcid_to_mcid_compound_table_payloads_t, value)



# API-s for table: fe_smcid_to_mcid_table

NPL_FE_SMCID_TO_MCID_TABLE_ACTION_WRITE = 0x0

class npl_fe_smcid_to_mcid_table_key_t(basic_npl_struct):
    def __init__(self, system_mcid_17_3=0):
        super().__init__(15)
        self.system_mcid_17_3 = system_mcid_17_3

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_smcid_to_mcid_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def system_mcid_17_3(self):
        return self._get_field_value(0, 15)
    @system_mcid_17_3.setter
    def system_mcid_17_3(self, value):
        self._set_field_value('field system_mcid_17_3', 0, 15, int, value)

class npl_fe_smcid_to_mcid_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(128)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_smcid_to_mcid_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mcid_array(self):
        return npl_mcid_array_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mcid_array.setter
    def mcid_array(self, value):
        self._set_field_value('field mcid_array', 0, 128, npl_mcid_array_t, value)

class npl_fe_smcid_to_mcid_table_value_t(basic_npl_struct):
    def __init__(self, mcid_array=0):
        super().__init__(136)
        self.payloads.mcid_array = mcid_array

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_smcid_to_mcid_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(128, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 128, 8, int, value)
    @property
    def payloads(self):
        return npl_fe_smcid_to_mcid_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 128, npl_fe_smcid_to_mcid_table_payloads_t, value)



# API-s for table: fe_tm_header_destination_pack_table

NPL_FE_TM_HEADER_DESTINATION_PACK_TABLE_ACTION_WRITE = 0x0

class npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_device=0):
        super().__init__(20)
        self.packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_device = packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_device

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_device(self):
        return self._get_field_value(0, 9)
    @packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_device.setter
    def packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_device(self, value):
        self._set_field_value('field packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_device', 0, 9, int, value)
    @property
    def const1_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB_KEY_exact_0x6b0(self):
        return self._get_field_value(9, 11)



class npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_unicast_flb_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp=0):
        super().__init__(20)
        self.packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp = packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_unicast_flb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp(self):
        return self._get_field_value(0, 13)
    @packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp.setter
    def packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp(self, value):
        self._set_field_value('field packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp', 0, 13, int, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(13, 1)
    @property
    def const2_TM_DESTINATION_DSP_PREFIX_exact_0x34(self):
        return self._get_field_value(14, 6)



class npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t(basic_npl_struct):
    def __init__(self, device_tm_hdr_mmm_multicast_id=0):
        super().__init__(20)
        self.device_tm_hdr_mmm_multicast_id = device_tm_hdr_mmm_multicast_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def device_tm_hdr_mmm_multicast_id(self):
        return self._get_field_value(0, 16)
    @device_tm_hdr_mmm_multicast_id.setter
    def device_tm_hdr_mmm_multicast_id(self, value):
        self._set_field_value('field device_tm_hdr_mmm_multicast_id', 0, 16, int, value)
    @property
    def const1_TM_DESTINATION_MCID_PREFIX_exact_0xf(self):
        return self._get_field_value(16, 4)



class npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_mum_plb_t(basic_npl_struct):
    def __init__(self, device_tm_hdr_mum_multicast_id=0):
        super().__init__(20)
        self.device_tm_hdr_mum_multicast_id = device_tm_hdr_mum_multicast_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_mum_plb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def device_tm_hdr_mum_multicast_id(self):
        return self._get_field_value(0, 16)
    @device_tm_hdr_mum_multicast_id.setter
    def device_tm_hdr_mum_multicast_id(self, value):
        self._set_field_value('field device_tm_hdr_mum_multicast_id', 0, 16, int, value)
    @property
    def const1_TM_DESTINATION_MCID_PREFIX_exact_0xf(self):
        return self._get_field_value(16, 4)




class fe_tm_header_destination_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = fe_tm_header_destination_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB(self):
        return npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB.setter
    def NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB', 0, 20, npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t, value)
    @property
    def NPL_TM_HEADER_TYPE_UNICAST_FLB(self):
        return npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_unicast_flb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_UNICAST_FLB.setter
    def NPL_TM_HEADER_TYPE_UNICAST_FLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_UNICAST_FLB', 0, 20, npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_unicast_flb_t, value)
    @property
    def NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB(self):
        return npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB.setter
    def NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB', 0, 20, npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t, value)
    @property
    def NPL_TM_HEADER_TYPE_MUM_PLB(self):
        return npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_mum_plb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_MUM_PLB.setter
    def NPL_TM_HEADER_TYPE_MUM_PLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_MUM_PLB', 0, 20, npl_fe_tm_header_destination_pack_table_key_option_tm_header_type_mum_plb_t, value)

class npl_fe_tm_header_destination_pack_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_0__header_1__tm_header_base_hdr_type=0):
        super().__init__(20)
        self.packet_protocol_layer_0__header_1__tm_header_base_hdr_type = packet_protocol_layer_0__header_1__tm_header_base_hdr_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_tm_header_destination_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _packet_protocol_layer_0__header_1__tm_header_base_hdr_type = 0
    @property
    def packet_protocol_layer_0__header_1__tm_header_base_hdr_type(self):
        return self._packet_protocol_layer_0__header_1__tm_header_base_hdr_type
    @packet_protocol_layer_0__header_1__tm_header_base_hdr_type.setter
    def packet_protocol_layer_0__header_1__tm_header_base_hdr_type(self, value):
        self._packet_protocol_layer_0__header_1__tm_header_base_hdr_type = value
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB:
            self._set_field_value('const field', 9, 11, int, 0x6b0)
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_UNICAST_FLB:
            self._set_field_value('const field', 13, 1, int, 0x0)
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_UNICAST_FLB:
            self._set_field_value('const field', 14, 6, int, 0x34)
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB:
            self._set_field_value('const field', 16, 4, int, 0xf)
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_MUM_PLB:
            self._set_field_value('const field', 16, 4, int, 0xf)

    @property
    def options(self):
        return fe_tm_header_destination_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 20 - 0, fe_tm_header_destination_pack_table_key_options_t, value)

class npl_fe_tm_header_destination_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_tm_header_destination_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_destination(self):
        return self._get_field_value(0, 20)
    @pd_destination.setter
    def pd_destination(self, value):
        self._set_field_value('field pd_destination', 0, 20, int, value)

class npl_fe_tm_header_destination_pack_table_value_t(basic_npl_struct):
    def __init__(self, pd_destination=0):
        super().__init__(28)
        self.payloads.pd_destination = pd_destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_tm_header_destination_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_fe_tm_header_destination_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_fe_tm_header_destination_pack_table_payloads_t, value)



# API-s for table: fe_uc_link_bundle_desc_table

NPL_FE_UC_LINK_BUNDLE_DESC_TABLE_ACTION_WRITE = 0x0

class npl_fe_uc_link_bundle_desc_table_key_t(basic_npl_struct):
    def __init__(self, fb_link_2_link_bundle_table_result_bundle_num=0):
        super().__init__(6)
        self.fb_link_2_link_bundle_table_result_bundle_num = fb_link_2_link_bundle_table_result_bundle_num

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_uc_link_bundle_desc_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fb_link_2_link_bundle_table_result_bundle_num(self):
        return self._get_field_value(0, 6)
    @fb_link_2_link_bundle_table_result_bundle_num.setter
    def fb_link_2_link_bundle_table_result_bundle_num(self, value):
        self._set_field_value('field fb_link_2_link_bundle_table_result_bundle_num', 0, 6, int, value)

class npl_fe_uc_link_bundle_desc_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(88)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_uc_link_bundle_desc_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fe_uc_link_bundle_desc_table_result(self):
        return npl_fe_uc_link_bundle_desc_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fe_uc_link_bundle_desc_table_result.setter
    def fe_uc_link_bundle_desc_table_result(self, value):
        self._set_field_value('field fe_uc_link_bundle_desc_table_result', 0, 88, npl_fe_uc_link_bundle_desc_table_result_t, value)

class npl_fe_uc_link_bundle_desc_table_value_t(basic_npl_struct):
    def __init__(self, fe_uc_link_bundle_desc_table_result=0):
        super().__init__(96)
        self.payloads.fe_uc_link_bundle_desc_table_result = fe_uc_link_bundle_desc_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fe_uc_link_bundle_desc_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(88, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 88, 8, int, value)
    @property
    def payloads(self):
        return npl_fe_uc_link_bundle_desc_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 88, npl_fe_uc_link_bundle_desc_table_payloads_t, value)



# API-s for table: fi_core_tcam_table

NPL_FI_CORE_TCAM_TABLE_ACTION_WRITE = 0x0

class npl_fi_core_tcam_table_key_t(basic_npl_struct):
    def __init__(self, header_data=0, fi_macro=0):
        super().__init__(40)
        self.header_data = header_data
        self.fi_macro = fi_macro

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fi_core_tcam_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def header_data(self):
        return self._get_field_value(0, 34)
    @header_data.setter
    def header_data(self, value):
        self._set_field_value('field header_data', 0, 34, int, value)
    @property
    def fi_macro(self):
        return self._get_field_value(34, 6)
    @fi_macro.setter
    def fi_macro(self, value):
        self._set_field_value('field fi_macro', 34, 6, int, value)

class npl_fi_core_tcam_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(54)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fi_core_tcam_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fi_core_tcam_assoc_data(self):
        return npl_fi_core_tcam_assoc_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fi_core_tcam_assoc_data.setter
    def fi_core_tcam_assoc_data(self, value):
        self._set_field_value('field fi_core_tcam_assoc_data', 0, 54, npl_fi_core_tcam_assoc_data_t, value)

class npl_fi_core_tcam_table_value_t(basic_npl_struct):
    def __init__(self, fi_core_tcam_assoc_data=0):
        super().__init__(62)
        self.payloads.fi_core_tcam_assoc_data = fi_core_tcam_assoc_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fi_core_tcam_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(54, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 54, 8, int, value)
    @property
    def payloads(self):
        return npl_fi_core_tcam_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 54, npl_fi_core_tcam_table_payloads_t, value)



# API-s for table: fi_macro_config_table

NPL_FI_MACRO_CONFIG_TABLE_ACTION_WRITE = 0x0

class npl_fi_macro_config_table_key_t(basic_npl_struct):
    def __init__(self, fi_macro=0):
        super().__init__(6)
        self.fi_macro = fi_macro

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fi_macro_config_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fi_macro(self):
        return self._get_field_value(0, 6)
    @fi_macro.setter
    def fi_macro(self, value):
        self._set_field_value('field fi_macro', 0, 6, int, value)

class npl_fi_macro_config_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(72)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fi_macro_config_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fi_macro_config_data(self):
        return npl_fi_macro_config_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fi_macro_config_data.setter
    def fi_macro_config_data(self, value):
        self._set_field_value('field fi_macro_config_data', 0, 72, npl_fi_macro_config_data_t, value)

class npl_fi_macro_config_table_value_t(basic_npl_struct):
    def __init__(self, fi_macro_config_data=0):
        super().__init__(80)
        self.payloads.fi_macro_config_data = fi_macro_config_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fi_macro_config_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(72, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 72, 8, int, value)
    @property
    def payloads(self):
        return npl_fi_macro_config_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 72, npl_fi_macro_config_table_payloads_t, value)



# API-s for table: filb_voq_mapping

NPL_FILB_VOQ_MAPPING_ACTION_WRITE = 0x0

class npl_filb_voq_mapping_key_t(basic_npl_struct):
    def __init__(self, rxpdr_output_voq_nr=0):
        super().__init__(16)
        self.rxpdr_output_voq_nr = rxpdr_output_voq_nr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_filb_voq_mapping_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpdr_output_voq_nr(self):
        return self._get_field_value(0, 16)
    @rxpdr_output_voq_nr.setter
    def rxpdr_output_voq_nr(self, value):
        self._set_field_value('field rxpdr_output_voq_nr', 0, 16, int, value)

class npl_filb_voq_mapping_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(26)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_filb_voq_mapping_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def filb_voq_mapping_result(self):
        return npl_filb_voq_mapping_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @filb_voq_mapping_result.setter
    def filb_voq_mapping_result(self, value):
        self._set_field_value('field filb_voq_mapping_result', 0, 26, npl_filb_voq_mapping_result_t, value)

class npl_filb_voq_mapping_value_t(basic_npl_struct):
    def __init__(self, filb_voq_mapping_result=0):
        super().__init__(34)
        self.payloads.filb_voq_mapping_result = filb_voq_mapping_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_filb_voq_mapping_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(26, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 26, 8, int, value)
    @property
    def payloads(self):
        return npl_filb_voq_mapping_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 26, npl_filb_voq_mapping_payloads_t, value)



# API-s for table: first_ene_static_table

NPL_FIRST_ENE_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_first_ene_static_table_key_t(basic_npl_struct):
    def __init__(self, first_macro_code=0):
        super().__init__(3)
        self.first_macro_code = first_macro_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_first_ene_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def first_macro_code(self):
        return self._get_field_value(0, 3)
    @first_macro_code.setter
    def first_macro_code(self, value):
        self._set_field_value('field first_macro_code', 0, 3, int, value)

class npl_first_ene_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_first_ene_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def first_ene_macro(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @first_ene_macro.setter
    def first_ene_macro(self, value):
        self._set_field_value('field first_ene_macro', 0, 8, npl_ene_macro_id_t, value)

class npl_first_ene_static_table_value_t(basic_npl_struct):
    def __init__(self, first_ene_macro=0):
        super().__init__(16)
        self.payloads.first_ene_macro = first_ene_macro

    def _get_as_sub_field(data, offset_in_data):
        result = npl_first_ene_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_first_ene_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_first_ene_static_table_payloads_t, value)



# API-s for table: frm_db_fabric_routing_table

NPL_FRM_DB_FABRIC_ROUTING_TABLE_ACTION_WRITE = 0x0

class npl_frm_db_fabric_routing_table_key_t(basic_npl_struct):
    def __init__(self, egress_device_id=0):
        super().__init__(9)
        self.egress_device_id = egress_device_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_frm_db_fabric_routing_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def egress_device_id(self):
        return self._get_field_value(0, 9)
    @egress_device_id.setter
    def egress_device_id(self, value):
        self._set_field_value('field egress_device_id', 0, 9, int, value)

class npl_frm_db_fabric_routing_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(108)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_frm_db_fabric_routing_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def frm_db_fabric_routing_table_result(self):
        return npl_frm_db_fabric_routing_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @frm_db_fabric_routing_table_result.setter
    def frm_db_fabric_routing_table_result(self, value):
        self._set_field_value('field frm_db_fabric_routing_table_result', 0, 108, npl_frm_db_fabric_routing_table_result_t, value)

class npl_frm_db_fabric_routing_table_value_t(basic_npl_struct):
    def __init__(self, frm_db_fabric_routing_table_result=0):
        super().__init__(116)
        self.payloads.frm_db_fabric_routing_table_result = frm_db_fabric_routing_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_frm_db_fabric_routing_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(108, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 108, 8, int, value)
    @property
    def payloads(self):
        return npl_frm_db_fabric_routing_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 108, npl_frm_db_fabric_routing_table_payloads_t, value)



# API-s for table: fwd_destination_to_tm_result_data

NPL_FWD_DESTINATION_TO_TM_RESULT_DATA_ACTION_FOUND = 0x0

class npl_fwd_destination_to_tm_result_data_found_payload_t(basic_npl_struct):
    def __init__(self, tx_cud=0, dest_slice_id=0, dest_pif=0, dest_ifg=0):
        super().__init__(33)
        self.tx_cud = tx_cud
        self.dest_slice_id = dest_slice_id
        self.dest_pif = dest_pif
        self.dest_ifg = dest_ifg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fwd_destination_to_tm_result_data_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def tx_cud(self):
        return self._get_field_value(9, 24)
    @tx_cud.setter
    def tx_cud(self, value):
        self._set_field_value('field tx_cud', 9, 24, int, value)
    @property
    def dest_slice_id(self):
        return self._get_field_value(6, 3)
    @dest_slice_id.setter
    def dest_slice_id(self, value):
        self._set_field_value('field dest_slice_id', 6, 3, int, value)
    @property
    def dest_pif(self):
        return self._get_field_value(1, 5)
    @dest_pif.setter
    def dest_pif(self, value):
        self._set_field_value('field dest_pif', 1, 5, int, value)
    @property
    def dest_ifg(self):
        return self._get_field_value(0, 1)
    @dest_ifg.setter
    def dest_ifg(self, value):
        self._set_field_value('field dest_ifg', 0, 1, int, value)




class npl_fwd_destination_to_tm_result_data_key_t(basic_npl_struct):
    def __init__(self, rxpp_pd_fwd_destination_raw=0):
        super().__init__(20)
        self.rxpp_pd_fwd_destination_raw = rxpp_pd_fwd_destination_raw

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fwd_destination_to_tm_result_data_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_fwd_destination_raw(self):
        return self._get_field_value(0, 20)
    @rxpp_pd_fwd_destination_raw.setter
    def rxpp_pd_fwd_destination_raw(self, value):
        self._set_field_value('field rxpp_pd_fwd_destination_raw', 0, 20, int, value)

class npl_fwd_destination_to_tm_result_data_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(33)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fwd_destination_to_tm_result_data_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def found(self):
        return npl_fwd_destination_to_tm_result_data_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @found.setter
    def found(self, value):
        self._set_field_value('field found', 0, 33, npl_fwd_destination_to_tm_result_data_found_payload_t, value)

class npl_fwd_destination_to_tm_result_data_value_t(basic_npl_struct):
    def __init__(self, tx_cud=0, dest_slice_id=0, dest_pif=0, dest_ifg=0):
        super().__init__(41)
        self.payloads.found = npl_fwd_destination_to_tm_result_data_found_payload_t(tx_cud, dest_slice_id, dest_pif, dest_ifg)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_fwd_destination_to_tm_result_data_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(33, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 33, 8, int, value)
    @property
    def payloads(self):
        return npl_fwd_destination_to_tm_result_data_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 33, npl_fwd_destination_to_tm_result_data_payloads_t, value)



# API-s for table: fwd_type_to_ive_enable_table

NPL_FWD_TYPE_TO_IVE_ENABLE_TABLE_ACTION_WRITE = 0x0

class npl_fwd_type_to_ive_enable_table_key_t(basic_npl_struct):
    def __init__(self, txpp_npe_to_npe_metadata_fwd_header_type=0):
        super().__init__(4)
        self.txpp_npe_to_npe_metadata_fwd_header_type = txpp_npe_to_npe_metadata_fwd_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fwd_type_to_ive_enable_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def txpp_npe_to_npe_metadata_fwd_header_type(self):
        return self._get_field_value(0, 4)
    @txpp_npe_to_npe_metadata_fwd_header_type.setter
    def txpp_npe_to_npe_metadata_fwd_header_type(self, value):
        self._set_field_value('field txpp_npe_to_npe_metadata_fwd_header_type', 0, 4, int, value)

class npl_fwd_type_to_ive_enable_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fwd_type_to_ive_enable_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fwd_type_to_ive_enable(self):
        return npl_ive_enable_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fwd_type_to_ive_enable.setter
    def fwd_type_to_ive_enable(self, value):
        self._set_field_value('field fwd_type_to_ive_enable', 0, 1, npl_ive_enable_t, value)

class npl_fwd_type_to_ive_enable_table_value_t(basic_npl_struct):
    def __init__(self, fwd_type_to_ive_enable=0):
        super().__init__(9)
        self.payloads.fwd_type_to_ive_enable = fwd_type_to_ive_enable

    def _get_as_sub_field(data, offset_in_data):
        result = npl_fwd_type_to_ive_enable_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_fwd_type_to_ive_enable_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_fwd_type_to_ive_enable_table_payloads_t, value)



# API-s for table: get_ecm_meter_ptr_table

NPL_GET_ECM_METER_PTR_TABLE_ACTION_WRITE = 0x0

class npl_get_ecm_meter_ptr_table_key_t(basic_npl_struct):
    def __init__(self, tm_h_dp_0=0, tm_h_ecn=0):
        super().__init__(2)
        self.tm_h_dp_0 = tm_h_dp_0
        self.tm_h_ecn = tm_h_ecn

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_ecm_meter_ptr_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tm_h_dp_0(self):
        return self._get_field_value(0, 1)
    @tm_h_dp_0.setter
    def tm_h_dp_0(self, value):
        self._set_field_value('field tm_h_dp_0', 0, 1, int, value)
    @property
    def tm_h_ecn(self):
        return self._get_field_value(1, 1)
    @tm_h_ecn.setter
    def tm_h_ecn(self, value):
        self._set_field_value('field tm_h_ecn', 1, 1, int, value)

class npl_get_ecm_meter_ptr_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_ecm_meter_ptr_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def stat_meter_ptr(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @stat_meter_ptr.setter
    def stat_meter_ptr(self, value):
        self._set_field_value('field stat_meter_ptr', 0, 20, npl_counter_ptr_t, value)

class npl_get_ecm_meter_ptr_table_value_t(basic_npl_struct):
    def __init__(self, stat_meter_ptr=0):
        super().__init__(28)
        self.payloads.stat_meter_ptr = stat_meter_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_ecm_meter_ptr_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_get_ecm_meter_ptr_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_get_ecm_meter_ptr_table_payloads_t, value)



# API-s for table: get_ingress_ptp_info_and_is_slp_dm_static_table

NPL_GET_INGRESS_PTP_INFO_AND_IS_SLP_DM_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_get_ingress_ptp_info_and_is_slp_dm_static_table_key_t(basic_npl_struct):
    def __init__(self, enable_transparent_ptp=0, enable_sr_dm_accounting=0):
        super().__init__(2)
        self.enable_transparent_ptp = enable_transparent_ptp
        self.enable_sr_dm_accounting = enable_sr_dm_accounting

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_ingress_ptp_info_and_is_slp_dm_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def enable_transparent_ptp(self):
        return self._get_field_value(0, 1)
    @enable_transparent_ptp.setter
    def enable_transparent_ptp(self, value):
        self._set_field_value('field enable_transparent_ptp', 0, 1, int, value)
    @property
    def enable_sr_dm_accounting(self):
        return self._get_field_value(1, 1)
    @enable_sr_dm_accounting.setter
    def enable_sr_dm_accounting(self, value):
        self._set_field_value('field enable_sr_dm_accounting', 1, 1, int, value)

class npl_get_ingress_ptp_info_and_is_slp_dm_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_ingress_ptp_info_and_is_slp_dm_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_ptp_info_and_is_slp_dm_cmpressed_fields(self):
        return npl_ingress_ptp_info_and_is_slp_dm_cmpressed_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_ptp_info_and_is_slp_dm_cmpressed_fields.setter
    def ingress_ptp_info_and_is_slp_dm_cmpressed_fields(self, value):
        self._set_field_value('field ingress_ptp_info_and_is_slp_dm_cmpressed_fields', 0, 4, npl_ingress_ptp_info_and_is_slp_dm_cmpressed_fields_t, value)

class npl_get_ingress_ptp_info_and_is_slp_dm_static_table_value_t(basic_npl_struct):
    def __init__(self, ingress_ptp_info_and_is_slp_dm_cmpressed_fields=0):
        super().__init__(12)
        self.payloads.ingress_ptp_info_and_is_slp_dm_cmpressed_fields = ingress_ptp_info_and_is_slp_dm_cmpressed_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_ingress_ptp_info_and_is_slp_dm_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_get_ingress_ptp_info_and_is_slp_dm_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_get_ingress_ptp_info_and_is_slp_dm_static_table_payloads_t, value)



# API-s for table: get_l2_rtf_conf_set_and_init_stages

NPL_GET_L2_RTF_CONF_SET_AND_INIT_STAGES_ACTION_WRITE = 0x0

class npl_get_l2_rtf_conf_set_and_init_stages_key_t(basic_npl_struct):
    def __init__(self, rtf_conf_set_ptr=0):
        super().__init__(8)
        self.rtf_conf_set_ptr = rtf_conf_set_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_l2_rtf_conf_set_and_init_stages_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_conf_set_ptr(self):
        return self._get_field_value(0, 8)
    @rtf_conf_set_ptr.setter
    def rtf_conf_set_ptr(self, value):
        self._set_field_value('field rtf_conf_set_ptr', 0, 8, int, value)

class npl_get_l2_rtf_conf_set_and_init_stages_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(15)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_l2_rtf_conf_set_and_init_stages_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_rtf_conf_set_and_init_stages(self):
        return npl_l2_rtf_conf_set_and_init_stages_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_rtf_conf_set_and_init_stages.setter
    def l2_rtf_conf_set_and_init_stages(self, value):
        self._set_field_value('field l2_rtf_conf_set_and_init_stages', 0, 15, npl_l2_rtf_conf_set_and_init_stages_t, value)

class npl_get_l2_rtf_conf_set_and_init_stages_value_t(basic_npl_struct):
    def __init__(self, l2_rtf_conf_set_and_init_stages=0):
        super().__init__(23)
        self.payloads.l2_rtf_conf_set_and_init_stages = l2_rtf_conf_set_and_init_stages

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_l2_rtf_conf_set_and_init_stages_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(15, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 15, 8, int, value)
    @property
    def payloads(self):
        return npl_get_l2_rtf_conf_set_and_init_stages_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 15, npl_get_l2_rtf_conf_set_and_init_stages_payloads_t, value)



# API-s for table: get_non_comp_mc_value_static_table

NPL_GET_NON_COMP_MC_VALUE_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_get_non_comp_mc_value_static_table_key_t(basic_npl_struct):
    def __init__(self, not_comp_single_src=0, packet_type_bit0=0):
        super().__init__(2)
        self.not_comp_single_src = not_comp_single_src
        self.packet_type_bit0 = packet_type_bit0

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_non_comp_mc_value_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def not_comp_single_src(self):
        return self._get_field_value(0, 1)
    @not_comp_single_src.setter
    def not_comp_single_src(self, value):
        self._set_field_value('field not_comp_single_src', 0, 1, int, value)
    @property
    def packet_type_bit0(self):
        return self._get_field_value(1, 1)
    @packet_type_bit0.setter
    def packet_type_bit0(self, value):
        self._set_field_value('field packet_type_bit0', 1, 1, int, value)

class npl_get_non_comp_mc_value_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_non_comp_mc_value_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def non_comp_mc_trap(self):
        return self._get_field_value(0, 1)
    @non_comp_mc_trap.setter
    def non_comp_mc_trap(self, value):
        self._set_field_value('field non_comp_mc_trap', 0, 1, int, value)

class npl_get_non_comp_mc_value_static_table_value_t(basic_npl_struct):
    def __init__(self, non_comp_mc_trap=0):
        super().__init__(9)
        self.payloads.non_comp_mc_trap = non_comp_mc_trap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_get_non_comp_mc_value_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_get_non_comp_mc_value_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_get_non_comp_mc_value_static_table_payloads_t, value)



# API-s for table: gre_proto_static_table

NPL_GRE_PROTO_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_gre_proto_static_table_key_t(basic_npl_struct):
    def __init__(self, label_present=0, proto=0):
        super().__init__(2)
        self.label_present = label_present
        self.proto = proto

    def _get_as_sub_field(data, offset_in_data):
        result = npl_gre_proto_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def label_present(self):
        return self._get_field_value(0, 1)
    @label_present.setter
    def label_present(self, value):
        self._set_field_value('field label_present', 0, 1, int, value)
    @property
    def proto(self):
        return self._get_field_value(1, 1)
    @proto.setter
    def proto(self, value):
        self._set_field_value('field proto', 1, 1, int, value)

class npl_gre_proto_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_gre_proto_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def gre_proto(self):
        return self._get_field_value(0, 24)
    @gre_proto.setter
    def gre_proto(self, value):
        self._set_field_value('field gre_proto', 0, 24, int, value)

class npl_gre_proto_static_table_value_t(basic_npl_struct):
    def __init__(self, gre_proto=0):
        super().__init__(32)
        self.payloads.gre_proto = gre_proto

    def _get_as_sub_field(data, offset_in_data):
        result = npl_gre_proto_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_gre_proto_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_gre_proto_static_table_payloads_t, value)



# API-s for table: hmc_cgm_cgm_lut_table

NPL_HMC_CGM_CGM_LUT_TABLE_ACTION_WRITE = 0x0

class npl_hmc_cgm_cgm_lut_table_key_t(basic_npl_struct):
    def __init__(self, shared_pool_th_level=0, queue_size_level=0, profile_id=0):
        super().__init__(12)
        self.shared_pool_th_level = shared_pool_th_level
        self.queue_size_level = queue_size_level
        self.profile_id = profile_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_hmc_cgm_cgm_lut_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def shared_pool_th_level(self):
        return self._get_field_value(0, 3)
    @shared_pool_th_level.setter
    def shared_pool_th_level(self, value):
        self._set_field_value('field shared_pool_th_level', 0, 3, int, value)
    @property
    def queue_size_level(self):
        return self._get_field_value(3, 4)
    @queue_size_level.setter
    def queue_size_level(self, value):
        self._set_field_value('field queue_size_level', 3, 4, int, value)
    @property
    def profile_id(self):
        return npl_voq_profile_len._get_as_sub_field(self._data, self._offset_in_data + 7)
    @profile_id.setter
    def profile_id(self, value):
        self._set_field_value('field profile_id', 7, 5, npl_voq_profile_len, value)

class npl_hmc_cgm_cgm_lut_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_hmc_cgm_cgm_lut_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def hmc_cgm_cgm_lut_results(self):
        return npl_hmc_cgm_cgm_lut_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @hmc_cgm_cgm_lut_results.setter
    def hmc_cgm_cgm_lut_results(self, value):
        self._set_field_value('field hmc_cgm_cgm_lut_results', 0, 3, npl_hmc_cgm_cgm_lut_results_t, value)

class npl_hmc_cgm_cgm_lut_table_value_t(basic_npl_struct):
    def __init__(self, hmc_cgm_cgm_lut_results=0):
        super().__init__(11)
        self.payloads.hmc_cgm_cgm_lut_results = hmc_cgm_cgm_lut_results

    def _get_as_sub_field(data, offset_in_data):
        result = npl_hmc_cgm_cgm_lut_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_hmc_cgm_cgm_lut_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_hmc_cgm_cgm_lut_table_payloads_t, value)



# API-s for table: hmc_cgm_profile_global_table

NPL_HMC_CGM_PROFILE_GLOBAL_TABLE_ACTION_WRITE = 0x0

class npl_hmc_cgm_profile_global_table_key_t(basic_npl_struct):
    def __init__(self, profile_id=0):
        super().__init__(5)
        self.profile_id = profile_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_hmc_cgm_profile_global_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def profile_id(self):
        return npl_voq_profile_len._get_as_sub_field(self._data, self._offset_in_data + 0)
    @profile_id.setter
    def profile_id(self, value):
        self._set_field_value('field profile_id', 0, 5, npl_voq_profile_len, value)

class npl_hmc_cgm_profile_global_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(284)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_hmc_cgm_profile_global_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def hmc_cgm_profile_global_results(self):
        return npl_hmc_cgm_profile_global_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @hmc_cgm_profile_global_results.setter
    def hmc_cgm_profile_global_results(self, value):
        self._set_field_value('field hmc_cgm_profile_global_results', 0, 284, npl_hmc_cgm_profile_global_results_t, value)

class npl_hmc_cgm_profile_global_table_value_t(basic_npl_struct):
    def __init__(self, hmc_cgm_profile_global_results=0):
        super().__init__(292)
        self.payloads.hmc_cgm_profile_global_results = hmc_cgm_profile_global_results

    def _get_as_sub_field(data, offset_in_data):
        result = npl_hmc_cgm_profile_global_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(284, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 284, 8, int, value)
    @property
    def payloads(self):
        return npl_hmc_cgm_profile_global_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 284, npl_hmc_cgm_profile_global_table_payloads_t, value)



# API-s for table: ibm_cmd_table

NPL_IBM_CMD_TABLE_ACTION_WRITE = 0x0

class npl_ibm_cmd_table_key_t(basic_npl_struct):
    def __init__(self, rxpp_to_txpp_local_vars_mirror_command=0):
        super().__init__(5)
        self.rxpp_to_txpp_local_vars_mirror_command = rxpp_to_txpp_local_vars_mirror_command

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ibm_cmd_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_to_txpp_local_vars_mirror_command(self):
        return self._get_field_value(0, 5)
    @rxpp_to_txpp_local_vars_mirror_command.setter
    def rxpp_to_txpp_local_vars_mirror_command(self, value):
        self._set_field_value('field rxpp_to_txpp_local_vars_mirror_command', 0, 5, int, value)

class npl_ibm_cmd_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(49)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ibm_cmd_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ibm_cmd_table_result(self):
        return npl_ibm_cmd_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ibm_cmd_table_result.setter
    def ibm_cmd_table_result(self, value):
        self._set_field_value('field ibm_cmd_table_result', 0, 49, npl_ibm_cmd_table_result_t, value)

class npl_ibm_cmd_table_value_t(basic_npl_struct):
    def __init__(self, ibm_cmd_table_result=0):
        super().__init__(57)
        self.payloads.ibm_cmd_table_result = ibm_cmd_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ibm_cmd_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(49, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 49, 8, int, value)
    @property
    def payloads(self):
        return npl_ibm_cmd_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 49, npl_ibm_cmd_table_payloads_t, value)



# API-s for table: ibm_mc_cmd_to_encap_data_table

NPL_IBM_MC_CMD_TO_ENCAP_DATA_TABLE_ACTION_WRITE = 0x0

class npl_ibm_mc_cmd_to_encap_data_table_key_t(basic_npl_struct):
    def __init__(self, tx_fabric_tx_cud_20_16_=0):
        super().__init__(5)
        self.tx_fabric_tx_cud_20_16_ = tx_fabric_tx_cud_20_16_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ibm_mc_cmd_to_encap_data_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_fabric_tx_cud_20_16_(self):
        return self._get_field_value(0, 5)
    @tx_fabric_tx_cud_20_16_.setter
    def tx_fabric_tx_cud_20_16_(self, value):
        self._set_field_value('field tx_fabric_tx_cud_20_16_', 0, 5, int, value)

class npl_ibm_mc_cmd_to_encap_data_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ibm_mc_cmd_to_encap_data_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ibm_mc_fabric_encap_msb(self):
        return npl_ingress_punt_mc_expand_encap_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ibm_mc_fabric_encap_msb.setter
    def ibm_mc_fabric_encap_msb(self, value):
        self._set_field_value('field ibm_mc_fabric_encap_msb', 0, 28, npl_ingress_punt_mc_expand_encap_t, value)

class npl_ibm_mc_cmd_to_encap_data_table_value_t(basic_npl_struct):
    def __init__(self, ibm_mc_fabric_encap_msb=0):
        super().__init__(36)
        self.payloads.ibm_mc_fabric_encap_msb = ibm_mc_fabric_encap_msb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ibm_mc_cmd_to_encap_data_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(28, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 28, 8, int, value)
    @property
    def payloads(self):
        return npl_ibm_mc_cmd_to_encap_data_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 28, npl_ibm_mc_cmd_to_encap_data_table_payloads_t, value)



# API-s for table: ibm_uc_cmd_to_encap_data_table

NPL_IBM_UC_CMD_TO_ENCAP_DATA_TABLE_ACTION_WRITE = 0x0

class npl_ibm_uc_cmd_to_encap_data_table_key_t(basic_npl_struct):
    def __init__(self, tx_fabric_tx_cud_4_0_=0):
        super().__init__(5)
        self.tx_fabric_tx_cud_4_0_ = tx_fabric_tx_cud_4_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ibm_uc_cmd_to_encap_data_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_fabric_tx_cud_4_0_(self):
        return self._get_field_value(0, 5)
    @tx_fabric_tx_cud_4_0_.setter
    def tx_fabric_tx_cud_4_0_(self, value):
        self._set_field_value('field tx_fabric_tx_cud_4_0_', 0, 5, int, value)

class npl_ibm_uc_cmd_to_encap_data_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ibm_uc_cmd_to_encap_data_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ibm_uc_fabric_encap(self):
        return npl_punt_app_encap_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ibm_uc_fabric_encap.setter
    def ibm_uc_fabric_encap(self, value):
        self._set_field_value('field ibm_uc_fabric_encap', 0, 80, npl_punt_app_encap_t, value)

class npl_ibm_uc_cmd_to_encap_data_table_value_t(basic_npl_struct):
    def __init__(self, ibm_uc_fabric_encap=0):
        super().__init__(88)
        self.payloads.ibm_uc_fabric_encap = ibm_uc_fabric_encap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ibm_uc_cmd_to_encap_data_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_ibm_uc_cmd_to_encap_data_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_ibm_uc_cmd_to_encap_data_table_payloads_t, value)



# API-s for table: ifgb_tc_lut_table

NPL_IFGB_TC_LUT_TABLE_ACTION_WRITE = 0x0

class npl_ifgb_tc_lut_table_key_t(basic_npl_struct):
    def __init__(self, tpid=0, protocol=0, port=0, serdes_pair=0, ifg=0):
        super().__init__(11)
        self.tpid = tpid
        self.protocol = protocol
        self.port = port
        self.serdes_pair = serdes_pair
        self.ifg = ifg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ifgb_tc_lut_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tpid(self):
        return self._get_field_value(0, 2)
    @tpid.setter
    def tpid(self, value):
        self._set_field_value('field tpid', 0, 2, int, value)
    @property
    def protocol(self):
        return self._get_field_value(2, 3)
    @protocol.setter
    def protocol(self, value):
        self._set_field_value('field protocol', 2, 3, int, value)
    @property
    def port(self):
        return self._get_field_value(5, 1)
    @port.setter
    def port(self, value):
        self._set_field_value('field port', 5, 1, int, value)
    @property
    def serdes_pair(self):
        return self._get_field_value(6, 4)
    @serdes_pair.setter
    def serdes_pair(self, value):
        self._set_field_value('field serdes_pair', 6, 4, int, value)
    @property
    def ifg(self):
        return self._get_field_value(10, 1)
    @ifg.setter
    def ifg(self, value):
        self._set_field_value('field ifg', 10, 1, int, value)

class npl_ifgb_tc_lut_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ifgb_tc_lut_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ifgb_tc_lut_results(self):
        return npl_ifgb_tc_lut_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ifgb_tc_lut_results.setter
    def ifgb_tc_lut_results(self, value):
        self._set_field_value('field ifgb_tc_lut_results', 0, 6, npl_ifgb_tc_lut_results_t, value)

class npl_ifgb_tc_lut_table_value_t(basic_npl_struct):
    def __init__(self, ifgb_tc_lut_results=0):
        super().__init__(14)
        self.payloads.ifgb_tc_lut_results = ifgb_tc_lut_results

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ifgb_tc_lut_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_ifgb_tc_lut_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_ifgb_tc_lut_table_payloads_t, value)



# API-s for table: ingress_ip_qos_mapping_table

NPL_INGRESS_IP_QOS_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_ingress_ip_qos_mapping_table_key_t(basic_npl_struct):
    def __init__(self, qos_id=0, l3_qos_mapping_key=0):
        super().__init__(11)
        self.qos_id = qos_id
        self.l3_qos_mapping_key = l3_qos_mapping_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_ip_qos_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_id(self):
        return self._get_field_value(0, 4)
    @qos_id.setter
    def qos_id(self, value):
        self._set_field_value('field qos_id', 0, 4, int, value)
    @property
    def l3_qos_mapping_key(self):
        return self._get_field_value(4, 7)
    @l3_qos_mapping_key.setter
    def l3_qos_mapping_key(self, value):
        self._set_field_value('field l3_qos_mapping_key', 4, 7, int, value)

class npl_ingress_ip_qos_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_ip_qos_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_qos_mapping_result(self):
        return npl_ingress_qos_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_qos_mapping_result.setter
    def ip_qos_mapping_result(self, value):
        self._set_field_value('field ip_qos_mapping_result', 0, 32, npl_ingress_qos_result_t, value)

class npl_ingress_ip_qos_mapping_table_value_t(basic_npl_struct):
    def __init__(self, ip_qos_mapping_result=0):
        super().__init__(40)
        self.payloads.ip_qos_mapping_result = ip_qos_mapping_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_ip_qos_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_ip_qos_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_ingress_ip_qos_mapping_table_payloads_t, value)



# API-s for table: ingress_rtf_eth_db1_160_f0_compound_table

NPL_INGRESS_RTF_ETH_DB1_160_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_eth_db1_160_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db1_160_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_eth_db1_160_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db1_160_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_eth_db1_160_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db1_160_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_eth_db1_160_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_eth_db1_160_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_eth_db1_160_f0_pack_table

NPL_INGRESS_RTF_ETH_DB1_160_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_eth_db1_160_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db1_160_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_eth_db1_160_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db1_160_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_eth_db1_160_f0_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_eth_db1_160_f0_packed_key.setter
    def ingress_rtf_eth_db1_160_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_eth_db1_160_f0_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_eth_db1_160_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_eth_db1_160_f0_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_eth_db1_160_f0_packed_key = ingress_rtf_eth_db1_160_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db1_160_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_eth_db1_160_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_eth_db1_160_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_eth_db1_160_f0_table

NPL_INGRESS_RTF_ETH_DB1_160_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_eth_db1_160_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db1_160_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_eth_db1_160_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db1_160_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_eth_db1_160_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db1_160_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_eth_db1_160_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_eth_db1_160_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_eth_db2_160_f0_compound_table

NPL_INGRESS_RTF_ETH_DB2_160_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_eth_db2_160_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db2_160_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_eth_db2_160_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db2_160_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_eth_db2_160_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db2_160_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_eth_db2_160_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_eth_db2_160_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_eth_db2_160_f0_pack_table

NPL_INGRESS_RTF_ETH_DB2_160_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_eth_db2_160_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db2_160_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_eth_db2_160_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db2_160_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_eth_db2_160_f0_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_eth_db2_160_f0_packed_key.setter
    def ingress_rtf_eth_db2_160_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_eth_db2_160_f0_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_eth_db2_160_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_eth_db2_160_f0_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_eth_db2_160_f0_packed_key = ingress_rtf_eth_db2_160_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db2_160_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_eth_db2_160_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_eth_db2_160_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_eth_db2_160_f0_table

NPL_INGRESS_RTF_ETH_DB2_160_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_eth_db2_160_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db2_160_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_eth_db2_160_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db2_160_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_eth_db2_160_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_eth_db2_160_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_eth_db2_160_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_eth_db2_160_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db1_160_f0_compound_table

NPL_INGRESS_RTF_IPV4_DB1_160_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db1_160_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db1_160_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db1_160_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db1_160_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db1_160_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db1_160_f0_pack_table

NPL_INGRESS_RTF_IPV4_DB1_160_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db1_160_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db1_160_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db1_160_f0_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db1_160_f0_packed_key.setter
    def ingress_rtf_ipv4_db1_160_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db1_160_f0_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv4_db1_160_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db1_160_f0_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv4_db1_160_f0_packed_key = ingress_rtf_ipv4_db1_160_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db1_160_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv4_db1_160_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db1_160_f0_table

NPL_INGRESS_RTF_IPV4_DB1_160_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db1_160_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db1_160_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db1_160_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db1_160_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db1_160_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db1_160_f1_compound_table

NPL_INGRESS_RTF_IPV4_DB1_160_F1_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db1_160_f1_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f1_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db1_160_f1_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f1_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db1_160_f1_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f1_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db1_160_f1_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db1_160_f1_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db1_160_f1_pack_table

NPL_INGRESS_RTF_IPV4_DB1_160_F1_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db1_160_f1_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f1_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db1_160_f1_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f1_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db1_160_f1_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db1_160_f1_packed_key.setter
    def ingress_rtf_ipv4_db1_160_f1_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db1_160_f1_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv4_db1_160_f1_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db1_160_f1_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv4_db1_160_f1_packed_key = ingress_rtf_ipv4_db1_160_f1_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f1_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db1_160_f1_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv4_db1_160_f1_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db1_160_f1_table

NPL_INGRESS_RTF_IPV4_DB1_160_F1_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db1_160_f1_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db1_160_f1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db1_160_f1_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_160_f1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db1_160_f1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db1_160_f1_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db1_320_f0_compound_table

NPL_INGRESS_RTF_IPV4_DB1_320_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db1_320_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_320_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db1_320_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_320_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db1_320_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_320_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db1_320_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db1_320_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db1_320_f0_pack_table

NPL_INGRESS_RTF_IPV4_DB1_320_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db1_320_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_320_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db1_320_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(320)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_320_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db1_320_f0_packed_key(self):
        return npl_packed_ud_320_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db1_320_f0_packed_key.setter
    def ingress_rtf_ipv4_db1_320_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db1_320_f0_packed_key', 0, 320, npl_packed_ud_320_key_t, value)

class npl_ingress_rtf_ipv4_db1_320_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db1_320_f0_packed_key=0):
        super().__init__(328)
        self.payloads.ingress_rtf_ipv4_db1_320_f0_packed_key = ingress_rtf_ipv4_db1_320_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_320_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(320, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 320, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db1_320_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 320, npl_ingress_rtf_ipv4_db1_320_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db1_320_f0_table

NPL_INGRESS_RTF_IPV4_DB1_320_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db1_320_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_320_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db1_320_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_320_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db1_320_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db1_320_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db1_320_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db1_320_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db2_160_f0_compound_table

NPL_INGRESS_RTF_IPV4_DB2_160_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db2_160_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db2_160_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db2_160_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db2_160_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db2_160_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db2_160_f0_pack_table

NPL_INGRESS_RTF_IPV4_DB2_160_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db2_160_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db2_160_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db2_160_f0_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db2_160_f0_packed_key.setter
    def ingress_rtf_ipv4_db2_160_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db2_160_f0_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv4_db2_160_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db2_160_f0_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv4_db2_160_f0_packed_key = ingress_rtf_ipv4_db2_160_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db2_160_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv4_db2_160_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db2_160_f0_table

NPL_INGRESS_RTF_IPV4_DB2_160_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db2_160_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db2_160_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db2_160_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db2_160_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db2_160_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db2_160_f1_compound_table

NPL_INGRESS_RTF_IPV4_DB2_160_F1_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db2_160_f1_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f1_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db2_160_f1_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f1_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db2_160_f1_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f1_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db2_160_f1_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db2_160_f1_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db2_160_f1_pack_table

NPL_INGRESS_RTF_IPV4_DB2_160_F1_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db2_160_f1_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f1_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db2_160_f1_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f1_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db2_160_f1_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db2_160_f1_packed_key.setter
    def ingress_rtf_ipv4_db2_160_f1_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db2_160_f1_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv4_db2_160_f1_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db2_160_f1_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv4_db2_160_f1_packed_key = ingress_rtf_ipv4_db2_160_f1_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f1_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db2_160_f1_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv4_db2_160_f1_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db2_160_f1_table

NPL_INGRESS_RTF_IPV4_DB2_160_F1_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db2_160_f1_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db2_160_f1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db2_160_f1_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_160_f1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db2_160_f1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db2_160_f1_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db2_320_f0_compound_table

NPL_INGRESS_RTF_IPV4_DB2_320_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db2_320_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_320_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db2_320_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_320_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db2_320_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_320_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db2_320_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db2_320_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db2_320_f0_pack_table

NPL_INGRESS_RTF_IPV4_DB2_320_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db2_320_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_320_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db2_320_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(320)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_320_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db2_320_f0_packed_key(self):
        return npl_packed_ud_320_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db2_320_f0_packed_key.setter
    def ingress_rtf_ipv4_db2_320_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db2_320_f0_packed_key', 0, 320, npl_packed_ud_320_key_t, value)

class npl_ingress_rtf_ipv4_db2_320_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db2_320_f0_packed_key=0):
        super().__init__(328)
        self.payloads.ingress_rtf_ipv4_db2_320_f0_packed_key = ingress_rtf_ipv4_db2_320_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_320_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(320, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 320, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db2_320_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 320, npl_ingress_rtf_ipv4_db2_320_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db2_320_f0_table

NPL_INGRESS_RTF_IPV4_DB2_320_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db2_320_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_320_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db2_320_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_320_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db2_320_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db2_320_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db2_320_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db2_320_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db3_160_f0_compound_table

NPL_INGRESS_RTF_IPV4_DB3_160_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db3_160_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db3_160_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db3_160_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db3_160_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db3_160_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db3_160_f0_pack_table

NPL_INGRESS_RTF_IPV4_DB3_160_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db3_160_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db3_160_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db3_160_f0_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db3_160_f0_packed_key.setter
    def ingress_rtf_ipv4_db3_160_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db3_160_f0_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv4_db3_160_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db3_160_f0_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv4_db3_160_f0_packed_key = ingress_rtf_ipv4_db3_160_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db3_160_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv4_db3_160_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db3_160_f0_table

NPL_INGRESS_RTF_IPV4_DB3_160_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db3_160_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db3_160_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db3_160_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db3_160_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db3_160_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db3_160_f1_compound_table

NPL_INGRESS_RTF_IPV4_DB3_160_F1_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db3_160_f1_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f1_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db3_160_f1_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f1_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db3_160_f1_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f1_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db3_160_f1_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db3_160_f1_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db3_160_f1_pack_table

NPL_INGRESS_RTF_IPV4_DB3_160_F1_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db3_160_f1_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f1_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db3_160_f1_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f1_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db3_160_f1_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db3_160_f1_packed_key.setter
    def ingress_rtf_ipv4_db3_160_f1_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db3_160_f1_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv4_db3_160_f1_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db3_160_f1_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv4_db3_160_f1_packed_key = ingress_rtf_ipv4_db3_160_f1_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f1_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db3_160_f1_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv4_db3_160_f1_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db3_160_f1_table

NPL_INGRESS_RTF_IPV4_DB3_160_F1_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db3_160_f1_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db3_160_f1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db3_160_f1_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_160_f1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db3_160_f1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db3_160_f1_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db3_320_f0_compound_table

NPL_INGRESS_RTF_IPV4_DB3_320_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db3_320_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_320_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db3_320_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_320_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db3_320_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_320_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db3_320_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db3_320_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db3_320_f0_pack_table

NPL_INGRESS_RTF_IPV4_DB3_320_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db3_320_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_320_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db3_320_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(320)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_320_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db3_320_f0_packed_key(self):
        return npl_packed_ud_320_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db3_320_f0_packed_key.setter
    def ingress_rtf_ipv4_db3_320_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db3_320_f0_packed_key', 0, 320, npl_packed_ud_320_key_t, value)

class npl_ingress_rtf_ipv4_db3_320_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db3_320_f0_packed_key=0):
        super().__init__(328)
        self.payloads.ingress_rtf_ipv4_db3_320_f0_packed_key = ingress_rtf_ipv4_db3_320_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_320_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(320, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 320, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db3_320_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 320, npl_ingress_rtf_ipv4_db3_320_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db3_320_f0_table

NPL_INGRESS_RTF_IPV4_DB3_320_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db3_320_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_320_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db3_320_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_320_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db3_320_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db3_320_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db3_320_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db3_320_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db4_160_f0_compound_table

NPL_INGRESS_RTF_IPV4_DB4_160_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db4_160_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db4_160_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db4_160_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db4_160_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db4_160_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db4_160_f0_pack_table

NPL_INGRESS_RTF_IPV4_DB4_160_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db4_160_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db4_160_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db4_160_f0_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db4_160_f0_packed_key.setter
    def ingress_rtf_ipv4_db4_160_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db4_160_f0_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv4_db4_160_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db4_160_f0_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv4_db4_160_f0_packed_key = ingress_rtf_ipv4_db4_160_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db4_160_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv4_db4_160_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db4_160_f0_table

NPL_INGRESS_RTF_IPV4_DB4_160_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db4_160_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db4_160_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db4_160_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db4_160_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db4_160_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db4_160_f1_compound_table

NPL_INGRESS_RTF_IPV4_DB4_160_F1_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db4_160_f1_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f1_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db4_160_f1_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f1_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db4_160_f1_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f1_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db4_160_f1_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db4_160_f1_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db4_160_f1_pack_table

NPL_INGRESS_RTF_IPV4_DB4_160_F1_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db4_160_f1_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f1_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db4_160_f1_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f1_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db4_160_f1_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db4_160_f1_packed_key.setter
    def ingress_rtf_ipv4_db4_160_f1_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db4_160_f1_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv4_db4_160_f1_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db4_160_f1_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv4_db4_160_f1_packed_key = ingress_rtf_ipv4_db4_160_f1_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f1_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db4_160_f1_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv4_db4_160_f1_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db4_160_f1_table

NPL_INGRESS_RTF_IPV4_DB4_160_F1_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db4_160_f1_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db4_160_f1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db4_160_f1_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_160_f1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db4_160_f1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db4_160_f1_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db4_320_f0_compound_table

NPL_INGRESS_RTF_IPV4_DB4_320_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db4_320_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_320_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db4_320_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_320_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db4_320_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_320_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db4_320_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db4_320_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db4_320_f0_pack_table

NPL_INGRESS_RTF_IPV4_DB4_320_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db4_320_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_320_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db4_320_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(320)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_320_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv4_db4_320_f0_packed_key(self):
        return npl_packed_ud_320_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv4_db4_320_f0_packed_key.setter
    def ingress_rtf_ipv4_db4_320_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv4_db4_320_f0_packed_key', 0, 320, npl_packed_ud_320_key_t, value)

class npl_ingress_rtf_ipv4_db4_320_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv4_db4_320_f0_packed_key=0):
        super().__init__(328)
        self.payloads.ingress_rtf_ipv4_db4_320_f0_packed_key = ingress_rtf_ipv4_db4_320_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_320_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(320, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 320, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db4_320_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 320, npl_ingress_rtf_ipv4_db4_320_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv4_db4_320_f0_table

NPL_INGRESS_RTF_IPV4_DB4_320_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv4_db4_320_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_320_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv4_db4_320_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_320_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv4_db4_320_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv4_db4_320_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv4_db4_320_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv4_db4_320_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db1_160_f0_compound_table

NPL_INGRESS_RTF_IPV6_DB1_160_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db1_160_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db1_160_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db1_160_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db1_160_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db1_160_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db1_160_f0_pack_table

NPL_INGRESS_RTF_IPV6_DB1_160_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db1_160_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db1_160_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db1_160_f0_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db1_160_f0_packed_key.setter
    def ingress_rtf_ipv6_db1_160_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db1_160_f0_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv6_db1_160_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db1_160_f0_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv6_db1_160_f0_packed_key = ingress_rtf_ipv6_db1_160_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db1_160_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv6_db1_160_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db1_160_f0_table

NPL_INGRESS_RTF_IPV6_DB1_160_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db1_160_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db1_160_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db1_160_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db1_160_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db1_160_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db1_160_f1_compound_table

NPL_INGRESS_RTF_IPV6_DB1_160_F1_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db1_160_f1_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f1_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db1_160_f1_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f1_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db1_160_f1_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f1_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db1_160_f1_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db1_160_f1_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db1_160_f1_pack_table

NPL_INGRESS_RTF_IPV6_DB1_160_F1_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db1_160_f1_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f1_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db1_160_f1_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f1_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db1_160_f1_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db1_160_f1_packed_key.setter
    def ingress_rtf_ipv6_db1_160_f1_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db1_160_f1_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv6_db1_160_f1_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db1_160_f1_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv6_db1_160_f1_packed_key = ingress_rtf_ipv6_db1_160_f1_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f1_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db1_160_f1_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv6_db1_160_f1_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db1_160_f1_table

NPL_INGRESS_RTF_IPV6_DB1_160_F1_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db1_160_f1_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db1_160_f1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db1_160_f1_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_160_f1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db1_160_f1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db1_160_f1_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db1_320_f0_compound_table

NPL_INGRESS_RTF_IPV6_DB1_320_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db1_320_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_320_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db1_320_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_320_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db1_320_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_320_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db1_320_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db1_320_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db1_320_f0_pack_table

NPL_INGRESS_RTF_IPV6_DB1_320_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db1_320_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_320_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db1_320_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(320)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_320_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db1_320_f0_packed_key(self):
        return npl_packed_ud_320_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db1_320_f0_packed_key.setter
    def ingress_rtf_ipv6_db1_320_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db1_320_f0_packed_key', 0, 320, npl_packed_ud_320_key_t, value)

class npl_ingress_rtf_ipv6_db1_320_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db1_320_f0_packed_key=0):
        super().__init__(328)
        self.payloads.ingress_rtf_ipv6_db1_320_f0_packed_key = ingress_rtf_ipv6_db1_320_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_320_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(320, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 320, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db1_320_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 320, npl_ingress_rtf_ipv6_db1_320_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db1_320_f0_table

NPL_INGRESS_RTF_IPV6_DB1_320_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db1_320_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_320_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db1_320_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_320_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db1_320_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db1_320_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db1_320_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db1_320_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db2_160_f0_compound_table

NPL_INGRESS_RTF_IPV6_DB2_160_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db2_160_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db2_160_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db2_160_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db2_160_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db2_160_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db2_160_f0_pack_table

NPL_INGRESS_RTF_IPV6_DB2_160_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db2_160_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db2_160_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db2_160_f0_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db2_160_f0_packed_key.setter
    def ingress_rtf_ipv6_db2_160_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db2_160_f0_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv6_db2_160_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db2_160_f0_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv6_db2_160_f0_packed_key = ingress_rtf_ipv6_db2_160_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db2_160_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv6_db2_160_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db2_160_f0_table

NPL_INGRESS_RTF_IPV6_DB2_160_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db2_160_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db2_160_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db2_160_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db2_160_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db2_160_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db2_160_f1_compound_table

NPL_INGRESS_RTF_IPV6_DB2_160_F1_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db2_160_f1_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f1_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db2_160_f1_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f1_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db2_160_f1_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f1_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db2_160_f1_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db2_160_f1_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db2_160_f1_pack_table

NPL_INGRESS_RTF_IPV6_DB2_160_F1_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db2_160_f1_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f1_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db2_160_f1_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f1_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db2_160_f1_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db2_160_f1_packed_key.setter
    def ingress_rtf_ipv6_db2_160_f1_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db2_160_f1_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv6_db2_160_f1_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db2_160_f1_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv6_db2_160_f1_packed_key = ingress_rtf_ipv6_db2_160_f1_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f1_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db2_160_f1_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv6_db2_160_f1_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db2_160_f1_table

NPL_INGRESS_RTF_IPV6_DB2_160_F1_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db2_160_f1_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db2_160_f1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db2_160_f1_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_160_f1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db2_160_f1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db2_160_f1_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db2_320_f0_compound_table

NPL_INGRESS_RTF_IPV6_DB2_320_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db2_320_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_320_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db2_320_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_320_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db2_320_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_320_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db2_320_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db2_320_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db2_320_f0_pack_table

NPL_INGRESS_RTF_IPV6_DB2_320_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db2_320_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_320_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db2_320_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(320)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_320_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db2_320_f0_packed_key(self):
        return npl_packed_ud_320_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db2_320_f0_packed_key.setter
    def ingress_rtf_ipv6_db2_320_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db2_320_f0_packed_key', 0, 320, npl_packed_ud_320_key_t, value)

class npl_ingress_rtf_ipv6_db2_320_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db2_320_f0_packed_key=0):
        super().__init__(328)
        self.payloads.ingress_rtf_ipv6_db2_320_f0_packed_key = ingress_rtf_ipv6_db2_320_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_320_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(320, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 320, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db2_320_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 320, npl_ingress_rtf_ipv6_db2_320_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db2_320_f0_table

NPL_INGRESS_RTF_IPV6_DB2_320_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db2_320_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_320_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db2_320_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_320_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db2_320_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db2_320_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db2_320_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db2_320_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db3_160_f0_compound_table

NPL_INGRESS_RTF_IPV6_DB3_160_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db3_160_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db3_160_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db3_160_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db3_160_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db3_160_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db3_160_f0_pack_table

NPL_INGRESS_RTF_IPV6_DB3_160_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db3_160_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db3_160_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db3_160_f0_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db3_160_f0_packed_key.setter
    def ingress_rtf_ipv6_db3_160_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db3_160_f0_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv6_db3_160_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db3_160_f0_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv6_db3_160_f0_packed_key = ingress_rtf_ipv6_db3_160_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db3_160_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv6_db3_160_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db3_160_f0_table

NPL_INGRESS_RTF_IPV6_DB3_160_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db3_160_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db3_160_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db3_160_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db3_160_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db3_160_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db3_160_f1_compound_table

NPL_INGRESS_RTF_IPV6_DB3_160_F1_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db3_160_f1_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f1_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db3_160_f1_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f1_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db3_160_f1_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f1_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db3_160_f1_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db3_160_f1_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db3_160_f1_pack_table

NPL_INGRESS_RTF_IPV6_DB3_160_F1_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db3_160_f1_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f1_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db3_160_f1_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f1_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db3_160_f1_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db3_160_f1_packed_key.setter
    def ingress_rtf_ipv6_db3_160_f1_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db3_160_f1_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv6_db3_160_f1_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db3_160_f1_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv6_db3_160_f1_packed_key = ingress_rtf_ipv6_db3_160_f1_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f1_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db3_160_f1_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv6_db3_160_f1_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db3_160_f1_table

NPL_INGRESS_RTF_IPV6_DB3_160_F1_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db3_160_f1_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db3_160_f1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db3_160_f1_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_160_f1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db3_160_f1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db3_160_f1_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db3_320_f0_compound_table

NPL_INGRESS_RTF_IPV6_DB3_320_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db3_320_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_320_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db3_320_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_320_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db3_320_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_320_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db3_320_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db3_320_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db3_320_f0_pack_table

NPL_INGRESS_RTF_IPV6_DB3_320_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db3_320_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_320_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db3_320_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(320)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_320_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db3_320_f0_packed_key(self):
        return npl_packed_ud_320_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db3_320_f0_packed_key.setter
    def ingress_rtf_ipv6_db3_320_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db3_320_f0_packed_key', 0, 320, npl_packed_ud_320_key_t, value)

class npl_ingress_rtf_ipv6_db3_320_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db3_320_f0_packed_key=0):
        super().__init__(328)
        self.payloads.ingress_rtf_ipv6_db3_320_f0_packed_key = ingress_rtf_ipv6_db3_320_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_320_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(320, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 320, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db3_320_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 320, npl_ingress_rtf_ipv6_db3_320_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db3_320_f0_table

NPL_INGRESS_RTF_IPV6_DB3_320_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db3_320_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_320_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db3_320_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_320_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db3_320_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db3_320_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db3_320_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db3_320_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db4_160_f0_compound_table

NPL_INGRESS_RTF_IPV6_DB4_160_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db4_160_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db4_160_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db4_160_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db4_160_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db4_160_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db4_160_f0_pack_table

NPL_INGRESS_RTF_IPV6_DB4_160_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db4_160_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db4_160_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db4_160_f0_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db4_160_f0_packed_key.setter
    def ingress_rtf_ipv6_db4_160_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db4_160_f0_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv6_db4_160_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db4_160_f0_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv6_db4_160_f0_packed_key = ingress_rtf_ipv6_db4_160_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db4_160_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv6_db4_160_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db4_160_f0_table

NPL_INGRESS_RTF_IPV6_DB4_160_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db4_160_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db4_160_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db4_160_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db4_160_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db4_160_f0_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db4_160_f1_compound_table

NPL_INGRESS_RTF_IPV6_DB4_160_F1_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db4_160_f1_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f1_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db4_160_f1_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f1_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db4_160_f1_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f1_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db4_160_f1_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db4_160_f1_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db4_160_f1_pack_table

NPL_INGRESS_RTF_IPV6_DB4_160_F1_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db4_160_f1_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f1_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db4_160_f1_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f1_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db4_160_f1_packed_key(self):
        return npl_packed_ud_160_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db4_160_f1_packed_key.setter
    def ingress_rtf_ipv6_db4_160_f1_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db4_160_f1_packed_key', 0, 160, npl_packed_ud_160_key_t, value)

class npl_ingress_rtf_ipv6_db4_160_f1_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db4_160_f1_packed_key=0):
        super().__init__(168)
        self.payloads.ingress_rtf_ipv6_db4_160_f1_packed_key = ingress_rtf_ipv6_db4_160_f1_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f1_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db4_160_f1_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_ingress_rtf_ipv6_db4_160_f1_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db4_160_f1_table

NPL_INGRESS_RTF_IPV6_DB4_160_F1_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db4_160_f1_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db4_160_f1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload_f1(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload_f1.setter
    def rtf_payload_f1(self, value):
        self._set_field_value('field rtf_payload_f1', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db4_160_f1_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload_f1=0):
        super().__init__(72)
        self.payloads.rtf_payload_f1 = rtf_payload_f1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_160_f1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db4_160_f1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db4_160_f1_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db4_320_f0_compound_table

NPL_INGRESS_RTF_IPV6_DB4_320_F0_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db4_320_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_320_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db4_320_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_320_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db4_320_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_320_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db4_320_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db4_320_f0_compound_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db4_320_f0_pack_table

NPL_INGRESS_RTF_IPV6_DB4_320_F0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db4_320_f0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_320_f0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db4_320_f0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(320)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_320_f0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_rtf_ipv6_db4_320_f0_packed_key(self):
        return npl_packed_ud_320_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_rtf_ipv6_db4_320_f0_packed_key.setter
    def ingress_rtf_ipv6_db4_320_f0_packed_key(self, value):
        self._set_field_value('field ingress_rtf_ipv6_db4_320_f0_packed_key', 0, 320, npl_packed_ud_320_key_t, value)

class npl_ingress_rtf_ipv6_db4_320_f0_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_rtf_ipv6_db4_320_f0_packed_key=0):
        super().__init__(328)
        self.payloads.ingress_rtf_ipv6_db4_320_f0_packed_key = ingress_rtf_ipv6_db4_320_f0_packed_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_320_f0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(320, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 320, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db4_320_f0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 320, npl_ingress_rtf_ipv6_db4_320_f0_pack_table_payloads_t, value)



# API-s for table: ingress_rtf_ipv6_db4_320_f0_table

NPL_INGRESS_RTF_IPV6_DB4_320_F0_TABLE_ACTION_WRITE = 0x0

class npl_ingress_rtf_ipv6_db4_320_f0_table_key_t(basic_npl_struct):
    def __init__(self, ud_key=0):
        super().__init__(4096)
        self.ud_key = ud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_320_f0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ud_key(self):
        return npl_ud_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ud_key.setter
    def ud_key(self, value):
        self._set_field_value('field ud_key', 0, 4096, npl_ud_key_t, value)

class npl_ingress_rtf_ipv6_db4_320_f0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_320_f0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_payload(self):
        return npl_rtf_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_payload.setter
    def rtf_payload(self, value):
        self._set_field_value('field rtf_payload', 0, 64, npl_rtf_payload_t, value)

class npl_ingress_rtf_ipv6_db4_320_f0_table_value_t(basic_npl_struct):
    def __init__(self, rtf_payload=0):
        super().__init__(72)
        self.payloads.rtf_payload = rtf_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ingress_rtf_ipv6_db4_320_f0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ingress_rtf_ipv6_db4_320_f0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ingress_rtf_ipv6_db4_320_f0_table_payloads_t, value)



# API-s for table: inject_down_select_ene_static_table

NPL_INJECT_DOWN_SELECT_ENE_STATIC_TABLE_ACTION_INJECT_DOWN_ENE = 0x0

class npl_inject_down_select_ene_static_table_inject_down_ene_payload_t(basic_npl_struct):
    def __init__(self, ene_macro_id=0, dma_decap_header_type=0):
        super().__init__(16)
        self.ene_macro_id = ene_macro_id
        self.dma_decap_header_type = dma_decap_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_select_ene_static_table_inject_down_ene_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ene_macro_id(self):
        return self._get_field_value(8, 8)
    @ene_macro_id.setter
    def ene_macro_id(self, value):
        self._set_field_value('field ene_macro_id', 8, 8, int, value)
    @property
    def dma_decap_header_type(self):
        return self._get_field_value(0, 8)
    @dma_decap_header_type.setter
    def dma_decap_header_type(self, value):
        self._set_field_value('field dma_decap_header_type', 0, 8, int, value)




class npl_inject_down_select_ene_static_table_key_t(basic_npl_struct):
    def __init__(self, pkt_size_4lsb=0, inject_down_encap=0, fwd_header_type=0, dsp_is_dma=0):
        super().__init__(12)
        self.pkt_size_4lsb = pkt_size_4lsb
        self.inject_down_encap = inject_down_encap
        self.fwd_header_type = fwd_header_type
        self.dsp_is_dma = dsp_is_dma

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_select_ene_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pkt_size_4lsb(self):
        return self._get_field_value(0, 4)
    @pkt_size_4lsb.setter
    def pkt_size_4lsb(self, value):
        self._set_field_value('field pkt_size_4lsb', 0, 4, int, value)
    @property
    def inject_down_encap(self):
        return self._get_field_value(4, 3)
    @inject_down_encap.setter
    def inject_down_encap(self, value):
        self._set_field_value('field inject_down_encap', 4, 3, int, value)
    @property
    def fwd_header_type(self):
        return self._get_field_value(7, 4)
    @fwd_header_type.setter
    def fwd_header_type(self, value):
        self._set_field_value('field fwd_header_type', 7, 4, int, value)
    @property
    def dsp_is_dma(self):
        return self._get_field_value(11, 1)
    @dsp_is_dma.setter
    def dsp_is_dma(self, value):
        self._set_field_value('field dsp_is_dma', 11, 1, int, value)

class npl_inject_down_select_ene_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_select_ene_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def inject_down_ene(self):
        return npl_inject_down_select_ene_static_table_inject_down_ene_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @inject_down_ene.setter
    def inject_down_ene(self, value):
        self._set_field_value('field inject_down_ene', 0, 16, npl_inject_down_select_ene_static_table_inject_down_ene_payload_t, value)

class npl_inject_down_select_ene_static_table_value_t(basic_npl_struct):
    def __init__(self, ene_macro_id=0, dma_decap_header_type=0):
        super().__init__(24)
        self.payloads.inject_down_ene = npl_inject_down_select_ene_static_table_inject_down_ene_payload_t(ene_macro_id, dma_decap_header_type)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_select_ene_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_inject_down_select_ene_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_inject_down_select_ene_static_table_payloads_t, value)



# API-s for table: inject_down_tx_redirect_counter_compound_table

NPL_INJECT_DOWN_TX_REDIRECT_COUNTER_COMPOUND_TABLE_ACTION_COUNTER_METER_FOUND = 0x0

class npl_inject_down_tx_redirect_counter_compound_table_counter_meter_found_payload_t(basic_npl_struct):
    def __init__(self, per_pif_trap_mode=0, counter_ptr=0):
        super().__init__(21)
        self.per_pif_trap_mode = per_pif_trap_mode
        self.counter_ptr = counter_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_tx_redirect_counter_compound_table_counter_meter_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def per_pif_trap_mode(self):
        return self._get_field_value(20, 1)
    @per_pif_trap_mode.setter
    def per_pif_trap_mode(self, value):
        self._set_field_value('field per_pif_trap_mode', 20, 1, int, value)
    @property
    def counter_ptr(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter_ptr.setter
    def counter_ptr(self, value):
        self._set_field_value('field counter_ptr', 0, 20, npl_counter_ptr_t, value)




class npl_inject_down_tx_redirect_counter_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_header_2__inject_header_npl_internal_info_tx_redirect_code=0):
        super().__init__(18)
        self._set_field_value('const field', 0, 4, int, 0x1)
        self._set_field_value('const field', 4, 2, int, 0x0)
        self._set_field_value('const field', 6, 4, int, 0xa)
        self.packet_header_2__inject_header_npl_internal_info_tx_redirect_code = packet_header_2__inject_header_npl_internal_info_tx_redirect_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_tx_redirect_counter_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_4b0001_exact_0x1(self):
        return self._get_field_value(0, 4)
    @property
    def const2_2b00_exact_0x0(self):
        return self._get_field_value(4, 2)
    @property
    def const3_SM_LDB_INJECT_DOWN_REDIRECT_DATA_exact_0xa(self):
        return self._get_field_value(6, 4)
    @property
    def packet_header_2__inject_header_npl_internal_info_tx_redirect_code(self):
        return self._get_field_value(10, 8)
    @packet_header_2__inject_header_npl_internal_info_tx_redirect_code.setter
    def packet_header_2__inject_header_npl_internal_info_tx_redirect_code(self, value):
        self._set_field_value('field packet_header_2__inject_header_npl_internal_info_tx_redirect_code', 10, 8, int, value)

class npl_inject_down_tx_redirect_counter_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(21)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_tx_redirect_counter_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def counter_meter_found(self):
        return npl_inject_down_tx_redirect_counter_compound_table_counter_meter_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter_meter_found.setter
    def counter_meter_found(self, value):
        self._set_field_value('field counter_meter_found', 0, 21, npl_inject_down_tx_redirect_counter_compound_table_counter_meter_found_payload_t, value)

class npl_inject_down_tx_redirect_counter_compound_table_value_t(basic_npl_struct):
    def __init__(self, per_pif_trap_mode=0, counter_ptr=0):
        super().__init__(29)
        self.payloads.counter_meter_found = npl_inject_down_tx_redirect_counter_compound_table_counter_meter_found_payload_t(per_pif_trap_mode, counter_ptr)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_tx_redirect_counter_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(21, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 21, 8, int, value)
    @property
    def payloads(self):
        return npl_inject_down_tx_redirect_counter_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 21, npl_inject_down_tx_redirect_counter_compound_table_payloads_t, value)



# API-s for table: inject_down_tx_redirect_counter_table

NPL_INJECT_DOWN_TX_REDIRECT_COUNTER_TABLE_ACTION_COUNTER_METER_FOUND = 0x0

class npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t(basic_npl_struct):
    def __init__(self, per_pif_trap_mode=0, counter_ptr=0):
        super().__init__(21)
        self.per_pif_trap_mode = per_pif_trap_mode
        self.counter_ptr = counter_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def per_pif_trap_mode(self):
        return self._get_field_value(20, 1)
    @per_pif_trap_mode.setter
    def per_pif_trap_mode(self, value):
        self._set_field_value('field per_pif_trap_mode', 20, 1, int, value)
    @property
    def counter_ptr(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter_ptr.setter
    def counter_ptr(self, value):
        self._set_field_value('field counter_ptr', 0, 20, npl_counter_ptr_t, value)




class npl_inject_down_tx_redirect_counter_table_key_t(basic_npl_struct):
    def __init__(self, tx_redirect_code=0):
        super().__init__(8)
        self.tx_redirect_code = tx_redirect_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_tx_redirect_counter_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_redirect_code(self):
        return self._get_field_value(0, 8)
    @tx_redirect_code.setter
    def tx_redirect_code(self, value):
        self._set_field_value('field tx_redirect_code', 0, 8, int, value)

class npl_inject_down_tx_redirect_counter_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(21)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_tx_redirect_counter_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def counter_meter_found(self):
        return npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter_meter_found.setter
    def counter_meter_found(self, value):
        self._set_field_value('field counter_meter_found', 0, 21, npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t, value)

class npl_inject_down_tx_redirect_counter_table_value_t(basic_npl_struct):
    def __init__(self, per_pif_trap_mode=0, counter_ptr=0):
        super().__init__(29)
        self.payloads.counter_meter_found = npl_inject_down_tx_redirect_counter_table_counter_meter_found_payload_t(per_pif_trap_mode, counter_ptr)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_down_tx_redirect_counter_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(21, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 21, 8, int, value)
    @property
    def payloads(self):
        return npl_inject_down_tx_redirect_counter_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 21, npl_inject_down_tx_redirect_counter_table_payloads_t, value)



# API-s for table: inject_mact_ldb_to_output_lr

NPL_INJECT_MACT_LDB_TO_OUTPUT_LR_ACTION_WRITE = 0x0

class npl_inject_mact_ldb_to_output_lr_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_mact_ldb_to_output_lr_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_inject_mact_ldb_to_output_lr_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_mact_ldb_to_output_lr_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def output_learn_record_mact_ldb(self):
        return self._get_field_value(0, 4)
    @output_learn_record_mact_ldb.setter
    def output_learn_record_mact_ldb(self, value):
        self._set_field_value('field output_learn_record_mact_ldb', 0, 4, int, value)

class npl_inject_mact_ldb_to_output_lr_value_t(basic_npl_struct):
    def __init__(self, output_learn_record_mact_ldb=0):
        super().__init__(12)
        self.payloads.output_learn_record_mact_ldb = output_learn_record_mact_ldb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_mact_ldb_to_output_lr_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_inject_mact_ldb_to_output_lr_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_inject_mact_ldb_to_output_lr_payloads_t, value)



# API-s for table: inject_up_pif_ifg_init_data_table

NPL_INJECT_UP_PIF_IFG_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_PIF_IFG = 0x0

class npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t(basic_npl_struct):
    def __init__(self, slice_and_source_if=0, init_data=0):
        super().__init__(59)
        self.slice_and_source_if = slice_and_source_if
        self.init_data = init_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def slice_and_source_if(self):
        return npl_slice_and_source_if_t._get_as_sub_field(self._data, self._offset_in_data + 48)
    @slice_and_source_if.setter
    def slice_and_source_if(self, value):
        self._set_field_value('field slice_and_source_if', 48, 11, npl_slice_and_source_if_t, value)
    @property
    def init_data(self):
        return npl_initial_pd_nw_rx_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @init_data.setter
    def init_data(self, value):
        self._set_field_value('field init_data', 0, 48, npl_initial_pd_nw_rx_data_t, value)




class npl_inject_up_pif_ifg_init_data_table_key_t(basic_npl_struct):
    def __init__(self, source_if=0, initial_slice_id=0):
        super().__init__(11)
        self.source_if = source_if
        self.initial_slice_id = initial_slice_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_up_pif_ifg_init_data_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def source_if(self):
        return npl_source_if_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @source_if.setter
    def source_if(self, value):
        self._set_field_value('field source_if', 0, 8, npl_source_if_t, value)
    @property
    def initial_slice_id(self):
        return self._get_field_value(8, 3)
    @initial_slice_id.setter
    def initial_slice_id(self, value):
        self._set_field_value('field initial_slice_id', 8, 3, int, value)

class npl_inject_up_pif_ifg_init_data_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(59)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_up_pif_ifg_init_data_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def write_init_data_for_pif_ifg(self):
        return npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @write_init_data_for_pif_ifg.setter
    def write_init_data_for_pif_ifg(self, value):
        self._set_field_value('field write_init_data_for_pif_ifg', 0, 59, npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t, value)

class npl_inject_up_pif_ifg_init_data_table_value_t(basic_npl_struct):
    def __init__(self, slice_and_source_if=0, init_data=0):
        super().__init__(67)
        self.payloads.write_init_data_for_pif_ifg = npl_inject_up_pif_ifg_init_data_table_write_init_data_for_pif_ifg_payload_t(slice_and_source_if, init_data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_up_pif_ifg_init_data_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(59, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 59, 8, int, value)
    @property
    def payloads(self):
        return npl_inject_up_pif_ifg_init_data_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 59, npl_inject_up_pif_ifg_init_data_table_payloads_t, value)



# API-s for table: inject_up_ssp_init_data_table

NPL_INJECT_UP_SSP_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_SSP = 0x0

class npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t(basic_npl_struct):
    def __init__(self, init_data=0):
        super().__init__(48)
        self.init_data = init_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def init_data(self):
        return npl_initial_pd_nw_rx_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @init_data.setter
    def init_data(self, value):
        self._set_field_value('field init_data', 0, 48, npl_initial_pd_nw_rx_data_t, value)




class npl_inject_up_ssp_init_data_table_key_t(basic_npl_struct):
    def __init__(self, up_ssp=0):
        super().__init__(12)
        self.up_ssp = up_ssp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_up_ssp_init_data_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def up_ssp(self):
        return self._get_field_value(0, 12)
    @up_ssp.setter
    def up_ssp(self, value):
        self._set_field_value('field up_ssp', 0, 12, int, value)

class npl_inject_up_ssp_init_data_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_up_ssp_init_data_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def write_init_data_for_ssp(self):
        return npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @write_init_data_for_ssp.setter
    def write_init_data_for_ssp(self, value):
        self._set_field_value('field write_init_data_for_ssp', 0, 48, npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t, value)

class npl_inject_up_ssp_init_data_table_value_t(basic_npl_struct):
    def __init__(self, init_data=0):
        super().__init__(56)
        self.payloads.write_init_data_for_ssp = npl_inject_up_ssp_init_data_table_write_init_data_for_ssp_payload_t(init_data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_inject_up_ssp_init_data_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_inject_up_ssp_init_data_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_inject_up_ssp_init_data_table_payloads_t, value)



# API-s for table: inner_tpid_table

NPL_INNER_TPID_TABLE_ACTION_WRITE = 0x0

class npl_inner_tpid_table_key_t(basic_npl_struct):
    def __init__(self, tpid_ptr=0):
        super().__init__(4)
        self.tpid_ptr = tpid_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inner_tpid_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tpid_ptr(self):
        return self._get_field_value(0, 4)
    @tpid_ptr.setter
    def tpid_ptr(self, value):
        self._set_field_value('field tpid_ptr', 0, 4, int, value)

class npl_inner_tpid_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inner_tpid_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tpid(self):
        return self._get_field_value(0, 16)
    @tpid.setter
    def tpid(self, value):
        self._set_field_value('field tpid', 0, 16, int, value)

class npl_inner_tpid_table_value_t(basic_npl_struct):
    def __init__(self, tpid=0):
        super().__init__(24)
        self.payloads.tpid = tpid

    def _get_as_sub_field(data, offset_in_data):
        result = npl_inner_tpid_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_inner_tpid_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_inner_tpid_table_payloads_t, value)



# API-s for table: invert_crc_for_drop_packet_pack_table

NPL_INVERT_CRC_FOR_DROP_PACKET_PACK_TABLE_ACTION_WRITE = 0x0

class npl_invert_crc_for_drop_packet_pack_table_key_t(basic_npl_struct):
    def __init__(self, device_pd_packet_id_8_=0):
        super().__init__(2)
        self._set_field_value('const field', 1, 1, int, 0x1)
        self.device_pd_packet_id_8_ = device_pd_packet_id_8_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_invert_crc_for_drop_packet_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def device_pd_packet_id_8_(self):
        return self._get_field_value(0, 1)
    @device_pd_packet_id_8_.setter
    def device_pd_packet_id_8_(self, value):
        self._set_field_value('field device_pd_packet_id_8_', 0, 1, int, value)
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(1, 1)

class npl_invert_crc_for_drop_packet_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_invert_crc_for_drop_packet_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def invert_crc_and_context_id_local_var(self):
        return npl_invert_crc_and_context_id_local_var_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @invert_crc_and_context_id_local_var.setter
    def invert_crc_and_context_id_local_var(self, value):
        self._set_field_value('field invert_crc_and_context_id_local_var', 0, 2, npl_invert_crc_and_context_id_local_var_t, value)

class npl_invert_crc_for_drop_packet_pack_table_value_t(basic_npl_struct):
    def __init__(self, invert_crc_and_context_id_local_var=0):
        super().__init__(10)
        self.payloads.invert_crc_and_context_id_local_var = invert_crc_and_context_id_local_var

    def _get_as_sub_field(data, offset_in_data):
        result = npl_invert_crc_for_drop_packet_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_invert_crc_for_drop_packet_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_invert_crc_for_drop_packet_pack_table_payloads_t, value)



# API-s for table: ip_fields_muxing_bfd_pack_table

NPL_IP_FIELDS_MUXING_BFD_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ip_fields_muxing_bfd_pack_table_key_option_ip_version_ipv4_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_is_udp_0=0, ip_rx_local_vars_is_bfd=0, ip_rx_local_vars_is_udp_1=0, pd_layer_vars_acl_outer=0, ip_rx_local_vars_is_next_header_gre_ipv4=0):
        super().__init__(6)
        self.ip_rx_local_vars_is_udp_0 = ip_rx_local_vars_is_udp_0
        self.ip_rx_local_vars_is_bfd = ip_rx_local_vars_is_bfd
        self.ip_rx_local_vars_is_udp_1 = ip_rx_local_vars_is_udp_1
        self.pd_layer_vars_acl_outer = pd_layer_vars_acl_outer
        self.ip_rx_local_vars_is_next_header_gre_ipv4 = ip_rx_local_vars_is_next_header_gre_ipv4

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fields_muxing_bfd_pack_table_key_option_ip_version_ipv4_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ip_rx_local_vars_is_udp_0(self):
        return self._get_field_value(0, 1)
    @ip_rx_local_vars_is_udp_0.setter
    def ip_rx_local_vars_is_udp_0(self, value):
        self._set_field_value('field ip_rx_local_vars_is_udp_0', 0, 1, int, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(1, 1)
    @property
    def ip_rx_local_vars_is_bfd(self):
        return self._get_field_value(2, 1)
    @ip_rx_local_vars_is_bfd.setter
    def ip_rx_local_vars_is_bfd(self, value):
        self._set_field_value('field ip_rx_local_vars_is_bfd', 2, 1, int, value)
    @property
    def ip_rx_local_vars_is_udp_1(self):
        return self._get_field_value(3, 1)
    @ip_rx_local_vars_is_udp_1.setter
    def ip_rx_local_vars_is_udp_1(self, value):
        self._set_field_value('field ip_rx_local_vars_is_udp_1', 3, 1, int, value)
    @property
    def pd_layer_vars_acl_outer(self):
        return self._get_field_value(4, 1)
    @pd_layer_vars_acl_outer.setter
    def pd_layer_vars_acl_outer(self, value):
        self._set_field_value('field pd_layer_vars_acl_outer', 4, 1, int, value)
    @property
    def ip_rx_local_vars_is_next_header_gre_ipv4(self):
        return self._get_field_value(5, 1)
    @ip_rx_local_vars_is_next_header_gre_ipv4.setter
    def ip_rx_local_vars_is_next_header_gre_ipv4(self, value):
        self._set_field_value('field ip_rx_local_vars_is_next_header_gre_ipv4', 5, 1, int, value)



class npl_ip_fields_muxing_bfd_pack_table_key_option_ip_version_ipv6_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_is_udp_0=0, ip_rx_local_vars_is_hop_by_hop=0, ip_rx_local_vars_is_bfd=0, ip_rx_local_vars_is_udp_1=0, pd_layer_vars_acl_outer=0, ip_rx_local_vars_is_next_header_gre_ipv6=0):
        super().__init__(6)
        self.ip_rx_local_vars_is_udp_0 = ip_rx_local_vars_is_udp_0
        self.ip_rx_local_vars_is_hop_by_hop = ip_rx_local_vars_is_hop_by_hop
        self.ip_rx_local_vars_is_bfd = ip_rx_local_vars_is_bfd
        self.ip_rx_local_vars_is_udp_1 = ip_rx_local_vars_is_udp_1
        self.pd_layer_vars_acl_outer = pd_layer_vars_acl_outer
        self.ip_rx_local_vars_is_next_header_gre_ipv6 = ip_rx_local_vars_is_next_header_gre_ipv6

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fields_muxing_bfd_pack_table_key_option_ip_version_ipv6_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ip_rx_local_vars_is_udp_0(self):
        return self._get_field_value(0, 1)
    @ip_rx_local_vars_is_udp_0.setter
    def ip_rx_local_vars_is_udp_0(self, value):
        self._set_field_value('field ip_rx_local_vars_is_udp_0', 0, 1, int, value)
    @property
    def ip_rx_local_vars_is_hop_by_hop(self):
        return self._get_field_value(1, 1)
    @ip_rx_local_vars_is_hop_by_hop.setter
    def ip_rx_local_vars_is_hop_by_hop(self, value):
        self._set_field_value('field ip_rx_local_vars_is_hop_by_hop', 1, 1, int, value)
    @property
    def ip_rx_local_vars_is_bfd(self):
        return self._get_field_value(2, 1)
    @ip_rx_local_vars_is_bfd.setter
    def ip_rx_local_vars_is_bfd(self, value):
        self._set_field_value('field ip_rx_local_vars_is_bfd', 2, 1, int, value)
    @property
    def ip_rx_local_vars_is_udp_1(self):
        return self._get_field_value(3, 1)
    @ip_rx_local_vars_is_udp_1.setter
    def ip_rx_local_vars_is_udp_1(self, value):
        self._set_field_value('field ip_rx_local_vars_is_udp_1', 3, 1, int, value)
    @property
    def pd_layer_vars_acl_outer(self):
        return self._get_field_value(4, 1)
    @pd_layer_vars_acl_outer.setter
    def pd_layer_vars_acl_outer(self, value):
        self._set_field_value('field pd_layer_vars_acl_outer', 4, 1, int, value)
    @property
    def ip_rx_local_vars_is_next_header_gre_ipv6(self):
        return self._get_field_value(5, 1)
    @ip_rx_local_vars_is_next_header_gre_ipv6.setter
    def ip_rx_local_vars_is_next_header_gre_ipv6(self, value):
        self._set_field_value('field ip_rx_local_vars_is_next_header_gre_ipv6', 5, 1, int, value)




class ip_fields_muxing_bfd_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ip_fields_muxing_bfd_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_IP_VERSION_IPV4(self):
        return npl_ip_fields_muxing_bfd_pack_table_key_option_ip_version_ipv4_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV4.setter
    def NPL_IP_VERSION_IPV4(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV4', 0, 6, npl_ip_fields_muxing_bfd_pack_table_key_option_ip_version_ipv4_t, value)
    @property
    def NPL_IP_VERSION_IPV6(self):
        return npl_ip_fields_muxing_bfd_pack_table_key_option_ip_version_ipv6_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV6.setter
    def NPL_IP_VERSION_IPV6(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV6', 0, 6, npl_ip_fields_muxing_bfd_pack_table_key_option_ip_version_ipv6_t, value)

class npl_ip_fields_muxing_bfd_pack_table_key_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_ip_version=0):
        super().__init__(6)
        self.ip_rx_local_vars_ip_version = ip_rx_local_vars_ip_version

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fields_muxing_bfd_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _ip_rx_local_vars_ip_version = 0
    @property
    def ip_rx_local_vars_ip_version(self):
        return self._ip_rx_local_vars_ip_version
    @ip_rx_local_vars_ip_version.setter
    def ip_rx_local_vars_ip_version(self, value):
        self._ip_rx_local_vars_ip_version = value
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 1, 1, int, 0x0)

    @property
    def options(self):
        return ip_fields_muxing_bfd_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 6 - 0, ip_fields_muxing_bfd_pack_table_key_options_t, value)

class npl_ip_fields_muxing_bfd_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fields_muxing_bfd_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_rx_local_vars_ip_muxed_fields(self):
        return npl_ip_muxed_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_rx_local_vars_ip_muxed_fields.setter
    def ip_rx_local_vars_ip_muxed_fields(self, value):
        self._set_field_value('field ip_rx_local_vars_ip_muxed_fields', 0, 6, npl_ip_muxed_fields_t, value)

class npl_ip_fields_muxing_bfd_pack_table_value_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_ip_muxed_fields=0):
        super().__init__(14)
        self.payloads.ip_rx_local_vars_ip_muxed_fields = ip_rx_local_vars_ip_muxed_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fields_muxing_bfd_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_fields_muxing_bfd_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_ip_fields_muxing_bfd_pack_table_payloads_t, value)



# API-s for table: ip_fields_muxing_pack_table

NPL_IP_FIELDS_MUXING_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ip_fields_muxing_pack_table_key_option_ip_version_ipv4_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_is_udp=0, ip_rx_local_vars_is_bfd=0, pd_layer_vars_soft_lb_enable=0, ip_rx_local_vars_is_next_header_gre_ipv4=0):
        super().__init__(6)
        self.ip_rx_local_vars_is_udp = ip_rx_local_vars_is_udp
        self.ip_rx_local_vars_is_bfd = ip_rx_local_vars_is_bfd
        self.pd_layer_vars_soft_lb_enable = pd_layer_vars_soft_lb_enable
        self.ip_rx_local_vars_is_next_header_gre_ipv4 = ip_rx_local_vars_is_next_header_gre_ipv4

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fields_muxing_pack_table_key_option_ip_version_ipv4_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ip_rx_local_vars_is_udp(self):
        return self._get_field_value(0, 1)
    @ip_rx_local_vars_is_udp.setter
    def ip_rx_local_vars_is_udp(self, value):
        self._set_field_value('field ip_rx_local_vars_is_udp', 0, 1, int, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(1, 1)
    @property
    def ip_rx_local_vars_is_bfd(self):
        return self._get_field_value(2, 1)
    @ip_rx_local_vars_is_bfd.setter
    def ip_rx_local_vars_is_bfd(self, value):
        self._set_field_value('field ip_rx_local_vars_is_bfd', 2, 1, int, value)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(3, 1)
    @property
    def pd_layer_vars_soft_lb_enable(self):
        return self._get_field_value(4, 1)
    @pd_layer_vars_soft_lb_enable.setter
    def pd_layer_vars_soft_lb_enable(self, value):
        self._set_field_value('field pd_layer_vars_soft_lb_enable', 4, 1, int, value)
    @property
    def ip_rx_local_vars_is_next_header_gre_ipv4(self):
        return self._get_field_value(5, 1)
    @ip_rx_local_vars_is_next_header_gre_ipv4.setter
    def ip_rx_local_vars_is_next_header_gre_ipv4(self, value):
        self._set_field_value('field ip_rx_local_vars_is_next_header_gre_ipv4', 5, 1, int, value)



class npl_ip_fields_muxing_pack_table_key_option_ip_version_ipv6_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_is_udp=0, ip_rx_local_vars_is_hop_by_hop=0, ip_rx_local_vars_is_bfd=0, pd_layer_vars_soft_lb_enable=0, ip_rx_local_vars_is_next_header_gre_ipv4=0):
        super().__init__(6)
        self.ip_rx_local_vars_is_udp = ip_rx_local_vars_is_udp
        self.ip_rx_local_vars_is_hop_by_hop = ip_rx_local_vars_is_hop_by_hop
        self.ip_rx_local_vars_is_bfd = ip_rx_local_vars_is_bfd
        self.pd_layer_vars_soft_lb_enable = pd_layer_vars_soft_lb_enable
        self.ip_rx_local_vars_is_next_header_gre_ipv4 = ip_rx_local_vars_is_next_header_gre_ipv4

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fields_muxing_pack_table_key_option_ip_version_ipv6_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ip_rx_local_vars_is_udp(self):
        return self._get_field_value(0, 1)
    @ip_rx_local_vars_is_udp.setter
    def ip_rx_local_vars_is_udp(self, value):
        self._set_field_value('field ip_rx_local_vars_is_udp', 0, 1, int, value)
    @property
    def ip_rx_local_vars_is_hop_by_hop(self):
        return self._get_field_value(1, 1)
    @ip_rx_local_vars_is_hop_by_hop.setter
    def ip_rx_local_vars_is_hop_by_hop(self, value):
        self._set_field_value('field ip_rx_local_vars_is_hop_by_hop', 1, 1, int, value)
    @property
    def ip_rx_local_vars_is_bfd(self):
        return self._get_field_value(2, 1)
    @ip_rx_local_vars_is_bfd.setter
    def ip_rx_local_vars_is_bfd(self, value):
        self._set_field_value('field ip_rx_local_vars_is_bfd', 2, 1, int, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(3, 1)
    @property
    def pd_layer_vars_soft_lb_enable(self):
        return self._get_field_value(4, 1)
    @pd_layer_vars_soft_lb_enable.setter
    def pd_layer_vars_soft_lb_enable(self, value):
        self._set_field_value('field pd_layer_vars_soft_lb_enable', 4, 1, int, value)
    @property
    def ip_rx_local_vars_is_next_header_gre_ipv4(self):
        return self._get_field_value(5, 1)
    @ip_rx_local_vars_is_next_header_gre_ipv4.setter
    def ip_rx_local_vars_is_next_header_gre_ipv4(self, value):
        self._set_field_value('field ip_rx_local_vars_is_next_header_gre_ipv4', 5, 1, int, value)




class ip_fields_muxing_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ip_fields_muxing_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_IP_VERSION_IPV4(self):
        return npl_ip_fields_muxing_pack_table_key_option_ip_version_ipv4_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV4.setter
    def NPL_IP_VERSION_IPV4(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV4', 0, 6, npl_ip_fields_muxing_pack_table_key_option_ip_version_ipv4_t, value)
    @property
    def NPL_IP_VERSION_IPV6(self):
        return npl_ip_fields_muxing_pack_table_key_option_ip_version_ipv6_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV6.setter
    def NPL_IP_VERSION_IPV6(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV6', 0, 6, npl_ip_fields_muxing_pack_table_key_option_ip_version_ipv6_t, value)

class npl_ip_fields_muxing_pack_table_key_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_ip_version=0):
        super().__init__(6)
        self.ip_rx_local_vars_ip_version = ip_rx_local_vars_ip_version

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fields_muxing_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _ip_rx_local_vars_ip_version = 0
    @property
    def ip_rx_local_vars_ip_version(self):
        return self._ip_rx_local_vars_ip_version
    @ip_rx_local_vars_ip_version.setter
    def ip_rx_local_vars_ip_version(self, value):
        self._ip_rx_local_vars_ip_version = value
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 1, 1, int, 0x0)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 3, 1, int, 0x0)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 3, 1, int, 0x0)

    @property
    def options(self):
        return ip_fields_muxing_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 6 - 0, ip_fields_muxing_pack_table_key_options_t, value)

class npl_ip_fields_muxing_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fields_muxing_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_rx_local_vars_ip_muxed_fields(self):
        return npl_ip_muxed_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_rx_local_vars_ip_muxed_fields.setter
    def ip_rx_local_vars_ip_muxed_fields(self, value):
        self._set_field_value('field ip_rx_local_vars_ip_muxed_fields', 0, 6, npl_ip_muxed_fields_t, value)

class npl_ip_fields_muxing_pack_table_value_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_ip_muxed_fields=0):
        super().__init__(14)
        self.payloads.ip_rx_local_vars_ip_muxed_fields = ip_rx_local_vars_ip_muxed_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fields_muxing_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_fields_muxing_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_ip_fields_muxing_pack_table_payloads_t, value)



# API-s for table: ip_fwd_header_mapping_to_ethtype_static_table

NPL_IP_FWD_HEADER_MAPPING_TO_ETHTYPE_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_ip_fwd_header_mapping_to_ethtype_static_table_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_fwd_header_type=0):
        super().__init__(4)
        self.tx_npu_header_fwd_header_type = tx_npu_header_fwd_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fwd_header_mapping_to_ethtype_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_npu_header_fwd_header_type(self):
        return self._get_field_value(0, 4)
    @tx_npu_header_fwd_header_type.setter
    def tx_npu_header_fwd_header_type(self, value):
        self._set_field_value('field tx_npu_header_fwd_header_type', 0, 4, int, value)

class npl_ip_fwd_header_mapping_to_ethtype_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fwd_header_mapping_to_ethtype_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_tx_ip_mapping(self):
        return npl_local_tx_ip_mapping_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_tx_ip_mapping.setter
    def local_tx_ip_mapping(self, value):
        self._set_field_value('field local_tx_ip_mapping', 0, 3, npl_local_tx_ip_mapping_t, value)

class npl_ip_fwd_header_mapping_to_ethtype_static_table_value_t(basic_npl_struct):
    def __init__(self, local_tx_ip_mapping=0):
        super().__init__(11)
        self.payloads.local_tx_ip_mapping = local_tx_ip_mapping

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_fwd_header_mapping_to_ethtype_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_fwd_header_mapping_to_ethtype_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_ip_fwd_header_mapping_to_ethtype_static_table_payloads_t, value)



# API-s for table: ip_ingress_cmp_mcid_static_table

NPL_IP_INGRESS_CMP_MCID_STATIC_TABLE_ACTION_SET_VALUE = 0x0

class npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t(basic_npl_struct):
    def __init__(self, global_mcid_17_downto_16_is_zero=0):
        super().__init__(1)
        self.global_mcid_17_downto_16_is_zero = global_mcid_17_downto_16_is_zero

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def global_mcid_17_downto_16_is_zero(self):
        return self._get_field_value(0, 1)
    @global_mcid_17_downto_16_is_zero.setter
    def global_mcid_17_downto_16_is_zero(self, value):
        self._set_field_value('field global_mcid_17_downto_16_is_zero', 0, 1, int, value)




class npl_ip_ingress_cmp_mcid_static_table_key_t(basic_npl_struct):
    def __init__(self, global_mcid_17_downto_16=0):
        super().__init__(2)
        self.global_mcid_17_downto_16 = global_mcid_17_downto_16

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_ingress_cmp_mcid_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def global_mcid_17_downto_16(self):
        return self._get_field_value(0, 2)
    @global_mcid_17_downto_16.setter
    def global_mcid_17_downto_16(self, value):
        self._set_field_value('field global_mcid_17_downto_16', 0, 2, int, value)

class npl_ip_ingress_cmp_mcid_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_ingress_cmp_mcid_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_value(self):
        return npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_value.setter
    def set_value(self, value):
        self._set_field_value('field set_value', 0, 1, npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t, value)

class npl_ip_ingress_cmp_mcid_static_table_value_t(basic_npl_struct):
    def __init__(self, global_mcid_17_downto_16_is_zero=0):
        super().__init__(9)
        self.payloads.set_value = npl_ip_ingress_cmp_mcid_static_table_set_value_payload_t(global_mcid_17_downto_16_is_zero)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_ingress_cmp_mcid_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_ingress_cmp_mcid_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_ip_ingress_cmp_mcid_static_table_payloads_t, value)



# API-s for table: ip_mc_local_inject_type_static_table

NPL_IP_MC_LOCAL_INJECT_TYPE_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_ip_mc_local_inject_type_static_table_key_t(basic_npl_struct):
    def __init__(self, current_protocol=0):
        super().__init__(5)
        self.current_protocol = current_protocol

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_mc_local_inject_type_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def current_protocol(self):
        return self._get_field_value(0, 5)
    @current_protocol.setter
    def current_protocol(self, value):
        self._set_field_value('field current_protocol', 0, 5, int, value)

class npl_ip_mc_local_inject_type_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_mc_local_inject_type_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_ene_encap_data_inject_header_type(self):
        return self._get_field_value(0, 8)
    @pd_ene_encap_data_inject_header_type.setter
    def pd_ene_encap_data_inject_header_type(self, value):
        self._set_field_value('field pd_ene_encap_data_inject_header_type', 0, 8, int, value)

class npl_ip_mc_local_inject_type_static_table_value_t(basic_npl_struct):
    def __init__(self, pd_ene_encap_data_inject_header_type=0):
        super().__init__(16)
        self.payloads.pd_ene_encap_data_inject_header_type = pd_ene_encap_data_inject_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_mc_local_inject_type_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_mc_local_inject_type_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_ip_mc_local_inject_type_static_table_payloads_t, value)



# API-s for table: ip_mc_next_macro_static_table

NPL_IP_MC_NEXT_MACRO_STATIC_TABLE_ACTION_SET_NPE_NEXT_MACRO = 0x0

class npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, npe_macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.npe_macro_id = npe_macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def npe_macro_id(self):
        return self._get_field_value(0, 8)
    @npe_macro_id.setter
    def npe_macro_id(self, value):
        self._set_field_value('field npe_macro_id', 0, 8, int, value)




class npl_ip_mc_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, collapsed_mc=0, same_l3_int=0):
        super().__init__(2)
        self.collapsed_mc = collapsed_mc
        self.same_l3_int = same_l3_int

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_mc_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def collapsed_mc(self):
        return self._get_field_value(0, 1)
    @collapsed_mc.setter
    def collapsed_mc(self, value):
        self._set_field_value('field collapsed_mc', 0, 1, int, value)
    @property
    def same_l3_int(self):
        return self._get_field_value(1, 1)
    @same_l3_int.setter
    def same_l3_int(self, value):
        self._set_field_value('field same_l3_int', 1, 1, int, value)

class npl_ip_mc_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_mc_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_npe_next_macro(self):
        return npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_npe_next_macro.setter
    def set_npe_next_macro(self, value):
        self._set_field_value('field set_npe_next_macro', 0, 10, npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t, value)

class npl_ip_mc_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, npe_macro_id=0):
        super().__init__(18)
        self.payloads.set_npe_next_macro = npl_ip_mc_next_macro_static_table_set_npe_next_macro_payload_t(pl_inc, npe_macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_mc_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_mc_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_ip_mc_next_macro_static_table_payloads_t, value)



# API-s for table: ip_meter_profile_mapping_table

NPL_IP_METER_PROFILE_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_ip_meter_profile_mapping_table_key_t(basic_npl_struct):
    def __init__(self, qos_id=0):
        super().__init__(4)
        self.qos_id = qos_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_meter_profile_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_id(self):
        return self._get_field_value(0, 4)
    @qos_id.setter
    def qos_id(self, value):
        self._set_field_value('field qos_id', 0, 4, int, value)

class npl_ip_meter_profile_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_meter_profile_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def slp_qos_id(self):
        return self._get_field_value(0, 4)
    @slp_qos_id.setter
    def slp_qos_id(self, value):
        self._set_field_value('field slp_qos_id', 0, 4, int, value)

class npl_ip_meter_profile_mapping_table_value_t(basic_npl_struct):
    def __init__(self, slp_qos_id=0):
        super().__init__(12)
        self.payloads.slp_qos_id = slp_qos_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_meter_profile_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_meter_profile_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_ip_meter_profile_mapping_table_payloads_t, value)



# API-s for table: ip_overlay_tos_pack_table

NPL_IP_OVERLAY_TOS_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ip_overlay_tos_pack_table_key_option_true_value_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_ecn=0, tx_npu_header_fwd_qos_tag_5_0_=0, packet_ipv4_header_hln=0, packet_ipv6_header_hop_limit=0, pd_adj_encap_data_ttl=0):
        super().__init__(28)
        self.packet_ipv4_header_ecn = packet_ipv4_header_ecn
        self.tx_npu_header_fwd_qos_tag_5_0_ = tx_npu_header_fwd_qos_tag_5_0_
        self.packet_ipv4_header_hln = packet_ipv4_header_hln
        self.packet_ipv6_header_hop_limit = packet_ipv6_header_hop_limit
        self.pd_adj_encap_data_ttl = pd_adj_encap_data_ttl

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_overlay_tos_pack_table_key_option_true_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_ipv4_header_ecn(self):
        return self._get_field_value(0, 2)
    @packet_ipv4_header_ecn.setter
    def packet_ipv4_header_ecn(self, value):
        self._set_field_value('field packet_ipv4_header_ecn', 0, 2, int, value)
    @property
    def tx_npu_header_fwd_qos_tag_5_0_(self):
        return self._get_field_value(2, 6)
    @tx_npu_header_fwd_qos_tag_5_0_.setter
    def tx_npu_header_fwd_qos_tag_5_0_(self, value):
        self._set_field_value('field tx_npu_header_fwd_qos_tag_5_0_', 2, 6, int, value)
    @property
    def packet_ipv4_header_hln(self):
        return self._get_field_value(8, 4)
    @packet_ipv4_header_hln.setter
    def packet_ipv4_header_hln(self, value):
        self._set_field_value('field packet_ipv4_header_hln', 8, 4, int, value)
    @property
    def packet_ipv6_header_hop_limit(self):
        return self._get_field_value(12, 8)
    @packet_ipv6_header_hop_limit.setter
    def packet_ipv6_header_hop_limit(self, value):
        self._set_field_value('field packet_ipv6_header_hop_limit', 12, 8, int, value)
    @property
    def pd_adj_encap_data_ttl(self):
        return self._get_field_value(20, 8)
    @pd_adj_encap_data_ttl.setter
    def pd_adj_encap_data_ttl(self, value):
        self._set_field_value('field pd_adj_encap_data_ttl', 20, 8, int, value)



class npl_ip_overlay_tos_pack_table_key_option_false_value_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_flow_label_19_16_=0, packet_ipv6_header_ecn=0, tx_npu_header_fwd_qos_tag_5_0_=0, pd_adj_encap_data_ttl=0, packet_ipv4_header_ttl=0):
        super().__init__(28)
        self.packet_ipv6_header_flow_label_19_16_ = packet_ipv6_header_flow_label_19_16_
        self.packet_ipv6_header_ecn = packet_ipv6_header_ecn
        self.tx_npu_header_fwd_qos_tag_5_0_ = tx_npu_header_fwd_qos_tag_5_0_
        self.pd_adj_encap_data_ttl = pd_adj_encap_data_ttl
        self.packet_ipv4_header_ttl = packet_ipv4_header_ttl

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_overlay_tos_pack_table_key_option_false_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_ipv6_header_flow_label_19_16_(self):
        return self._get_field_value(0, 4)
    @packet_ipv6_header_flow_label_19_16_.setter
    def packet_ipv6_header_flow_label_19_16_(self, value):
        self._set_field_value('field packet_ipv6_header_flow_label_19_16_', 0, 4, int, value)
    @property
    def packet_ipv6_header_ecn(self):
        return self._get_field_value(4, 2)
    @packet_ipv6_header_ecn.setter
    def packet_ipv6_header_ecn(self, value):
        self._set_field_value('field packet_ipv6_header_ecn', 4, 2, int, value)
    @property
    def tx_npu_header_fwd_qos_tag_5_0_(self):
        return self._get_field_value(6, 6)
    @tx_npu_header_fwd_qos_tag_5_0_.setter
    def tx_npu_header_fwd_qos_tag_5_0_(self, value):
        self._set_field_value('field tx_npu_header_fwd_qos_tag_5_0_', 6, 6, int, value)
    @property
    def pd_adj_encap_data_ttl(self):
        return self._get_field_value(12, 8)
    @pd_adj_encap_data_ttl.setter
    def pd_adj_encap_data_ttl(self, value):
        self._set_field_value('field pd_adj_encap_data_ttl', 12, 8, int, value)
    @property
    def packet_ipv4_header_ttl(self):
        return self._get_field_value(20, 8)
    @packet_ipv4_header_ttl.setter
    def packet_ipv4_header_ttl(self, value):
        self._set_field_value('field packet_ipv4_header_ttl', 20, 8, int, value)




class ip_overlay_tos_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ip_overlay_tos_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_TRUE_VALUE(self):
        return npl_ip_overlay_tos_pack_table_key_option_true_value_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TRUE_VALUE.setter
    def NPL_TRUE_VALUE(self, value):
        self._set_field_value('field NPL_TRUE_VALUE', 0, 28, npl_ip_overlay_tos_pack_table_key_option_true_value_t, value)
    @property
    def NPL_FALSE_VALUE(self):
        return npl_ip_overlay_tos_pack_table_key_option_false_value_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_FALSE_VALUE.setter
    def NPL_FALSE_VALUE(self, value):
        self._set_field_value('field NPL_FALSE_VALUE', 0, 28, npl_ip_overlay_tos_pack_table_key_option_false_value_t, value)

class npl_ip_overlay_tos_pack_table_key_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_is_ipv4_val=0):
        super().__init__(28)
        self.l3_tx_local_vars_is_ipv4_val = l3_tx_local_vars_is_ipv4_val

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_overlay_tos_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _l3_tx_local_vars_is_ipv4_val = 0
    @property
    def l3_tx_local_vars_is_ipv4_val(self):
        return self._l3_tx_local_vars_is_ipv4_val
    @l3_tx_local_vars_is_ipv4_val.setter
    def l3_tx_local_vars_is_ipv4_val(self, value):
        self._l3_tx_local_vars_is_ipv4_val = value

    @property
    def options(self):
        return ip_overlay_tos_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 28 - 0, ip_overlay_tos_pack_table_key_options_t, value)

class npl_ip_overlay_tos_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(34)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_overlay_tos_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_tx_local_vars_mac_da_tos_pack_payload(self):
        return npl_mac_da_tos_pack_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l3_tx_local_vars_mac_da_tos_pack_payload.setter
    def l3_tx_local_vars_mac_da_tos_pack_payload(self, value):
        self._set_field_value('field l3_tx_local_vars_mac_da_tos_pack_payload', 0, 34, npl_mac_da_tos_pack_payload_t, value)

class npl_ip_overlay_tos_pack_table_value_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_mac_da_tos_pack_payload=0):
        super().__init__(42)
        self.payloads.l3_tx_local_vars_mac_da_tos_pack_payload = l3_tx_local_vars_mac_da_tos_pack_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_overlay_tos_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(34, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 34, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_overlay_tos_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 34, npl_ip_overlay_tos_pack_table_payloads_t, value)



# API-s for table: ip_prefix_destination_compound_table

NPL_IP_PREFIX_DESTINATION_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ip_prefix_destination_compound_table_key_t(basic_npl_struct):
    def __init__(self, pd_destination_15_0_=0):
        super().__init__(25)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 7, int, 0x56)
        self.pd_destination_15_0_ = pd_destination_15_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_prefix_destination_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_EM_LDB_IP_PREFIX_ID_exact_0x56(self):
        return self._get_field_value(2, 7)
    @property
    def pd_destination_15_0_(self):
        return self._get_field_value(9, 16)
    @pd_destination_15_0_.setter
    def pd_destination_15_0_(self, value):
        self._set_field_value('field pd_destination_15_0_', 9, 16, int, value)

class npl_ip_prefix_destination_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_prefix_destination_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_prefix_destination_compound_results(self):
        return npl_ip_prefix_destination_compound_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_prefix_destination_compound_results.setter
    def ip_prefix_destination_compound_results(self, value):
        self._set_field_value('field ip_prefix_destination_compound_results', 0, 20, npl_ip_prefix_destination_compound_results_t, value)

class npl_ip_prefix_destination_compound_table_value_t(basic_npl_struct):
    def __init__(self, ip_prefix_destination_compound_results=0):
        super().__init__(28)
        self.payloads.ip_prefix_destination_compound_results = ip_prefix_destination_compound_results

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_prefix_destination_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_prefix_destination_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_ip_prefix_destination_compound_table_payloads_t, value)



# API-s for table: ip_prefix_destination_table

NPL_IP_PREFIX_DESTINATION_TABLE_ACTION_WRITE = 0x0

class npl_ip_prefix_destination_table_key_t(basic_npl_struct):
    def __init__(self, ip_prefix_ptr=0):
        super().__init__(17)
        self.ip_prefix_ptr = ip_prefix_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_prefix_destination_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_prefix_ptr(self):
        return self._get_field_value(0, 17)
    @ip_prefix_ptr.setter
    def ip_prefix_ptr(self, value):
        self._set_field_value('field ip_prefix_ptr', 0, 17, int, value)

class npl_ip_prefix_destination_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_prefix_destination_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def prefix_destination(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @prefix_destination.setter
    def prefix_destination(self, value):
        self._set_field_value('field prefix_destination', 0, 20, npl_destination_t, value)

class npl_ip_prefix_destination_table_value_t(basic_npl_struct):
    def __init__(self, prefix_destination=0):
        super().__init__(28)
        self.payloads.prefix_destination = prefix_destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_prefix_destination_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_prefix_destination_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_ip_prefix_destination_table_payloads_t, value)



# API-s for table: ip_relay_egress_qos_key_pack_table

NPL_IP_RELAY_EGRESS_QOS_KEY_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ip_relay_egress_qos_key_pack_table_key_option_ip_qos_tag_select_fwd_qos_tag_t(basic_npl_struct):
    def __init__(self, tx_npu_header_fwd_qos_tag_5_0_=0):
        super().__init__(28)
        self.tx_npu_header_fwd_qos_tag_5_0_ = tx_npu_header_fwd_qos_tag_5_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_egress_qos_key_pack_table_key_option_ip_qos_tag_select_fwd_qos_tag_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_20h7efff_exact_0x7efff(self):
        return self._get_field_value(0, 20)
    @property
    def tx_npu_header_fwd_qos_tag_5_0_(self):
        return self._get_field_value(20, 6)
    @tx_npu_header_fwd_qos_tag_5_0_.setter
    def tx_npu_header_fwd_qos_tag_5_0_(self, value):
        self._set_field_value('field tx_npu_header_fwd_qos_tag_5_0_', 20, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(26, 2)



class npl_ip_relay_egress_qos_key_pack_table_key_option_ip_qos_tag_select_qos_group_t(basic_npl_struct):
    def __init__(self, tx_npu_header_qos_group_4_0_=0):
        super().__init__(28)
        self.tx_npu_header_qos_group_4_0_ = tx_npu_header_qos_group_4_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_egress_qos_key_pack_table_key_option_ip_qos_tag_select_qos_group_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_20h7efff_exact_0x7efff(self):
        return self._get_field_value(0, 20)
    @property
    def tx_npu_header_qos_group_4_0_(self):
        return self._get_field_value(20, 5)
    @tx_npu_header_qos_group_4_0_.setter
    def tx_npu_header_qos_group_4_0_(self, value):
        self._set_field_value('field tx_npu_header_qos_group_4_0_', 20, 5, int, value)
    @property
    def const2_3b0_exact_0x0(self):
        return self._get_field_value(25, 3)




class ip_relay_egress_qos_key_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ip_relay_egress_qos_key_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG(self):
        return npl_ip_relay_egress_qos_key_pack_table_key_option_ip_qos_tag_select_fwd_qos_tag_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG.setter
    def NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG(self, value):
        self._set_field_value('field NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG', 0, 28, npl_ip_relay_egress_qos_key_pack_table_key_option_ip_qos_tag_select_fwd_qos_tag_t, value)
    @property
    def NPL_IP_QOS_TAG_SELECT_QOS_GROUP(self):
        return npl_ip_relay_egress_qos_key_pack_table_key_option_ip_qos_tag_select_qos_group_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_QOS_TAG_SELECT_QOS_GROUP.setter
    def NPL_IP_QOS_TAG_SELECT_QOS_GROUP(self, value):
        self._set_field_value('field NPL_IP_QOS_TAG_SELECT_QOS_GROUP', 0, 28, npl_ip_relay_egress_qos_key_pack_table_key_option_ip_qos_tag_select_qos_group_t, value)

class npl_ip_relay_egress_qos_key_pack_table_key_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_local_is_group_qos=0):
        super().__init__(28)
        self.l3_tx_local_vars_local_is_group_qos = l3_tx_local_vars_local_is_group_qos

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_egress_qos_key_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _l3_tx_local_vars_local_is_group_qos = 0
    @property
    def l3_tx_local_vars_local_is_group_qos(self):
        return self._l3_tx_local_vars_local_is_group_qos
    @l3_tx_local_vars_local_is_group_qos.setter
    def l3_tx_local_vars_local_is_group_qos(self, value):
        self._l3_tx_local_vars_local_is_group_qos = value
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG:
            self._set_field_value('const field', 0, 20, int, 0x7efff)
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG:
            self._set_field_value('const field', 26, 2, int, 0x0)
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_QOS_GROUP:
            self._set_field_value('const field', 0, 20, int, 0x7efff)
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_QOS_GROUP:
            self._set_field_value('const field', 25, 3, int, 0x0)

    @property
    def options(self):
        return ip_relay_egress_qos_key_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 28 - 0, ip_relay_egress_qos_key_pack_table_key_options_t, value)

class npl_ip_relay_egress_qos_key_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_egress_qos_key_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def encap_local_vars_qos_packed_payload(self):
        return npl_ip_relay_egress_qos_key_pack_table_load_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @encap_local_vars_qos_packed_payload.setter
    def encap_local_vars_qos_packed_payload(self, value):
        self._set_field_value('field encap_local_vars_qos_packed_payload', 0, 44, npl_ip_relay_egress_qos_key_pack_table_load_t, value)

class npl_ip_relay_egress_qos_key_pack_table_value_t(basic_npl_struct):
    def __init__(self, encap_local_vars_qos_packed_payload=0):
        super().__init__(52)
        self.payloads.encap_local_vars_qos_packed_payload = encap_local_vars_qos_packed_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_egress_qos_key_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_relay_egress_qos_key_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_ip_relay_egress_qos_key_pack_table_payloads_t, value)



# API-s for table: ip_relay_to_vni_table

NPL_IP_RELAY_TO_VNI_TABLE_ACTION_WRITE = 0x0

class npl_ip_relay_to_vni_table_key_t(basic_npl_struct):
    def __init__(self, l3_relay_id=0, overlay_nh=0):
        super().__init__(21)
        self.l3_relay_id = l3_relay_id
        self.overlay_nh = overlay_nh

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_to_vni_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 0, 11, npl_l3_relay_id_t, value)
    @property
    def overlay_nh(self):
        return self._get_field_value(11, 10)
    @overlay_nh.setter
    def overlay_nh(self, value):
        self._set_field_value('field overlay_nh', 11, 10, int, value)

class npl_ip_relay_to_vni_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(112)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_to_vni_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_vxlan_relay_encap_data(self):
        return npl_l3_vxlan_relay_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l3_vxlan_relay_encap_data.setter
    def l3_vxlan_relay_encap_data(self, value):
        self._set_field_value('field l3_vxlan_relay_encap_data', 0, 112, npl_l3_vxlan_relay_encap_data_t, value)

class npl_ip_relay_to_vni_table_value_t(basic_npl_struct):
    def __init__(self, l3_vxlan_relay_encap_data=0):
        super().__init__(120)
        self.payloads.l3_vxlan_relay_encap_data = l3_vxlan_relay_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_to_vni_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(112, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 112, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_relay_to_vni_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 112, npl_ip_relay_to_vni_table_payloads_t, value)



# API-s for table: ip_relay_to_vni_table_compound

NPL_IP_RELAY_TO_VNI_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_ip_relay_to_vni_table_compound_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_fwd_relay_id_l3_relay_id=0, tx_npu_header_encap_l3_vxlan_overlay_nh_9_0_=0):
        super().__init__(27)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0xb)
        self.tx_npu_header_fwd_relay_id_l3_relay_id = tx_npu_header_fwd_relay_id_l3_relay_id
        self.tx_npu_header_encap_l3_vxlan_overlay_nh_9_0_ = tx_npu_header_encap_l3_vxlan_overlay_nh_9_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_to_vni_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_VXLAN_L3_VNI_TABLE_LDB_exact_0xb(self):
        return self._get_field_value(2, 4)
    @property
    def tx_npu_header_fwd_relay_id_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 6)
    @tx_npu_header_fwd_relay_id_l3_relay_id.setter
    def tx_npu_header_fwd_relay_id_l3_relay_id(self, value):
        self._set_field_value('field tx_npu_header_fwd_relay_id_l3_relay_id', 6, 11, npl_l3_relay_id_t, value)
    @property
    def tx_npu_header_encap_l3_vxlan_overlay_nh_9_0_(self):
        return self._get_field_value(17, 10)
    @tx_npu_header_encap_l3_vxlan_overlay_nh_9_0_.setter
    def tx_npu_header_encap_l3_vxlan_overlay_nh_9_0_(self, value):
        self._set_field_value('field tx_npu_header_encap_l3_vxlan_overlay_nh_9_0_', 17, 10, int, value)

class npl_ip_relay_to_vni_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(112)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_to_vni_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_vxlan_relay_encap_data(self):
        return npl_l3_vxlan_relay_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l3_vxlan_relay_encap_data.setter
    def l3_vxlan_relay_encap_data(self, value):
        self._set_field_value('field l3_vxlan_relay_encap_data', 0, 112, npl_l3_vxlan_relay_encap_data_t, value)

class npl_ip_relay_to_vni_table_compound_value_t(basic_npl_struct):
    def __init__(self, l3_vxlan_relay_encap_data=0):
        super().__init__(120)
        self.payloads.l3_vxlan_relay_encap_data = l3_vxlan_relay_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_relay_to_vni_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(112, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 112, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_relay_to_vni_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 112, npl_ip_relay_to_vni_table_compound_payloads_t, value)



# API-s for table: ip_rx_global_counter_table

NPL_IP_RX_GLOBAL_COUNTER_TABLE_ACTION_WRITE = 0x0

class npl_ip_rx_global_counter_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_rx_global_counter_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_ip_rx_global_counter_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_rx_global_counter_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def global_counter(self):
        return npl_ip_rx_global_counter_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @global_counter.setter
    def global_counter(self, value):
        self._set_field_value('field global_counter', 0, 20, npl_ip_rx_global_counter_t, value)

class npl_ip_rx_global_counter_table_value_t(basic_npl_struct):
    def __init__(self, global_counter=0):
        super().__init__(28)
        self.payloads.global_counter = global_counter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_rx_global_counter_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_rx_global_counter_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_ip_rx_global_counter_table_payloads_t, value)



# API-s for table: ip_ver_mc_static_table

NPL_IP_VER_MC_STATIC_TABLE_ACTION_SET_VALUE = 0x0

class npl_ip_ver_mc_static_table_set_value_payload_t(basic_npl_struct):
    def __init__(self, v4_offset_zero=0, ip_ver_mc=0):
        super().__init__(3)
        self.v4_offset_zero = v4_offset_zero
        self.ip_ver_mc = ip_ver_mc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_ver_mc_static_table_set_value_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def v4_offset_zero(self):
        return self._get_field_value(2, 1)
    @v4_offset_zero.setter
    def v4_offset_zero(self, value):
        self._set_field_value('field v4_offset_zero', 2, 1, int, value)
    @property
    def ip_ver_mc(self):
        return npl_ip_ver_mc_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_ver_mc.setter
    def ip_ver_mc(self, value):
        self._set_field_value('field ip_ver_mc', 0, 2, npl_ip_ver_mc_t, value)




class npl_ip_ver_mc_static_table_key_t(basic_npl_struct):
    def __init__(self, v4_frag_offset=0, v4_sip_31_28=0, v6_sip_127_120=0, is_v6=0):
        super().__init__(26)
        self.v4_frag_offset = v4_frag_offset
        self.v4_sip_31_28 = v4_sip_31_28
        self.v6_sip_127_120 = v6_sip_127_120
        self.is_v6 = is_v6

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_ver_mc_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def v4_frag_offset(self):
        return self._get_field_value(0, 13)
    @v4_frag_offset.setter
    def v4_frag_offset(self, value):
        self._set_field_value('field v4_frag_offset', 0, 13, int, value)
    @property
    def v4_sip_31_28(self):
        return self._get_field_value(13, 4)
    @v4_sip_31_28.setter
    def v4_sip_31_28(self, value):
        self._set_field_value('field v4_sip_31_28', 13, 4, int, value)
    @property
    def v6_sip_127_120(self):
        return self._get_field_value(17, 8)
    @v6_sip_127_120.setter
    def v6_sip_127_120(self, value):
        self._set_field_value('field v6_sip_127_120', 17, 8, int, value)
    @property
    def is_v6(self):
        return self._get_field_value(25, 1)
    @is_v6.setter
    def is_v6(self, value):
        self._set_field_value('field is_v6', 25, 1, int, value)

class npl_ip_ver_mc_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_ver_mc_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_value(self):
        return npl_ip_ver_mc_static_table_set_value_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_value.setter
    def set_value(self, value):
        self._set_field_value('field set_value', 0, 3, npl_ip_ver_mc_static_table_set_value_payload_t, value)

class npl_ip_ver_mc_static_table_value_t(basic_npl_struct):
    def __init__(self, v4_offset_zero=0, ip_ver_mc=0):
        super().__init__(11)
        self.payloads.set_value = npl_ip_ver_mc_static_table_set_value_payload_t(v4_offset_zero, ip_ver_mc)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_ver_mc_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_ver_mc_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_ip_ver_mc_static_table_payloads_t, value)



# API-s for table: ip_vrf_dip_compound_table

NPL_IP_VRF_DIP_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ip_vrf_dip_compound_table_key_option_ip_version_ipv4_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_dip_19_0__0=0, packet_ipv4_header_dip_31_20_=0, ip_rx_local_vars_l3_relay_id=0, packet_ipv4_header_dip_19_0__1=0):
        super().__init__(82)
        self.packet_ipv4_header_dip_19_0__0 = packet_ipv4_header_dip_19_0__0
        self.packet_ipv4_header_dip_31_20_ = packet_ipv4_header_dip_31_20_
        self.ip_rx_local_vars_l3_relay_id = ip_rx_local_vars_l3_relay_id
        self.packet_ipv4_header_dip_19_0__1 = packet_ipv4_header_dip_19_0__1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_vrf_dip_compound_table_key_option_ip_version_ipv4_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b11_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_EM_LDB_IPV4_VRF_DIP_exact_0x0(self):
        return self._get_field_value(2, 2)
    @property
    def packet_ipv4_header_dip_19_0__0(self):
        return self._get_field_value(4, 20)
    @packet_ipv4_header_dip_19_0__0.setter
    def packet_ipv4_header_dip_19_0__0(self, value):
        self._set_field_value('field packet_ipv4_header_dip_19_0__0', 4, 20, int, value)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(24, 1)
    @property
    def packet_ipv4_header_dip_31_20_(self):
        return self._get_field_value(25, 12)
    @packet_ipv4_header_dip_31_20_.setter
    def packet_ipv4_header_dip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_dip_31_20_', 25, 12, int, value)
    @property
    def ip_rx_local_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 37)
    @ip_rx_local_vars_l3_relay_id.setter
    def ip_rx_local_vars_l3_relay_id(self, value):
        self._set_field_value('field ip_rx_local_vars_l3_relay_id', 37, 11, npl_l3_relay_id_t, value)
    @property
    def packet_ipv4_header_dip_19_0__1(self):
        return self._get_field_value(48, 20)
    @packet_ipv4_header_dip_19_0__1.setter
    def packet_ipv4_header_dip_19_0__1(self, value):
        self._set_field_value('field packet_ipv4_header_dip_19_0__1', 48, 20, int, value)
    @property
    def const4_14h3ffc_exact_0x3ffc(self):
        return self._get_field_value(68, 14)



class npl_ip_vrf_dip_compound_table_key_option_ip_version_ipv6_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dip_111_0_=0, packet_ipv6_header_dip_127_112_=0, ip_rx_local_vars_l3_relay_id=0):
        super().__init__(144)
        self.packet_ipv6_header_dip_111_0_ = packet_ipv6_header_dip_111_0_
        self.packet_ipv6_header_dip_127_112_ = packet_ipv6_header_dip_127_112_
        self.ip_rx_local_vars_l3_relay_id = ip_rx_local_vars_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_vrf_dip_compound_table_key_option_ip_version_ipv6_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b11_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_EM_LDB_IPV6_VRF_DIP_exact_0x3(self):
        return self._get_field_value(2, 2)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(4, 1)
    @property
    def packet_ipv6_header_dip_111_0_(self):
        return self._get_field_value(5, 112)
    @packet_ipv6_header_dip_111_0_.setter
    def packet_ipv6_header_dip_111_0_(self, value):
        self._set_field_value('field packet_ipv6_header_dip_111_0_', 5, 112, int, value)
    @property
    def packet_ipv6_header_dip_127_112_(self):
        return self._get_field_value(117, 16)
    @packet_ipv6_header_dip_127_112_.setter
    def packet_ipv6_header_dip_127_112_(self, value):
        self._set_field_value('field packet_ipv6_header_dip_127_112_', 117, 16, int, value)
    @property
    def ip_rx_local_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 133)
    @ip_rx_local_vars_l3_relay_id.setter
    def ip_rx_local_vars_l3_relay_id(self, value):
        self._set_field_value('field ip_rx_local_vars_l3_relay_id', 133, 11, npl_l3_relay_id_t, value)




class ip_vrf_dip_compound_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(144 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ip_vrf_dip_compound_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_IP_VERSION_IPV4(self):
        return npl_ip_vrf_dip_compound_table_key_option_ip_version_ipv4_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV4.setter
    def NPL_IP_VERSION_IPV4(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV4', 0, 82, npl_ip_vrf_dip_compound_table_key_option_ip_version_ipv4_t, value)
    @property
    def NPL_IP_VERSION_IPV6(self):
        return npl_ip_vrf_dip_compound_table_key_option_ip_version_ipv6_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV6.setter
    def NPL_IP_VERSION_IPV6(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV6', 0, 144, npl_ip_vrf_dip_compound_table_key_option_ip_version_ipv6_t, value)

class npl_ip_vrf_dip_compound_table_key_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_ip_version=0):
        super().__init__(144)
        self.ip_rx_local_vars_ip_version = ip_rx_local_vars_ip_version

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_vrf_dip_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _ip_rx_local_vars_ip_version = 0
    @property
    def ip_rx_local_vars_ip_version(self):
        return self._ip_rx_local_vars_ip_version
    @ip_rx_local_vars_ip_version.setter
    def ip_rx_local_vars_ip_version(self, value):
        self._ip_rx_local_vars_ip_version = value
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 0, 2, int, 0x3)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 2, 2, int, 0x0)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 24, 1, int, 0x0)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 68, 14, int, 0x3ffc)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 0, 2, int, 0x3)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 2, 2, int, 0x3)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 4, 1, int, 0x0)

    @property
    def options(self):
        return ip_vrf_dip_compound_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 144 - 0, ip_vrf_dip_compound_table_key_options_t, value)

class npl_ip_vrf_dip_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(88)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_vrf_dip_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_em_lpm_result(self):
        return npl_ip_em_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_em_lpm_result.setter
    def ip_em_lpm_result(self, value):
        self._set_field_value('field ip_em_lpm_result', 0, 88, npl_ip_em_lpm_result_t, value)

class npl_ip_vrf_dip_compound_table_value_t(basic_npl_struct):
    def __init__(self, ip_em_lpm_result=0):
        super().__init__(96)
        self.payloads.ip_em_lpm_result = ip_em_lpm_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_vrf_dip_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(88, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 88, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_vrf_dip_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 88, npl_ip_vrf_dip_compound_table_payloads_t, value)



# API-s for table: ip_vrf_s_g_table_compound

NPL_IP_VRF_S_G_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_ip_vrf_s_g_table_compound_key_option_ip_version_ipv4_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_dip_27_20_=0, packet_ipv4_header_sip_19_0_=0, packet_ipv4_header_sip_31_20_=0, packet_ipv4_header_dip_19_0_=0, pd_layer_vars_l3_relay_id=0):
        super().__init__(76)
        self.packet_ipv4_header_dip_27_20_ = packet_ipv4_header_dip_27_20_
        self.packet_ipv4_header_sip_19_0_ = packet_ipv4_header_sip_19_0_
        self.packet_ipv4_header_sip_31_20_ = packet_ipv4_header_sip_31_20_
        self.packet_ipv4_header_dip_19_0_ = packet_ipv4_header_dip_19_0_
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_vrf_s_g_table_compound_key_option_ip_version_ipv4_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_CENTRAL_EM_LDB_IPV4_VRF_S_G_exact_0xd(self):
        return self._get_field_value(0, 5)
    @property
    def packet_ipv4_header_dip_27_20_(self):
        return self._get_field_value(5, 8)
    @packet_ipv4_header_dip_27_20_.setter
    def packet_ipv4_header_dip_27_20_(self, value):
        self._set_field_value('field packet_ipv4_header_dip_27_20_', 5, 8, int, value)
    @property
    def packet_ipv4_header_sip_19_0_(self):
        return self._get_field_value(13, 20)
    @packet_ipv4_header_sip_19_0_.setter
    def packet_ipv4_header_sip_19_0_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_19_0_', 13, 20, int, value)
    @property
    def packet_ipv4_header_sip_31_20_(self):
        return self._get_field_value(33, 12)
    @packet_ipv4_header_sip_31_20_.setter
    def packet_ipv4_header_sip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_31_20_', 33, 12, int, value)
    @property
    def packet_ipv4_header_dip_19_0_(self):
        return self._get_field_value(45, 20)
    @packet_ipv4_header_dip_19_0_.setter
    def packet_ipv4_header_dip_19_0_(self, value):
        self._set_field_value('field packet_ipv4_header_dip_19_0_', 45, 20, int, value)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 65)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 65, 11, npl_l3_relay_id_t, value)



class npl_ip_vrf_s_g_table_compound_key_option_ip_version_ipv6_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dip_31_0_=0, pd_compressed_sip=0, pd_layer_vars_l3_relay_id=0):
        super().__init__(65)
        self.packet_ipv6_header_dip_31_0_ = packet_ipv6_header_dip_31_0_
        self.pd_compressed_sip = pd_compressed_sip
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_vrf_s_g_table_compound_key_option_ip_version_ipv6_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_CENTRAL_EM_LDB_IPV6_VRF_S_G_exact_0x3d(self):
        return self._get_field_value(0, 6)
    @property
    def packet_ipv6_header_dip_31_0_(self):
        return self._get_field_value(6, 32)
    @packet_ipv6_header_dip_31_0_.setter
    def packet_ipv6_header_dip_31_0_(self, value):
        self._set_field_value('field packet_ipv6_header_dip_31_0_', 6, 32, int, value)
    @property
    def pd_compressed_sip(self):
        return self._get_field_value(38, 16)
    @pd_compressed_sip.setter
    def pd_compressed_sip(self, value):
        self._set_field_value('field pd_compressed_sip', 38, 16, int, value)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 54)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 54, 11, npl_l3_relay_id_t, value)




class ip_vrf_s_g_table_compound_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(76 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ip_vrf_s_g_table_compound_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_IP_VERSION_IPV4(self):
        return npl_ip_vrf_s_g_table_compound_key_option_ip_version_ipv4_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV4.setter
    def NPL_IP_VERSION_IPV4(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV4', 0, 76, npl_ip_vrf_s_g_table_compound_key_option_ip_version_ipv4_t, value)
    @property
    def NPL_IP_VERSION_IPV6(self):
        return npl_ip_vrf_s_g_table_compound_key_option_ip_version_ipv6_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV6.setter
    def NPL_IP_VERSION_IPV6(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV6', 0, 65, npl_ip_vrf_s_g_table_compound_key_option_ip_version_ipv6_t, value)

class npl_ip_vrf_s_g_table_compound_key_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_ip_version=0):
        super().__init__(76)
        self.ip_rx_local_vars_ip_version = ip_rx_local_vars_ip_version

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_vrf_s_g_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _ip_rx_local_vars_ip_version = 0
    @property
    def ip_rx_local_vars_ip_version(self):
        return self._ip_rx_local_vars_ip_version
    @ip_rx_local_vars_ip_version.setter
    def ip_rx_local_vars_ip_version(self, value):
        self._ip_rx_local_vars_ip_version = value
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 0, 5, int, 0xd)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 0, 6, int, 0x3d)

    @property
    def options(self):
        return ip_vrf_s_g_table_compound_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 76 - 0, ip_vrf_s_g_table_compound_key_options_t, value)

class npl_ip_vrf_s_g_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_vrf_s_g_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vrf_s_g_result_ip_mc_result(self):
        return npl_raw_ip_mc_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vrf_s_g_result_ip_mc_result.setter
    def vrf_s_g_result_ip_mc_result(self, value):
        self._set_field_value('field vrf_s_g_result_ip_mc_result', 0, 64, npl_raw_ip_mc_result_t, value)

class npl_ip_vrf_s_g_table_compound_value_t(basic_npl_struct):
    def __init__(self, vrf_s_g_result_ip_mc_result=0):
        super().__init__(72)
        self.payloads.vrf_s_g_result_ip_mc_result = vrf_s_g_result_ip_mc_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ip_vrf_s_g_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ip_vrf_s_g_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ip_vrf_s_g_table_compound_payloads_t, value)



# API-s for table: ipv4_acl_map_protocol_type_to_protocol_number_table

NPL_IPV4_ACL_MAP_PROTOCOL_TYPE_TO_PROTOCOL_NUMBER_TABLE_ACTION_UPDATE = 0x0

class npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t(basic_npl_struct):
    def __init__(self, dummy_bits=0, is_valid=0, acl_l4_protocol=0, protocol_type=0):
        super().__init__(16)
        self.dummy_bits = dummy_bits
        self.is_valid = is_valid
        self.acl_l4_protocol = acl_l4_protocol
        self.protocol_type = protocol_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def dummy_bits(self):
        return self._get_field_value(11, 5)
    @dummy_bits.setter
    def dummy_bits(self, value):
        self._set_field_value('field dummy_bits', 11, 5, int, value)
    @property
    def is_valid(self):
        return self._get_field_value(10, 1)
    @is_valid.setter
    def is_valid(self, value):
        self._set_field_value('field is_valid', 10, 1, int, value)
    @property
    def acl_l4_protocol(self):
        return self._get_field_value(8, 2)
    @acl_l4_protocol.setter
    def acl_l4_protocol(self, value):
        self._set_field_value('field acl_l4_protocol', 8, 2, int, value)
    @property
    def protocol_type(self):
        return self._get_field_value(0, 8)
    @protocol_type.setter
    def protocol_type(self, value):
        self._set_field_value('field protocol_type', 0, 8, int, value)




class npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t(basic_npl_struct):
    def __init__(self, protocol=0):
        super().__init__(8)
        self.protocol = protocol

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def protocol(self):
        return self._get_field_value(0, 8)
    @protocol.setter
    def protocol(self, value):
        self._set_field_value('field protocol', 0, 8, int, value)

class npl_ipv4_acl_map_protocol_type_to_protocol_number_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_acl_map_protocol_type_to_protocol_number_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update(self):
        return npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update.setter
    def update(self, value):
        self._set_field_value('field update', 0, 16, npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t, value)

class npl_ipv4_acl_map_protocol_type_to_protocol_number_table_value_t(basic_npl_struct):
    def __init__(self, dummy_bits=0, is_valid=0, acl_l4_protocol=0, protocol_type=0):
        super().__init__(24)
        self.payloads.update = npl_ipv4_acl_map_protocol_type_to_protocol_number_table_update_payload_t(dummy_bits, is_valid, acl_l4_protocol, protocol_type)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_acl_map_protocol_type_to_protocol_number_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_acl_map_protocol_type_to_protocol_number_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_ipv4_acl_map_protocol_type_to_protocol_number_table_payloads_t, value)



# API-s for table: ipv4_acl_sport_static_table

NPL_IPV4_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_MAPPED_PROTO_TYPE = 0x0
NPL_IPV4_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_PACKET = 0x1
NPL_IPV4_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_PACKET_PROTO_TYPE = 0x2

class npl_ipv4_acl_sport_static_table_key_t(basic_npl_struct):
    def __init__(self, acl_l4_protocol=0, acl_is_valid=0):
        super().__init__(3)
        self.acl_l4_protocol = acl_l4_protocol
        self.acl_is_valid = acl_is_valid

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_acl_sport_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def acl_l4_protocol(self):
        return self._get_field_value(0, 2)
    @acl_l4_protocol.setter
    def acl_l4_protocol(self, value):
        self._set_field_value('field acl_l4_protocol', 0, 2, int, value)
    @property
    def acl_is_valid(self):
        return self._get_field_value(2, 1)
    @acl_is_valid.setter
    def acl_is_valid(self, value):
        self._set_field_value('field acl_is_valid', 2, 1, int, value)

class npl_ipv4_acl_sport_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_acl_sport_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_ipv4_acl_sport_static_table_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(8)
        self.action = action

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_acl_sport_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_acl_sport_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_ipv4_acl_sport_static_table_payloads_t, value)



# API-s for table: ipv4_ip_tunnel_termination_compound_table

NPL_IPV4_IP_TUNNEL_TERMINATION_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_ip_tunnel_termination_compound_table_key_option_termination_dip_index_ldb_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_tunnel_type=0, ip_rx_local_vars_my_dip_index=0, pd_layer_vars_lp_attributes_l3_l3_relay_id=0):
        super().__init__(25)
        self.ip_rx_local_vars_tunnel_type = ip_rx_local_vars_tunnel_type
        self.ip_rx_local_vars_my_dip_index = ip_rx_local_vars_my_dip_index
        self.pd_layer_vars_lp_attributes_l3_l3_relay_id = pd_layer_vars_lp_attributes_l3_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_compound_table_key_option_termination_dip_index_ldb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_TUNNEL_TERMINATION_DIP_INDEX_LDB_exact_0x2(self):
        return self._get_field_value(0, 4)
    @property
    def ip_rx_local_vars_tunnel_type(self):
        return self._get_field_value(4, 4)
    @ip_rx_local_vars_tunnel_type.setter
    def ip_rx_local_vars_tunnel_type(self, value):
        self._set_field_value('field ip_rx_local_vars_tunnel_type', 4, 4, int, value)
    @property
    def ip_rx_local_vars_my_dip_index(self):
        return self._get_field_value(8, 6)
    @ip_rx_local_vars_my_dip_index.setter
    def ip_rx_local_vars_my_dip_index(self, value):
        self._set_field_value('field ip_rx_local_vars_my_dip_index', 8, 6, int, value)
    @property
    def pd_layer_vars_lp_attributes_l3_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @pd_layer_vars_lp_attributes_l3_l3_relay_id.setter
    def pd_layer_vars_lp_attributes_l3_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_lp_attributes_l3_l3_relay_id', 14, 11, npl_l3_relay_id_t, value)



class npl_ipv4_ip_tunnel_termination_compound_table_key_option_termination_sip_dip_index_ldb_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_tunnel_type=0, ip_rx_local_vars_my_dip_index=0, packet_ipv4_header_sip=0, pd_layer_vars_lp_attributes_l3_l3_relay_id=0):
        super().__init__(57)
        self.ip_rx_local_vars_tunnel_type = ip_rx_local_vars_tunnel_type
        self.ip_rx_local_vars_my_dip_index = ip_rx_local_vars_my_dip_index
        self.packet_ipv4_header_sip = packet_ipv4_header_sip
        self.pd_layer_vars_lp_attributes_l3_l3_relay_id = pd_layer_vars_lp_attributes_l3_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_compound_table_key_option_termination_sip_dip_index_ldb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_TUNNEL_TERMINATION_SIP_DIP_INDEX_LDB_exact_0x0(self):
        return self._get_field_value(0, 4)
    @property
    def ip_rx_local_vars_tunnel_type(self):
        return self._get_field_value(4, 4)
    @ip_rx_local_vars_tunnel_type.setter
    def ip_rx_local_vars_tunnel_type(self, value):
        self._set_field_value('field ip_rx_local_vars_tunnel_type', 4, 4, int, value)
    @property
    def ip_rx_local_vars_my_dip_index(self):
        return self._get_field_value(8, 6)
    @ip_rx_local_vars_my_dip_index.setter
    def ip_rx_local_vars_my_dip_index(self, value):
        self._set_field_value('field ip_rx_local_vars_my_dip_index', 8, 6, int, value)
    @property
    def packet_ipv4_header_sip(self):
        return self._get_field_value(14, 32)
    @packet_ipv4_header_sip.setter
    def packet_ipv4_header_sip(self, value):
        self._set_field_value('field packet_ipv4_header_sip', 14, 32, int, value)
    @property
    def pd_layer_vars_lp_attributes_l3_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 46)
    @pd_layer_vars_lp_attributes_l3_l3_relay_id.setter
    def pd_layer_vars_lp_attributes_l3_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_lp_attributes_l3_l3_relay_id', 46, 11, npl_l3_relay_id_t, value)




class ipv4_ip_tunnel_termination_compound_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(57 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ipv4_ip_tunnel_termination_compound_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_TERMINATION_DIP_INDEX_LDB(self):
        return npl_ipv4_ip_tunnel_termination_compound_table_key_option_termination_dip_index_ldb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TERMINATION_DIP_INDEX_LDB.setter
    def NPL_TERMINATION_DIP_INDEX_LDB(self, value):
        self._set_field_value('field NPL_TERMINATION_DIP_INDEX_LDB', 0, 25, npl_ipv4_ip_tunnel_termination_compound_table_key_option_termination_dip_index_ldb_t, value)
    @property
    def NPL_TERMINATION_SIP_DIP_INDEX_LDB(self):
        return npl_ipv4_ip_tunnel_termination_compound_table_key_option_termination_sip_dip_index_ldb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TERMINATION_SIP_DIP_INDEX_LDB.setter
    def NPL_TERMINATION_SIP_DIP_INDEX_LDB(self, value):
        self._set_field_value('field NPL_TERMINATION_SIP_DIP_INDEX_LDB', 0, 57, npl_ipv4_ip_tunnel_termination_compound_table_key_option_termination_sip_dip_index_ldb_t, value)

class npl_ipv4_ip_tunnel_termination_compound_table_key_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_ip_termination_type=0):
        super().__init__(57)
        self.ip_rx_local_vars_ip_termination_type = ip_rx_local_vars_ip_termination_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _ip_rx_local_vars_ip_termination_type = 0
    @property
    def ip_rx_local_vars_ip_termination_type(self):
        return self._ip_rx_local_vars_ip_termination_type
    @ip_rx_local_vars_ip_termination_type.setter
    def ip_rx_local_vars_ip_termination_type(self, value):
        self._ip_rx_local_vars_ip_termination_type = value
        if ip_rx_local_vars_ip_termination_type == NPL_TERMINATION_DIP_INDEX_LDB:
            self._set_field_value('const field', 0, 4, int, 0x2)
        if ip_rx_local_vars_ip_termination_type == NPL_TERMINATION_SIP_DIP_INDEX_LDB:
            self._set_field_value('const field', 0, 4, int, 0x0)

    @property
    def options(self):
        return ipv4_ip_tunnel_termination_compound_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 57 - 0, ipv4_ip_tunnel_termination_compound_table_key_options_t, value)

class npl_ipv4_ip_tunnel_termination_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(129)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipv4_tunnel_termination_results(self):
        return npl_l3_lp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ipv4_tunnel_termination_results.setter
    def ipv4_tunnel_termination_results(self, value):
        self._set_field_value('field ipv4_tunnel_termination_results', 0, 129, npl_l3_lp_attributes_t, value)

class npl_ipv4_ip_tunnel_termination_compound_table_value_t(basic_npl_struct):
    def __init__(self, ipv4_tunnel_termination_results=0):
        super().__init__(137)
        self.payloads.ipv4_tunnel_termination_results = ipv4_tunnel_termination_results

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(129, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 129, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_ip_tunnel_termination_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 129, npl_ipv4_ip_tunnel_termination_compound_table_payloads_t, value)



# API-s for table: ipv4_ip_tunnel_termination_dip_index_tt0_table

NPL_IPV4_IP_TUNNEL_TERMINATION_DIP_INDEX_TT0_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_key_t(basic_npl_struct):
    def __init__(self, tunnel_type=0, my_dip_index=0, l3_relay_id=0):
        super().__init__(21)
        self.tunnel_type = tunnel_type
        self.my_dip_index = my_dip_index
        self.l3_relay_id = l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tunnel_type(self):
        return self._get_field_value(0, 4)
    @tunnel_type.setter
    def tunnel_type(self, value):
        self._set_field_value('field tunnel_type', 0, 4, int, value)
    @property
    def my_dip_index(self):
        return self._get_field_value(4, 6)
    @my_dip_index.setter
    def my_dip_index(self, value):
        self._set_field_value('field my_dip_index', 4, 6, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 10)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 10, 11, npl_l3_relay_id_t, value)

class npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(129)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def term_tt0_attributes(self):
        return npl_l3_lp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @term_tt0_attributes.setter
    def term_tt0_attributes(self, value):
        self._set_field_value('field term_tt0_attributes', 0, 129, npl_l3_lp_attributes_t, value)

class npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_value_t(basic_npl_struct):
    def __init__(self, term_tt0_attributes=0):
        super().__init__(137)
        self.payloads.term_tt0_attributes = term_tt0_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(129, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 129, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 129, npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_payloads_t, value)



# API-s for table: ipv4_ip_tunnel_termination_sip_dip_index_tt0_table

NPL_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT0_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_key_t(basic_npl_struct):
    def __init__(self, tunnel_type=0, my_dip_index=0, sip=0, l3_relay_id=0):
        super().__init__(53)
        self.tunnel_type = tunnel_type
        self.my_dip_index = my_dip_index
        self.sip = sip
        self.l3_relay_id = l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tunnel_type(self):
        return self._get_field_value(0, 4)
    @tunnel_type.setter
    def tunnel_type(self, value):
        self._set_field_value('field tunnel_type', 0, 4, int, value)
    @property
    def my_dip_index(self):
        return self._get_field_value(4, 6)
    @my_dip_index.setter
    def my_dip_index(self, value):
        self._set_field_value('field my_dip_index', 4, 6, int, value)
    @property
    def sip(self):
        return self._get_field_value(10, 32)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 10, 32, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 42)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 42, 11, npl_l3_relay_id_t, value)

class npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(129)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def term_tt0_attributes(self):
        return npl_l3_lp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @term_tt0_attributes.setter
    def term_tt0_attributes(self, value):
        self._set_field_value('field term_tt0_attributes', 0, 129, npl_l3_lp_attributes_t, value)

class npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_value_t(basic_npl_struct):
    def __init__(self, term_tt0_attributes=0):
        super().__init__(137)
        self.payloads.term_tt0_attributes = term_tt0_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(129, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 129, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 129, npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_payloads_t, value)



# API-s for table: ipv4_ip_tunnel_termination_sip_dip_index_tt1_table

NPL_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT1_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_key_t(basic_npl_struct):
    def __init__(self, tunnel_type=0, my_dip_index=0, sip=0, l3_relay_id=0):
        super().__init__(53)
        self.tunnel_type = tunnel_type
        self.my_dip_index = my_dip_index
        self.sip = sip
        self.l3_relay_id = l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tunnel_type(self):
        return self._get_field_value(0, 4)
    @tunnel_type.setter
    def tunnel_type(self, value):
        self._set_field_value('field tunnel_type', 0, 4, int, value)
    @property
    def my_dip_index(self):
        return self._get_field_value(4, 6)
    @my_dip_index.setter
    def my_dip_index(self, value):
        self._set_field_value('field my_dip_index', 4, 6, int, value)
    @property
    def sip(self):
        return self._get_field_value(10, 32)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 10, 32, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 42)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 42, 11, npl_l3_relay_id_t, value)

class npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(129)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def term_tt1_attributes(self):
        return npl_l3_lp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @term_tt1_attributes.setter
    def term_tt1_attributes(self, value):
        self._set_field_value('field term_tt1_attributes', 0, 129, npl_l3_lp_attributes_t, value)

class npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_value_t(basic_npl_struct):
    def __init__(self, term_tt1_attributes=0):
        super().__init__(137)
        self.payloads.term_tt1_attributes = term_tt1_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(129, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 129, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 129, npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_payloads_t, value)



# API-s for table: ipv4_lpm_table

NPL_IPV4_LPM_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_lpm_table_key_t(basic_npl_struct):
    def __init__(self, ipv4_ip_address_address=0, l3_relay_id=0):
        super().__init__(43)
        self.ipv4_ip_address_address = ipv4_ip_address_address
        self.l3_relay_id = l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpm_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipv4_ip_address_address(self):
        return self._get_field_value(0, 32)
    @ipv4_ip_address_address.setter
    def ipv4_ip_address_address(self, value):
        self._set_field_value('field ipv4_ip_address_address', 0, 32, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 32)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 32, 11, npl_l3_relay_id_t, value)

class npl_ipv4_lpm_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpm_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpm_payload(self):
        return npl_lpm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpm_payload.setter
    def lpm_payload(self, value):
        self._set_field_value('field lpm_payload', 0, 20, npl_lpm_payload_t, value)

class npl_ipv4_lpm_table_value_t(basic_npl_struct):
    def __init__(self, lpm_payload=0):
        super().__init__(28)
        self.payloads.lpm_payload = lpm_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpm_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_lpm_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_ipv4_lpm_table_payloads_t, value)



# API-s for table: ipv4_lpts_f0_compound_table

NPL_IPV4_LPTS_F0_COMPOUND_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT = 0x0

class npl_ipv4_lpts_f0_compound_table_lpts_first_lookup_result_payload_t(basic_npl_struct):
    def __init__(self, lpts_first_result_encap_data_msb=0, punt_encap_data_lsb=0, lpts_cntr_and_second_lookup_index=0):
        super().__init__(64)
        self.lpts_first_result_encap_data_msb = lpts_first_result_encap_data_msb
        self.punt_encap_data_lsb = punt_encap_data_lsb
        self.lpts_cntr_and_second_lookup_index = lpts_cntr_and_second_lookup_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpts_f0_compound_table_lpts_first_lookup_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lpts_first_result_encap_data_msb(self):
        return npl_lpts_tcam_first_result_encap_data_msb_t._get_as_sub_field(self._data, self._offset_in_data + 48)
    @lpts_first_result_encap_data_msb.setter
    def lpts_first_result_encap_data_msb(self, value):
        self._set_field_value('field lpts_first_result_encap_data_msb', 48, 16, npl_lpts_tcam_first_result_encap_data_msb_t, value)
    @property
    def punt_encap_data_lsb(self):
        return npl_punt_encap_data_lsb_t._get_as_sub_field(self._data, self._offset_in_data + 32)
    @punt_encap_data_lsb.setter
    def punt_encap_data_lsb(self, value):
        self._set_field_value('field punt_encap_data_lsb', 32, 16, npl_punt_encap_data_lsb_t, value)
    @property
    def lpts_cntr_and_second_lookup_index(self):
        return npl_lpts_cntr_and_lookup_index_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpts_cntr_and_second_lookup_index.setter
    def lpts_cntr_and_second_lookup_index(self, value):
        self._set_field_value('field lpts_cntr_and_second_lookup_index', 0, 32, npl_lpts_cntr_and_lookup_index_t, value)




class npl_ipv4_lpts_f0_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_sip=0, pd_redirect_stage_vars_ip_length_13_0_=0, packet_header_0__flags_and_offset_13_0_=0, pd_layer_vars_l3_l3_relay_id=0, packet_header_1__l4_ports=0, packet_ipv4_header_protocol=0, pd_redirect_stage_vars_og_key=0, packet_ipv4_header_flags_fragmented=0):
        super().__init__(157)
        self._set_field_value('const field', 0, 4, int, 0xc)
        self._set_field_value('const field', 4, 2, int, 0x2)
        self.packet_ipv4_header_sip = packet_ipv4_header_sip
        self.pd_redirect_stage_vars_ip_length_13_0_ = pd_redirect_stage_vars_ip_length_13_0_
        self.packet_header_0__flags_and_offset_13_0_ = packet_header_0__flags_and_offset_13_0_
        self.pd_layer_vars_l3_l3_relay_id = pd_layer_vars_l3_l3_relay_id
        self.packet_header_1__l4_ports = packet_header_1__l4_ports
        self.packet_ipv4_header_protocol = packet_ipv4_header_protocol
        self.pd_redirect_stage_vars_og_key = pd_redirect_stage_vars_og_key
        self.packet_ipv4_header_flags_fragmented = packet_ipv4_header_flags_fragmented

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpts_f0_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_FWD0_LPTS_TABLE_ID_IPV4_ternary_0xc(self):
        return self._get_field_value(0, 4)
    @property
    def const2_TCAM_LPTS_CONST_TABLE_ID_IPV4_ternary_0x2(self):
        return self._get_field_value(4, 2)
    @property
    def packet_ipv4_header_sip(self):
        return self._get_field_value(6, 32)
    @packet_ipv4_header_sip.setter
    def packet_ipv4_header_sip(self, value):
        self._set_field_value('field packet_ipv4_header_sip', 6, 32, int, value)
    @property
    def pd_redirect_stage_vars_ip_length_13_0_(self):
        return self._get_field_value(38, 14)
    @pd_redirect_stage_vars_ip_length_13_0_.setter
    def pd_redirect_stage_vars_ip_length_13_0_(self, value):
        self._set_field_value('field pd_redirect_stage_vars_ip_length_13_0_', 38, 14, int, value)
    @property
    def packet_header_0__flags_and_offset_13_0_(self):
        return self._get_field_value(52, 14)
    @packet_header_0__flags_and_offset_13_0_.setter
    def packet_header_0__flags_and_offset_13_0_(self, value):
        self._set_field_value('field packet_header_0__flags_and_offset_13_0_', 52, 14, int, value)
    @property
    def pd_layer_vars_l3_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 66)
    @pd_layer_vars_l3_l3_relay_id.setter
    def pd_layer_vars_l3_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_l3_relay_id', 66, 11, npl_l3_relay_id_t, value)
    @property
    def packet_header_1__l4_ports(self):
        return npl_l4_ports_header_t._get_as_sub_field(self._data, self._offset_in_data + 77)
    @packet_header_1__l4_ports.setter
    def packet_header_1__l4_ports(self, value):
        self._set_field_value('field packet_header_1__l4_ports', 77, 32, npl_l4_ports_header_t, value)
    @property
    def packet_ipv4_header_protocol(self):
        return self._get_field_value(109, 8)
    @packet_ipv4_header_protocol.setter
    def packet_ipv4_header_protocol(self, value):
        self._set_field_value('field packet_ipv4_header_protocol', 109, 8, int, value)
    @property
    def pd_redirect_stage_vars_og_key(self):
        return npl_redirect_stage_og_key_t._get_as_sub_field(self._data, self._offset_in_data + 117)
    @pd_redirect_stage_vars_og_key.setter
    def pd_redirect_stage_vars_og_key(self, value):
        self._set_field_value('field pd_redirect_stage_vars_og_key', 117, 39, npl_redirect_stage_og_key_t, value)
    @property
    def packet_ipv4_header_flags_fragmented(self):
        return self._get_field_value(156, 1)
    @packet_ipv4_header_flags_fragmented.setter
    def packet_ipv4_header_flags_fragmented(self, value):
        self._set_field_value('field packet_ipv4_header_flags_fragmented', 156, 1, int, value)

class npl_ipv4_lpts_f0_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpts_f0_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpts_first_lookup_result(self):
        return npl_ipv4_lpts_f0_compound_table_lpts_first_lookup_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpts_first_lookup_result.setter
    def lpts_first_lookup_result(self, value):
        self._set_field_value('field lpts_first_lookup_result', 0, 64, npl_ipv4_lpts_f0_compound_table_lpts_first_lookup_result_payload_t, value)

class npl_ipv4_lpts_f0_compound_table_value_t(basic_npl_struct):
    def __init__(self, lpts_first_result_encap_data_msb=0, punt_encap_data_lsb=0, lpts_cntr_and_second_lookup_index=0):
        super().__init__(72)
        self.payloads.lpts_first_lookup_result = npl_ipv4_lpts_f0_compound_table_lpts_first_lookup_result_payload_t(lpts_first_result_encap_data_msb, punt_encap_data_lsb, lpts_cntr_and_second_lookup_index)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpts_f0_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_lpts_f0_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv4_lpts_f0_compound_table_payloads_t, value)



# API-s for table: ipv4_lpts_table

NPL_IPV4_LPTS_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT = 0x0

class npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t(basic_npl_struct):
    def __init__(self, lpts_first_result_encap_data_msb=0, punt_encap_data_lsb=0, lpts_cntr_and_second_lookup_index=0):
        super().__init__(64)
        self.lpts_first_result_encap_data_msb = lpts_first_result_encap_data_msb
        self.punt_encap_data_lsb = punt_encap_data_lsb
        self.lpts_cntr_and_second_lookup_index = lpts_cntr_and_second_lookup_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lpts_first_result_encap_data_msb(self):
        return npl_lpts_tcam_first_result_encap_data_msb_t._get_as_sub_field(self._data, self._offset_in_data + 48)
    @lpts_first_result_encap_data_msb.setter
    def lpts_first_result_encap_data_msb(self, value):
        self._set_field_value('field lpts_first_result_encap_data_msb', 48, 16, npl_lpts_tcam_first_result_encap_data_msb_t, value)
    @property
    def punt_encap_data_lsb(self):
        return npl_punt_encap_data_lsb_t._get_as_sub_field(self._data, self._offset_in_data + 32)
    @punt_encap_data_lsb.setter
    def punt_encap_data_lsb(self, value):
        self._set_field_value('field punt_encap_data_lsb', 32, 16, npl_punt_encap_data_lsb_t, value)
    @property
    def lpts_cntr_and_second_lookup_index(self):
        return npl_lpts_cntr_and_lookup_index_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpts_cntr_and_second_lookup_index.setter
    def lpts_cntr_and_second_lookup_index(self, value):
        self._set_field_value('field lpts_cntr_and_second_lookup_index', 0, 32, npl_lpts_cntr_and_lookup_index_t, value)




class npl_ipv4_lpts_table_key_t(basic_npl_struct):
    def __init__(self, sip=0, ip_length=0, v4_frag=0, l3_relay_id=0, l4_ports=0, l4_protocol=0, og_codes=0, ttl_255=0, established=0, app_id=0, is_mc=0, fragmented=0):
        super().__init__(153)
        self._set_field_value('const field', 0, 2, int, 0x2)
        self.sip = sip
        self.ip_length = ip_length
        self.v4_frag = v4_frag
        self.l3_relay_id = l3_relay_id
        self.l4_ports = l4_ports
        self.l4_protocol = l4_protocol
        self.og_codes = og_codes
        self.ttl_255 = ttl_255
        self.established = established
        self.app_id = app_id
        self.is_mc = is_mc
        self.fragmented = fragmented

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpts_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_TCAM_LPTS_CONST_TABLE_ID_IPV4_ternary_0x2(self):
        return self._get_field_value(0, 2)
    @property
    def sip(self):
        return self._get_field_value(2, 32)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 2, 32, int, value)
    @property
    def ip_length(self):
        return self._get_field_value(34, 14)
    @ip_length.setter
    def ip_length(self, value):
        self._set_field_value('field ip_length', 34, 14, int, value)
    @property
    def v4_frag(self):
        return self._get_field_value(48, 14)
    @v4_frag.setter
    def v4_frag(self, value):
        self._set_field_value('field v4_frag', 48, 14, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 62)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 62, 11, npl_l3_relay_id_t, value)
    @property
    def l4_ports(self):
        return npl_l4_ports_header_t._get_as_sub_field(self._data, self._offset_in_data + 73)
    @l4_ports.setter
    def l4_ports(self, value):
        self._set_field_value('field l4_ports', 73, 32, npl_l4_ports_header_t, value)
    @property
    def l4_protocol(self):
        return self._get_field_value(105, 8)
    @l4_protocol.setter
    def l4_protocol(self, value):
        self._set_field_value('field l4_protocol', 105, 8, int, value)
    @property
    def og_codes(self):
        return npl_lpts_object_groups_t._get_as_sub_field(self._data, self._offset_in_data + 113)
    @og_codes.setter
    def og_codes(self, value):
        self._set_field_value('field og_codes', 113, 32, npl_lpts_object_groups_t, value)
    @property
    def ttl_255(self):
        return self._get_field_value(145, 1)
    @ttl_255.setter
    def ttl_255(self, value):
        self._set_field_value('field ttl_255', 145, 1, int, value)
    @property
    def established(self):
        return self._get_field_value(146, 1)
    @established.setter
    def established(self, value):
        self._set_field_value('field established', 146, 1, int, value)
    @property
    def app_id(self):
        return self._get_field_value(147, 4)
    @app_id.setter
    def app_id(self, value):
        self._set_field_value('field app_id', 147, 4, int, value)
    @property
    def is_mc(self):
        return self._get_field_value(151, 1)
    @is_mc.setter
    def is_mc(self, value):
        self._set_field_value('field is_mc', 151, 1, int, value)
    @property
    def fragmented(self):
        return self._get_field_value(152, 1)
    @fragmented.setter
    def fragmented(self, value):
        self._set_field_value('field fragmented', 152, 1, int, value)

class npl_ipv4_lpts_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpts_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpts_first_lookup_result(self):
        return npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpts_first_lookup_result.setter
    def lpts_first_lookup_result(self, value):
        self._set_field_value('field lpts_first_lookup_result', 0, 64, npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t, value)

class npl_ipv4_lpts_table_value_t(basic_npl_struct):
    def __init__(self, lpts_first_result_encap_data_msb=0, punt_encap_data_lsb=0, lpts_cntr_and_second_lookup_index=0):
        super().__init__(72)
        self.payloads.lpts_first_lookup_result = npl_ipv4_lpts_table_lpts_first_lookup_result_payload_t(lpts_first_result_encap_data_msb, punt_encap_data_lsb, lpts_cntr_and_second_lookup_index)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_lpts_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_lpts_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv4_lpts_table_payloads_t, value)



# API-s for table: ipv4_mc_da_pack_table

NPL_IPV4_MC_DA_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_mc_da_pack_table_key_option_false_value_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_dip_22_0_=0):
        super().__init__(48)
        self.packet_ipv4_header_dip_22_0_ = packet_ipv4_header_dip_22_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_mc_da_pack_table_key_option_false_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_ipv4_header_dip_22_0_(self):
        return self._get_field_value(0, 23)
    @packet_ipv4_header_dip_22_0_.setter
    def packet_ipv4_header_dip_22_0_(self, value):
        self._set_field_value('field packet_ipv4_header_dip_22_0_', 0, 23, int, value)
    @property
    def const1_25b0000000100000000010111100_exact_0x200bc(self):
        return self._get_field_value(23, 25)



class npl_ipv4_mc_da_pack_table_key_option_true_value_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv4_header_dip_22_0_=0):
        super().__init__(48)
        self.packet_protocol_layer_next__ipv4_header_dip_22_0_ = packet_protocol_layer_next__ipv4_header_dip_22_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_mc_da_pack_table_key_option_true_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_protocol_layer_next__ipv4_header_dip_22_0_(self):
        return self._get_field_value(0, 23)
    @packet_protocol_layer_next__ipv4_header_dip_22_0_.setter
    def packet_protocol_layer_next__ipv4_header_dip_22_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv4_header_dip_22_0_', 0, 23, int, value)
    @property
    def const1_25b0000000100000000010111100_exact_0x200bc(self):
        return self._get_field_value(23, 25)




class ipv4_mc_da_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ipv4_mc_da_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_FALSE_VALUE(self):
        return npl_ipv4_mc_da_pack_table_key_option_false_value_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_FALSE_VALUE.setter
    def NPL_FALSE_VALUE(self, value):
        self._set_field_value('field NPL_FALSE_VALUE', 0, 48, npl_ipv4_mc_da_pack_table_key_option_false_value_t, value)
    @property
    def NPL_TRUE_VALUE(self):
        return npl_ipv4_mc_da_pack_table_key_option_true_value_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TRUE_VALUE.setter
    def NPL_TRUE_VALUE(self, value):
        self._set_field_value('field NPL_TRUE_VALUE', 0, 48, npl_ipv4_mc_da_pack_table_key_option_true_value_t, value)

class npl_ipv4_mc_da_pack_table_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_collapsed_mc=0):
        super().__init__(48)
        self.tx_npu_header_collapsed_mc = tx_npu_header_collapsed_mc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_mc_da_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _tx_npu_header_collapsed_mc = 0
    @property
    def tx_npu_header_collapsed_mc(self):
        return self._tx_npu_header_collapsed_mc
    @tx_npu_header_collapsed_mc.setter
    def tx_npu_header_collapsed_mc(self, value):
        self._tx_npu_header_collapsed_mc = value
        if tx_npu_header_collapsed_mc == NPL_FALSE_VALUE:
            self._set_field_value('const field', 23, 25, int, 0x200bc)
        if tx_npu_header_collapsed_mc == NPL_TRUE_VALUE:
            self._set_field_value('const field', 23, 25, int, 0x200bc)

    @property
    def options(self):
        return ipv4_mc_da_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 48 - 0, ipv4_mc_da_pack_table_key_options_t, value)

class npl_ipv4_mc_da_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_mc_da_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_tx_local_vars_nh_encap_da(self):
        return self._get_field_value(0, 48)
    @l3_tx_local_vars_nh_encap_da.setter
    def l3_tx_local_vars_nh_encap_da(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_encap_da', 0, 48, int, value)

class npl_ipv4_mc_da_pack_table_value_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_encap_da=0):
        super().__init__(56)
        self.payloads.l3_tx_local_vars_nh_encap_da = l3_tx_local_vars_nh_encap_da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_mc_da_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_mc_da_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_ipv4_mc_da_pack_table_payloads_t, value)



# API-s for table: ipv4_og_pcl_em_table

NPL_IPV4_OG_PCL_EM_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_og_pcl_em_table_key_t(basic_npl_struct):
    def __init__(self, ip_address_19_0=0, ip_address_31_20=0, pcl_id=0):
        super().__init__(44)
        self._set_field_value('const field', 20, 1, int, 0x0)
        self._set_field_value('const field', 41, 3, int, 0x7)
        self.ip_address_19_0 = ip_address_19_0
        self.ip_address_31_20 = ip_address_31_20
        self.pcl_id = pcl_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_em_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_address_19_0(self):
        return self._get_field_value(0, 20)
    @ip_address_19_0.setter
    def ip_address_19_0(self, value):
        self._set_field_value('field ip_address_19_0', 0, 20, int, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(20, 1)
    @property
    def ip_address_31_20(self):
        return self._get_field_value(21, 12)
    @ip_address_31_20.setter
    def ip_address_31_20(self, value):
        self._set_field_value('field ip_address_31_20', 21, 12, int, value)
    @property
    def pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 33)
    @pcl_id.setter
    def pcl_id(self, value):
        self._set_field_value('field pcl_id', 33, 8, npl_og_pcl_id_t, value)
    @property
    def const2_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(41, 3)

class npl_ipv4_og_pcl_em_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_em_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def og_em_lookup_result(self):
        return npl_og_em_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @og_em_lookup_result.setter
    def og_em_lookup_result(self, value):
        self._set_field_value('field og_em_lookup_result', 0, 64, npl_og_em_result_t, value)

class npl_ipv4_og_pcl_em_table_value_t(basic_npl_struct):
    def __init__(self, og_em_lookup_result=0):
        super().__init__(72)
        self.payloads.og_em_lookup_result = og_em_lookup_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_em_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_og_pcl_em_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv4_og_pcl_em_table_payloads_t, value)



# API-s for table: ipv4_og_pcl_lpm_table

NPL_IPV4_OG_PCL_LPM_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_og_pcl_lpm_table_key_t(basic_npl_struct):
    def __init__(self, ip_address=0, pcl_id=0):
        super().__init__(43)
        self._set_field_value('const field', 40, 3, int, 0x7)
        self.ip_address = ip_address
        self.pcl_id = pcl_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_lpm_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_address(self):
        return self._get_field_value(0, 32)
    @ip_address.setter
    def ip_address(self, value):
        self._set_field_value('field ip_address', 0, 32, int, value)
    @property
    def pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 32)
    @pcl_id.setter
    def pcl_id(self, value):
        self._set_field_value('field pcl_id', 32, 8, npl_og_pcl_id_t, value)
    @property
    def const1_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(40, 3)

class npl_ipv4_og_pcl_lpm_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_lpm_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpm_code(self):
        return npl_og_lpm_compression_code_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpm_code.setter
    def lpm_code(self, value):
        self._set_field_value('field lpm_code', 0, 20, npl_og_lpm_compression_code_t, value)

class npl_ipv4_og_pcl_lpm_table_value_t(basic_npl_struct):
    def __init__(self, lpm_code=0):
        super().__init__(28)
        self.payloads.lpm_code = lpm_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_lpm_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_og_pcl_lpm_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_ipv4_og_pcl_lpm_table_payloads_t, value)



# API-s for table: ipv4_og_pcl_sip_em_compound_table

NPL_IPV4_OG_PCL_SIP_EM_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_og_pcl_sip_em_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_sip_19_0_=0, packet_ipv4_header_sip_31_20_=0, og_local_vars_og_pcl_configs_src_pcl_id=0):
        super().__init__(46)
        self._set_field_value('const field', 0, 2, int, 0x0)
        self._set_field_value('const field', 22, 1, int, 0x0)
        self._set_field_value('const field', 43, 3, int, 0x7)
        self.packet_ipv4_header_sip_19_0_ = packet_ipv4_header_sip_19_0_
        self.packet_ipv4_header_sip_31_20_ = packet_ipv4_header_sip_31_20_
        self.og_local_vars_og_pcl_configs_src_pcl_id = og_local_vars_og_pcl_configs_src_pcl_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_sip_em_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_EM_LDB_IPV4_VRF_SIP_exact_0x0(self):
        return self._get_field_value(0, 2)
    @property
    def packet_ipv4_header_sip_19_0_(self):
        return self._get_field_value(2, 20)
    @packet_ipv4_header_sip_19_0_.setter
    def packet_ipv4_header_sip_19_0_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_19_0_', 2, 20, int, value)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(22, 1)
    @property
    def packet_ipv4_header_sip_31_20_(self):
        return self._get_field_value(23, 12)
    @packet_ipv4_header_sip_31_20_.setter
    def packet_ipv4_header_sip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_31_20_', 23, 12, int, value)
    @property
    def og_local_vars_og_pcl_configs_src_pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 35)
    @og_local_vars_og_pcl_configs_src_pcl_id.setter
    def og_local_vars_og_pcl_configs_src_pcl_id(self, value):
        self._set_field_value('field og_local_vars_og_pcl_configs_src_pcl_id', 35, 8, npl_og_pcl_id_t, value)
    @property
    def const3_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(43, 3)

class npl_ipv4_og_pcl_sip_em_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_sip_em_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def og_local_vars_src_og_em_result(self):
        return npl_og_em_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @og_local_vars_src_og_em_result.setter
    def og_local_vars_src_og_em_result(self, value):
        self._set_field_value('field og_local_vars_src_og_em_result', 0, 64, npl_og_em_result_t, value)

class npl_ipv4_og_pcl_sip_em_compound_table_value_t(basic_npl_struct):
    def __init__(self, og_local_vars_src_og_em_result=0):
        super().__init__(72)
        self.payloads.og_local_vars_src_og_em_result = og_local_vars_src_og_em_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_sip_em_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_og_pcl_sip_em_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv4_og_pcl_sip_em_compound_table_payloads_t, value)



# API-s for table: ipv4_og_pcl_sip_lpm_compound_table

NPL_IPV4_OG_PCL_SIP_LPM_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_og_pcl_sip_lpm_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_sip_19_0_=0, packet_ipv4_header_sip_31_20_=0, og_local_vars_og_pcl_configs_src_pcl_id=0, packet_ipv4_header_dip_19_0_=0):
        super().__init__(80)
        self._set_field_value('const field', 0, 2, int, 0x0)
        self._set_field_value('const field', 22, 1, int, 0x0)
        self._set_field_value('const field', 43, 3, int, 0x7)
        self._set_field_value('const field', 66, 14, int, 0x3ffc)
        self.packet_ipv4_header_sip_19_0_ = packet_ipv4_header_sip_19_0_
        self.packet_ipv4_header_sip_31_20_ = packet_ipv4_header_sip_31_20_
        self.og_local_vars_og_pcl_configs_src_pcl_id = og_local_vars_og_pcl_configs_src_pcl_id
        self.packet_ipv4_header_dip_19_0_ = packet_ipv4_header_dip_19_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_sip_lpm_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_LPM_LDB_IPV4_exact_0x0(self):
        return self._get_field_value(0, 2)
    @property
    def packet_ipv4_header_sip_19_0_(self):
        return self._get_field_value(2, 20)
    @packet_ipv4_header_sip_19_0_.setter
    def packet_ipv4_header_sip_19_0_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_19_0_', 2, 20, int, value)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(22, 1)
    @property
    def packet_ipv4_header_sip_31_20_(self):
        return self._get_field_value(23, 12)
    @packet_ipv4_header_sip_31_20_.setter
    def packet_ipv4_header_sip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_31_20_', 23, 12, int, value)
    @property
    def og_local_vars_og_pcl_configs_src_pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 35)
    @og_local_vars_og_pcl_configs_src_pcl_id.setter
    def og_local_vars_og_pcl_configs_src_pcl_id(self, value):
        self._set_field_value('field og_local_vars_og_pcl_configs_src_pcl_id', 35, 8, npl_og_pcl_id_t, value)
    @property
    def const3_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(43, 3)
    @property
    def packet_ipv4_header_dip_19_0_(self):
        return self._get_field_value(46, 20)
    @packet_ipv4_header_dip_19_0_.setter
    def packet_ipv4_header_dip_19_0_(self, value):
        self._set_field_value('field packet_ipv4_header_dip_19_0_', 46, 20, int, value)
    @property
    def const4_14h3ffc_exact_0x3ffc(self):
        return self._get_field_value(66, 14)

class npl_ipv4_og_pcl_sip_lpm_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_sip_lpm_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def og_local_vars_src_og_lpm_result(self):
        return npl_og_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @og_local_vars_src_og_lpm_result.setter
    def og_local_vars_src_og_lpm_result(self, value):
        self._set_field_value('field og_local_vars_src_og_lpm_result', 0, 24, npl_og_lpm_result_t, value)

class npl_ipv4_og_pcl_sip_lpm_compound_table_value_t(basic_npl_struct):
    def __init__(self, og_local_vars_src_og_lpm_result=0):
        super().__init__(32)
        self.payloads.og_local_vars_src_og_lpm_result = og_local_vars_src_og_lpm_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_og_pcl_sip_lpm_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_og_pcl_sip_lpm_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv4_og_pcl_sip_lpm_compound_table_payloads_t, value)



# API-s for table: ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv4_table

NPL_IPV4_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_L3_IPV4_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv4_header_dscp=0, packet_ipv4_header_dscp=0, ipv4_dscp=0):
        super().__init__(24)
        self._set_field_value('const field', 6, 2, int, 0x0)
        self._set_field_value('const field', 14, 2, int, 0x0)
        self._set_field_value('const field', 22, 2, int, 0x0)
        self.packet_protocol_layer_next__ipv4_header_dscp = packet_protocol_layer_next__ipv4_header_dscp
        self.packet_ipv4_header_dscp = packet_ipv4_header_dscp
        self.ipv4_dscp = ipv4_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__ipv4_header_dscp(self):
        return self._get_field_value(0, 6)
    @packet_protocol_layer_next__ipv4_header_dscp.setter
    def packet_protocol_layer_next__ipv4_header_dscp(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv4_header_dscp', 0, 6, int, value)
    @property
    def const1_2b00_exact_0x0(self):
        return self._get_field_value(6, 2)
    @property
    def packet_ipv4_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv4_header_dscp.setter
    def packet_ipv4_header_dscp(self, value):
        self._set_field_value('field packet_ipv4_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv4_dscp(self):
        return self._get_field_value(16, 6)
    @ipv4_dscp.setter
    def ipv4_dscp(self, value):
        self._set_field_value('field ipv4_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V4_exact_0x0(self):
        return self._get_field_value(22, 2)

class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t, value)



# API-s for table: ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv6_table

NPL_IPV4_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_L3_IPV6_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv6_header_dscp=0, packet_ipv4_header_dscp=0, ipv4_dscp=0):
        super().__init__(24)
        self._set_field_value('const field', 6, 2, int, 0x0)
        self._set_field_value('const field', 14, 2, int, 0x0)
        self._set_field_value('const field', 22, 2, int, 0x0)
        self.packet_protocol_layer_next__ipv6_header_dscp = packet_protocol_layer_next__ipv6_header_dscp
        self.packet_ipv4_header_dscp = packet_ipv4_header_dscp
        self.ipv4_dscp = ipv4_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__ipv6_header_dscp(self):
        return self._get_field_value(0, 6)
    @packet_protocol_layer_next__ipv6_header_dscp.setter
    def packet_protocol_layer_next__ipv6_header_dscp(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv6_header_dscp', 0, 6, int, value)
    @property
    def const1_2b00_exact_0x0(self):
        return self._get_field_value(6, 2)
    @property
    def packet_ipv4_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv4_header_dscp.setter
    def packet_ipv4_header_dscp(self, value):
        self._set_field_value('field packet_ipv4_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv4_dscp(self):
        return self._get_field_value(16, 6)
    @ipv4_dscp.setter
    def ipv4_dscp(self, value):
        self._set_field_value('field ipv4_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V4_exact_0x0(self):
        return self._get_field_value(22, 2)

class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t, value)



# API-s for table: ipv4_qos_tag_muxing_for_inner_header_over_l3_table

NPL_IPV4_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_L3_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__mpls_header_label0_exp=0, packet_ipv4_header_dscp=0, ipv4_dscp=0):
        super().__init__(24)
        self.packet_protocol_layer_next__mpls_header_label0_exp = packet_protocol_layer_next__mpls_header_label0_exp
        self.packet_ipv4_header_dscp = packet_ipv4_header_dscp
        self.ipv4_dscp = ipv4_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_protocol_layer_next__mpls_header_label0_exp(self):
        return self._get_field_value(0, 3)
    @packet_protocol_layer_next__mpls_header_label0_exp.setter
    def packet_protocol_layer_next__mpls_header_label0_exp(self, value):
        self._set_field_value('field packet_protocol_layer_next__mpls_header_label0_exp', 0, 3, int, value)
    @property
    def const1_5b01010_exact_0xa(self):
        return self._get_field_value(3, 5)
    @property
    def packet_ipv4_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv4_header_dscp.setter
    def packet_ipv4_header_dscp(self, value):
        self._set_field_value('field packet_ipv4_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv4_dscp(self):
        return self._get_field_value(16, 6)
    @ipv4_dscp.setter
    def ipv4_dscp(self, value):
        self._set_field_value('field ipv4_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V4_exact_0x0(self):
        return self._get_field_value(22, 2)



class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_dscp=0, ipv4_dscp=0):
        super().__init__(24)
        self.packet_ipv4_header_dscp = packet_ipv4_header_dscp
        self.ipv4_dscp = ipv4_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def packet_ipv4_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv4_header_dscp.setter
    def packet_ipv4_header_dscp(self, value):
        self._set_field_value('field packet_ipv4_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv4_dscp(self):
        return self._get_field_value(16, 6)
    @ipv4_dscp.setter
    def ipv4_dscp(self, value):
        self._set_field_value('field ipv4_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V4_exact_0x0(self):
        return self._get_field_value(22, 2)



class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_dscp=0, ipv4_dscp=0):
        super().__init__(24)
        self.packet_ipv4_header_dscp = packet_ipv4_header_dscp
        self.ipv4_dscp = ipv4_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def packet_ipv4_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv4_header_dscp.setter
    def packet_ipv4_header_dscp(self, value):
        self._set_field_value('field packet_ipv4_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv4_dscp(self):
        return self._get_field_value(16, 6)
    @ipv4_dscp.setter
    def ipv4_dscp(self, value):
        self._set_field_value('field ipv4_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V4_exact_0x0(self):
        return self._get_field_value(22, 2)



class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_gtp_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_dscp=0, ipv4_dscp=0):
        super().__init__(24)
        self.packet_ipv4_header_dscp = packet_ipv4_header_dscp
        self.ipv4_dscp = ipv4_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_gtp_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def packet_ipv4_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv4_header_dscp.setter
    def packet_ipv4_header_dscp(self, value):
        self._set_field_value('field packet_ipv4_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv4_dscp(self):
        return self._get_field_value(16, 6)
    @ipv4_dscp.setter
    def ipv4_dscp(self, value):
        self._set_field_value('field ipv4_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V4_exact_0x0(self):
        return self._get_field_value(22, 2)



class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_dscp=0, ipv4_dscp=0):
        super().__init__(24)
        self.packet_ipv4_header_dscp = packet_ipv4_header_dscp
        self.ipv4_dscp = ipv4_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def packet_ipv4_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv4_header_dscp.setter
    def packet_ipv4_header_dscp(self, value):
        self._set_field_value('field packet_ipv4_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv4_dscp(self):
        return self._get_field_value(16, 6)
    @ipv4_dscp.setter
    def ipv4_dscp(self, value):
        self._set_field_value('field ipv4_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V4_exact_0x0(self):
        return self._get_field_value(22, 2)




class ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_PROTOCOL_TYPE_MPLS(self):
        return npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_MPLS.setter
    def NPL_PROTOCOL_TYPE_MPLS(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_MPLS', 0, 24, npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t, value)
    @property
    def NPL_PROTOCOL_TYPE_ETHERNET(self):
        return npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_ETHERNET.setter
    def NPL_PROTOCOL_TYPE_ETHERNET(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_ETHERNET', 0, 24, npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t, value)
    @property
    def NPL_PROTOCOL_TYPE_ETHERNET_VLAN(self):
        return npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_ETHERNET_VLAN.setter
    def NPL_PROTOCOL_TYPE_ETHERNET_VLAN(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_ETHERNET_VLAN', 0, 24, npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t, value)
    @property
    def NPL_PROTOCOL_TYPE_GTP(self):
        return npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_gtp_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_GTP.setter
    def NPL_PROTOCOL_TYPE_GTP(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_GTP', 0, 24, npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_gtp_t, value)
    @property
    def NPL_PROTOCOL_TYPE_UNKNOWN(self):
        return npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_UNKNOWN.setter
    def NPL_PROTOCOL_TYPE_UNKNOWN(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_UNKNOWN', 0, 24, npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t, value)

class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__type=0):
        super().__init__(24)
        self.packet_protocol_layer_next__type = packet_protocol_layer_next__type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _packet_protocol_layer_next__type = 0
    @property
    def packet_protocol_layer_next__type(self):
        return self._packet_protocol_layer_next__type
    @packet_protocol_layer_next__type.setter
    def packet_protocol_layer_next__type(self, value):
        self._packet_protocol_layer_next__type = value
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_MPLS:
            self._set_field_value('const field', 3, 5, int, 0xa)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_MPLS:
            self._set_field_value('const field', 14, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_MPLS:
            self._set_field_value('const field', 22, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET:
            self._set_field_value('const field', 0, 8, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET:
            self._set_field_value('const field', 14, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET:
            self._set_field_value('const field', 22, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET_VLAN:
            self._set_field_value('const field', 0, 8, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET_VLAN:
            self._set_field_value('const field', 14, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET_VLAN:
            self._set_field_value('const field', 22, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_GTP:
            self._set_field_value('const field', 0, 8, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_GTP:
            self._set_field_value('const field', 14, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_GTP:
            self._set_field_value('const field', 22, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_UNKNOWN:
            self._set_field_value('const field', 0, 8, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_UNKNOWN:
            self._set_field_value('const field', 14, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_UNKNOWN:
            self._set_field_value('const field', 22, 2, int, 0x0)

    @property
    def options(self):
        return ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 24 - 0, ipv4_qos_tag_muxing_for_inner_header_over_l3_table_key_options_t, value)

class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv4_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t, value)



# API-s for table: ipv4_qos_tag_muxing_for_inner_header_over_mac_table

NPL_IPV4_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_MAC_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_qos_tag_muxing_for_inner_header_over_mac_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv4_header_dscp=0, ipv4_dscp=0):
        super().__init__(24)
        self._set_field_value('const field', 0, 8, int, 0x0)
        self._set_field_value('const field', 14, 2, int, 0x0)
        self._set_field_value('const field', 22, 2, int, 0x0)
        self.packet_protocol_layer_next__ipv4_header_dscp = packet_protocol_layer_next__ipv4_header_dscp
        self.ipv4_dscp = ipv4_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_mac_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def packet_protocol_layer_next__ipv4_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_protocol_layer_next__ipv4_header_dscp.setter
    def packet_protocol_layer_next__ipv4_header_dscp(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv4_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv4_dscp(self):
        return self._get_field_value(16, 6)
    @ipv4_dscp.setter
    def ipv4_dscp(self, value):
        self._set_field_value('field ipv4_dscp', 16, 6, int, value)
    @property
    def const3_2b0_exact_0x0(self):
        return self._get_field_value(22, 2)

class npl_ipv4_qos_tag_muxing_for_inner_header_over_mac_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_mac_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_ipv4_qos_tag_muxing_for_inner_header_over_mac_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_qos_tag_muxing_for_inner_header_over_mac_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_qos_tag_muxing_for_inner_header_over_mac_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv4_qos_tag_muxing_for_inner_header_over_mac_table_payloads_t, value)



# API-s for table: ipv4_rpf_em_compound_table

NPL_IPV4_RPF_EM_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_rpf_em_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_sip_19_0_=0, packet_ipv4_header_sip_31_20_=0, pd_layer_vars_l3_relay_id=0):
        super().__init__(46)
        self._set_field_value('const field', 0, 2, int, 0x0)
        self._set_field_value('const field', 22, 1, int, 0x0)
        self.packet_ipv4_header_sip_19_0_ = packet_ipv4_header_sip_19_0_
        self.packet_ipv4_header_sip_31_20_ = packet_ipv4_header_sip_31_20_
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_rpf_em_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_EM_LDB_IPV4_VRF_SIP_exact_0x0(self):
        return self._get_field_value(0, 2)
    @property
    def packet_ipv4_header_sip_19_0_(self):
        return self._get_field_value(2, 20)
    @packet_ipv4_header_sip_19_0_.setter
    def packet_ipv4_header_sip_19_0_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_19_0_', 2, 20, int, value)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(22, 1)
    @property
    def packet_ipv4_header_sip_31_20_(self):
        return self._get_field_value(23, 12)
    @packet_ipv4_header_sip_31_20_.setter
    def packet_ipv4_header_sip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_31_20_', 23, 12, int, value)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 35)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 35, 11, npl_l3_relay_id_t, value)

class npl_ipv4_rpf_em_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_rpf_em_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def em_lookup_result(self):
        return npl_ip_em_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @em_lookup_result.setter
    def em_lookup_result(self, value):
        self._set_field_value('field em_lookup_result', 0, 64, npl_ip_em_result_t, value)

class npl_ipv4_rpf_em_compound_table_value_t(basic_npl_struct):
    def __init__(self, em_lookup_result=0):
        super().__init__(72)
        self.payloads.em_lookup_result = em_lookup_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_rpf_em_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_rpf_em_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv4_rpf_em_compound_table_payloads_t, value)



# API-s for table: ipv4_rtf_conf_set_mapping_table

NPL_IPV4_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_rtf_conf_set_mapping_table_key_t(basic_npl_struct):
    def __init__(self, rtf_step=0, lp_rtf_conf_set=0):
        super().__init__(10)
        self.rtf_step = rtf_step
        self.lp_rtf_conf_set = lp_rtf_conf_set

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_rtf_conf_set_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_step(self):
        return npl_rtf_step_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_step.setter
    def rtf_step(self, value):
        self._set_field_value('field rtf_step', 0, 2, npl_rtf_step_t, value)
    @property
    def lp_rtf_conf_set(self):
        return npl_lp_rtf_conf_set_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @lp_rtf_conf_set.setter
    def lp_rtf_conf_set(self, value):
        self._set_field_value('field lp_rtf_conf_set', 2, 8, npl_lp_rtf_conf_set_t, value)

class npl_ipv4_rtf_conf_set_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_rtf_conf_set_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipv4_rtf_iteration_prop(self):
        return npl_ip_rtf_iteration_properties_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ipv4_rtf_iteration_prop.setter
    def ipv4_rtf_iteration_prop(self, value):
        self._set_field_value('field ipv4_rtf_iteration_prop', 0, 24, npl_ip_rtf_iteration_properties_t, value)

class npl_ipv4_rtf_conf_set_mapping_table_value_t(basic_npl_struct):
    def __init__(self, ipv4_rtf_iteration_prop=0):
        super().__init__(32)
        self.payloads.ipv4_rtf_iteration_prop = ipv4_rtf_iteration_prop

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_rtf_conf_set_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_rtf_conf_set_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv4_rtf_conf_set_mapping_table_payloads_t, value)



# API-s for table: ipv4_rtf_next_macro_pack_fields_table

NPL_IPV4_RTF_NEXT_MACRO_PACK_FIELDS_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_rtf_next_macro_pack_fields_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__type_3_0_=0):
        super().__init__(8)
        self._set_field_value('const field', 4, 4, int, 0x4)
        self.packet_protocol_layer_next__type_3_0_ = packet_protocol_layer_next__type_3_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_rtf_next_macro_pack_fields_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__type_3_0_(self):
        return self._get_field_value(0, 4)
    @packet_protocol_layer_next__type_3_0_.setter
    def packet_protocol_layer_next__type_3_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__type_3_0_', 0, 4, int, value)
    @property
    def const1_PROTOCOL_TYPE_IPV4_3_0__exact_0x4(self):
        return self._get_field_value(4, 4)

class npl_ipv4_rtf_next_macro_pack_fields_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_rtf_next_macro_pack_fields_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type(self):
        return npl_curr_and_next_prot_type_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type.setter
    def rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type(self, value):
        self._set_field_value('field rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type', 0, 8, npl_curr_and_next_prot_type_t, value)

class npl_ipv4_rtf_next_macro_pack_fields_table_value_t(basic_npl_struct):
    def __init__(self, rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type=0):
        super().__init__(16)
        self.payloads.rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type = rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_rtf_next_macro_pack_fields_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_rtf_next_macro_pack_fields_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_ipv4_rtf_next_macro_pack_fields_table_payloads_t, value)



# API-s for table: ipv4_vrf_dip_compound_table

NPL_IPV4_VRF_DIP_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_vrf_dip_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_dip_19_0__0=0, packet_ipv4_header_dip_31_20_=0, pd_layer_vars_l3_relay_id=0, packet_ipv4_header_dip_19_0__1=0):
        super().__init__(82)
        self._set_field_value('const field', 0, 2, int, 0x3)
        self._set_field_value('const field', 2, 2, int, 0x0)
        self._set_field_value('const field', 24, 1, int, 0x0)
        self._set_field_value('const field', 68, 14, int, 0x3ffc)
        self.packet_ipv4_header_dip_19_0__0 = packet_ipv4_header_dip_19_0__0
        self.packet_ipv4_header_dip_31_20_ = packet_ipv4_header_dip_31_20_
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id
        self.packet_ipv4_header_dip_19_0__1 = packet_ipv4_header_dip_19_0__1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_dip_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b11_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_EM_LDB_IPV4_VRF_DIP_exact_0x0(self):
        return self._get_field_value(2, 2)
    @property
    def packet_ipv4_header_dip_19_0__0(self):
        return self._get_field_value(4, 20)
    @packet_ipv4_header_dip_19_0__0.setter
    def packet_ipv4_header_dip_19_0__0(self, value):
        self._set_field_value('field packet_ipv4_header_dip_19_0__0', 4, 20, int, value)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(24, 1)
    @property
    def packet_ipv4_header_dip_31_20_(self):
        return self._get_field_value(25, 12)
    @packet_ipv4_header_dip_31_20_.setter
    def packet_ipv4_header_dip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_dip_31_20_', 25, 12, int, value)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 37)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 37, 11, npl_l3_relay_id_t, value)
    @property
    def packet_ipv4_header_dip_19_0__1(self):
        return self._get_field_value(48, 20)
    @packet_ipv4_header_dip_19_0__1.setter
    def packet_ipv4_header_dip_19_0__1(self, value):
        self._set_field_value('field packet_ipv4_header_dip_19_0__1', 48, 20, int, value)
    @property
    def const4_14h3ffc_exact_0x3ffc(self):
        return self._get_field_value(68, 14)

class npl_ipv4_vrf_dip_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(88)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_dip_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_em_lpm_result(self):
        return npl_ip_em_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_em_lpm_result.setter
    def ip_em_lpm_result(self, value):
        self._set_field_value('field ip_em_lpm_result', 0, 88, npl_ip_em_lpm_result_t, value)

class npl_ipv4_vrf_dip_compound_table_value_t(basic_npl_struct):
    def __init__(self, ip_em_lpm_result=0):
        super().__init__(96)
        self.payloads.ip_em_lpm_result = ip_em_lpm_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_dip_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(88, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 88, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_vrf_dip_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 88, npl_ipv4_vrf_dip_compound_table_payloads_t, value)



# API-s for table: ipv4_vrf_dip_em_table

NPL_IPV4_VRF_DIP_EM_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_vrf_dip_em_table_key_t(basic_npl_struct):
    def __init__(self, ip_address_19_0=0, ip_address_31_20=0, l3_relay_id=0):
        super().__init__(44)
        self._set_field_value('const field', 20, 1, int, 0x0)
        self.ip_address_19_0 = ip_address_19_0
        self.ip_address_31_20 = ip_address_31_20
        self.l3_relay_id = l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_dip_em_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_address_19_0(self):
        return self._get_field_value(0, 20)
    @ip_address_19_0.setter
    def ip_address_19_0(self, value):
        self._set_field_value('field ip_address_19_0', 0, 20, int, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(20, 1)
    @property
    def ip_address_31_20(self):
        return self._get_field_value(21, 12)
    @ip_address_31_20.setter
    def ip_address_31_20(self, value):
        self._set_field_value('field ip_address_31_20', 21, 12, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 33)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 33, 11, npl_l3_relay_id_t, value)

class npl_ipv4_vrf_dip_em_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_dip_em_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def em_lookup_result(self):
        return npl_ip_em_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @em_lookup_result.setter
    def em_lookup_result(self, value):
        self._set_field_value('field em_lookup_result', 0, 64, npl_ip_em_result_t, value)

class npl_ipv4_vrf_dip_em_table_value_t(basic_npl_struct):
    def __init__(self, em_lookup_result=0):
        super().__init__(72)
        self.payloads.em_lookup_result = em_lookup_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_dip_em_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_vrf_dip_em_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv4_vrf_dip_em_table_payloads_t, value)



# API-s for table: ipv4_vrf_s_g_table

NPL_IPV4_VRF_S_G_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_vrf_s_g_table_key_t(basic_npl_struct):
    def __init__(self, dip_27_20_=0, sip=0, dip_19_0_=0, l3_relay_id=0):
        super().__init__(71)
        self.dip_27_20_ = dip_27_20_
        self.sip = sip
        self.dip_19_0_ = dip_19_0_
        self.l3_relay_id = l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_s_g_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dip_27_20_(self):
        return self._get_field_value(0, 8)
    @dip_27_20_.setter
    def dip_27_20_(self, value):
        self._set_field_value('field dip_27_20_', 0, 8, int, value)
    @property
    def sip(self):
        return self._get_field_value(8, 32)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 8, 32, int, value)
    @property
    def dip_19_0_(self):
        return self._get_field_value(40, 20)
    @dip_19_0_.setter
    def dip_19_0_(self, value):
        self._set_field_value('field dip_19_0_', 40, 20, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 60)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 60, 11, npl_l3_relay_id_t, value)

class npl_ipv4_vrf_s_g_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_s_g_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vrf_s_g_hw_ip_mc_result(self):
        return npl_ip_mc_result_em_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vrf_s_g_hw_ip_mc_result.setter
    def vrf_s_g_hw_ip_mc_result(self, value):
        self._set_field_value('field vrf_s_g_hw_ip_mc_result', 0, 64, npl_ip_mc_result_em_payload_t, value)

class npl_ipv4_vrf_s_g_table_value_t(basic_npl_struct):
    def __init__(self, vrf_s_g_hw_ip_mc_result=0):
        super().__init__(72)
        self.payloads.vrf_s_g_hw_ip_mc_result = vrf_s_g_hw_ip_mc_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_s_g_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_vrf_s_g_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv4_vrf_s_g_table_payloads_t, value)



# API-s for table: ipv4_vrf_sip_compound_table

NPL_IPV4_VRF_SIP_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv4_vrf_sip_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_sip_19_0__0=0, packet_ipv4_header_sip_31_20_=0, pd_layer_vars_l3_relay_id=0, packet_ipv4_header_sip_19_0__1=0):
        super().__init__(80)
        self._set_field_value('const field', 0, 2, int, 0x0)
        self._set_field_value('const field', 22, 1, int, 0x0)
        self._set_field_value('const field', 66, 14, int, 0x3ffc)
        self.packet_ipv4_header_sip_19_0__0 = packet_ipv4_header_sip_19_0__0
        self.packet_ipv4_header_sip_31_20_ = packet_ipv4_header_sip_31_20_
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id
        self.packet_ipv4_header_sip_19_0__1 = packet_ipv4_header_sip_19_0__1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_sip_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_LPM_LDB_IPV4_exact_0x0(self):
        return self._get_field_value(0, 2)
    @property
    def packet_ipv4_header_sip_19_0__0(self):
        return self._get_field_value(2, 20)
    @packet_ipv4_header_sip_19_0__0.setter
    def packet_ipv4_header_sip_19_0__0(self, value):
        self._set_field_value('field packet_ipv4_header_sip_19_0__0', 2, 20, int, value)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(22, 1)
    @property
    def packet_ipv4_header_sip_31_20_(self):
        return self._get_field_value(23, 12)
    @packet_ipv4_header_sip_31_20_.setter
    def packet_ipv4_header_sip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_31_20_', 23, 12, int, value)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 35)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 35, 11, npl_l3_relay_id_t, value)
    @property
    def packet_ipv4_header_sip_19_0__1(self):
        return self._get_field_value(46, 20)
    @packet_ipv4_header_sip_19_0__1.setter
    def packet_ipv4_header_sip_19_0__1(self, value):
        self._set_field_value('field packet_ipv4_header_sip_19_0__1', 46, 20, int, value)
    @property
    def const3_14h3ffc_exact_0x3ffc(self):
        return self._get_field_value(66, 14)

class npl_ipv4_vrf_sip_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_sip_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_rx_local_vars_uc_rpf_result(self):
        return npl_ip_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_rx_local_vars_uc_rpf_result.setter
    def ip_rx_local_vars_uc_rpf_result(self, value):
        self._set_field_value('field ip_rx_local_vars_uc_rpf_result', 0, 24, npl_ip_lpm_result_t, value)

class npl_ipv4_vrf_sip_compound_table_value_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_uc_rpf_result=0):
        super().__init__(32)
        self.payloads.ip_rx_local_vars_uc_rpf_result = ip_rx_local_vars_uc_rpf_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv4_vrf_sip_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv4_vrf_sip_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv4_vrf_sip_compound_table_payloads_t, value)



# API-s for table: ipv6_acl_sport_static_table

NPL_IPV6_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_MAPPED_PROTO_TYPE = 0x0
NPL_IPV6_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_PACKET = 0x1
NPL_IPV6_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_PACKET_PROTO_TYPE = 0x2

class npl_ipv6_acl_sport_static_table_key_t(basic_npl_struct):
    def __init__(self, acl_l4_protocol=0, acl_is_valid=0):
        super().__init__(3)
        self.acl_l4_protocol = acl_l4_protocol
        self.acl_is_valid = acl_is_valid

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_acl_sport_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def acl_l4_protocol(self):
        return self._get_field_value(0, 2)
    @acl_l4_protocol.setter
    def acl_l4_protocol(self, value):
        self._set_field_value('field acl_l4_protocol', 0, 2, int, value)
    @property
    def acl_is_valid(self):
        return self._get_field_value(2, 1)
    @acl_is_valid.setter
    def acl_is_valid(self, value):
        self._set_field_value('field acl_is_valid', 2, 1, int, value)

class npl_ipv6_acl_sport_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_acl_sport_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_ipv6_acl_sport_static_table_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(8)
        self.action = action

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_acl_sport_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_acl_sport_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_ipv6_acl_sport_static_table_payloads_t, value)



# API-s for table: ipv6_first_fragment_static_table

NPL_IPV6_FIRST_FRAGMENT_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_first_fragment_static_table_key_t(basic_npl_struct):
    def __init__(self, packet_not_first_fragment=0, saved_not_first_fragment=0, acl_changed_destination=0, acl_on_outer=0):
        super().__init__(6)
        self.packet_not_first_fragment = packet_not_first_fragment
        self.saved_not_first_fragment = saved_not_first_fragment
        self.acl_changed_destination = acl_changed_destination
        self.acl_on_outer = acl_on_outer

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_first_fragment_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_not_first_fragment(self):
        return self._get_field_value(0, 1)
    @packet_not_first_fragment.setter
    def packet_not_first_fragment(self, value):
        self._set_field_value('field packet_not_first_fragment', 0, 1, int, value)
    @property
    def saved_not_first_fragment(self):
        return self._get_field_value(1, 1)
    @saved_not_first_fragment.setter
    def saved_not_first_fragment(self, value):
        self._set_field_value('field saved_not_first_fragment', 1, 1, int, value)
    @property
    def acl_changed_destination(self):
        return self._get_field_value(2, 3)
    @acl_changed_destination.setter
    def acl_changed_destination(self, value):
        self._set_field_value('field acl_changed_destination', 2, 3, int, value)
    @property
    def acl_on_outer(self):
        return self._get_field_value(5, 1)
    @acl_on_outer.setter
    def acl_on_outer(self, value):
        self._set_field_value('field acl_on_outer', 5, 1, int, value)

class npl_ipv6_first_fragment_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_first_fragment_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_first_fragment(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_first_fragment.setter
    def ip_first_fragment(self, value):
        self._set_field_value('field ip_first_fragment', 0, 1, npl_bool_t, value)

class npl_ipv6_first_fragment_static_table_value_t(basic_npl_struct):
    def __init__(self, ip_first_fragment=0):
        super().__init__(9)
        self.payloads.ip_first_fragment = ip_first_fragment

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_first_fragment_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_first_fragment_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_ipv6_first_fragment_static_table_payloads_t, value)



# API-s for table: ipv6_lpm_table

NPL_IPV6_LPM_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_lpm_table_key_t(basic_npl_struct):
    def __init__(self, ipv6_ip_address_address=0, l3_relay_id=0):
        super().__init__(139)
        self.ipv6_ip_address_address = ipv6_ip_address_address
        self.l3_relay_id = l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpm_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipv6_ip_address_address(self):
        return self._get_field_value(0, 128)
    @ipv6_ip_address_address.setter
    def ipv6_ip_address_address(self, value):
        self._set_field_value('field ipv6_ip_address_address', 0, 128, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 128)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 128, 11, npl_l3_relay_id_t, value)

class npl_ipv6_lpm_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpm_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpm_payload(self):
        return npl_lpm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpm_payload.setter
    def lpm_payload(self, value):
        self._set_field_value('field lpm_payload', 0, 20, npl_lpm_payload_t, value)

class npl_ipv6_lpm_table_value_t(basic_npl_struct):
    def __init__(self, lpm_payload=0):
        super().__init__(28)
        self.payloads.lpm_payload = lpm_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpm_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_lpm_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_ipv6_lpm_table_payloads_t, value)



# API-s for table: ipv6_lpts_compound_table

NPL_IPV6_LPTS_COMPOUND_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT = 0x0

class npl_ipv6_lpts_compound_table_lpts_first_lookup_result_payload_t(basic_npl_struct):
    def __init__(self, lpts_first_result_encap_data_msb=0, punt_encap_data_lsb=0, lpts_cntr_and_second_lookup_index=0):
        super().__init__(64)
        self.lpts_first_result_encap_data_msb = lpts_first_result_encap_data_msb
        self.punt_encap_data_lsb = punt_encap_data_lsb
        self.lpts_cntr_and_second_lookup_index = lpts_cntr_and_second_lookup_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpts_compound_table_lpts_first_lookup_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lpts_first_result_encap_data_msb(self):
        return npl_lpts_tcam_first_result_encap_data_msb_t._get_as_sub_field(self._data, self._offset_in_data + 48)
    @lpts_first_result_encap_data_msb.setter
    def lpts_first_result_encap_data_msb(self, value):
        self._set_field_value('field lpts_first_result_encap_data_msb', 48, 16, npl_lpts_tcam_first_result_encap_data_msb_t, value)
    @property
    def punt_encap_data_lsb(self):
        return npl_punt_encap_data_lsb_t._get_as_sub_field(self._data, self._offset_in_data + 32)
    @punt_encap_data_lsb.setter
    def punt_encap_data_lsb(self, value):
        self._set_field_value('field punt_encap_data_lsb', 32, 16, npl_punt_encap_data_lsb_t, value)
    @property
    def lpts_cntr_and_second_lookup_index(self):
        return npl_lpts_cntr_and_lookup_index_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpts_cntr_and_second_lookup_index.setter
    def lpts_cntr_and_second_lookup_index(self, value):
        self._set_field_value('field lpts_cntr_and_second_lookup_index', 0, 32, npl_lpts_cntr_and_lookup_index_t, value)




class npl_ipv6_lpts_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dip_63_0_=0, pd_redirect_stage_vars_ip_length=0, packet_header_1__tcp_header_dst_port=0, packet_ipv6_header_next_header=0, pd_redirect_stage_vars_og_key=0, pd_layer_vars_l3_l3_relay_id=0, packet_ipv6_header_sip=0, packet_header_1__tcp_header_src_port=0):
        super().__init__(319)
        self._set_field_value('const field', 0, 4, int, 0xd)
        self._set_field_value('const field', 4, 13, int, 0x0)
        self._set_field_value('const field', 160, 4, int, 0xd)
        self.packet_ipv6_header_dip_63_0_ = packet_ipv6_header_dip_63_0_
        self.pd_redirect_stage_vars_ip_length = pd_redirect_stage_vars_ip_length
        self.packet_header_1__tcp_header_dst_port = packet_header_1__tcp_header_dst_port
        self.packet_ipv6_header_next_header = packet_ipv6_header_next_header
        self.pd_redirect_stage_vars_og_key = pd_redirect_stage_vars_og_key
        self.pd_layer_vars_l3_l3_relay_id = pd_layer_vars_l3_l3_relay_id
        self.packet_ipv6_header_sip = packet_ipv6_header_sip
        self.packet_header_1__tcp_header_src_port = packet_header_1__tcp_header_src_port

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpts_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_FWD0_LPTS_TABLE_ID_IPV6_ternary_0xd(self):
        return self._get_field_value(0, 4)
    @property
    def const2_13b0_ternary_0x0(self):
        return self._get_field_value(4, 13)
    @property
    def packet_ipv6_header_dip_63_0_(self):
        return self._get_field_value(17, 64)
    @packet_ipv6_header_dip_63_0_.setter
    def packet_ipv6_header_dip_63_0_(self, value):
        self._set_field_value('field packet_ipv6_header_dip_63_0_', 17, 64, int, value)
    @property
    def pd_redirect_stage_vars_ip_length(self):
        return self._get_field_value(81, 16)
    @pd_redirect_stage_vars_ip_length.setter
    def pd_redirect_stage_vars_ip_length(self, value):
        self._set_field_value('field pd_redirect_stage_vars_ip_length', 81, 16, int, value)
    @property
    def packet_header_1__tcp_header_dst_port(self):
        return self._get_field_value(97, 16)
    @packet_header_1__tcp_header_dst_port.setter
    def packet_header_1__tcp_header_dst_port(self, value):
        self._set_field_value('field packet_header_1__tcp_header_dst_port', 97, 16, int, value)
    @property
    def packet_ipv6_header_next_header(self):
        return self._get_field_value(113, 8)
    @packet_ipv6_header_next_header.setter
    def packet_ipv6_header_next_header(self, value):
        self._set_field_value('field packet_ipv6_header_next_header', 113, 8, int, value)
    @property
    def pd_redirect_stage_vars_og_key(self):
        return npl_redirect_stage_og_key_t._get_as_sub_field(self._data, self._offset_in_data + 121)
    @pd_redirect_stage_vars_og_key.setter
    def pd_redirect_stage_vars_og_key(self, value):
        self._set_field_value('field pd_redirect_stage_vars_og_key', 121, 39, npl_redirect_stage_og_key_t, value)
    @property
    def const3_FWD0_LPTS_TABLE_ID_IPV6_ternary_0xd(self):
        return self._get_field_value(160, 4)
    @property
    def pd_layer_vars_l3_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 164)
    @pd_layer_vars_l3_l3_relay_id.setter
    def pd_layer_vars_l3_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_l3_relay_id', 164, 11, npl_l3_relay_id_t, value)
    @property
    def packet_ipv6_header_sip(self):
        return self._get_field_value(175, 128)
    @packet_ipv6_header_sip.setter
    def packet_ipv6_header_sip(self, value):
        self._set_field_value('field packet_ipv6_header_sip', 175, 128, int, value)
    @property
    def packet_header_1__tcp_header_src_port(self):
        return self._get_field_value(303, 16)
    @packet_header_1__tcp_header_src_port.setter
    def packet_header_1__tcp_header_src_port(self, value):
        self._set_field_value('field packet_header_1__tcp_header_src_port', 303, 16, int, value)

class npl_ipv6_lpts_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpts_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpts_first_lookup_result(self):
        return npl_ipv6_lpts_compound_table_lpts_first_lookup_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpts_first_lookup_result.setter
    def lpts_first_lookup_result(self, value):
        self._set_field_value('field lpts_first_lookup_result', 0, 64, npl_ipv6_lpts_compound_table_lpts_first_lookup_result_payload_t, value)

class npl_ipv6_lpts_compound_table_value_t(basic_npl_struct):
    def __init__(self, lpts_first_result_encap_data_msb=0, punt_encap_data_lsb=0, lpts_cntr_and_second_lookup_index=0):
        super().__init__(72)
        self.payloads.lpts_first_lookup_result = npl_ipv6_lpts_compound_table_lpts_first_lookup_result_payload_t(lpts_first_result_encap_data_msb, punt_encap_data_lsb, lpts_cntr_and_second_lookup_index)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpts_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_lpts_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv6_lpts_compound_table_payloads_t, value)



# API-s for table: ipv6_lpts_table

NPL_IPV6_LPTS_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT = 0x0

class npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t(basic_npl_struct):
    def __init__(self, lpts_first_result_encap_data_msb=0, punt_encap_data_lsb=0, lpts_cntr_and_second_lookup_index=0):
        super().__init__(64)
        self.lpts_first_result_encap_data_msb = lpts_first_result_encap_data_msb
        self.punt_encap_data_lsb = punt_encap_data_lsb
        self.lpts_cntr_and_second_lookup_index = lpts_cntr_and_second_lookup_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lpts_first_result_encap_data_msb(self):
        return npl_lpts_tcam_first_result_encap_data_msb_t._get_as_sub_field(self._data, self._offset_in_data + 48)
    @lpts_first_result_encap_data_msb.setter
    def lpts_first_result_encap_data_msb(self, value):
        self._set_field_value('field lpts_first_result_encap_data_msb', 48, 16, npl_lpts_tcam_first_result_encap_data_msb_t, value)
    @property
    def punt_encap_data_lsb(self):
        return npl_punt_encap_data_lsb_t._get_as_sub_field(self._data, self._offset_in_data + 32)
    @punt_encap_data_lsb.setter
    def punt_encap_data_lsb(self, value):
        self._set_field_value('field punt_encap_data_lsb', 32, 16, npl_punt_encap_data_lsb_t, value)
    @property
    def lpts_cntr_and_second_lookup_index(self):
        return npl_lpts_cntr_and_lookup_index_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpts_cntr_and_second_lookup_index.setter
    def lpts_cntr_and_second_lookup_index(self, value):
        self._set_field_value('field lpts_cntr_and_second_lookup_index', 0, 32, npl_lpts_cntr_and_lookup_index_t, value)




class npl_ipv6_lpts_table_key_t(basic_npl_struct):
    def __init__(self, pad=0, ip_length=0, dst_port=0, l4_protocol=0, og_codes=0, ttl_255=0, established=0, app_id=0, is_mc=0, l3_relay_id=0, sip=0, src_port=0):
        super().__init__(319)
        self._set_field_value('const field', 0, 4, int, 0xd)
        self._set_field_value('const field', 4, 13, int, 0x0)
        self._set_field_value('const field', 160, 4, int, 0xd)
        self.pad = pad
        self.ip_length = ip_length
        self.dst_port = dst_port
        self.l4_protocol = l4_protocol
        self.og_codes = og_codes
        self.ttl_255 = ttl_255
        self.established = established
        self.app_id = app_id
        self.is_mc = is_mc
        self.l3_relay_id = l3_relay_id
        self.sip = sip
        self.src_port = src_port

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpts_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_FWD0_LPTS_TABLE_ID_IPV6_ternary_0xd(self):
        return self._get_field_value(0, 4)
    @property
    def const2_13b0_ternary_0x0(self):
        return self._get_field_value(4, 13)
    @property
    def pad(self):
        return self._get_field_value(17, 64)
    @pad.setter
    def pad(self, value):
        self._set_field_value('field pad', 17, 64, int, value)
    @property
    def ip_length(self):
        return self._get_field_value(81, 16)
    @ip_length.setter
    def ip_length(self, value):
        self._set_field_value('field ip_length', 81, 16, int, value)
    @property
    def dst_port(self):
        return self._get_field_value(97, 16)
    @dst_port.setter
    def dst_port(self, value):
        self._set_field_value('field dst_port', 97, 16, int, value)
    @property
    def l4_protocol(self):
        return self._get_field_value(113, 8)
    @l4_protocol.setter
    def l4_protocol(self, value):
        self._set_field_value('field l4_protocol', 113, 8, int, value)
    @property
    def og_codes(self):
        return npl_lpts_object_groups_t._get_as_sub_field(self._data, self._offset_in_data + 121)
    @og_codes.setter
    def og_codes(self, value):
        self._set_field_value('field og_codes', 121, 32, npl_lpts_object_groups_t, value)
    @property
    def ttl_255(self):
        return self._get_field_value(153, 1)
    @ttl_255.setter
    def ttl_255(self, value):
        self._set_field_value('field ttl_255', 153, 1, int, value)
    @property
    def established(self):
        return self._get_field_value(154, 1)
    @established.setter
    def established(self, value):
        self._set_field_value('field established', 154, 1, int, value)
    @property
    def app_id(self):
        return self._get_field_value(155, 4)
    @app_id.setter
    def app_id(self, value):
        self._set_field_value('field app_id', 155, 4, int, value)
    @property
    def is_mc(self):
        return self._get_field_value(159, 1)
    @is_mc.setter
    def is_mc(self, value):
        self._set_field_value('field is_mc', 159, 1, int, value)
    @property
    def const3_FWD0_LPTS_TABLE_ID_IPV6_ternary_0xd(self):
        return self._get_field_value(160, 4)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 164)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 164, 11, npl_l3_relay_id_t, value)
    @property
    def sip(self):
        return self._get_field_value(175, 128)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 175, 128, int, value)
    @property
    def src_port(self):
        return self._get_field_value(303, 16)
    @src_port.setter
    def src_port(self, value):
        self._set_field_value('field src_port', 303, 16, int, value)

class npl_ipv6_lpts_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpts_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpts_first_lookup_result(self):
        return npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpts_first_lookup_result.setter
    def lpts_first_lookup_result(self, value):
        self._set_field_value('field lpts_first_lookup_result', 0, 64, npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t, value)

class npl_ipv6_lpts_table_value_t(basic_npl_struct):
    def __init__(self, lpts_first_result_encap_data_msb=0, punt_encap_data_lsb=0, lpts_cntr_and_second_lookup_index=0):
        super().__init__(72)
        self.payloads.lpts_first_lookup_result = npl_ipv6_lpts_table_lpts_first_lookup_result_payload_t(lpts_first_result_encap_data_msb, punt_encap_data_lsb, lpts_cntr_and_second_lookup_index)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_lpts_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_lpts_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv6_lpts_table_payloads_t, value)



# API-s for table: ipv6_mc_da_pack_table

NPL_IPV6_MC_DA_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_mc_da_pack_table_key_option_false_value_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dip_31_0_=0):
        super().__init__(48)
        self.packet_ipv6_header_dip_31_0_ = packet_ipv6_header_dip_31_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_da_pack_table_key_option_false_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_ipv6_header_dip_31_0_(self):
        return self._get_field_value(0, 32)
    @packet_ipv6_header_dip_31_0_.setter
    def packet_ipv6_header_dip_31_0_(self, value):
        self._set_field_value('field packet_ipv6_header_dip_31_0_', 0, 32, int, value)
    @property
    def const1_16h3333_exact_0x3333(self):
        return self._get_field_value(32, 16)



class npl_ipv6_mc_da_pack_table_key_option_true_value_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv6_header_dip_31_0_=0):
        super().__init__(48)
        self.packet_protocol_layer_next__ipv6_header_dip_31_0_ = packet_protocol_layer_next__ipv6_header_dip_31_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_da_pack_table_key_option_true_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_protocol_layer_next__ipv6_header_dip_31_0_(self):
        return self._get_field_value(0, 32)
    @packet_protocol_layer_next__ipv6_header_dip_31_0_.setter
    def packet_protocol_layer_next__ipv6_header_dip_31_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv6_header_dip_31_0_', 0, 32, int, value)
    @property
    def const1_16h3333_exact_0x3333(self):
        return self._get_field_value(32, 16)




class ipv6_mc_da_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ipv6_mc_da_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_FALSE_VALUE(self):
        return npl_ipv6_mc_da_pack_table_key_option_false_value_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_FALSE_VALUE.setter
    def NPL_FALSE_VALUE(self, value):
        self._set_field_value('field NPL_FALSE_VALUE', 0, 48, npl_ipv6_mc_da_pack_table_key_option_false_value_t, value)
    @property
    def NPL_TRUE_VALUE(self):
        return npl_ipv6_mc_da_pack_table_key_option_true_value_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TRUE_VALUE.setter
    def NPL_TRUE_VALUE(self, value):
        self._set_field_value('field NPL_TRUE_VALUE', 0, 48, npl_ipv6_mc_da_pack_table_key_option_true_value_t, value)

class npl_ipv6_mc_da_pack_table_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_collapsed_mc=0):
        super().__init__(48)
        self.tx_npu_header_collapsed_mc = tx_npu_header_collapsed_mc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_da_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _tx_npu_header_collapsed_mc = 0
    @property
    def tx_npu_header_collapsed_mc(self):
        return self._tx_npu_header_collapsed_mc
    @tx_npu_header_collapsed_mc.setter
    def tx_npu_header_collapsed_mc(self, value):
        self._tx_npu_header_collapsed_mc = value
        if tx_npu_header_collapsed_mc == NPL_FALSE_VALUE:
            self._set_field_value('const field', 32, 16, int, 0x3333)
        if tx_npu_header_collapsed_mc == NPL_TRUE_VALUE:
            self._set_field_value('const field', 32, 16, int, 0x3333)

    @property
    def options(self):
        return ipv6_mc_da_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 48 - 0, ipv6_mc_da_pack_table_key_options_t, value)

class npl_ipv6_mc_da_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_da_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_tx_local_vars_nh_encap_da(self):
        return self._get_field_value(0, 48)
    @l3_tx_local_vars_nh_encap_da.setter
    def l3_tx_local_vars_nh_encap_da(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_encap_da', 0, 48, int, value)

class npl_ipv6_mc_da_pack_table_value_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_encap_da=0):
        super().__init__(56)
        self.payloads.l3_tx_local_vars_nh_encap_da = l3_tx_local_vars_nh_encap_da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_da_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_mc_da_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_ipv6_mc_da_pack_table_payloads_t, value)



# API-s for table: ipv6_mc_dc_check_compound_table

NPL_IPV6_MC_DC_CHECK_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_mc_dc_check_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_sip=0, pd_layer_vars_l3_relay_id=0):
        super().__init__(142)
        self._set_field_value('const field', 0, 2, int, 0x3)
        self._set_field_value('const field', 2, 1, int, 0x0)
        self.packet_ipv6_header_sip = packet_ipv6_header_sip
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_dc_check_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_LPM_LDB_IPV6_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(2, 1)
    @property
    def packet_ipv6_header_sip(self):
        return self._get_field_value(3, 128)
    @packet_ipv6_header_sip.setter
    def packet_ipv6_header_sip(self, value):
        self._set_field_value('field packet_ipv6_header_sip', 3, 128, int, value)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 131)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 131, 11, npl_l3_relay_id_t, value)

class npl_ipv6_mc_dc_check_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_dc_check_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_rx_local_vars_uc_rpf_v6_result(self):
        return npl_ip_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_rx_local_vars_uc_rpf_v6_result.setter
    def ip_rx_local_vars_uc_rpf_v6_result(self, value):
        self._set_field_value('field ip_rx_local_vars_uc_rpf_v6_result', 0, 24, npl_ip_lpm_result_t, value)

class npl_ipv6_mc_dc_check_compound_table_value_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_uc_rpf_v6_result=0):
        super().__init__(32)
        self.payloads.ip_rx_local_vars_uc_rpf_v6_result = ip_rx_local_vars_uc_rpf_v6_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_dc_check_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_mc_dc_check_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv6_mc_dc_check_compound_table_payloads_t, value)



# API-s for table: ipv6_mc_select_qos_id

NPL_IPV6_MC_SELECT_QOS_ID_ACTION_USE_QOS_ID_FROM_L2_LP_ATTR = 0x0
NPL_IPV6_MC_SELECT_QOS_ID_ACTION_USE_QOS_ID_FROM_L3_LAYER_ATTR = 0x1

class npl_ipv6_mc_select_qos_id_key_t(basic_npl_struct):
    def __init__(self, mc_termination_hit=0):
        super().__init__(1)
        self.mc_termination_hit = mc_termination_hit

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_select_qos_id_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mc_termination_hit(self):
        return self._get_field_value(0, 1)
    @mc_termination_hit.setter
    def mc_termination_hit(self, value):
        self._set_field_value('field mc_termination_hit', 0, 1, int, value)

class npl_ipv6_mc_select_qos_id_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_select_qos_id_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_ipv6_mc_select_qos_id_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(8)
        self.action = action

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_mc_select_qos_id_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_mc_select_qos_id_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_ipv6_mc_select_qos_id_payloads_t, value)



# API-s for table: ipv6_og_pcl_em_table

NPL_IPV6_OG_PCL_EM_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_og_pcl_em_table_key_t(basic_npl_struct):
    def __init__(self, ip_address=0, pcl_id=0):
        super().__init__(140)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self._set_field_value('const field', 137, 3, int, 0x7)
        self.ip_address = ip_address
        self.pcl_id = pcl_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_em_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def ip_address(self):
        return self._get_field_value(1, 128)
    @ip_address.setter
    def ip_address(self, value):
        self._set_field_value('field ip_address', 1, 128, int, value)
    @property
    def pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 129)
    @pcl_id.setter
    def pcl_id(self, value):
        self._set_field_value('field pcl_id', 129, 8, npl_og_pcl_id_t, value)
    @property
    def const2_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(137, 3)

class npl_ipv6_og_pcl_em_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_em_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def og_em_lookup_result(self):
        return npl_og_em_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @og_em_lookup_result.setter
    def og_em_lookup_result(self, value):
        self._set_field_value('field og_em_lookup_result', 0, 64, npl_og_em_result_t, value)

class npl_ipv6_og_pcl_em_table_value_t(basic_npl_struct):
    def __init__(self, og_em_lookup_result=0):
        super().__init__(72)
        self.payloads.og_em_lookup_result = og_em_lookup_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_em_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_og_pcl_em_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv6_og_pcl_em_table_payloads_t, value)



# API-s for table: ipv6_og_pcl_lpm_table

NPL_IPV6_OG_PCL_LPM_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_og_pcl_lpm_table_key_t(basic_npl_struct):
    def __init__(self, ip_address=0, pcl_id=0):
        super().__init__(139)
        self._set_field_value('const field', 136, 3, int, 0x7)
        self.ip_address = ip_address
        self.pcl_id = pcl_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_lpm_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_address(self):
        return self._get_field_value(0, 128)
    @ip_address.setter
    def ip_address(self, value):
        self._set_field_value('field ip_address', 0, 128, int, value)
    @property
    def pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 128)
    @pcl_id.setter
    def pcl_id(self, value):
        self._set_field_value('field pcl_id', 128, 8, npl_og_pcl_id_t, value)
    @property
    def const1_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(136, 3)

class npl_ipv6_og_pcl_lpm_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_lpm_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpm_code(self):
        return npl_og_lpm_compression_code_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpm_code.setter
    def lpm_code(self, value):
        self._set_field_value('field lpm_code', 0, 20, npl_og_lpm_compression_code_t, value)

class npl_ipv6_og_pcl_lpm_table_value_t(basic_npl_struct):
    def __init__(self, lpm_code=0):
        super().__init__(28)
        self.payloads.lpm_code = lpm_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_lpm_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_og_pcl_lpm_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_ipv6_og_pcl_lpm_table_payloads_t, value)



# API-s for table: ipv6_og_pcl_sip_em_compound_table

NPL_IPV6_OG_PCL_SIP_EM_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_og_pcl_sip_em_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_sip=0, og_local_vars_og_pcl_configs_src_pcl_id=0):
        super().__init__(142)
        self._set_field_value('const field', 0, 2, int, 0x3)
        self._set_field_value('const field', 2, 1, int, 0x0)
        self._set_field_value('const field', 139, 3, int, 0x7)
        self.packet_ipv6_header_sip = packet_ipv6_header_sip
        self.og_local_vars_og_pcl_configs_src_pcl_id = og_local_vars_og_pcl_configs_src_pcl_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_sip_em_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_EM_LDB_IPV6_VRF_SIP_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(2, 1)
    @property
    def packet_ipv6_header_sip(self):
        return self._get_field_value(3, 128)
    @packet_ipv6_header_sip.setter
    def packet_ipv6_header_sip(self, value):
        self._set_field_value('field packet_ipv6_header_sip', 3, 128, int, value)
    @property
    def og_local_vars_og_pcl_configs_src_pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 131)
    @og_local_vars_og_pcl_configs_src_pcl_id.setter
    def og_local_vars_og_pcl_configs_src_pcl_id(self, value):
        self._set_field_value('field og_local_vars_og_pcl_configs_src_pcl_id', 131, 8, npl_og_pcl_id_t, value)
    @property
    def const3_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(139, 3)

class npl_ipv6_og_pcl_sip_em_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_sip_em_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def og_local_vars_src_og_em_result(self):
        return npl_og_em_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @og_local_vars_src_og_em_result.setter
    def og_local_vars_src_og_em_result(self, value):
        self._set_field_value('field og_local_vars_src_og_em_result', 0, 64, npl_og_em_result_t, value)

class npl_ipv6_og_pcl_sip_em_compound_table_value_t(basic_npl_struct):
    def __init__(self, og_local_vars_src_og_em_result=0):
        super().__init__(72)
        self.payloads.og_local_vars_src_og_em_result = og_local_vars_src_og_em_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_sip_em_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_og_pcl_sip_em_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv6_og_pcl_sip_em_compound_table_payloads_t, value)



# API-s for table: ipv6_og_pcl_sip_lpm_compound_table

NPL_IPV6_OG_PCL_SIP_LPM_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_og_pcl_sip_lpm_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_sip=0, og_local_vars_og_pcl_configs_src_pcl_id=0):
        super().__init__(142)
        self._set_field_value('const field', 0, 2, int, 0x3)
        self._set_field_value('const field', 2, 1, int, 0x0)
        self._set_field_value('const field', 139, 3, int, 0x7)
        self.packet_ipv6_header_sip = packet_ipv6_header_sip
        self.og_local_vars_og_pcl_configs_src_pcl_id = og_local_vars_og_pcl_configs_src_pcl_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_sip_lpm_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_LPM_LDB_IPV6_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(2, 1)
    @property
    def packet_ipv6_header_sip(self):
        return self._get_field_value(3, 128)
    @packet_ipv6_header_sip.setter
    def packet_ipv6_header_sip(self, value):
        self._set_field_value('field packet_ipv6_header_sip', 3, 128, int, value)
    @property
    def og_local_vars_og_pcl_configs_src_pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 131)
    @og_local_vars_og_pcl_configs_src_pcl_id.setter
    def og_local_vars_og_pcl_configs_src_pcl_id(self, value):
        self._set_field_value('field og_local_vars_og_pcl_configs_src_pcl_id', 131, 8, npl_og_pcl_id_t, value)
    @property
    def const3_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(139, 3)

class npl_ipv6_og_pcl_sip_lpm_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_sip_lpm_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def og_local_vars_src_og_lpm_result(self):
        return npl_og_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @og_local_vars_src_og_lpm_result.setter
    def og_local_vars_src_og_lpm_result(self, value):
        self._set_field_value('field og_local_vars_src_og_lpm_result', 0, 24, npl_og_lpm_result_t, value)

class npl_ipv6_og_pcl_sip_lpm_compound_table_value_t(basic_npl_struct):
    def __init__(self, og_local_vars_src_og_lpm_result=0):
        super().__init__(32)
        self.payloads.og_local_vars_src_og_lpm_result = og_local_vars_src_og_lpm_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_og_pcl_sip_lpm_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_og_pcl_sip_lpm_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv6_og_pcl_sip_lpm_compound_table_payloads_t, value)



# API-s for table: ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv4_table

NPL_IPV6_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_L3_IPV4_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv4_header_dscp=0, packet_ipv6_header_dscp=0, ipv6_dscp=0):
        super().__init__(24)
        self._set_field_value('const field', 6, 2, int, 0x0)
        self._set_field_value('const field', 14, 2, int, 0x0)
        self._set_field_value('const field', 22, 2, int, 0x1)
        self.packet_protocol_layer_next__ipv4_header_dscp = packet_protocol_layer_next__ipv4_header_dscp
        self.packet_ipv6_header_dscp = packet_ipv6_header_dscp
        self.ipv6_dscp = ipv6_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__ipv4_header_dscp(self):
        return self._get_field_value(0, 6)
    @packet_protocol_layer_next__ipv4_header_dscp.setter
    def packet_protocol_layer_next__ipv4_header_dscp(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv4_header_dscp', 0, 6, int, value)
    @property
    def const1_2b00_exact_0x0(self):
        return self._get_field_value(6, 2)
    @property
    def packet_ipv6_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv6_header_dscp.setter
    def packet_ipv6_header_dscp(self, value):
        self._set_field_value('field packet_ipv6_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv6_dscp(self):
        return self._get_field_value(16, 6)
    @ipv6_dscp.setter
    def ipv6_dscp(self, value):
        self._set_field_value('field ipv6_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V6_exact_0x1(self):
        return self._get_field_value(22, 2)

class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t, value)



# API-s for table: ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv6_table

NPL_IPV6_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_L3_IPV6_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv6_header_dscp=0, packet_ipv6_header_dscp=0, ipv6_dscp=0):
        super().__init__(24)
        self._set_field_value('const field', 6, 2, int, 0x0)
        self._set_field_value('const field', 14, 2, int, 0x0)
        self._set_field_value('const field', 22, 2, int, 0x1)
        self.packet_protocol_layer_next__ipv6_header_dscp = packet_protocol_layer_next__ipv6_header_dscp
        self.packet_ipv6_header_dscp = packet_ipv6_header_dscp
        self.ipv6_dscp = ipv6_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__ipv6_header_dscp(self):
        return self._get_field_value(0, 6)
    @packet_protocol_layer_next__ipv6_header_dscp.setter
    def packet_protocol_layer_next__ipv6_header_dscp(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv6_header_dscp', 0, 6, int, value)
    @property
    def const1_2b00_exact_0x0(self):
        return self._get_field_value(6, 2)
    @property
    def packet_ipv6_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv6_header_dscp.setter
    def packet_ipv6_header_dscp(self, value):
        self._set_field_value('field packet_ipv6_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv6_dscp(self):
        return self._get_field_value(16, 6)
    @ipv6_dscp.setter
    def ipv6_dscp(self, value):
        self._set_field_value('field ipv6_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V6_exact_0x1(self):
        return self._get_field_value(22, 2)

class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t, value)



# API-s for table: ipv6_qos_tag_muxing_for_inner_header_over_l3_table

NPL_IPV6_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_L3_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__mpls_header_label0_exp=0, packet_ipv6_header_dscp=0, ipv6_dscp=0):
        super().__init__(24)
        self.packet_protocol_layer_next__mpls_header_label0_exp = packet_protocol_layer_next__mpls_header_label0_exp
        self.packet_ipv6_header_dscp = packet_ipv6_header_dscp
        self.ipv6_dscp = ipv6_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_protocol_layer_next__mpls_header_label0_exp(self):
        return self._get_field_value(0, 3)
    @packet_protocol_layer_next__mpls_header_label0_exp.setter
    def packet_protocol_layer_next__mpls_header_label0_exp(self, value):
        self._set_field_value('field packet_protocol_layer_next__mpls_header_label0_exp', 0, 3, int, value)
    @property
    def const1_5b01010_exact_0xa(self):
        return self._get_field_value(3, 5)
    @property
    def packet_ipv6_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv6_header_dscp.setter
    def packet_ipv6_header_dscp(self, value):
        self._set_field_value('field packet_ipv6_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv6_dscp(self):
        return self._get_field_value(16, 6)
    @ipv6_dscp.setter
    def ipv6_dscp(self, value):
        self._set_field_value('field ipv6_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V6_exact_0x1(self):
        return self._get_field_value(22, 2)



class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dscp=0, ipv6_dscp=0):
        super().__init__(24)
        self.packet_ipv6_header_dscp = packet_ipv6_header_dscp
        self.ipv6_dscp = ipv6_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def packet_ipv6_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv6_header_dscp.setter
    def packet_ipv6_header_dscp(self, value):
        self._set_field_value('field packet_ipv6_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv6_dscp(self):
        return self._get_field_value(16, 6)
    @ipv6_dscp.setter
    def ipv6_dscp(self, value):
        self._set_field_value('field ipv6_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V6_exact_0x1(self):
        return self._get_field_value(22, 2)



class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dscp=0, ipv6_dscp=0):
        super().__init__(24)
        self.packet_ipv6_header_dscp = packet_ipv6_header_dscp
        self.ipv6_dscp = ipv6_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def packet_ipv6_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv6_header_dscp.setter
    def packet_ipv6_header_dscp(self, value):
        self._set_field_value('field packet_ipv6_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv6_dscp(self):
        return self._get_field_value(16, 6)
    @ipv6_dscp.setter
    def ipv6_dscp(self, value):
        self._set_field_value('field ipv6_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V6_exact_0x1(self):
        return self._get_field_value(22, 2)



class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_gtp_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dscp=0, ipv6_dscp=0):
        super().__init__(24)
        self.packet_ipv6_header_dscp = packet_ipv6_header_dscp
        self.ipv6_dscp = ipv6_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_gtp_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def packet_ipv6_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv6_header_dscp.setter
    def packet_ipv6_header_dscp(self, value):
        self._set_field_value('field packet_ipv6_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv6_dscp(self):
        return self._get_field_value(16, 6)
    @ipv6_dscp.setter
    def ipv6_dscp(self, value):
        self._set_field_value('field ipv6_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V6_exact_0x1(self):
        return self._get_field_value(22, 2)



class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dscp=0, ipv6_dscp=0):
        super().__init__(24)
        self.packet_ipv6_header_dscp = packet_ipv6_header_dscp
        self.ipv6_dscp = ipv6_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def packet_ipv6_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_ipv6_header_dscp.setter
    def packet_ipv6_header_dscp(self, value):
        self._set_field_value('field packet_ipv6_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv6_dscp(self):
        return self._get_field_value(16, 6)
    @ipv6_dscp.setter
    def ipv6_dscp(self, value):
        self._set_field_value('field ipv6_dscp', 16, 6, int, value)
    @property
    def const3_QOS_MAPPING_KEY_MSB_V6_exact_0x1(self):
        return self._get_field_value(22, 2)




class ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_PROTOCOL_TYPE_MPLS(self):
        return npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_MPLS.setter
    def NPL_PROTOCOL_TYPE_MPLS(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_MPLS', 0, 24, npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t, value)
    @property
    def NPL_PROTOCOL_TYPE_ETHERNET(self):
        return npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_ETHERNET.setter
    def NPL_PROTOCOL_TYPE_ETHERNET(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_ETHERNET', 0, 24, npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t, value)
    @property
    def NPL_PROTOCOL_TYPE_ETHERNET_VLAN(self):
        return npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_ETHERNET_VLAN.setter
    def NPL_PROTOCOL_TYPE_ETHERNET_VLAN(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_ETHERNET_VLAN', 0, 24, npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t, value)
    @property
    def NPL_PROTOCOL_TYPE_GTP(self):
        return npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_gtp_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_GTP.setter
    def NPL_PROTOCOL_TYPE_GTP(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_GTP', 0, 24, npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_gtp_t, value)
    @property
    def NPL_PROTOCOL_TYPE_UNKNOWN(self):
        return npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_UNKNOWN.setter
    def NPL_PROTOCOL_TYPE_UNKNOWN(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_UNKNOWN', 0, 24, npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t, value)

class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__type=0):
        super().__init__(24)
        self.packet_protocol_layer_next__type = packet_protocol_layer_next__type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _packet_protocol_layer_next__type = 0
    @property
    def packet_protocol_layer_next__type(self):
        return self._packet_protocol_layer_next__type
    @packet_protocol_layer_next__type.setter
    def packet_protocol_layer_next__type(self, value):
        self._packet_protocol_layer_next__type = value
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_MPLS:
            self._set_field_value('const field', 3, 5, int, 0xa)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_MPLS:
            self._set_field_value('const field', 14, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_MPLS:
            self._set_field_value('const field', 22, 2, int, 0x1)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET:
            self._set_field_value('const field', 0, 8, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET:
            self._set_field_value('const field', 14, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET:
            self._set_field_value('const field', 22, 2, int, 0x1)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET_VLAN:
            self._set_field_value('const field', 0, 8, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET_VLAN:
            self._set_field_value('const field', 14, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET_VLAN:
            self._set_field_value('const field', 22, 2, int, 0x1)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_GTP:
            self._set_field_value('const field', 0, 8, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_GTP:
            self._set_field_value('const field', 14, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_GTP:
            self._set_field_value('const field', 22, 2, int, 0x1)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_UNKNOWN:
            self._set_field_value('const field', 0, 8, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_UNKNOWN:
            self._set_field_value('const field', 14, 2, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_UNKNOWN:
            self._set_field_value('const field', 22, 2, int, 0x1)

    @property
    def options(self):
        return ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 24 - 0, ipv6_qos_tag_muxing_for_inner_header_over_l3_table_key_options_t, value)

class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv6_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t, value)



# API-s for table: ipv6_qos_tag_muxing_for_inner_header_over_mac_table

NPL_IPV6_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_MAC_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_qos_tag_muxing_for_inner_header_over_mac_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv6_header_dscp=0, ipv6_dscp=0):
        super().__init__(24)
        self._set_field_value('const field', 0, 8, int, 0x0)
        self._set_field_value('const field', 14, 2, int, 0x0)
        self._set_field_value('const field', 22, 2, int, 0x1)
        self.packet_protocol_layer_next__ipv6_header_dscp = packet_protocol_layer_next__ipv6_header_dscp
        self.ipv6_dscp = ipv6_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_mac_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def packet_protocol_layer_next__ipv6_header_dscp(self):
        return self._get_field_value(8, 6)
    @packet_protocol_layer_next__ipv6_header_dscp.setter
    def packet_protocol_layer_next__ipv6_header_dscp(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv6_header_dscp', 8, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(14, 2)
    @property
    def ipv6_dscp(self):
        return self._get_field_value(16, 6)
    @ipv6_dscp.setter
    def ipv6_dscp(self, value):
        self._set_field_value('field ipv6_dscp', 16, 6, int, value)
    @property
    def const3_2b01_exact_0x1(self):
        return self._get_field_value(22, 2)

class npl_ipv6_qos_tag_muxing_for_inner_header_over_mac_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_mac_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_ipv6_qos_tag_muxing_for_inner_header_over_mac_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_qos_tag_muxing_for_inner_header_over_mac_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_qos_tag_muxing_for_inner_header_over_mac_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv6_qos_tag_muxing_for_inner_header_over_mac_table_payloads_t, value)



# API-s for table: ipv6_rpf_em_compound_table

NPL_IPV6_RPF_EM_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_rpf_em_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_sip=0, pd_layer_vars_l3_relay_id=0):
        super().__init__(142)
        self._set_field_value('const field', 0, 2, int, 0x3)
        self._set_field_value('const field', 2, 1, int, 0x0)
        self.packet_ipv6_header_sip = packet_ipv6_header_sip
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rpf_em_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_EM_LDB_IPV6_VRF_SIP_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(2, 1)
    @property
    def packet_ipv6_header_sip(self):
        return self._get_field_value(3, 128)
    @packet_ipv6_header_sip.setter
    def packet_ipv6_header_sip(self, value):
        self._set_field_value('field packet_ipv6_header_sip', 3, 128, int, value)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 131)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 131, 11, npl_l3_relay_id_t, value)

class npl_ipv6_rpf_em_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rpf_em_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def em_lookup_result(self):
        return npl_ip_em_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @em_lookup_result.setter
    def em_lookup_result(self, value):
        self._set_field_value('field em_lookup_result', 0, 64, npl_ip_em_result_t, value)

class npl_ipv6_rpf_em_compound_table_value_t(basic_npl_struct):
    def __init__(self, em_lookup_result=0):
        super().__init__(72)
        self.payloads.em_lookup_result = em_lookup_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rpf_em_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_rpf_em_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv6_rpf_em_compound_table_payloads_t, value)



# API-s for table: ipv6_rtf_acl_outer_fwd_layer_and_rtf_stage_pack_fields_table

NPL_IPV6_RTF_ACL_OUTER_FWD_LAYER_AND_RTF_STAGE_PACK_FIELDS_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_rtf_acl_outer_fwd_layer_and_rtf_stage_pack_fields_table_key_t(basic_npl_struct):
    def __init__(self, rtf_acl_local_vars_fwd_layer_and_rtf_stage_compressed_fields=0, rtf_acl_local_vars_acl_outer=0):
        super().__init__(4)
        self.rtf_acl_local_vars_fwd_layer_and_rtf_stage_compressed_fields = rtf_acl_local_vars_fwd_layer_and_rtf_stage_compressed_fields
        self.rtf_acl_local_vars_acl_outer = rtf_acl_local_vars_acl_outer

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rtf_acl_outer_fwd_layer_and_rtf_stage_pack_fields_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_acl_local_vars_fwd_layer_and_rtf_stage_compressed_fields(self):
        return npl_fwd_layer_and_rtf_stage_compressed_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_acl_local_vars_fwd_layer_and_rtf_stage_compressed_fields.setter
    def rtf_acl_local_vars_fwd_layer_and_rtf_stage_compressed_fields(self, value):
        self._set_field_value('field rtf_acl_local_vars_fwd_layer_and_rtf_stage_compressed_fields', 0, 3, npl_fwd_layer_and_rtf_stage_compressed_fields_t, value)
    @property
    def rtf_acl_local_vars_acl_outer(self):
        return self._get_field_value(3, 1)
    @rtf_acl_local_vars_acl_outer.setter
    def rtf_acl_local_vars_acl_outer(self, value):
        self._set_field_value('field rtf_acl_local_vars_acl_outer', 3, 1, int, value)

class npl_ipv6_rtf_acl_outer_fwd_layer_and_rtf_stage_pack_fields_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rtf_acl_outer_fwd_layer_and_rtf_stage_pack_fields_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_acl_local_vars_acl_outer_fwd_layer_and_rtf_stage_compressed_fields(self):
        return npl_rtf_compressed_fields_for_next_macro_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_acl_local_vars_acl_outer_fwd_layer_and_rtf_stage_compressed_fields.setter
    def rtf_acl_local_vars_acl_outer_fwd_layer_and_rtf_stage_compressed_fields(self, value):
        self._set_field_value('field rtf_acl_local_vars_acl_outer_fwd_layer_and_rtf_stage_compressed_fields', 0, 4, npl_rtf_compressed_fields_for_next_macro_t, value)

class npl_ipv6_rtf_acl_outer_fwd_layer_and_rtf_stage_pack_fields_table_value_t(basic_npl_struct):
    def __init__(self, rtf_acl_local_vars_acl_outer_fwd_layer_and_rtf_stage_compressed_fields=0):
        super().__init__(12)
        self.payloads.rtf_acl_local_vars_acl_outer_fwd_layer_and_rtf_stage_compressed_fields = rtf_acl_local_vars_acl_outer_fwd_layer_and_rtf_stage_compressed_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rtf_acl_outer_fwd_layer_and_rtf_stage_pack_fields_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_rtf_acl_outer_fwd_layer_and_rtf_stage_pack_fields_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_ipv6_rtf_acl_outer_fwd_layer_and_rtf_stage_pack_fields_table_payloads_t, value)



# API-s for table: ipv6_rtf_conf_set_mapping_table

NPL_IPV6_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_rtf_conf_set_mapping_table_key_t(basic_npl_struct):
    def __init__(self, rtf_step=0, lp_rtf_conf_set=0):
        super().__init__(10)
        self.rtf_step = rtf_step
        self.lp_rtf_conf_set = lp_rtf_conf_set

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rtf_conf_set_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_step(self):
        return npl_rtf_step_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_step.setter
    def rtf_step(self, value):
        self._set_field_value('field rtf_step', 0, 2, npl_rtf_step_t, value)
    @property
    def lp_rtf_conf_set(self):
        return npl_lp_rtf_conf_set_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @lp_rtf_conf_set.setter
    def lp_rtf_conf_set(self, value):
        self._set_field_value('field lp_rtf_conf_set', 2, 8, npl_lp_rtf_conf_set_t, value)

class npl_ipv6_rtf_conf_set_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rtf_conf_set_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipv6_rtf_iteration_prop(self):
        return npl_ip_rtf_iteration_properties_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ipv6_rtf_iteration_prop.setter
    def ipv6_rtf_iteration_prop(self, value):
        self._set_field_value('field ipv6_rtf_iteration_prop', 0, 24, npl_ip_rtf_iteration_properties_t, value)

class npl_ipv6_rtf_conf_set_mapping_table_value_t(basic_npl_struct):
    def __init__(self, ipv6_rtf_iteration_prop=0):
        super().__init__(32)
        self.payloads.ipv6_rtf_iteration_prop = ipv6_rtf_iteration_prop

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rtf_conf_set_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_rtf_conf_set_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv6_rtf_conf_set_mapping_table_payloads_t, value)



# API-s for table: ipv6_rtf_next_macro_pack_fields_table

NPL_IPV6_RTF_NEXT_MACRO_PACK_FIELDS_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_rtf_next_macro_pack_fields_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__type_3_0_=0):
        super().__init__(8)
        self._set_field_value('const field', 4, 4, int, 0x6)
        self.packet_protocol_layer_next__type_3_0_ = packet_protocol_layer_next__type_3_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rtf_next_macro_pack_fields_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__type_3_0_(self):
        return self._get_field_value(0, 4)
    @packet_protocol_layer_next__type_3_0_.setter
    def packet_protocol_layer_next__type_3_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__type_3_0_', 0, 4, int, value)
    @property
    def const1_PROTOCOL_TYPE_IPV6_3_0__exact_0x6(self):
        return self._get_field_value(4, 4)

class npl_ipv6_rtf_next_macro_pack_fields_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rtf_next_macro_pack_fields_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type(self):
        return npl_curr_and_next_prot_type_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type.setter
    def rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type(self, value):
        self._set_field_value('field rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type', 0, 8, npl_curr_and_next_prot_type_t, value)

class npl_ipv6_rtf_next_macro_pack_fields_table_value_t(basic_npl_struct):
    def __init__(self, rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type=0):
        super().__init__(16)
        self.payloads.rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type = rtf_acl_local_vars_rtf_next_macro_pack_fields_curr_and_next_prot_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_rtf_next_macro_pack_fields_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_rtf_next_macro_pack_fields_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_ipv6_rtf_next_macro_pack_fields_table_payloads_t, value)



# API-s for table: ipv6_sip_compression_compound_table

NPL_IPV6_SIP_COMPRESSION_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_sip_compression_compound_table_key_t(basic_npl_struct):
    def __init__(self, sip=0):
        super().__init__(132)
        self._set_field_value('const field', 0, 4, int, 0x0)
        self.sip = sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_sip_compression_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_TERM_ACL_DB_IPV6_SIP_COMPRESSION_ternary_0x0(self):
        return self._get_field_value(0, 4)
    @property
    def sip(self):
        return self._get_field_value(4, 128)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 4, 128, int, value)

class npl_ipv6_sip_compression_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_sip_compression_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_compressed_sip(self):
        return self._get_field_value(0, 16)
    @pd_compressed_sip.setter
    def pd_compressed_sip(self, value):
        self._set_field_value('field pd_compressed_sip', 0, 16, int, value)

class npl_ipv6_sip_compression_compound_table_value_t(basic_npl_struct):
    def __init__(self, pd_compressed_sip=0):
        super().__init__(24)
        self.payloads.pd_compressed_sip = pd_compressed_sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_sip_compression_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_sip_compression_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_ipv6_sip_compression_compound_table_payloads_t, value)



# API-s for table: ipv6_sip_compression_table

NPL_IPV6_SIP_COMPRESSION_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_sip_compression_table_key_t(basic_npl_struct):
    def __init__(self, ipv6_sip=0):
        super().__init__(128)
        self.ipv6_sip = ipv6_sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_sip_compression_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipv6_sip(self):
        return self._get_field_value(0, 128)
    @ipv6_sip.setter
    def ipv6_sip(self, value):
        self._set_field_value('field ipv6_sip', 0, 128, int, value)

class npl_ipv6_sip_compression_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_sip_compression_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def compressed_sip(self):
        return self._get_field_value(0, 16)
    @compressed_sip.setter
    def compressed_sip(self, value):
        self._set_field_value('field compressed_sip', 0, 16, int, value)

class npl_ipv6_sip_compression_table_value_t(basic_npl_struct):
    def __init__(self, compressed_sip=0):
        super().__init__(24)
        self.payloads.compressed_sip = compressed_sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_sip_compression_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_sip_compression_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_ipv6_sip_compression_table_payloads_t, value)



# API-s for table: ipv6_vrf_dip_compound_table

NPL_IPV6_VRF_DIP_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_vrf_dip_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dip=0, pd_layer_vars_l3_relay_id=0):
        super().__init__(144)
        self._set_field_value('const field', 0, 2, int, 0x3)
        self._set_field_value('const field', 2, 2, int, 0x3)
        self._set_field_value('const field', 4, 1, int, 0x0)
        self.packet_ipv6_header_dip = packet_ipv6_header_dip
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_dip_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b11_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_EM_LDB_IPV6_VRF_DIP_exact_0x3(self):
        return self._get_field_value(2, 2)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(4, 1)
    @property
    def packet_ipv6_header_dip(self):
        return self._get_field_value(5, 128)
    @packet_ipv6_header_dip.setter
    def packet_ipv6_header_dip(self, value):
        self._set_field_value('field packet_ipv6_header_dip', 5, 128, int, value)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 133)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 133, 11, npl_l3_relay_id_t, value)

class npl_ipv6_vrf_dip_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(88)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_dip_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_em_lpm_result(self):
        return npl_ip_em_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_em_lpm_result.setter
    def ip_em_lpm_result(self, value):
        self._set_field_value('field ip_em_lpm_result', 0, 88, npl_ip_em_lpm_result_t, value)

class npl_ipv6_vrf_dip_compound_table_value_t(basic_npl_struct):
    def __init__(self, ip_em_lpm_result=0):
        super().__init__(96)
        self.payloads.ip_em_lpm_result = ip_em_lpm_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_dip_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(88, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 88, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_vrf_dip_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 88, npl_ipv6_vrf_dip_compound_table_payloads_t, value)



# API-s for table: ipv6_vrf_dip_em_table

NPL_IPV6_VRF_DIP_EM_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_vrf_dip_em_table_key_t(basic_npl_struct):
    def __init__(self, ipv6_ip_address_address=0, l3_relay_id=0):
        super().__init__(140)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self.ipv6_ip_address_address = ipv6_ip_address_address
        self.l3_relay_id = l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_dip_em_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def ipv6_ip_address_address(self):
        return self._get_field_value(1, 128)
    @ipv6_ip_address_address.setter
    def ipv6_ip_address_address(self, value):
        self._set_field_value('field ipv6_ip_address_address', 1, 128, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 129)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 129, 11, npl_l3_relay_id_t, value)

class npl_ipv6_vrf_dip_em_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_dip_em_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def em_lookup_result(self):
        return npl_ip_em_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @em_lookup_result.setter
    def em_lookup_result(self, value):
        self._set_field_value('field em_lookup_result', 0, 64, npl_ip_em_result_t, value)

class npl_ipv6_vrf_dip_em_table_value_t(basic_npl_struct):
    def __init__(self, em_lookup_result=0):
        super().__init__(72)
        self.payloads.em_lookup_result = em_lookup_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_dip_em_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_vrf_dip_em_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv6_vrf_dip_em_table_payloads_t, value)



# API-s for table: ipv6_vrf_dip_lpm_compound_table

NPL_IPV6_VRF_DIP_LPM_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_vrf_dip_lpm_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dip=0, pd_layer_vars_l3_relay_id=0):
        super().__init__(142)
        self._set_field_value('const field', 0, 2, int, 0x3)
        self._set_field_value('const field', 2, 1, int, 0x0)
        self.packet_ipv6_header_dip = packet_ipv6_header_dip
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_dip_lpm_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_LPM_LDB_IPV6_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(2, 1)
    @property
    def packet_ipv6_header_dip(self):
        return self._get_field_value(3, 128)
    @packet_ipv6_header_dip.setter
    def packet_ipv6_header_dip(self, value):
        self._set_field_value('field packet_ipv6_header_dip', 3, 128, int, value)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 131)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 131, 11, npl_l3_relay_id_t, value)

class npl_ipv6_vrf_dip_lpm_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_dip_lpm_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_lpm_result(self):
        return npl_ip_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_lpm_result.setter
    def ip_lpm_result(self, value):
        self._set_field_value('field ip_lpm_result', 0, 24, npl_ip_lpm_result_t, value)

class npl_ipv6_vrf_dip_lpm_compound_table_value_t(basic_npl_struct):
    def __init__(self, ip_lpm_result=0):
        super().__init__(32)
        self.payloads.ip_lpm_result = ip_lpm_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_dip_lpm_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_vrf_dip_lpm_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv6_vrf_dip_lpm_compound_table_payloads_t, value)



# API-s for table: ipv6_vrf_s_g_table

NPL_IPV6_VRF_S_G_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_vrf_s_g_table_key_t(basic_npl_struct):
    def __init__(self, dip_32_lsb=0, compressed_sip=0, l3_relay_id=0):
        super().__init__(59)
        self.dip_32_lsb = dip_32_lsb
        self.compressed_sip = compressed_sip
        self.l3_relay_id = l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_s_g_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dip_32_lsb(self):
        return self._get_field_value(0, 32)
    @dip_32_lsb.setter
    def dip_32_lsb(self, value):
        self._set_field_value('field dip_32_lsb', 0, 32, int, value)
    @property
    def compressed_sip(self):
        return self._get_field_value(32, 16)
    @compressed_sip.setter
    def compressed_sip(self, value):
        self._set_field_value('field compressed_sip', 32, 16, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 48)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 48, 11, npl_l3_relay_id_t, value)

class npl_ipv6_vrf_s_g_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_s_g_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vrf_s_g_hw_ip_mc_result(self):
        return npl_ip_mc_result_em_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vrf_s_g_hw_ip_mc_result.setter
    def vrf_s_g_hw_ip_mc_result(self, value):
        self._set_field_value('field vrf_s_g_hw_ip_mc_result', 0, 64, npl_ip_mc_result_em_payload_t, value)

class npl_ipv6_vrf_s_g_table_value_t(basic_npl_struct):
    def __init__(self, vrf_s_g_hw_ip_mc_result=0):
        super().__init__(72)
        self.payloads.vrf_s_g_hw_ip_mc_result = vrf_s_g_hw_ip_mc_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_s_g_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_vrf_s_g_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_ipv6_vrf_s_g_table_payloads_t, value)



# API-s for table: ipv6_vrf_sip_compound_table

NPL_IPV6_VRF_SIP_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_ipv6_vrf_sip_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_sip_31_0_=0, packet_ipv4_header_dip_19_0_=0, packet_ipv4_header_dip_31_20_=0, packet_ipv4_header_sip_19_0_=0, packet_ipv4_header_sip_31_20_=0, packet_ipv6_header_sip_111_96_=0, packet_ipv4_header_ttl_and_protocol=0, pd_layer_vars_l3_relay_id=0):
        super().__init__(142)
        self._set_field_value('const field', 0, 2, int, 0x3)
        self._set_field_value('const field', 2, 1, int, 0x0)
        self.packet_ipv6_header_sip_31_0_ = packet_ipv6_header_sip_31_0_
        self.packet_ipv4_header_dip_19_0_ = packet_ipv4_header_dip_19_0_
        self.packet_ipv4_header_dip_31_20_ = packet_ipv4_header_dip_31_20_
        self.packet_ipv4_header_sip_19_0_ = packet_ipv4_header_sip_19_0_
        self.packet_ipv4_header_sip_31_20_ = packet_ipv4_header_sip_31_20_
        self.packet_ipv6_header_sip_111_96_ = packet_ipv6_header_sip_111_96_
        self.packet_ipv4_header_ttl_and_protocol = packet_ipv4_header_ttl_and_protocol
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_sip_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_LPM_LDB_IPV6_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(2, 1)
    @property
    def packet_ipv6_header_sip_31_0_(self):
        return self._get_field_value(3, 32)
    @packet_ipv6_header_sip_31_0_.setter
    def packet_ipv6_header_sip_31_0_(self, value):
        self._set_field_value('field packet_ipv6_header_sip_31_0_', 3, 32, int, value)
    @property
    def packet_ipv4_header_dip_19_0_(self):
        return self._get_field_value(35, 20)
    @packet_ipv4_header_dip_19_0_.setter
    def packet_ipv4_header_dip_19_0_(self, value):
        self._set_field_value('field packet_ipv4_header_dip_19_0_', 35, 20, int, value)
    @property
    def packet_ipv4_header_dip_31_20_(self):
        return self._get_field_value(55, 12)
    @packet_ipv4_header_dip_31_20_.setter
    def packet_ipv4_header_dip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_dip_31_20_', 55, 12, int, value)
    @property
    def packet_ipv4_header_sip_19_0_(self):
        return self._get_field_value(67, 20)
    @packet_ipv4_header_sip_19_0_.setter
    def packet_ipv4_header_sip_19_0_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_19_0_', 67, 20, int, value)
    @property
    def packet_ipv4_header_sip_31_20_(self):
        return self._get_field_value(87, 12)
    @packet_ipv4_header_sip_31_20_.setter
    def packet_ipv4_header_sip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_31_20_', 87, 12, int, value)
    @property
    def packet_ipv6_header_sip_111_96_(self):
        return self._get_field_value(99, 16)
    @packet_ipv6_header_sip_111_96_.setter
    def packet_ipv6_header_sip_111_96_(self, value):
        self._set_field_value('field packet_ipv6_header_sip_111_96_', 99, 16, int, value)
    @property
    def packet_ipv4_header_ttl_and_protocol(self):
        return npl_ipv4_ttl_and_protocol_t._get_as_sub_field(self._data, self._offset_in_data + 115)
    @packet_ipv4_header_ttl_and_protocol.setter
    def packet_ipv4_header_ttl_and_protocol(self, value):
        self._set_field_value('field packet_ipv4_header_ttl_and_protocol', 115, 16, npl_ipv4_ttl_and_protocol_t, value)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 131)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 131, 11, npl_l3_relay_id_t, value)

class npl_ipv6_vrf_sip_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_sip_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_rx_local_vars_uc_rpf_v6_result(self):
        return npl_ip_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_rx_local_vars_uc_rpf_v6_result.setter
    def ip_rx_local_vars_uc_rpf_v6_result(self, value):
        self._set_field_value('field ip_rx_local_vars_uc_rpf_v6_result', 0, 24, npl_ip_lpm_result_t, value)

class npl_ipv6_vrf_sip_compound_table_value_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_uc_rpf_v6_result=0):
        super().__init__(32)
        self.payloads.ip_rx_local_vars_uc_rpf_v6_result = ip_rx_local_vars_uc_rpf_v6_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ipv6_vrf_sip_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_ipv6_vrf_sip_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_ipv6_vrf_sip_compound_table_payloads_t, value)



# API-s for table: is_pacific_b1_static_table

NPL_IS_PACIFIC_B1_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_is_pacific_b1_static_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_is_pacific_b1_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_is_pacific_b1_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_is_pacific_b1_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def is_pacific_b1(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @is_pacific_b1.setter
    def is_pacific_b1(self, value):
        self._set_field_value('field is_pacific_b1', 0, 1, npl_bool_t, value)

class npl_is_pacific_b1_static_table_value_t(basic_npl_struct):
    def __init__(self, is_pacific_b1=0):
        super().__init__(9)
        self.payloads.is_pacific_b1 = is_pacific_b1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_is_pacific_b1_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_is_pacific_b1_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_is_pacific_b1_static_table_payloads_t, value)



# API-s for table: l2_dlp_table

NPL_L2_DLP_TABLE_ACTION_WRITE = 0x0

class npl_l2_dlp_table_key_t(basic_npl_struct):
    def __init__(self, l2_dlp_id_key_id=0):
        super().__init__(18)
        self.l2_dlp_id_key_id = l2_dlp_id_key_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_dlp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_dlp_id_key_id(self):
        return self._get_field_value(0, 18)
    @l2_dlp_id_key_id.setter
    def l2_dlp_id_key_id(self, value):
        self._set_field_value('field l2_dlp_id_key_id', 0, 18, int, value)

class npl_l2_dlp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(118)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_dlp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_dlp_attributes(self):
        return npl_l2_dlp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_dlp_attributes.setter
    def l2_dlp_attributes(self, value):
        self._set_field_value('field l2_dlp_attributes', 0, 118, npl_l2_dlp_attributes_t, value)

class npl_l2_dlp_table_value_t(basic_npl_struct):
    def __init__(self, l2_dlp_attributes=0):
        super().__init__(126)
        self.payloads.l2_dlp_attributes = l2_dlp_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_dlp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(118, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 118, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_dlp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 118, npl_l2_dlp_table_payloads_t, value)



# API-s for table: l2_dlp_table_compound

NPL_L2_DLP_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_l2_dlp_table_compound_key_t(basic_npl_struct):
    def __init__(self, l2_dlp_id_key_id=0):
        super().__init__(24)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0x7)
        self.l2_dlp_id_key_id = l2_dlp_id_key_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_dlp_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_L2_DLP_TABLE_LDB_exact_0x7(self):
        return self._get_field_value(2, 4)
    @property
    def l2_dlp_id_key_id(self):
        return self._get_field_value(6, 18)
    @l2_dlp_id_key_id.setter
    def l2_dlp_id_key_id(self, value):
        self._set_field_value('field l2_dlp_id_key_id', 6, 18, int, value)

class npl_l2_dlp_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(118)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_dlp_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_dlp_attributes(self):
        return npl_l2_dlp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_dlp_attributes.setter
    def l2_dlp_attributes(self, value):
        self._set_field_value('field l2_dlp_attributes', 0, 118, npl_l2_dlp_attributes_t, value)

class npl_l2_dlp_table_compound_value_t(basic_npl_struct):
    def __init__(self, l2_dlp_attributes=0):
        super().__init__(126)
        self.payloads.l2_dlp_attributes = l2_dlp_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_dlp_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(118, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 118, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_dlp_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 118, npl_l2_dlp_table_compound_payloads_t, value)



# API-s for table: l2_lp_profile_filter_table

NPL_L2_LP_PROFILE_FILTER_TABLE_ACTION_WRITE = 0x0

class npl_l2_lp_profile_filter_table_key_t(basic_npl_struct):
    def __init__(self, lp_profile=0, slp_profile=0):
        super().__init__(4)
        self.lp_profile = lp_profile
        self.slp_profile = slp_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lp_profile_filter_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lp_profile(self):
        return self._get_field_value(0, 2)
    @lp_profile.setter
    def lp_profile(self, value):
        self._set_field_value('field lp_profile', 0, 2, int, value)
    @property
    def slp_profile(self):
        return self._get_field_value(2, 2)
    @slp_profile.setter
    def slp_profile(self, value):
        self._set_field_value('field slp_profile', 2, 2, int, value)

class npl_l2_lp_profile_filter_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lp_profile_filter_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def split_horizon(self):
        return self._get_field_value(0, 1)
    @split_horizon.setter
    def split_horizon(self, value):
        self._set_field_value('field split_horizon', 0, 1, int, value)

class npl_l2_lp_profile_filter_table_value_t(basic_npl_struct):
    def __init__(self, split_horizon=0):
        super().__init__(9)
        self.payloads.split_horizon = split_horizon

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lp_profile_filter_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lp_profile_filter_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_l2_lp_profile_filter_table_payloads_t, value)



# API-s for table: l2_lpts_ctrl_fields_static_table

NPL_L2_LPTS_CTRL_FIELDS_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_l2_lpts_ctrl_fields_static_table_key_t(basic_npl_struct):
    def __init__(self, is_svi=0, is_tagged=0, mac_terminated=0, mac_lp_type=0):
        super().__init__(4)
        self.is_svi = is_svi
        self.is_tagged = is_tagged
        self.mac_terminated = mac_terminated
        self.mac_lp_type = mac_lp_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ctrl_fields_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def is_svi(self):
        return self._get_field_value(0, 1)
    @is_svi.setter
    def is_svi(self, value):
        self._set_field_value('field is_svi', 0, 1, int, value)
    @property
    def is_tagged(self):
        return self._get_field_value(1, 1)
    @is_tagged.setter
    def is_tagged(self, value):
        self._set_field_value('field is_tagged', 1, 1, int, value)
    @property
    def mac_terminated(self):
        return self._get_field_value(2, 1)
    @mac_terminated.setter
    def mac_terminated(self, value):
        self._set_field_value('field mac_terminated', 2, 1, int, value)
    @property
    def mac_lp_type(self):
        return self._get_field_value(3, 1)
    @mac_lp_type.setter
    def mac_lp_type(self, value):
        self._set_field_value('field mac_lp_type', 3, 1, int, value)

class npl_l2_lpts_ctrl_fields_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ctrl_fields_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ctrl_fields(self):
        return self._get_field_value(0, 4)
    @ctrl_fields.setter
    def ctrl_fields(self, value):
        self._set_field_value('field ctrl_fields', 0, 4, int, value)

class npl_l2_lpts_ctrl_fields_static_table_value_t(basic_npl_struct):
    def __init__(self, ctrl_fields=0):
        super().__init__(12)
        self.payloads.ctrl_fields = ctrl_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ctrl_fields_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_ctrl_fields_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_l2_lpts_ctrl_fields_static_table_payloads_t, value)



# API-s for table: l2_lpts_ip_fragment_static_table

NPL_L2_LPTS_IP_FRAGMENT_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_l2_lpts_ip_fragment_static_table_key_t(basic_npl_struct):
    def __init__(self, ipv6_not_first_fragment=0, ipv4_not_first_fragment=0):
        super().__init__(2)
        self.ipv6_not_first_fragment = ipv6_not_first_fragment
        self.ipv4_not_first_fragment = ipv4_not_first_fragment

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ip_fragment_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipv6_not_first_fragment(self):
        return self._get_field_value(0, 1)
    @ipv6_not_first_fragment.setter
    def ipv6_not_first_fragment(self, value):
        self._set_field_value('field ipv6_not_first_fragment', 0, 1, int, value)
    @property
    def ipv4_not_first_fragment(self):
        return self._get_field_value(1, 1)
    @ipv4_not_first_fragment.setter
    def ipv4_not_first_fragment(self, value):
        self._set_field_value('field ipv4_not_first_fragment', 1, 1, int, value)

class npl_l2_lpts_ip_fragment_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ip_fragment_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_fragment(self):
        return npl_l2_lpts_ip_fragment_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_fragment.setter
    def ip_fragment(self, value):
        self._set_field_value('field ip_fragment', 0, 2, npl_l2_lpts_ip_fragment_t, value)

class npl_l2_lpts_ip_fragment_static_table_value_t(basic_npl_struct):
    def __init__(self, ip_fragment=0):
        super().__init__(10)
        self.payloads.ip_fragment = ip_fragment

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ip_fragment_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_ip_fragment_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_l2_lpts_ip_fragment_static_table_payloads_t, value)



# API-s for table: l2_lpts_ipv4_compound_table

NPL_L2_LPTS_IPV4_COMPOUND_TABLE_ACTION_L2_LPTS_RESULT = 0x0

class npl_l2_lpts_ipv4_compound_table_l2_lpts_result_payload_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(32)
        self.l2_lpts_trap_vector = l2_lpts_trap_vector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv4_compound_table_l2_lpts_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def l2_lpts_trap_vector(self):
        return npl_l2_lpts_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_trap_vector.setter
    def l2_lpts_trap_vector(self, value):
        self._set_field_value('field l2_lpts_trap_vector', 0, 32, npl_l2_lpts_payload_t, value)




class npl_l2_lpts_ipv4_compound_table_key_t(basic_npl_struct):
    def __init__(self, ip_not_first_fragment=0, ctrl_fields=0, l2_slp_attributes=0, bd_attributes=0, npp_attributes=0, ttl_and_protocol=0, l4_ports=0, dip=0):
        super().__init__(106)
        self._set_field_value('const field', 0, 4, int, 0x8)
        self.ip_not_first_fragment = ip_not_first_fragment
        self.ctrl_fields = ctrl_fields
        self.l2_slp_attributes = l2_slp_attributes
        self.bd_attributes = bd_attributes
        self.npp_attributes = npp_attributes
        self.ttl_and_protocol = ttl_and_protocol
        self.l4_ports = l4_ports
        self.dip = dip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv4_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_TERM_ACL_DB_L2_LPTS_IPV4_ternary_0x8(self):
        return self._get_field_value(0, 4)
    @property
    def ip_not_first_fragment(self):
        return npl_l2_lpts_ip_fragment_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @ip_not_first_fragment.setter
    def ip_not_first_fragment(self, value):
        self._set_field_value('field ip_not_first_fragment', 4, 2, npl_l2_lpts_ip_fragment_t, value)
    @property
    def ctrl_fields(self):
        return self._get_field_value(6, 4)
    @ctrl_fields.setter
    def ctrl_fields(self, value):
        self._set_field_value('field ctrl_fields', 6, 4, int, value)
    @property
    def l2_slp_attributes(self):
        return self._get_field_value(10, 2)
    @l2_slp_attributes.setter
    def l2_slp_attributes(self, value):
        self._set_field_value('field l2_slp_attributes', 10, 2, int, value)
    @property
    def bd_attributes(self):
        return self._get_field_value(12, 6)
    @bd_attributes.setter
    def bd_attributes(self, value):
        self._set_field_value('field bd_attributes', 12, 6, int, value)
    @property
    def npp_attributes(self):
        return self._get_field_value(18, 8)
    @npp_attributes.setter
    def npp_attributes(self, value):
        self._set_field_value('field npp_attributes', 18, 8, int, value)
    @property
    def ttl_and_protocol(self):
        return npl_ipv4_ttl_and_protocol_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @ttl_and_protocol.setter
    def ttl_and_protocol(self, value):
        self._set_field_value('field ttl_and_protocol', 26, 16, npl_ipv4_ttl_and_protocol_t, value)
    @property
    def l4_ports(self):
        return npl_l4_ports_header_t._get_as_sub_field(self._data, self._offset_in_data + 42)
    @l4_ports.setter
    def l4_ports(self, value):
        self._set_field_value('field l4_ports', 42, 32, npl_l4_ports_header_t, value)
    @property
    def dip(self):
        return self._get_field_value(74, 32)
    @dip.setter
    def dip(self, value):
        self._set_field_value('field dip', 74, 32, int, value)

class npl_l2_lpts_ipv4_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv4_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_lpts_result(self):
        return npl_l2_lpts_ipv4_compound_table_l2_lpts_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_result.setter
    def l2_lpts_result(self, value):
        self._set_field_value('field l2_lpts_result', 0, 32, npl_l2_lpts_ipv4_compound_table_l2_lpts_result_payload_t, value)

class npl_l2_lpts_ipv4_compound_table_value_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(40)
        self.payloads.l2_lpts_result = npl_l2_lpts_ipv4_compound_table_l2_lpts_result_payload_t(l2_lpts_trap_vector)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv4_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_ipv4_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_l2_lpts_ipv4_compound_table_payloads_t, value)



# API-s for table: l2_lpts_ipv4_table

NPL_L2_LPTS_IPV4_TABLE_ACTION_L2_LPTS_RESULT = 0x0

class npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(32)
        self.l2_lpts_trap_vector = l2_lpts_trap_vector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def l2_lpts_trap_vector(self):
        return npl_l2_lpts_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_trap_vector.setter
    def l2_lpts_trap_vector(self, value):
        self._set_field_value('field l2_lpts_trap_vector', 0, 32, npl_l2_lpts_payload_t, value)




class npl_l2_lpts_ipv4_table_key_t(basic_npl_struct):
    def __init__(self, ip_not_first_fragment=0, is_svi=0, is_tagged=0, mac_terminated=0, mac_lp_type=0, l2_slp_attributes=0, bd_attributes=0, npp_attributes=0, protocol=0, ttl=0, l4_ports=0, dip=0):
        super().__init__(102)
        self.ip_not_first_fragment = ip_not_first_fragment
        self.is_svi = is_svi
        self.is_tagged = is_tagged
        self.mac_terminated = mac_terminated
        self.mac_lp_type = mac_lp_type
        self.l2_slp_attributes = l2_slp_attributes
        self.bd_attributes = bd_attributes
        self.npp_attributes = npp_attributes
        self.protocol = protocol
        self.ttl = ttl
        self.l4_ports = l4_ports
        self.dip = dip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv4_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_not_first_fragment(self):
        return npl_l2_lpts_ip_fragment_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_not_first_fragment.setter
    def ip_not_first_fragment(self, value):
        self._set_field_value('field ip_not_first_fragment', 0, 2, npl_l2_lpts_ip_fragment_t, value)
    @property
    def is_svi(self):
        return self._get_field_value(2, 1)
    @is_svi.setter
    def is_svi(self, value):
        self._set_field_value('field is_svi', 2, 1, int, value)
    @property
    def is_tagged(self):
        return self._get_field_value(3, 1)
    @is_tagged.setter
    def is_tagged(self, value):
        self._set_field_value('field is_tagged', 3, 1, int, value)
    @property
    def mac_terminated(self):
        return self._get_field_value(4, 1)
    @mac_terminated.setter
    def mac_terminated(self, value):
        self._set_field_value('field mac_terminated', 4, 1, int, value)
    @property
    def mac_lp_type(self):
        return self._get_field_value(5, 1)
    @mac_lp_type.setter
    def mac_lp_type(self, value):
        self._set_field_value('field mac_lp_type', 5, 1, int, value)
    @property
    def l2_slp_attributes(self):
        return self._get_field_value(6, 2)
    @l2_slp_attributes.setter
    def l2_slp_attributes(self, value):
        self._set_field_value('field l2_slp_attributes', 6, 2, int, value)
    @property
    def bd_attributes(self):
        return self._get_field_value(8, 6)
    @bd_attributes.setter
    def bd_attributes(self, value):
        self._set_field_value('field bd_attributes', 8, 6, int, value)
    @property
    def npp_attributes(self):
        return self._get_field_value(14, 8)
    @npp_attributes.setter
    def npp_attributes(self, value):
        self._set_field_value('field npp_attributes', 14, 8, int, value)
    @property
    def protocol(self):
        return self._get_field_value(22, 8)
    @protocol.setter
    def protocol(self, value):
        self._set_field_value('field protocol', 22, 8, int, value)
    @property
    def ttl(self):
        return self._get_field_value(30, 8)
    @ttl.setter
    def ttl(self, value):
        self._set_field_value('field ttl', 30, 8, int, value)
    @property
    def l4_ports(self):
        return npl_l4_ports_header_t._get_as_sub_field(self._data, self._offset_in_data + 38)
    @l4_ports.setter
    def l4_ports(self, value):
        self._set_field_value('field l4_ports', 38, 32, npl_l4_ports_header_t, value)
    @property
    def dip(self):
        return self._get_field_value(70, 32)
    @dip.setter
    def dip(self, value):
        self._set_field_value('field dip', 70, 32, int, value)

class npl_l2_lpts_ipv4_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv4_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_lpts_result(self):
        return npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_result.setter
    def l2_lpts_result(self, value):
        self._set_field_value('field l2_lpts_result', 0, 32, npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t, value)

class npl_l2_lpts_ipv4_table_value_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(40)
        self.payloads.l2_lpts_result = npl_l2_lpts_ipv4_table_l2_lpts_result_payload_t(l2_lpts_trap_vector)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv4_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_ipv4_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_l2_lpts_ipv4_table_payloads_t, value)



# API-s for table: l2_lpts_ipv6_compound_table

NPL_L2_LPTS_IPV6_COMPOUND_TABLE_ACTION_L2_LPTS_RESULT = 0x0

class npl_l2_lpts_ipv6_compound_table_l2_lpts_result_payload_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(32)
        self.l2_lpts_trap_vector = l2_lpts_trap_vector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv6_compound_table_l2_lpts_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def l2_lpts_trap_vector(self):
        return npl_l2_lpts_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_trap_vector.setter
    def l2_lpts_trap_vector(self, value):
        self._set_field_value('field l2_lpts_trap_vector', 0, 32, npl_l2_lpts_payload_t, value)




class npl_l2_lpts_ipv6_compound_table_key_t(basic_npl_struct):
    def __init__(self, ip_not_first_fragment=0, ctrl_fields=0, l2_slp_attributes=0, bd_attributes=0, npp_attributes=0, nh_and_hlimit=0, l4_ports=0, dip_31_0=0, dip_127_96=0):
        super().__init__(138)
        self._set_field_value('const field', 0, 4, int, 0xc)
        self.ip_not_first_fragment = ip_not_first_fragment
        self.ctrl_fields = ctrl_fields
        self.l2_slp_attributes = l2_slp_attributes
        self.bd_attributes = bd_attributes
        self.npp_attributes = npp_attributes
        self.nh_and_hlimit = nh_and_hlimit
        self.l4_ports = l4_ports
        self.dip_31_0 = dip_31_0
        self.dip_127_96 = dip_127_96

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv6_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_TERM_ACL_DB_L2_LPTS_IPV6_ternary_0xc(self):
        return self._get_field_value(0, 4)
    @property
    def ip_not_first_fragment(self):
        return npl_l2_lpts_ip_fragment_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @ip_not_first_fragment.setter
    def ip_not_first_fragment(self, value):
        self._set_field_value('field ip_not_first_fragment', 4, 2, npl_l2_lpts_ip_fragment_t, value)
    @property
    def ctrl_fields(self):
        return self._get_field_value(6, 4)
    @ctrl_fields.setter
    def ctrl_fields(self, value):
        self._set_field_value('field ctrl_fields', 6, 4, int, value)
    @property
    def l2_slp_attributes(self):
        return self._get_field_value(10, 2)
    @l2_slp_attributes.setter
    def l2_slp_attributes(self, value):
        self._set_field_value('field l2_slp_attributes', 10, 2, int, value)
    @property
    def bd_attributes(self):
        return self._get_field_value(12, 6)
    @bd_attributes.setter
    def bd_attributes(self, value):
        self._set_field_value('field bd_attributes', 12, 6, int, value)
    @property
    def npp_attributes(self):
        return self._get_field_value(18, 8)
    @npp_attributes.setter
    def npp_attributes(self, value):
        self._set_field_value('field npp_attributes', 18, 8, int, value)
    @property
    def nh_and_hlimit(self):
        return npl_ipv6_next_header_and_hop_limit_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @nh_and_hlimit.setter
    def nh_and_hlimit(self, value):
        self._set_field_value('field nh_and_hlimit', 26, 16, npl_ipv6_next_header_and_hop_limit_t, value)
    @property
    def l4_ports(self):
        return npl_l4_ports_header_t._get_as_sub_field(self._data, self._offset_in_data + 42)
    @l4_ports.setter
    def l4_ports(self, value):
        self._set_field_value('field l4_ports', 42, 32, npl_l4_ports_header_t, value)
    @property
    def dip_31_0(self):
        return self._get_field_value(74, 32)
    @dip_31_0.setter
    def dip_31_0(self, value):
        self._set_field_value('field dip_31_0', 74, 32, int, value)
    @property
    def dip_127_96(self):
        return self._get_field_value(106, 32)
    @dip_127_96.setter
    def dip_127_96(self, value):
        self._set_field_value('field dip_127_96', 106, 32, int, value)

class npl_l2_lpts_ipv6_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv6_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_lpts_result(self):
        return npl_l2_lpts_ipv6_compound_table_l2_lpts_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_result.setter
    def l2_lpts_result(self, value):
        self._set_field_value('field l2_lpts_result', 0, 32, npl_l2_lpts_ipv6_compound_table_l2_lpts_result_payload_t, value)

class npl_l2_lpts_ipv6_compound_table_value_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(40)
        self.payloads.l2_lpts_result = npl_l2_lpts_ipv6_compound_table_l2_lpts_result_payload_t(l2_lpts_trap_vector)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv6_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_ipv6_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_l2_lpts_ipv6_compound_table_payloads_t, value)



# API-s for table: l2_lpts_ipv6_table

NPL_L2_LPTS_IPV6_TABLE_ACTION_L2_LPTS_RESULT = 0x0

class npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(32)
        self.l2_lpts_trap_vector = l2_lpts_trap_vector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def l2_lpts_trap_vector(self):
        return npl_l2_lpts_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_trap_vector.setter
    def l2_lpts_trap_vector(self, value):
        self._set_field_value('field l2_lpts_trap_vector', 0, 32, npl_l2_lpts_payload_t, value)




class npl_l2_lpts_ipv6_table_key_t(basic_npl_struct):
    def __init__(self, ip_not_first_fragment=0, is_svi=0, is_tagged=0, mac_terminated=0, mac_lp_type=0, l2_slp_attributes=0, bd_attributes=0, npp_attributes=0, hop_limit=0, next_header=0, l4_ports=0, dip_32_lsb=0, dip_32_msb=0):
        super().__init__(134)
        self.ip_not_first_fragment = ip_not_first_fragment
        self.is_svi = is_svi
        self.is_tagged = is_tagged
        self.mac_terminated = mac_terminated
        self.mac_lp_type = mac_lp_type
        self.l2_slp_attributes = l2_slp_attributes
        self.bd_attributes = bd_attributes
        self.npp_attributes = npp_attributes
        self.hop_limit = hop_limit
        self.next_header = next_header
        self.l4_ports = l4_ports
        self.dip_32_lsb = dip_32_lsb
        self.dip_32_msb = dip_32_msb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv6_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_not_first_fragment(self):
        return npl_l2_lpts_ip_fragment_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_not_first_fragment.setter
    def ip_not_first_fragment(self, value):
        self._set_field_value('field ip_not_first_fragment', 0, 2, npl_l2_lpts_ip_fragment_t, value)
    @property
    def is_svi(self):
        return self._get_field_value(2, 1)
    @is_svi.setter
    def is_svi(self, value):
        self._set_field_value('field is_svi', 2, 1, int, value)
    @property
    def is_tagged(self):
        return self._get_field_value(3, 1)
    @is_tagged.setter
    def is_tagged(self, value):
        self._set_field_value('field is_tagged', 3, 1, int, value)
    @property
    def mac_terminated(self):
        return self._get_field_value(4, 1)
    @mac_terminated.setter
    def mac_terminated(self, value):
        self._set_field_value('field mac_terminated', 4, 1, int, value)
    @property
    def mac_lp_type(self):
        return self._get_field_value(5, 1)
    @mac_lp_type.setter
    def mac_lp_type(self, value):
        self._set_field_value('field mac_lp_type', 5, 1, int, value)
    @property
    def l2_slp_attributes(self):
        return self._get_field_value(6, 2)
    @l2_slp_attributes.setter
    def l2_slp_attributes(self, value):
        self._set_field_value('field l2_slp_attributes', 6, 2, int, value)
    @property
    def bd_attributes(self):
        return self._get_field_value(8, 6)
    @bd_attributes.setter
    def bd_attributes(self, value):
        self._set_field_value('field bd_attributes', 8, 6, int, value)
    @property
    def npp_attributes(self):
        return self._get_field_value(14, 8)
    @npp_attributes.setter
    def npp_attributes(self, value):
        self._set_field_value('field npp_attributes', 14, 8, int, value)
    @property
    def hop_limit(self):
        return self._get_field_value(22, 8)
    @hop_limit.setter
    def hop_limit(self, value):
        self._set_field_value('field hop_limit', 22, 8, int, value)
    @property
    def next_header(self):
        return self._get_field_value(30, 8)
    @next_header.setter
    def next_header(self, value):
        self._set_field_value('field next_header', 30, 8, int, value)
    @property
    def l4_ports(self):
        return npl_l4_ports_header_t._get_as_sub_field(self._data, self._offset_in_data + 38)
    @l4_ports.setter
    def l4_ports(self, value):
        self._set_field_value('field l4_ports', 38, 32, npl_l4_ports_header_t, value)
    @property
    def dip_32_lsb(self):
        return self._get_field_value(70, 32)
    @dip_32_lsb.setter
    def dip_32_lsb(self, value):
        self._set_field_value('field dip_32_lsb', 70, 32, int, value)
    @property
    def dip_32_msb(self):
        return self._get_field_value(102, 32)
    @dip_32_msb.setter
    def dip_32_msb(self, value):
        self._set_field_value('field dip_32_msb', 102, 32, int, value)

class npl_l2_lpts_ipv6_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv6_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_lpts_result(self):
        return npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_result.setter
    def l2_lpts_result(self, value):
        self._set_field_value('field l2_lpts_result', 0, 32, npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t, value)

class npl_l2_lpts_ipv6_table_value_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(40)
        self.payloads.l2_lpts_result = npl_l2_lpts_ipv6_table_l2_lpts_result_payload_t(l2_lpts_trap_vector)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_ipv6_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_ipv6_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_l2_lpts_ipv6_table_payloads_t, value)



# API-s for table: l2_lpts_mac_compound_table

NPL_L2_LPTS_MAC_COMPOUND_TABLE_ACTION_L2_LPTS_RESULT = 0x0

class npl_l2_lpts_mac_compound_table_l2_lpts_result_payload_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(32)
        self.l2_lpts_trap_vector = l2_lpts_trap_vector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_mac_compound_table_l2_lpts_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def l2_lpts_trap_vector(self):
        return npl_l2_lpts_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_trap_vector.setter
    def l2_lpts_trap_vector(self, value):
        self._set_field_value('field l2_lpts_trap_vector', 0, 32, npl_l2_lpts_payload_t, value)




class npl_l2_lpts_mac_compound_table_key_t(basic_npl_struct):
    def __init__(self, ctrl_fields=0, l2_slp_attributes=0, bd_attributes=0, npp_attributes=0, ether_type=0, mac_da=0):
        super().__init__(88)
        self._set_field_value('const field', 0, 4, int, 0x4)
        self.ctrl_fields = ctrl_fields
        self.l2_slp_attributes = l2_slp_attributes
        self.bd_attributes = bd_attributes
        self.npp_attributes = npp_attributes
        self.ether_type = ether_type
        self.mac_da = mac_da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_mac_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_TERM_ACL_DB_L2_LPTS_MAC_ternary_0x4(self):
        return self._get_field_value(0, 4)
    @property
    def ctrl_fields(self):
        return self._get_field_value(4, 4)
    @ctrl_fields.setter
    def ctrl_fields(self, value):
        self._set_field_value('field ctrl_fields', 4, 4, int, value)
    @property
    def l2_slp_attributes(self):
        return self._get_field_value(8, 2)
    @l2_slp_attributes.setter
    def l2_slp_attributes(self, value):
        self._set_field_value('field l2_slp_attributes', 8, 2, int, value)
    @property
    def bd_attributes(self):
        return self._get_field_value(10, 6)
    @bd_attributes.setter
    def bd_attributes(self, value):
        self._set_field_value('field bd_attributes', 10, 6, int, value)
    @property
    def npp_attributes(self):
        return self._get_field_value(16, 8)
    @npp_attributes.setter
    def npp_attributes(self, value):
        self._set_field_value('field npp_attributes', 16, 8, int, value)
    @property
    def ether_type(self):
        return self._get_field_value(24, 16)
    @ether_type.setter
    def ether_type(self, value):
        self._set_field_value('field ether_type', 24, 16, int, value)
    @property
    def mac_da(self):
        return npl_mac_addr_t._get_as_sub_field(self._data, self._offset_in_data + 40)
    @mac_da.setter
    def mac_da(self, value):
        self._set_field_value('field mac_da', 40, 48, npl_mac_addr_t, value)

class npl_l2_lpts_mac_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_mac_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_lpts_result(self):
        return npl_l2_lpts_mac_compound_table_l2_lpts_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_result.setter
    def l2_lpts_result(self, value):
        self._set_field_value('field l2_lpts_result', 0, 32, npl_l2_lpts_mac_compound_table_l2_lpts_result_payload_t, value)

class npl_l2_lpts_mac_compound_table_value_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(40)
        self.payloads.l2_lpts_result = npl_l2_lpts_mac_compound_table_l2_lpts_result_payload_t(l2_lpts_trap_vector)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_mac_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_mac_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_l2_lpts_mac_compound_table_payloads_t, value)



# API-s for table: l2_lpts_mac_table

NPL_L2_LPTS_MAC_TABLE_ACTION_L2_LPTS_RESULT = 0x0

class npl_l2_lpts_mac_table_l2_lpts_result_payload_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(32)
        self.l2_lpts_trap_vector = l2_lpts_trap_vector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_mac_table_l2_lpts_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def l2_lpts_trap_vector(self):
        return npl_l2_lpts_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_trap_vector.setter
    def l2_lpts_trap_vector(self, value):
        self._set_field_value('field l2_lpts_trap_vector', 0, 32, npl_l2_lpts_payload_t, value)




class npl_l2_lpts_mac_table_key_t(basic_npl_struct):
    def __init__(self, is_svi=0, is_tagged=0, mac_terminated=0, mac_lp_type=0, l2_slp_attributes=0, bd_attributes=0, npp_attributes=0, ether_type=0, mac_da=0):
        super().__init__(84)
        self.is_svi = is_svi
        self.is_tagged = is_tagged
        self.mac_terminated = mac_terminated
        self.mac_lp_type = mac_lp_type
        self.l2_slp_attributes = l2_slp_attributes
        self.bd_attributes = bd_attributes
        self.npp_attributes = npp_attributes
        self.ether_type = ether_type
        self.mac_da = mac_da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_mac_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def is_svi(self):
        return self._get_field_value(0, 1)
    @is_svi.setter
    def is_svi(self, value):
        self._set_field_value('field is_svi', 0, 1, int, value)
    @property
    def is_tagged(self):
        return self._get_field_value(1, 1)
    @is_tagged.setter
    def is_tagged(self, value):
        self._set_field_value('field is_tagged', 1, 1, int, value)
    @property
    def mac_terminated(self):
        return self._get_field_value(2, 1)
    @mac_terminated.setter
    def mac_terminated(self, value):
        self._set_field_value('field mac_terminated', 2, 1, int, value)
    @property
    def mac_lp_type(self):
        return self._get_field_value(3, 1)
    @mac_lp_type.setter
    def mac_lp_type(self, value):
        self._set_field_value('field mac_lp_type', 3, 1, int, value)
    @property
    def l2_slp_attributes(self):
        return self._get_field_value(4, 2)
    @l2_slp_attributes.setter
    def l2_slp_attributes(self, value):
        self._set_field_value('field l2_slp_attributes', 4, 2, int, value)
    @property
    def bd_attributes(self):
        return self._get_field_value(6, 6)
    @bd_attributes.setter
    def bd_attributes(self, value):
        self._set_field_value('field bd_attributes', 6, 6, int, value)
    @property
    def npp_attributes(self):
        return self._get_field_value(12, 8)
    @npp_attributes.setter
    def npp_attributes(self, value):
        self._set_field_value('field npp_attributes', 12, 8, int, value)
    @property
    def ether_type(self):
        return self._get_field_value(20, 16)
    @ether_type.setter
    def ether_type(self, value):
        self._set_field_value('field ether_type', 20, 16, int, value)
    @property
    def mac_da(self):
        return npl_mac_addr_t._get_as_sub_field(self._data, self._offset_in_data + 36)
    @mac_da.setter
    def mac_da(self, value):
        self._set_field_value('field mac_da', 36, 48, npl_mac_addr_t, value)

class npl_l2_lpts_mac_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_mac_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_lpts_result(self):
        return npl_l2_lpts_mac_table_l2_lpts_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_result.setter
    def l2_lpts_result(self, value):
        self._set_field_value('field l2_lpts_result', 0, 32, npl_l2_lpts_mac_table_l2_lpts_result_payload_t, value)

class npl_l2_lpts_mac_table_value_t(basic_npl_struct):
    def __init__(self, l2_lpts_trap_vector=0):
        super().__init__(40)
        self.payloads.l2_lpts_result = npl_l2_lpts_mac_table_l2_lpts_result_payload_t(l2_lpts_trap_vector)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_mac_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_mac_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_l2_lpts_mac_table_payloads_t, value)



# API-s for table: l2_lpts_next_macro_pack_table

NPL_L2_LPTS_NEXT_MACRO_PACK_TABLE_ACTION_WRITE = 0x0

class npl_l2_lpts_next_macro_pack_table_key_t(basic_npl_struct):
    def __init__(self, pd_l2_enable_l3_qos=0, pd_l2_lpts=0):
        super().__init__(2)
        self.pd_l2_enable_l3_qos = pd_l2_enable_l3_qos
        self.pd_l2_lpts = pd_l2_lpts

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_next_macro_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_l2_enable_l3_qos(self):
        return self._get_field_value(0, 1)
    @pd_l2_enable_l3_qos.setter
    def pd_l2_enable_l3_qos(self, value):
        self._set_field_value('field pd_l2_enable_l3_qos', 0, 1, int, value)
    @property
    def pd_l2_lpts(self):
        return npl_l2_lpts_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @pd_l2_lpts.setter
    def pd_l2_lpts(self, value):
        self._set_field_value('field pd_l2_lpts', 1, 1, npl_l2_lpts_attributes_t, value)

class npl_l2_lpts_next_macro_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_next_macro_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_lpts_next_macro_pack_fields(self):
        return npl_l2_lpts_next_macro_pack_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_next_macro_pack_fields.setter
    def l2_lpts_next_macro_pack_fields(self, value):
        self._set_field_value('field l2_lpts_next_macro_pack_fields', 0, 2, npl_l2_lpts_next_macro_pack_fields_t, value)

class npl_l2_lpts_next_macro_pack_table_value_t(basic_npl_struct):
    def __init__(self, l2_lpts_next_macro_pack_fields=0):
        super().__init__(10)
        self.payloads.l2_lpts_next_macro_pack_fields = l2_lpts_next_macro_pack_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_next_macro_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_next_macro_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_l2_lpts_next_macro_pack_table_payloads_t, value)



# API-s for table: l2_lpts_next_macro_static_table

NPL_L2_LPTS_NEXT_MACRO_STATIC_TABLE_ACTION_L2_LPTS_NEXT_MACRO_ACTION = 0x0

class npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_l2_lpts_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, v6_mc=0, v4_mc=0, ctrl_fields=0, type=0):
        super().__init__(9)
        self.v6_mc = v6_mc
        self.v4_mc = v4_mc
        self.ctrl_fields = ctrl_fields
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def v6_mc(self):
        return self._get_field_value(0, 1)
    @v6_mc.setter
    def v6_mc(self, value):
        self._set_field_value('field v6_mc', 0, 1, int, value)
    @property
    def v4_mc(self):
        return self._get_field_value(1, 1)
    @v4_mc.setter
    def v4_mc(self, value):
        self._set_field_value('field v4_mc', 1, 1, int, value)
    @property
    def ctrl_fields(self):
        return npl_l2_lpts_next_macro_pack_fields_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @ctrl_fields.setter
    def ctrl_fields(self, value):
        self._set_field_value('field ctrl_fields', 2, 2, npl_l2_lpts_next_macro_pack_fields_t, value)
    @property
    def type(self):
        return self._get_field_value(4, 5)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 4, 5, int, value)

class npl_l2_lpts_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_lpts_next_macro_action(self):
        return npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_next_macro_action.setter
    def l2_lpts_next_macro_action(self, value):
        self._set_field_value('field l2_lpts_next_macro_action', 0, 10, npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t, value)

class npl_l2_lpts_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.l2_lpts_next_macro_action = npl_l2_lpts_next_macro_static_table_l2_lpts_next_macro_action_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_l2_lpts_next_macro_static_table_payloads_t, value)



# API-s for table: l2_lpts_protocol_table

NPL_L2_LPTS_PROTOCOL_TABLE_ACTION_WRITE = 0x0

class npl_l2_lpts_protocol_table_key_t(basic_npl_struct):
    def __init__(self, mac_da_use_l2_lpts=0, dst_udp_port=0, next_header_1_type=0, next_protocol_type=0):
        super().__init__(27)
        self.mac_da_use_l2_lpts = mac_da_use_l2_lpts
        self.dst_udp_port = dst_udp_port
        self.next_header_1_type = next_header_1_type
        self.next_protocol_type = next_protocol_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_protocol_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_da_use_l2_lpts(self):
        return self._get_field_value(0, 1)
    @mac_da_use_l2_lpts.setter
    def mac_da_use_l2_lpts(self, value):
        self._set_field_value('field mac_da_use_l2_lpts', 0, 1, int, value)
    @property
    def dst_udp_port(self):
        return self._get_field_value(1, 16)
    @dst_udp_port.setter
    def dst_udp_port(self, value):
        self._set_field_value('field dst_udp_port', 1, 16, int, value)
    @property
    def next_header_1_type(self):
        return self._get_field_value(17, 5)
    @next_header_1_type.setter
    def next_header_1_type(self, value):
        self._set_field_value('field next_header_1_type', 17, 5, int, value)
    @property
    def next_protocol_type(self):
        return self._get_field_value(22, 5)
    @next_protocol_type.setter
    def next_protocol_type(self, value):
        self._set_field_value('field next_protocol_type', 22, 5, int, value)

class npl_l2_lpts_protocol_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_protocol_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def use_l2_lpts(self):
        return self._get_field_value(0, 1)
    @use_l2_lpts.setter
    def use_l2_lpts(self, value):
        self._set_field_value('field use_l2_lpts', 0, 1, int, value)

class npl_l2_lpts_protocol_table_value_t(basic_npl_struct):
    def __init__(self, use_l2_lpts=0):
        super().__init__(9)
        self.payloads.use_l2_lpts = use_l2_lpts

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_protocol_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_protocol_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_l2_lpts_protocol_table_payloads_t, value)



# API-s for table: l2_lpts_skip_p2p_static_table

NPL_L2_LPTS_SKIP_P2P_STATIC_TABLE_ACTION_L2_LPTS_SET_SKIP_P2P_TRAP = 0x0

class npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t(basic_npl_struct):
    def __init__(self, skip_p2p_trap=0):
        super().__init__(1)
        self.skip_p2p_trap = skip_p2p_trap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def skip_p2p_trap(self):
        return self._get_field_value(0, 1)
    @skip_p2p_trap.setter
    def skip_p2p_trap(self, value):
        self._set_field_value('field skip_p2p_trap', 0, 1, int, value)




class npl_l2_lpts_skip_p2p_static_table_key_t(basic_npl_struct):
    def __init__(self, is_p2p=0, mac_lp_type_and_term=0):
        super().__init__(3)
        self.is_p2p = is_p2p
        self.mac_lp_type_and_term = mac_lp_type_and_term

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_skip_p2p_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def is_p2p(self):
        return self._get_field_value(0, 1)
    @is_p2p.setter
    def is_p2p(self, value):
        self._set_field_value('field is_p2p', 0, 1, int, value)
    @property
    def mac_lp_type_and_term(self):
        return self._get_field_value(1, 2)
    @mac_lp_type_and_term.setter
    def mac_lp_type_and_term(self, value):
        self._set_field_value('field mac_lp_type_and_term', 1, 2, int, value)

class npl_l2_lpts_skip_p2p_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_skip_p2p_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_lpts_set_skip_p2p_trap(self):
        return npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_lpts_set_skip_p2p_trap.setter
    def l2_lpts_set_skip_p2p_trap(self, value):
        self._set_field_value('field l2_lpts_set_skip_p2p_trap', 0, 1, npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t, value)

class npl_l2_lpts_skip_p2p_static_table_value_t(basic_npl_struct):
    def __init__(self, skip_p2p_trap=0):
        super().__init__(9)
        self.payloads.l2_lpts_set_skip_p2p_trap = npl_l2_lpts_skip_p2p_static_table_l2_lpts_set_skip_p2p_trap_payload_t(skip_p2p_trap)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_lpts_skip_p2p_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_lpts_skip_p2p_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_l2_lpts_skip_p2p_static_table_payloads_t, value)



# API-s for table: l2_termination_next_macro_static_table

NPL_L2_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_L2_TERMINATION_NEXT_MACRO_ACTION = 0x0

class npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_l2_termination_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, ipv4_ipv6_eth_init_rtf_stage=0, next_hdr_type=0):
        super().__init__(11)
        self.ipv4_ipv6_eth_init_rtf_stage = ipv4_ipv6_eth_init_rtf_stage
        self.next_hdr_type = next_hdr_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_termination_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipv4_ipv6_eth_init_rtf_stage(self):
        return npl_ipv4_ipv6_eth_init_rtf_stages_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ipv4_ipv6_eth_init_rtf_stage.setter
    def ipv4_ipv6_eth_init_rtf_stage(self, value):
        self._set_field_value('field ipv4_ipv6_eth_init_rtf_stage', 0, 7, npl_ipv4_ipv6_eth_init_rtf_stages_t, value)
    @property
    def next_hdr_type(self):
        return self._get_field_value(7, 4)
    @next_hdr_type.setter
    def next_hdr_type(self, value):
        self._set_field_value('field next_hdr_type', 7, 4, int, value)

class npl_l2_termination_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_termination_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_termination_next_macro_action(self):
        return npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_termination_next_macro_action.setter
    def l2_termination_next_macro_action(self, value):
        self._set_field_value('field l2_termination_next_macro_action', 0, 10, npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t, value)

class npl_l2_termination_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.l2_termination_next_macro_action = npl_l2_termination_next_macro_static_table_l2_termination_next_macro_action_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_termination_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_termination_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_l2_termination_next_macro_static_table_payloads_t, value)



# API-s for table: l2_tunnel_term_next_macro_static_table

NPL_L2_TUNNEL_TERM_NEXT_MACRO_STATIC_TABLE_ACTION_L2_TERMINATION_NEXT_MACRO_ACTION = 0x0

class npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_l2_tunnel_term_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, ipv4_ipv6_init_rtf_stage=0, overlay_or_pwe_lp_type=0):
        super().__init__(5)
        self.ipv4_ipv6_init_rtf_stage = ipv4_ipv6_init_rtf_stage
        self.overlay_or_pwe_lp_type = overlay_or_pwe_lp_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_tunnel_term_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipv4_ipv6_init_rtf_stage(self):
        return npl_ipv4_ipv6_init_rtf_stage_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ipv4_ipv6_init_rtf_stage.setter
    def ipv4_ipv6_init_rtf_stage(self, value):
        self._set_field_value('field ipv4_ipv6_init_rtf_stage', 0, 4, npl_ipv4_ipv6_init_rtf_stage_t, value)
    @property
    def overlay_or_pwe_lp_type(self):
        return self._get_field_value(4, 1)
    @overlay_or_pwe_lp_type.setter
    def overlay_or_pwe_lp_type(self, value):
        self._set_field_value('field overlay_or_pwe_lp_type', 4, 1, int, value)

class npl_l2_tunnel_term_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_tunnel_term_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_termination_next_macro_action(self):
        return npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_termination_next_macro_action.setter
    def l2_termination_next_macro_action(self, value):
        self._set_field_value('field l2_termination_next_macro_action', 0, 10, npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t, value)

class npl_l2_tunnel_term_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.l2_termination_next_macro_action = npl_l2_tunnel_term_next_macro_static_table_l2_termination_next_macro_action_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l2_tunnel_term_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_l2_tunnel_term_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_l2_tunnel_term_next_macro_static_table_payloads_t, value)



# API-s for table: l3_dlp_p_counter_offset_table

NPL_L3_DLP_P_COUNTER_OFFSET_TABLE_ACTION_WRITE = 0x0

class npl_l3_dlp_p_counter_offset_table_key_t(basic_npl_struct):
    def __init__(self, fwd_header_type=0, l3_encap_type=0, ip_acl_macro_control=0, is_mc=0):
        super().__init__(13)
        self.fwd_header_type = fwd_header_type
        self.l3_encap_type = l3_encap_type
        self.ip_acl_macro_control = ip_acl_macro_control
        self.is_mc = is_mc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_dlp_p_counter_offset_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fwd_header_type(self):
        return self._get_field_value(0, 4)
    @fwd_header_type.setter
    def fwd_header_type(self, value):
        self._set_field_value('field fwd_header_type', 0, 4, int, value)
    @property
    def l3_encap_type(self):
        return self._get_field_value(4, 4)
    @l3_encap_type.setter
    def l3_encap_type(self, value):
        self._set_field_value('field l3_encap_type', 4, 4, int, value)
    @property
    def ip_acl_macro_control(self):
        return self._get_field_value(8, 4)
    @ip_acl_macro_control.setter
    def ip_acl_macro_control(self, value):
        self._set_field_value('field ip_acl_macro_control', 8, 4, int, value)
    @property
    def is_mc(self):
        return self._get_field_value(12, 1)
    @is_mc.setter
    def is_mc(self, value):
        self._set_field_value('field is_mc', 12, 1, int, value)

class npl_l3_dlp_p_counter_offset_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_dlp_p_counter_offset_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_tx_counter_offset(self):
        return npl_counter_offset_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_tx_counter_offset.setter
    def local_tx_counter_offset(self, value):
        self._set_field_value('field local_tx_counter_offset', 0, 3, npl_counter_offset_t, value)

class npl_l3_dlp_p_counter_offset_table_value_t(basic_npl_struct):
    def __init__(self, local_tx_counter_offset=0):
        super().__init__(11)
        self.payloads.local_tx_counter_offset = local_tx_counter_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_dlp_p_counter_offset_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_l3_dlp_p_counter_offset_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_l3_dlp_p_counter_offset_table_payloads_t, value)



# API-s for table: l3_dlp_table

NPL_L3_DLP_TABLE_ACTION_WRITE = 0x0

class npl_l3_dlp_table_key_t(basic_npl_struct):
    def __init__(self, l3_dlp_lsbs=0, l3_dlp_msbs=0):
        super().__init__(14)
        self.l3_dlp_lsbs = l3_dlp_lsbs
        self.l3_dlp_msbs = l3_dlp_msbs

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_dlp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_dlp_lsbs(self):
        return self._get_field_value(0, 12)
    @l3_dlp_lsbs.setter
    def l3_dlp_lsbs(self, value):
        self._set_field_value('field l3_dlp_lsbs', 0, 12, int, value)
    @property
    def l3_dlp_msbs(self):
        return npl_no_acls_t._get_as_sub_field(self._data, self._offset_in_data + 12)
    @l3_dlp_msbs.setter
    def l3_dlp_msbs(self, value):
        self._set_field_value('field l3_dlp_msbs', 12, 2, npl_no_acls_t, value)

class npl_l3_dlp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(138)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_dlp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_dlp_attributes(self):
        return npl_l3_dlp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l3_dlp_attributes.setter
    def l3_dlp_attributes(self, value):
        self._set_field_value('field l3_dlp_attributes', 0, 138, npl_l3_dlp_attributes_t, value)

class npl_l3_dlp_table_value_t(basic_npl_struct):
    def __init__(self, l3_dlp_attributes=0):
        super().__init__(146)
        self.payloads.l3_dlp_attributes = l3_dlp_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_dlp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(138, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 138, 8, int, value)
    @property
    def payloads(self):
        return npl_l3_dlp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 138, npl_l3_dlp_table_payloads_t, value)



# API-s for table: l3_dlp_table_compound

NPL_L3_DLP_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_l3_dlp_table_compound_key_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_l3_dlp_l3_dlp_lsbs=0, l3_tx_local_vars_l3_dlp_l3_dlp_msbs=0):
        super().__init__(16)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self._set_field_value('const field', 1, 1, int, 0x0)
        self.l3_tx_local_vars_l3_dlp_l3_dlp_lsbs = l3_tx_local_vars_l3_dlp_l3_dlp_lsbs
        self.l3_tx_local_vars_l3_dlp_l3_dlp_msbs = l3_tx_local_vars_l3_dlp_l3_dlp_msbs

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_dlp_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def const2_DLP0_EM_L3_DLP_TABLE_LDB_exact_0x0(self):
        return self._get_field_value(1, 1)
    @property
    def l3_tx_local_vars_l3_dlp_l3_dlp_lsbs(self):
        return self._get_field_value(2, 12)
    @l3_tx_local_vars_l3_dlp_l3_dlp_lsbs.setter
    def l3_tx_local_vars_l3_dlp_l3_dlp_lsbs(self, value):
        self._set_field_value('field l3_tx_local_vars_l3_dlp_l3_dlp_lsbs', 2, 12, int, value)
    @property
    def l3_tx_local_vars_l3_dlp_l3_dlp_msbs(self):
        return npl_no_acls_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @l3_tx_local_vars_l3_dlp_l3_dlp_msbs.setter
    def l3_tx_local_vars_l3_dlp_l3_dlp_msbs(self, value):
        self._set_field_value('field l3_tx_local_vars_l3_dlp_l3_dlp_msbs', 14, 2, npl_no_acls_t, value)

class npl_l3_dlp_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(138)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_dlp_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_dlp_attributes(self):
        return npl_l3_dlp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l3_dlp_attributes.setter
    def l3_dlp_attributes(self, value):
        self._set_field_value('field l3_dlp_attributes', 0, 138, npl_l3_dlp_attributes_t, value)

class npl_l3_dlp_table_compound_value_t(basic_npl_struct):
    def __init__(self, l3_dlp_attributes=0):
        super().__init__(146)
        self.payloads.l3_dlp_attributes = l3_dlp_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_dlp_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(138, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 138, 8, int, value)
    @property
    def payloads(self):
        return npl_l3_dlp_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 138, npl_l3_dlp_table_compound_payloads_t, value)



# API-s for table: l3_qos_tag_ipv4_pack_table_table

NPL_L3_QOS_TAG_IPV4_PACK_TABLE_TABLE_ACTION_WRITE = 0x0

class npl_l3_qos_tag_ipv4_pack_table_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv4_header_dscp=0, pd_layer_vars_qos_mapping_key_key_3_0_=0):
        super().__init__(16)
        self._set_field_value('const field', 6, 2, int, 0x0)
        self._set_field_value('const field', 12, 3, int, 0x4)
        self._set_field_value('const field', 15, 1, int, 0x0)
        self.packet_protocol_layer_next__ipv4_header_dscp = packet_protocol_layer_next__ipv4_header_dscp
        self.pd_layer_vars_qos_mapping_key_key_3_0_ = pd_layer_vars_qos_mapping_key_key_3_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_qos_tag_ipv4_pack_table_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__ipv4_header_dscp(self):
        return self._get_field_value(0, 6)
    @packet_protocol_layer_next__ipv4_header_dscp.setter
    def packet_protocol_layer_next__ipv4_header_dscp(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv4_header_dscp', 0, 6, int, value)
    @property
    def const1_2b00_exact_0x0(self):
        return self._get_field_value(6, 2)
    @property
    def pd_layer_vars_qos_mapping_key_key_3_0_(self):
        return self._get_field_value(8, 4)
    @pd_layer_vars_qos_mapping_key_key_3_0_.setter
    def pd_layer_vars_qos_mapping_key_key_3_0_(self, value):
        self._set_field_value('field pd_layer_vars_qos_mapping_key_key_3_0_', 8, 4, int, value)
    @property
    def const2_3b100_exact_0x4(self):
        return self._get_field_value(12, 3)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(15, 1)

class npl_l3_qos_tag_ipv4_pack_table_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_qos_tag_ipv4_pack_table_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_qos_macro_pack_table_fields(self):
        return npl_mac_qos_macro_pack_table_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_qos_macro_pack_table_fields.setter
    def mac_qos_macro_pack_table_fields(self, value):
        self._set_field_value('field mac_qos_macro_pack_table_fields', 0, 16, npl_mac_qos_macro_pack_table_fields_t, value)

class npl_l3_qos_tag_ipv4_pack_table_table_value_t(basic_npl_struct):
    def __init__(self, mac_qos_macro_pack_table_fields=0):
        super().__init__(24)
        self.payloads.mac_qos_macro_pack_table_fields = mac_qos_macro_pack_table_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_qos_tag_ipv4_pack_table_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_l3_qos_tag_ipv4_pack_table_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_l3_qos_tag_ipv4_pack_table_table_payloads_t, value)



# API-s for table: l3_qos_tag_ipv6_pack_table_table

NPL_L3_QOS_TAG_IPV6_PACK_TABLE_TABLE_ACTION_WRITE = 0x0

class npl_l3_qos_tag_ipv6_pack_table_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv6_header_dscp=0, pd_layer_vars_qos_mapping_key_key_3_0_=0):
        super().__init__(16)
        self._set_field_value('const field', 6, 2, int, 0x1)
        self._set_field_value('const field', 12, 3, int, 0x4)
        self._set_field_value('const field', 15, 1, int, 0x0)
        self.packet_protocol_layer_next__ipv6_header_dscp = packet_protocol_layer_next__ipv6_header_dscp
        self.pd_layer_vars_qos_mapping_key_key_3_0_ = pd_layer_vars_qos_mapping_key_key_3_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_qos_tag_ipv6_pack_table_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__ipv6_header_dscp(self):
        return self._get_field_value(0, 6)
    @packet_protocol_layer_next__ipv6_header_dscp.setter
    def packet_protocol_layer_next__ipv6_header_dscp(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv6_header_dscp', 0, 6, int, value)
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(6, 2)
    @property
    def pd_layer_vars_qos_mapping_key_key_3_0_(self):
        return self._get_field_value(8, 4)
    @pd_layer_vars_qos_mapping_key_key_3_0_.setter
    def pd_layer_vars_qos_mapping_key_key_3_0_(self, value):
        self._set_field_value('field pd_layer_vars_qos_mapping_key_key_3_0_', 8, 4, int, value)
    @property
    def const2_3b100_exact_0x4(self):
        return self._get_field_value(12, 3)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(15, 1)

class npl_l3_qos_tag_ipv6_pack_table_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_qos_tag_ipv6_pack_table_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_qos_macro_pack_table_fields(self):
        return npl_mac_qos_macro_pack_table_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_qos_macro_pack_table_fields.setter
    def mac_qos_macro_pack_table_fields(self, value):
        self._set_field_value('field mac_qos_macro_pack_table_fields', 0, 16, npl_mac_qos_macro_pack_table_fields_t, value)

class npl_l3_qos_tag_ipv6_pack_table_table_value_t(basic_npl_struct):
    def __init__(self, mac_qos_macro_pack_table_fields=0):
        super().__init__(24)
        self.payloads.mac_qos_macro_pack_table_fields = mac_qos_macro_pack_table_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_qos_tag_ipv6_pack_table_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_l3_qos_tag_ipv6_pack_table_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_l3_qos_tag_ipv6_pack_table_table_payloads_t, value)



# API-s for table: l3_qos_tag_muxing_pack_table_table

NPL_L3_QOS_TAG_MUXING_PACK_TABLE_TABLE_ACTION_WRITE = 0x0

class npl_l3_qos_tag_muxing_pack_table_table_key_t(basic_npl_struct):
    def __init__(self, pd_layer_vars_qos_mapping_key_key_3_0_=0):
        super().__init__(16)
        self._set_field_value('const field', 0, 8, int, 0x0)
        self._set_field_value('const field', 12, 3, int, 0x4)
        self._set_field_value('const field', 15, 1, int, 0x0)
        self.pd_layer_vars_qos_mapping_key_key_3_0_ = pd_layer_vars_qos_mapping_key_key_3_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_qos_tag_muxing_pack_table_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_8b0_exact_0x0(self):
        return self._get_field_value(0, 8)
    @property
    def pd_layer_vars_qos_mapping_key_key_3_0_(self):
        return self._get_field_value(8, 4)
    @pd_layer_vars_qos_mapping_key_key_3_0_.setter
    def pd_layer_vars_qos_mapping_key_key_3_0_(self, value):
        self._set_field_value('field pd_layer_vars_qos_mapping_key_key_3_0_', 8, 4, int, value)
    @property
    def const2_3b100_exact_0x4(self):
        return self._get_field_value(12, 3)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(15, 1)

class npl_l3_qos_tag_muxing_pack_table_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_qos_tag_muxing_pack_table_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_qos_macro_pack_table_fields(self):
        return npl_mac_qos_macro_pack_table_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_qos_macro_pack_table_fields.setter
    def mac_qos_macro_pack_table_fields(self, value):
        self._set_field_value('field mac_qos_macro_pack_table_fields', 0, 16, npl_mac_qos_macro_pack_table_fields_t, value)

class npl_l3_qos_tag_muxing_pack_table_table_value_t(basic_npl_struct):
    def __init__(self, mac_qos_macro_pack_table_fields=0):
        super().__init__(24)
        self.payloads.mac_qos_macro_pack_table_fields = mac_qos_macro_pack_table_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_qos_tag_muxing_pack_table_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_l3_qos_tag_muxing_pack_table_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_l3_qos_tag_muxing_pack_table_table_payloads_t, value)



# API-s for table: l3_termination_classify_ip_tunnels_table

NPL_L3_TERMINATION_CLASSIFY_IP_TUNNELS_TABLE_ACTION_WRITE = 0x0

class npl_l3_termination_classify_ip_tunnels_table_key_t(basic_npl_struct):
    def __init__(self, udp_dst_port_or_gre_proto=0, l4_protocol_type=0, l3_protocol_type=0):
        super().__init__(25)
        self.udp_dst_port_or_gre_proto = udp_dst_port_or_gre_proto
        self.l4_protocol_type = l4_protocol_type
        self.l3_protocol_type = l3_protocol_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_termination_classify_ip_tunnels_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def udp_dst_port_or_gre_proto(self):
        return self._get_field_value(0, 16)
    @udp_dst_port_or_gre_proto.setter
    def udp_dst_port_or_gre_proto(self, value):
        self._set_field_value('field udp_dst_port_or_gre_proto', 0, 16, int, value)
    @property
    def l4_protocol_type(self):
        return self._get_field_value(16, 5)
    @l4_protocol_type.setter
    def l4_protocol_type(self, value):
        self._set_field_value('field l4_protocol_type', 16, 5, int, value)
    @property
    def l3_protocol_type(self):
        return self._get_field_value(21, 4)
    @l3_protocol_type.setter
    def l3_protocol_type(self, value):
        self._set_field_value('field l3_protocol_type', 21, 4, int, value)

class npl_l3_termination_classify_ip_tunnels_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(12)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_termination_classify_ip_tunnels_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tunnel_type(self):
        return npl_tunnel_type_and_force_pipe_ttl_ingress_ptp_info_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tunnel_type.setter
    def tunnel_type(self, value):
        self._set_field_value('field tunnel_type', 0, 12, npl_tunnel_type_and_force_pipe_ttl_ingress_ptp_info_t, value)

class npl_l3_termination_classify_ip_tunnels_table_value_t(basic_npl_struct):
    def __init__(self, tunnel_type=0):
        super().__init__(20)
        self.payloads.tunnel_type = tunnel_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_termination_classify_ip_tunnels_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(12, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 12, 8, int, value)
    @property
    def payloads(self):
        return npl_l3_termination_classify_ip_tunnels_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 12, npl_l3_termination_classify_ip_tunnels_table_payloads_t, value)



# API-s for table: l3_termination_next_macro_static_table

NPL_L3_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_IP_TERMINATION_NEXT_MACRO_ACTION = 0x0

class npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_l3_termination_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, dont_inc_pl=0, ipv4_ipv6_init_rtf_stage=0, hdr_type=0):
        super().__init__(9)
        self.dont_inc_pl = dont_inc_pl
        self.ipv4_ipv6_init_rtf_stage = ipv4_ipv6_init_rtf_stage
        self.hdr_type = hdr_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_termination_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dont_inc_pl(self):
        return self._get_field_value(0, 1)
    @dont_inc_pl.setter
    def dont_inc_pl(self, value):
        self._set_field_value('field dont_inc_pl', 0, 1, int, value)
    @property
    def ipv4_ipv6_init_rtf_stage(self):
        return npl_ipv4_ipv6_init_rtf_stage_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @ipv4_ipv6_init_rtf_stage.setter
    def ipv4_ipv6_init_rtf_stage(self, value):
        self._set_field_value('field ipv4_ipv6_init_rtf_stage', 1, 4, npl_ipv4_ipv6_init_rtf_stage_t, value)
    @property
    def hdr_type(self):
        return self._get_field_value(5, 4)
    @hdr_type.setter
    def hdr_type(self, value):
        self._set_field_value('field hdr_type', 5, 4, int, value)

class npl_l3_termination_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_termination_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_termination_next_macro_action(self):
        return npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_termination_next_macro_action.setter
    def ip_termination_next_macro_action(self, value):
        self._set_field_value('field ip_termination_next_macro_action', 0, 10, npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t, value)

class npl_l3_termination_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.ip_termination_next_macro_action = npl_l3_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_termination_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_l3_termination_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_l3_termination_next_macro_static_table_payloads_t, value)



# API-s for table: l3_tunnel_termination_next_macro_static_table

NPL_L3_TUNNEL_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_IP_TERMINATION_NEXT_MACRO_ACTION = 0x0

class npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_l3_tunnel_termination_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, lp_set=0, pd_ipv4_init_rtf_stage=0, term_attr_ipv4_ipv6_init_rtf_stage=0, next_hdr_type=0):
        super().__init__(11)
        self.lp_set = lp_set
        self.pd_ipv4_init_rtf_stage = pd_ipv4_init_rtf_stage
        self.term_attr_ipv4_ipv6_init_rtf_stage = term_attr_ipv4_ipv6_init_rtf_stage
        self.next_hdr_type = next_hdr_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_tunnel_termination_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lp_set(self):
        return self._get_field_value(0, 1)
    @lp_set.setter
    def lp_set(self, value):
        self._set_field_value('field lp_set', 0, 1, int, value)
    @property
    def pd_ipv4_init_rtf_stage(self):
        return self._get_field_value(1, 2)
    @pd_ipv4_init_rtf_stage.setter
    def pd_ipv4_init_rtf_stage(self, value):
        self._set_field_value('field pd_ipv4_init_rtf_stage', 1, 2, int, value)
    @property
    def term_attr_ipv4_ipv6_init_rtf_stage(self):
        return npl_ipv4_ipv6_init_rtf_stage_t._get_as_sub_field(self._data, self._offset_in_data + 3)
    @term_attr_ipv4_ipv6_init_rtf_stage.setter
    def term_attr_ipv4_ipv6_init_rtf_stage(self, value):
        self._set_field_value('field term_attr_ipv4_ipv6_init_rtf_stage', 3, 4, npl_ipv4_ipv6_init_rtf_stage_t, value)
    @property
    def next_hdr_type(self):
        return self._get_field_value(7, 4)
    @next_hdr_type.setter
    def next_hdr_type(self, value):
        self._set_field_value('field next_hdr_type', 7, 4, int, value)

class npl_l3_tunnel_termination_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_tunnel_termination_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_termination_next_macro_action(self):
        return npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_termination_next_macro_action.setter
    def ip_termination_next_macro_action(self, value):
        self._set_field_value('field ip_termination_next_macro_action', 0, 10, npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t, value)

class npl_l3_tunnel_termination_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.ip_termination_next_macro_action = npl_l3_tunnel_termination_next_macro_static_table_ip_termination_next_macro_action_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_tunnel_termination_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_l3_tunnel_termination_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_l3_tunnel_termination_next_macro_static_table_payloads_t, value)



# API-s for table: l3_vxlan_overlay_sa_table

NPL_L3_VXLAN_OVERLAY_SA_TABLE_ACTION_WRITE = 0x0

class npl_l3_vxlan_overlay_sa_table_key_t(basic_npl_struct):
    def __init__(self, sa_prefix_index=0):
        super().__init__(4)
        self.sa_prefix_index = sa_prefix_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_vxlan_overlay_sa_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sa_prefix_index(self):
        return self._get_field_value(0, 4)
    @sa_prefix_index.setter
    def sa_prefix_index(self, value):
        self._set_field_value('field sa_prefix_index', 0, 4, int, value)

class npl_l3_vxlan_overlay_sa_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_vxlan_overlay_sa_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def overlay_sa_msb(self):
        return self._get_field_value(0, 32)
    @overlay_sa_msb.setter
    def overlay_sa_msb(self, value):
        self._set_field_value('field overlay_sa_msb', 0, 32, int, value)

class npl_l3_vxlan_overlay_sa_table_value_t(basic_npl_struct):
    def __init__(self, overlay_sa_msb=0):
        super().__init__(40)
        self.payloads.overlay_sa_msb = overlay_sa_msb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_l3_vxlan_overlay_sa_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_l3_vxlan_overlay_sa_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_l3_vxlan_overlay_sa_table_payloads_t, value)



# API-s for table: label_above_null_pack_table

NPL_LABEL_ABOVE_NULL_PACK_TABLE_ACTION_WRITE = 0x0

class npl_label_above_null_pack_table_key_t(basic_npl_struct):
    def __init__(self, mpls_relay_local_vars_next_label_label_19_4_=0, mpls_relay_local_vars_termination_label=0, mpls_relay_local_vars_adjust_next_hdr_offset=0):
        super().__init__(56)
        self.mpls_relay_local_vars_next_label_label_19_4_ = mpls_relay_local_vars_next_label_label_19_4_
        self.mpls_relay_local_vars_termination_label = mpls_relay_local_vars_termination_label
        self.mpls_relay_local_vars_adjust_next_hdr_offset = mpls_relay_local_vars_adjust_next_hdr_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_label_above_null_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_relay_local_vars_next_label_label_19_4_(self):
        return self._get_field_value(0, 16)
    @mpls_relay_local_vars_next_label_label_19_4_.setter
    def mpls_relay_local_vars_next_label_label_19_4_(self, value):
        self._set_field_value('field mpls_relay_local_vars_next_label_label_19_4_', 0, 16, int, value)
    @property
    def mpls_relay_local_vars_termination_label(self):
        return npl_mpls_header_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @mpls_relay_local_vars_termination_label.setter
    def mpls_relay_local_vars_termination_label(self, value):
        self._set_field_value('field mpls_relay_local_vars_termination_label', 16, 32, npl_mpls_header_t, value)
    @property
    def mpls_relay_local_vars_adjust_next_hdr_offset(self):
        return self._get_field_value(48, 8)
    @mpls_relay_local_vars_adjust_next_hdr_offset.setter
    def mpls_relay_local_vars_adjust_next_hdr_offset(self, value):
        self._set_field_value('field mpls_relay_local_vars_adjust_next_hdr_offset', 48, 8, int, value)

class npl_label_above_null_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(56)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_label_above_null_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_relay_local_vars_packed_label_above_null(self):
        return npl_mpls_relay_packed_labels_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mpls_relay_local_vars_packed_label_above_null.setter
    def mpls_relay_local_vars_packed_label_above_null(self, value):
        self._set_field_value('field mpls_relay_local_vars_packed_label_above_null', 0, 56, npl_mpls_relay_packed_labels_t, value)

class npl_label_above_null_pack_table_value_t(basic_npl_struct):
    def __init__(self, mpls_relay_local_vars_packed_label_above_null=0):
        super().__init__(64)
        self.payloads.mpls_relay_local_vars_packed_label_above_null = mpls_relay_local_vars_packed_label_above_null

    def _get_as_sub_field(data, offset_in_data):
        result = npl_label_above_null_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(56, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 56, 8, int, value)
    @property
    def payloads(self):
        return npl_label_above_null_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 56, npl_label_above_null_pack_table_payloads_t, value)



# API-s for table: large_encap_global_lsp_prefix_table

NPL_LARGE_ENCAP_GLOBAL_LSP_PREFIX_TABLE_ACTION_WRITE = 0x0

class npl_large_encap_global_lsp_prefix_table_key_t(basic_npl_struct):
    def __init__(self, lsp_dest_prefix=0):
        super().__init__(16)
        self.lsp_dest_prefix = lsp_dest_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_global_lsp_prefix_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_dest_prefix(self):
        return self._get_field_value(0, 16)
    @lsp_dest_prefix.setter
    def lsp_dest_prefix(self, value):
        self._set_field_value('field lsp_dest_prefix', 0, 16, int, value)

class npl_large_encap_global_lsp_prefix_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_global_lsp_prefix_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_encap_mapping_data_payload(self):
        return npl_lsp_encap_mapping_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lsp_encap_mapping_data_payload.setter
    def lsp_encap_mapping_data_payload(self, value):
        self._set_field_value('field lsp_encap_mapping_data_payload', 0, 80, npl_lsp_encap_mapping_data_payload_t, value)

class npl_large_encap_global_lsp_prefix_table_value_t(basic_npl_struct):
    def __init__(self, lsp_encap_mapping_data_payload=0):
        super().__init__(88)
        self.payloads.lsp_encap_mapping_data_payload = lsp_encap_mapping_data_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_global_lsp_prefix_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_large_encap_global_lsp_prefix_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_large_encap_global_lsp_prefix_table_payloads_t, value)



# API-s for table: large_encap_ip_tunnel_table

NPL_LARGE_ENCAP_IP_TUNNEL_TABLE_ACTION_WRITE = 0x0

class npl_large_encap_ip_tunnel_table_key_t(basic_npl_struct):
    def __init__(self, gre_tunnel_dlp=0):
        super().__init__(16)
        self.gre_tunnel_dlp = gre_tunnel_dlp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_ip_tunnel_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def gre_tunnel_dlp(self):
        return self._get_field_value(0, 16)
    @gre_tunnel_dlp.setter
    def gre_tunnel_dlp(self, value):
        self._set_field_value('field gre_tunnel_dlp', 0, 16, int, value)

class npl_large_encap_ip_tunnel_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_ip_tunnel_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def gre_tunnel_attributes(self):
        return npl_gre_tunnel_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @gre_tunnel_attributes.setter
    def gre_tunnel_attributes(self, value):
        self._set_field_value('field gre_tunnel_attributes', 0, 120, npl_gre_tunnel_attributes_t, value)

class npl_large_encap_ip_tunnel_table_value_t(basic_npl_struct):
    def __init__(self, gre_tunnel_attributes=0):
        super().__init__(128)
        self.payloads.gre_tunnel_attributes = gre_tunnel_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_ip_tunnel_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_large_encap_ip_tunnel_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_large_encap_ip_tunnel_table_payloads_t, value)



# API-s for table: large_encap_ip_tunnel_table_compound

NPL_LARGE_ENCAP_IP_TUNNEL_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_large_encap_ip_tunnel_table_compound_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_encap_l3_gre_tunnel_dlp=0):
        super().__init__(22)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0xe)
        self.tx_npu_header_encap_l3_gre_tunnel_dlp = tx_npu_header_encap_l3_gre_tunnel_dlp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_ip_tunnel_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_IP_TUNNEL_LDB_exact_0xe(self):
        return self._get_field_value(2, 4)
    @property
    def tx_npu_header_encap_l3_gre_tunnel_dlp(self):
        return self._get_field_value(6, 16)
    @tx_npu_header_encap_l3_gre_tunnel_dlp.setter
    def tx_npu_header_encap_l3_gre_tunnel_dlp(self, value):
        self._set_field_value('field tx_npu_header_encap_l3_gre_tunnel_dlp', 6, 16, int, value)

class npl_large_encap_ip_tunnel_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_ip_tunnel_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def gre_tunnel_attributes(self):
        return npl_gre_tunnel_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @gre_tunnel_attributes.setter
    def gre_tunnel_attributes(self, value):
        self._set_field_value('field gre_tunnel_attributes', 0, 120, npl_gre_tunnel_attributes_t, value)

class npl_large_encap_ip_tunnel_table_compound_value_t(basic_npl_struct):
    def __init__(self, gre_tunnel_attributes=0):
        super().__init__(128)
        self.payloads.gre_tunnel_attributes = gre_tunnel_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_ip_tunnel_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_large_encap_ip_tunnel_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_large_encap_ip_tunnel_table_compound_payloads_t, value)



# API-s for table: large_encap_mpls_he_no_ldp_table

NPL_LARGE_ENCAP_MPLS_HE_NO_LDP_TABLE_ACTION_WRITE = 0x0

class npl_large_encap_mpls_he_no_ldp_table_key_t(basic_npl_struct):
    def __init__(self, nh_ptr=0, lsp_dest_prefix=0):
        super().__init__(28)
        self.nh_ptr = nh_ptr
        self.lsp_dest_prefix = lsp_dest_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_he_no_ldp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def nh_ptr(self):
        return self._get_field_value(0, 12)
    @nh_ptr.setter
    def nh_ptr(self, value):
        self._set_field_value('field nh_ptr', 0, 12, int, value)
    @property
    def lsp_dest_prefix(self):
        return self._get_field_value(12, 16)
    @lsp_dest_prefix.setter
    def lsp_dest_prefix(self, value):
        self._set_field_value('field lsp_dest_prefix', 12, 16, int, value)

class npl_large_encap_mpls_he_no_ldp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_he_no_ldp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_encap_mapping_data_payload(self):
        return npl_lsp_encap_mapping_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lsp_encap_mapping_data_payload.setter
    def lsp_encap_mapping_data_payload(self, value):
        self._set_field_value('field lsp_encap_mapping_data_payload', 0, 80, npl_lsp_encap_mapping_data_payload_t, value)

class npl_large_encap_mpls_he_no_ldp_table_value_t(basic_npl_struct):
    def __init__(self, lsp_encap_mapping_data_payload=0):
        super().__init__(88)
        self.payloads.lsp_encap_mapping_data_payload = lsp_encap_mapping_data_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_he_no_ldp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_large_encap_mpls_he_no_ldp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_large_encap_mpls_he_no_ldp_table_payloads_t, value)



# API-s for table: large_encap_mpls_labels_table_compound

NPL_LARGE_ENCAP_MPLS_LABELS_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_mpls_he_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_ptr=0, l3_tx_local_vars_lsp_dest_prefix=0):
        super().__init__(34)
        self.l3_tx_local_vars_nh_ptr = l3_tx_local_vars_nh_ptr
        self.l3_tx_local_vars_lsp_dest_prefix = l3_tx_local_vars_lsp_dest_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_mpls_he_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_MPLS_ENCAP_LDB_exact_0x1(self):
        return self._get_field_value(2, 4)
    @property
    def l3_tx_local_vars_nh_ptr(self):
        return self._get_field_value(6, 12)
    @l3_tx_local_vars_nh_ptr.setter
    def l3_tx_local_vars_nh_ptr(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_ptr', 6, 12, int, value)
    @property
    def l3_tx_local_vars_lsp_dest_prefix(self):
        return self._get_field_value(18, 16)
    @l3_tx_local_vars_lsp_dest_prefix.setter
    def l3_tx_local_vars_lsp_dest_prefix(self, value):
        self._set_field_value('field l3_tx_local_vars_lsp_dest_prefix', 18, 16, int, value)



class npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_mpls_he_sr_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_lsp_dest_prefix=0):
        super().__init__(22)
        self.l3_tx_local_vars_lsp_dest_prefix = l3_tx_local_vars_lsp_dest_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_mpls_he_sr_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_MPLS_SRV4_ENCAP_LDB_exact_0x6(self):
        return self._get_field_value(2, 4)
    @property
    def l3_tx_local_vars_lsp_dest_prefix(self):
        return self._get_field_value(6, 16)
    @l3_tx_local_vars_lsp_dest_prefix.setter
    def l3_tx_local_vars_lsp_dest_prefix(self, value):
        self._set_field_value('field l3_tx_local_vars_lsp_dest_prefix', 6, 16, int, value)



class npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_te_he_with_tunnel_id_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_ptr=0, tx_npu_header_te_tunnel=0):
        super().__init__(34)
        self.l3_tx_local_vars_nh_ptr = l3_tx_local_vars_nh_ptr
        self.tx_npu_header_te_tunnel = tx_npu_header_te_tunnel

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_te_he_with_tunnel_id_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_MPLS_TE_ENCAP_LDB_exact_0x2(self):
        return self._get_field_value(2, 4)
    @property
    def l3_tx_local_vars_nh_ptr(self):
        return self._get_field_value(6, 12)
    @l3_tx_local_vars_nh_ptr.setter
    def l3_tx_local_vars_nh_ptr(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_ptr', 6, 12, int, value)
    @property
    def tx_npu_header_te_tunnel(self):
        return self._get_field_value(18, 16)
    @tx_npu_header_te_tunnel.setter
    def tx_npu_header_te_tunnel(self, value):
        self._set_field_value('field tx_npu_header_te_tunnel', 18, 16, int, value)



class npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_ilm_tunnel_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_ptr=0, tx_npu_header_te_tunnel=0):
        super().__init__(34)
        self.l3_tx_local_vars_nh_ptr = l3_tx_local_vars_nh_ptr
        self.tx_npu_header_te_tunnel = tx_npu_header_te_tunnel

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_ilm_tunnel_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_MPLS_TE_ENCAP_LDB_exact_0x2(self):
        return self._get_field_value(2, 4)
    @property
    def l3_tx_local_vars_nh_ptr(self):
        return self._get_field_value(6, 12)
    @l3_tx_local_vars_nh_ptr.setter
    def l3_tx_local_vars_nh_ptr(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_ptr', 6, 12, int, value)
    @property
    def tx_npu_header_te_tunnel(self):
        return self._get_field_value(18, 16)
    @tx_npu_header_te_tunnel.setter
    def tx_npu_header_te_tunnel(self, value):
        self._set_field_value('field tx_npu_header_te_tunnel', 18, 16, int, value)




class large_encap_mpls_labels_table_compound_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(34 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = large_encap_mpls_labels_table_compound_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE(self):
        return npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_mpls_he_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE.setter
    def NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE(self, value):
        self._set_field_value('field NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE', 0, 34, npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_mpls_he_t, value)
    @property
    def NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE_SR(self):
        return npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_mpls_he_sr_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE_SR.setter
    def NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE_SR(self, value):
        self._set_field_value('field NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE_SR', 0, 22, npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_mpls_he_sr_t, value)
    @property
    def NPL_NPU_ENCAP_L3_HEADER_TYPE_TE_HE_WITH_TUNNEL_ID(self):
        return npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_te_he_with_tunnel_id_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_NPU_ENCAP_L3_HEADER_TYPE_TE_HE_WITH_TUNNEL_ID.setter
    def NPL_NPU_ENCAP_L3_HEADER_TYPE_TE_HE_WITH_TUNNEL_ID(self, value):
        self._set_field_value('field NPL_NPU_ENCAP_L3_HEADER_TYPE_TE_HE_WITH_TUNNEL_ID', 0, 34, npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_te_he_with_tunnel_id_t, value)
    @property
    def NPL_NPU_ENCAP_L3_HEADER_TYPE_ILM_TUNNEL(self):
        return npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_ilm_tunnel_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_NPU_ENCAP_L3_HEADER_TYPE_ILM_TUNNEL.setter
    def NPL_NPU_ENCAP_L3_HEADER_TYPE_ILM_TUNNEL(self, value):
        self._set_field_value('field NPL_NPU_ENCAP_L3_HEADER_TYPE_ILM_TUNNEL', 0, 34, npl_large_encap_mpls_labels_table_compound_key_option_npu_encap_l3_header_type_ilm_tunnel_t, value)

class npl_large_encap_mpls_labels_table_compound_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_encapsulation_type_l3_encap_type=0):
        super().__init__(34)
        self.tx_npu_header_encapsulation_type_l3_encap_type = tx_npu_header_encapsulation_type_l3_encap_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_labels_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _tx_npu_header_encapsulation_type_l3_encap_type = 0
    @property
    def tx_npu_header_encapsulation_type_l3_encap_type(self):
        return self._tx_npu_header_encapsulation_type_l3_encap_type
    @tx_npu_header_encapsulation_type_l3_encap_type.setter
    def tx_npu_header_encapsulation_type_l3_encap_type(self, value):
        self._tx_npu_header_encapsulation_type_l3_encap_type = value
        if tx_npu_header_encapsulation_type_l3_encap_type == NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE:
            self._set_field_value('const field', 0, 2, int, 0x1)
        if tx_npu_header_encapsulation_type_l3_encap_type == NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE:
            self._set_field_value('const field', 2, 4, int, 0x1)
        if tx_npu_header_encapsulation_type_l3_encap_type == NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE_SR:
            self._set_field_value('const field', 0, 2, int, 0x1)
        if tx_npu_header_encapsulation_type_l3_encap_type == NPL_NPU_ENCAP_L3_HEADER_TYPE_MPLS_HE_SR:
            self._set_field_value('const field', 2, 4, int, 0x6)
        if tx_npu_header_encapsulation_type_l3_encap_type == NPL_NPU_ENCAP_L3_HEADER_TYPE_TE_HE_WITH_TUNNEL_ID:
            self._set_field_value('const field', 0, 2, int, 0x1)
        if tx_npu_header_encapsulation_type_l3_encap_type == NPL_NPU_ENCAP_L3_HEADER_TYPE_TE_HE_WITH_TUNNEL_ID:
            self._set_field_value('const field', 2, 4, int, 0x2)
        if tx_npu_header_encapsulation_type_l3_encap_type == NPL_NPU_ENCAP_L3_HEADER_TYPE_ILM_TUNNEL:
            self._set_field_value('const field', 0, 2, int, 0x1)
        if tx_npu_header_encapsulation_type_l3_encap_type == NPL_NPU_ENCAP_L3_HEADER_TYPE_ILM_TUNNEL:
            self._set_field_value('const field', 2, 4, int, 0x2)

    @property
    def options(self):
        return large_encap_mpls_labels_table_compound_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 34 - 0, large_encap_mpls_labels_table_compound_key_options_t, value)

class npl_large_encap_mpls_labels_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_labels_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_encap_mapping_data_payload(self):
        return npl_lsp_encap_mapping_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lsp_encap_mapping_data_payload.setter
    def lsp_encap_mapping_data_payload(self, value):
        self._set_field_value('field lsp_encap_mapping_data_payload', 0, 80, npl_lsp_encap_mapping_data_payload_t, value)

class npl_large_encap_mpls_labels_table_compound_value_t(basic_npl_struct):
    def __init__(self, lsp_encap_mapping_data_payload=0):
        super().__init__(88)
        self.payloads.lsp_encap_mapping_data_payload = lsp_encap_mapping_data_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_labels_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_large_encap_mpls_labels_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_large_encap_mpls_labels_table_compound_payloads_t, value)



# API-s for table: large_encap_mpls_ldp_over_te_table

NPL_LARGE_ENCAP_MPLS_LDP_OVER_TE_TABLE_ACTION_WRITE = 0x0

class npl_large_encap_mpls_ldp_over_te_table_key_t(basic_npl_struct):
    def __init__(self, te_tunnel=0, lsp_dest_prefix=0):
        super().__init__(32)
        self.te_tunnel = te_tunnel
        self.lsp_dest_prefix = lsp_dest_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_ldp_over_te_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def te_tunnel(self):
        return self._get_field_value(0, 16)
    @te_tunnel.setter
    def te_tunnel(self, value):
        self._set_field_value('field te_tunnel', 0, 16, int, value)
    @property
    def lsp_dest_prefix(self):
        return self._get_field_value(16, 16)
    @lsp_dest_prefix.setter
    def lsp_dest_prefix(self, value):
        self._set_field_value('field lsp_dest_prefix', 16, 16, int, value)

class npl_large_encap_mpls_ldp_over_te_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(45)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_ldp_over_te_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def large_em_label_encap_data_and_counter_ptr(self):
        return npl_large_em_label_encap_data_and_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @large_em_label_encap_data_and_counter_ptr.setter
    def large_em_label_encap_data_and_counter_ptr(self, value):
        self._set_field_value('field large_em_label_encap_data_and_counter_ptr', 0, 45, npl_large_em_label_encap_data_and_counter_ptr_t, value)

class npl_large_encap_mpls_ldp_over_te_table_value_t(basic_npl_struct):
    def __init__(self, large_em_label_encap_data_and_counter_ptr=0):
        super().__init__(53)
        self.payloads.large_em_label_encap_data_and_counter_ptr = large_em_label_encap_data_and_counter_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_mpls_ldp_over_te_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(45, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 45, 8, int, value)
    @property
    def payloads(self):
        return npl_large_encap_mpls_ldp_over_te_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 45, npl_large_encap_mpls_ldp_over_te_table_payloads_t, value)



# API-s for table: large_encap_te_he_tunnel_id_table

NPL_LARGE_ENCAP_TE_HE_TUNNEL_ID_TABLE_ACTION_WRITE = 0x0

class npl_large_encap_te_he_tunnel_id_table_key_t(basic_npl_struct):
    def __init__(self, nh_ptr=0, te_tunnel=0):
        super().__init__(28)
        self.nh_ptr = nh_ptr
        self.te_tunnel = te_tunnel

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_te_he_tunnel_id_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def nh_ptr(self):
        return self._get_field_value(0, 12)
    @nh_ptr.setter
    def nh_ptr(self, value):
        self._set_field_value('field nh_ptr', 0, 12, int, value)
    @property
    def te_tunnel(self):
        return self._get_field_value(12, 16)
    @te_tunnel.setter
    def te_tunnel(self, value):
        self._set_field_value('field te_tunnel', 12, 16, int, value)

class npl_large_encap_te_he_tunnel_id_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_te_he_tunnel_id_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_encap_mapping_data_payload(self):
        return npl_lsp_encap_mapping_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lsp_encap_mapping_data_payload.setter
    def lsp_encap_mapping_data_payload(self, value):
        self._set_field_value('field lsp_encap_mapping_data_payload', 0, 80, npl_lsp_encap_mapping_data_payload_t, value)

class npl_large_encap_te_he_tunnel_id_table_value_t(basic_npl_struct):
    def __init__(self, lsp_encap_mapping_data_payload=0):
        super().__init__(88)
        self.payloads.lsp_encap_mapping_data_payload = lsp_encap_mapping_data_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_large_encap_te_he_tunnel_id_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_large_encap_te_he_tunnel_id_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_large_encap_te_he_tunnel_id_table_payloads_t, value)



# API-s for table: latest_learn_records_table

NPL_LATEST_LEARN_RECORDS_TABLE_ACTION_WRITE = 0x0

class npl_latest_learn_records_table_key_t(basic_npl_struct):
    def __init__(self, learn_record_filter_vars_read_ptr=0):
        super().__init__(5)
        self.learn_record_filter_vars_read_ptr = learn_record_filter_vars_read_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_latest_learn_records_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def learn_record_filter_vars_read_ptr(self):
        return npl_lr_filter_fifo_register_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @learn_record_filter_vars_read_ptr.setter
    def learn_record_filter_vars_read_ptr(self, value):
        self._set_field_value('field learn_record_filter_vars_read_ptr', 0, 5, npl_lr_filter_fifo_register_t, value)

class npl_latest_learn_records_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(88)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_latest_learn_records_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def learn_record_filter_vars_filter_result(self):
        return npl_output_learn_record_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @learn_record_filter_vars_filter_result.setter
    def learn_record_filter_vars_filter_result(self, value):
        self._set_field_value('field learn_record_filter_vars_filter_result', 0, 88, npl_output_learn_record_t, value)

class npl_latest_learn_records_table_value_t(basic_npl_struct):
    def __init__(self, learn_record_filter_vars_filter_result=0):
        super().__init__(96)
        self.payloads.learn_record_filter_vars_filter_result = learn_record_filter_vars_filter_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_latest_learn_records_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(88, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 88, 8, int, value)
    @property
    def payloads(self):
        return npl_latest_learn_records_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 88, npl_latest_learn_records_table_payloads_t, value)



# API-s for table: ldpote_label_table_compound

NPL_LDPOTE_LABEL_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_ldpote_label_table_compound_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_encap_tunnel_headend_asbr=0, tx_npu_header_encap_tunnel_headend_lsp_dest_prefix=0):
        super().__init__(38)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0x3)
        self.tx_npu_header_encap_tunnel_headend_asbr = tx_npu_header_encap_tunnel_headend_asbr
        self.tx_npu_header_encap_tunnel_headend_lsp_dest_prefix = tx_npu_header_encap_tunnel_headend_lsp_dest_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ldpote_label_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_MPLS_LDP_OVER_TE_ENCAP_LDB_exact_0x3(self):
        return self._get_field_value(2, 4)
    @property
    def tx_npu_header_encap_tunnel_headend_asbr(self):
        return self._get_field_value(6, 16)
    @tx_npu_header_encap_tunnel_headend_asbr.setter
    def tx_npu_header_encap_tunnel_headend_asbr(self, value):
        self._set_field_value('field tx_npu_header_encap_tunnel_headend_asbr', 6, 16, int, value)
    @property
    def tx_npu_header_encap_tunnel_headend_lsp_dest_prefix(self):
        return self._get_field_value(22, 16)
    @tx_npu_header_encap_tunnel_headend_lsp_dest_prefix.setter
    def tx_npu_header_encap_tunnel_headend_lsp_dest_prefix(self, value):
        self._set_field_value('field tx_npu_header_encap_tunnel_headend_lsp_dest_prefix', 22, 16, int, value)

class npl_ldpote_label_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(45)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ldpote_label_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def large_em_label_encap_data_and_counter_ptr(self):
        return npl_large_em_label_encap_data_and_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @large_em_label_encap_data_and_counter_ptr.setter
    def large_em_label_encap_data_and_counter_ptr(self, value):
        self._set_field_value('field large_em_label_encap_data_and_counter_ptr', 0, 45, npl_large_em_label_encap_data_and_counter_ptr_t, value)

class npl_ldpote_label_table_compound_value_t(basic_npl_struct):
    def __init__(self, large_em_label_encap_data_and_counter_ptr=0):
        super().__init__(53)
        self.payloads.large_em_label_encap_data_and_counter_ptr = large_em_label_encap_data_and_counter_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ldpote_label_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(45, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 45, 8, int, value)
    @property
    def payloads(self):
        return npl_ldpote_label_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 45, npl_ldpote_label_table_compound_payloads_t, value)



# API-s for table: learn_manager_cfg_max_learn_type_reg

NPL_LEARN_MANAGER_CFG_MAX_LEARN_TYPE_REG_ACTION_WRITE = 0x0

class npl_learn_manager_cfg_max_learn_type_reg_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_learn_manager_cfg_max_learn_type_reg_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_learn_manager_cfg_max_learn_type_reg_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_learn_manager_cfg_max_learn_type_reg_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def learn_manager_cfg_max_learn_type(self):
        return npl_learn_manager_cfg_max_learn_type_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @learn_manager_cfg_max_learn_type.setter
    def learn_manager_cfg_max_learn_type(self, value):
        self._set_field_value('field learn_manager_cfg_max_learn_type', 0, 2, npl_learn_manager_cfg_max_learn_type_t, value)

class npl_learn_manager_cfg_max_learn_type_reg_value_t(basic_npl_struct):
    def __init__(self, learn_manager_cfg_max_learn_type=0):
        super().__init__(10)
        self.payloads.learn_manager_cfg_max_learn_type = learn_manager_cfg_max_learn_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_learn_manager_cfg_max_learn_type_reg_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_learn_manager_cfg_max_learn_type_reg_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_learn_manager_cfg_max_learn_type_reg_payloads_t, value)



# API-s for table: learn_record_fifo_table

NPL_LEARN_RECORD_FIFO_TABLE_ACTION_WRITE = 0x0

class npl_learn_record_fifo_table_key_t(basic_npl_struct):
    def __init__(self, learn_record_fifo_address=0):
        super().__init__(4)
        self.learn_record_fifo_address = learn_record_fifo_address

    def _get_as_sub_field(data, offset_in_data):
        result = npl_learn_record_fifo_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def learn_record_fifo_address(self):
        return npl_lr_fifo_register_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @learn_record_fifo_address.setter
    def learn_record_fifo_address(self, value):
        self._set_field_value('field learn_record_fifo_address', 0, 4, npl_lr_fifo_register_t, value)

class npl_learn_record_fifo_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(88)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_learn_record_fifo_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def learn_record_result(self):
        return npl_output_learn_record_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @learn_record_result.setter
    def learn_record_result(self, value):
        self._set_field_value('field learn_record_result', 0, 88, npl_output_learn_record_t, value)

class npl_learn_record_fifo_table_value_t(basic_npl_struct):
    def __init__(self, learn_record_result=0):
        super().__init__(96)
        self.payloads.learn_record_result = learn_record_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_learn_record_fifo_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(88, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 88, 8, int, value)
    @property
    def payloads(self):
        return npl_learn_record_fifo_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 88, npl_learn_record_fifo_table_payloads_t, value)



# API-s for table: light_fi_fabric_table

NPL_LIGHT_FI_FABRIC_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT = 0x0

class npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t(basic_npl_struct):
    def __init__(self, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, npe_macro_id=0, npe_macro_id_valid=0, next_header_format=0, header_format=0):
        super().__init__(37)
        self.use_additional_size = use_additional_size
        self.base_size = base_size
        self.is_protocol_layer = is_protocol_layer
        self.next_fi_macro_id = next_fi_macro_id
        self.npe_macro_id = npe_macro_id
        self.npe_macro_id_valid = npe_macro_id_valid
        self.next_header_format = next_header_format
        self.header_format = header_format

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def use_additional_size(self):
        return self._get_field_value(36, 1)
    @use_additional_size.setter
    def use_additional_size(self, value):
        self._set_field_value('field use_additional_size', 36, 1, int, value)
    @property
    def base_size(self):
        return self._get_field_value(29, 7)
    @base_size.setter
    def base_size(self, value):
        self._set_field_value('field base_size', 29, 7, int, value)
    @property
    def is_protocol_layer(self):
        return self._get_field_value(28, 1)
    @is_protocol_layer.setter
    def is_protocol_layer(self, value):
        self._set_field_value('field is_protocol_layer', 28, 1, int, value)
    @property
    def next_fi_macro_id(self):
        return self._get_field_value(25, 3)
    @next_fi_macro_id.setter
    def next_fi_macro_id(self, value):
        self._set_field_value('field next_fi_macro_id', 25, 3, int, value)
    @property
    def npe_macro_id(self):
        return self._get_field_value(17, 8)
    @npe_macro_id.setter
    def npe_macro_id(self, value):
        self._set_field_value('field npe_macro_id', 17, 8, int, value)
    @property
    def npe_macro_id_valid(self):
        return self._get_field_value(16, 1)
    @npe_macro_id_valid.setter
    def npe_macro_id_valid(self, value):
        self._set_field_value('field npe_macro_id_valid', 16, 1, int, value)
    @property
    def next_header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @next_header_format.setter
    def next_header_format(self, value):
        self._set_field_value('field next_header_format', 8, 8, npl_header_format_t, value)
    @property
    def header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @header_format.setter
    def header_format(self, value):
        self._set_field_value('field header_format', 0, 8, npl_header_format_t, value)




class npl_light_fi_fabric_table_key_t(basic_npl_struct):
    def __init__(self, fabric_header_type=0):
        super().__init__(4)
        self.fabric_header_type = fabric_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_fabric_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fabric_header_type(self):
        return self._get_field_value(0, 4)
    @fabric_header_type.setter
    def fabric_header_type(self, value):
        self._set_field_value('field fabric_header_type', 0, 4, int, value)

class npl_light_fi_fabric_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(37)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_fabric_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def light_fi_leaba_table_hit(self):
        return npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @light_fi_leaba_table_hit.setter
    def light_fi_leaba_table_hit(self, value):
        self._set_field_value('field light_fi_leaba_table_hit', 0, 37, npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t, value)

class npl_light_fi_fabric_table_value_t(basic_npl_struct):
    def __init__(self, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, npe_macro_id=0, npe_macro_id_valid=0, next_header_format=0, header_format=0):
        super().__init__(45)
        self.payloads.light_fi_leaba_table_hit = npl_light_fi_fabric_table_light_fi_leaba_table_hit_payload_t(use_additional_size, base_size, is_protocol_layer, next_fi_macro_id, npe_macro_id, npe_macro_id_valid, next_header_format, header_format)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_fabric_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(37, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 37, 8, int, value)
    @property
    def payloads(self):
        return npl_light_fi_fabric_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 37, npl_light_fi_fabric_table_payloads_t, value)



# API-s for table: light_fi_npu_base_table

NPL_LIGHT_FI_NPU_BASE_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT = 0x0

class npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t(basic_npl_struct):
    def __init__(self, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, npe_macro_id=0, npe_macro_id_valid=0, next_header_format=0, header_format=0):
        super().__init__(37)
        self.use_additional_size = use_additional_size
        self.base_size = base_size
        self.is_protocol_layer = is_protocol_layer
        self.next_fi_macro_id = next_fi_macro_id
        self.npe_macro_id = npe_macro_id
        self.npe_macro_id_valid = npe_macro_id_valid
        self.next_header_format = next_header_format
        self.header_format = header_format

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def use_additional_size(self):
        return self._get_field_value(36, 1)
    @use_additional_size.setter
    def use_additional_size(self, value):
        self._set_field_value('field use_additional_size', 36, 1, int, value)
    @property
    def base_size(self):
        return self._get_field_value(29, 7)
    @base_size.setter
    def base_size(self, value):
        self._set_field_value('field base_size', 29, 7, int, value)
    @property
    def is_protocol_layer(self):
        return self._get_field_value(28, 1)
    @is_protocol_layer.setter
    def is_protocol_layer(self, value):
        self._set_field_value('field is_protocol_layer', 28, 1, int, value)
    @property
    def next_fi_macro_id(self):
        return self._get_field_value(25, 3)
    @next_fi_macro_id.setter
    def next_fi_macro_id(self, value):
        self._set_field_value('field next_fi_macro_id', 25, 3, int, value)
    @property
    def npe_macro_id(self):
        return self._get_field_value(17, 8)
    @npe_macro_id.setter
    def npe_macro_id(self, value):
        self._set_field_value('field npe_macro_id', 17, 8, int, value)
    @property
    def npe_macro_id_valid(self):
        return self._get_field_value(16, 1)
    @npe_macro_id_valid.setter
    def npe_macro_id_valid(self, value):
        self._set_field_value('field npe_macro_id_valid', 16, 1, int, value)
    @property
    def next_header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @next_header_format.setter
    def next_header_format(self, value):
        self._set_field_value('field next_header_format', 8, 8, npl_header_format_t, value)
    @property
    def header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @header_format.setter
    def header_format(self, value):
        self._set_field_value('field header_format', 0, 8, npl_header_format_t, value)




class npl_light_fi_npu_base_table_key_t(basic_npl_struct):
    def __init__(self, npu_header_type=0):
        super().__init__(6)
        self.npu_header_type = npu_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_npu_base_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def npu_header_type(self):
        return self._get_field_value(0, 6)
    @npu_header_type.setter
    def npu_header_type(self, value):
        self._set_field_value('field npu_header_type', 0, 6, int, value)

class npl_light_fi_npu_base_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(37)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_npu_base_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def light_fi_leaba_table_hit(self):
        return npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @light_fi_leaba_table_hit.setter
    def light_fi_leaba_table_hit(self, value):
        self._set_field_value('field light_fi_leaba_table_hit', 0, 37, npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t, value)

class npl_light_fi_npu_base_table_value_t(basic_npl_struct):
    def __init__(self, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, npe_macro_id=0, npe_macro_id_valid=0, next_header_format=0, header_format=0):
        super().__init__(45)
        self.payloads.light_fi_leaba_table_hit = npl_light_fi_npu_base_table_light_fi_leaba_table_hit_payload_t(use_additional_size, base_size, is_protocol_layer, next_fi_macro_id, npe_macro_id, npe_macro_id_valid, next_header_format, header_format)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_npu_base_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(37, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 37, 8, int, value)
    @property
    def payloads(self):
        return npl_light_fi_npu_base_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 37, npl_light_fi_npu_base_table_payloads_t, value)



# API-s for table: light_fi_npu_encap_table

NPL_LIGHT_FI_NPU_ENCAP_TABLE_ACTION_LIGHT_FI_NPU_ENCAP_TABLE_HIT = 0x0

class npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t(basic_npl_struct):
    def __init__(self, spare=0, next_stage_size_width=0, next_stage_size_offset=0, next_stage_protocol_or_type_offset=0):
        super().__init__(37)
        self.spare = spare
        self.next_stage_size_width = next_stage_size_width
        self.next_stage_size_offset = next_stage_size_offset
        self.next_stage_protocol_or_type_offset = next_stage_protocol_or_type_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def spare(self):
        return self._get_field_value(16, 21)
    @spare.setter
    def spare(self, value):
        self._set_field_value('field spare', 16, 21, int, value)
    @property
    def next_stage_size_width(self):
        return self._get_field_value(12, 4)
    @next_stage_size_width.setter
    def next_stage_size_width(self, value):
        self._set_field_value('field next_stage_size_width', 12, 4, int, value)
    @property
    def next_stage_size_offset(self):
        return self._get_field_value(6, 6)
    @next_stage_size_offset.setter
    def next_stage_size_offset(self, value):
        self._set_field_value('field next_stage_size_offset', 6, 6, int, value)
    @property
    def next_stage_protocol_or_type_offset(self):
        return self._get_field_value(0, 6)
    @next_stage_protocol_or_type_offset.setter
    def next_stage_protocol_or_type_offset(self, value):
        self._set_field_value('field next_stage_protocol_or_type_offset', 0, 6, int, value)




class npl_light_fi_npu_encap_table_key_t(basic_npl_struct):
    def __init__(self, next_header_type=0):
        super().__init__(8)
        self.next_header_type = next_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_npu_encap_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def next_header_type(self):
        return self._get_field_value(0, 8)
    @next_header_type.setter
    def next_header_type(self, value):
        self._set_field_value('field next_header_type', 0, 8, int, value)

class npl_light_fi_npu_encap_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(37)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_npu_encap_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def light_fi_npu_encap_table_hit(self):
        return npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @light_fi_npu_encap_table_hit.setter
    def light_fi_npu_encap_table_hit(self, value):
        self._set_field_value('field light_fi_npu_encap_table_hit', 0, 37, npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t, value)

class npl_light_fi_npu_encap_table_value_t(basic_npl_struct):
    def __init__(self, spare=0, next_stage_size_width=0, next_stage_size_offset=0, next_stage_protocol_or_type_offset=0):
        super().__init__(45)
        self.payloads.light_fi_npu_encap_table_hit = npl_light_fi_npu_encap_table_light_fi_npu_encap_table_hit_payload_t(spare, next_stage_size_width, next_stage_size_offset, next_stage_protocol_or_type_offset)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_npu_encap_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(37, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 37, 8, int, value)
    @property
    def payloads(self):
        return npl_light_fi_npu_encap_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 37, npl_light_fi_npu_encap_table_payloads_t, value)



# API-s for table: light_fi_nw_0_table

NPL_LIGHT_FI_NW_0_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT = 0x0

class npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t(basic_npl_struct):
    def __init__(self, next_stage_size_width=0, next_stage_size_offset=0, next_stage_protocol_or_type_offset=0, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, next_header_format=0, header_format=0):
        super().__init__(44)
        self.next_stage_size_width = next_stage_size_width
        self.next_stage_size_offset = next_stage_size_offset
        self.next_stage_protocol_or_type_offset = next_stage_protocol_or_type_offset
        self.use_additional_size = use_additional_size
        self.base_size = base_size
        self.is_protocol_layer = is_protocol_layer
        self.next_fi_macro_id = next_fi_macro_id
        self.next_header_format = next_header_format
        self.header_format = header_format

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def next_stage_size_width(self):
        return self._get_field_value(40, 4)
    @next_stage_size_width.setter
    def next_stage_size_width(self, value):
        self._set_field_value('field next_stage_size_width', 40, 4, int, value)
    @property
    def next_stage_size_offset(self):
        return self._get_field_value(34, 6)
    @next_stage_size_offset.setter
    def next_stage_size_offset(self, value):
        self._set_field_value('field next_stage_size_offset', 34, 6, int, value)
    @property
    def next_stage_protocol_or_type_offset(self):
        return self._get_field_value(28, 6)
    @next_stage_protocol_or_type_offset.setter
    def next_stage_protocol_or_type_offset(self, value):
        self._set_field_value('field next_stage_protocol_or_type_offset', 28, 6, int, value)
    @property
    def use_additional_size(self):
        return self._get_field_value(27, 1)
    @use_additional_size.setter
    def use_additional_size(self, value):
        self._set_field_value('field use_additional_size', 27, 1, int, value)
    @property
    def base_size(self):
        return self._get_field_value(20, 7)
    @base_size.setter
    def base_size(self, value):
        self._set_field_value('field base_size', 20, 7, int, value)
    @property
    def is_protocol_layer(self):
        return self._get_field_value(19, 1)
    @is_protocol_layer.setter
    def is_protocol_layer(self, value):
        self._set_field_value('field is_protocol_layer', 19, 1, int, value)
    @property
    def next_fi_macro_id(self):
        return self._get_field_value(16, 3)
    @next_fi_macro_id.setter
    def next_fi_macro_id(self, value):
        self._set_field_value('field next_fi_macro_id', 16, 3, int, value)
    @property
    def next_header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @next_header_format.setter
    def next_header_format(self, value):
        self._set_field_value('field next_header_format', 8, 8, npl_header_format_t, value)
    @property
    def header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @header_format.setter
    def header_format(self, value):
        self._set_field_value('field header_format', 0, 8, npl_header_format_t, value)




class npl_light_fi_nw_0_table_key_t(basic_npl_struct):
    def __init__(self, next_protocol_field=0, current_header_type=0):
        super().__init__(21)
        self.next_protocol_field = next_protocol_field
        self.current_header_type = current_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def next_protocol_field(self):
        return self._get_field_value(0, 16)
    @next_protocol_field.setter
    def next_protocol_field(self, value):
        self._set_field_value('field next_protocol_field', 0, 16, int, value)
    @property
    def current_header_type(self):
        return self._get_field_value(16, 5)
    @current_header_type.setter
    def current_header_type(self, value):
        self._set_field_value('field current_header_type', 16, 5, int, value)

class npl_light_fi_nw_0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def light_fi_nw_table_hit(self):
        return npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @light_fi_nw_table_hit.setter
    def light_fi_nw_table_hit(self, value):
        self._set_field_value('field light_fi_nw_table_hit', 0, 44, npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t, value)

class npl_light_fi_nw_0_table_value_t(basic_npl_struct):
    def __init__(self, next_stage_size_width=0, next_stage_size_offset=0, next_stage_protocol_or_type_offset=0, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, next_header_format=0, header_format=0):
        super().__init__(52)
        self.payloads.light_fi_nw_table_hit = npl_light_fi_nw_0_table_light_fi_nw_table_hit_payload_t(next_stage_size_width, next_stage_size_offset, next_stage_protocol_or_type_offset, use_additional_size, base_size, is_protocol_layer, next_fi_macro_id, next_header_format, header_format)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_light_fi_nw_0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_light_fi_nw_0_table_payloads_t, value)



# API-s for table: light_fi_nw_1_table

NPL_LIGHT_FI_NW_1_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT = 0x0

class npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t(basic_npl_struct):
    def __init__(self, next_stage_size_width=0, next_stage_size_offset=0, next_stage_protocol_or_type_offset=0, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, next_header_format=0, header_format=0):
        super().__init__(44)
        self.next_stage_size_width = next_stage_size_width
        self.next_stage_size_offset = next_stage_size_offset
        self.next_stage_protocol_or_type_offset = next_stage_protocol_or_type_offset
        self.use_additional_size = use_additional_size
        self.base_size = base_size
        self.is_protocol_layer = is_protocol_layer
        self.next_fi_macro_id = next_fi_macro_id
        self.next_header_format = next_header_format
        self.header_format = header_format

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def next_stage_size_width(self):
        return self._get_field_value(40, 4)
    @next_stage_size_width.setter
    def next_stage_size_width(self, value):
        self._set_field_value('field next_stage_size_width', 40, 4, int, value)
    @property
    def next_stage_size_offset(self):
        return self._get_field_value(34, 6)
    @next_stage_size_offset.setter
    def next_stage_size_offset(self, value):
        self._set_field_value('field next_stage_size_offset', 34, 6, int, value)
    @property
    def next_stage_protocol_or_type_offset(self):
        return self._get_field_value(28, 6)
    @next_stage_protocol_or_type_offset.setter
    def next_stage_protocol_or_type_offset(self, value):
        self._set_field_value('field next_stage_protocol_or_type_offset', 28, 6, int, value)
    @property
    def use_additional_size(self):
        return self._get_field_value(27, 1)
    @use_additional_size.setter
    def use_additional_size(self, value):
        self._set_field_value('field use_additional_size', 27, 1, int, value)
    @property
    def base_size(self):
        return self._get_field_value(20, 7)
    @base_size.setter
    def base_size(self, value):
        self._set_field_value('field base_size', 20, 7, int, value)
    @property
    def is_protocol_layer(self):
        return self._get_field_value(19, 1)
    @is_protocol_layer.setter
    def is_protocol_layer(self, value):
        self._set_field_value('field is_protocol_layer', 19, 1, int, value)
    @property
    def next_fi_macro_id(self):
        return self._get_field_value(16, 3)
    @next_fi_macro_id.setter
    def next_fi_macro_id(self, value):
        self._set_field_value('field next_fi_macro_id', 16, 3, int, value)
    @property
    def next_header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @next_header_format.setter
    def next_header_format(self, value):
        self._set_field_value('field next_header_format', 8, 8, npl_header_format_t, value)
    @property
    def header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @header_format.setter
    def header_format(self, value):
        self._set_field_value('field header_format', 0, 8, npl_header_format_t, value)




class npl_light_fi_nw_1_table_key_t(basic_npl_struct):
    def __init__(self, next_protocol_field=0, current_header_type=0):
        super().__init__(21)
        self.next_protocol_field = next_protocol_field
        self.current_header_type = current_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def next_protocol_field(self):
        return self._get_field_value(0, 16)
    @next_protocol_field.setter
    def next_protocol_field(self, value):
        self._set_field_value('field next_protocol_field', 0, 16, int, value)
    @property
    def current_header_type(self):
        return self._get_field_value(16, 5)
    @current_header_type.setter
    def current_header_type(self, value):
        self._set_field_value('field current_header_type', 16, 5, int, value)

class npl_light_fi_nw_1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def light_fi_nw_table_hit(self):
        return npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @light_fi_nw_table_hit.setter
    def light_fi_nw_table_hit(self, value):
        self._set_field_value('field light_fi_nw_table_hit', 0, 44, npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t, value)

class npl_light_fi_nw_1_table_value_t(basic_npl_struct):
    def __init__(self, next_stage_size_width=0, next_stage_size_offset=0, next_stage_protocol_or_type_offset=0, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, next_header_format=0, header_format=0):
        super().__init__(52)
        self.payloads.light_fi_nw_table_hit = npl_light_fi_nw_1_table_light_fi_nw_table_hit_payload_t(next_stage_size_width, next_stage_size_offset, next_stage_protocol_or_type_offset, use_additional_size, base_size, is_protocol_layer, next_fi_macro_id, next_header_format, header_format)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_light_fi_nw_1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_light_fi_nw_1_table_payloads_t, value)



# API-s for table: light_fi_nw_2_table

NPL_LIGHT_FI_NW_2_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT = 0x0

class npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t(basic_npl_struct):
    def __init__(self, next_stage_size_width=0, next_stage_size_offset=0, next_stage_protocol_or_type_offset=0, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, next_header_format=0, header_format=0):
        super().__init__(44)
        self.next_stage_size_width = next_stage_size_width
        self.next_stage_size_offset = next_stage_size_offset
        self.next_stage_protocol_or_type_offset = next_stage_protocol_or_type_offset
        self.use_additional_size = use_additional_size
        self.base_size = base_size
        self.is_protocol_layer = is_protocol_layer
        self.next_fi_macro_id = next_fi_macro_id
        self.next_header_format = next_header_format
        self.header_format = header_format

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def next_stage_size_width(self):
        return self._get_field_value(40, 4)
    @next_stage_size_width.setter
    def next_stage_size_width(self, value):
        self._set_field_value('field next_stage_size_width', 40, 4, int, value)
    @property
    def next_stage_size_offset(self):
        return self._get_field_value(34, 6)
    @next_stage_size_offset.setter
    def next_stage_size_offset(self, value):
        self._set_field_value('field next_stage_size_offset', 34, 6, int, value)
    @property
    def next_stage_protocol_or_type_offset(self):
        return self._get_field_value(28, 6)
    @next_stage_protocol_or_type_offset.setter
    def next_stage_protocol_or_type_offset(self, value):
        self._set_field_value('field next_stage_protocol_or_type_offset', 28, 6, int, value)
    @property
    def use_additional_size(self):
        return self._get_field_value(27, 1)
    @use_additional_size.setter
    def use_additional_size(self, value):
        self._set_field_value('field use_additional_size', 27, 1, int, value)
    @property
    def base_size(self):
        return self._get_field_value(20, 7)
    @base_size.setter
    def base_size(self, value):
        self._set_field_value('field base_size', 20, 7, int, value)
    @property
    def is_protocol_layer(self):
        return self._get_field_value(19, 1)
    @is_protocol_layer.setter
    def is_protocol_layer(self, value):
        self._set_field_value('field is_protocol_layer', 19, 1, int, value)
    @property
    def next_fi_macro_id(self):
        return self._get_field_value(16, 3)
    @next_fi_macro_id.setter
    def next_fi_macro_id(self, value):
        self._set_field_value('field next_fi_macro_id', 16, 3, int, value)
    @property
    def next_header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @next_header_format.setter
    def next_header_format(self, value):
        self._set_field_value('field next_header_format', 8, 8, npl_header_format_t, value)
    @property
    def header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @header_format.setter
    def header_format(self, value):
        self._set_field_value('field header_format', 0, 8, npl_header_format_t, value)




class npl_light_fi_nw_2_table_key_t(basic_npl_struct):
    def __init__(self, next_protocol_field=0, current_header_type=0):
        super().__init__(21)
        self.next_protocol_field = next_protocol_field
        self.current_header_type = current_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_2_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def next_protocol_field(self):
        return self._get_field_value(0, 16)
    @next_protocol_field.setter
    def next_protocol_field(self, value):
        self._set_field_value('field next_protocol_field', 0, 16, int, value)
    @property
    def current_header_type(self):
        return self._get_field_value(16, 5)
    @current_header_type.setter
    def current_header_type(self, value):
        self._set_field_value('field current_header_type', 16, 5, int, value)

class npl_light_fi_nw_2_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_2_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def light_fi_nw_table_hit(self):
        return npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @light_fi_nw_table_hit.setter
    def light_fi_nw_table_hit(self, value):
        self._set_field_value('field light_fi_nw_table_hit', 0, 44, npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t, value)

class npl_light_fi_nw_2_table_value_t(basic_npl_struct):
    def __init__(self, next_stage_size_width=0, next_stage_size_offset=0, next_stage_protocol_or_type_offset=0, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, next_header_format=0, header_format=0):
        super().__init__(52)
        self.payloads.light_fi_nw_table_hit = npl_light_fi_nw_2_table_light_fi_nw_table_hit_payload_t(next_stage_size_width, next_stage_size_offset, next_stage_protocol_or_type_offset, use_additional_size, base_size, is_protocol_layer, next_fi_macro_id, next_header_format, header_format)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_2_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_light_fi_nw_2_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_light_fi_nw_2_table_payloads_t, value)



# API-s for table: light_fi_nw_3_table

NPL_LIGHT_FI_NW_3_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT = 0x0

class npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t(basic_npl_struct):
    def __init__(self, next_stage_size_width=0, next_stage_size_offset=0, next_stage_protocol_or_type_offset=0, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, next_header_format=0, header_format=0):
        super().__init__(44)
        self.next_stage_size_width = next_stage_size_width
        self.next_stage_size_offset = next_stage_size_offset
        self.next_stage_protocol_or_type_offset = next_stage_protocol_or_type_offset
        self.use_additional_size = use_additional_size
        self.base_size = base_size
        self.is_protocol_layer = is_protocol_layer
        self.next_fi_macro_id = next_fi_macro_id
        self.next_header_format = next_header_format
        self.header_format = header_format

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def next_stage_size_width(self):
        return self._get_field_value(40, 4)
    @next_stage_size_width.setter
    def next_stage_size_width(self, value):
        self._set_field_value('field next_stage_size_width', 40, 4, int, value)
    @property
    def next_stage_size_offset(self):
        return self._get_field_value(34, 6)
    @next_stage_size_offset.setter
    def next_stage_size_offset(self, value):
        self._set_field_value('field next_stage_size_offset', 34, 6, int, value)
    @property
    def next_stage_protocol_or_type_offset(self):
        return self._get_field_value(28, 6)
    @next_stage_protocol_or_type_offset.setter
    def next_stage_protocol_or_type_offset(self, value):
        self._set_field_value('field next_stage_protocol_or_type_offset', 28, 6, int, value)
    @property
    def use_additional_size(self):
        return self._get_field_value(27, 1)
    @use_additional_size.setter
    def use_additional_size(self, value):
        self._set_field_value('field use_additional_size', 27, 1, int, value)
    @property
    def base_size(self):
        return self._get_field_value(20, 7)
    @base_size.setter
    def base_size(self, value):
        self._set_field_value('field base_size', 20, 7, int, value)
    @property
    def is_protocol_layer(self):
        return self._get_field_value(19, 1)
    @is_protocol_layer.setter
    def is_protocol_layer(self, value):
        self._set_field_value('field is_protocol_layer', 19, 1, int, value)
    @property
    def next_fi_macro_id(self):
        return self._get_field_value(16, 3)
    @next_fi_macro_id.setter
    def next_fi_macro_id(self, value):
        self._set_field_value('field next_fi_macro_id', 16, 3, int, value)
    @property
    def next_header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @next_header_format.setter
    def next_header_format(self, value):
        self._set_field_value('field next_header_format', 8, 8, npl_header_format_t, value)
    @property
    def header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @header_format.setter
    def header_format(self, value):
        self._set_field_value('field header_format', 0, 8, npl_header_format_t, value)




class npl_light_fi_nw_3_table_key_t(basic_npl_struct):
    def __init__(self, next_protocol_field=0, current_header_type=0):
        super().__init__(21)
        self.next_protocol_field = next_protocol_field
        self.current_header_type = current_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_3_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def next_protocol_field(self):
        return self._get_field_value(0, 16)
    @next_protocol_field.setter
    def next_protocol_field(self, value):
        self._set_field_value('field next_protocol_field', 0, 16, int, value)
    @property
    def current_header_type(self):
        return self._get_field_value(16, 5)
    @current_header_type.setter
    def current_header_type(self, value):
        self._set_field_value('field current_header_type', 16, 5, int, value)

class npl_light_fi_nw_3_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_3_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def light_fi_nw_table_hit(self):
        return npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @light_fi_nw_table_hit.setter
    def light_fi_nw_table_hit(self, value):
        self._set_field_value('field light_fi_nw_table_hit', 0, 44, npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t, value)

class npl_light_fi_nw_3_table_value_t(basic_npl_struct):
    def __init__(self, next_stage_size_width=0, next_stage_size_offset=0, next_stage_protocol_or_type_offset=0, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, next_header_format=0, header_format=0):
        super().__init__(52)
        self.payloads.light_fi_nw_table_hit = npl_light_fi_nw_3_table_light_fi_nw_table_hit_payload_t(next_stage_size_width, next_stage_size_offset, next_stage_protocol_or_type_offset, use_additional_size, base_size, is_protocol_layer, next_fi_macro_id, next_header_format, header_format)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_nw_3_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_light_fi_nw_3_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_light_fi_nw_3_table_payloads_t, value)



# API-s for table: light_fi_stages_cfg_table

NPL_LIGHT_FI_STAGES_CFG_TABLE_ACTION_WRITE = 0x0

class npl_light_fi_stages_cfg_table_key_t(basic_npl_struct):
    def __init__(self, macro_id=0):
        super().__init__(3)
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_stages_cfg_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def macro_id(self):
        return self._get_field_value(0, 3)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 3, int, value)

class npl_light_fi_stages_cfg_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_stages_cfg_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def light_fi_stage_cfg(self):
        return npl_light_fi_stage_cfg_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @light_fi_stage_cfg.setter
    def light_fi_stage_cfg(self, value):
        self._set_field_value('field light_fi_stage_cfg', 0, 20, npl_light_fi_stage_cfg_t, value)

class npl_light_fi_stages_cfg_table_value_t(basic_npl_struct):
    def __init__(self, light_fi_stage_cfg=0):
        super().__init__(28)
        self.payloads.light_fi_stage_cfg = light_fi_stage_cfg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_stages_cfg_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_light_fi_stages_cfg_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_light_fi_stages_cfg_table_payloads_t, value)



# API-s for table: light_fi_tm_table

NPL_LIGHT_FI_TM_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT = 0x0

class npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t(basic_npl_struct):
    def __init__(self, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, npe_macro_id=0, npe_macro_id_valid=0, next_header_format=0, header_format=0):
        super().__init__(37)
        self.use_additional_size = use_additional_size
        self.base_size = base_size
        self.is_protocol_layer = is_protocol_layer
        self.next_fi_macro_id = next_fi_macro_id
        self.npe_macro_id = npe_macro_id
        self.npe_macro_id_valid = npe_macro_id_valid
        self.next_header_format = next_header_format
        self.header_format = header_format

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def use_additional_size(self):
        return self._get_field_value(36, 1)
    @use_additional_size.setter
    def use_additional_size(self, value):
        self._set_field_value('field use_additional_size', 36, 1, int, value)
    @property
    def base_size(self):
        return self._get_field_value(29, 7)
    @base_size.setter
    def base_size(self, value):
        self._set_field_value('field base_size', 29, 7, int, value)
    @property
    def is_protocol_layer(self):
        return self._get_field_value(28, 1)
    @is_protocol_layer.setter
    def is_protocol_layer(self, value):
        self._set_field_value('field is_protocol_layer', 28, 1, int, value)
    @property
    def next_fi_macro_id(self):
        return self._get_field_value(25, 3)
    @next_fi_macro_id.setter
    def next_fi_macro_id(self, value):
        self._set_field_value('field next_fi_macro_id', 25, 3, int, value)
    @property
    def npe_macro_id(self):
        return self._get_field_value(17, 8)
    @npe_macro_id.setter
    def npe_macro_id(self, value):
        self._set_field_value('field npe_macro_id', 17, 8, int, value)
    @property
    def npe_macro_id_valid(self):
        return self._get_field_value(16, 1)
    @npe_macro_id_valid.setter
    def npe_macro_id_valid(self, value):
        self._set_field_value('field npe_macro_id_valid', 16, 1, int, value)
    @property
    def next_header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @next_header_format.setter
    def next_header_format(self, value):
        self._set_field_value('field next_header_format', 8, 8, npl_header_format_t, value)
    @property
    def header_format(self):
        return npl_header_format_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @header_format.setter
    def header_format(self, value):
        self._set_field_value('field header_format', 0, 8, npl_header_format_t, value)




class npl_light_fi_tm_table_key_t(basic_npl_struct):
    def __init__(self, tm_header_type=0):
        super().__init__(4)
        self.tm_header_type = tm_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_tm_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tm_header_type(self):
        return self._get_field_value(0, 4)
    @tm_header_type.setter
    def tm_header_type(self, value):
        self._set_field_value('field tm_header_type', 0, 4, int, value)

class npl_light_fi_tm_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(37)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_tm_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def light_fi_leaba_table_hit(self):
        return npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @light_fi_leaba_table_hit.setter
    def light_fi_leaba_table_hit(self, value):
        self._set_field_value('field light_fi_leaba_table_hit', 0, 37, npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t, value)

class npl_light_fi_tm_table_value_t(basic_npl_struct):
    def __init__(self, use_additional_size=0, base_size=0, is_protocol_layer=0, next_fi_macro_id=0, npe_macro_id=0, npe_macro_id_valid=0, next_header_format=0, header_format=0):
        super().__init__(45)
        self.payloads.light_fi_leaba_table_hit = npl_light_fi_tm_table_light_fi_leaba_table_hit_payload_t(use_additional_size, base_size, is_protocol_layer, next_fi_macro_id, npe_macro_id, npe_macro_id_valid, next_header_format, header_format)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_light_fi_tm_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(37, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 37, 8, int, value)
    @property
    def payloads(self):
        return npl_light_fi_tm_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 37, npl_light_fi_tm_table_payloads_t, value)



# API-s for table: link_relay_attributes_table

NPL_LINK_RELAY_ATTRIBUTES_TABLE_ACTION_RELAY = 0x0

class npl_link_relay_attributes_table_relay_payload_t(basic_npl_struct):
    def __init__(self, relay_table_payload=0):
        super().__init__(54)
        self.relay_table_payload = relay_table_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_link_relay_attributes_table_relay_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def relay_table_payload(self):
        return npl_relay_attr_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @relay_table_payload.setter
    def relay_table_payload(self, value):
        self._set_field_value('field relay_table_payload', 0, 54, npl_relay_attr_table_payload_t, value)




class npl_link_relay_attributes_table_key_t(basic_npl_struct):
    def __init__(self, service_relay_attributes_table_key_11_0_=0):
        super().__init__(12)
        self.service_relay_attributes_table_key_11_0_ = service_relay_attributes_table_key_11_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_link_relay_attributes_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def service_relay_attributes_table_key_11_0_(self):
        return self._get_field_value(0, 12)
    @service_relay_attributes_table_key_11_0_.setter
    def service_relay_attributes_table_key_11_0_(self, value):
        self._set_field_value('field service_relay_attributes_table_key_11_0_', 0, 12, int, value)

class npl_link_relay_attributes_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(54)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_link_relay_attributes_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def relay(self):
        return npl_link_relay_attributes_table_relay_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @relay.setter
    def relay(self, value):
        self._set_field_value('field relay', 0, 54, npl_link_relay_attributes_table_relay_payload_t, value)

class npl_link_relay_attributes_table_value_t(basic_npl_struct):
    def __init__(self, relay_table_payload=0):
        super().__init__(62)
        self.payloads.relay = npl_link_relay_attributes_table_relay_payload_t(relay_table_payload)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_link_relay_attributes_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(54, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 54, 8, int, value)
    @property
    def payloads(self):
        return npl_link_relay_attributes_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 54, npl_link_relay_attributes_table_payloads_t, value)



# API-s for table: link_up_vector

NPL_LINK_UP_VECTOR_ACTION_WRITE = 0x0

class npl_link_up_vector_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_link_up_vector_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_link_up_vector_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(108)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_link_up_vector_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def link_up_vector_result(self):
        return npl_link_up_vector_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @link_up_vector_result.setter
    def link_up_vector_result(self, value):
        self._set_field_value('field link_up_vector_result', 0, 108, npl_link_up_vector_result_t, value)

class npl_link_up_vector_value_t(basic_npl_struct):
    def __init__(self, link_up_vector_result=0):
        super().__init__(116)
        self.payloads.link_up_vector_result = link_up_vector_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_link_up_vector_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(108, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 108, 8, int, value)
    @property
    def payloads(self):
        return npl_link_up_vector_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 108, npl_link_up_vector_payloads_t, value)



# API-s for table: lp_over_lag_table

NPL_LP_OVER_LAG_TABLE_ACTION_WRITE = 0x0

class npl_lp_over_lag_table_key_t(basic_npl_struct):
    def __init__(self, l3_dlp_lsbs=0, l3_dlp_msbs=0, destination=0):
        super().__init__(34)
        self.l3_dlp_lsbs = l3_dlp_lsbs
        self.l3_dlp_msbs = l3_dlp_msbs
        self.destination = destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lp_over_lag_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_dlp_lsbs(self):
        return self._get_field_value(0, 12)
    @l3_dlp_lsbs.setter
    def l3_dlp_lsbs(self, value):
        self._set_field_value('field l3_dlp_lsbs', 0, 12, int, value)
    @property
    def l3_dlp_msbs(self):
        return npl_no_acls_t._get_as_sub_field(self._data, self._offset_in_data + 12)
    @l3_dlp_msbs.setter
    def l3_dlp_msbs(self, value):
        self._set_field_value('field l3_dlp_msbs', 12, 2, npl_no_acls_t, value)
    @property
    def destination(self):
        return self._get_field_value(14, 20)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 14, 20, int, value)

class npl_lp_over_lag_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lp_over_lag_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def bvn_destination(self):
        return self._get_field_value(0, 20)
    @bvn_destination.setter
    def bvn_destination(self, value):
        self._set_field_value('field bvn_destination', 0, 20, int, value)

class npl_lp_over_lag_table_value_t(basic_npl_struct):
    def __init__(self, bvn_destination=0):
        super().__init__(28)
        self.payloads.bvn_destination = bvn_destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lp_over_lag_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_lp_over_lag_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_lp_over_lag_table_payloads_t, value)



# API-s for table: lp_over_lag_table_compound

NPL_LP_OVER_LAG_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_lp_over_lag_table_compound_key_t(basic_npl_struct):
    def __init__(self, l3_dlp_for_queuing_l3_dlp_lsbs=0, l3_dlp_for_queuing_l3_dlp_msbs=0, device_rx_destination=0):
        super().__init__(41)
        self._set_field_value('const field', 0, 7, int, 0x36)
        self.l3_dlp_for_queuing_l3_dlp_lsbs = l3_dlp_for_queuing_l3_dlp_lsbs
        self.l3_dlp_for_queuing_l3_dlp_msbs = l3_dlp_for_queuing_l3_dlp_msbs
        self.device_rx_destination = device_rx_destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lp_over_lag_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_EM_LDB_LP_OVER_LAG_exact_0x36(self):
        return self._get_field_value(0, 7)
    @property
    def l3_dlp_for_queuing_l3_dlp_lsbs(self):
        return self._get_field_value(7, 12)
    @l3_dlp_for_queuing_l3_dlp_lsbs.setter
    def l3_dlp_for_queuing_l3_dlp_lsbs(self, value):
        self._set_field_value('field l3_dlp_for_queuing_l3_dlp_lsbs', 7, 12, int, value)
    @property
    def l3_dlp_for_queuing_l3_dlp_msbs(self):
        return npl_no_acls_t._get_as_sub_field(self._data, self._offset_in_data + 19)
    @l3_dlp_for_queuing_l3_dlp_msbs.setter
    def l3_dlp_for_queuing_l3_dlp_msbs(self, value):
        self._set_field_value('field l3_dlp_for_queuing_l3_dlp_msbs', 19, 2, npl_no_acls_t, value)
    @property
    def device_rx_destination(self):
        return self._get_field_value(21, 20)
    @device_rx_destination.setter
    def device_rx_destination(self, value):
        self._set_field_value('field device_rx_destination', 21, 20, int, value)

class npl_lp_over_lag_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lp_over_lag_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def resolution_local_vars_raw_lp_over_lag_result(self):
        return npl_raw_lp_over_lag_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @resolution_local_vars_raw_lp_over_lag_result.setter
    def resolution_local_vars_raw_lp_over_lag_result(self, value):
        self._set_field_value('field resolution_local_vars_raw_lp_over_lag_result', 0, 20, npl_raw_lp_over_lag_result_t, value)

class npl_lp_over_lag_table_compound_value_t(basic_npl_struct):
    def __init__(self, resolution_local_vars_raw_lp_over_lag_result=0):
        super().__init__(28)
        self.payloads.resolution_local_vars_raw_lp_over_lag_result = resolution_local_vars_raw_lp_over_lag_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lp_over_lag_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_lp_over_lag_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_lp_over_lag_table_compound_payloads_t, value)



# API-s for table: lpm_destination_prefix_map_table

NPL_LPM_DESTINATION_PREFIX_MAP_TABLE_ACTION_WRITE = 0x0

class npl_lpm_destination_prefix_map_table_key_t(basic_npl_struct):
    def __init__(self, lpm_prefix_map_input_prefix=0):
        super().__init__(6)
        self.lpm_prefix_map_input_prefix = lpm_prefix_map_input_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpm_destination_prefix_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpm_prefix_map_input_prefix(self):
        return self._get_field_value(0, 6)
    @lpm_prefix_map_input_prefix.setter
    def lpm_prefix_map_input_prefix(self, value):
        self._set_field_value('field lpm_prefix_map_input_prefix', 0, 6, int, value)

class npl_lpm_destination_prefix_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(7)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpm_destination_prefix_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpm_prefix_map_output(self):
        return npl_lpm_prefix_map_output_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpm_prefix_map_output.setter
    def lpm_prefix_map_output(self, value):
        self._set_field_value('field lpm_prefix_map_output', 0, 7, npl_lpm_prefix_map_output_t, value)

class npl_lpm_destination_prefix_map_table_value_t(basic_npl_struct):
    def __init__(self, lpm_prefix_map_output=0):
        super().__init__(15)
        self.payloads.lpm_prefix_map_output = lpm_prefix_map_output

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpm_destination_prefix_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(7, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 7, 8, int, value)
    @property
    def payloads(self):
        return npl_lpm_destination_prefix_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 7, npl_lpm_destination_prefix_map_table_payloads_t, value)



# API-s for table: lpts_2nd_lookup_table

NPL_LPTS_2ND_LOOKUP_TABLE_ACTION_WRITE = 0x0

class npl_lpts_2nd_lookup_table_key_t(basic_npl_struct):
    def __init__(self, lpts_second_lookup_key=0):
        super().__init__(5)
        self.lpts_second_lookup_key = lpts_second_lookup_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpts_2nd_lookup_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpts_second_lookup_key(self):
        return self._get_field_value(0, 5)
    @lpts_second_lookup_key.setter
    def lpts_second_lookup_key(self, value):
        self._set_field_value('field lpts_second_lookup_key', 0, 5, int, value)

class npl_lpts_2nd_lookup_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(25)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpts_2nd_lookup_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpts_payload(self):
        return npl_lpts_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpts_payload.setter
    def lpts_payload(self, value):
        self._set_field_value('field lpts_payload', 0, 25, npl_lpts_payload_t, value)

class npl_lpts_2nd_lookup_table_value_t(basic_npl_struct):
    def __init__(self, lpts_payload=0):
        super().__init__(33)
        self.payloads.lpts_payload = lpts_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpts_2nd_lookup_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(25, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 25, 8, int, value)
    @property
    def payloads(self):
        return npl_lpts_2nd_lookup_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 25, npl_lpts_2nd_lookup_table_payloads_t, value)



# API-s for table: lpts_meter_table

NPL_LPTS_METER_TABLE_ACTION_WRITE = 0x0

class npl_lpts_meter_table_key_t(basic_npl_struct):
    def __init__(self, meter_index_lsb=0, meter_index_msb=0):
        super().__init__(8)
        self.meter_index_lsb = meter_index_lsb
        self.meter_index_msb = meter_index_msb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpts_meter_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meter_index_lsb(self):
        return self._get_field_value(0, 7)
    @meter_index_lsb.setter
    def meter_index_lsb(self, value):
        self._set_field_value('field meter_index_lsb', 0, 7, int, value)
    @property
    def meter_index_msb(self):
        return self._get_field_value(7, 1)
    @meter_index_msb.setter
    def meter_index_msb(self, value):
        self._set_field_value('field meter_index_msb', 7, 1, int, value)

class npl_lpts_meter_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpts_meter_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def counter_ptr(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter_ptr.setter
    def counter_ptr(self, value):
        self._set_field_value('field counter_ptr', 0, 20, npl_counter_ptr_t, value)

class npl_lpts_meter_table_value_t(basic_npl_struct):
    def __init__(self, counter_ptr=0):
        super().__init__(28)
        self.payloads.counter_ptr = counter_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpts_meter_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_lpts_meter_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_lpts_meter_table_payloads_t, value)



# API-s for table: lpts_og_application_table

NPL_LPTS_OG_APPLICATION_TABLE_ACTION_WRITE = 0x0

class npl_lpts_og_application_table_key_t(basic_npl_struct):
    def __init__(self, l3_relay_id=0, fragmented=0, l4_ports=0, ipv6_l4_protocol=0, ipv4_l4_protocol=0, ip_version=0):
        super().__init__(61)
        self.l3_relay_id = l3_relay_id
        self.fragmented = fragmented
        self.l4_ports = l4_ports
        self.ipv6_l4_protocol = ipv6_l4_protocol
        self.ipv4_l4_protocol = ipv4_l4_protocol
        self.ip_version = ip_version

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpts_og_application_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 0, 11, npl_l3_relay_id_t, value)
    @property
    def fragmented(self):
        return self._get_field_value(11, 1)
    @fragmented.setter
    def fragmented(self, value):
        self._set_field_value('field fragmented', 11, 1, int, value)
    @property
    def l4_ports(self):
        return npl_l4_ports_header_t._get_as_sub_field(self._data, self._offset_in_data + 12)
    @l4_ports.setter
    def l4_ports(self, value):
        self._set_field_value('field l4_ports', 12, 32, npl_l4_ports_header_t, value)
    @property
    def ipv6_l4_protocol(self):
        return self._get_field_value(44, 8)
    @ipv6_l4_protocol.setter
    def ipv6_l4_protocol(self, value):
        self._set_field_value('field ipv6_l4_protocol', 44, 8, int, value)
    @property
    def ipv4_l4_protocol(self):
        return self._get_field_value(52, 8)
    @ipv4_l4_protocol.setter
    def ipv4_l4_protocol(self, value):
        self._set_field_value('field ipv4_l4_protocol', 52, 8, int, value)
    @property
    def ip_version(self):
        return self._get_field_value(60, 1)
    @ip_version.setter
    def ip_version(self, value):
        self._set_field_value('field ip_version', 60, 1, int, value)

class npl_lpts_og_application_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(14)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpts_og_application_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def og_app_config(self):
        return npl_ingress_lpts_og_app_config_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @og_app_config.setter
    def og_app_config(self, value):
        self._set_field_value('field og_app_config', 0, 14, npl_ingress_lpts_og_app_config_t, value)

class npl_lpts_og_application_table_value_t(basic_npl_struct):
    def __init__(self, og_app_config=0):
        super().__init__(22)
        self.payloads.og_app_config = og_app_config

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lpts_og_application_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(14, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 14, 8, int, value)
    @property
    def payloads(self):
        return npl_lpts_og_application_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 14, npl_lpts_og_application_table_payloads_t, value)



# API-s for table: lr_filter_write_ptr_reg

NPL_LR_FILTER_WRITE_PTR_REG_ACTION_WRITE = 0x0

class npl_lr_filter_write_ptr_reg_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_lr_filter_write_ptr_reg_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_lr_filter_write_ptr_reg_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(5)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lr_filter_write_ptr_reg_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def learn_record_filter_vars_write_ptr(self):
        return npl_lr_filter_fifo_register_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @learn_record_filter_vars_write_ptr.setter
    def learn_record_filter_vars_write_ptr(self, value):
        self._set_field_value('field learn_record_filter_vars_write_ptr', 0, 5, npl_lr_filter_fifo_register_t, value)

class npl_lr_filter_write_ptr_reg_value_t(basic_npl_struct):
    def __init__(self, learn_record_filter_vars_write_ptr=0):
        super().__init__(13)
        self.payloads.learn_record_filter_vars_write_ptr = learn_record_filter_vars_write_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lr_filter_write_ptr_reg_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(5, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 5, 8, int, value)
    @property
    def payloads(self):
        return npl_lr_filter_write_ptr_reg_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 5, npl_lr_filter_write_ptr_reg_payloads_t, value)



# API-s for table: lr_write_ptr_reg

NPL_LR_WRITE_PTR_REG_ACTION_WRITE = 0x0

class npl_lr_write_ptr_reg_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_lr_write_ptr_reg_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_lr_write_ptr_reg_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lr_write_ptr_reg_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def learn_record_fifo_vars_write_ptr(self):
        return npl_lr_fifo_register_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @learn_record_fifo_vars_write_ptr.setter
    def learn_record_fifo_vars_write_ptr(self, value):
        self._set_field_value('field learn_record_fifo_vars_write_ptr', 0, 4, npl_lr_fifo_register_t, value)

class npl_lr_write_ptr_reg_value_t(basic_npl_struct):
    def __init__(self, learn_record_fifo_vars_write_ptr=0):
        super().__init__(12)
        self.payloads.learn_record_fifo_vars_write_ptr = learn_record_fifo_vars_write_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_lr_write_ptr_reg_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_lr_write_ptr_reg_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_lr_write_ptr_reg_payloads_t, value)



# API-s for table: mac_af_npp_attributes_table

NPL_MAC_AF_NPP_ATTRIBUTES_TABLE_ACTION_WRITE = 0x0

class npl_mac_af_npp_attributes_table_key_t(basic_npl_struct):
    def __init__(self, npp_attributes_index=0):
        super().__init__(8)
        self.npp_attributes_index = npp_attributes_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_af_npp_attributes_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def npp_attributes_index(self):
        return self._get_field_value(0, 8)
    @npp_attributes_index.setter
    def npp_attributes_index(self, value):
        self._set_field_value('field npp_attributes_index', 0, 8, int, value)

class npl_mac_af_npp_attributes_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(49)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_af_npp_attributes_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_af_npp_attributes(self):
        return npl_mac_af_npp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_af_npp_attributes.setter
    def mac_af_npp_attributes(self, value):
        self._set_field_value('field mac_af_npp_attributes', 0, 49, npl_mac_af_npp_attributes_t, value)

class npl_mac_af_npp_attributes_table_value_t(basic_npl_struct):
    def __init__(self, mac_af_npp_attributes=0):
        super().__init__(57)
        self.payloads.mac_af_npp_attributes = mac_af_npp_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_af_npp_attributes_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(49, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 49, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_af_npp_attributes_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 49, npl_mac_af_npp_attributes_table_payloads_t, value)



# API-s for table: mac_da_table

NPL_MAC_DA_TABLE_ACTION_WRITE = 0x0

class npl_mac_da_table_key_t(basic_npl_struct):
    def __init__(self, next_protocol_type=0, packet_ethernet_header_da=0):
        super().__init__(53)
        self.next_protocol_type = next_protocol_type
        self.packet_ethernet_header_da = packet_ethernet_header_da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_da_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def next_protocol_type(self):
        return self._get_field_value(0, 5)
    @next_protocol_type.setter
    def next_protocol_type(self, value):
        self._set_field_value('field next_protocol_type', 0, 5, int, value)
    @property
    def packet_ethernet_header_da(self):
        return npl_mac_addr_t._get_as_sub_field(self._data, self._offset_in_data + 5)
    @packet_ethernet_header_da.setter
    def packet_ethernet_header_da(self, value):
        self._set_field_value('field packet_ethernet_header_da', 5, 48, npl_mac_addr_t, value)

class npl_mac_da_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_da_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_da(self):
        return npl_mac_da_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_da.setter
    def mac_da(self, value):
        self._set_field_value('field mac_da', 0, 16, npl_mac_da_t, value)

class npl_mac_da_table_value_t(basic_npl_struct):
    def __init__(self, mac_da=0):
        super().__init__(24)
        self.payloads.mac_da = mac_da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_da_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_da_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_mac_da_table_payloads_t, value)



# API-s for table: mac_ethernet_rate_limit_type_static_table

NPL_MAC_ETHERNET_RATE_LIMIT_TYPE_STATIC_TABLE_ACTION_UPDATE_ETHERNET_RATE_LIMIT_TYPE = 0x0

class npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t(basic_npl_struct):
    def __init__(self, ethernet_rate_limiter_type=0):
        super().__init__(3)
        self.ethernet_rate_limiter_type = ethernet_rate_limiter_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ethernet_rate_limiter_type(self):
        return self._get_field_value(0, 3)
    @ethernet_rate_limiter_type.setter
    def ethernet_rate_limiter_type(self, value):
        self._set_field_value('field ethernet_rate_limiter_type', 0, 3, int, value)




class npl_mac_ethernet_rate_limit_type_static_table_key_t(basic_npl_struct):
    def __init__(self, mac_forwarding_hit=0, is_mc=0, is_bc=0):
        super().__init__(3)
        self.mac_forwarding_hit = mac_forwarding_hit
        self.is_mc = is_mc
        self.is_bc = is_bc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_ethernet_rate_limit_type_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_forwarding_hit(self):
        return self._get_field_value(0, 1)
    @mac_forwarding_hit.setter
    def mac_forwarding_hit(self, value):
        self._set_field_value('field mac_forwarding_hit', 0, 1, int, value)
    @property
    def is_mc(self):
        return self._get_field_value(1, 1)
    @is_mc.setter
    def is_mc(self, value):
        self._set_field_value('field is_mc', 1, 1, int, value)
    @property
    def is_bc(self):
        return self._get_field_value(2, 1)
    @is_bc.setter
    def is_bc(self, value):
        self._set_field_value('field is_bc', 2, 1, int, value)

class npl_mac_ethernet_rate_limit_type_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_ethernet_rate_limit_type_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_ethernet_rate_limit_type(self):
        return npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_ethernet_rate_limit_type.setter
    def update_ethernet_rate_limit_type(self, value):
        self._set_field_value('field update_ethernet_rate_limit_type', 0, 3, npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t, value)

class npl_mac_ethernet_rate_limit_type_static_table_value_t(basic_npl_struct):
    def __init__(self, ethernet_rate_limiter_type=0):
        super().__init__(11)
        self.payloads.update_ethernet_rate_limit_type = npl_mac_ethernet_rate_limit_type_static_table_update_ethernet_rate_limit_type_payload_t(ethernet_rate_limiter_type)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_ethernet_rate_limit_type_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_ethernet_rate_limit_type_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_mac_ethernet_rate_limit_type_static_table_payloads_t, value)



# API-s for table: mac_forwarding_table

NPL_MAC_FORWARDING_TABLE_ACTION_WRITE = 0x0

class npl_mac_forwarding_table_key_t(basic_npl_struct):
    def __init__(self, mac_forwarding_key=0):
        super().__init__(62)
        self.mac_forwarding_key = mac_forwarding_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_forwarding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_forwarding_key(self):
        return npl_mac_forwarding_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_forwarding_key.setter
    def mac_forwarding_key(self, value):
        self._set_field_value('field mac_forwarding_key', 0, 62, npl_mac_forwarding_key_t, value)

class npl_mac_forwarding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_forwarding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mact_result(self):
        return npl_mact_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mact_result.setter
    def mact_result(self, value):
        self._set_field_value('field mact_result', 0, 32, npl_mact_result_t, value)

class npl_mac_forwarding_table_value_t(basic_npl_struct):
    def __init__(self, mact_result=0):
        super().__init__(40)
        self.payloads.mact_result = mact_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_forwarding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_forwarding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_mac_forwarding_table_payloads_t, value)



# API-s for table: mac_forwarding_table_compound

NPL_MAC_FORWARDING_TABLE_COMPOUND_ACTION_FOUND = 0x0

class npl_mac_forwarding_table_compound_found_payload_t(basic_npl_struct):
    def __init__(self, dst=0):
        super().__init__(20)
        self.dst = dst

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_forwarding_table_compound_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def dst(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dst.setter
    def dst(self, value):
        self._set_field_value('field dst', 0, 20, npl_destination_t, value)




class npl_mac_forwarding_table_compound_key_t(basic_npl_struct):
    def __init__(self, packet_ethernet_header_da=0, pd_layer_vars_l2_relay_attributes_id=0):
        super().__init__(68)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0x1)
        self.packet_ethernet_header_da = packet_ethernet_header_da
        self.pd_layer_vars_l2_relay_attributes_id = pd_layer_vars_l2_relay_attributes_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_forwarding_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_EM_LDB_MAC_RELAY_DA_exact_0x1(self):
        return self._get_field_value(2, 4)
    @property
    def packet_ethernet_header_da(self):
        return npl_mac_addr_t._get_as_sub_field(self._data, self._offset_in_data + 6)
    @packet_ethernet_header_da.setter
    def packet_ethernet_header_da(self, value):
        self._set_field_value('field packet_ethernet_header_da', 6, 48, npl_mac_addr_t, value)
    @property
    def pd_layer_vars_l2_relay_attributes_id(self):
        return self._get_field_value(54, 14)
    @pd_layer_vars_l2_relay_attributes_id.setter
    def pd_layer_vars_l2_relay_attributes_id(self, value):
        self._set_field_value('field pd_layer_vars_l2_relay_attributes_id', 54, 14, int, value)

class npl_mac_forwarding_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_forwarding_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def found(self):
        return npl_mac_forwarding_table_compound_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @found.setter
    def found(self, value):
        self._set_field_value('field found', 0, 20, npl_mac_forwarding_table_compound_found_payload_t, value)

class npl_mac_forwarding_table_compound_value_t(basic_npl_struct):
    def __init__(self, dst=0):
        super().__init__(28)
        self.payloads.found = npl_mac_forwarding_table_compound_found_payload_t(dst)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_forwarding_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_forwarding_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_mac_forwarding_table_compound_payloads_t, value)



# API-s for table: mac_l3_remark_pack_table

NPL_MAC_L3_REMARK_PACK_TABLE_ACTION_WRITE = 0x0

class npl_mac_l3_remark_pack_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__mpls_header_label0_bos=0, mpls_exp=0, packet_protocol_layer_next__ipv4_header_ecn=0, v4_dscp=0, packet_protocol_layer_next__ipv6_header_ecn=0, v6_dscp=0):
        super().__init__(20)
        self.packet_protocol_layer_next__mpls_header_label0_bos = packet_protocol_layer_next__mpls_header_label0_bos
        self.mpls_exp = mpls_exp
        self.packet_protocol_layer_next__ipv4_header_ecn = packet_protocol_layer_next__ipv4_header_ecn
        self.v4_dscp = v4_dscp
        self.packet_protocol_layer_next__ipv6_header_ecn = packet_protocol_layer_next__ipv6_header_ecn
        self.v6_dscp = v6_dscp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_l3_remark_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__mpls_header_label0_bos(self):
        return self._get_field_value(0, 1)
    @packet_protocol_layer_next__mpls_header_label0_bos.setter
    def packet_protocol_layer_next__mpls_header_label0_bos(self, value):
        self._set_field_value('field packet_protocol_layer_next__mpls_header_label0_bos', 0, 1, int, value)
    @property
    def mpls_exp(self):
        return self._get_field_value(1, 3)
    @mpls_exp.setter
    def mpls_exp(self, value):
        self._set_field_value('field mpls_exp', 1, 3, int, value)
    @property
    def packet_protocol_layer_next__ipv4_header_ecn(self):
        return self._get_field_value(4, 2)
    @packet_protocol_layer_next__ipv4_header_ecn.setter
    def packet_protocol_layer_next__ipv4_header_ecn(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv4_header_ecn', 4, 2, int, value)
    @property
    def v4_dscp(self):
        return self._get_field_value(6, 6)
    @v4_dscp.setter
    def v4_dscp(self, value):
        self._set_field_value('field v4_dscp', 6, 6, int, value)
    @property
    def packet_protocol_layer_next__ipv6_header_ecn(self):
        return self._get_field_value(12, 2)
    @packet_protocol_layer_next__ipv6_header_ecn.setter
    def packet_protocol_layer_next__ipv6_header_ecn(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv6_header_ecn', 12, 2, int, value)
    @property
    def v6_dscp(self):
        return self._get_field_value(14, 6)
    @v6_dscp.setter
    def v6_dscp(self, value):
        self._set_field_value('field v6_dscp', 14, 6, int, value)

class npl_mac_l3_remark_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_l3_remark_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def incr_csum_vars_mac_l3_remark_pack_payload(self):
        return npl_mac_l3_remark_pack_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @incr_csum_vars_mac_l3_remark_pack_payload.setter
    def incr_csum_vars_mac_l3_remark_pack_payload(self, value):
        self._set_field_value('field incr_csum_vars_mac_l3_remark_pack_payload', 0, 20, npl_mac_l3_remark_pack_payload_t, value)

class npl_mac_l3_remark_pack_table_value_t(basic_npl_struct):
    def __init__(self, incr_csum_vars_mac_l3_remark_pack_payload=0):
        super().__init__(28)
        self.payloads.incr_csum_vars_mac_l3_remark_pack_payload = incr_csum_vars_mac_l3_remark_pack_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_l3_remark_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_l3_remark_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_mac_l3_remark_pack_table_payloads_t, value)



# API-s for table: mac_mc_em_termination_attributes_compound_table

NPL_MAC_MC_EM_TERMINATION_ATTRIBUTES_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_mac_mc_em_termination_attributes_compound_table_key_t(basic_npl_struct):
    def __init__(self, pd_layer_vars_l2_relay_attributes_id=0):
        super().__init__(16)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self.pd_layer_vars_l2_relay_attributes_id = pd_layer_vars_l2_relay_attributes_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_em_termination_attributes_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_MAC_TERM_EM_LDB_MC_NO_DA_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def pd_layer_vars_l2_relay_attributes_id(self):
        return self._get_field_value(2, 14)
    @pd_layer_vars_l2_relay_attributes_id.setter
    def pd_layer_vars_l2_relay_attributes_id(self, value):
        self._set_field_value('field pd_layer_vars_l2_relay_attributes_id', 2, 14, int, value)

class npl_mac_mc_em_termination_attributes_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_em_termination_attributes_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_attributes(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination_attributes.setter
    def termination_attributes(self, value):
        self._set_field_value('field termination_attributes', 0, 120, npl_base_l3_lp_attr_union_t, value)

class npl_mac_mc_em_termination_attributes_compound_table_value_t(basic_npl_struct):
    def __init__(self, termination_attributes=0):
        super().__init__(128)
        self.payloads.termination_attributes = termination_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_em_termination_attributes_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_mc_em_termination_attributes_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_mac_mc_em_termination_attributes_compound_table_payloads_t, value)



# API-s for table: mac_mc_em_termination_attributes_table

NPL_MAC_MC_EM_TERMINATION_ATTRIBUTES_TABLE_ACTION_WRITE = 0x0

class npl_mac_mc_em_termination_attributes_table_key_t(basic_npl_struct):
    def __init__(self, l2_relay_attributes_id=0):
        super().__init__(14)
        self.l2_relay_attributes_id = l2_relay_attributes_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_em_termination_attributes_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_relay_attributes_id(self):
        return self._get_field_value(0, 14)
    @l2_relay_attributes_id.setter
    def l2_relay_attributes_id(self, value):
        self._set_field_value('field l2_relay_attributes_id', 0, 14, int, value)

class npl_mac_mc_em_termination_attributes_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_em_termination_attributes_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_attributes(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination_attributes.setter
    def termination_attributes(self, value):
        self._set_field_value('field termination_attributes', 0, 120, npl_base_l3_lp_attr_union_t, value)

class npl_mac_mc_em_termination_attributes_table_value_t(basic_npl_struct):
    def __init__(self, termination_attributes=0):
        super().__init__(128)
        self.payloads.termination_attributes = termination_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_em_termination_attributes_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_mc_em_termination_attributes_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_mac_mc_em_termination_attributes_table_payloads_t, value)



# API-s for table: mac_mc_tcam_termination_attributes_compound_table

NPL_MAC_MC_TCAM_TERMINATION_ATTRIBUTES_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_mac_mc_tcam_termination_attributes_compound_table_key_t(basic_npl_struct):
    def __init__(self, pd_layer_vars_l2_relay_attributes_id=0):
        super().__init__(16)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self.pd_layer_vars_l2_relay_attributes_id = pd_layer_vars_l2_relay_attributes_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_tcam_termination_attributes_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_MAC_TERM_EM_LDB_MC_NO_DA_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def pd_layer_vars_l2_relay_attributes_id(self):
        return self._get_field_value(2, 14)
    @pd_layer_vars_l2_relay_attributes_id.setter
    def pd_layer_vars_l2_relay_attributes_id(self, value):
        self._set_field_value('field pd_layer_vars_l2_relay_attributes_id', 2, 14, int, value)

class npl_mac_mc_tcam_termination_attributes_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_tcam_termination_attributes_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_attributes(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination_attributes.setter
    def termination_attributes(self, value):
        self._set_field_value('field termination_attributes', 0, 120, npl_base_l3_lp_attr_union_t, value)

class npl_mac_mc_tcam_termination_attributes_compound_table_value_t(basic_npl_struct):
    def __init__(self, termination_attributes=0):
        super().__init__(128)
        self.payloads.termination_attributes = termination_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_tcam_termination_attributes_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_mc_tcam_termination_attributes_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_mac_mc_tcam_termination_attributes_compound_table_payloads_t, value)



# API-s for table: mac_mc_tcam_termination_attributes_table

NPL_MAC_MC_TCAM_TERMINATION_ATTRIBUTES_TABLE_ACTION_WRITE = 0x0

class npl_mac_mc_tcam_termination_attributes_table_key_t(basic_npl_struct):
    def __init__(self, l2_relay_attributes_id=0):
        super().__init__(14)
        self.l2_relay_attributes_id = l2_relay_attributes_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_tcam_termination_attributes_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_relay_attributes_id(self):
        return self._get_field_value(0, 14)
    @l2_relay_attributes_id.setter
    def l2_relay_attributes_id(self, value):
        self._set_field_value('field l2_relay_attributes_id', 0, 14, int, value)

class npl_mac_mc_tcam_termination_attributes_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_tcam_termination_attributes_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_attributes(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination_attributes.setter
    def termination_attributes(self, value):
        self._set_field_value('field termination_attributes', 0, 120, npl_base_l3_lp_attr_union_t, value)

class npl_mac_mc_tcam_termination_attributes_table_value_t(basic_npl_struct):
    def __init__(self, termination_attributes=0):
        super().__init__(128)
        self.payloads.termination_attributes = termination_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_mc_tcam_termination_attributes_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_mc_tcam_termination_attributes_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_mac_mc_tcam_termination_attributes_table_payloads_t, value)



# API-s for table: mac_qos_mapping_table

NPL_MAC_QOS_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_mac_qos_mapping_table_key_t(basic_npl_struct):
    def __init__(self, qos_id=0, qos_key=0):
        super().__init__(8)
        self.qos_id = qos_id
        self.qos_key = qos_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_qos_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_id(self):
        return self._get_field_value(0, 4)
    @qos_id.setter
    def qos_id(self, value):
        self._set_field_value('field qos_id', 0, 4, int, value)
    @property
    def qos_key(self):
        return self._get_field_value(4, 4)
    @qos_key.setter
    def qos_key(self, value):
        self._set_field_value('field qos_key', 4, 4, int, value)

class npl_mac_qos_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_qos_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_mac_qos_mapping_result(self):
        return npl_ingress_qos_acl_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_mac_qos_mapping_result.setter
    def ingress_mac_qos_mapping_result(self, value):
        self._set_field_value('field ingress_mac_qos_mapping_result', 0, 32, npl_ingress_qos_acl_result_t, value)

class npl_mac_qos_mapping_table_value_t(basic_npl_struct):
    def __init__(self, ingress_mac_qos_mapping_result=0):
        super().__init__(40)
        self.payloads.ingress_mac_qos_mapping_result = ingress_mac_qos_mapping_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_qos_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_qos_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_mac_qos_mapping_table_payloads_t, value)



# API-s for table: mac_relay_egress_pack_table

NPL_MAC_RELAY_EGRESS_PACK_TABLE_ACTION_WRITE = 0x0

class npl_mac_relay_egress_pack_table_key_option_transmit_l2_first_macro_t(basic_npl_struct):
    def __init__(self, encap_local_vars_l2_fwd_slp_info=0, tx_npu_header_qos_group_4_0_=0):
        super().__init__(29)
        self.encap_local_vars_l2_fwd_slp_info = encap_local_vars_l2_fwd_slp_info
        self.tx_npu_header_qos_group_4_0_ = tx_npu_header_qos_group_4_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_egress_pack_table_key_option_transmit_l2_first_macro_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def encap_local_vars_l2_fwd_slp_info(self):
        return self._get_field_value(0, 22)
    @encap_local_vars_l2_fwd_slp_info.setter
    def encap_local_vars_l2_fwd_slp_info(self, value):
        self._set_field_value('field encap_local_vars_l2_fwd_slp_info', 0, 22, int, value)
    @property
    def tx_npu_header_qos_group_4_0_(self):
        return self._get_field_value(22, 5)
    @tx_npu_header_qos_group_4_0_.setter
    def tx_npu_header_qos_group_4_0_(self, value):
        self._set_field_value('field tx_npu_header_qos_group_4_0_', 22, 5, int, value)
    @property
    def const1_2b0_exact_0x0(self):
        return self._get_field_value(27, 2)



class npl_mac_relay_egress_pack_table_key_option_transmit_l2_second_macro_t(basic_npl_struct):
    def __init__(self, encap_local_vars_mc_fwd_slp_info=0, tx_npu_header_qos_group_4_0_=0):
        super().__init__(29)
        self.encap_local_vars_mc_fwd_slp_info = encap_local_vars_mc_fwd_slp_info
        self.tx_npu_header_qos_group_4_0_ = tx_npu_header_qos_group_4_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_egress_pack_table_key_option_transmit_l2_second_macro_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def encap_local_vars_mc_fwd_slp_info(self):
        return self._get_field_value(0, 22)
    @encap_local_vars_mc_fwd_slp_info.setter
    def encap_local_vars_mc_fwd_slp_info(self, value):
        self._set_field_value('field encap_local_vars_mc_fwd_slp_info', 0, 22, int, value)
    @property
    def tx_npu_header_qos_group_4_0_(self):
        return self._get_field_value(22, 5)
    @tx_npu_header_qos_group_4_0_.setter
    def tx_npu_header_qos_group_4_0_(self, value):
        self._set_field_value('field tx_npu_header_qos_group_4_0_', 22, 5, int, value)
    @property
    def const1_2b0_exact_0x0(self):
        return self._get_field_value(27, 2)




class mac_relay_egress_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(29 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = mac_relay_egress_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_TRANSMIT_L2_FIRST_MACRO(self):
        return npl_mac_relay_egress_pack_table_key_option_transmit_l2_first_macro_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TRANSMIT_L2_FIRST_MACRO.setter
    def NPL_TRANSMIT_L2_FIRST_MACRO(self, value):
        self._set_field_value('field NPL_TRANSMIT_L2_FIRST_MACRO', 0, 29, npl_mac_relay_egress_pack_table_key_option_transmit_l2_first_macro_t, value)
    @property
    def NPL_TRANSMIT_L2_SECOND_MACRO(self):
        return npl_mac_relay_egress_pack_table_key_option_transmit_l2_second_macro_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TRANSMIT_L2_SECOND_MACRO.setter
    def NPL_TRANSMIT_L2_SECOND_MACRO(self, value):
        self._set_field_value('field NPL_TRANSMIT_L2_SECOND_MACRO', 0, 29, npl_mac_relay_egress_pack_table_key_option_transmit_l2_second_macro_t, value)

class npl_mac_relay_egress_pack_table_key_t(basic_npl_struct):
    def __init__(self, encap_local_vars_acl_macro_control_lsb=0):
        super().__init__(29)
        self.encap_local_vars_acl_macro_control_lsb = encap_local_vars_acl_macro_control_lsb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_egress_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _encap_local_vars_acl_macro_control_lsb = 0
    @property
    def encap_local_vars_acl_macro_control_lsb(self):
        return self._encap_local_vars_acl_macro_control_lsb
    @encap_local_vars_acl_macro_control_lsb.setter
    def encap_local_vars_acl_macro_control_lsb(self, value):
        self._encap_local_vars_acl_macro_control_lsb = value
        if encap_local_vars_acl_macro_control_lsb == NPL_TRANSMIT_L2_FIRST_MACRO:
            self._set_field_value('const field', 27, 2, int, 0x0)
        if encap_local_vars_acl_macro_control_lsb == NPL_TRANSMIT_L2_SECOND_MACRO:
            self._set_field_value('const field', 27, 2, int, 0x0)

    @property
    def options(self):
        return mac_relay_egress_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 29 - 0, mac_relay_egress_pack_table_key_options_t, value)

class npl_mac_relay_egress_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(29)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_egress_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def encap_local_vars_mac_relay_pack_table_payload(self):
        return npl_mac_relay_pack_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @encap_local_vars_mac_relay_pack_table_payload.setter
    def encap_local_vars_mac_relay_pack_table_payload(self, value):
        self._set_field_value('field encap_local_vars_mac_relay_pack_table_payload', 0, 29, npl_mac_relay_pack_table_payload_t, value)

class npl_mac_relay_egress_pack_table_value_t(basic_npl_struct):
    def __init__(self, encap_local_vars_mac_relay_pack_table_payload=0):
        super().__init__(37)
        self.payloads.encap_local_vars_mac_relay_pack_table_payload = encap_local_vars_mac_relay_pack_table_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_egress_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(29, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 29, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_relay_egress_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 29, npl_mac_relay_egress_pack_table_payloads_t, value)



# API-s for table: mac_relay_g_ipv4_table

NPL_MAC_RELAY_G_IPV4_TABLE_ACTION_WRITE = 0x0

class npl_mac_relay_g_ipv4_table_key_t(basic_npl_struct):
    def __init__(self, dip_27_0=0, relay_id=0):
        super().__init__(42)
        self.dip_27_0 = dip_27_0
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv4_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dip_27_0(self):
        return self._get_field_value(0, 28)
    @dip_27_0.setter
    def dip_27_0(self, value):
        self._set_field_value('field dip_27_0', 0, 28, int, value)
    @property
    def relay_id(self):
        return npl_l2_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 28)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 28, 14, npl_l2_relay_id_t, value)

class npl_mac_relay_g_ipv4_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv4_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_relay_g_destination(self):
        return npl_mac_relay_g_destination_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_relay_g_destination.setter
    def mac_relay_g_destination(self, value):
        self._set_field_value('field mac_relay_g_destination', 0, 20, npl_mac_relay_g_destination_t, value)

class npl_mac_relay_g_ipv4_table_value_t(basic_npl_struct):
    def __init__(self, mac_relay_g_destination=0):
        super().__init__(28)
        self.payloads.mac_relay_g_destination = mac_relay_g_destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv4_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_relay_g_ipv4_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_mac_relay_g_ipv4_table_payloads_t, value)



# API-s for table: mac_relay_g_ipv4_table_compound

NPL_MAC_RELAY_G_IPV4_TABLE_COMPOUND_ACTION_FOUND = 0x0

class npl_mac_relay_g_ipv4_table_compound_found_payload_t(basic_npl_struct):
    def __init__(self, dst=0):
        super().__init__(20)
        self.dst = dst

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv4_table_compound_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def dst(self):
        return npl_mac_relay_g_destination_pad_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dst.setter
    def dst(self, value):
        self._set_field_value('field dst', 0, 20, npl_mac_relay_g_destination_pad_t, value)




class npl_mac_relay_g_ipv4_table_compound_key_t(basic_npl_struct):
    def __init__(self, dip_27_0_=0, relay_id=0):
        super().__init__(51)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 7, int, 0x76)
        self.dip_27_0_ = dip_27_0_
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv4_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_EM_LDB_MAC_RELAY_G_IPV4_exact_0x76(self):
        return self._get_field_value(2, 7)
    @property
    def dip_27_0_(self):
        return self._get_field_value(9, 28)
    @dip_27_0_.setter
    def dip_27_0_(self, value):
        self._set_field_value('field dip_27_0_', 9, 28, int, value)
    @property
    def relay_id(self):
        return npl_l2_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 37)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 37, 14, npl_l2_relay_id_t, value)

class npl_mac_relay_g_ipv4_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv4_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def found(self):
        return npl_mac_relay_g_ipv4_table_compound_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @found.setter
    def found(self, value):
        self._set_field_value('field found', 0, 20, npl_mac_relay_g_ipv4_table_compound_found_payload_t, value)

class npl_mac_relay_g_ipv4_table_compound_value_t(basic_npl_struct):
    def __init__(self, dst=0):
        super().__init__(28)
        self.payloads.found = npl_mac_relay_g_ipv4_table_compound_found_payload_t(dst)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv4_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_relay_g_ipv4_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_mac_relay_g_ipv4_table_compound_payloads_t, value)



# API-s for table: mac_relay_g_ipv6_table

NPL_MAC_RELAY_G_IPV6_TABLE_ACTION_WRITE = 0x0

class npl_mac_relay_g_ipv6_table_key_t(basic_npl_struct):
    def __init__(self, dip_119_0=0, relay_id=0):
        super().__init__(134)
        self.dip_119_0 = dip_119_0
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv6_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dip_119_0(self):
        return self._get_field_value(0, 120)
    @dip_119_0.setter
    def dip_119_0(self, value):
        self._set_field_value('field dip_119_0', 0, 120, int, value)
    @property
    def relay_id(self):
        return npl_l2_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 120)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 120, 14, npl_l2_relay_id_t, value)

class npl_mac_relay_g_ipv6_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv6_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_relay_g_destination(self):
        return npl_mac_relay_g_destination_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_relay_g_destination.setter
    def mac_relay_g_destination(self, value):
        self._set_field_value('field mac_relay_g_destination', 0, 20, npl_mac_relay_g_destination_t, value)

class npl_mac_relay_g_ipv6_table_value_t(basic_npl_struct):
    def __init__(self, mac_relay_g_destination=0):
        super().__init__(28)
        self.payloads.mac_relay_g_destination = mac_relay_g_destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv6_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_relay_g_ipv6_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_mac_relay_g_ipv6_table_payloads_t, value)



# API-s for table: mac_relay_g_ipv6_table_compound

NPL_MAC_RELAY_G_IPV6_TABLE_COMPOUND_ACTION_FOUND = 0x0

class npl_mac_relay_g_ipv6_table_compound_found_payload_t(basic_npl_struct):
    def __init__(self, dst=0):
        super().__init__(20)
        self.dst = dst

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv6_table_compound_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def dst(self):
        return npl_mac_relay_g_destination_pad_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dst.setter
    def dst(self, value):
        self._set_field_value('field dst', 0, 20, npl_mac_relay_g_destination_pad_t, value)




class npl_mac_relay_g_ipv6_table_compound_key_t(basic_npl_struct):
    def __init__(self, dip_119_0_=0, relay_id=0):
        super().__init__(143)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 7, int, 0x2d)
        self.dip_119_0_ = dip_119_0_
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv6_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_EM_LDB_MAC_RELAY_G_IPV6_exact_0x2d(self):
        return self._get_field_value(2, 7)
    @property
    def dip_119_0_(self):
        return self._get_field_value(9, 120)
    @dip_119_0_.setter
    def dip_119_0_(self, value):
        self._set_field_value('field dip_119_0_', 9, 120, int, value)
    @property
    def relay_id(self):
        return npl_l2_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 129)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 129, 14, npl_l2_relay_id_t, value)

class npl_mac_relay_g_ipv6_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv6_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def found(self):
        return npl_mac_relay_g_ipv6_table_compound_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @found.setter
    def found(self, value):
        self._set_field_value('field found', 0, 20, npl_mac_relay_g_ipv6_table_compound_found_payload_t, value)

class npl_mac_relay_g_ipv6_table_compound_value_t(basic_npl_struct):
    def __init__(self, dst=0):
        super().__init__(28)
        self.payloads.found = npl_mac_relay_g_ipv6_table_compound_found_payload_t(dst)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_g_ipv6_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_relay_g_ipv6_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_mac_relay_g_ipv6_table_compound_payloads_t, value)



# API-s for table: mac_relay_to_vni_table

NPL_MAC_RELAY_TO_VNI_TABLE_ACTION_WRITE = 0x0

class npl_mac_relay_to_vni_table_key_t(basic_npl_struct):
    def __init__(self, l2_relay_id=0):
        super().__init__(14)
        self.l2_relay_id = l2_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_to_vni_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_relay_id(self):
        return npl_l2_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_relay_id.setter
    def l2_relay_id(self, value):
        self._set_field_value('field l2_relay_id', 0, 14, npl_l2_relay_id_t, value)

class npl_mac_relay_to_vni_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_to_vni_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vxlan_relay_encap_data(self):
        return npl_vxlan_relay_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vxlan_relay_encap_data.setter
    def vxlan_relay_encap_data(self, value):
        self._set_field_value('field vxlan_relay_encap_data', 0, 44, npl_vxlan_relay_encap_data_t, value)

class npl_mac_relay_to_vni_table_value_t(basic_npl_struct):
    def __init__(self, vxlan_relay_encap_data=0):
        super().__init__(52)
        self.payloads.vxlan_relay_encap_data = vxlan_relay_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_to_vni_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_relay_to_vni_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_mac_relay_to_vni_table_payloads_t, value)



# API-s for table: mac_relay_to_vni_table_compound

NPL_MAC_RELAY_TO_VNI_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_mac_relay_to_vni_table_compound_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_fwd_relay_id_l2_relay_id=0):
        super().__init__(20)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0xa)
        self.tx_npu_header_fwd_relay_id_l2_relay_id = tx_npu_header_fwd_relay_id_l2_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_to_vni_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_VXLAN_L2_VNI_TABLE_LDB_exact_0xa(self):
        return self._get_field_value(2, 4)
    @property
    def tx_npu_header_fwd_relay_id_l2_relay_id(self):
        return npl_l2_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 6)
    @tx_npu_header_fwd_relay_id_l2_relay_id.setter
    def tx_npu_header_fwd_relay_id_l2_relay_id(self, value):
        self._set_field_value('field tx_npu_header_fwd_relay_id_l2_relay_id', 6, 14, npl_l2_relay_id_t, value)

class npl_mac_relay_to_vni_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_to_vni_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vxlan_relay_encap_data(self):
        return npl_vxlan_relay_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vxlan_relay_encap_data.setter
    def vxlan_relay_encap_data(self, value):
        self._set_field_value('field vxlan_relay_encap_data', 0, 44, npl_vxlan_relay_encap_data_t, value)

class npl_mac_relay_to_vni_table_compound_value_t(basic_npl_struct):
    def __init__(self, vxlan_relay_encap_data=0):
        super().__init__(52)
        self.payloads.vxlan_relay_encap_data = vxlan_relay_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_relay_to_vni_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_relay_to_vni_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_mac_relay_to_vni_table_compound_payloads_t, value)



# API-s for table: mac_termination_em_table

NPL_MAC_TERMINATION_EM_TABLE_ACTION_WRITE = 0x0

class npl_mac_termination_em_table_key_t(basic_npl_struct):
    def __init__(self, da_prefix=0, ethernet_header_da_18_0_=0, relay_id=0):
        super().__init__(38)
        self.da_prefix = da_prefix
        self.ethernet_header_da_18_0_ = ethernet_header_da_18_0_
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_em_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def da_prefix(self):
        return self._get_field_value(0, 5)
    @da_prefix.setter
    def da_prefix(self, value):
        self._set_field_value('field da_prefix', 0, 5, int, value)
    @property
    def ethernet_header_da_18_0_(self):
        return self._get_field_value(5, 19)
    @ethernet_header_da_18_0_.setter
    def ethernet_header_da_18_0_(self, value):
        self._set_field_value('field ethernet_header_da_18_0_', 5, 19, int, value)
    @property
    def relay_id(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 24)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 24, 14, npl_relay_id_t, value)

class npl_mac_termination_em_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_em_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_attributes(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination_attributes.setter
    def termination_attributes(self, value):
        self._set_field_value('field termination_attributes', 0, 120, npl_base_l3_lp_attr_union_t, value)

class npl_mac_termination_em_table_value_t(basic_npl_struct):
    def __init__(self, termination_attributes=0):
        super().__init__(128)
        self.payloads.termination_attributes = termination_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_em_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_termination_em_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_mac_termination_em_table_payloads_t, value)



# API-s for table: mac_termination_em_table_compound

NPL_MAC_TERMINATION_EM_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_mac_termination_em_table_compound_key_option_mac_term_uc_with_da_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_18_0_=0, service_relay_attributes_table_key=0):
        super().__init__(40)
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_18_0_ = packet_ethernet_header_da_18_0_
        self.service_relay_attributes_table_key = service_relay_attributes_table_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_em_table_compound_key_option_mac_term_uc_with_da_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_MAC_TERM_EM_LDB_UC_WITH_DA_exact_0x0(self):
        return self._get_field_value(0, 2)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(2, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 2, 5, int, value)
    @property
    def packet_ethernet_header_da_18_0_(self):
        return self._get_field_value(7, 19)
    @packet_ethernet_header_da_18_0_.setter
    def packet_ethernet_header_da_18_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_18_0_', 7, 19, int, value)
    @property
    def service_relay_attributes_table_key(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @service_relay_attributes_table_key.setter
    def service_relay_attributes_table_key(self, value):
        self._set_field_value('field service_relay_attributes_table_key', 26, 14, npl_relay_id_t, value)



class npl_mac_termination_em_table_compound_key_option_mac_term_uc_no_da_t(basic_npl_struct):
    def __init__(self, service_relay_attributes_table_key=0):
        super().__init__(16)
        self.service_relay_attributes_table_key = service_relay_attributes_table_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_em_table_compound_key_option_mac_term_uc_no_da_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_MAC_TERM_EM_LDB_UC_NO_DA_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def service_relay_attributes_table_key(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @service_relay_attributes_table_key.setter
    def service_relay_attributes_table_key(self, value):
        self._set_field_value('field service_relay_attributes_table_key', 2, 14, npl_relay_id_t, value)




class mac_termination_em_table_compound_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = mac_termination_em_table_compound_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_MAC_TERM_UC_WITH_DA(self):
        return npl_mac_termination_em_table_compound_key_option_mac_term_uc_with_da_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_MAC_TERM_UC_WITH_DA.setter
    def NPL_MAC_TERM_UC_WITH_DA(self, value):
        self._set_field_value('field NPL_MAC_TERM_UC_WITH_DA', 0, 40, npl_mac_termination_em_table_compound_key_option_mac_term_uc_with_da_t, value)
    @property
    def NPL_MAC_TERM_UC_NO_DA(self):
        return npl_mac_termination_em_table_compound_key_option_mac_term_uc_no_da_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_MAC_TERM_UC_NO_DA.setter
    def NPL_MAC_TERM_UC_NO_DA(self, value):
        self._set_field_value('field NPL_MAC_TERM_UC_NO_DA', 0, 16, npl_mac_termination_em_table_compound_key_option_mac_term_uc_no_da_t, value)

class npl_mac_termination_em_table_compound_key_t(basic_npl_struct):
    def __init__(self, mac_af_local_vars_mac_termination_type=0):
        super().__init__(40)
        self.mac_af_local_vars_mac_termination_type = mac_af_local_vars_mac_termination_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_em_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _mac_af_local_vars_mac_termination_type = 0
    @property
    def mac_af_local_vars_mac_termination_type(self):
        return self._mac_af_local_vars_mac_termination_type
    @mac_af_local_vars_mac_termination_type.setter
    def mac_af_local_vars_mac_termination_type(self, value):
        self._mac_af_local_vars_mac_termination_type = value
        if mac_af_local_vars_mac_termination_type == NPL_MAC_TERM_UC_WITH_DA:
            self._set_field_value('const field', 0, 2, int, 0x0)
        if mac_af_local_vars_mac_termination_type == NPL_MAC_TERM_UC_NO_DA:
            self._set_field_value('const field', 0, 2, int, 0x3)

    @property
    def options(self):
        return mac_termination_em_table_compound_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 40 - 0, mac_termination_em_table_compound_key_options_t, value)

class npl_mac_termination_em_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_em_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_attributes(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination_attributes.setter
    def termination_attributes(self, value):
        self._set_field_value('field termination_attributes', 0, 120, npl_base_l3_lp_attr_union_t, value)

class npl_mac_termination_em_table_compound_value_t(basic_npl_struct):
    def __init__(self, termination_attributes=0):
        super().__init__(128)
        self.payloads.termination_attributes = termination_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_em_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_termination_em_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_mac_termination_em_table_compound_payloads_t, value)



# API-s for table: mac_termination_next_macro_static_table

NPL_MAC_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_MAC_TERMINATION_NEXT_MACRO_ACTION = 0x0

class npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_mac_termination_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, ipv4_ipv6_init_rtf_stage=0, l2_lp_type=0, next_proto_type=0):
        super().__init__(13)
        self.ipv4_ipv6_init_rtf_stage = ipv4_ipv6_init_rtf_stage
        self.l2_lp_type = l2_lp_type
        self.next_proto_type = next_proto_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipv4_ipv6_init_rtf_stage(self):
        return npl_ipv4_ipv6_init_rtf_stage_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ipv4_ipv6_init_rtf_stage.setter
    def ipv4_ipv6_init_rtf_stage(self, value):
        self._set_field_value('field ipv4_ipv6_init_rtf_stage', 0, 4, npl_ipv4_ipv6_init_rtf_stage_t, value)
    @property
    def l2_lp_type(self):
        return self._get_field_value(4, 4)
    @l2_lp_type.setter
    def l2_lp_type(self, value):
        self._set_field_value('field l2_lp_type', 4, 4, int, value)
    @property
    def next_proto_type(self):
        return self._get_field_value(8, 5)
    @next_proto_type.setter
    def next_proto_type(self, value):
        self._set_field_value('field next_proto_type', 8, 5, int, value)

class npl_mac_termination_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_termination_next_macro_action(self):
        return npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_termination_next_macro_action.setter
    def mac_termination_next_macro_action(self, value):
        self._set_field_value('field mac_termination_next_macro_action', 0, 10, npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t, value)

class npl_mac_termination_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.mac_termination_next_macro_action = npl_mac_termination_next_macro_static_table_mac_termination_next_macro_action_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_termination_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_mac_termination_next_macro_static_table_payloads_t, value)



# API-s for table: mac_termination_no_da_em_table

NPL_MAC_TERMINATION_NO_DA_EM_TABLE_ACTION_WRITE = 0x0

class npl_mac_termination_no_da_em_table_key_t(basic_npl_struct):
    def __init__(self, service_relay_attributes_table_key=0):
        super().__init__(14)
        self.service_relay_attributes_table_key = service_relay_attributes_table_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_no_da_em_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def service_relay_attributes_table_key(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @service_relay_attributes_table_key.setter
    def service_relay_attributes_table_key(self, value):
        self._set_field_value('field service_relay_attributes_table_key', 0, 14, npl_relay_id_t, value)

class npl_mac_termination_no_da_em_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_no_da_em_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_attributes(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination_attributes.setter
    def termination_attributes(self, value):
        self._set_field_value('field termination_attributes', 0, 120, npl_base_l3_lp_attr_union_t, value)

class npl_mac_termination_no_da_em_table_value_t(basic_npl_struct):
    def __init__(self, termination_attributes=0):
        super().__init__(128)
        self.payloads.termination_attributes = termination_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_no_da_em_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_termination_no_da_em_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_mac_termination_no_da_em_table_payloads_t, value)



# API-s for table: mac_termination_tcam_table

NPL_MAC_TERMINATION_TCAM_TABLE_ACTION_WRITE = 0x0

class npl_mac_termination_tcam_table_key_t(basic_npl_struct):
    def __init__(self, da_prefix=0, ethernet_header_da_18_0_=0, service_relay_attributes_table_key=0):
        super().__init__(38)
        self.da_prefix = da_prefix
        self.ethernet_header_da_18_0_ = ethernet_header_da_18_0_
        self.service_relay_attributes_table_key = service_relay_attributes_table_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_tcam_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def da_prefix(self):
        return self._get_field_value(0, 5)
    @da_prefix.setter
    def da_prefix(self, value):
        self._set_field_value('field da_prefix', 0, 5, int, value)
    @property
    def ethernet_header_da_18_0_(self):
        return self._get_field_value(5, 19)
    @ethernet_header_da_18_0_.setter
    def ethernet_header_da_18_0_(self, value):
        self._set_field_value('field ethernet_header_da_18_0_', 5, 19, int, value)
    @property
    def service_relay_attributes_table_key(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 24)
    @service_relay_attributes_table_key.setter
    def service_relay_attributes_table_key(self, value):
        self._set_field_value('field service_relay_attributes_table_key', 24, 14, npl_relay_id_t, value)

class npl_mac_termination_tcam_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_tcam_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_attributes(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination_attributes.setter
    def termination_attributes(self, value):
        self._set_field_value('field termination_attributes', 0, 120, npl_base_l3_lp_attr_union_t, value)

class npl_mac_termination_tcam_table_value_t(basic_npl_struct):
    def __init__(self, termination_attributes=0):
        super().__init__(128)
        self.payloads.termination_attributes = termination_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mac_termination_tcam_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_mac_termination_tcam_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_mac_termination_tcam_table_payloads_t, value)



# API-s for table: map_ene_subcode_to8bit_static_table

NPL_MAP_ENE_SUBCODE_TO8BIT_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_map_ene_subcode_to8bit_static_table_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type=0, tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format=0):
        super().__init__(5)
        self.tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type = tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type
        self.tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format = tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_ene_subcode_to8bit_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type(self):
        return npl_lpts_flow_type_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type.setter
    def tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type(self, value):
        self._set_field_value('field tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type', 0, 4, npl_lpts_flow_type_t, value)
    @property
    def tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format(self):
        return self._get_field_value(4, 1)
    @tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format.setter
    def tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format(self, value):
        self._set_field_value('field tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format', 4, 1, int, value)

class npl_map_ene_subcode_to8bit_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_ene_subcode_to8bit_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_local_ene_punt_sub_code(self):
        return self._get_field_value(0, 8)
    @tx_punt_local_var_local_ene_punt_sub_code.setter
    def tx_punt_local_var_local_ene_punt_sub_code(self, value):
        self._set_field_value('field tx_punt_local_var_local_ene_punt_sub_code', 0, 8, int, value)

class npl_map_ene_subcode_to8bit_static_table_value_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_local_ene_punt_sub_code=0):
        super().__init__(16)
        self.payloads.tx_punt_local_var_local_ene_punt_sub_code = tx_punt_local_var_local_ene_punt_sub_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_ene_subcode_to8bit_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_map_ene_subcode_to8bit_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_map_ene_subcode_to8bit_static_table_payloads_t, value)



# API-s for table: map_inject_ccm_macro_static_table

NPL_MAP_INJECT_CCM_MACRO_STATIC_TABLE_ACTION_MAP_INJECT_CCM_MACRO = 0x0

class npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t(basic_npl_struct):
    def __init__(self, next_macro=0, second_ene_macro=0):
        super().__init__(16)
        self.next_macro = next_macro
        self.second_ene_macro = second_ene_macro

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def next_macro(self):
        return self._get_field_value(8, 8)
    @next_macro.setter
    def next_macro(self, value):
        self._set_field_value('field next_macro', 8, 8, int, value)
    @property
    def second_ene_macro(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @second_ene_macro.setter
    def second_ene_macro(self, value):
        self._set_field_value('field second_ene_macro', 0, 8, npl_ene_macro_id_t, value)




class npl_map_inject_ccm_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, inner_tpid_ptr=0, outer_tpid_ptr=0):
        super().__init__(8)
        self.inner_tpid_ptr = inner_tpid_ptr
        self.outer_tpid_ptr = outer_tpid_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_inject_ccm_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def inner_tpid_ptr(self):
        return self._get_field_value(0, 4)
    @inner_tpid_ptr.setter
    def inner_tpid_ptr(self, value):
        self._set_field_value('field inner_tpid_ptr', 0, 4, int, value)
    @property
    def outer_tpid_ptr(self):
        return self._get_field_value(4, 4)
    @outer_tpid_ptr.setter
    def outer_tpid_ptr(self, value):
        self._set_field_value('field outer_tpid_ptr', 4, 4, int, value)

class npl_map_inject_ccm_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_inject_ccm_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def map_inject_ccm_macro(self):
        return npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @map_inject_ccm_macro.setter
    def map_inject_ccm_macro(self, value):
        self._set_field_value('field map_inject_ccm_macro', 0, 16, npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t, value)

class npl_map_inject_ccm_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, next_macro=0, second_ene_macro=0):
        super().__init__(24)
        self.payloads.map_inject_ccm_macro = npl_map_inject_ccm_macro_static_table_map_inject_ccm_macro_payload_t(next_macro, second_ene_macro)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_inject_ccm_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_map_inject_ccm_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_map_inject_ccm_macro_static_table_payloads_t, value)



# API-s for table: map_more_labels_static_table

NPL_MAP_MORE_LABELS_STATIC_TABLE_ACTION_SET_VALUE = 0x0

class npl_map_more_labels_static_table_set_value_payload_t(basic_npl_struct):
    def __init__(self, more_labels_offset=0):
        super().__init__(24)
        self.more_labels_offset = more_labels_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_more_labels_static_table_set_value_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def more_labels_offset(self):
        return npl_additional_mpls_labels_offset_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @more_labels_offset.setter
    def more_labels_offset(self, value):
        self._set_field_value('field more_labels_offset', 0, 24, npl_additional_mpls_labels_offset_t, value)




class npl_map_more_labels_static_table_key_t(basic_npl_struct):
    def __init__(self, num_labels=0, num_labels_is_8=0):
        super().__init__(4)
        self.num_labels = num_labels
        self.num_labels_is_8 = num_labels_is_8

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_more_labels_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def num_labels(self):
        return self._get_field_value(0, 3)
    @num_labels.setter
    def num_labels(self, value):
        self._set_field_value('field num_labels', 0, 3, int, value)
    @property
    def num_labels_is_8(self):
        return self._get_field_value(3, 1)
    @num_labels_is_8.setter
    def num_labels_is_8(self, value):
        self._set_field_value('field num_labels_is_8', 3, 1, int, value)

class npl_map_more_labels_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_more_labels_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_value(self):
        return npl_map_more_labels_static_table_set_value_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_value.setter
    def set_value(self, value):
        self._set_field_value('field set_value', 0, 24, npl_map_more_labels_static_table_set_value_payload_t, value)

class npl_map_more_labels_static_table_value_t(basic_npl_struct):
    def __init__(self, more_labels_offset=0):
        super().__init__(32)
        self.payloads.set_value = npl_map_more_labels_static_table_set_value_payload_t(more_labels_offset)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_more_labels_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_map_more_labels_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_map_more_labels_static_table_payloads_t, value)



# API-s for table: map_recyle_tx_to_rx_data_on_pd_static_table

NPL_MAP_RECYLE_TX_TO_RX_DATA_ON_PD_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_map_recyle_tx_to_rx_data_on_pd_static_table_key_t(basic_npl_struct):
    def __init__(self, dsp_map_dma_info=0):
        super().__init__(2)
        self.dsp_map_dma_info = dsp_map_dma_info

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_recyle_tx_to_rx_data_on_pd_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dsp_map_dma_info(self):
        return npl_dsp_map_info_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dsp_map_dma_info.setter
    def dsp_map_dma_info(self, value):
        self._set_field_value('field dsp_map_dma_info', 0, 2, npl_dsp_map_info_t, value)

class npl_map_recyle_tx_to_rx_data_on_pd_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_recyle_tx_to_rx_data_on_pd_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_recycle_data(self):
        return npl_snoop_or_rcy_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pd_recycle_data.setter
    def pd_recycle_data(self, value):
        self._set_field_value('field pd_recycle_data', 0, 8, npl_snoop_or_rcy_data_t, value)

class npl_map_recyle_tx_to_rx_data_on_pd_static_table_value_t(basic_npl_struct):
    def __init__(self, pd_recycle_data=0):
        super().__init__(16)
        self.payloads.pd_recycle_data = pd_recycle_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_recyle_tx_to_rx_data_on_pd_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_map_recyle_tx_to_rx_data_on_pd_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_map_recyle_tx_to_rx_data_on_pd_static_table_payloads_t, value)



# API-s for table: map_tm_dp_ecn_to_wa_ecn_dp_static_table

NPL_MAP_TM_DP_ECN_TO_WA_ECN_DP_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_key_t(basic_npl_struct):
    def __init__(self, tm_h_dp_0=0, tm_h_ecn=0):
        super().__init__(2)
        self.tm_h_dp_0 = tm_h_dp_0
        self.tm_h_ecn = tm_h_ecn

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tm_h_dp_0(self):
        return self._get_field_value(0, 1)
    @tm_h_dp_0.setter
    def tm_h_dp_0(self, value):
        self._set_field_value('field tm_h_dp_0', 0, 1, int, value)
    @property
    def tm_h_ecn(self):
        return self._get_field_value(1, 1)
    @tm_h_ecn.setter
    def tm_h_ecn(self, value):
        self._set_field_value('field tm_h_ecn', 1, 1, int, value)

class npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dp_ecn_wa_local_var_new_dp(self):
        return self._get_field_value(0, 2)
    @dp_ecn_wa_local_var_new_dp.setter
    def dp_ecn_wa_local_var_new_dp(self, value):
        self._set_field_value('field dp_ecn_wa_local_var_new_dp', 0, 2, int, value)

class npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_value_t(basic_npl_struct):
    def __init__(self, dp_ecn_wa_local_var_new_dp=0):
        super().__init__(10)
        self.payloads.dp_ecn_wa_local_var_new_dp = dp_ecn_wa_local_var_new_dp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_payloads_t, value)



# API-s for table: map_tx_punt_next_macro_static_table

NPL_MAP_TX_PUNT_NEXT_MACRO_STATIC_TABLE_ACTION_TX_PUNT_NEXT_MACRO = 0x0

class npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t(basic_npl_struct):
    def __init__(self, ene_bytes_added=0, pl_inc=0, macro_id=0):
        super().__init__(17)
        self.ene_bytes_added = ene_bytes_added
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ene_bytes_added(self):
        return self._get_field_value(10, 7)
    @ene_bytes_added.setter
    def ene_bytes_added(self, value):
        self._set_field_value('field ene_bytes_added', 10, 7, int, value)
    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, npl_ene_macro_id_t, value)




class npl_map_tx_punt_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, punt_format=0, punt_encap_type=0, cud_type=0):
        super().__init__(10)
        self.punt_format = punt_format
        self.punt_encap_type = punt_encap_type
        self.cud_type = cud_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tx_punt_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def punt_format(self):
        return self._get_field_value(0, 2)
    @punt_format.setter
    def punt_format(self, value):
        self._set_field_value('field punt_format', 0, 2, int, value)
    @property
    def punt_encap_type(self):
        return self._get_field_value(2, 4)
    @punt_encap_type.setter
    def punt_encap_type(self, value):
        self._set_field_value('field punt_encap_type', 2, 4, int, value)
    @property
    def cud_type(self):
        return self._get_field_value(6, 4)
    @cud_type.setter
    def cud_type(self, value):
        self._set_field_value('field cud_type', 6, 4, int, value)

class npl_map_tx_punt_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(17)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tx_punt_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_next_macro(self):
        return npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_punt_next_macro.setter
    def tx_punt_next_macro(self, value):
        self._set_field_value('field tx_punt_next_macro', 0, 17, npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t, value)

class npl_map_tx_punt_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, ene_bytes_added=0, pl_inc=0, macro_id=0):
        super().__init__(25)
        self.payloads.tx_punt_next_macro = npl_map_tx_punt_next_macro_static_table_tx_punt_next_macro_payload_t(ene_bytes_added, pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tx_punt_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(17, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 17, 8, int, value)
    @property
    def payloads(self):
        return npl_map_tx_punt_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 17, npl_map_tx_punt_next_macro_static_table_payloads_t, value)



# API-s for table: map_tx_punt_rcy_next_macro_static_table

NPL_MAP_TX_PUNT_RCY_NEXT_MACRO_STATIC_TABLE_ACTION_SET_NPE_NEXT_MACRO = 0x0

class npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, npl_ene_macro_id_t, value)




class npl_map_tx_punt_rcy_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, redirect_code=0, eth_stage=0, inject_only=0):
        super().__init__(10)
        self.redirect_code = redirect_code
        self.eth_stage = eth_stage
        self.inject_only = inject_only

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tx_punt_rcy_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def redirect_code(self):
        return self._get_field_value(0, 8)
    @redirect_code.setter
    def redirect_code(self, value):
        self._set_field_value('field redirect_code', 0, 8, int, value)
    @property
    def eth_stage(self):
        return self._get_field_value(8, 1)
    @eth_stage.setter
    def eth_stage(self, value):
        self._set_field_value('field eth_stage', 8, 1, int, value)
    @property
    def inject_only(self):
        return self._get_field_value(9, 1)
    @inject_only.setter
    def inject_only(self, value):
        self._set_field_value('field inject_only', 9, 1, int, value)

class npl_map_tx_punt_rcy_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tx_punt_rcy_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_npe_next_macro(self):
        return npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_npe_next_macro.setter
    def set_npe_next_macro(self, value):
        self._set_field_value('field set_npe_next_macro', 0, 10, npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t, value)

class npl_map_tx_punt_rcy_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.set_npe_next_macro = npl_map_tx_punt_rcy_next_macro_static_table_set_npe_next_macro_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_map_tx_punt_rcy_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_map_tx_punt_rcy_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_map_tx_punt_rcy_next_macro_static_table_payloads_t, value)



# API-s for table: mc_bitmap_base_voq_lookup_table

NPL_MC_BITMAP_BASE_VOQ_LOOKUP_TABLE_ACTION_WRITE = 0x0

class npl_mc_bitmap_base_voq_lookup_table_key_t(basic_npl_struct):
    def __init__(self, rxpdr_local_vars_current_slice=0):
        super().__init__(3)
        self.rxpdr_local_vars_current_slice = rxpdr_local_vars_current_slice

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_bitmap_base_voq_lookup_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpdr_local_vars_current_slice(self):
        return self._get_field_value(0, 3)
    @rxpdr_local_vars_current_slice.setter
    def rxpdr_local_vars_current_slice(self, value):
        self._set_field_value('field rxpdr_local_vars_current_slice', 0, 3, int, value)

class npl_mc_bitmap_base_voq_lookup_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(18)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_bitmap_base_voq_lookup_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mc_bitmap_base_voq_lookup_table_result(self):
        return npl_mc_bitmap_base_voq_lookup_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mc_bitmap_base_voq_lookup_table_result.setter
    def mc_bitmap_base_voq_lookup_table_result(self, value):
        self._set_field_value('field mc_bitmap_base_voq_lookup_table_result', 0, 18, npl_mc_bitmap_base_voq_lookup_table_result_t, value)

class npl_mc_bitmap_base_voq_lookup_table_value_t(basic_npl_struct):
    def __init__(self, mc_bitmap_base_voq_lookup_table_result=0):
        super().__init__(26)
        self.payloads.mc_bitmap_base_voq_lookup_table_result = mc_bitmap_base_voq_lookup_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_bitmap_base_voq_lookup_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(18, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 18, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_bitmap_base_voq_lookup_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 18, npl_mc_bitmap_base_voq_lookup_table_payloads_t, value)



# API-s for table: mc_bitmap_tc_map_table

NPL_MC_BITMAP_TC_MAP_TABLE_ACTION_WRITE = 0x0

class npl_mc_bitmap_tc_map_table_key_t(basic_npl_struct):
    def __init__(self, rxpp_pd_tc=0, mc_bitmap_base_voq_lookup_table_result_tc_map_profile=0):
        super().__init__(5)
        self.rxpp_pd_tc = rxpp_pd_tc
        self.mc_bitmap_base_voq_lookup_table_result_tc_map_profile = mc_bitmap_base_voq_lookup_table_result_tc_map_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_bitmap_tc_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_tc(self):
        return self._get_field_value(0, 3)
    @rxpp_pd_tc.setter
    def rxpp_pd_tc(self, value):
        self._set_field_value('field rxpp_pd_tc', 0, 3, int, value)
    @property
    def mc_bitmap_base_voq_lookup_table_result_tc_map_profile(self):
        return self._get_field_value(3, 2)
    @mc_bitmap_base_voq_lookup_table_result_tc_map_profile.setter
    def mc_bitmap_base_voq_lookup_table_result_tc_map_profile(self, value):
        self._set_field_value('field mc_bitmap_base_voq_lookup_table_result_tc_map_profile', 3, 2, int, value)

class npl_mc_bitmap_tc_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_bitmap_tc_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpdr_local_vars_tc_offset(self):
        return self._get_field_value(0, 3)
    @rxpdr_local_vars_tc_offset.setter
    def rxpdr_local_vars_tc_offset(self, value):
        self._set_field_value('field rxpdr_local_vars_tc_offset', 0, 3, int, value)

class npl_mc_bitmap_tc_map_table_value_t(basic_npl_struct):
    def __init__(self, rxpdr_local_vars_tc_offset=0):
        super().__init__(11)
        self.payloads.rxpdr_local_vars_tc_offset = rxpdr_local_vars_tc_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_bitmap_tc_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_bitmap_tc_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_mc_bitmap_tc_map_table_payloads_t, value)



# API-s for table: mc_copy_id_map

NPL_MC_COPY_ID_MAP_ACTION_UPDATE = 0x0

class npl_mc_copy_id_map_update_payload_t(basic_npl_struct):
    def __init__(self, encap_size=0, mc_copy_id_msbs=0, encap_type=0):
        super().__init__(13)
        self.encap_size = encap_size
        self.mc_copy_id_msbs = mc_copy_id_msbs
        self.encap_type = encap_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_copy_id_map_update_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def encap_size(self):
        return self._get_field_value(12, 1)
    @encap_size.setter
    def encap_size(self, value):
        self._set_field_value('field encap_size', 12, 1, int, value)
    @property
    def mc_copy_id_msbs(self):
        return self._get_field_value(4, 8)
    @mc_copy_id_msbs.setter
    def mc_copy_id_msbs(self, value):
        self._set_field_value('field mc_copy_id_msbs', 4, 8, int, value)
    @property
    def encap_type(self):
        return self._get_field_value(0, 4)
    @encap_type.setter
    def encap_type(self, value):
        self._set_field_value('field encap_type', 0, 4, int, value)




class npl_mc_copy_id_map_key_t(basic_npl_struct):
    def __init__(self, cud_mapping_local_vars_mc_copy_id_17_12_=0):
        super().__init__(6)
        self.cud_mapping_local_vars_mc_copy_id_17_12_ = cud_mapping_local_vars_mc_copy_id_17_12_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_copy_id_map_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def cud_mapping_local_vars_mc_copy_id_17_12_(self):
        return self._get_field_value(0, 6)
    @cud_mapping_local_vars_mc_copy_id_17_12_.setter
    def cud_mapping_local_vars_mc_copy_id_17_12_(self, value):
        self._set_field_value('field cud_mapping_local_vars_mc_copy_id_17_12_', 0, 6, int, value)

class npl_mc_copy_id_map_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(13)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_copy_id_map_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update(self):
        return npl_mc_copy_id_map_update_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update.setter
    def update(self, value):
        self._set_field_value('field update', 0, 13, npl_mc_copy_id_map_update_payload_t, value)

class npl_mc_copy_id_map_value_t(basic_npl_struct):
    def __init__(self, encap_size=0, mc_copy_id_msbs=0, encap_type=0):
        super().__init__(21)
        self.payloads.update = npl_mc_copy_id_map_update_payload_t(encap_size, mc_copy_id_msbs, encap_type)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_copy_id_map_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(13, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 13, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_copy_id_map_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 13, npl_mc_copy_id_map_payloads_t, value)



# API-s for table: mc_cud_is_wide_table

NPL_MC_CUD_IS_WIDE_TABLE_ACTION_WRITE = 0x0

class npl_mc_cud_is_wide_table_key_t(basic_npl_struct):
    def __init__(self, cud_mapping_local_vars_mc_copy_id_12_7_=0):
        super().__init__(6)
        self.cud_mapping_local_vars_mc_copy_id_12_7_ = cud_mapping_local_vars_mc_copy_id_12_7_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_cud_is_wide_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def cud_mapping_local_vars_mc_copy_id_12_7_(self):
        return self._get_field_value(0, 6)
    @cud_mapping_local_vars_mc_copy_id_12_7_.setter
    def cud_mapping_local_vars_mc_copy_id_12_7_(self, value):
        self._set_field_value('field cud_mapping_local_vars_mc_copy_id_12_7_', 0, 6, int, value)

class npl_mc_cud_is_wide_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_cud_is_wide_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def cud_mapping_local_vars_mc_cud_is_wide(self):
        return self._get_field_value(0, 1)
    @cud_mapping_local_vars_mc_cud_is_wide.setter
    def cud_mapping_local_vars_mc_cud_is_wide(self, value):
        self._set_field_value('field cud_mapping_local_vars_mc_cud_is_wide', 0, 1, int, value)

class npl_mc_cud_is_wide_table_value_t(basic_npl_struct):
    def __init__(self, cud_mapping_local_vars_mc_cud_is_wide=0):
        super().__init__(9)
        self.payloads.cud_mapping_local_vars_mc_cud_is_wide = cud_mapping_local_vars_mc_cud_is_wide

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_cud_is_wide_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_cud_is_wide_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_mc_cud_is_wide_table_payloads_t, value)



# API-s for table: mc_em_db

NPL_MC_EM_DB_ACTION_WRITE = 0x0

class npl_mc_em_db_key_t(basic_npl_struct):
    def __init__(self, mc_em_db_key=0):
        super().__init__(32)
        self.mc_em_db_key = mc_em_db_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_em_db_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mc_em_db_key(self):
        return npl_mc_em_db__key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mc_em_db_key.setter
    def mc_em_db_key(self, value):
        self._set_field_value('field mc_em_db_key', 0, 32, npl_mc_em_db__key_t, value)

class npl_mc_em_db_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(72)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_em_db_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mc_em_db_result(self):
        return npl_mc_em_db_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mc_em_db_result.setter
    def mc_em_db_result(self, value):
        self._set_field_value('field mc_em_db_result', 0, 72, npl_mc_em_db_result_t, value)

class npl_mc_em_db_value_t(basic_npl_struct):
    def __init__(self, mc_em_db_result=0):
        super().__init__(80)
        self.payloads.mc_em_db_result = mc_em_db_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_em_db_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(72, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 72, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_em_db_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 72, npl_mc_em_db_payloads_t, value)



# API-s for table: mc_emdb_tc_map_table

NPL_MC_EMDB_TC_MAP_TABLE_ACTION_WRITE = 0x0

class npl_mc_emdb_tc_map_table_key_t(basic_npl_struct):
    def __init__(self, rxpp_pd_tc=0, rxpdr_local_vars_tc_map_profile_1_0_=0):
        super().__init__(5)
        self.rxpp_pd_tc = rxpp_pd_tc
        self.rxpdr_local_vars_tc_map_profile_1_0_ = rxpdr_local_vars_tc_map_profile_1_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_emdb_tc_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_tc(self):
        return self._get_field_value(0, 3)
    @rxpp_pd_tc.setter
    def rxpp_pd_tc(self, value):
        self._set_field_value('field rxpp_pd_tc', 0, 3, int, value)
    @property
    def rxpdr_local_vars_tc_map_profile_1_0_(self):
        return self._get_field_value(3, 2)
    @rxpdr_local_vars_tc_map_profile_1_0_.setter
    def rxpdr_local_vars_tc_map_profile_1_0_(self, value):
        self._set_field_value('field rxpdr_local_vars_tc_map_profile_1_0_', 3, 2, int, value)

class npl_mc_emdb_tc_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_emdb_tc_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpdr_local_vars_tc_offset(self):
        return self._get_field_value(0, 3)
    @rxpdr_local_vars_tc_offset.setter
    def rxpdr_local_vars_tc_offset(self, value):
        self._set_field_value('field rxpdr_local_vars_tc_offset', 0, 3, int, value)

class npl_mc_emdb_tc_map_table_value_t(basic_npl_struct):
    def __init__(self, rxpdr_local_vars_tc_offset=0):
        super().__init__(11)
        self.payloads.rxpdr_local_vars_tc_offset = rxpdr_local_vars_tc_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_emdb_tc_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_emdb_tc_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_mc_emdb_tc_map_table_payloads_t, value)



# API-s for table: mc_fe_links_bmp

NPL_MC_FE_LINKS_BMP_ACTION_WRITE = 0x0

class npl_mc_fe_links_bmp_key_t(basic_npl_struct):
    def __init__(self, rxpp_pd_fwd_destination_15_0_=0):
        super().__init__(16)
        self.rxpp_pd_fwd_destination_15_0_ = rxpp_pd_fwd_destination_15_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_fe_links_bmp_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_fwd_destination_15_0_(self):
        return self._get_field_value(0, 16)
    @rxpp_pd_fwd_destination_15_0_.setter
    def rxpp_pd_fwd_destination_15_0_(self, value):
        self._set_field_value('field rxpp_pd_fwd_destination_15_0_', 0, 16, int, value)

class npl_mc_fe_links_bmp_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(109)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_fe_links_bmp_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mc_fe_links_bmp_db_result(self):
        return npl_mc_fe_links_bmp_db_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mc_fe_links_bmp_db_result.setter
    def mc_fe_links_bmp_db_result(self, value):
        self._set_field_value('field mc_fe_links_bmp_db_result', 0, 109, npl_mc_fe_links_bmp_db_result_t, value)

class npl_mc_fe_links_bmp_value_t(basic_npl_struct):
    def __init__(self, mc_fe_links_bmp_db_result=0):
        super().__init__(117)
        self.payloads.mc_fe_links_bmp_db_result = mc_fe_links_bmp_db_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_fe_links_bmp_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(109, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 109, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_fe_links_bmp_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 109, npl_mc_fe_links_bmp_payloads_t, value)



# API-s for table: mc_ibm_cud_mapping_compound_table

NPL_MC_IBM_CUD_MAPPING_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_mc_ibm_cud_mapping_compound_table_key_t(basic_npl_struct):
    def __init__(self, mc_ibm_cud_mapping_key_key=0):
        super().__init__(6)
        self.mc_ibm_cud_mapping_key_key = mc_ibm_cud_mapping_key_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_ibm_cud_mapping_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mc_ibm_cud_mapping_key_key(self):
        return self._get_field_value(0, 6)
    @mc_ibm_cud_mapping_key_key.setter
    def mc_ibm_cud_mapping_key_key(self, value):
        self._set_field_value('field mc_ibm_cud_mapping_key_key', 0, 6, int, value)

class npl_mc_ibm_cud_mapping_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_ibm_cud_mapping_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def device_npu_header_for_tx_ingress_punt_encap_data_punt_lsb_encap(self):
        return npl_punt_lsb_encap_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @device_npu_header_for_tx_ingress_punt_encap_data_punt_lsb_encap.setter
    def device_npu_header_for_tx_ingress_punt_encap_data_punt_lsb_encap(self, value):
        self._set_field_value('field device_npu_header_for_tx_ingress_punt_encap_data_punt_lsb_encap', 0, 40, npl_punt_lsb_encap_t, value)

class npl_mc_ibm_cud_mapping_compound_table_value_t(basic_npl_struct):
    def __init__(self, device_npu_header_for_tx_ingress_punt_encap_data_punt_lsb_encap=0):
        super().__init__(48)
        self.payloads.device_npu_header_for_tx_ingress_punt_encap_data_punt_lsb_encap = device_npu_header_for_tx_ingress_punt_encap_data_punt_lsb_encap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_ibm_cud_mapping_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(40, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 40, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_ibm_cud_mapping_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 40, npl_mc_ibm_cud_mapping_compound_table_payloads_t, value)



# API-s for table: mc_ibm_cud_mapping_table

NPL_MC_IBM_CUD_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_mc_ibm_cud_mapping_table_key_t(basic_npl_struct):
    def __init__(self, ibm_mc_cud_key=0):
        super().__init__(9)
        self.ibm_mc_cud_key = ibm_mc_cud_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_ibm_cud_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ibm_mc_cud_key(self):
        return self._get_field_value(0, 9)
    @ibm_mc_cud_key.setter
    def ibm_mc_cud_key(self, value):
        self._set_field_value('field ibm_mc_cud_key', 0, 9, int, value)

class npl_mc_ibm_cud_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(129)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_ibm_cud_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mc_ibm_cud_mapping_encap(self):
        return npl_ibm_encap_header_on_direct_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mc_ibm_cud_mapping_encap.setter
    def mc_ibm_cud_mapping_encap(self, value):
        self._set_field_value('field mc_ibm_cud_mapping_encap', 0, 129, npl_ibm_encap_header_on_direct_t, value)

class npl_mc_ibm_cud_mapping_table_value_t(basic_npl_struct):
    def __init__(self, mc_ibm_cud_mapping_encap=0):
        super().__init__(137)
        self.payloads.mc_ibm_cud_mapping_encap = mc_ibm_cud_mapping_encap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_ibm_cud_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(129, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 129, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_ibm_cud_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 129, npl_mc_ibm_cud_mapping_table_payloads_t, value)



# API-s for table: mc_macro_compressed_fileds_pack_table

NPL_MC_MACRO_COMPRESSED_FILEDS_PACK_TABLE_ACTION_WRITE = 0x0

class npl_mc_macro_compressed_fileds_pack_table_key_option_q_cntr_t(basic_npl_struct):
    def __init__(self, pd_layer_vars_lp_attributes_l2_q_counter=0, packet_protocol_layer_current__type=0, ip_mc_address_not_comp=0, pd_npu_header_is_inject_up=0):
        super().__init__(28)
        self.pd_layer_vars_lp_attributes_l2_q_counter = pd_layer_vars_lp_attributes_l2_q_counter
        self.packet_protocol_layer_current__type = packet_protocol_layer_current__type
        self.ip_mc_address_not_comp = ip_mc_address_not_comp
        self.pd_npu_header_is_inject_up = pd_npu_header_is_inject_up

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_macro_compressed_fileds_pack_table_key_option_q_cntr_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pd_layer_vars_lp_attributes_l2_q_counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pd_layer_vars_lp_attributes_l2_q_counter.setter
    def pd_layer_vars_lp_attributes_l2_q_counter(self, value):
        self._set_field_value('field pd_layer_vars_lp_attributes_l2_q_counter', 0, 20, npl_counter_ptr_t, value)
    @property
    def packet_protocol_layer_current__type(self):
        return self._get_field_value(20, 5)
    @packet_protocol_layer_current__type.setter
    def packet_protocol_layer_current__type(self, value):
        self._set_field_value('field packet_protocol_layer_current__type', 20, 5, int, value)
    @property
    def ip_mc_address_not_comp(self):
        return self._get_field_value(25, 1)
    @ip_mc_address_not_comp.setter
    def ip_mc_address_not_comp(self, value):
        self._set_field_value('field ip_mc_address_not_comp', 25, 1, int, value)
    @property
    def pd_npu_header_is_inject_up(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @pd_npu_header_is_inject_up.setter
    def pd_npu_header_is_inject_up(self, value):
        self._set_field_value('field pd_npu_header_is_inject_up', 26, 1, npl_bool_t, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(27, 1)



class npl_mc_macro_compressed_fileds_pack_table_key_option_meter_cntr_t(basic_npl_struct):
    def __init__(self, pd_layer_vars_lp_attributes_l2_m_counter=0, packet_protocol_layer_current__type=0, ip_mc_address_not_comp=0, pd_npu_header_is_inject_up=0):
        super().__init__(28)
        self.pd_layer_vars_lp_attributes_l2_m_counter = pd_layer_vars_lp_attributes_l2_m_counter
        self.packet_protocol_layer_current__type = packet_protocol_layer_current__type
        self.ip_mc_address_not_comp = ip_mc_address_not_comp
        self.pd_npu_header_is_inject_up = pd_npu_header_is_inject_up

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_macro_compressed_fileds_pack_table_key_option_meter_cntr_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pd_layer_vars_lp_attributes_l2_m_counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pd_layer_vars_lp_attributes_l2_m_counter.setter
    def pd_layer_vars_lp_attributes_l2_m_counter(self, value):
        self._set_field_value('field pd_layer_vars_lp_attributes_l2_m_counter', 0, 20, npl_counter_ptr_t, value)
    @property
    def packet_protocol_layer_current__type(self):
        return self._get_field_value(20, 5)
    @packet_protocol_layer_current__type.setter
    def packet_protocol_layer_current__type(self, value):
        self._set_field_value('field packet_protocol_layer_current__type', 20, 5, int, value)
    @property
    def ip_mc_address_not_comp(self):
        return self._get_field_value(25, 1)
    @ip_mc_address_not_comp.setter
    def ip_mc_address_not_comp(self, value):
        self._set_field_value('field ip_mc_address_not_comp', 25, 1, int, value)
    @property
    def pd_npu_header_is_inject_up(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @pd_npu_header_is_inject_up.setter
    def pd_npu_header_is_inject_up(self, value):
        self._set_field_value('field pd_npu_header_is_inject_up', 26, 1, npl_bool_t, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(27, 1)




class mc_macro_compressed_fileds_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = mc_macro_compressed_fileds_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_Q_CNTR(self):
        return npl_mc_macro_compressed_fileds_pack_table_key_option_q_cntr_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_Q_CNTR.setter
    def NPL_Q_CNTR(self, value):
        self._set_field_value('field NPL_Q_CNTR', 0, 28, npl_mc_macro_compressed_fileds_pack_table_key_option_q_cntr_t, value)
    @property
    def NPL_METER_CNTR(self):
        return npl_mc_macro_compressed_fileds_pack_table_key_option_meter_cntr_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_METER_CNTR.setter
    def NPL_METER_CNTR(self, value):
        self._set_field_value('field NPL_METER_CNTR', 0, 28, npl_mc_macro_compressed_fileds_pack_table_key_option_meter_cntr_t, value)

class npl_mc_macro_compressed_fileds_pack_table_key_t(basic_npl_struct):
    def __init__(self, ingress_mac_qos_mapping_result_meter=0):
        super().__init__(28)
        self.ingress_mac_qos_mapping_result_meter = ingress_mac_qos_mapping_result_meter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_macro_compressed_fileds_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _ingress_mac_qos_mapping_result_meter = 0
    @property
    def ingress_mac_qos_mapping_result_meter(self):
        return self._ingress_mac_qos_mapping_result_meter
    @ingress_mac_qos_mapping_result_meter.setter
    def ingress_mac_qos_mapping_result_meter(self, value):
        self._ingress_mac_qos_mapping_result_meter = value
        if ingress_mac_qos_mapping_result_meter == NPL_Q_CNTR:
            self._set_field_value('const field', 27, 1, int, 0x0)
        if ingress_mac_qos_mapping_result_meter == NPL_METER_CNTR:
            self._set_field_value('const field', 27, 1, int, 0x0)

    @property
    def options(self):
        return mc_macro_compressed_fileds_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 28 - 0, mc_macro_compressed_fileds_pack_table_key_options_t, value)

class npl_mc_macro_compressed_fileds_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_macro_compressed_fileds_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_relay_local_vars_mc_macro_compressed_fields(self):
        return npl_mc_macro_compressed_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_relay_local_vars_mc_macro_compressed_fields.setter
    def mac_relay_local_vars_mc_macro_compressed_fields(self, value):
        self._set_field_value('field mac_relay_local_vars_mc_macro_compressed_fields', 0, 28, npl_mc_macro_compressed_fields_t, value)

class npl_mc_macro_compressed_fileds_pack_table_value_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mc_macro_compressed_fields=0):
        super().__init__(36)
        self.payloads.mac_relay_local_vars_mc_macro_compressed_fields = mac_relay_local_vars_mc_macro_compressed_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_macro_compressed_fileds_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(28, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 28, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_macro_compressed_fileds_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 28, npl_mc_macro_compressed_fileds_pack_table_payloads_t, value)



# API-s for table: mc_slice_bitmap_table

NPL_MC_SLICE_BITMAP_TABLE_ACTION_WRITE = 0x0

class npl_mc_slice_bitmap_table_key_t(basic_npl_struct):
    def __init__(self, rxpp_pd_fwd_destination_15_0_=0):
        super().__init__(16)
        self.rxpp_pd_fwd_destination_15_0_ = rxpp_pd_fwd_destination_15_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_slice_bitmap_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_fwd_destination_15_0_(self):
        return self._get_field_value(0, 16)
    @rxpp_pd_fwd_destination_15_0_.setter
    def rxpp_pd_fwd_destination_15_0_(self, value):
        self._set_field_value('field rxpp_pd_fwd_destination_15_0_', 0, 16, int, value)

class npl_mc_slice_bitmap_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(12)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_slice_bitmap_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mc_slice_bitmap_table_result(self):
        return npl_mc_slice_bitmap_table_entry_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mc_slice_bitmap_table_result.setter
    def mc_slice_bitmap_table_result(self, value):
        self._set_field_value('field mc_slice_bitmap_table_result', 0, 12, npl_mc_slice_bitmap_table_entry_t, value)

class npl_mc_slice_bitmap_table_value_t(basic_npl_struct):
    def __init__(self, mc_slice_bitmap_table_result=0):
        super().__init__(20)
        self.payloads.mc_slice_bitmap_table_result = mc_slice_bitmap_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mc_slice_bitmap_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(12, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 12, 8, int, value)
    @property
    def payloads(self):
        return npl_mc_slice_bitmap_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 12, npl_mc_slice_bitmap_table_payloads_t, value)



# API-s for table: meg_id_format_table

NPL_MEG_ID_FORMAT_TABLE_ACTION_WRITE = 0x0

class npl_meg_id_format_table_key_t(basic_npl_struct):
    def __init__(self, meg_id_length=0, eth_oam_ccm_meg_id_format=0, eth_oam_mp_table_read_payload_meg_id_format=0):
        super().__init__(17)
        self.meg_id_length = meg_id_length
        self.eth_oam_ccm_meg_id_format = eth_oam_ccm_meg_id_format
        self.eth_oam_mp_table_read_payload_meg_id_format = eth_oam_mp_table_read_payload_meg_id_format

    def _get_as_sub_field(data, offset_in_data):
        result = npl_meg_id_format_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meg_id_length(self):
        return self._get_field_value(0, 8)
    @meg_id_length.setter
    def meg_id_length(self, value):
        self._set_field_value('field meg_id_length', 0, 8, int, value)
    @property
    def eth_oam_ccm_meg_id_format(self):
        return self._get_field_value(8, 8)
    @eth_oam_ccm_meg_id_format.setter
    def eth_oam_ccm_meg_id_format(self, value):
        self._set_field_value('field eth_oam_ccm_meg_id_format', 8, 8, int, value)
    @property
    def eth_oam_mp_table_read_payload_meg_id_format(self):
        return self._get_field_value(16, 1)
    @eth_oam_mp_table_read_payload_meg_id_format.setter
    def eth_oam_mp_table_read_payload_meg_id_format(self, value):
        self._set_field_value('field eth_oam_mp_table_read_payload_meg_id_format', 16, 1, int, value)

class npl_meg_id_format_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_meg_id_format_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def eth_wrong_meg_id_format(self):
        return self._get_field_value(0, 1)
    @eth_wrong_meg_id_format.setter
    def eth_wrong_meg_id_format(self, value):
        self._set_field_value('field eth_wrong_meg_id_format', 0, 1, int, value)

class npl_meg_id_format_table_value_t(basic_npl_struct):
    def __init__(self, eth_wrong_meg_id_format=0):
        super().__init__(9)
        self.payloads.eth_wrong_meg_id_format = eth_wrong_meg_id_format

    def _get_as_sub_field(data, offset_in_data):
        result = npl_meg_id_format_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_meg_id_format_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_meg_id_format_table_payloads_t, value)



# API-s for table: mep_address_prefix_table

NPL_MEP_ADDRESS_PREFIX_TABLE_ACTION_WRITE = 0x0

class npl_mep_address_prefix_table_key_t(basic_npl_struct):
    def __init__(self, mep_address_prefix_index=0):
        super().__init__(2)
        self.mep_address_prefix_index = mep_address_prefix_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mep_address_prefix_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mep_address_prefix_index(self):
        return self._get_field_value(0, 2)
    @mep_address_prefix_index.setter
    def mep_address_prefix_index(self, value):
        self._set_field_value('field mep_address_prefix_index', 0, 2, int, value)

class npl_mep_address_prefix_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mep_address_prefix_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mep_mac_address_prefix(self):
        return self._get_field_value(0, 32)
    @mep_mac_address_prefix.setter
    def mep_mac_address_prefix(self, value):
        self._set_field_value('field mep_mac_address_prefix', 0, 32, int, value)

class npl_mep_address_prefix_table_value_t(basic_npl_struct):
    def __init__(self, mep_mac_address_prefix=0):
        super().__init__(40)
        self.payloads.mep_mac_address_prefix = mep_mac_address_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mep_address_prefix_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_mep_address_prefix_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_mep_address_prefix_table_payloads_t, value)



# API-s for table: mii_loopback_table

NPL_MII_LOOPBACK_TABLE_ACTION_WRITE = 0x0

class npl_mii_loopback_table_key_t(basic_npl_struct):
    def __init__(self, device_packet_info_pif=0, device_packet_info_ifg=0):
        super().__init__(6)
        self.device_packet_info_pif = device_packet_info_pif
        self.device_packet_info_ifg = device_packet_info_ifg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mii_loopback_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def device_packet_info_pif(self):
        return self._get_field_value(0, 5)
    @device_packet_info_pif.setter
    def device_packet_info_pif(self, value):
        self._set_field_value('field device_packet_info_pif', 0, 5, int, value)
    @property
    def device_packet_info_ifg(self):
        return self._get_field_value(5, 1)
    @device_packet_info_ifg.setter
    def device_packet_info_ifg(self, value):
        self._set_field_value('field device_packet_info_ifg', 5, 1, int, value)

class npl_mii_loopback_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mii_loopback_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mii_loopback_data(self):
        return npl_mii_loopback_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mii_loopback_data.setter
    def mii_loopback_data(self, value):
        self._set_field_value('field mii_loopback_data', 0, 2, npl_mii_loopback_data_t, value)

class npl_mii_loopback_table_value_t(basic_npl_struct):
    def __init__(self, mii_loopback_data=0):
        super().__init__(10)
        self.payloads.mii_loopback_data = mii_loopback_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mii_loopback_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_mii_loopback_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_mii_loopback_table_payloads_t, value)



# API-s for table: mirror_code_hw_table

NPL_MIRROR_CODE_HW_TABLE_ACTION_WRITE = 0x0

class npl_mirror_code_hw_table_key_t(basic_npl_struct):
    def __init__(self, pd_common_leaba_fields_mirror_code=0):
        super().__init__(8)
        self.pd_common_leaba_fields_mirror_code = pd_common_leaba_fields_mirror_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mirror_code_hw_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_common_leaba_fields_mirror_code(self):
        return self._get_field_value(0, 8)
    @pd_common_leaba_fields_mirror_code.setter
    def pd_common_leaba_fields_mirror_code(self, value):
        self._set_field_value('field pd_common_leaba_fields_mirror_code', 0, 8, int, value)

class npl_mirror_code_hw_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(5)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mirror_code_hw_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_rxn_in_mirror_cmd1(self):
        return self._get_field_value(0, 5)
    @rxpp_pd_rxn_in_mirror_cmd1.setter
    def rxpp_pd_rxn_in_mirror_cmd1(self, value):
        self._set_field_value('field rxpp_pd_rxn_in_mirror_cmd1', 0, 5, int, value)

class npl_mirror_code_hw_table_value_t(basic_npl_struct):
    def __init__(self, rxpp_pd_rxn_in_mirror_cmd1=0):
        super().__init__(13)
        self.payloads.rxpp_pd_rxn_in_mirror_cmd1 = rxpp_pd_rxn_in_mirror_cmd1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mirror_code_hw_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(5, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 5, 8, int, value)
    @property
    def payloads(self):
        return npl_mirror_code_hw_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 5, npl_mirror_code_hw_table_payloads_t, value)



# API-s for table: mirror_egress_attributes_table

NPL_MIRROR_EGRESS_ATTRIBUTES_TABLE_ACTION_SET_MIRROR_EGRESS_ATTRIBUTES = 0x0

class npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t(basic_npl_struct):
    def __init__(self, session_id=0, counter=0):
        super().__init__(32)
        self.session_id = session_id
        self.counter = counter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def session_id(self):
        return self._get_field_value(20, 12)
    @session_id.setter
    def session_id(self, value):
        self._set_field_value('field session_id', 20, 12, int, value)
    @property
    def counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter.setter
    def counter(self, value):
        self._set_field_value('field counter', 0, 20, npl_counter_ptr_t, value)




class npl_mirror_egress_attributes_table_key_t(basic_npl_struct):
    def __init__(self, mirror_code=0, is_ibm=0):
        super().__init__(9)
        self.mirror_code = mirror_code
        self.is_ibm = is_ibm

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mirror_egress_attributes_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mirror_code(self):
        return self._get_field_value(0, 8)
    @mirror_code.setter
    def mirror_code(self, value):
        self._set_field_value('field mirror_code', 0, 8, int, value)
    @property
    def is_ibm(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @is_ibm.setter
    def is_ibm(self, value):
        self._set_field_value('field is_ibm', 8, 1, npl_bool_t, value)

class npl_mirror_egress_attributes_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mirror_egress_attributes_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_mirror_egress_attributes(self):
        return npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_mirror_egress_attributes.setter
    def set_mirror_egress_attributes(self, value):
        self._set_field_value('field set_mirror_egress_attributes', 0, 32, npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t, value)

class npl_mirror_egress_attributes_table_value_t(basic_npl_struct):
    def __init__(self, session_id=0, counter=0):
        super().__init__(40)
        self.payloads.set_mirror_egress_attributes = npl_mirror_egress_attributes_table_set_mirror_egress_attributes_payload_t(session_id, counter)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mirror_egress_attributes_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_mirror_egress_attributes_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_mirror_egress_attributes_table_payloads_t, value)



# API-s for table: mirror_to_dsp_in_npu_soft_header_table

NPL_MIRROR_TO_DSP_IN_NPU_SOFT_HEADER_TABLE_ACTION_WRITE = 0x0

class npl_mirror_to_dsp_in_npu_soft_header_table_key_t(basic_npl_struct):
    def __init__(self, mirror_code=0):
        super().__init__(5)
        self.mirror_code = mirror_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mirror_to_dsp_in_npu_soft_header_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mirror_code(self):
        return self._get_field_value(0, 5)
    @mirror_code.setter
    def mirror_code(self, value):
        self._set_field_value('field mirror_code', 0, 5, int, value)

class npl_mirror_to_dsp_in_npu_soft_header_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mirror_to_dsp_in_npu_soft_header_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_dsp_in_npu_soft_header(self):
        return self._get_field_value(0, 1)
    @update_dsp_in_npu_soft_header.setter
    def update_dsp_in_npu_soft_header(self, value):
        self._set_field_value('field update_dsp_in_npu_soft_header', 0, 1, int, value)

class npl_mirror_to_dsp_in_npu_soft_header_table_value_t(basic_npl_struct):
    def __init__(self, update_dsp_in_npu_soft_header=0):
        super().__init__(9)
        self.payloads.update_dsp_in_npu_soft_header = update_dsp_in_npu_soft_header

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mirror_to_dsp_in_npu_soft_header_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_mirror_to_dsp_in_npu_soft_header_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_mirror_to_dsp_in_npu_soft_header_table_payloads_t, value)



# API-s for table: mldp_protection_enabled_static_table

NPL_MLDP_PROTECTION_ENABLED_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_mldp_protection_enabled_static_table_key_t(basic_npl_struct):
    def __init__(self, l3_encap=0, is_mc=0):
        super().__init__(5)
        self.l3_encap = l3_encap
        self.is_mc = is_mc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mldp_protection_enabled_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_encap(self):
        return self._get_field_value(0, 4)
    @l3_encap.setter
    def l3_encap(self, value):
        self._set_field_value('field l3_encap', 0, 4, int, value)
    @property
    def is_mc(self):
        return self._get_field_value(4, 1)
    @is_mc.setter
    def is_mc(self, value):
        self._set_field_value('field is_mc', 4, 1, int, value)

class npl_mldp_protection_enabled_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mldp_protection_enabled_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def enabled(self):
        return self._get_field_value(0, 1)
    @enabled.setter
    def enabled(self, value):
        self._set_field_value('field enabled', 0, 1, int, value)

class npl_mldp_protection_enabled_static_table_value_t(basic_npl_struct):
    def __init__(self, enabled=0):
        super().__init__(9)
        self.payloads.enabled = enabled

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mldp_protection_enabled_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_mldp_protection_enabled_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_mldp_protection_enabled_static_table_payloads_t, value)



# API-s for table: mldp_protection_table

NPL_MLDP_PROTECTION_TABLE_ACTION_WRITE = 0x0

class npl_mldp_protection_table_key_t(basic_npl_struct):
    def __init__(self, mlp_protection=0):
        super().__init__(9)
        self.mlp_protection = mlp_protection

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mldp_protection_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mlp_protection(self):
        return npl_mldp_protection_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mlp_protection.setter
    def mlp_protection(self, value):
        self._set_field_value('field mlp_protection', 0, 9, npl_mldp_protection_id_t, value)

class npl_mldp_protection_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mldp_protection_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mld_entry(self):
        return npl_mldp_protection_entry_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mld_entry.setter
    def mld_entry(self, value):
        self._set_field_value('field mld_entry', 0, 2, npl_mldp_protection_entry_t, value)

class npl_mldp_protection_table_value_t(basic_npl_struct):
    def __init__(self, mld_entry=0):
        super().__init__(10)
        self.payloads.mld_entry = mld_entry

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mldp_protection_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_mldp_protection_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_mldp_protection_table_payloads_t, value)



# API-s for table: mp_aux_data_table

NPL_MP_AUX_DATA_TABLE_ACTION_WRITE = 0x0

class npl_mp_aux_data_table_key_t(basic_npl_struct):
    def __init__(self, aux_table_key=0):
        super().__init__(12)
        self.aux_table_key = aux_table_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mp_aux_data_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def aux_table_key(self):
        return npl_aux_table_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @aux_table_key.setter
    def aux_table_key(self, value):
        self._set_field_value('field aux_table_key', 0, 12, npl_aux_table_key_t, value)

class npl_mp_aux_data_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mp_aux_data_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def aux_table_result(self):
        return npl_aux_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @aux_table_result.setter
    def aux_table_result(self, value):
        self._set_field_value('field aux_table_result', 0, 160, npl_aux_table_result_t, value)

class npl_mp_aux_data_table_value_t(basic_npl_struct):
    def __init__(self, aux_table_result=0):
        super().__init__(168)
        self.payloads.aux_table_result = aux_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mp_aux_data_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_mp_aux_data_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_mp_aux_data_table_payloads_t, value)



# API-s for table: mp_data_table

NPL_MP_DATA_TABLE_ACTION_WRITE = 0x0

class npl_mp_data_table_key_t(basic_npl_struct):
    def __init__(self, line_id=0):
        super().__init__(13)
        self.line_id = line_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mp_data_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def line_id(self):
        return npl_scanner_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @line_id.setter
    def line_id(self, value):
        self._set_field_value('field line_id', 0, 13, npl_scanner_id_t, value)

class npl_mp_data_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(200)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mp_data_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mp_data_result(self):
        return npl_mp_data_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mp_data_result.setter
    def mp_data_result(self, value):
        self._set_field_value('field mp_data_result', 0, 200, npl_mp_data_result_t, value)

class npl_mp_data_table_value_t(basic_npl_struct):
    def __init__(self, mp_data_result=0):
        super().__init__(208)
        self.payloads.mp_data_result = mp_data_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mp_data_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(200, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 200, 8, int, value)
    @property
    def payloads(self):
        return npl_mp_data_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 200, npl_mp_data_table_payloads_t, value)



# API-s for table: mpls_encap_control_static_table

NPL_MPLS_ENCAP_CONTROL_STATIC_TABLE_ACTION_SET_MPLS_CONTROLS = 0x0

class npl_mpls_encap_control_static_table_set_mpls_controls_payload_t(basic_npl_struct):
    def __init__(self, mpls_encap_control_bits=0, is_vpn=0, is_asbr=0):
        super().__init__(5)
        self.mpls_encap_control_bits = mpls_encap_control_bits
        self.is_vpn = is_vpn
        self.is_asbr = is_asbr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_encap_control_static_table_set_mpls_controls_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def mpls_encap_control_bits(self):
        return npl_mpls_encap_control_bits_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @mpls_encap_control_bits.setter
    def mpls_encap_control_bits(self, value):
        self._set_field_value('field mpls_encap_control_bits', 2, 3, npl_mpls_encap_control_bits_t, value)
    @property
    def is_vpn(self):
        return self._get_field_value(1, 1)
    @is_vpn.setter
    def is_vpn(self, value):
        self._set_field_value('field is_vpn', 1, 1, int, value)
    @property
    def is_asbr(self):
        return self._get_field_value(0, 1)
    @is_asbr.setter
    def is_asbr(self, value):
        self._set_field_value('field is_asbr', 0, 1, int, value)




class npl_mpls_encap_control_static_table_key_t(basic_npl_struct):
    def __init__(self, lsp_type=0, encap_type=0):
        super().__init__(6)
        self.lsp_type = lsp_type
        self.encap_type = encap_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_encap_control_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_type(self):
        return self._get_field_value(0, 2)
    @lsp_type.setter
    def lsp_type(self, value):
        self._set_field_value('field lsp_type', 0, 2, int, value)
    @property
    def encap_type(self):
        return self._get_field_value(2, 4)
    @encap_type.setter
    def encap_type(self, value):
        self._set_field_value('field encap_type', 2, 4, int, value)

class npl_mpls_encap_control_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(5)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_encap_control_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_mpls_controls(self):
        return npl_mpls_encap_control_static_table_set_mpls_controls_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_mpls_controls.setter
    def set_mpls_controls(self, value):
        self._set_field_value('field set_mpls_controls', 0, 5, npl_mpls_encap_control_static_table_set_mpls_controls_payload_t, value)

class npl_mpls_encap_control_static_table_value_t(basic_npl_struct):
    def __init__(self, mpls_encap_control_bits=0, is_vpn=0, is_asbr=0):
        super().__init__(13)
        self.payloads.set_mpls_controls = npl_mpls_encap_control_static_table_set_mpls_controls_payload_t(mpls_encap_control_bits, is_vpn, is_asbr)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_encap_control_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(5, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 5, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_encap_control_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 5, npl_mpls_encap_control_static_table_payloads_t, value)



# API-s for table: mpls_forwarding_table

NPL_MPLS_FORWARDING_TABLE_ACTION_WRITE = 0x0

class npl_mpls_forwarding_table_key_t(basic_npl_struct):
    def __init__(self, label=0):
        super().__init__(20)
        self.label = label

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_forwarding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def label(self):
        return self._get_field_value(0, 20)
    @label.setter
    def label(self, value):
        self._set_field_value('field label', 0, 20, int, value)

class npl_mpls_forwarding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_forwarding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def nhlfe(self):
        return npl_nhlfe_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @nhlfe.setter
    def nhlfe(self, value):
        self._set_field_value('field nhlfe', 0, 64, npl_nhlfe_t, value)

class npl_mpls_forwarding_table_value_t(basic_npl_struct):
    def __init__(self, nhlfe=0):
        super().__init__(72)
        self.payloads.nhlfe = nhlfe

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_forwarding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_forwarding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_mpls_forwarding_table_payloads_t, value)



# API-s for table: mpls_forwarding_table_compound

NPL_MPLS_FORWARDING_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_mpls_forwarding_table_compound_key_t(basic_npl_struct):
    def __init__(self, packet_mpls_header_label0_label=0):
        super().__init__(29)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 7, int, 0x6)
        self.packet_mpls_header_label0_label = packet_mpls_header_label0_label

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_forwarding_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_EM_LDB_MPLS_FWD_exact_0x6(self):
        return self._get_field_value(2, 7)
    @property
    def packet_mpls_header_label0_label(self):
        return self._get_field_value(9, 20)
    @packet_mpls_header_label0_label.setter
    def packet_mpls_header_label0_label(self, value):
        self._set_field_value('field packet_mpls_header_label0_label', 9, 20, int, value)

class npl_mpls_forwarding_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_forwarding_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_relay_local_vars_wrap_nhlfe(self):
        return npl_wrap_nhlfe_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mpls_relay_local_vars_wrap_nhlfe.setter
    def mpls_relay_local_vars_wrap_nhlfe(self, value):
        self._set_field_value('field mpls_relay_local_vars_wrap_nhlfe', 0, 64, npl_wrap_nhlfe_t, value)

class npl_mpls_forwarding_table_compound_value_t(basic_npl_struct):
    def __init__(self, mpls_relay_local_vars_wrap_nhlfe=0):
        super().__init__(72)
        self.payloads.mpls_relay_local_vars_wrap_nhlfe = mpls_relay_local_vars_wrap_nhlfe

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_forwarding_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_forwarding_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_mpls_forwarding_table_compound_payloads_t, value)



# API-s for table: mpls_header_offset_in_bytes_static_table

NPL_MPLS_HEADER_OFFSET_IN_BYTES_STATIC_TABLE_ACTION_IS_NULL_LABEL_FALSE = 0x0
NPL_MPLS_HEADER_OFFSET_IN_BYTES_STATIC_TABLE_ACTION_IS_NULL_LABEL_TRUE = 0x1

class npl_mpls_header_offset_in_bytes_static_table_key_t(basic_npl_struct):
    def __init__(self, mpls_is_null_labels=0):
        super().__init__(1)
        self.mpls_is_null_labels = mpls_is_null_labels

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_header_offset_in_bytes_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_is_null_labels(self):
        return self._get_field_value(0, 1)
    @mpls_is_null_labels.setter
    def mpls_is_null_labels(self, value):
        self._set_field_value('field mpls_is_null_labels', 0, 1, int, value)

class npl_mpls_header_offset_in_bytes_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_header_offset_in_bytes_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_mpls_header_offset_in_bytes_static_table_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(8)
        self.action = action

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_header_offset_in_bytes_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_header_offset_in_bytes_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_mpls_header_offset_in_bytes_static_table_payloads_t, value)



# API-s for table: mpls_l3_lsp_static_table

NPL_MPLS_L3_LSP_STATIC_TABLE_ACTION_UPDATE_BACKUP_PAYLOAD = 0x0
NPL_MPLS_L3_LSP_STATIC_TABLE_ACTION_UPDATE_LSP_ASBR_PAYLOAD = 0x1
NPL_MPLS_L3_LSP_STATIC_TABLE_ACTION_UPDATE_LSP_PAYLOAD = 0x2
NPL_MPLS_L3_LSP_STATIC_TABLE_ACTION_UPDATE_LSP_ZERO_PAYLOAD = 0x3
NPL_MPLS_L3_LSP_STATIC_TABLE_ACTION_UPDATE_MIDPOINT_PAYLOAD = 0x4

class npl_mpls_l3_lsp_static_table_key_t(basic_npl_struct):
    def __init__(self, mpls_encap_control_bits=0):
        super().__init__(3)
        self.mpls_encap_control_bits = mpls_encap_control_bits

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_l3_lsp_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_encap_control_bits(self):
        return npl_mpls_encap_control_bits_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mpls_encap_control_bits.setter
    def mpls_encap_control_bits(self, value):
        self._set_field_value('field mpls_encap_control_bits', 0, 3, npl_mpls_encap_control_bits_t, value)

class npl_mpls_l3_lsp_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_l3_lsp_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_mpls_l3_lsp_static_table_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(8)
        self.action = action

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_l3_lsp_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_l3_lsp_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_mpls_l3_lsp_static_table_payloads_t, value)



# API-s for table: mpls_labels_1_to_4_jump_offset_static_table

NPL_MPLS_LABELS_1_TO_4_JUMP_OFFSET_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_mpls_labels_1_to_4_jump_offset_static_table_key_t(basic_npl_struct):
    def __init__(self, jump_offset_code=0):
        super().__init__(2)
        self.jump_offset_code = jump_offset_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_labels_1_to_4_jump_offset_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def jump_offset_code(self):
        return self._get_field_value(0, 2)
    @jump_offset_code.setter
    def jump_offset_code(self, value):
        self._set_field_value('field jump_offset_code', 0, 2, int, value)

class npl_mpls_labels_1_to_4_jump_offset_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_labels_1_to_4_jump_offset_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def jump_offsets(self):
        return npl_lsp_impose_mpls_labels_ene_offset_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @jump_offsets.setter
    def jump_offsets(self, value):
        self._set_field_value('field jump_offsets', 0, 8, npl_lsp_impose_mpls_labels_ene_offset_t, value)

class npl_mpls_labels_1_to_4_jump_offset_static_table_value_t(basic_npl_struct):
    def __init__(self, jump_offsets=0):
        super().__init__(16)
        self.payloads.jump_offsets = jump_offsets

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_labels_1_to_4_jump_offset_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_labels_1_to_4_jump_offset_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_mpls_labels_1_to_4_jump_offset_static_table_payloads_t, value)



# API-s for table: mpls_lsp_labels_config_static_table

NPL_MPLS_LSP_LABELS_CONFIG_STATIC_TABLE_ACTION_SET_SECOND_MPLS_ENE_MACRO = 0x0

class npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t(basic_npl_struct):
    def __init__(self, num_labels_is_8=0, outer_transport_labels_exist=0, additional_labels_exist=0, transport_labels_size=0, second_ene_macro_code=0, jump_offset_code=0):
        super().__init__(13)
        self.num_labels_is_8 = num_labels_is_8
        self.outer_transport_labels_exist = outer_transport_labels_exist
        self.additional_labels_exist = additional_labels_exist
        self.transport_labels_size = transport_labels_size
        self.second_ene_macro_code = second_ene_macro_code
        self.jump_offset_code = jump_offset_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def num_labels_is_8(self):
        return self._get_field_value(12, 1)
    @num_labels_is_8.setter
    def num_labels_is_8(self, value):
        self._set_field_value('field num_labels_is_8', 12, 1, int, value)
    @property
    def outer_transport_labels_exist(self):
        return self._get_field_value(11, 1)
    @outer_transport_labels_exist.setter
    def outer_transport_labels_exist(self, value):
        self._set_field_value('field outer_transport_labels_exist', 11, 1, int, value)
    @property
    def additional_labels_exist(self):
        return self._get_field_value(10, 1)
    @additional_labels_exist.setter
    def additional_labels_exist(self, value):
        self._set_field_value('field additional_labels_exist', 10, 1, int, value)
    @property
    def transport_labels_size(self):
        return self._get_field_value(4, 6)
    @transport_labels_size.setter
    def transport_labels_size(self, value):
        self._set_field_value('field transport_labels_size', 4, 6, int, value)
    @property
    def second_ene_macro_code(self):
        return self._get_field_value(2, 2)
    @second_ene_macro_code.setter
    def second_ene_macro_code(self, value):
        self._set_field_value('field second_ene_macro_code', 2, 2, int, value)
    @property
    def jump_offset_code(self):
        return self._get_field_value(0, 2)
    @jump_offset_code.setter
    def jump_offset_code(self, value):
        self._set_field_value('field jump_offset_code', 0, 2, int, value)




class npl_mpls_lsp_labels_config_static_table_key_t(basic_npl_struct):
    def __init__(self, num_outer_transport_labels=0, inner_transport_labels_exist=0):
        super().__init__(6)
        self.num_outer_transport_labels = num_outer_transport_labels
        self.inner_transport_labels_exist = inner_transport_labels_exist

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_lsp_labels_config_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def num_outer_transport_labels(self):
        return npl_num_outer_transport_labels_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @num_outer_transport_labels.setter
    def num_outer_transport_labels(self, value):
        self._set_field_value('field num_outer_transport_labels', 0, 5, npl_num_outer_transport_labels_t, value)
    @property
    def inner_transport_labels_exist(self):
        return self._get_field_value(5, 1)
    @inner_transport_labels_exist.setter
    def inner_transport_labels_exist(self, value):
        self._set_field_value('field inner_transport_labels_exist', 5, 1, int, value)

class npl_mpls_lsp_labels_config_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(13)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_lsp_labels_config_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_second_mpls_ene_macro(self):
        return npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_second_mpls_ene_macro.setter
    def set_second_mpls_ene_macro(self, value):
        self._set_field_value('field set_second_mpls_ene_macro', 0, 13, npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t, value)

class npl_mpls_lsp_labels_config_static_table_value_t(basic_npl_struct):
    def __init__(self, num_labels_is_8=0, outer_transport_labels_exist=0, additional_labels_exist=0, transport_labels_size=0, second_ene_macro_code=0, jump_offset_code=0):
        super().__init__(21)
        self.payloads.set_second_mpls_ene_macro = npl_mpls_lsp_labels_config_static_table_set_second_mpls_ene_macro_payload_t(num_labels_is_8, outer_transport_labels_exist, additional_labels_exist, transport_labels_size, second_ene_macro_code, jump_offset_code)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_lsp_labels_config_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(13, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 13, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_lsp_labels_config_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 13, npl_mpls_lsp_labels_config_static_table_payloads_t, value)



# API-s for table: mpls_qos_mapping_table

NPL_MPLS_QOS_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_mpls_qos_mapping_table_key_t(basic_npl_struct):
    def __init__(self, qos_id=0, l3_qos_mapping_key=0):
        super().__init__(7)
        self.qos_id = qos_id
        self.l3_qos_mapping_key = l3_qos_mapping_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_qos_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_id(self):
        return self._get_field_value(0, 4)
    @qos_id.setter
    def qos_id(self, value):
        self._set_field_value('field qos_id', 0, 4, int, value)
    @property
    def l3_qos_mapping_key(self):
        return self._get_field_value(4, 3)
    @l3_qos_mapping_key.setter
    def l3_qos_mapping_key(self, value):
        self._set_field_value('field l3_qos_mapping_key', 4, 3, int, value)

class npl_mpls_qos_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_qos_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_qos_mapping_result(self):
        return npl_ingress_qos_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mpls_qos_mapping_result.setter
    def mpls_qos_mapping_result(self, value):
        self._set_field_value('field mpls_qos_mapping_result', 0, 32, npl_ingress_qos_result_t, value)

class npl_mpls_qos_mapping_table_value_t(basic_npl_struct):
    def __init__(self, mpls_qos_mapping_result=0):
        super().__init__(40)
        self.payloads.mpls_qos_mapping_result = mpls_qos_mapping_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_qos_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_qos_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_mpls_qos_mapping_table_payloads_t, value)



# API-s for table: mpls_qos_tag_pack_table

NPL_MPLS_QOS_TAG_PACK_TABLE_ACTION_WRITE = 0x0

class npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_qos_group_t(basic_npl_struct):
    def __init__(self, encap_local_vars_el_label_exp_bos_0=0, encap_local_vars_el_label_exp_bos_1=0, tx_npu_header_qos_group_4_0_=0, mpls_tx_control_vars_fwd_hdr_type_v6=0):
        super().__init__(32)
        self.encap_local_vars_el_label_exp_bos_0 = encap_local_vars_el_label_exp_bos_0
        self.encap_local_vars_el_label_exp_bos_1 = encap_local_vars_el_label_exp_bos_1
        self.tx_npu_header_qos_group_4_0_ = tx_npu_header_qos_group_4_0_
        self.mpls_tx_control_vars_fwd_hdr_type_v6 = mpls_tx_control_vars_fwd_hdr_type_v6

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_qos_group_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def encap_local_vars_el_label_exp_bos_0(self):
        return self._get_field_value(0, 4)
    @encap_local_vars_el_label_exp_bos_0.setter
    def encap_local_vars_el_label_exp_bos_0(self, value):
        self._set_field_value('field encap_local_vars_el_label_exp_bos_0', 0, 4, int, value)
    @property
    def const1_4b0_exact_0x0(self):
        return self._get_field_value(4, 4)
    @property
    def encap_local_vars_el_label_exp_bos_1(self):
        return self._get_field_value(8, 4)
    @encap_local_vars_el_label_exp_bos_1.setter
    def encap_local_vars_el_label_exp_bos_1(self, value):
        self._set_field_value('field encap_local_vars_el_label_exp_bos_1', 8, 4, int, value)
    @property
    def const2_4b1_exact_0x1(self):
        return self._get_field_value(12, 4)
    @property
    def const3_nh_ethernet_no_vlan_ene_macro_exact_0x64(self):
        return self._get_field_value(16, 8)
    @property
    def tx_npu_header_qos_group_4_0_(self):
        return self._get_field_value(24, 5)
    @tx_npu_header_qos_group_4_0_.setter
    def tx_npu_header_qos_group_4_0_(self, value):
        self._set_field_value('field tx_npu_header_qos_group_4_0_', 24, 5, int, value)
    @property
    def const4_2b0_exact_0x0(self):
        return self._get_field_value(29, 2)
    @property
    def mpls_tx_control_vars_fwd_hdr_type_v6(self):
        return self._get_field_value(31, 1)
    @mpls_tx_control_vars_fwd_hdr_type_v6.setter
    def mpls_tx_control_vars_fwd_hdr_type_v6(self, value):
        self._set_field_value('field mpls_tx_control_vars_fwd_hdr_type_v6', 31, 1, int, value)



class npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_label_exp_t(basic_npl_struct):
    def __init__(self, encap_local_vars_el_label_exp_bos_0=0, encap_local_vars_el_label_exp_bos_1=0, packet_mpls_header_label0_exp_2_0_=0, mpls_tx_control_vars_fwd_hdr_type_v6=0):
        super().__init__(32)
        self.encap_local_vars_el_label_exp_bos_0 = encap_local_vars_el_label_exp_bos_0
        self.encap_local_vars_el_label_exp_bos_1 = encap_local_vars_el_label_exp_bos_1
        self.packet_mpls_header_label0_exp_2_0_ = packet_mpls_header_label0_exp_2_0_
        self.mpls_tx_control_vars_fwd_hdr_type_v6 = mpls_tx_control_vars_fwd_hdr_type_v6

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_label_exp_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def encap_local_vars_el_label_exp_bos_0(self):
        return self._get_field_value(0, 4)
    @encap_local_vars_el_label_exp_bos_0.setter
    def encap_local_vars_el_label_exp_bos_0(self, value):
        self._set_field_value('field encap_local_vars_el_label_exp_bos_0', 0, 4, int, value)
    @property
    def const1_4b0_exact_0x0(self):
        return self._get_field_value(4, 4)
    @property
    def encap_local_vars_el_label_exp_bos_1(self):
        return self._get_field_value(8, 4)
    @encap_local_vars_el_label_exp_bos_1.setter
    def encap_local_vars_el_label_exp_bos_1(self, value):
        self._set_field_value('field encap_local_vars_el_label_exp_bos_1', 8, 4, int, value)
    @property
    def const2_4b1_exact_0x1(self):
        return self._get_field_value(12, 4)
    @property
    def const3_nh_ethernet_no_vlan_ene_macro_exact_0x64(self):
        return self._get_field_value(16, 8)
    @property
    def packet_mpls_header_label0_exp_2_0_(self):
        return self._get_field_value(24, 3)
    @packet_mpls_header_label0_exp_2_0_.setter
    def packet_mpls_header_label0_exp_2_0_(self, value):
        self._set_field_value('field packet_mpls_header_label0_exp_2_0_', 24, 3, int, value)
    @property
    def const4_1b1_exact_0x1(self):
        return self._get_field_value(27, 1)
    @property
    def const5_3b101_exact_0x5(self):
        return self._get_field_value(28, 3)
    @property
    def mpls_tx_control_vars_fwd_hdr_type_v6(self):
        return self._get_field_value(31, 1)
    @mpls_tx_control_vars_fwd_hdr_type_v6.setter
    def mpls_tx_control_vars_fwd_hdr_type_v6(self, value):
        self._set_field_value('field mpls_tx_control_vars_fwd_hdr_type_v6', 31, 1, int, value)



class npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_encap_qos_tag_t(basic_npl_struct):
    def __init__(self, encap_local_vars_el_label_exp_bos_0=0, encap_local_vars_el_label_exp_bos_1=0, tx_npu_header_encap_qos_tag_3_0_=0, mpls_tx_control_vars_fwd_hdr_type_v6=0):
        super().__init__(32)
        self.encap_local_vars_el_label_exp_bos_0 = encap_local_vars_el_label_exp_bos_0
        self.encap_local_vars_el_label_exp_bos_1 = encap_local_vars_el_label_exp_bos_1
        self.tx_npu_header_encap_qos_tag_3_0_ = tx_npu_header_encap_qos_tag_3_0_
        self.mpls_tx_control_vars_fwd_hdr_type_v6 = mpls_tx_control_vars_fwd_hdr_type_v6

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_encap_qos_tag_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def encap_local_vars_el_label_exp_bos_0(self):
        return self._get_field_value(0, 4)
    @encap_local_vars_el_label_exp_bos_0.setter
    def encap_local_vars_el_label_exp_bos_0(self, value):
        self._set_field_value('field encap_local_vars_el_label_exp_bos_0', 0, 4, int, value)
    @property
    def const1_4b0_exact_0x0(self):
        return self._get_field_value(4, 4)
    @property
    def encap_local_vars_el_label_exp_bos_1(self):
        return self._get_field_value(8, 4)
    @encap_local_vars_el_label_exp_bos_1.setter
    def encap_local_vars_el_label_exp_bos_1(self, value):
        self._set_field_value('field encap_local_vars_el_label_exp_bos_1', 8, 4, int, value)
    @property
    def const2_4b1_exact_0x1(self):
        return self._get_field_value(12, 4)
    @property
    def const3_nh_ethernet_no_vlan_ene_macro_exact_0x64(self):
        return self._get_field_value(16, 8)
    @property
    def tx_npu_header_encap_qos_tag_3_0_(self):
        return self._get_field_value(24, 4)
    @tx_npu_header_encap_qos_tag_3_0_.setter
    def tx_npu_header_encap_qos_tag_3_0_(self, value):
        self._set_field_value('field tx_npu_header_encap_qos_tag_3_0_', 24, 4, int, value)
    @property
    def const4_3b101_exact_0x5(self):
        return self._get_field_value(28, 3)
    @property
    def mpls_tx_control_vars_fwd_hdr_type_v6(self):
        return self._get_field_value(31, 1)
    @mpls_tx_control_vars_fwd_hdr_type_v6.setter
    def mpls_tx_control_vars_fwd_hdr_type_v6(self, value):
        self._set_field_value('field mpls_tx_control_vars_fwd_hdr_type_v6', 31, 1, int, value)



class npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_fwd_qos_tag_t(basic_npl_struct):
    def __init__(self, encap_local_vars_el_label_exp_bos_0=0, encap_local_vars_el_label_exp_bos_1=0, tx_npu_header_fwd_qos_tag=0, mpls_tx_control_vars_fwd_hdr_type_v6=0):
        super().__init__(32)
        self.encap_local_vars_el_label_exp_bos_0 = encap_local_vars_el_label_exp_bos_0
        self.encap_local_vars_el_label_exp_bos_1 = encap_local_vars_el_label_exp_bos_1
        self.tx_npu_header_fwd_qos_tag = tx_npu_header_fwd_qos_tag
        self.mpls_tx_control_vars_fwd_hdr_type_v6 = mpls_tx_control_vars_fwd_hdr_type_v6

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_fwd_qos_tag_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def encap_local_vars_el_label_exp_bos_0(self):
        return self._get_field_value(0, 4)
    @encap_local_vars_el_label_exp_bos_0.setter
    def encap_local_vars_el_label_exp_bos_0(self, value):
        self._set_field_value('field encap_local_vars_el_label_exp_bos_0', 0, 4, int, value)
    @property
    def const1_4b0_exact_0x0(self):
        return self._get_field_value(4, 4)
    @property
    def encap_local_vars_el_label_exp_bos_1(self):
        return self._get_field_value(8, 4)
    @encap_local_vars_el_label_exp_bos_1.setter
    def encap_local_vars_el_label_exp_bos_1(self, value):
        self._set_field_value('field encap_local_vars_el_label_exp_bos_1', 8, 4, int, value)
    @property
    def const2_4b1_exact_0x1(self):
        return self._get_field_value(12, 4)
    @property
    def const3_nh_ethernet_no_vlan_ene_macro_exact_0x64(self):
        return self._get_field_value(16, 8)
    @property
    def tx_npu_header_fwd_qos_tag(self):
        return self._get_field_value(24, 7)
    @tx_npu_header_fwd_qos_tag.setter
    def tx_npu_header_fwd_qos_tag(self, value):
        self._set_field_value('field tx_npu_header_fwd_qos_tag', 24, 7, int, value)
    @property
    def mpls_tx_control_vars_fwd_hdr_type_v6(self):
        return self._get_field_value(31, 1)
    @mpls_tx_control_vars_fwd_hdr_type_v6.setter
    def mpls_tx_control_vars_fwd_hdr_type_v6(self, value):
        self._set_field_value('field mpls_tx_control_vars_fwd_hdr_type_v6', 31, 1, int, value)




class mpls_qos_tag_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = mpls_qos_tag_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_MPLS_QOS_TAG_SELECT_QOS_GROUP(self):
        return npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_qos_group_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_MPLS_QOS_TAG_SELECT_QOS_GROUP.setter
    def NPL_MPLS_QOS_TAG_SELECT_QOS_GROUP(self, value):
        self._set_field_value('field NPL_MPLS_QOS_TAG_SELECT_QOS_GROUP', 0, 32, npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_qos_group_t, value)
    @property
    def NPL_MPLS_QOS_TAG_SELECT_LABEL_EXP(self):
        return npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_label_exp_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_MPLS_QOS_TAG_SELECT_LABEL_EXP.setter
    def NPL_MPLS_QOS_TAG_SELECT_LABEL_EXP(self, value):
        self._set_field_value('field NPL_MPLS_QOS_TAG_SELECT_LABEL_EXP', 0, 32, npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_label_exp_t, value)
    @property
    def NPL_MPLS_QOS_TAG_SELECT_ENCAP_QOS_TAG(self):
        return npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_encap_qos_tag_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_MPLS_QOS_TAG_SELECT_ENCAP_QOS_TAG.setter
    def NPL_MPLS_QOS_TAG_SELECT_ENCAP_QOS_TAG(self, value):
        self._set_field_value('field NPL_MPLS_QOS_TAG_SELECT_ENCAP_QOS_TAG', 0, 32, npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_encap_qos_tag_t, value)
    @property
    def NPL_MPLS_QOS_TAG_SELECT_FWD_QOS_TAG(self):
        return npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_fwd_qos_tag_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_MPLS_QOS_TAG_SELECT_FWD_QOS_TAG.setter
    def NPL_MPLS_QOS_TAG_SELECT_FWD_QOS_TAG(self, value):
        self._set_field_value('field NPL_MPLS_QOS_TAG_SELECT_FWD_QOS_TAG', 0, 32, npl_mpls_qos_tag_pack_table_key_option_mpls_qos_tag_select_fwd_qos_tag_t, value)

class npl_mpls_qos_tag_pack_table_key_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_mpls_qos_tag_selector=0):
        super().__init__(32)
        self.l3_tx_local_vars_mpls_qos_tag_selector = l3_tx_local_vars_mpls_qos_tag_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_qos_tag_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _l3_tx_local_vars_mpls_qos_tag_selector = 0
    @property
    def l3_tx_local_vars_mpls_qos_tag_selector(self):
        return self._l3_tx_local_vars_mpls_qos_tag_selector
    @l3_tx_local_vars_mpls_qos_tag_selector.setter
    def l3_tx_local_vars_mpls_qos_tag_selector(self, value):
        self._l3_tx_local_vars_mpls_qos_tag_selector = value
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_QOS_GROUP:
            self._set_field_value('const field', 4, 4, int, 0x0)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_QOS_GROUP:
            self._set_field_value('const field', 12, 4, int, 0x1)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_QOS_GROUP:
            self._set_field_value('const field', 16, 8, int, 0x64)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_QOS_GROUP:
            self._set_field_value('const field', 29, 2, int, 0x0)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_LABEL_EXP:
            self._set_field_value('const field', 4, 4, int, 0x0)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_LABEL_EXP:
            self._set_field_value('const field', 12, 4, int, 0x1)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_LABEL_EXP:
            self._set_field_value('const field', 16, 8, int, 0x64)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_LABEL_EXP:
            self._set_field_value('const field', 27, 1, int, 0x1)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_LABEL_EXP:
            self._set_field_value('const field', 28, 3, int, 0x5)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_ENCAP_QOS_TAG:
            self._set_field_value('const field', 4, 4, int, 0x0)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_ENCAP_QOS_TAG:
            self._set_field_value('const field', 12, 4, int, 0x1)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_ENCAP_QOS_TAG:
            self._set_field_value('const field', 16, 8, int, 0x64)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_ENCAP_QOS_TAG:
            self._set_field_value('const field', 28, 3, int, 0x5)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_FWD_QOS_TAG:
            self._set_field_value('const field', 4, 4, int, 0x0)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_FWD_QOS_TAG:
            self._set_field_value('const field', 12, 4, int, 0x1)
        if l3_tx_local_vars_mpls_qos_tag_selector == NPL_MPLS_QOS_TAG_SELECT_FWD_QOS_TAG:
            self._set_field_value('const field', 16, 8, int, 0x64)

    @property
    def options(self):
        return mpls_qos_tag_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 32 - 0, mpls_qos_tag_pack_table_key_options_t, value)

class npl_mpls_qos_tag_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_qos_tag_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def encap_local_vars_mapping_qos_tag_packed_result(self):
        return npl_mapping_qos_tag_packed_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @encap_local_vars_mapping_qos_tag_packed_result.setter
    def encap_local_vars_mapping_qos_tag_packed_result(self, value):
        self._set_field_value('field encap_local_vars_mapping_qos_tag_packed_result', 0, 32, npl_mapping_qos_tag_packed_result_t, value)

class npl_mpls_qos_tag_pack_table_value_t(basic_npl_struct):
    def __init__(self, encap_local_vars_mapping_qos_tag_packed_result=0):
        super().__init__(40)
        self.payloads.encap_local_vars_mapping_qos_tag_packed_result = encap_local_vars_mapping_qos_tag_packed_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_qos_tag_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_qos_tag_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_mpls_qos_tag_pack_table_payloads_t, value)



# API-s for table: mpls_relay_npu_hdr_pack_table

NPL_MPLS_RELAY_NPU_HDR_PACK_TABLE_ACTION_WRITE = 0x0

class npl_mpls_relay_npu_hdr_pack_table_key_t(basic_npl_struct):
    def __init__(self, mpls_relay_local_vars_ttl=0, pd_npu_header_is_inject_up_and_ip_first_fragment=0, mpls_relay_local_vars_force_pipe_ttl=0):
        super().__init__(12)
        self.mpls_relay_local_vars_ttl = mpls_relay_local_vars_ttl
        self.pd_npu_header_is_inject_up_and_ip_first_fragment = pd_npu_header_is_inject_up_and_ip_first_fragment
        self.mpls_relay_local_vars_force_pipe_ttl = mpls_relay_local_vars_force_pipe_ttl

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_relay_npu_hdr_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_relay_local_vars_ttl(self):
        return self._get_field_value(0, 8)
    @mpls_relay_local_vars_ttl.setter
    def mpls_relay_local_vars_ttl(self, value):
        self._set_field_value('field mpls_relay_local_vars_ttl', 0, 8, int, value)
    @property
    def pd_npu_header_is_inject_up_and_ip_first_fragment(self):
        return npl_is_inject_up_and_ip_first_fragment_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @pd_npu_header_is_inject_up_and_ip_first_fragment.setter
    def pd_npu_header_is_inject_up_and_ip_first_fragment(self, value):
        self._set_field_value('field pd_npu_header_is_inject_up_and_ip_first_fragment', 8, 3, npl_is_inject_up_and_ip_first_fragment_t, value)
    @property
    def mpls_relay_local_vars_force_pipe_ttl(self):
        return self._get_field_value(11, 1)
    @mpls_relay_local_vars_force_pipe_ttl.setter
    def mpls_relay_local_vars_force_pipe_ttl(self, value):
        self._set_field_value('field mpls_relay_local_vars_force_pipe_ttl', 11, 1, int, value)

class npl_mpls_relay_npu_hdr_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(12)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_relay_npu_hdr_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_npu_header_npu_app_pack_fields(self):
        return npl_npu_app_pack_fields_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pd_npu_header_npu_app_pack_fields.setter
    def pd_npu_header_npu_app_pack_fields(self, value):
        self._set_field_value('field pd_npu_header_npu_app_pack_fields', 0, 12, npl_npu_app_pack_fields_t, value)

class npl_mpls_relay_npu_hdr_pack_table_value_t(basic_npl_struct):
    def __init__(self, pd_npu_header_npu_app_pack_fields=0):
        super().__init__(20)
        self.payloads.pd_npu_header_npu_app_pack_fields = pd_npu_header_npu_app_pack_fields

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_relay_npu_hdr_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(12, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 12, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_relay_npu_hdr_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 12, npl_mpls_relay_npu_hdr_pack_table_payloads_t, value)



# API-s for table: mpls_resolve_service_labels_static_table

NPL_MPLS_RESOLVE_SERVICE_LABELS_STATIC_TABLE_ACTION_SET_CONDITIONS = 0x0

class npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t(basic_npl_struct):
    def __init__(self, vpn_label_exists=0, sizeof_labels=0, mpls_first_ene_macro_control=0):
        super().__init__(12)
        self.vpn_label_exists = vpn_label_exists
        self.sizeof_labels = sizeof_labels
        self.mpls_first_ene_macro_control = mpls_first_ene_macro_control

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def vpn_label_exists(self):
        return self._get_field_value(11, 1)
    @vpn_label_exists.setter
    def vpn_label_exists(self, value):
        self._set_field_value('field vpn_label_exists', 11, 1, int, value)
    @property
    def sizeof_labels(self):
        return self._get_field_value(5, 6)
    @sizeof_labels.setter
    def sizeof_labels(self, value):
        self._set_field_value('field sizeof_labels', 5, 6, int, value)
    @property
    def mpls_first_ene_macro_control(self):
        return npl_mpls_first_ene_macro_control_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mpls_first_ene_macro_control.setter
    def mpls_first_ene_macro_control(self, value):
        self._set_field_value('field mpls_first_ene_macro_control', 0, 5, npl_mpls_first_ene_macro_control_t, value)




class npl_mpls_resolve_service_labels_static_table_key_t(basic_npl_struct):
    def __init__(self, fwd_hdr_type=0, vpn_enabled=0, lsp_flags=0):
        super().__init__(15)
        self.fwd_hdr_type = fwd_hdr_type
        self.vpn_enabled = vpn_enabled
        self.lsp_flags = lsp_flags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_resolve_service_labels_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fwd_hdr_type(self):
        return self._get_field_value(0, 4)
    @fwd_hdr_type.setter
    def fwd_hdr_type(self, value):
        self._set_field_value('field fwd_hdr_type', 0, 4, int, value)
    @property
    def vpn_enabled(self):
        return self._get_field_value(4, 1)
    @vpn_enabled.setter
    def vpn_enabled(self, value):
        self._set_field_value('field vpn_enabled', 4, 1, int, value)
    @property
    def lsp_flags(self):
        return npl_lsp_encap_fields_t._get_as_sub_field(self._data, self._offset_in_data + 5)
    @lsp_flags.setter
    def lsp_flags(self, value):
        self._set_field_value('field lsp_flags', 5, 10, npl_lsp_encap_fields_t, value)

class npl_mpls_resolve_service_labels_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(12)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_resolve_service_labels_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_conditions(self):
        return npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_conditions.setter
    def set_conditions(self, value):
        self._set_field_value('field set_conditions', 0, 12, npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t, value)

class npl_mpls_resolve_service_labels_static_table_value_t(basic_npl_struct):
    def __init__(self, vpn_label_exists=0, sizeof_labels=0, mpls_first_ene_macro_control=0):
        super().__init__(20)
        self.payloads.set_conditions = npl_mpls_resolve_service_labels_static_table_set_conditions_payload_t(vpn_label_exists, sizeof_labels, mpls_first_ene_macro_control)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_resolve_service_labels_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(12, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 12, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_resolve_service_labels_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 12, npl_mpls_resolve_service_labels_static_table_payloads_t, value)



# API-s for table: mpls_termination_em0_table

NPL_MPLS_TERMINATION_EM0_TABLE_ACTION_WRITE = 0x0

class npl_mpls_termination_em0_table_key_t(basic_npl_struct):
    def __init__(self, termination_label=0):
        super().__init__(20)
        self.termination_label = termination_label

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_termination_em0_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_label(self):
        return self._get_field_value(0, 20)
    @termination_label.setter
    def termination_label(self, value):
        self._set_field_value('field termination_label', 0, 20, int, value)

class npl_mpls_termination_em0_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(49)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_termination_em0_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_termination_result(self):
        return npl_mpls_termination_res_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mpls_termination_result.setter
    def mpls_termination_result(self, value):
        self._set_field_value('field mpls_termination_result', 0, 49, npl_mpls_termination_res_t, value)

class npl_mpls_termination_em0_table_value_t(basic_npl_struct):
    def __init__(self, mpls_termination_result=0):
        super().__init__(57)
        self.payloads.mpls_termination_result = mpls_termination_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_termination_em0_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(49, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 49, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_termination_em0_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 49, npl_mpls_termination_em0_table_payloads_t, value)



# API-s for table: mpls_termination_em1_table

NPL_MPLS_TERMINATION_EM1_TABLE_ACTION_WRITE = 0x0

class npl_mpls_termination_em1_table_key_t(basic_npl_struct):
    def __init__(self, termination_label=0):
        super().__init__(20)
        self.termination_label = termination_label

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_termination_em1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_label(self):
        return self._get_field_value(0, 20)
    @termination_label.setter
    def termination_label(self, value):
        self._set_field_value('field termination_label', 0, 20, int, value)

class npl_mpls_termination_em1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(49)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_termination_em1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_termination_result(self):
        return npl_mpls_termination_res_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mpls_termination_result.setter
    def mpls_termination_result(self, value):
        self._set_field_value('field mpls_termination_result', 0, 49, npl_mpls_termination_res_t, value)

class npl_mpls_termination_em1_table_value_t(basic_npl_struct):
    def __init__(self, mpls_termination_result=0):
        super().__init__(57)
        self.payloads.mpls_termination_result = mpls_termination_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_termination_em1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(49, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 49, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_termination_em1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 49, npl_mpls_termination_em1_table_payloads_t, value)



# API-s for table: mpls_termination_em1_table_compound

NPL_MPLS_TERMINATION_EM1_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_mpls_termination_em1_table_compound_key_t(basic_npl_struct):
    def __init__(self, mpls_relay_local_vars_termination_label_label=0):
        super().__init__(28)
        self._set_field_value('const field', 0, 4, int, 0x1)
        self._set_field_value('const field', 4, 2, int, 0x0)
        self._set_field_value('const field', 6, 2, int, 0x1)
        self.mpls_relay_local_vars_termination_label_label = mpls_relay_local_vars_termination_label_label

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_termination_em1_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_4b0001_exact_0x1(self):
        return self._get_field_value(0, 4)
    @property
    def const2_2b00_exact_0x0(self):
        return self._get_field_value(4, 2)
    @property
    def const3_SM_LDB_MPLS_SUFFIX_exact_0x1(self):
        return self._get_field_value(6, 2)
    @property
    def mpls_relay_local_vars_termination_label_label(self):
        return self._get_field_value(8, 20)
    @mpls_relay_local_vars_termination_label_label.setter
    def mpls_relay_local_vars_termination_label_label(self, value):
        self._set_field_value('field mpls_relay_local_vars_termination_label_label', 8, 20, int, value)

class npl_mpls_termination_em1_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(49)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_termination_em1_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_termination_result(self):
        return npl_mpls_termination_res_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mpls_termination_result.setter
    def mpls_termination_result(self, value):
        self._set_field_value('field mpls_termination_result', 0, 49, npl_mpls_termination_res_t, value)

class npl_mpls_termination_em1_table_compound_value_t(basic_npl_struct):
    def __init__(self, mpls_termination_result=0):
        super().__init__(57)
        self.payloads.mpls_termination_result = mpls_termination_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_termination_em1_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(49, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 49, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_termination_em1_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 49, npl_mpls_termination_em1_table_compound_payloads_t, value)



# API-s for table: mpls_vpn_enabled_static_table

NPL_MPLS_VPN_ENABLED_STATIC_TABLE_ACTION_SET_VALUE = 0x0

class npl_mpls_vpn_enabled_static_table_set_value_payload_t(basic_npl_struct):
    def __init__(self, is_l2_vpn=0, vpn_enabled=0):
        super().__init__(2)
        self.is_l2_vpn = is_l2_vpn
        self.vpn_enabled = vpn_enabled

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_vpn_enabled_static_table_set_value_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def is_l2_vpn(self):
        return self._get_field_value(1, 1)
    @is_l2_vpn.setter
    def is_l2_vpn(self, value):
        self._set_field_value('field is_l2_vpn', 1, 1, int, value)
    @property
    def vpn_enabled(self):
        return self._get_field_value(0, 1)
    @vpn_enabled.setter
    def vpn_enabled(self, value):
        self._set_field_value('field vpn_enabled', 0, 1, int, value)




class npl_mpls_vpn_enabled_static_table_key_t(basic_npl_struct):
    def __init__(self, is_prefix_id=0, l3_relay_id=0, fwd_header_type=0, is_vpn=0):
        super().__init__(19)
        self.is_prefix_id = is_prefix_id
        self.l3_relay_id = l3_relay_id
        self.fwd_header_type = fwd_header_type
        self.is_vpn = is_vpn

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_vpn_enabled_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def is_prefix_id(self):
        return self._get_field_value(0, 3)
    @is_prefix_id.setter
    def is_prefix_id(self, value):
        self._set_field_value('field is_prefix_id', 0, 3, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 3)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 3, 11, npl_l3_relay_id_t, value)
    @property
    def fwd_header_type(self):
        return self._get_field_value(14, 4)
    @fwd_header_type.setter
    def fwd_header_type(self, value):
        self._set_field_value('field fwd_header_type', 14, 4, int, value)
    @property
    def is_vpn(self):
        return self._get_field_value(18, 1)
    @is_vpn.setter
    def is_vpn(self, value):
        self._set_field_value('field is_vpn', 18, 1, int, value)

class npl_mpls_vpn_enabled_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_vpn_enabled_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_value(self):
        return npl_mpls_vpn_enabled_static_table_set_value_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_value.setter
    def set_value(self, value):
        self._set_field_value('field set_value', 0, 2, npl_mpls_vpn_enabled_static_table_set_value_payload_t, value)

class npl_mpls_vpn_enabled_static_table_value_t(basic_npl_struct):
    def __init__(self, is_l2_vpn=0, vpn_enabled=0):
        super().__init__(10)
        self.payloads.set_value = npl_mpls_vpn_enabled_static_table_set_value_payload_t(is_l2_vpn, vpn_enabled)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_mpls_vpn_enabled_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_mpls_vpn_enabled_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_mpls_vpn_enabled_static_table_payloads_t, value)



# API-s for table: ms_voq_fabric_context_offset_table

NPL_MS_VOQ_FABRIC_CONTEXT_OFFSET_TABLE_ACTION_WRITE = 0x0

class npl_ms_voq_fabric_context_offset_table_key_t(basic_npl_struct):
    def __init__(self, calc_msvoq_num_input_fabric_context=0):
        super().__init__(2)
        self.calc_msvoq_num_input_fabric_context = calc_msvoq_num_input_fabric_context

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ms_voq_fabric_context_offset_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def calc_msvoq_num_input_fabric_context(self):
        return self._get_field_value(0, 2)
    @calc_msvoq_num_input_fabric_context.setter
    def calc_msvoq_num_input_fabric_context(self, value):
        self._set_field_value('field calc_msvoq_num_input_fabric_context', 0, 2, int, value)

class npl_ms_voq_fabric_context_offset_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ms_voq_fabric_context_offset_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ms_voq_fabric_context_offset_table_result(self):
        return npl_ms_voq_fabric_context_offset_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ms_voq_fabric_context_offset_table_result.setter
    def ms_voq_fabric_context_offset_table_result(self, value):
        self._set_field_value('field ms_voq_fabric_context_offset_table_result', 0, 16, npl_ms_voq_fabric_context_offset_table_result_t, value)

class npl_ms_voq_fabric_context_offset_table_value_t(basic_npl_struct):
    def __init__(self, ms_voq_fabric_context_offset_table_result=0):
        super().__init__(24)
        self.payloads.ms_voq_fabric_context_offset_table_result = ms_voq_fabric_context_offset_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ms_voq_fabric_context_offset_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_ms_voq_fabric_context_offset_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_ms_voq_fabric_context_offset_table_payloads_t, value)



# API-s for table: my_ipv4_table

NPL_MY_IPV4_TABLE_ACTION_WRITE = 0x0

class npl_my_ipv4_table_key_t(basic_npl_struct):
    def __init__(self, dip=0, l3_relay_id=0, l4_protocol_type_3_2=0):
        super().__init__(45)
        self.dip = dip
        self.l3_relay_id = l3_relay_id
        self.l4_protocol_type_3_2 = l4_protocol_type_3_2

    def _get_as_sub_field(data, offset_in_data):
        result = npl_my_ipv4_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dip(self):
        return self._get_field_value(0, 32)
    @dip.setter
    def dip(self, value):
        self._set_field_value('field dip', 0, 32, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 32)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 32, 11, npl_l3_relay_id_t, value)
    @property
    def l4_protocol_type_3_2(self):
        return self._get_field_value(43, 2)
    @l4_protocol_type_3_2.setter
    def l4_protocol_type_3_2(self, value):
        self._set_field_value('field l4_protocol_type_3_2', 43, 2, int, value)

class npl_my_ipv4_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(18)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_my_ipv4_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_tunnel_termination_attr(self):
        return npl_my_ipv4_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_tunnel_termination_attr.setter
    def ip_tunnel_termination_attr(self, value):
        self._set_field_value('field ip_tunnel_termination_attr', 0, 18, npl_my_ipv4_table_payload_t, value)

class npl_my_ipv4_table_value_t(basic_npl_struct):
    def __init__(self, ip_tunnel_termination_attr=0):
        super().__init__(26)
        self.payloads.ip_tunnel_termination_attr = ip_tunnel_termination_attr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_my_ipv4_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(18, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 18, 8, int, value)
    @property
    def payloads(self):
        return npl_my_ipv4_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 18, npl_my_ipv4_table_payloads_t, value)



# API-s for table: native_ce_ptr_table

NPL_NATIVE_CE_PTR_TABLE_ACTION_NARROW_ENTRY = 0x0
NPL_NATIVE_CE_PTR_TABLE_ACTION_PROTECTED_ENTRY = 0x1
NPL_NATIVE_CE_PTR_TABLE_ACTION_WIDE_ENTRY = 0x2

class npl_native_ce_ptr_table_narrow_entry_payload_t(basic_npl_struct):
    def __init__(self, entry=0):
        super().__init__(97)
        self.entry = entry

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_ce_ptr_table_narrow_entry_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def entry(self):
        return npl_native_ce_ptr_table_result_narrow_t._get_as_sub_field(self._data, self._offset_in_data + 73)
    @entry.setter
    def entry(self, value):
        self._set_field_value('field entry', 73, 24, npl_native_ce_ptr_table_result_narrow_t, value)




class npl_native_ce_ptr_table_protected_entry_payload_t(basic_npl_struct):
    def __init__(self, data=0):
        super().__init__(97)
        self.data = data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_ce_ptr_table_protected_entry_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def data(self):
        return npl_native_l2_lp_table_result_protected_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @data.setter
    def data(self, value):
        self._set_field_value('field data', 0, 97, npl_native_l2_lp_table_result_protected_t, value)




class npl_native_ce_ptr_table_wide_entry_payload_t(basic_npl_struct):
    def __init__(self, entry=0):
        super().__init__(97)
        self.entry = entry

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_ce_ptr_table_wide_entry_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def entry(self):
        return npl_native_ce_ptr_table_result_wide_t._get_as_sub_field(self._data, self._offset_in_data + 49)
    @entry.setter
    def entry(self, value):
        self._set_field_value('field entry', 49, 48, npl_native_ce_ptr_table_result_wide_t, value)




class npl_native_ce_ptr_table_key_t(basic_npl_struct):
    def __init__(self, ce_ptr=0):
        super().__init__(17)
        self.ce_ptr = ce_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_ce_ptr_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ce_ptr(self):
        return self._get_field_value(0, 17)
    @ce_ptr.setter
    def ce_ptr(self, value):
        self._set_field_value('field ce_ptr', 0, 17, int, value)

class npl_native_ce_ptr_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(97)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_ce_ptr_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def narrow_entry(self):
        return npl_native_ce_ptr_table_narrow_entry_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @narrow_entry.setter
    def narrow_entry(self, value):
        self._set_field_value('field narrow_entry', 0, 97, npl_native_ce_ptr_table_narrow_entry_payload_t, value)
    @property
    def protected_entry(self):
        return npl_native_ce_ptr_table_protected_entry_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @protected_entry.setter
    def protected_entry(self, value):
        self._set_field_value('field protected_entry', 0, 97, npl_native_ce_ptr_table_protected_entry_payload_t, value)
    @property
    def wide_entry(self):
        return npl_native_ce_ptr_table_wide_entry_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @wide_entry.setter
    def wide_entry(self, value):
        self._set_field_value('field wide_entry', 0, 97, npl_native_ce_ptr_table_wide_entry_payload_t, value)

class npl_native_ce_ptr_table_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(105)
        self.action = action
        if self.action == NPL_NATIVE_CE_PTR_TABLE_ACTION_NARROW_ENTRY:
            self.payloads.narrow_entry = npl_native_ce_ptr_table_narrow_entry_payload_t(*args, **kwargs)

        if self.action == NPL_NATIVE_CE_PTR_TABLE_ACTION_PROTECTED_ENTRY:
            self.payloads.protected_entry = npl_native_ce_ptr_table_protected_entry_payload_t(*args, **kwargs)

        if self.action == NPL_NATIVE_CE_PTR_TABLE_ACTION_WIDE_ENTRY:
            self.payloads.wide_entry = npl_native_ce_ptr_table_wide_entry_payload_t(*args, **kwargs)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_ce_ptr_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(97, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 97, 8, int, value)
    @property
    def payloads(self):
        return npl_native_ce_ptr_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 97, npl_native_ce_ptr_table_payloads_t, value)



# API-s for table: native_fec_table

NPL_NATIVE_FEC_TABLE_ACTION_WRITE = 0x0

class npl_native_fec_table_key_t(basic_npl_struct):
    def __init__(self, fec=0):
        super().__init__(12)
        self.fec = fec

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_fec_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fec(self):
        return npl_fec_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @fec.setter
    def fec(self, value):
        self._set_field_value('field fec', 0, 12, npl_fec_t, value)

class npl_native_fec_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(56)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_fec_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def native_fec_table_result(self):
        return npl_native_fec_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @native_fec_table_result.setter
    def native_fec_table_result(self, value):
        self._set_field_value('field native_fec_table_result', 0, 56, npl_native_fec_table_result_t, value)

class npl_native_fec_table_value_t(basic_npl_struct):
    def __init__(self, native_fec_table_result=0):
        super().__init__(64)
        self.payloads.native_fec_table_result = native_fec_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_fec_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(56, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 56, 8, int, value)
    @property
    def payloads(self):
        return npl_native_fec_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 56, npl_native_fec_table_payloads_t, value)



# API-s for table: native_fec_type_decoding_table

NPL_NATIVE_FEC_TYPE_DECODING_TABLE_ACTION_WRITE = 0x0

class npl_native_fec_type_decoding_table_key_t(basic_npl_struct):
    def __init__(self, type=0):
        super().__init__(4)
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_fec_type_decoding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def type(self):
        return self._get_field_value(0, 4)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 0, 4, int, value)

class npl_native_fec_type_decoding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(63)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_fec_type_decoding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def native_fec_type_decoding_table_result(self):
        return npl_resolution_type_decoding_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @native_fec_type_decoding_table_result.setter
    def native_fec_type_decoding_table_result(self, value):
        self._set_field_value('field native_fec_type_decoding_table_result', 0, 63, npl_resolution_type_decoding_table_result_t, value)

class npl_native_fec_type_decoding_table_value_t(basic_npl_struct):
    def __init__(self, native_fec_type_decoding_table_result=0):
        super().__init__(71)
        self.payloads.native_fec_type_decoding_table_result = native_fec_type_decoding_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_fec_type_decoding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(63, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 63, 8, int, value)
    @property
    def payloads(self):
        return npl_native_fec_type_decoding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 63, npl_native_fec_type_decoding_table_payloads_t, value)



# API-s for table: native_frr_table

NPL_NATIVE_FRR_TABLE_ACTION_PROTECTED_DATA = 0x0

class npl_native_frr_table_protected_data_payload_t(basic_npl_struct):
    def __init__(self, data=0):
        super().__init__(119)
        self.data = data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_frr_table_protected_data_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def data(self):
        return npl_native_frr_table_result_protected_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @data.setter
    def data(self, value):
        self._set_field_value('field data', 0, 119, npl_native_frr_table_result_protected_t, value)




class npl_native_frr_table_key_t(basic_npl_struct):
    def __init__(self, frr_id=0):
        super().__init__(8)
        self.frr_id = frr_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_frr_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def frr_id(self):
        return npl_frr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @frr_id.setter
    def frr_id(self, value):
        self._set_field_value('field frr_id', 0, 8, npl_frr_t, value)

class npl_native_frr_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(119)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_frr_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def protected_data(self):
        return npl_native_frr_table_protected_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @protected_data.setter
    def protected_data(self, value):
        self._set_field_value('field protected_data', 0, 119, npl_native_frr_table_protected_data_payload_t, value)

class npl_native_frr_table_value_t(basic_npl_struct):
    def __init__(self, data=0):
        super().__init__(127)
        self.payloads.protected_data = npl_native_frr_table_protected_data_payload_t(data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_frr_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(119, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 119, 8, int, value)
    @property
    def payloads(self):
        return npl_native_frr_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 119, npl_native_frr_table_payloads_t, value)



# API-s for table: native_frr_type_decoding_table

NPL_NATIVE_FRR_TYPE_DECODING_TABLE_ACTION_WRITE = 0x0

class npl_native_frr_type_decoding_table_key_t(basic_npl_struct):
    def __init__(self, type=0):
        super().__init__(4)
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_frr_type_decoding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def type(self):
        return self._get_field_value(0, 4)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 0, 4, int, value)

class npl_native_frr_type_decoding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(63)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_frr_type_decoding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def native_frr_type_decoding_table_result(self):
        return npl_resolution_type_decoding_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @native_frr_type_decoding_table_result.setter
    def native_frr_type_decoding_table_result(self, value):
        self._set_field_value('field native_frr_type_decoding_table_result', 0, 63, npl_resolution_type_decoding_table_result_t, value)

class npl_native_frr_type_decoding_table_value_t(basic_npl_struct):
    def __init__(self, native_frr_type_decoding_table_result=0):
        super().__init__(71)
        self.payloads.native_frr_type_decoding_table_result = native_frr_type_decoding_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_frr_type_decoding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(63, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 63, 8, int, value)
    @property
    def payloads(self):
        return npl_native_frr_type_decoding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 63, npl_native_frr_type_decoding_table_payloads_t, value)



# API-s for table: native_l2_lp_table

NPL_NATIVE_L2_LP_TABLE_ACTION_NARROW_ENTRY = 0x0
NPL_NATIVE_L2_LP_TABLE_ACTION_PROTECTED_ENTRY = 0x1
NPL_NATIVE_L2_LP_TABLE_ACTION_WIDE_ENTRY = 0x2

class npl_native_l2_lp_table_narrow_entry_payload_t(basic_npl_struct):
    def __init__(self, entry=0):
        super().__init__(97)
        self.entry = entry

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_l2_lp_table_narrow_entry_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def entry(self):
        return npl_native_l2_lp_table_result_narrow_t._get_as_sub_field(self._data, self._offset_in_data + 73)
    @entry.setter
    def entry(self, value):
        self._set_field_value('field entry', 73, 24, npl_native_l2_lp_table_result_narrow_t, value)




class npl_native_l2_lp_table_protected_entry_payload_t(basic_npl_struct):
    def __init__(self, data=0):
        super().__init__(97)
        self.data = data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_l2_lp_table_protected_entry_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def data(self):
        return npl_native_l2_lp_table_result_protected_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @data.setter
    def data(self, value):
        self._set_field_value('field data', 0, 97, npl_native_l2_lp_table_result_protected_t, value)




class npl_native_l2_lp_table_wide_entry_payload_t(basic_npl_struct):
    def __init__(self, entry=0):
        super().__init__(97)
        self.entry = entry

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_l2_lp_table_wide_entry_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def entry(self):
        return npl_native_l2_lp_table_result_wide_t._get_as_sub_field(self._data, self._offset_in_data + 49)
    @entry.setter
    def entry(self, value):
        self._set_field_value('field entry', 49, 48, npl_native_l2_lp_table_result_wide_t, value)




class npl_native_l2_lp_table_key_t(basic_npl_struct):
    def __init__(self, l2_dlp=0):
        super().__init__(18)
        self.l2_dlp = l2_dlp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_l2_lp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_dlp(self):
        return npl_l2_dlp_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l2_dlp.setter
    def l2_dlp(self, value):
        self._set_field_value('field l2_dlp', 0, 18, npl_l2_dlp_t, value)

class npl_native_l2_lp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(97)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_l2_lp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def narrow_entry(self):
        return npl_native_l2_lp_table_narrow_entry_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @narrow_entry.setter
    def narrow_entry(self, value):
        self._set_field_value('field narrow_entry', 0, 97, npl_native_l2_lp_table_narrow_entry_payload_t, value)
    @property
    def protected_entry(self):
        return npl_native_l2_lp_table_protected_entry_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @protected_entry.setter
    def protected_entry(self, value):
        self._set_field_value('field protected_entry', 0, 97, npl_native_l2_lp_table_protected_entry_payload_t, value)
    @property
    def wide_entry(self):
        return npl_native_l2_lp_table_wide_entry_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @wide_entry.setter
    def wide_entry(self, value):
        self._set_field_value('field wide_entry', 0, 97, npl_native_l2_lp_table_wide_entry_payload_t, value)

class npl_native_l2_lp_table_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(105)
        self.action = action
        if self.action == NPL_NATIVE_L2_LP_TABLE_ACTION_NARROW_ENTRY:
            self.payloads.narrow_entry = npl_native_l2_lp_table_narrow_entry_payload_t(*args, **kwargs)

        if self.action == NPL_NATIVE_L2_LP_TABLE_ACTION_PROTECTED_ENTRY:
            self.payloads.protected_entry = npl_native_l2_lp_table_protected_entry_payload_t(*args, **kwargs)

        if self.action == NPL_NATIVE_L2_LP_TABLE_ACTION_WIDE_ENTRY:
            self.payloads.wide_entry = npl_native_l2_lp_table_wide_entry_payload_t(*args, **kwargs)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_l2_lp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(97, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 97, 8, int, value)
    @property
    def payloads(self):
        return npl_native_l2_lp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 97, npl_native_l2_lp_table_payloads_t, value)



# API-s for table: native_l2_lp_type_decoding_table

NPL_NATIVE_L2_LP_TYPE_DECODING_TABLE_ACTION_WRITE = 0x0

class npl_native_l2_lp_type_decoding_table_key_t(basic_npl_struct):
    def __init__(self, type=0):
        super().__init__(4)
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_l2_lp_type_decoding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def type(self):
        return self._get_field_value(0, 4)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 0, 4, int, value)

class npl_native_l2_lp_type_decoding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(63)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_l2_lp_type_decoding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def native_l2_lp_type_decoding_table_result(self):
        return npl_resolution_type_decoding_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @native_l2_lp_type_decoding_table_result.setter
    def native_l2_lp_type_decoding_table_result(self, value):
        self._set_field_value('field native_l2_lp_type_decoding_table_result', 0, 63, npl_resolution_type_decoding_table_result_t, value)

class npl_native_l2_lp_type_decoding_table_value_t(basic_npl_struct):
    def __init__(self, native_l2_lp_type_decoding_table_result=0):
        super().__init__(71)
        self.payloads.native_l2_lp_type_decoding_table_result = native_l2_lp_type_decoding_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_l2_lp_type_decoding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(63, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 63, 8, int, value)
    @property
    def payloads(self):
        return npl_native_l2_lp_type_decoding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 63, npl_native_l2_lp_type_decoding_table_payloads_t, value)



# API-s for table: native_lb_group_size_table

NPL_NATIVE_LB_GROUP_SIZE_TABLE_ACTION_WRITE = 0x0

class npl_native_lb_group_size_table_key_t(basic_npl_struct):
    def __init__(self, ecmp_id=0):
        super().__init__(13)
        self.ecmp_id = ecmp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lb_group_size_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ecmp_id(self):
        return self._get_field_value(0, 13)
    @ecmp_id.setter
    def ecmp_id(self, value):
        self._set_field_value('field ecmp_id', 0, 13, int, value)

class npl_native_lb_group_size_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lb_group_size_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def native_lb_group_size_table_result(self):
        return npl_lb_group_size_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @native_lb_group_size_table_result.setter
    def native_lb_group_size_table_result(self, value):
        self._set_field_value('field native_lb_group_size_table_result', 0, 10, npl_lb_group_size_table_result_t, value)

class npl_native_lb_group_size_table_value_t(basic_npl_struct):
    def __init__(self, native_lb_group_size_table_result=0):
        super().__init__(18)
        self.payloads.native_lb_group_size_table_result = native_lb_group_size_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lb_group_size_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_native_lb_group_size_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_native_lb_group_size_table_payloads_t, value)



# API-s for table: native_lb_table

NPL_NATIVE_LB_TABLE_ACTION_WRITE = 0x0

class npl_native_lb_table_key_t(basic_npl_struct):
    def __init__(self, group_id=0, member_id=0):
        super().__init__(30)
        self.group_id = group_id
        self.member_id = member_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lb_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def group_id(self):
        return self._get_field_value(0, 14)
    @group_id.setter
    def group_id(self, value):
        self._set_field_value('field group_id', 0, 14, int, value)
    @property
    def member_id(self):
        return self._get_field_value(14, 16)
    @member_id.setter
    def member_id(self, value):
        self._set_field_value('field member_id', 14, 16, int, value)

class npl_native_lb_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(49)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lb_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def native_lb_result(self):
        return npl_native_lb_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @native_lb_result.setter
    def native_lb_result(self, value):
        self._set_field_value('field native_lb_result', 0, 49, npl_native_lb_table_result_t, value)

class npl_native_lb_table_value_t(basic_npl_struct):
    def __init__(self, native_lb_result=0):
        super().__init__(57)
        self.payloads.native_lb_result = native_lb_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lb_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(49, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 49, 8, int, value)
    @property
    def payloads(self):
        return npl_native_lb_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 49, npl_native_lb_table_payloads_t, value)



# API-s for table: native_lb_type_decoding_table

NPL_NATIVE_LB_TYPE_DECODING_TABLE_ACTION_WRITE = 0x0

class npl_native_lb_type_decoding_table_key_t(basic_npl_struct):
    def __init__(self, type=0):
        super().__init__(4)
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lb_type_decoding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def type(self):
        return self._get_field_value(0, 4)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 0, 4, int, value)

class npl_native_lb_type_decoding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(63)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lb_type_decoding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def native_lb_type_decoding_table_result(self):
        return npl_resolution_type_decoding_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @native_lb_type_decoding_table_result.setter
    def native_lb_type_decoding_table_result(self, value):
        self._set_field_value('field native_lb_type_decoding_table_result', 0, 63, npl_resolution_type_decoding_table_result_t, value)

class npl_native_lb_type_decoding_table_value_t(basic_npl_struct):
    def __init__(self, native_lb_type_decoding_table_result=0):
        super().__init__(71)
        self.payloads.native_lb_type_decoding_table_result = native_lb_type_decoding_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lb_type_decoding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(63, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 63, 8, int, value)
    @property
    def payloads(self):
        return npl_native_lb_type_decoding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 63, npl_native_lb_type_decoding_table_payloads_t, value)



# API-s for table: native_lp_is_pbts_prefix_table

NPL_NATIVE_LP_IS_PBTS_PREFIX_TABLE_ACTION_WRITE = 0x0

class npl_native_lp_is_pbts_prefix_table_key_t(basic_npl_struct):
    def __init__(self, prefix=0):
        super().__init__(5)
        self.prefix = prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lp_is_pbts_prefix_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def prefix(self):
        return self._get_field_value(0, 5)
    @prefix.setter
    def prefix(self, value):
        self._set_field_value('field prefix', 0, 5, int, value)

class npl_native_lp_is_pbts_prefix_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lp_is_pbts_prefix_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def native_lp_is_pbts_prefix_table_result(self):
        return npl_is_pbts_prefix_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @native_lp_is_pbts_prefix_table_result.setter
    def native_lp_is_pbts_prefix_table_result(self, value):
        self._set_field_value('field native_lp_is_pbts_prefix_table_result', 0, 1, npl_is_pbts_prefix_t, value)

class npl_native_lp_is_pbts_prefix_table_value_t(basic_npl_struct):
    def __init__(self, native_lp_is_pbts_prefix_table_result=0):
        super().__init__(9)
        self.payloads.native_lp_is_pbts_prefix_table_result = native_lp_is_pbts_prefix_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lp_is_pbts_prefix_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_native_lp_is_pbts_prefix_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_native_lp_is_pbts_prefix_table_payloads_t, value)



# API-s for table: native_lp_pbts_map_table

NPL_NATIVE_LP_PBTS_MAP_TABLE_ACTION_WRITE = 0x0

class npl_native_lp_pbts_map_table_key_t(basic_npl_struct):
    def __init__(self, pbts_map_key=0):
        super().__init__(5)
        self.pbts_map_key = pbts_map_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lp_pbts_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pbts_map_key(self):
        return npl_pbts_map_table_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pbts_map_key.setter
    def pbts_map_key(self, value):
        self._set_field_value('field pbts_map_key', 0, 5, npl_pbts_map_table_key_t, value)

class npl_native_lp_pbts_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lp_pbts_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def native_lp_pbts_map_table_result(self):
        return npl_pbts_map_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @native_lp_pbts_map_table_result.setter
    def native_lp_pbts_map_table_result(self, value):
        self._set_field_value('field native_lp_pbts_map_table_result', 0, 8, npl_pbts_map_table_result_t, value)

class npl_native_lp_pbts_map_table_value_t(basic_npl_struct):
    def __init__(self, native_lp_pbts_map_table_result=0):
        super().__init__(16)
        self.payloads.native_lp_pbts_map_table_result = native_lp_pbts_map_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_lp_pbts_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_native_lp_pbts_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_native_lp_pbts_map_table_payloads_t, value)



# API-s for table: native_protection_table

NPL_NATIVE_PROTECTION_TABLE_ACTION_WRITE = 0x0

class npl_native_protection_table_key_t(basic_npl_struct):
    def __init__(self, id=0):
        super().__init__(13)
        self.id = id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_protection_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def id(self):
        return npl_native_protection_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @id.setter
    def id(self, value):
        self._set_field_value('field id', 0, 13, npl_native_protection_id_t, value)

class npl_native_protection_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_protection_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def native_protection_table_result(self):
        return npl_protection_selector_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @native_protection_table_result.setter
    def native_protection_table_result(self, value):
        self._set_field_value('field native_protection_table_result', 0, 1, npl_protection_selector_t, value)

class npl_native_protection_table_value_t(basic_npl_struct):
    def __init__(self, native_protection_table_result=0):
        super().__init__(9)
        self.payloads.native_protection_table_result = native_protection_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_native_protection_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_native_protection_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_native_protection_table_payloads_t, value)



# API-s for table: next_header_1_is_l4_over_ipv4_static_table

NPL_NEXT_HEADER_1_IS_L4_OVER_IPV4_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_next_header_1_is_l4_over_ipv4_static_table_key_t(basic_npl_struct):
    def __init__(self, fragmented=0, is_l4=0):
        super().__init__(2)
        self.fragmented = fragmented
        self.is_l4 = is_l4

    def _get_as_sub_field(data, offset_in_data):
        result = npl_next_header_1_is_l4_over_ipv4_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fragmented(self):
        return self._get_field_value(0, 1)
    @fragmented.setter
    def fragmented(self, value):
        self._set_field_value('field fragmented', 0, 1, int, value)
    @property
    def is_l4(self):
        return self._get_field_value(1, 1)
    @is_l4.setter
    def is_l4(self, value):
        self._set_field_value('field is_l4', 1, 1, int, value)

class npl_next_header_1_is_l4_over_ipv4_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_next_header_1_is_l4_over_ipv4_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def next_header_1_is_l4_over_ipv4(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @next_header_1_is_l4_over_ipv4.setter
    def next_header_1_is_l4_over_ipv4(self, value):
        self._set_field_value('field next_header_1_is_l4_over_ipv4', 0, 1, npl_bool_t, value)

class npl_next_header_1_is_l4_over_ipv4_static_table_value_t(basic_npl_struct):
    def __init__(self, next_header_1_is_l4_over_ipv4=0):
        super().__init__(9)
        self.payloads.next_header_1_is_l4_over_ipv4 = next_header_1_is_l4_over_ipv4

    def _get_as_sub_field(data, offset_in_data):
        result = npl_next_header_1_is_l4_over_ipv4_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_next_header_1_is_l4_over_ipv4_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_next_header_1_is_l4_over_ipv4_static_table_payloads_t, value)



# API-s for table: nh_compound_table

NPL_NH_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_nh_compound_table_key_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_ptr=0):
        super().__init__(12)
        self.l3_tx_local_vars_nh_ptr = l3_tx_local_vars_nh_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nh_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_tx_local_vars_nh_ptr(self):
        return self._get_field_value(0, 12)
    @l3_tx_local_vars_nh_ptr.setter
    def l3_tx_local_vars_nh_ptr(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_ptr', 0, 12, int, value)

class npl_nh_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nh_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_tx_local_vars_nh_encap_da(self):
        return self._get_field_value(0, 48)
    @l3_tx_local_vars_nh_encap_da.setter
    def l3_tx_local_vars_nh_encap_da(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_encap_da', 0, 48, int, value)

class npl_nh_compound_table_value_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_encap_da=0):
        super().__init__(56)
        self.payloads.l3_tx_local_vars_nh_encap_da = l3_tx_local_vars_nh_encap_da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nh_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_nh_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_nh_compound_table_payloads_t, value)



# API-s for table: nh_macro_code_to_id_l6_static_table

NPL_NH_MACRO_CODE_TO_ID_L6_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_nh_macro_code_to_id_l6_static_table_key_t(basic_npl_struct):
    def __init__(self, l3_dlp_attributes_nh_ene_macro_code=0):
        super().__init__(2)
        self.l3_dlp_attributes_nh_ene_macro_code = l3_dlp_attributes_nh_ene_macro_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nh_macro_code_to_id_l6_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_dlp_attributes_nh_ene_macro_code(self):
        return self._get_field_value(0, 2)
    @l3_dlp_attributes_nh_ene_macro_code.setter
    def l3_dlp_attributes_nh_ene_macro_code(self, value):
        self._set_field_value('field l3_dlp_attributes_nh_ene_macro_code', 0, 2, int, value)

class npl_nh_macro_code_to_id_l6_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nh_macro_code_to_id_l6_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_tx_local_vars_nh_encap_ene_macro_id(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l3_tx_local_vars_nh_encap_ene_macro_id.setter
    def l3_tx_local_vars_nh_encap_ene_macro_id(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_encap_ene_macro_id', 0, 8, npl_ene_macro_id_t, value)

class npl_nh_macro_code_to_id_l6_static_table_value_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_encap_ene_macro_id=0):
        super().__init__(16)
        self.payloads.l3_tx_local_vars_nh_encap_ene_macro_id = l3_tx_local_vars_nh_encap_ene_macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nh_macro_code_to_id_l6_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_nh_macro_code_to_id_l6_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_nh_macro_code_to_id_l6_static_table_payloads_t, value)



# API-s for table: nhlfe_type_mapping_static_table

NPL_NHLFE_TYPE_MAPPING_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_nhlfe_type_mapping_static_table_key_t(basic_npl_struct):
    def __init__(self, mpls_relay_local_vars_nhlfe_type=0):
        super().__init__(4)
        self.mpls_relay_local_vars_nhlfe_type = mpls_relay_local_vars_nhlfe_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nhlfe_type_mapping_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_relay_local_vars_nhlfe_type(self):
        return self._get_field_value(0, 4)
    @mpls_relay_local_vars_nhlfe_type.setter
    def mpls_relay_local_vars_nhlfe_type(self, value):
        self._set_field_value('field mpls_relay_local_vars_nhlfe_type', 0, 4, int, value)

class npl_nhlfe_type_mapping_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nhlfe_type_mapping_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_relay_local_vars_nhlfe_attributes(self):
        return npl_nhlfe_type_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mpls_relay_local_vars_nhlfe_attributes.setter
    def mpls_relay_local_vars_nhlfe_attributes(self, value):
        self._set_field_value('field mpls_relay_local_vars_nhlfe_attributes', 0, 24, npl_nhlfe_type_attributes_t, value)

class npl_nhlfe_type_mapping_static_table_value_t(basic_npl_struct):
    def __init__(self, mpls_relay_local_vars_nhlfe_attributes=0):
        super().__init__(32)
        self.payloads.mpls_relay_local_vars_nhlfe_attributes = mpls_relay_local_vars_nhlfe_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nhlfe_type_mapping_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_nhlfe_type_mapping_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_nhlfe_type_mapping_static_table_payloads_t, value)



# API-s for table: null_rtf_next_macro_static_table

NPL_NULL_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO = 0x0

class npl_null_rtf_next_macro_static_table_set_macro_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_null_rtf_next_macro_static_table_set_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_null_rtf_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, acl_outer=0, pd_tunnel_ipv4_ipv6_init_rtf_stage=0, next_prot_type=0):
        super().__init__(10)
        self.acl_outer = acl_outer
        self.pd_tunnel_ipv4_ipv6_init_rtf_stage = pd_tunnel_ipv4_ipv6_init_rtf_stage
        self.next_prot_type = next_prot_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_null_rtf_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def acl_outer(self):
        return self._get_field_value(0, 1)
    @acl_outer.setter
    def acl_outer(self, value):
        self._set_field_value('field acl_outer', 0, 1, int, value)
    @property
    def pd_tunnel_ipv4_ipv6_init_rtf_stage(self):
        return npl_ipv4_ipv6_init_rtf_stage_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @pd_tunnel_ipv4_ipv6_init_rtf_stage.setter
    def pd_tunnel_ipv4_ipv6_init_rtf_stage(self, value):
        self._set_field_value('field pd_tunnel_ipv4_ipv6_init_rtf_stage', 1, 4, npl_ipv4_ipv6_init_rtf_stage_t, value)
    @property
    def next_prot_type(self):
        return self._get_field_value(5, 5)
    @next_prot_type.setter
    def next_prot_type(self, value):
        self._set_field_value('field next_prot_type', 5, 5, int, value)

class npl_null_rtf_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_null_rtf_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_macro(self):
        return npl_null_rtf_next_macro_static_table_set_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_macro.setter
    def set_macro(self, value):
        self._set_field_value('field set_macro', 0, 10, npl_null_rtf_next_macro_static_table_set_macro_payload_t, value)

class npl_null_rtf_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.set_macro = npl_null_rtf_next_macro_static_table_set_macro_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_null_rtf_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_null_rtf_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_null_rtf_next_macro_static_table_payloads_t, value)



# API-s for table: nw_smcid_threshold_table

NPL_NW_SMCID_THRESHOLD_TABLE_ACTION_WRITE = 0x0

class npl_nw_smcid_threshold_table_key_t(basic_npl_struct):
    def __init__(self, dummy=0):
        super().__init__(1)
        self.dummy = dummy

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nw_smcid_threshold_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dummy(self):
        return self._get_field_value(0, 1)
    @dummy.setter
    def dummy(self, value):
        self._set_field_value('field dummy', 0, 1, int, value)

class npl_nw_smcid_threshold_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nw_smcid_threshold_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def smcid_threshold(self):
        return npl_mcid_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @smcid_threshold.setter
    def smcid_threshold(self, value):
        self._set_field_value('field smcid_threshold', 0, 16, npl_mcid_t, value)

class npl_nw_smcid_threshold_table_value_t(basic_npl_struct):
    def __init__(self, smcid_threshold=0):
        super().__init__(24)
        self.payloads.smcid_threshold = smcid_threshold

    def _get_as_sub_field(data, offset_in_data):
        result = npl_nw_smcid_threshold_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_nw_smcid_threshold_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_nw_smcid_threshold_table_payloads_t, value)



# API-s for table: oamp_drop_destination_static_table

NPL_OAMP_DROP_DESTINATION_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_oamp_drop_destination_static_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x1)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_drop_destination_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)

class npl_oamp_drop_destination_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_drop_destination_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def drop_dest(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @drop_dest.setter
    def drop_dest(self, value):
        self._set_field_value('field drop_dest', 0, 20, npl_destination_t, value)

class npl_oamp_drop_destination_static_table_value_t(basic_npl_struct):
    def __init__(self, drop_dest=0):
        super().__init__(28)
        self.payloads.drop_dest = drop_dest

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_drop_destination_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_oamp_drop_destination_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_oamp_drop_destination_static_table_payloads_t, value)



# API-s for table: oamp_event_queue_compound_table

NPL_OAMP_EVENT_QUEUE_COMPOUND_TABLE_ACTION_NO_OP = 0x0

class npl_oamp_event_queue_compound_table_key_t(basic_npl_struct):
    def __init__(self, eth_oam_local_vars_oamp_event=0, pd_pd_npu_host_receive_fields_eth_oam_mep_id=0, pd_pd_npu_host_receive_fields_eth_oam_rmep_id=0):
        super().__init__(35)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self.eth_oam_local_vars_oamp_event = eth_oam_local_vars_oamp_event
        self.pd_pd_npu_host_receive_fields_eth_oam_mep_id = pd_pd_npu_host_receive_fields_eth_oam_mep_id
        self.pd_pd_npu_host_receive_fields_eth_oam_rmep_id = pd_pd_npu_host_receive_fields_eth_oam_rmep_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_event_queue_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def eth_oam_local_vars_oamp_event(self):
        return self._get_field_value(1, 8)
    @eth_oam_local_vars_oamp_event.setter
    def eth_oam_local_vars_oamp_event(self, value):
        self._set_field_value('field eth_oam_local_vars_oamp_event', 1, 8, int, value)
    @property
    def pd_pd_npu_host_receive_fields_eth_oam_mep_id(self):
        return self._get_field_value(9, 13)
    @pd_pd_npu_host_receive_fields_eth_oam_mep_id.setter
    def pd_pd_npu_host_receive_fields_eth_oam_mep_id(self, value):
        self._set_field_value('field pd_pd_npu_host_receive_fields_eth_oam_mep_id', 9, 13, int, value)
    @property
    def pd_pd_npu_host_receive_fields_eth_oam_rmep_id(self):
        return self._get_field_value(22, 13)
    @pd_pd_npu_host_receive_fields_eth_oam_rmep_id.setter
    def pd_pd_npu_host_receive_fields_eth_oam_rmep_id(self, value):
        self._set_field_value('field pd_pd_npu_host_receive_fields_eth_oam_rmep_id', 22, 13, int, value)

class npl_oamp_event_queue_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_event_queue_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_oamp_event_queue_compound_table_value_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(8)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_event_queue_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_oamp_event_queue_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_oamp_event_queue_compound_table_payloads_t, value)



# API-s for table: oamp_event_queue_table

NPL_OAMP_EVENT_QUEUE_TABLE_ACTION_NO_OP = 0x0

class npl_oamp_event_queue_table_key_t(basic_npl_struct):
    def __init__(self, oamp_event=0, mep_id=0, rmep_id=0):
        super().__init__(34)
        self.oamp_event = oamp_event
        self.mep_id = mep_id
        self.rmep_id = rmep_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_event_queue_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def oamp_event(self):
        return self._get_field_value(0, 8)
    @oamp_event.setter
    def oamp_event(self, value):
        self._set_field_value('field oamp_event', 0, 8, int, value)
    @property
    def mep_id(self):
        return self._get_field_value(8, 13)
    @mep_id.setter
    def mep_id(self, value):
        self._set_field_value('field mep_id', 8, 13, int, value)
    @property
    def rmep_id(self):
        return self._get_field_value(21, 13)
    @rmep_id.setter
    def rmep_id(self, value):
        self._set_field_value('field rmep_id', 21, 13, int, value)

class npl_oamp_event_queue_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_event_queue_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_oamp_event_queue_table_value_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(8)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_event_queue_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_oamp_event_queue_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_oamp_event_queue_table_payloads_t, value)



# API-s for table: oamp_redirect_get_counter_table

NPL_OAMP_REDIRECT_GET_COUNTER_TABLE_ACTION_WRITE = 0x0

class npl_oamp_redirect_get_counter_table_key_t(basic_npl_struct):
    def __init__(self, redirect_code=0):
        super().__init__(8)
        self.redirect_code = redirect_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_get_counter_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def redirect_code(self):
        return self._get_field_value(0, 8)
    @redirect_code.setter
    def redirect_code(self, value):
        self._set_field_value('field redirect_code', 0, 8, int, value)

class npl_oamp_redirect_get_counter_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_get_counter_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def counter_ptr(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter_ptr.setter
    def counter_ptr(self, value):
        self._set_field_value('field counter_ptr', 0, 20, npl_counter_ptr_t, value)

class npl_oamp_redirect_get_counter_table_value_t(basic_npl_struct):
    def __init__(self, counter_ptr=0):
        super().__init__(28)
        self.payloads.counter_ptr = counter_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_get_counter_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_oamp_redirect_get_counter_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_oamp_redirect_get_counter_table_payloads_t, value)



# API-s for table: oamp_redirect_punt_eth_hdr_1_table

NPL_OAMP_REDIRECT_PUNT_ETH_HDR_1_TABLE_ACTION_SET_INJECT_ETH = 0x0

class npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t(basic_npl_struct):
    def __init__(self, da=0):
        super().__init__(32)
        self.da = da

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def da(self):
        return self._get_field_value(0, 32)
    @da.setter
    def da(self, value):
        self._set_field_value('field da', 0, 32, int, value)




class npl_oamp_redirect_punt_eth_hdr_1_table_key_t(basic_npl_struct):
    def __init__(self, encap_selector=0):
        super().__init__(2)
        self.encap_selector = encap_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_1_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def encap_selector(self):
        return self._get_field_value(0, 2)
    @encap_selector.setter
    def encap_selector(self, value):
        self._set_field_value('field encap_selector', 0, 2, int, value)

class npl_oamp_redirect_punt_eth_hdr_1_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_1_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_inject_eth(self):
        return npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_inject_eth.setter
    def set_inject_eth(self, value):
        self._set_field_value('field set_inject_eth', 0, 32, npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t, value)

class npl_oamp_redirect_punt_eth_hdr_1_table_value_t(basic_npl_struct):
    def __init__(self, da=0):
        super().__init__(40)
        self.payloads.set_inject_eth = npl_oamp_redirect_punt_eth_hdr_1_table_set_inject_eth_payload_t(da)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_1_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_oamp_redirect_punt_eth_hdr_1_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_oamp_redirect_punt_eth_hdr_1_table_payloads_t, value)



# API-s for table: oamp_redirect_punt_eth_hdr_2_table

NPL_OAMP_REDIRECT_PUNT_ETH_HDR_2_TABLE_ACTION_SET_INJECT_ETH = 0x0

class npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t(basic_npl_struct):
    def __init__(self, da=0, sa=0):
        super().__init__(32)
        self.da = da
        self.sa = sa

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def da(self):
        return self._get_field_value(16, 16)
    @da.setter
    def da(self, value):
        self._set_field_value('field da', 16, 16, int, value)
    @property
    def sa(self):
        return self._get_field_value(0, 16)
    @sa.setter
    def sa(self, value):
        self._set_field_value('field sa', 0, 16, int, value)




class npl_oamp_redirect_punt_eth_hdr_2_table_key_t(basic_npl_struct):
    def __init__(self, encap_selector=0):
        super().__init__(2)
        self.encap_selector = encap_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_2_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def encap_selector(self):
        return self._get_field_value(0, 2)
    @encap_selector.setter
    def encap_selector(self, value):
        self._set_field_value('field encap_selector', 0, 2, int, value)

class npl_oamp_redirect_punt_eth_hdr_2_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_2_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_inject_eth(self):
        return npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_inject_eth.setter
    def set_inject_eth(self, value):
        self._set_field_value('field set_inject_eth', 0, 32, npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t, value)

class npl_oamp_redirect_punt_eth_hdr_2_table_value_t(basic_npl_struct):
    def __init__(self, da=0, sa=0):
        super().__init__(40)
        self.payloads.set_inject_eth = npl_oamp_redirect_punt_eth_hdr_2_table_set_inject_eth_payload_t(da, sa)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_2_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_oamp_redirect_punt_eth_hdr_2_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_oamp_redirect_punt_eth_hdr_2_table_payloads_t, value)



# API-s for table: oamp_redirect_punt_eth_hdr_3_table

NPL_OAMP_REDIRECT_PUNT_ETH_HDR_3_TABLE_ACTION_SET_INJECT_ETH = 0x0

class npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t(basic_npl_struct):
    def __init__(self, sa=0):
        super().__init__(32)
        self.sa = sa

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def sa(self):
        return self._get_field_value(0, 32)
    @sa.setter
    def sa(self, value):
        self._set_field_value('field sa', 0, 32, int, value)




class npl_oamp_redirect_punt_eth_hdr_3_table_key_t(basic_npl_struct):
    def __init__(self, encap_selector=0):
        super().__init__(2)
        self.encap_selector = encap_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_3_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def encap_selector(self):
        return self._get_field_value(0, 2)
    @encap_selector.setter
    def encap_selector(self, value):
        self._set_field_value('field encap_selector', 0, 2, int, value)

class npl_oamp_redirect_punt_eth_hdr_3_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_3_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_inject_eth(self):
        return npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_inject_eth.setter
    def set_inject_eth(self, value):
        self._set_field_value('field set_inject_eth', 0, 32, npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t, value)

class npl_oamp_redirect_punt_eth_hdr_3_table_value_t(basic_npl_struct):
    def __init__(self, sa=0):
        super().__init__(40)
        self.payloads.set_inject_eth = npl_oamp_redirect_punt_eth_hdr_3_table_set_inject_eth_payload_t(sa)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_3_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_oamp_redirect_punt_eth_hdr_3_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_oamp_redirect_punt_eth_hdr_3_table_payloads_t, value)



# API-s for table: oamp_redirect_punt_eth_hdr_4_table

NPL_OAMP_REDIRECT_PUNT_ETH_HDR_4_TABLE_ACTION_SET_INJECT_ETH = 0x0

class npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t(basic_npl_struct):
    def __init__(self, dei_vid=0):
        super().__init__(16)
        self.dei_vid = dei_vid

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def dei_vid(self):
        return self._get_field_value(0, 16)
    @dei_vid.setter
    def dei_vid(self, value):
        self._set_field_value('field dei_vid', 0, 16, int, value)




class npl_oamp_redirect_punt_eth_hdr_4_table_key_t(basic_npl_struct):
    def __init__(self, encap_selector=0):
        super().__init__(2)
        self.encap_selector = encap_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_4_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def encap_selector(self):
        return self._get_field_value(0, 2)
    @encap_selector.setter
    def encap_selector(self, value):
        self._set_field_value('field encap_selector', 0, 2, int, value)

class npl_oamp_redirect_punt_eth_hdr_4_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_4_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_inject_eth(self):
        return npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_inject_eth.setter
    def set_inject_eth(self, value):
        self._set_field_value('field set_inject_eth', 0, 16, npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t, value)

class npl_oamp_redirect_punt_eth_hdr_4_table_value_t(basic_npl_struct):
    def __init__(self, dei_vid=0):
        super().__init__(24)
        self.payloads.set_inject_eth = npl_oamp_redirect_punt_eth_hdr_4_table_set_inject_eth_payload_t(dei_vid)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_punt_eth_hdr_4_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_oamp_redirect_punt_eth_hdr_4_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_oamp_redirect_punt_eth_hdr_4_table_payloads_t, value)



# API-s for table: oamp_redirect_table

NPL_OAMP_REDIRECT_TABLE_ACTION_OAMP_REDIRECT_ACTION = 0x0

class npl_oamp_redirect_table_oamp_redirect_action_payload_t(basic_npl_struct):
    def __init__(self, destination=0, phb=0, encap_ptr=0, keep_counter=0, drop=0, type=0, ifg=0):
        super().__init__(41)
        self.destination = destination
        self.phb = phb
        self.encap_ptr = encap_ptr
        self.keep_counter = keep_counter
        self.drop = drop
        self.type = type
        self.ifg = ifg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_table_oamp_redirect_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def destination(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 21)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 21, 20, npl_destination_t, value)
    @property
    def phb(self):
        return npl_phb_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @phb.setter
    def phb(self, value):
        self._set_field_value('field phb', 16, 5, npl_phb_t, value)
    @property
    def encap_ptr(self):
        return self._get_field_value(14, 2)
    @encap_ptr.setter
    def encap_ptr(self, value):
        self._set_field_value('field encap_ptr', 14, 2, int, value)
    @property
    def keep_counter(self):
        return self._get_field_value(13, 1)
    @keep_counter.setter
    def keep_counter(self, value):
        self._set_field_value('field keep_counter', 13, 1, int, value)
    @property
    def drop(self):
        return self._get_field_value(12, 1)
    @drop.setter
    def drop(self, value):
        self._set_field_value('field drop', 12, 1, int, value)
    @property
    def type(self):
        return self._get_field_value(4, 8)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 4, 8, int, value)
    @property
    def ifg(self):
        return self._get_field_value(0, 4)
    @ifg.setter
    def ifg(self, value):
        self._set_field_value('field ifg', 0, 4, int, value)




class npl_oamp_redirect_table_key_t(basic_npl_struct):
    def __init__(self, redirect_code=0):
        super().__init__(8)
        self.redirect_code = redirect_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def redirect_code(self):
        return self._get_field_value(0, 8)
    @redirect_code.setter
    def redirect_code(self, value):
        self._set_field_value('field redirect_code', 0, 8, int, value)

class npl_oamp_redirect_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(41)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def oamp_redirect_action(self):
        return npl_oamp_redirect_table_oamp_redirect_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @oamp_redirect_action.setter
    def oamp_redirect_action(self, value):
        self._set_field_value('field oamp_redirect_action', 0, 41, npl_oamp_redirect_table_oamp_redirect_action_payload_t, value)

class npl_oamp_redirect_table_value_t(basic_npl_struct):
    def __init__(self, destination=0, phb=0, encap_ptr=0, keep_counter=0, drop=0, type=0, ifg=0):
        super().__init__(49)
        self.payloads.oamp_redirect_action = npl_oamp_redirect_table_oamp_redirect_action_payload_t(destination, phb, encap_ptr, keep_counter, drop, type, ifg)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_oamp_redirect_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(41, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 41, 8, int, value)
    @property
    def payloads(self):
        return npl_oamp_redirect_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 41, npl_oamp_redirect_table_payloads_t, value)



# API-s for table: obm_next_macro_static_table

NPL_OBM_NEXT_MACRO_STATIC_TABLE_ACTION_UPDATE_NEXT_MACRO_ACTION = 0x0

class npl_obm_next_macro_static_table_update_next_macro_action_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_obm_next_macro_static_table_update_next_macro_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_obm_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, has_punt_header=0, rcy_data_suffix=0):
        super().__init__(10)
        self.has_punt_header = has_punt_header
        self.rcy_data_suffix = rcy_data_suffix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_obm_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def has_punt_header(self):
        return self._get_field_value(0, 5)
    @has_punt_header.setter
    def has_punt_header(self, value):
        self._set_field_value('field has_punt_header', 0, 5, int, value)
    @property
    def rcy_data_suffix(self):
        return self._get_field_value(5, 5)
    @rcy_data_suffix.setter
    def rcy_data_suffix(self, value):
        self._set_field_value('field rcy_data_suffix', 5, 5, int, value)

class npl_obm_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_obm_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_next_macro_action(self):
        return npl_obm_next_macro_static_table_update_next_macro_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_next_macro_action.setter
    def update_next_macro_action(self, value):
        self._set_field_value('field update_next_macro_action', 0, 10, npl_obm_next_macro_static_table_update_next_macro_action_payload_t, value)

class npl_obm_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.update_next_macro_action = npl_obm_next_macro_static_table_update_next_macro_action_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_obm_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_obm_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_obm_next_macro_static_table_payloads_t, value)



# API-s for table: obm_to_inject_local_vars_pack_table

NPL_OBM_TO_INJECT_LOCAL_VARS_PACK_TABLE_ACTION_WRITE = 0x0

class npl_obm_to_inject_local_vars_pack_table_key_t(basic_npl_struct):
    def __init__(self, packet_header_2__packet_data_punt_header_slp_18_0_=0):
        super().__init__(28)
        self._set_field_value('const field', 19, 1, int, 0x1)
        self._set_field_value('const field', 20, 8, int, 0xce)
        self.packet_header_2__packet_data_punt_header_slp_18_0_ = packet_header_2__packet_data_punt_header_slp_18_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_obm_to_inject_local_vars_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_header_2__packet_data_punt_header_slp_18_0_(self):
        return self._get_field_value(0, 19)
    @packet_header_2__packet_data_punt_header_slp_18_0_.setter
    def packet_header_2__packet_data_punt_header_slp_18_0_(self, value):
        self._set_field_value('field packet_header_2__packet_data_punt_header_slp_18_0_', 0, 19, int, value)
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(19, 1)
    @property
    def const2_REDIRECT_CODE_LPM_MC_LPTS_exact_0xce(self):
        return self._get_field_value(20, 8)

class npl_obm_to_inject_local_vars_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_obm_to_inject_local_vars_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def obm_to_inject_local_vars_packed_vars(self):
        return npl_obm_to_inject_packed_vars_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @obm_to_inject_local_vars_packed_vars.setter
    def obm_to_inject_local_vars_packed_vars(self, value):
        self._set_field_value('field obm_to_inject_local_vars_packed_vars', 0, 28, npl_obm_to_inject_packed_vars_t, value)

class npl_obm_to_inject_local_vars_pack_table_value_t(basic_npl_struct):
    def __init__(self, obm_to_inject_local_vars_packed_vars=0):
        super().__init__(36)
        self.payloads.obm_to_inject_local_vars_packed_vars = obm_to_inject_local_vars_packed_vars

    def _get_as_sub_field(data, offset_in_data):
        result = npl_obm_to_inject_local_vars_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(28, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 28, 8, int, value)
    @property
    def payloads(self):
        return npl_obm_to_inject_local_vars_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 28, npl_obm_to_inject_local_vars_pack_table_payloads_t, value)



# API-s for table: og_next_macro_static_table

NPL_OG_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO = 0x0

class npl_og_next_macro_static_table_set_macro_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_next_macro_static_table_set_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_og_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, ip_version=0):
        super().__init__(1)
        self.ip_version = ip_version

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_version(self):
        return self._get_field_value(0, 1)
    @ip_version.setter
    def ip_version(self, value):
        self._set_field_value('field ip_version', 0, 1, int, value)

class npl_og_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_macro(self):
        return npl_og_next_macro_static_table_set_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_macro.setter
    def set_macro(self, value):
        self._set_field_value('field set_macro', 0, 10, npl_og_next_macro_static_table_set_macro_payload_t, value)

class npl_og_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.set_macro = npl_og_next_macro_static_table_set_macro_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_og_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_og_next_macro_static_table_payloads_t, value)



# API-s for table: og_pcl_dip_em_lpm_compound_table

NPL_OG_PCL_DIP_EM_LPM_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_og_pcl_dip_em_lpm_compound_table_key_option_ip_version_ipv4_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_dip_19_0__0=0, packet_ipv4_header_dip_31_20_=0, og_local_vars_og_pcl_configs_dest_pcl_id=0, packet_ipv4_header_dip_19_0__1=0):
        super().__init__(82)
        self.packet_ipv4_header_dip_19_0__0 = packet_ipv4_header_dip_19_0__0
        self.packet_ipv4_header_dip_31_20_ = packet_ipv4_header_dip_31_20_
        self.og_local_vars_og_pcl_configs_dest_pcl_id = og_local_vars_og_pcl_configs_dest_pcl_id
        self.packet_ipv4_header_dip_19_0__1 = packet_ipv4_header_dip_19_0__1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_pcl_dip_em_lpm_compound_table_key_option_ip_version_ipv4_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b11_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_LPM_LDB_IPV4_exact_0x0(self):
        return self._get_field_value(2, 2)
    @property
    def packet_ipv4_header_dip_19_0__0(self):
        return self._get_field_value(4, 20)
    @packet_ipv4_header_dip_19_0__0.setter
    def packet_ipv4_header_dip_19_0__0(self, value):
        self._set_field_value('field packet_ipv4_header_dip_19_0__0', 4, 20, int, value)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(24, 1)
    @property
    def packet_ipv4_header_dip_31_20_(self):
        return self._get_field_value(25, 12)
    @packet_ipv4_header_dip_31_20_.setter
    def packet_ipv4_header_dip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_dip_31_20_', 25, 12, int, value)
    @property
    def og_local_vars_og_pcl_configs_dest_pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 37)
    @og_local_vars_og_pcl_configs_dest_pcl_id.setter
    def og_local_vars_og_pcl_configs_dest_pcl_id(self, value):
        self._set_field_value('field og_local_vars_og_pcl_configs_dest_pcl_id', 37, 8, npl_og_pcl_id_t, value)
    @property
    def const4_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(45, 3)
    @property
    def packet_ipv4_header_dip_19_0__1(self):
        return self._get_field_value(48, 20)
    @packet_ipv4_header_dip_19_0__1.setter
    def packet_ipv4_header_dip_19_0__1(self, value):
        self._set_field_value('field packet_ipv4_header_dip_19_0__1', 48, 20, int, value)
    @property
    def const5_14h3ffc_exact_0x3ffc(self):
        return self._get_field_value(68, 14)



class npl_og_pcl_dip_em_lpm_compound_table_key_option_ip_version_ipv6_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_dip=0, og_local_vars_og_pcl_configs_dest_pcl_id=0):
        super().__init__(144)
        self.packet_ipv6_header_dip = packet_ipv6_header_dip
        self.og_local_vars_og_pcl_configs_dest_pcl_id = og_local_vars_og_pcl_configs_dest_pcl_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_pcl_dip_em_lpm_compound_table_key_option_ip_version_ipv6_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b11_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_LPM_LDB_IPV6_exact_0x3(self):
        return self._get_field_value(2, 2)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(4, 1)
    @property
    def packet_ipv6_header_dip(self):
        return self._get_field_value(5, 128)
    @packet_ipv6_header_dip.setter
    def packet_ipv6_header_dip(self, value):
        self._set_field_value('field packet_ipv6_header_dip', 5, 128, int, value)
    @property
    def og_local_vars_og_pcl_configs_dest_pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 133)
    @og_local_vars_og_pcl_configs_dest_pcl_id.setter
    def og_local_vars_og_pcl_configs_dest_pcl_id(self, value):
        self._set_field_value('field og_local_vars_og_pcl_configs_dest_pcl_id', 133, 8, npl_og_pcl_id_t, value)
    @property
    def const4_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(141, 3)




class og_pcl_dip_em_lpm_compound_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(144 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = og_pcl_dip_em_lpm_compound_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_IP_VERSION_IPV4(self):
        return npl_og_pcl_dip_em_lpm_compound_table_key_option_ip_version_ipv4_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV4.setter
    def NPL_IP_VERSION_IPV4(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV4', 0, 82, npl_og_pcl_dip_em_lpm_compound_table_key_option_ip_version_ipv4_t, value)
    @property
    def NPL_IP_VERSION_IPV6(self):
        return npl_og_pcl_dip_em_lpm_compound_table_key_option_ip_version_ipv6_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV6.setter
    def NPL_IP_VERSION_IPV6(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV6', 0, 144, npl_og_pcl_dip_em_lpm_compound_table_key_option_ip_version_ipv6_t, value)

class npl_og_pcl_dip_em_lpm_compound_table_key_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_ip_version=0):
        super().__init__(144)
        self.ip_rx_local_vars_ip_version = ip_rx_local_vars_ip_version

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_pcl_dip_em_lpm_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _ip_rx_local_vars_ip_version = 0
    @property
    def ip_rx_local_vars_ip_version(self):
        return self._ip_rx_local_vars_ip_version
    @ip_rx_local_vars_ip_version.setter
    def ip_rx_local_vars_ip_version(self, value):
        self._ip_rx_local_vars_ip_version = value
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 0, 2, int, 0x3)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 2, 2, int, 0x0)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 24, 1, int, 0x0)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 45, 3, int, 0x7)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 68, 14, int, 0x3ffc)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 0, 2, int, 0x3)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 2, 2, int, 0x3)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 4, 1, int, 0x0)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 141, 3, int, 0x7)

    @property
    def options(self):
        return og_pcl_dip_em_lpm_compound_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 144 - 0, og_pcl_dip_em_lpm_compound_table_key_options_t, value)

class npl_og_pcl_dip_em_lpm_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_pcl_dip_em_lpm_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def og_local_vars_dest_og_em_lpm_result(self):
        return npl_og_em_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @og_local_vars_dest_og_em_lpm_result.setter
    def og_local_vars_dest_og_em_lpm_result(self, value):
        self._set_field_value('field og_local_vars_dest_og_em_lpm_result', 0, 24, npl_og_em_lpm_result_t, value)

class npl_og_pcl_dip_em_lpm_compound_table_value_t(basic_npl_struct):
    def __init__(self, og_local_vars_dest_og_em_lpm_result=0):
        super().__init__(32)
        self.payloads.og_local_vars_dest_og_em_lpm_result = og_local_vars_dest_og_em_lpm_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_pcl_dip_em_lpm_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_og_pcl_dip_em_lpm_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_og_pcl_dip_em_lpm_compound_table_payloads_t, value)



# API-s for table: og_pcl_sip_em_lpm_compound_table

NPL_OG_PCL_SIP_EM_LPM_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_og_pcl_sip_em_lpm_compound_table_key_option_ip_version_ipv4_t(basic_npl_struct):
    def __init__(self, packet_ipv4_header_sip_19_0__0=0, packet_ipv4_header_sip_31_20_=0, og_local_vars_og_pcl_configs_src_pcl_id=0, packet_ipv4_header_sip_19_0__1=0):
        super().__init__(82)
        self.packet_ipv4_header_sip_19_0__0 = packet_ipv4_header_sip_19_0__0
        self.packet_ipv4_header_sip_31_20_ = packet_ipv4_header_sip_31_20_
        self.og_local_vars_og_pcl_configs_src_pcl_id = og_local_vars_og_pcl_configs_src_pcl_id
        self.packet_ipv4_header_sip_19_0__1 = packet_ipv4_header_sip_19_0__1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_pcl_sip_em_lpm_compound_table_key_option_ip_version_ipv4_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b11_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_LPM_LDB_IPV4_exact_0x0(self):
        return self._get_field_value(2, 2)
    @property
    def packet_ipv4_header_sip_19_0__0(self):
        return self._get_field_value(4, 20)
    @packet_ipv4_header_sip_19_0__0.setter
    def packet_ipv4_header_sip_19_0__0(self, value):
        self._set_field_value('field packet_ipv4_header_sip_19_0__0', 4, 20, int, value)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(24, 1)
    @property
    def packet_ipv4_header_sip_31_20_(self):
        return self._get_field_value(25, 12)
    @packet_ipv4_header_sip_31_20_.setter
    def packet_ipv4_header_sip_31_20_(self, value):
        self._set_field_value('field packet_ipv4_header_sip_31_20_', 25, 12, int, value)
    @property
    def og_local_vars_og_pcl_configs_src_pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 37)
    @og_local_vars_og_pcl_configs_src_pcl_id.setter
    def og_local_vars_og_pcl_configs_src_pcl_id(self, value):
        self._set_field_value('field og_local_vars_og_pcl_configs_src_pcl_id', 37, 8, npl_og_pcl_id_t, value)
    @property
    def const4_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(45, 3)
    @property
    def packet_ipv4_header_sip_19_0__1(self):
        return self._get_field_value(48, 20)
    @packet_ipv4_header_sip_19_0__1.setter
    def packet_ipv4_header_sip_19_0__1(self, value):
        self._set_field_value('field packet_ipv4_header_sip_19_0__1', 48, 20, int, value)
    @property
    def const5_14h3ffc_exact_0x3ffc(self):
        return self._get_field_value(68, 14)



class npl_og_pcl_sip_em_lpm_compound_table_key_option_ip_version_ipv6_t(basic_npl_struct):
    def __init__(self, packet_ipv6_header_sip=0, og_local_vars_og_pcl_configs_src_pcl_id=0):
        super().__init__(144)
        self.packet_ipv6_header_sip = packet_ipv6_header_sip
        self.og_local_vars_og_pcl_configs_src_pcl_id = og_local_vars_og_pcl_configs_src_pcl_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_pcl_sip_em_lpm_compound_table_key_option_ip_version_ipv6_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b11_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_LPM_LDB_IPV6_exact_0x3(self):
        return self._get_field_value(2, 2)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(4, 1)
    @property
    def packet_ipv6_header_sip(self):
        return self._get_field_value(5, 128)
    @packet_ipv6_header_sip.setter
    def packet_ipv6_header_sip(self, value):
        self._set_field_value('field packet_ipv6_header_sip', 5, 128, int, value)
    @property
    def og_local_vars_og_pcl_configs_src_pcl_id(self):
        return npl_og_pcl_id_t._get_as_sub_field(self._data, self._offset_in_data + 133)
    @og_local_vars_og_pcl_configs_src_pcl_id.setter
    def og_local_vars_og_pcl_configs_src_pcl_id(self, value):
        self._set_field_value('field og_local_vars_og_pcl_configs_src_pcl_id', 133, 8, npl_og_pcl_id_t, value)
    @property
    def const4_VRF_ID_MSB_RSRVD_FOR_OG_exact_0x7(self):
        return self._get_field_value(141, 3)




class og_pcl_sip_em_lpm_compound_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(144 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = og_pcl_sip_em_lpm_compound_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_IP_VERSION_IPV4(self):
        return npl_og_pcl_sip_em_lpm_compound_table_key_option_ip_version_ipv4_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV4.setter
    def NPL_IP_VERSION_IPV4(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV4', 0, 82, npl_og_pcl_sip_em_lpm_compound_table_key_option_ip_version_ipv4_t, value)
    @property
    def NPL_IP_VERSION_IPV6(self):
        return npl_og_pcl_sip_em_lpm_compound_table_key_option_ip_version_ipv6_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_VERSION_IPV6.setter
    def NPL_IP_VERSION_IPV6(self, value):
        self._set_field_value('field NPL_IP_VERSION_IPV6', 0, 144, npl_og_pcl_sip_em_lpm_compound_table_key_option_ip_version_ipv6_t, value)

class npl_og_pcl_sip_em_lpm_compound_table_key_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_ip_version=0):
        super().__init__(144)
        self.ip_rx_local_vars_ip_version = ip_rx_local_vars_ip_version

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_pcl_sip_em_lpm_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _ip_rx_local_vars_ip_version = 0
    @property
    def ip_rx_local_vars_ip_version(self):
        return self._ip_rx_local_vars_ip_version
    @ip_rx_local_vars_ip_version.setter
    def ip_rx_local_vars_ip_version(self, value):
        self._ip_rx_local_vars_ip_version = value
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 0, 2, int, 0x3)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 2, 2, int, 0x0)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 24, 1, int, 0x0)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 45, 3, int, 0x7)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV4:
            self._set_field_value('const field', 68, 14, int, 0x3ffc)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 0, 2, int, 0x3)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 2, 2, int, 0x3)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 4, 1, int, 0x0)
        if ip_rx_local_vars_ip_version == NPL_IP_VERSION_IPV6:
            self._set_field_value('const field', 141, 3, int, 0x7)

    @property
    def options(self):
        return og_pcl_sip_em_lpm_compound_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 144 - 0, og_pcl_sip_em_lpm_compound_table_key_options_t, value)

class npl_og_pcl_sip_em_lpm_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_pcl_sip_em_lpm_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def og_local_vars_src_og_em_lpm_result(self):
        return npl_og_em_lpm_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @og_local_vars_src_og_em_lpm_result.setter
    def og_local_vars_src_og_em_lpm_result(self, value):
        self._set_field_value('field og_local_vars_src_og_em_lpm_result', 0, 24, npl_og_em_lpm_result_t, value)

class npl_og_pcl_sip_em_lpm_compound_table_value_t(basic_npl_struct):
    def __init__(self, og_local_vars_src_og_em_lpm_result=0):
        super().__init__(32)
        self.payloads.og_local_vars_src_og_em_lpm_result = og_local_vars_src_og_em_lpm_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_og_pcl_sip_em_lpm_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_og_pcl_sip_em_lpm_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_og_pcl_sip_em_lpm_compound_table_payloads_t, value)



# API-s for table: outer_tpid_table

NPL_OUTER_TPID_TABLE_ACTION_WRITE = 0x0

class npl_outer_tpid_table_key_t(basic_npl_struct):
    def __init__(self, tpid_ptr=0):
        super().__init__(4)
        self.tpid_ptr = tpid_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_outer_tpid_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tpid_ptr(self):
        return self._get_field_value(0, 4)
    @tpid_ptr.setter
    def tpid_ptr(self, value):
        self._set_field_value('field tpid_ptr', 0, 4, int, value)

class npl_outer_tpid_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_outer_tpid_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tpid(self):
        return self._get_field_value(0, 16)
    @tpid.setter
    def tpid(self, value):
        self._set_field_value('field tpid', 0, 16, int, value)

class npl_outer_tpid_table_value_t(basic_npl_struct):
    def __init__(self, tpid=0):
        super().__init__(24)
        self.payloads.tpid = tpid

    def _get_as_sub_field(data, offset_in_data):
        result = npl_outer_tpid_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_outer_tpid_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_outer_tpid_table_payloads_t, value)



# API-s for table: overlay_ipv4_sip_compound_table

NPL_OVERLAY_IPV4_SIP_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_overlay_ipv4_sip_compound_table_key_t(basic_npl_struct):
    def __init__(self, ip_rx_local_vars_vxlan_tunnel_loopback=0, packet_ipv4_header_sip=0):
        super().__init__(46)
        self._set_field_value('const field', 0, 4, int, 0x1)
        self._set_field_value('const field', 4, 2, int, 0x0)
        self._set_field_value('const field', 6, 4, int, 0x6)
        self.ip_rx_local_vars_vxlan_tunnel_loopback = ip_rx_local_vars_vxlan_tunnel_loopback
        self.packet_ipv4_header_sip = packet_ipv4_header_sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_overlay_ipv4_sip_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_4b0001_exact_0x1(self):
        return self._get_field_value(0, 4)
    @property
    def const2_2b00_exact_0x0(self):
        return self._get_field_value(4, 2)
    @property
    def const3_SM_LDB_IPV4_OVERLAY_MAPPING_exact_0x6(self):
        return self._get_field_value(6, 4)
    @property
    def ip_rx_local_vars_vxlan_tunnel_loopback(self):
        return self._get_field_value(10, 4)
    @ip_rx_local_vars_vxlan_tunnel_loopback.setter
    def ip_rx_local_vars_vxlan_tunnel_loopback(self, value):
        self._set_field_value('field ip_rx_local_vars_vxlan_tunnel_loopback', 10, 4, int, value)
    @property
    def packet_ipv4_header_sip(self):
        return self._get_field_value(14, 32)
    @packet_ipv4_header_sip.setter
    def packet_ipv4_header_sip(self, value):
        self._set_field_value('field packet_ipv4_header_sip', 14, 32, int, value)

class npl_overlay_ipv4_sip_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_overlay_ipv4_sip_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_layer_vars_local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pd_layer_vars_local_slp_id.setter
    def pd_layer_vars_local_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id', 0, 16, npl_lp_id_t, value)

class npl_overlay_ipv4_sip_compound_table_value_t(basic_npl_struct):
    def __init__(self, pd_layer_vars_local_slp_id=0):
        super().__init__(24)
        self.payloads.pd_layer_vars_local_slp_id = pd_layer_vars_local_slp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_overlay_ipv4_sip_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_overlay_ipv4_sip_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_overlay_ipv4_sip_compound_table_payloads_t, value)



# API-s for table: overlay_ipv4_sip_table

NPL_OVERLAY_IPV4_SIP_TABLE_ACTION_WRITE = 0x0

class npl_overlay_ipv4_sip_table_key_t(basic_npl_struct):
    def __init__(self, vxlan_tunnel_loopback=0, sip=0):
        super().__init__(36)
        self.vxlan_tunnel_loopback = vxlan_tunnel_loopback
        self.sip = sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_overlay_ipv4_sip_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vxlan_tunnel_loopback(self):
        return self._get_field_value(0, 4)
    @vxlan_tunnel_loopback.setter
    def vxlan_tunnel_loopback(self, value):
        self._set_field_value('field vxlan_tunnel_loopback', 0, 4, int, value)
    @property
    def sip(self):
        return self._get_field_value(4, 32)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 4, 32, int, value)

class npl_overlay_ipv4_sip_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_overlay_ipv4_sip_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @slp_id.setter
    def slp_id(self, value):
        self._set_field_value('field slp_id', 0, 16, npl_lp_id_t, value)

class npl_overlay_ipv4_sip_table_value_t(basic_npl_struct):
    def __init__(self, slp_id=0):
        super().__init__(24)
        self.payloads.slp_id = slp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_overlay_ipv4_sip_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_overlay_ipv4_sip_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_overlay_ipv4_sip_table_payloads_t, value)



# API-s for table: packet_size_pack_table

NPL_PACKET_SIZE_PACK_TABLE_ACTION_WRITE = 0x0

class npl_packet_size_pack_table_key_t(basic_npl_struct):
    def __init__(self, device_pkt_size=0):
        super().__init__(14)
        self.device_pkt_size = device_pkt_size

    def _get_as_sub_field(data, offset_in_data):
        result = npl_packet_size_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def device_pkt_size(self):
        return self._get_field_value(0, 14)
    @device_pkt_size.setter
    def device_pkt_size(self, value):
        self._set_field_value('field device_pkt_size', 0, 14, int, value)

class npl_packet_size_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(14)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_packet_size_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fabric_tx_local_vars_orig_packet_size(self):
        return self._get_field_value(0, 14)
    @fabric_tx_local_vars_orig_packet_size.setter
    def fabric_tx_local_vars_orig_packet_size(self, value):
        self._set_field_value('field fabric_tx_local_vars_orig_packet_size', 0, 14, int, value)

class npl_packet_size_pack_table_value_t(basic_npl_struct):
    def __init__(self, fabric_tx_local_vars_orig_packet_size=0):
        super().__init__(22)
        self.payloads.fabric_tx_local_vars_orig_packet_size = fabric_tx_local_vars_orig_packet_size

    def _get_as_sub_field(data, offset_in_data):
        result = npl_packet_size_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(14, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 14, 8, int, value)
    @property
    def payloads(self):
        return npl_packet_size_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 14, npl_packet_size_pack_table_payloads_t, value)



# API-s for table: pad_mtu_inj_check_static_table

NPL_PAD_MTU_INJ_CHECK_STATIC_TABLE_ACTION_DEFAULT_PAD_MTU_INJ_ACTION = 0x0
NPL_PAD_MTU_INJ_CHECK_STATIC_TABLE_ACTION_PAD_MTU_INJ_NEXT_MACRO_ACTION = 0x1

class npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_pad_mtu_inj_check_static_table_key_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_fwd_pkt_size=0, tx_npu_header_is_inject_up=0):
        super().__init__(15)
        self.l3_tx_local_vars_fwd_pkt_size = l3_tx_local_vars_fwd_pkt_size
        self.tx_npu_header_is_inject_up = tx_npu_header_is_inject_up

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pad_mtu_inj_check_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_tx_local_vars_fwd_pkt_size(self):
        return self._get_field_value(0, 14)
    @l3_tx_local_vars_fwd_pkt_size.setter
    def l3_tx_local_vars_fwd_pkt_size(self, value):
        self._set_field_value('field l3_tx_local_vars_fwd_pkt_size', 0, 14, int, value)
    @property
    def tx_npu_header_is_inject_up(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @tx_npu_header_is_inject_up.setter
    def tx_npu_header_is_inject_up(self, value):
        self._set_field_value('field tx_npu_header_is_inject_up', 14, 1, npl_bool_t, value)

class npl_pad_mtu_inj_check_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pad_mtu_inj_check_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pad_mtu_inj_next_macro_action(self):
        return npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pad_mtu_inj_next_macro_action.setter
    def pad_mtu_inj_next_macro_action(self, value):
        self._set_field_value('field pad_mtu_inj_next_macro_action', 0, 10, npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t, value)

class npl_pad_mtu_inj_check_static_table_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(18)
        self.action = action
        if self.action == NPL_PAD_MTU_INJ_CHECK_STATIC_TABLE_ACTION_PAD_MTU_INJ_NEXT_MACRO_ACTION:
            self.payloads.pad_mtu_inj_next_macro_action = npl_pad_mtu_inj_check_static_table_pad_mtu_inj_next_macro_action_payload_t(*args, **kwargs)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_pad_mtu_inj_check_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_pad_mtu_inj_check_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_pad_mtu_inj_check_static_table_payloads_t, value)



# API-s for table: path_lb_type_decoding_table

NPL_PATH_LB_TYPE_DECODING_TABLE_ACTION_WRITE = 0x0

class npl_path_lb_type_decoding_table_key_t(basic_npl_struct):
    def __init__(self, type=0):
        super().__init__(3)
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lb_type_decoding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def type(self):
        return self._get_field_value(0, 3)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 0, 3, int, value)

class npl_path_lb_type_decoding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(63)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lb_type_decoding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def path_lb_type_decoding_table_result(self):
        return npl_resolution_type_decoding_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @path_lb_type_decoding_table_result.setter
    def path_lb_type_decoding_table_result(self, value):
        self._set_field_value('field path_lb_type_decoding_table_result', 0, 63, npl_resolution_type_decoding_table_result_t, value)

class npl_path_lb_type_decoding_table_value_t(basic_npl_struct):
    def __init__(self, path_lb_type_decoding_table_result=0):
        super().__init__(71)
        self.payloads.path_lb_type_decoding_table_result = path_lb_type_decoding_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lb_type_decoding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(63, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 63, 8, int, value)
    @property
    def payloads(self):
        return npl_path_lb_type_decoding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 63, npl_path_lb_type_decoding_table_payloads_t, value)



# API-s for table: path_lp_is_pbts_prefix_table

NPL_PATH_LP_IS_PBTS_PREFIX_TABLE_ACTION_WRITE = 0x0

class npl_path_lp_is_pbts_prefix_table_key_t(basic_npl_struct):
    def __init__(self, prefix=0):
        super().__init__(5)
        self.prefix = prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_is_pbts_prefix_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def prefix(self):
        return self._get_field_value(0, 5)
    @prefix.setter
    def prefix(self, value):
        self._set_field_value('field prefix', 0, 5, int, value)

class npl_path_lp_is_pbts_prefix_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_is_pbts_prefix_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def path_lp_is_pbts_prefix_table_result(self):
        return npl_is_pbts_prefix_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @path_lp_is_pbts_prefix_table_result.setter
    def path_lp_is_pbts_prefix_table_result(self, value):
        self._set_field_value('field path_lp_is_pbts_prefix_table_result', 0, 1, npl_is_pbts_prefix_t, value)

class npl_path_lp_is_pbts_prefix_table_value_t(basic_npl_struct):
    def __init__(self, path_lp_is_pbts_prefix_table_result=0):
        super().__init__(9)
        self.payloads.path_lp_is_pbts_prefix_table_result = path_lp_is_pbts_prefix_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_is_pbts_prefix_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_path_lp_is_pbts_prefix_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_path_lp_is_pbts_prefix_table_payloads_t, value)



# API-s for table: path_lp_pbts_map_table

NPL_PATH_LP_PBTS_MAP_TABLE_ACTION_WRITE = 0x0

class npl_path_lp_pbts_map_table_key_t(basic_npl_struct):
    def __init__(self, pbts_map_key=0):
        super().__init__(5)
        self.pbts_map_key = pbts_map_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_pbts_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pbts_map_key(self):
        return npl_pbts_map_table_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pbts_map_key.setter
    def pbts_map_key(self, value):
        self._set_field_value('field pbts_map_key', 0, 5, npl_pbts_map_table_key_t, value)

class npl_path_lp_pbts_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_pbts_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def path_lp_pbts_map_table_result(self):
        return npl_pbts_map_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @path_lp_pbts_map_table_result.setter
    def path_lp_pbts_map_table_result(self, value):
        self._set_field_value('field path_lp_pbts_map_table_result', 0, 8, npl_pbts_map_table_result_t, value)

class npl_path_lp_pbts_map_table_value_t(basic_npl_struct):
    def __init__(self, path_lp_pbts_map_table_result=0):
        super().__init__(16)
        self.payloads.path_lp_pbts_map_table_result = path_lp_pbts_map_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_pbts_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_path_lp_pbts_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_path_lp_pbts_map_table_payloads_t, value)



# API-s for table: path_lp_table

NPL_PATH_LP_TABLE_ACTION_NARROW_ENTRY = 0x0
NPL_PATH_LP_TABLE_ACTION_PROTECTED_ENTRY = 0x1
NPL_PATH_LP_TABLE_ACTION_WIDE_ENTRY = 0x2

class npl_path_lp_table_narrow_entry_payload_t(basic_npl_struct):
    def __init__(self, entry=0):
        super().__init__(83)
        self.entry = entry

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_table_narrow_entry_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def entry(self):
        return npl_path_lp_table_result_narrow_t._get_as_sub_field(self._data, self._offset_in_data + 63)
    @entry.setter
    def entry(self, value):
        self._set_field_value('field entry', 63, 20, npl_path_lp_table_result_narrow_t, value)




class npl_path_lp_table_protected_entry_payload_t(basic_npl_struct):
    def __init__(self, data=0):
        super().__init__(83)
        self.data = data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_table_protected_entry_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def data(self):
        return npl_path_lp_table_result_protected_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @data.setter
    def data(self, value):
        self._set_field_value('field data', 0, 83, npl_path_lp_table_result_protected_t, value)




class npl_path_lp_table_wide_entry_payload_t(basic_npl_struct):
    def __init__(self, entry=0):
        super().__init__(83)
        self.entry = entry

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_table_wide_entry_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def entry(self):
        return npl_path_lp_table_result_wide_t._get_as_sub_field(self._data, self._offset_in_data + 43)
    @entry.setter
    def entry(self, value):
        self._set_field_value('field entry', 43, 40, npl_path_lp_table_result_wide_t, value)




class npl_path_lp_table_key_t(basic_npl_struct):
    def __init__(self, tunnel_dlp=0):
        super().__init__(15)
        self.tunnel_dlp = tunnel_dlp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tunnel_dlp(self):
        return npl_tunnel_dlp_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tunnel_dlp.setter
    def tunnel_dlp(self, value):
        self._set_field_value('field tunnel_dlp', 0, 15, npl_tunnel_dlp_t, value)

class npl_path_lp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(83)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def narrow_entry(self):
        return npl_path_lp_table_narrow_entry_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @narrow_entry.setter
    def narrow_entry(self, value):
        self._set_field_value('field narrow_entry', 0, 83, npl_path_lp_table_narrow_entry_payload_t, value)
    @property
    def protected_entry(self):
        return npl_path_lp_table_protected_entry_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @protected_entry.setter
    def protected_entry(self, value):
        self._set_field_value('field protected_entry', 0, 83, npl_path_lp_table_protected_entry_payload_t, value)
    @property
    def wide_entry(self):
        return npl_path_lp_table_wide_entry_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @wide_entry.setter
    def wide_entry(self, value):
        self._set_field_value('field wide_entry', 0, 83, npl_path_lp_table_wide_entry_payload_t, value)

class npl_path_lp_table_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(91)
        self.action = action
        if self.action == NPL_PATH_LP_TABLE_ACTION_NARROW_ENTRY:
            self.payloads.narrow_entry = npl_path_lp_table_narrow_entry_payload_t(*args, **kwargs)

        if self.action == NPL_PATH_LP_TABLE_ACTION_PROTECTED_ENTRY:
            self.payloads.protected_entry = npl_path_lp_table_protected_entry_payload_t(*args, **kwargs)

        if self.action == NPL_PATH_LP_TABLE_ACTION_WIDE_ENTRY:
            self.payloads.wide_entry = npl_path_lp_table_wide_entry_payload_t(*args, **kwargs)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(83, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 83, 8, int, value)
    @property
    def payloads(self):
        return npl_path_lp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 83, npl_path_lp_table_payloads_t, value)



# API-s for table: path_lp_type_decoding_table

NPL_PATH_LP_TYPE_DECODING_TABLE_ACTION_WRITE = 0x0

class npl_path_lp_type_decoding_table_key_t(basic_npl_struct):
    def __init__(self, type=0):
        super().__init__(3)
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_type_decoding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def type(self):
        return self._get_field_value(0, 3)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 0, 3, int, value)

class npl_path_lp_type_decoding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(63)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_type_decoding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def path_lp_type_decoding_table_result(self):
        return npl_resolution_type_decoding_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @path_lp_type_decoding_table_result.setter
    def path_lp_type_decoding_table_result(self, value):
        self._set_field_value('field path_lp_type_decoding_table_result', 0, 63, npl_resolution_type_decoding_table_result_t, value)

class npl_path_lp_type_decoding_table_value_t(basic_npl_struct):
    def __init__(self, path_lp_type_decoding_table_result=0):
        super().__init__(71)
        self.payloads.path_lp_type_decoding_table_result = path_lp_type_decoding_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_lp_type_decoding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(63, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 63, 8, int, value)
    @property
    def payloads(self):
        return npl_path_lp_type_decoding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 63, npl_path_lp_type_decoding_table_payloads_t, value)



# API-s for table: path_protection_table

NPL_PATH_PROTECTION_TABLE_ACTION_WRITE = 0x0

class npl_path_protection_table_key_t(basic_npl_struct):
    def __init__(self, id=0):
        super().__init__(13)
        self.id = id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_protection_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def id(self):
        return npl_path_protection_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @id.setter
    def id(self, value):
        self._set_field_value('field id', 0, 13, npl_path_protection_id_t, value)

class npl_path_protection_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_protection_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def path_protection_table_result(self):
        return npl_protection_selector_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @path_protection_table_result.setter
    def path_protection_table_result(self, value):
        self._set_field_value('field path_protection_table_result', 0, 1, npl_protection_selector_t, value)

class npl_path_protection_table_value_t(basic_npl_struct):
    def __init__(self, path_protection_table_result=0):
        super().__init__(9)
        self.payloads.path_protection_table_result = path_protection_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_path_protection_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_path_protection_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_path_protection_table_payloads_t, value)



# API-s for table: pdoq_oq_ifc_mapping

NPL_PDOQ_OQ_IFC_MAPPING_ACTION_WRITE = 0x0

class npl_pdoq_oq_ifc_mapping_key_t(basic_npl_struct):
    def __init__(self, dest_oq=0):
        super().__init__(9)
        self.dest_oq = dest_oq

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pdoq_oq_ifc_mapping_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dest_oq(self):
        return self._get_field_value(0, 9)
    @dest_oq.setter
    def dest_oq(self, value):
        self._set_field_value('field dest_oq', 0, 9, int, value)

class npl_pdoq_oq_ifc_mapping_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(15)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pdoq_oq_ifc_mapping_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pdoq_oq_ifc_mapping_result(self):
        return npl_pdoq_oq_ifc_mapping_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pdoq_oq_ifc_mapping_result.setter
    def pdoq_oq_ifc_mapping_result(self, value):
        self._set_field_value('field pdoq_oq_ifc_mapping_result', 0, 15, npl_pdoq_oq_ifc_mapping_result_t, value)

class npl_pdoq_oq_ifc_mapping_value_t(basic_npl_struct):
    def __init__(self, pdoq_oq_ifc_mapping_result=0):
        super().__init__(23)
        self.payloads.pdoq_oq_ifc_mapping_result = pdoq_oq_ifc_mapping_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pdoq_oq_ifc_mapping_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(15, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 15, 8, int, value)
    @property
    def payloads(self):
        return npl_pdoq_oq_ifc_mapping_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 15, npl_pdoq_oq_ifc_mapping_payloads_t, value)



# API-s for table: pdvoq_bank_pair_offset_table

NPL_PDVOQ_BANK_PAIR_OFFSET_TABLE_ACTION_WRITE = 0x0

class npl_pdvoq_bank_pair_offset_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_pdvoq_bank_pair_offset_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_pdvoq_bank_pair_offset_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(108)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pdvoq_bank_pair_offset_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pdvoq_bank_pair_offset_result(self):
        return npl_pdvoq_bank_pair_offset_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pdvoq_bank_pair_offset_result.setter
    def pdvoq_bank_pair_offset_result(self, value):
        self._set_field_value('field pdvoq_bank_pair_offset_result', 0, 108, npl_pdvoq_bank_pair_offset_result_t, value)

class npl_pdvoq_bank_pair_offset_table_value_t(basic_npl_struct):
    def __init__(self, pdvoq_bank_pair_offset_result=0):
        super().__init__(116)
        self.payloads.pdvoq_bank_pair_offset_result = pdvoq_bank_pair_offset_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pdvoq_bank_pair_offset_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(108, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 108, 8, int, value)
    @property
    def payloads(self):
        return npl_pdvoq_bank_pair_offset_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 108, npl_pdvoq_bank_pair_offset_table_payloads_t, value)



# API-s for table: pdvoq_slice_voq_properties_table

NPL_PDVOQ_SLICE_VOQ_PROPERTIES_TABLE_ACTION_WRITE = 0x0

class npl_pdvoq_slice_voq_properties_table_key_t(basic_npl_struct):
    def __init__(self, voq_num=0):
        super().__init__(16)
        self.voq_num = voq_num

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pdvoq_slice_voq_properties_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def voq_num(self):
        return self._get_field_value(0, 16)
    @voq_num.setter
    def voq_num(self, value):
        self._set_field_value('field voq_num', 0, 16, int, value)

class npl_pdvoq_slice_voq_properties_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pdvoq_slice_voq_properties_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pdvoq_slice_voq_properties_result(self):
        return npl_pdvoq_slice_voq_properties_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pdvoq_slice_voq_properties_result.setter
    def pdvoq_slice_voq_properties_result(self, value):
        self._set_field_value('field pdvoq_slice_voq_properties_result', 0, 8, npl_pdvoq_slice_voq_properties_result_t, value)

class npl_pdvoq_slice_voq_properties_table_value_t(basic_npl_struct):
    def __init__(self, pdvoq_slice_voq_properties_result=0):
        super().__init__(16)
        self.payloads.pdvoq_slice_voq_properties_result = pdvoq_slice_voq_properties_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pdvoq_slice_voq_properties_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_pdvoq_slice_voq_properties_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_pdvoq_slice_voq_properties_table_payloads_t, value)



# API-s for table: per_asbr_and_dpe_table

NPL_PER_ASBR_AND_DPE_TABLE_ACTION_WRITE = 0x0

class npl_per_asbr_and_dpe_table_key_t(basic_npl_struct):
    def __init__(self, asbr=0, dpe=0):
        super().__init__(32)
        self.asbr = asbr
        self.dpe = dpe

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_asbr_and_dpe_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def asbr(self):
        return self._get_field_value(0, 16)
    @asbr.setter
    def asbr(self, value):
        self._set_field_value('field asbr', 0, 16, int, value)
    @property
    def dpe(self):
        return self._get_field_value(16, 16)
    @dpe.setter
    def dpe(self, value):
        self._set_field_value('field dpe', 16, 16, int, value)

class npl_per_asbr_and_dpe_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(45)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_asbr_and_dpe_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def large_em_label_encap_data_and_counter_ptr(self):
        return npl_large_em_label_encap_data_and_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @large_em_label_encap_data_and_counter_ptr.setter
    def large_em_label_encap_data_and_counter_ptr(self, value):
        self._set_field_value('field large_em_label_encap_data_and_counter_ptr', 0, 45, npl_large_em_label_encap_data_and_counter_ptr_t, value)

class npl_per_asbr_and_dpe_table_value_t(basic_npl_struct):
    def __init__(self, large_em_label_encap_data_and_counter_ptr=0):
        super().__init__(53)
        self.payloads.large_em_label_encap_data_and_counter_ptr = large_em_label_encap_data_and_counter_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_asbr_and_dpe_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(45, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 45, 8, int, value)
    @property
    def payloads(self):
        return npl_per_asbr_and_dpe_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 45, npl_per_asbr_and_dpe_table_payloads_t, value)



# API-s for table: per_pe_and_prefix_vpn_key_large_table

NPL_PER_PE_AND_PREFIX_VPN_KEY_LARGE_TABLE_ACTION_WRITE = 0x0

class npl_per_pe_and_prefix_vpn_key_large_table_key_t(basic_npl_struct):
    def __init__(self, lsp_destination=0, ip_prefix_id=0):
        super().__init__(33)
        self.lsp_destination = lsp_destination
        self.ip_prefix_id = ip_prefix_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_pe_and_prefix_vpn_key_large_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_destination(self):
        return self._get_field_value(0, 16)
    @lsp_destination.setter
    def lsp_destination(self, value):
        self._set_field_value('field lsp_destination', 0, 16, int, value)
    @property
    def ip_prefix_id(self):
        return self._get_field_value(16, 17)
    @ip_prefix_id.setter
    def ip_prefix_id(self, value):
        self._set_field_value('field ip_prefix_id', 16, 17, int, value)

class npl_per_pe_and_prefix_vpn_key_large_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(76)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_pe_and_prefix_vpn_key_large_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vpn_encap_data(self):
        return npl_vpn_label_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vpn_encap_data.setter
    def vpn_encap_data(self, value):
        self._set_field_value('field vpn_encap_data', 0, 76, npl_vpn_label_encap_data_t, value)

class npl_per_pe_and_prefix_vpn_key_large_table_value_t(basic_npl_struct):
    def __init__(self, vpn_encap_data=0):
        super().__init__(84)
        self.payloads.vpn_encap_data = vpn_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_pe_and_prefix_vpn_key_large_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(76, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 76, 8, int, value)
    @property
    def payloads(self):
        return npl_per_pe_and_prefix_vpn_key_large_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 76, npl_per_pe_and_prefix_vpn_key_large_table_payloads_t, value)



# API-s for table: per_pe_and_vrf_vpn_key_large_table

NPL_PER_PE_AND_VRF_VPN_KEY_LARGE_TABLE_ACTION_WRITE = 0x0

class npl_per_pe_and_vrf_vpn_key_large_table_key_t(basic_npl_struct):
    def __init__(self, lsp_destination=0, l3_relay_id=0):
        super().__init__(27)
        self.lsp_destination = lsp_destination
        self.l3_relay_id = l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_pe_and_vrf_vpn_key_large_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_destination(self):
        return self._get_field_value(0, 16)
    @lsp_destination.setter
    def lsp_destination(self, value):
        self._set_field_value('field lsp_destination', 0, 16, int, value)
    @property
    def l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @l3_relay_id.setter
    def l3_relay_id(self, value):
        self._set_field_value('field l3_relay_id', 16, 11, npl_l3_relay_id_t, value)

class npl_per_pe_and_vrf_vpn_key_large_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(76)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_pe_and_vrf_vpn_key_large_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vpn_encap_data(self):
        return npl_vpn_label_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vpn_encap_data.setter
    def vpn_encap_data(self, value):
        self._set_field_value('field vpn_encap_data', 0, 76, npl_vpn_label_encap_data_t, value)

class npl_per_pe_and_vrf_vpn_key_large_table_value_t(basic_npl_struct):
    def __init__(self, vpn_encap_data=0):
        super().__init__(84)
        self.payloads.vpn_encap_data = vpn_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_pe_and_vrf_vpn_key_large_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(76, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 76, 8, int, value)
    @property
    def payloads(self):
        return npl_per_pe_and_vrf_vpn_key_large_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 76, npl_per_pe_and_vrf_vpn_key_large_table_payloads_t, value)



# API-s for table: per_port_destination_table

NPL_PER_PORT_DESTINATION_TABLE_ACTION_WRITE = 0x0

class npl_per_port_destination_table_key_t(basic_npl_struct):
    def __init__(self, device_rx_source_if_ifg=0, device_rx_source_if_pif=0):
        super().__init__(6)
        self.device_rx_source_if_ifg = device_rx_source_if_ifg
        self.device_rx_source_if_pif = device_rx_source_if_pif

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_port_destination_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def device_rx_source_if_ifg(self):
        return self._get_field_value(0, 1)
    @device_rx_source_if_ifg.setter
    def device_rx_source_if_ifg(self, value):
        self._set_field_value('field device_rx_source_if_ifg', 0, 1, int, value)
    @property
    def device_rx_source_if_pif(self):
        return self._get_field_value(1, 5)
    @device_rx_source_if_pif.setter
    def device_rx_source_if_pif(self, value):
        self._set_field_value('field device_rx_source_if_pif', 1, 5, int, value)

class npl_per_port_destination_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_port_destination_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def destination_local_vars_fwd_destination(self):
        return self._get_field_value(0, 20)
    @destination_local_vars_fwd_destination.setter
    def destination_local_vars_fwd_destination(self, value):
        self._set_field_value('field destination_local_vars_fwd_destination', 0, 20, int, value)

class npl_per_port_destination_table_value_t(basic_npl_struct):
    def __init__(self, destination_local_vars_fwd_destination=0):
        super().__init__(28)
        self.payloads.destination_local_vars_fwd_destination = destination_local_vars_fwd_destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_port_destination_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_per_port_destination_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_per_port_destination_table_payloads_t, value)



# API-s for table: per_vrf_mpls_forwarding_table

NPL_PER_VRF_MPLS_FORWARDING_TABLE_ACTION_WRITE = 0x0

class npl_per_vrf_mpls_forwarding_table_key_t(basic_npl_struct):
    def __init__(self, vrf_id=0, label=0):
        super().__init__(31)
        self.vrf_id = vrf_id
        self.label = label

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_vrf_mpls_forwarding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vrf_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vrf_id.setter
    def vrf_id(self, value):
        self._set_field_value('field vrf_id', 0, 11, npl_l3_relay_id_t, value)
    @property
    def label(self):
        return self._get_field_value(11, 20)
    @label.setter
    def label(self, value):
        self._set_field_value('field label', 11, 20, int, value)

class npl_per_vrf_mpls_forwarding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_vrf_mpls_forwarding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def nhlfe(self):
        return npl_nhlfe_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @nhlfe.setter
    def nhlfe(self, value):
        self._set_field_value('field nhlfe', 0, 64, npl_nhlfe_t, value)

class npl_per_vrf_mpls_forwarding_table_value_t(basic_npl_struct):
    def __init__(self, nhlfe=0):
        super().__init__(72)
        self.payloads.nhlfe = nhlfe

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_vrf_mpls_forwarding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_per_vrf_mpls_forwarding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_per_vrf_mpls_forwarding_table_payloads_t, value)



# API-s for table: per_vrf_mpls_forwarding_table_compound

NPL_PER_VRF_MPLS_FORWARDING_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_per_vrf_mpls_forwarding_table_compound_key_t(basic_npl_struct):
    def __init__(self, pd_layer_vars_l3_relay_id=0, packet_mpls_header_label0_label=0):
        super().__init__(40)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 7, int, 0x66)
        self.pd_layer_vars_l3_relay_id = pd_layer_vars_l3_relay_id
        self.packet_mpls_header_label0_label = packet_mpls_header_label0_label

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_vrf_mpls_forwarding_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_CENTRAL_EM_LDB_PER_VRF_MPLS_FWD_exact_0x66(self):
        return self._get_field_value(2, 7)
    @property
    def pd_layer_vars_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 9)
    @pd_layer_vars_l3_relay_id.setter
    def pd_layer_vars_l3_relay_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_relay_id', 9, 11, npl_l3_relay_id_t, value)
    @property
    def packet_mpls_header_label0_label(self):
        return self._get_field_value(20, 20)
    @packet_mpls_header_label0_label.setter
    def packet_mpls_header_label0_label(self, value):
        self._set_field_value('field packet_mpls_header_label0_label', 20, 20, int, value)

class npl_per_vrf_mpls_forwarding_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_vrf_mpls_forwarding_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mpls_relay_local_vars_wrap_nhlfe(self):
        return npl_wrap_nhlfe_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mpls_relay_local_vars_wrap_nhlfe.setter
    def mpls_relay_local_vars_wrap_nhlfe(self, value):
        self._set_field_value('field mpls_relay_local_vars_wrap_nhlfe', 0, 64, npl_wrap_nhlfe_t, value)

class npl_per_vrf_mpls_forwarding_table_compound_value_t(basic_npl_struct):
    def __init__(self, mpls_relay_local_vars_wrap_nhlfe=0):
        super().__init__(72)
        self.payloads.mpls_relay_local_vars_wrap_nhlfe = mpls_relay_local_vars_wrap_nhlfe

    def _get_as_sub_field(data, offset_in_data):
        result = npl_per_vrf_mpls_forwarding_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_per_vrf_mpls_forwarding_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_per_vrf_mpls_forwarding_table_compound_payloads_t, value)



# API-s for table: pfc_congestion_state_table

NPL_PFC_CONGESTION_STATE_TABLE_ACTION_UPDATE_CONGESTION = 0x0

class npl_pfc_congestion_state_table_update_congestion_payload_t(basic_npl_struct):
    def __init__(self, em_payload=0):
        super().__init__(40)
        self.em_payload = em_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_congestion_state_table_update_congestion_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def em_payload(self):
        return npl_em_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @em_payload.setter
    def em_payload(self, value):
        self._set_field_value('field em_payload', 0, 40, npl_em_payload_t, value)




class npl_pfc_congestion_state_table_key_t(basic_npl_struct):
    def __init__(self, dsp4=0, dsp3=0, dsp2=0, dsp1=0, tc=0, slice=0):
        super().__init__(50)
        self._set_field_value('const field', 0, 2, int, 0x3)
        self.dsp4 = dsp4
        self.dsp3 = dsp3
        self.dsp2 = dsp2
        self.dsp1 = dsp1
        self.tc = tc
        self.slice = slice

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_congestion_state_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_PFC_CONG_TBL_ID_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def dsp4(self):
        return self._get_field_value(2, 6)
    @dsp4.setter
    def dsp4(self, value):
        self._set_field_value('field dsp4', 2, 6, int, value)
    @property
    def dsp3(self):
        return self._get_field_value(8, 12)
    @dsp3.setter
    def dsp3(self, value):
        self._set_field_value('field dsp3', 8, 12, int, value)
    @property
    def dsp2(self):
        return self._get_field_value(20, 12)
    @dsp2.setter
    def dsp2(self, value):
        self._set_field_value('field dsp2', 20, 12, int, value)
    @property
    def dsp1(self):
        return self._get_field_value(32, 12)
    @dsp1.setter
    def dsp1(self, value):
        self._set_field_value('field dsp1', 32, 12, int, value)
    @property
    def tc(self):
        return self._get_field_value(44, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 44, 3, int, value)
    @property
    def slice(self):
        return self._get_field_value(47, 3)
    @slice.setter
    def slice(self, value):
        self._set_field_value('field slice', 47, 3, int, value)

class npl_pfc_congestion_state_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_congestion_state_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_congestion(self):
        return npl_pfc_congestion_state_table_update_congestion_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_congestion.setter
    def update_congestion(self, value):
        self._set_field_value('field update_congestion', 0, 40, npl_pfc_congestion_state_table_update_congestion_payload_t, value)

class npl_pfc_congestion_state_table_value_t(basic_npl_struct):
    def __init__(self, em_payload=0):
        super().__init__(48)
        self.payloads.update_congestion = npl_pfc_congestion_state_table_update_congestion_payload_t(em_payload)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_congestion_state_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(40, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 40, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_congestion_state_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 40, npl_pfc_congestion_state_table_payloads_t, value)



# API-s for table: pfc_destination_table

NPL_PFC_DESTINATION_TABLE_ACTION_WRITE = 0x0

class npl_pfc_destination_table_key_t(basic_npl_struct):
    def __init__(self, redirect2=0, redirect1=0, ssp2=0, ssp1=0):
        super().__init__(48)
        self.redirect2 = redirect2
        self.redirect1 = redirect1
        self.ssp2 = ssp2
        self.ssp1 = ssp1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_destination_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def redirect2(self):
        return self._get_field_value(0, 8)
    @redirect2.setter
    def redirect2(self, value):
        self._set_field_value('field redirect2', 0, 8, int, value)
    @property
    def redirect1(self):
        return self._get_field_value(8, 8)
    @redirect1.setter
    def redirect1(self, value):
        self._set_field_value('field redirect1', 8, 8, int, value)
    @property
    def ssp2(self):
        return self._get_field_value(16, 16)
    @ssp2.setter
    def ssp2(self, value):
        self._set_field_value('field ssp2', 16, 16, int, value)
    @property
    def ssp1(self):
        return self._get_field_value(32, 16)
    @ssp1.setter
    def ssp1(self, value):
        self._set_field_value('field ssp1', 32, 16, int, value)

class npl_pfc_destination_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_destination_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pfc_em_lookup_result(self):
        return npl_pfc_em_lookup_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pfc_em_lookup_result.setter
    def pfc_em_lookup_result(self, value):
        self._set_field_value('field pfc_em_lookup_result', 0, 40, npl_pfc_em_lookup_t, value)

class npl_pfc_destination_table_value_t(basic_npl_struct):
    def __init__(self, pfc_em_lookup_result=0):
        super().__init__(48)
        self.payloads.pfc_em_lookup_result = pfc_em_lookup_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_destination_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(40, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 40, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_destination_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 40, npl_pfc_destination_table_payloads_t, value)



# API-s for table: pfc_destination_table_compound

NPL_PFC_DESTINATION_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_pfc_destination_table_compound_key_t(basic_npl_struct):
    def __init__(self, redirect2=0, redirect1=0, ssp2=0, ssp1=0):
        super().__init__(56)
        self._set_field_value('const field', 0, 8, int, 0x5d)
        self.redirect2 = redirect2
        self.redirect1 = redirect1
        self.ssp2 = ssp2
        self.ssp1 = ssp1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_destination_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_EM_LDB_PFC_LKUP_exact_0x5d(self):
        return self._get_field_value(0, 8)
    @property
    def redirect2(self):
        return self._get_field_value(8, 8)
    @redirect2.setter
    def redirect2(self, value):
        self._set_field_value('field redirect2', 8, 8, int, value)
    @property
    def redirect1(self):
        return self._get_field_value(16, 8)
    @redirect1.setter
    def redirect1(self, value):
        self._set_field_value('field redirect1', 16, 8, int, value)
    @property
    def ssp2(self):
        return self._get_field_value(24, 16)
    @ssp2.setter
    def ssp2(self, value):
        self._set_field_value('field ssp2', 24, 16, int, value)
    @property
    def ssp1(self):
        return self._get_field_value(40, 16)
    @ssp1.setter
    def ssp1(self, value):
        self._set_field_value('field ssp1', 40, 16, int, value)

class npl_pfc_destination_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_destination_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pfc_em_compound_results(self):
        return npl_pfc_em_compound_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pfc_em_compound_results.setter
    def pfc_em_compound_results(self, value):
        self._set_field_value('field pfc_em_compound_results', 0, 40, npl_pfc_em_compound_results_t, value)

class npl_pfc_destination_table_compound_value_t(basic_npl_struct):
    def __init__(self, pfc_em_compound_results=0):
        super().__init__(48)
        self.payloads.pfc_em_compound_results = pfc_em_compound_results

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_destination_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(40, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 40, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_destination_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 40, npl_pfc_destination_table_compound_payloads_t, value)



# API-s for table: pfc_event_queue_compound_table

NPL_PFC_EVENT_QUEUE_COMPOUND_TABLE_ACTION_NO_OP = 0x0

class npl_pfc_event_queue_compound_table_key_t(basic_npl_struct):
    def __init__(self, destination=0, tc=0, cong_state=0, slice=0):
        super().__init__(22)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self._set_field_value('const field', 1, 2, int, 0x0)
        self.destination = destination
        self.tc = tc
        self.cong_state = cong_state
        self.slice = slice

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_event_queue_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def const2_NPUH_EVENTQ_PFC_ID_exact_0x0(self):
        return self._get_field_value(1, 2)
    @property
    def destination(self):
        return self._get_field_value(3, 12)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 3, 12, int, value)
    @property
    def tc(self):
        return self._get_field_value(15, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 15, 3, int, value)
    @property
    def cong_state(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 18)
    @cong_state.setter
    def cong_state(self, value):
        self._set_field_value('field cong_state', 18, 1, npl_bool_t, value)
    @property
    def slice(self):
        return self._get_field_value(19, 3)
    @slice.setter
    def slice(self, value):
        self._set_field_value('field slice', 19, 3, int, value)

class npl_pfc_event_queue_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_event_queue_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_pfc_event_queue_compound_table_value_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(8)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_event_queue_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_event_queue_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_pfc_event_queue_compound_table_payloads_t, value)



# API-s for table: pfc_event_queue_table

NPL_PFC_EVENT_QUEUE_TABLE_ACTION_NO_OP = 0x0

class npl_pfc_event_queue_table_key_t(basic_npl_struct):
    def __init__(self, destination=0, tc=0, cong_state=0, slice=0):
        super().__init__(22)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self._set_field_value('const field', 1, 2, int, 0x0)
        self.destination = destination
        self.tc = tc
        self.cong_state = cong_state
        self.slice = slice

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_event_queue_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def const2_NPUH_EVENTQ_PFC_ID_exact_0x0(self):
        return self._get_field_value(1, 2)
    @property
    def destination(self):
        return self._get_field_value(3, 12)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 3, 12, int, value)
    @property
    def tc(self):
        return self._get_field_value(15, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 15, 3, int, value)
    @property
    def cong_state(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 18)
    @cong_state.setter
    def cong_state(self, value):
        self._set_field_value('field cong_state', 18, 1, npl_bool_t, value)
    @property
    def slice(self):
        return self._get_field_value(19, 3)
    @slice.setter
    def slice(self, value):
        self._set_field_value('field slice', 19, 3, int, value)

class npl_pfc_event_queue_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_event_queue_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_pfc_event_queue_table_value_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(8)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_event_queue_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_event_queue_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_pfc_event_queue_table_payloads_t, value)



# API-s for table: pfc_filter_wd_table

NPL_PFC_FILTER_WD_TABLE_ACTION_PFC_FILTER_WD_ACTION = 0x0

class npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t(basic_npl_struct):
    def __init__(self, destination=0):
        super().__init__(20)
        self.destination = destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def destination(self):
        return self._get_field_value(0, 20)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 0, 20, int, value)




class npl_pfc_filter_wd_table_key_t(basic_npl_struct):
    def __init__(self, dsp=0, tc=0):
        super().__init__(15)
        self.dsp = dsp
        self.tc = tc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_filter_wd_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dsp(self):
        return self._get_field_value(0, 12)
    @dsp.setter
    def dsp(self, value):
        self._set_field_value('field dsp', 0, 12, int, value)
    @property
    def tc(self):
        return self._get_field_value(12, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 12, 3, int, value)

class npl_pfc_filter_wd_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_filter_wd_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pfc_filter_wd_action(self):
        return npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pfc_filter_wd_action.setter
    def pfc_filter_wd_action(self, value):
        self._set_field_value('field pfc_filter_wd_action', 0, 20, npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t, value)

class npl_pfc_filter_wd_table_value_t(basic_npl_struct):
    def __init__(self, destination=0):
        super().__init__(28)
        self.payloads.pfc_filter_wd_action = npl_pfc_filter_wd_table_pfc_filter_wd_action_payload_t(destination)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_filter_wd_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_filter_wd_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_pfc_filter_wd_table_payloads_t, value)



# API-s for table: pfc_mapping_compound_table

NPL_PFC_MAPPING_COMPOUND_TABLE_ACTION_UPDATE_MEP_ATTRIBUTES = 0x0

class npl_pfc_mapping_compound_table_update_mep_attributes_payload_t(basic_npl_struct):
    def __init__(self, mp_payload=0, aux=0):
        super().__init__(320)
        self.mp_payload = mp_payload
        self.aux = aux

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_mapping_compound_table_update_mep_attributes_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def mp_payload(self):
        return npl_pfc_mp_table_shared_payload_t._get_as_sub_field(self._data, self._offset_in_data + 160)
    @mp_payload.setter
    def mp_payload(self, value):
        self._set_field_value('field mp_payload', 160, 160, npl_pfc_mp_table_shared_payload_t, value)
    @property
    def aux(self):
        return npl_pfc_aux_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @aux.setter
    def aux(self, value):
        self._set_field_value('field aux', 0, 160, npl_pfc_aux_payload_t, value)




class npl_pfc_mapping_compound_table_key_t(basic_npl_struct):
    def __init__(self, mp_id=0):
        super().__init__(14)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self.mp_id = mp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_mapping_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def mp_id(self):
        return self._get_field_value(1, 13)
    @mp_id.setter
    def mp_id(self, value):
        self._set_field_value('field mp_id', 1, 13, int, value)

class npl_pfc_mapping_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(320)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_mapping_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_mep_attributes(self):
        return npl_pfc_mapping_compound_table_update_mep_attributes_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_mep_attributes.setter
    def update_mep_attributes(self, value):
        self._set_field_value('field update_mep_attributes', 0, 320, npl_pfc_mapping_compound_table_update_mep_attributes_payload_t, value)

class npl_pfc_mapping_compound_table_value_t(basic_npl_struct):
    def __init__(self, mp_payload=0, aux=0):
        super().__init__(328)
        self.payloads.update_mep_attributes = npl_pfc_mapping_compound_table_update_mep_attributes_payload_t(mp_payload, aux)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_mapping_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(320, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 320, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_mapping_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 320, npl_pfc_mapping_compound_table_payloads_t, value)



# API-s for table: pfc_offset_from_vector_static_table

NPL_PFC_OFFSET_FROM_VECTOR_STATIC_TABLE_ACTION_UPDATE_MIRROR_COMMANDS = 0x0

class npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t(basic_npl_struct):
    def __init__(self, offset=0, trap=0):
        super().__init__(5)
        self.offset = offset
        self.trap = trap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def offset(self):
        return npl_pfc_rx_counter_offset_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @offset.setter
    def offset(self, value):
        self._set_field_value('field offset', 1, 4, npl_pfc_rx_counter_offset_t, value)
    @property
    def trap(self):
        return self._get_field_value(0, 1)
    @trap.setter
    def trap(self, value):
        self._set_field_value('field trap', 0, 1, int, value)




class npl_pfc_offset_from_vector_static_table_key_t(basic_npl_struct):
    def __init__(self, vector=0):
        super().__init__(8)
        self.vector = vector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_offset_from_vector_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vector(self):
        return self._get_field_value(0, 8)
    @vector.setter
    def vector(self, value):
        self._set_field_value('field vector', 0, 8, int, value)

class npl_pfc_offset_from_vector_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(5)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_offset_from_vector_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_mirror_commands(self):
        return npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_mirror_commands.setter
    def update_mirror_commands(self, value):
        self._set_field_value('field update_mirror_commands', 0, 5, npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t, value)

class npl_pfc_offset_from_vector_static_table_value_t(basic_npl_struct):
    def __init__(self, offset=0, trap=0):
        super().__init__(13)
        self.payloads.update_mirror_commands = npl_pfc_offset_from_vector_static_table_update_mirror_commands_payload_t(offset, trap)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_offset_from_vector_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(5, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 5, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_offset_from_vector_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 5, npl_pfc_offset_from_vector_static_table_payloads_t, value)



# API-s for table: pfc_ssp_slice_map_table

NPL_PFC_SSP_SLICE_MAP_TABLE_ACTION_WRITE = 0x0

class npl_pfc_ssp_slice_map_table_key_t(basic_npl_struct):
    def __init__(self, ssp=0):
        super().__init__(16)
        self.ssp = ssp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_ssp_slice_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ssp(self):
        return self._get_field_value(0, 16)
    @ssp.setter
    def ssp(self, value):
        self._set_field_value('field ssp', 0, 16, int, value)

class npl_pfc_ssp_slice_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_ssp_slice_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pfc_ssp_info(self):
        return npl_pfc_ssp_info_table_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pfc_ssp_info.setter
    def pfc_ssp_info(self, value):
        self._set_field_value('field pfc_ssp_info', 0, 16, npl_pfc_ssp_info_table_t, value)

class npl_pfc_ssp_slice_map_table_value_t(basic_npl_struct):
    def __init__(self, pfc_ssp_info=0):
        super().__init__(24)
        self.payloads.pfc_ssp_info = pfc_ssp_info

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_ssp_slice_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_ssp_slice_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_pfc_ssp_slice_map_table_payloads_t, value)



# API-s for table: pfc_tc_latency_table

NPL_PFC_TC_LATENCY_TABLE_ACTION_WRITE = 0x0

class npl_pfc_tc_latency_table_key_t(basic_npl_struct):
    def __init__(self, tc=0):
        super().__init__(3)
        self.tc = tc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_tc_latency_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tc(self):
        return self._get_field_value(0, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 0, 3, int, value)

class npl_pfc_tc_latency_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_tc_latency_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pfc_latency_threshold(self):
        return npl_pfc_latency_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pfc_latency_threshold.setter
    def pfc_latency_threshold(self, value):
        self._set_field_value('field pfc_latency_threshold', 0, 16, npl_pfc_latency_t, value)

class npl_pfc_tc_latency_table_value_t(basic_npl_struct):
    def __init__(self, pfc_latency_threshold=0):
        super().__init__(24)
        self.payloads.pfc_latency_threshold = pfc_latency_threshold

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_tc_latency_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_tc_latency_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_pfc_tc_latency_table_payloads_t, value)



# API-s for table: pfc_tc_table

NPL_PFC_TC_TABLE_ACTION_WRITE = 0x0

class npl_pfc_tc_table_key_t(basic_npl_struct):
    def __init__(self, index=0, profile=0):
        super().__init__(4)
        self.index = index
        self.profile = profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_tc_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def index(self):
        return self._get_field_value(0, 2)
    @index.setter
    def index(self, value):
        self._set_field_value('field index', 0, 2, int, value)
    @property
    def profile(self):
        return self._get_field_value(2, 2)
    @profile.setter
    def profile(self, value):
        self._set_field_value('field profile', 2, 2, int, value)

class npl_pfc_tc_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_tc_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pfc_quanta_result(self):
        return npl_pfc_quanta_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pfc_quanta_result.setter
    def pfc_quanta_result(self, value):
        self._set_field_value('field pfc_quanta_result', 0, 32, npl_pfc_quanta_table_result_t, value)

class npl_pfc_tc_table_value_t(basic_npl_struct):
    def __init__(self, pfc_quanta_result=0):
        super().__init__(40)
        self.payloads.pfc_quanta_result = pfc_quanta_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_tc_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_tc_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_pfc_tc_table_payloads_t, value)



# API-s for table: pfc_tc_wrap_latency_table

NPL_PFC_TC_WRAP_LATENCY_TABLE_ACTION_WRITE = 0x0

class npl_pfc_tc_wrap_latency_table_key_t(basic_npl_struct):
    def __init__(self, tc=0):
        super().__init__(3)
        self.tc = tc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_tc_wrap_latency_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tc(self):
        return self._get_field_value(0, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 0, 3, int, value)

class npl_pfc_tc_wrap_latency_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_tc_wrap_latency_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pfc_wrap_latency_threshold(self):
        return npl_pfc_latency_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pfc_wrap_latency_threshold.setter
    def pfc_wrap_latency_threshold(self, value):
        self._set_field_value('field pfc_wrap_latency_threshold', 0, 16, npl_pfc_latency_t, value)

class npl_pfc_tc_wrap_latency_table_value_t(basic_npl_struct):
    def __init__(self, pfc_wrap_latency_threshold=0):
        super().__init__(24)
        self.payloads.pfc_wrap_latency_threshold = pfc_wrap_latency_threshold

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_tc_wrap_latency_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_tc_wrap_latency_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_pfc_tc_wrap_latency_table_payloads_t, value)



# API-s for table: pfc_vector_static_table

NPL_PFC_VECTOR_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_pfc_vector_static_table_key_t(basic_npl_struct):
    def __init__(self, tc=0):
        super().__init__(3)
        self.tc = tc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_vector_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tc(self):
        return self._get_field_value(0, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 0, 3, int, value)

class npl_pfc_vector_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_vector_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_pd_npu_host_receive_fields_pfc_priority_table_vector(self):
        return self._get_field_value(0, 8)
    @pd_pd_npu_host_receive_fields_pfc_priority_table_vector.setter
    def pd_pd_npu_host_receive_fields_pfc_priority_table_vector(self, value):
        self._set_field_value('field pd_pd_npu_host_receive_fields_pfc_priority_table_vector', 0, 8, int, value)

class npl_pfc_vector_static_table_value_t(basic_npl_struct):
    def __init__(self, pd_pd_npu_host_receive_fields_pfc_priority_table_vector=0):
        super().__init__(16)
        self.payloads.pd_pd_npu_host_receive_fields_pfc_priority_table_vector = pd_pd_npu_host_receive_fields_pfc_priority_table_vector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pfc_vector_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_pfc_vector_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_pfc_vector_static_table_payloads_t, value)



# API-s for table: pin_start_offset_macros

NPL_PIN_START_OFFSET_MACROS_ACTION_WRITE = 0x0

class npl_pin_start_offset_macros_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_pin_start_offset_macros_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_pin_start_offset_macros_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pin_start_offset_macros_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def select_macros(self):
        return npl_select_macros_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @select_macros.setter
    def select_macros(self, value):
        self._set_field_value('field select_macros', 0, 4, npl_select_macros_t, value)

class npl_pin_start_offset_macros_value_t(basic_npl_struct):
    def __init__(self, select_macros=0):
        super().__init__(12)
        self.payloads.select_macros = select_macros

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pin_start_offset_macros_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_pin_start_offset_macros_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_pin_start_offset_macros_payloads_t, value)



# API-s for table: pma_loopback_table

NPL_PMA_LOOPBACK_TABLE_ACTION_WRITE = 0x0

class npl_pma_loopback_table_key_t(basic_npl_struct):
    def __init__(self, device_packet_info_pif=0, device_packet_info_ifg=0):
        super().__init__(6)
        self.device_packet_info_pif = device_packet_info_pif
        self.device_packet_info_ifg = device_packet_info_ifg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pma_loopback_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def device_packet_info_pif(self):
        return self._get_field_value(0, 5)
    @device_packet_info_pif.setter
    def device_packet_info_pif(self, value):
        self._set_field_value('field device_packet_info_pif', 0, 5, int, value)
    @property
    def device_packet_info_ifg(self):
        return self._get_field_value(5, 1)
    @device_packet_info_ifg.setter
    def device_packet_info_ifg(self, value):
        self._set_field_value('field device_packet_info_ifg', 5, 1, int, value)

class npl_pma_loopback_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pma_loopback_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pma_loopback_data(self):
        return npl_pma_loopback_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pma_loopback_data.setter
    def pma_loopback_data(self, value):
        self._set_field_value('field pma_loopback_data', 0, 2, npl_pma_loopback_data_t, value)

class npl_pma_loopback_table_value_t(basic_npl_struct):
    def __init__(self, pma_loopback_data=0):
        super().__init__(10)
        self.payloads.pma_loopback_data = pma_loopback_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pma_loopback_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_pma_loopback_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_pma_loopback_table_payloads_t, value)



# API-s for table: port_dspa_group_size_table

NPL_PORT_DSPA_GROUP_SIZE_TABLE_ACTION_WRITE = 0x0

class npl_port_dspa_group_size_table_key_t(basic_npl_struct):
    def __init__(self, dspa=0):
        super().__init__(13)
        self.dspa = dspa

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_dspa_group_size_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dspa(self):
        return self._get_field_value(0, 13)
    @dspa.setter
    def dspa(self, value):
        self._set_field_value('field dspa', 0, 13, int, value)

class npl_port_dspa_group_size_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_dspa_group_size_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dspa_group_size_table_result(self):
        return npl_lb_group_size_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dspa_group_size_table_result.setter
    def dspa_group_size_table_result(self, value):
        self._set_field_value('field dspa_group_size_table_result', 0, 10, npl_lb_group_size_table_result_t, value)

class npl_port_dspa_group_size_table_value_t(basic_npl_struct):
    def __init__(self, dspa_group_size_table_result=0):
        super().__init__(18)
        self.payloads.dspa_group_size_table_result = dspa_group_size_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_dspa_group_size_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_port_dspa_group_size_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_port_dspa_group_size_table_payloads_t, value)



# API-s for table: port_dspa_table

NPL_PORT_DSPA_TABLE_ACTION_WRITE = 0x0

class npl_port_dspa_table_key_t(basic_npl_struct):
    def __init__(self, group_id=0, member_id=0):
        super().__init__(30)
        self.group_id = group_id
        self.member_id = member_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_dspa_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def group_id(self):
        return self._get_field_value(0, 14)
    @group_id.setter
    def group_id(self, value):
        self._set_field_value('field group_id', 0, 14, int, value)
    @property
    def member_id(self):
        return self._get_field_value(14, 16)
    @member_id.setter
    def member_id(self, value):
        self._set_field_value('field member_id', 14, 16, int, value)

class npl_port_dspa_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(15)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_dspa_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def port_dspa_result(self):
        return npl_port_dspa_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @port_dspa_result.setter
    def port_dspa_result(self, value):
        self._set_field_value('field port_dspa_result', 0, 15, npl_port_dspa_table_result_t, value)

class npl_port_dspa_table_value_t(basic_npl_struct):
    def __init__(self, port_dspa_result=0):
        super().__init__(23)
        self.payloads.port_dspa_result = port_dspa_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_dspa_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(15, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 15, 8, int, value)
    @property
    def payloads(self):
        return npl_port_dspa_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 15, npl_port_dspa_table_payloads_t, value)



# API-s for table: port_dspa_type_decoding_table

NPL_PORT_DSPA_TYPE_DECODING_TABLE_ACTION_WRITE = 0x0

class npl_port_dspa_type_decoding_table_key_t(basic_npl_struct):
    def __init__(self, type=0):
        super().__init__(1)
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_dspa_type_decoding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def type(self):
        return self._get_field_value(0, 1)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 0, 1, int, value)

class npl_port_dspa_type_decoding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(63)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_dspa_type_decoding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def port_dspa_type_decoding_table_result(self):
        return npl_resolution_type_decoding_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @port_dspa_type_decoding_table_result.setter
    def port_dspa_type_decoding_table_result(self, value):
        self._set_field_value('field port_dspa_type_decoding_table_result', 0, 63, npl_resolution_type_decoding_table_result_t, value)

class npl_port_dspa_type_decoding_table_value_t(basic_npl_struct):
    def __init__(self, port_dspa_type_decoding_table_result=0):
        super().__init__(71)
        self.payloads.port_dspa_type_decoding_table_result = port_dspa_type_decoding_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_dspa_type_decoding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(63, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 63, 8, int, value)
    @property
    def payloads(self):
        return npl_port_dspa_type_decoding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 63, npl_port_dspa_type_decoding_table_payloads_t, value)



# API-s for table: port_npp_protection_table

NPL_PORT_NPP_PROTECTION_TABLE_ACTION_PROTECTED_DATA = 0x0

class npl_port_npp_protection_table_protected_data_payload_t(basic_npl_struct):
    def __init__(self, data=0):
        super().__init__(92)
        self.data = data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_npp_protection_table_protected_data_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def data(self):
        return npl_port_npp_protection_table_result_protected_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @data.setter
    def data(self, value):
        self._set_field_value('field data', 0, 92, npl_port_npp_protection_table_result_protected_t, value)




class npl_port_npp_protection_table_key_t(basic_npl_struct):
    def __init__(self, npp_protection_id=0):
        super().__init__(10)
        self.npp_protection_id = npp_protection_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_npp_protection_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def npp_protection_id(self):
        return npl_npp_protection_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @npp_protection_id.setter
    def npp_protection_id(self, value):
        self._set_field_value('field npp_protection_id', 0, 10, npl_npp_protection_t, value)

class npl_port_npp_protection_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(92)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_npp_protection_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def protected_data(self):
        return npl_port_npp_protection_table_protected_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @protected_data.setter
    def protected_data(self, value):
        self._set_field_value('field protected_data', 0, 92, npl_port_npp_protection_table_protected_data_payload_t, value)

class npl_port_npp_protection_table_value_t(basic_npl_struct):
    def __init__(self, data=0):
        super().__init__(100)
        self.payloads.protected_data = npl_port_npp_protection_table_protected_data_payload_t(data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_npp_protection_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(92, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 92, 8, int, value)
    @property
    def payloads(self):
        return npl_port_npp_protection_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 92, npl_port_npp_protection_table_payloads_t, value)



# API-s for table: port_npp_protection_type_decoding_table

NPL_PORT_NPP_PROTECTION_TYPE_DECODING_TABLE_ACTION_WRITE = 0x0

class npl_port_npp_protection_type_decoding_table_key_t(basic_npl_struct):
    def __init__(self, type=0):
        super().__init__(2)
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_npp_protection_type_decoding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def type(self):
        return self._get_field_value(0, 2)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 0, 2, int, value)

class npl_port_npp_protection_type_decoding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(63)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_npp_protection_type_decoding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def port_npp_protection_type_decoding_table_result(self):
        return npl_resolution_type_decoding_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @port_npp_protection_type_decoding_table_result.setter
    def port_npp_protection_type_decoding_table_result(self, value):
        self._set_field_value('field port_npp_protection_type_decoding_table_result', 0, 63, npl_resolution_type_decoding_table_result_t, value)

class npl_port_npp_protection_type_decoding_table_value_t(basic_npl_struct):
    def __init__(self, port_npp_protection_type_decoding_table_result=0):
        super().__init__(71)
        self.payloads.port_npp_protection_type_decoding_table_result = port_npp_protection_type_decoding_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_npp_protection_type_decoding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(63, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 63, 8, int, value)
    @property
    def payloads(self):
        return npl_port_npp_protection_type_decoding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 63, npl_port_npp_protection_type_decoding_table_payloads_t, value)



# API-s for table: port_protection_table

NPL_PORT_PROTECTION_TABLE_ACTION_WRITE = 0x0

class npl_port_protection_table_key_t(basic_npl_struct):
    def __init__(self, id=0):
        super().__init__(10)
        self.id = id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_protection_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def id(self):
        return npl_port_protection_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @id.setter
    def id(self, value):
        self._set_field_value('field id', 0, 10, npl_port_protection_id_t, value)

class npl_port_protection_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_protection_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def port_protection_table_result(self):
        return npl_protection_selector_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @port_protection_table_result.setter
    def port_protection_table_result(self, value):
        self._set_field_value('field port_protection_table_result', 0, 1, npl_protection_selector_t, value)

class npl_port_protection_table_value_t(basic_npl_struct):
    def __init__(self, port_protection_table_result=0):
        super().__init__(9)
        self.payloads.port_protection_table_result = port_protection_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_port_protection_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_port_protection_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_port_protection_table_payloads_t, value)



# API-s for table: punt_eth_encap_table_compound

NPL_PUNT_ETH_ENCAP_TABLE_COMPOUND_ACTION_FOUND = 0x0

class npl_punt_eth_encap_table_compound_found_payload_t(basic_npl_struct):
    def __init__(self, eth_pcp_dei=0, punt_eth_or_npu_host_encap=0):
        super().__init__(128)
        self.eth_pcp_dei = eth_pcp_dei
        self.punt_eth_or_npu_host_encap = punt_eth_or_npu_host_encap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_eth_encap_table_compound_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def eth_pcp_dei(self):
        return npl_pcp_dei_t._get_as_sub_field(self._data, self._offset_in_data + 124)
    @eth_pcp_dei.setter
    def eth_pcp_dei(self, value):
        self._set_field_value('field eth_pcp_dei', 124, 4, npl_pcp_dei_t, value)
    @property
    def punt_eth_or_npu_host_encap(self):
        return npl_tx_punt_local_var_t_anonymous_union_ene_eth_or_npu_host_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @punt_eth_or_npu_host_encap.setter
    def punt_eth_or_npu_host_encap(self, value):
        self._set_field_value('field punt_eth_or_npu_host_encap', 0, 124, npl_tx_punt_local_var_t_anonymous_union_ene_eth_or_npu_host_data_t, value)




class npl_punt_eth_encap_table_compound_key_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_punt_nw_encap_ptr=0):
        super().__init__(9)
        self._set_field_value('const field', 8, 1, int, 0x1)
        self.tx_punt_local_var_punt_nw_encap_ptr = tx_punt_local_var_punt_nw_encap_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_eth_encap_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_punt_nw_encap_ptr(self):
        return npl_punt_nw_encap_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_punt_local_var_punt_nw_encap_ptr.setter
    def tx_punt_local_var_punt_nw_encap_ptr(self, value):
        self._set_field_value('field tx_punt_local_var_punt_nw_encap_ptr', 0, 8, npl_punt_nw_encap_ptr_t, value)
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(8, 1)

class npl_punt_eth_encap_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(128)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_eth_encap_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def found(self):
        return npl_punt_eth_encap_table_compound_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @found.setter
    def found(self, value):
        self._set_field_value('field found', 0, 128, npl_punt_eth_encap_table_compound_found_payload_t, value)

class npl_punt_eth_encap_table_compound_value_t(basic_npl_struct):
    def __init__(self, eth_pcp_dei=0, punt_eth_or_npu_host_encap=0):
        super().__init__(136)
        self.payloads.found = npl_punt_eth_encap_table_compound_found_payload_t(eth_pcp_dei, punt_eth_or_npu_host_encap)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_eth_encap_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(128, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 128, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_eth_encap_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 128, npl_punt_eth_encap_table_compound_payloads_t, value)



# API-s for table: punt_ethertype_static_table

NPL_PUNT_ETHERTYPE_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_punt_ethertype_static_table_key_t(basic_npl_struct):
    def __init__(self, punt_format=0, punt_nw_encap_type=0):
        super().__init__(5)
        self.punt_format = punt_format
        self.punt_nw_encap_type = punt_nw_encap_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_ethertype_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def punt_format(self):
        return self._get_field_value(0, 2)
    @punt_format.setter
    def punt_format(self, value):
        self._set_field_value('field punt_format', 0, 2, int, value)
    @property
    def punt_nw_encap_type(self):
        return self._get_field_value(2, 3)
    @punt_nw_encap_type.setter
    def punt_nw_encap_type(self, value):
        self._set_field_value('field punt_nw_encap_type', 2, 3, int, value)

class npl_punt_ethertype_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_ethertype_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_ene_encap_data_punt_ethertype(self):
        return self._get_field_value(0, 16)
    @pd_ene_encap_data_punt_ethertype.setter
    def pd_ene_encap_data_punt_ethertype(self, value):
        self._set_field_value('field pd_ene_encap_data_punt_ethertype', 0, 16, int, value)

class npl_punt_ethertype_static_table_value_t(basic_npl_struct):
    def __init__(self, pd_ene_encap_data_punt_ethertype=0):
        super().__init__(24)
        self.payloads.pd_ene_encap_data_punt_ethertype = pd_ene_encap_data_punt_ethertype

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_ethertype_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_ethertype_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_punt_ethertype_static_table_payloads_t, value)



# API-s for table: punt_l2_dlp_slp_and_header_type_pack_table

NPL_PUNT_L2_DLP_SLP_AND_HEADER_TYPE_PACK_TABLE_ACTION_WRITE = 0x0

class npl_punt_l2_dlp_slp_and_header_type_pack_table_key_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_l2_dlp_l2_lp_id=0, tx_npu_header_fwd_slp_info_global_slp_id_l2_slp_id=0, tx_punt_local_var_bytes_to_remove=0):
        super().__init__(48)
        self._set_field_value('const field', 18, 1, int, 0x0)
        self._set_field_value('const field', 19, 1, int, 0x0)
        self._set_field_value('const field', 38, 1, int, 0x0)
        self._set_field_value('const field', 39, 1, int, 0x1)
        self.tx_punt_local_var_l2_dlp_l2_lp_id = tx_punt_local_var_l2_dlp_l2_lp_id
        self.tx_npu_header_fwd_slp_info_global_slp_id_l2_slp_id = tx_npu_header_fwd_slp_info_global_slp_id_l2_slp_id
        self.tx_punt_local_var_bytes_to_remove = tx_punt_local_var_bytes_to_remove

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_l2_dlp_slp_and_header_type_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_l2_dlp_l2_lp_id(self):
        return self._get_field_value(0, 18)
    @tx_punt_local_var_l2_dlp_l2_lp_id.setter
    def tx_punt_local_var_l2_dlp_l2_lp_id(self, value):
        self._set_field_value('field tx_punt_local_var_l2_dlp_l2_lp_id', 0, 18, int, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(18, 1)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(19, 1)
    @property
    def tx_npu_header_fwd_slp_info_global_slp_id_l2_slp_id(self):
        return self._get_field_value(20, 18)
    @tx_npu_header_fwd_slp_info_global_slp_id_l2_slp_id.setter
    def tx_npu_header_fwd_slp_info_global_slp_id_l2_slp_id(self, value):
        self._set_field_value('field tx_npu_header_fwd_slp_info_global_slp_id_l2_slp_id', 20, 18, int, value)
    @property
    def const3_PUNT_HEADER_L2_SLP_ENCODING_18__exact_0x0(self):
        return self._get_field_value(38, 1)
    @property
    def const4_PUNT_HEADER_L2_SLP_ENCODING_19__exact_0x1(self):
        return self._get_field_value(39, 1)
    @property
    def tx_punt_local_var_bytes_to_remove(self):
        return self._get_field_value(40, 8)
    @tx_punt_local_var_bytes_to_remove.setter
    def tx_punt_local_var_bytes_to_remove(self, value):
        self._set_field_value('field tx_punt_local_var_bytes_to_remove', 40, 8, int, value)

class npl_punt_l2_dlp_slp_and_header_type_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_l2_dlp_slp_and_header_type_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload(self):
        return npl_ene_punt_encap_data_and_misc_pack_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload.setter
    def tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload', 0, 48, npl_ene_punt_encap_data_and_misc_pack_payload_t, value)

class npl_punt_l2_dlp_slp_and_header_type_pack_table_value_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload=0):
        super().__init__(56)
        self.payloads.tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload = tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_l2_dlp_slp_and_header_type_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_l2_dlp_slp_and_header_type_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_punt_l2_dlp_slp_and_header_type_pack_table_payloads_t, value)



# API-s for table: punt_l3_dlp_slp_and_header_type_pack_table

NPL_PUNT_L3_DLP_SLP_AND_HEADER_TYPE_PACK_TABLE_ACTION_WRITE = 0x0

class npl_punt_l3_dlp_slp_and_header_type_pack_table_key_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs=0, tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_msbs=0, tx_npu_header_fwd_slp_info_global_slp_id_l3_slp=0, tx_punt_local_var_bytes_to_remove=0):
        super().__init__(48)
        self._set_field_value('const field', 14, 6, int, 0x0)
        self._set_field_value('const field', 36, 4, int, 0x0)
        self.tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs = tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs
        self.tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_msbs = tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_msbs
        self.tx_npu_header_fwd_slp_info_global_slp_id_l3_slp = tx_npu_header_fwd_slp_info_global_slp_id_l3_slp
        self.tx_punt_local_var_bytes_to_remove = tx_punt_local_var_bytes_to_remove

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_l3_dlp_slp_and_header_type_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs(self):
        return self._get_field_value(0, 12)
    @tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs.setter
    def tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs(self, value):
        self._set_field_value('field tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs', 0, 12, int, value)
    @property
    def tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_msbs(self):
        return npl_no_acls_t._get_as_sub_field(self._data, self._offset_in_data + 12)
    @tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_msbs.setter
    def tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_msbs(self, value):
        self._set_field_value('field tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_msbs', 12, 2, npl_no_acls_t, value)
    @property
    def const1_6b0_exact_0x0(self):
        return self._get_field_value(14, 6)
    @property
    def tx_npu_header_fwd_slp_info_global_slp_id_l3_slp(self):
        return npl_l3_global_slp_t._get_as_sub_field(self._data, self._offset_in_data + 20)
    @tx_npu_header_fwd_slp_info_global_slp_id_l3_slp.setter
    def tx_npu_header_fwd_slp_info_global_slp_id_l3_slp(self, value):
        self._set_field_value('field tx_npu_header_fwd_slp_info_global_slp_id_l3_slp', 20, 16, npl_l3_global_slp_t, value)
    @property
    def const2_PUNT_HEADER_L3_SLP_ENCODING_19_16__exact_0x0(self):
        return self._get_field_value(36, 4)
    @property
    def tx_punt_local_var_bytes_to_remove(self):
        return self._get_field_value(40, 8)
    @tx_punt_local_var_bytes_to_remove.setter
    def tx_punt_local_var_bytes_to_remove(self, value):
        self._set_field_value('field tx_punt_local_var_bytes_to_remove', 40, 8, int, value)

class npl_punt_l3_dlp_slp_and_header_type_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_l3_dlp_slp_and_header_type_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload(self):
        return npl_ene_punt_encap_data_and_misc_pack_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload.setter
    def tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload', 0, 48, npl_ene_punt_encap_data_and_misc_pack_payload_t, value)

class npl_punt_l3_dlp_slp_and_header_type_pack_table_value_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload=0):
        super().__init__(56)
        self.payloads.tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload = tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_l3_dlp_slp_and_header_type_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_l3_dlp_slp_and_header_type_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_punt_l3_dlp_slp_and_header_type_pack_table_payloads_t, value)



# API-s for table: punt_l3_dlp_tc_slp_and_header_type_pack_table

NPL_PUNT_L3_DLP_TC_SLP_AND_HEADER_TYPE_PACK_TABLE_ACTION_WRITE = 0x0

class npl_punt_l3_dlp_tc_slp_and_header_type_pack_table_key_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs=0, tx_punt_local_var_l3_dlp_l3_lp_tc=0, tx_npu_header_fwd_slp_info_global_slp_id_l3_slp=0, tx_punt_local_var_bytes_to_remove=0):
        super().__init__(48)
        self._set_field_value('const field', 15, 1, int, 0x0)
        self._set_field_value('const field', 16, 4, int, 0x0)
        self._set_field_value('const field', 36, 4, int, 0x0)
        self.tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs = tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs
        self.tx_punt_local_var_l3_dlp_l3_lp_tc = tx_punt_local_var_l3_dlp_l3_lp_tc
        self.tx_npu_header_fwd_slp_info_global_slp_id_l3_slp = tx_npu_header_fwd_slp_info_global_slp_id_l3_slp
        self.tx_punt_local_var_bytes_to_remove = tx_punt_local_var_bytes_to_remove

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_l3_dlp_tc_slp_and_header_type_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs(self):
        return self._get_field_value(0, 12)
    @tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs.setter
    def tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs(self, value):
        self._set_field_value('field tx_punt_local_var_l3_dlp_l3_lp_l3_dlp_lsbs', 0, 12, int, value)
    @property
    def tx_punt_local_var_l3_dlp_l3_lp_tc(self):
        return self._get_field_value(12, 3)
    @tx_punt_local_var_l3_dlp_l3_lp_tc.setter
    def tx_punt_local_var_l3_dlp_l3_lp_tc(self, value):
        self._set_field_value('field tx_punt_local_var_l3_dlp_l3_lp_tc', 12, 3, int, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(15, 1)
    @property
    def const2_4b0_exact_0x0(self):
        return self._get_field_value(16, 4)
    @property
    def tx_npu_header_fwd_slp_info_global_slp_id_l3_slp(self):
        return npl_l3_global_slp_t._get_as_sub_field(self._data, self._offset_in_data + 20)
    @tx_npu_header_fwd_slp_info_global_slp_id_l3_slp.setter
    def tx_npu_header_fwd_slp_info_global_slp_id_l3_slp(self, value):
        self._set_field_value('field tx_npu_header_fwd_slp_info_global_slp_id_l3_slp', 20, 16, npl_l3_global_slp_t, value)
    @property
    def const3_PUNT_HEADER_L3_SLP_ENCODING_19_16__exact_0x0(self):
        return self._get_field_value(36, 4)
    @property
    def tx_punt_local_var_bytes_to_remove(self):
        return self._get_field_value(40, 8)
    @tx_punt_local_var_bytes_to_remove.setter
    def tx_punt_local_var_bytes_to_remove(self, value):
        self._set_field_value('field tx_punt_local_var_bytes_to_remove', 40, 8, int, value)

class npl_punt_l3_dlp_tc_slp_and_header_type_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_l3_dlp_tc_slp_and_header_type_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload(self):
        return npl_ene_punt_encap_data_and_misc_pack_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload.setter
    def tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload(self, value):
        self._set_field_value('field tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload', 0, 48, npl_ene_punt_encap_data_and_misc_pack_payload_t, value)

class npl_punt_l3_dlp_tc_slp_and_header_type_pack_table_value_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload=0):
        super().__init__(56)
        self.payloads.tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload = tx_punt_local_var_ene_punt_encap_data_and_misc_pack_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_l3_dlp_tc_slp_and_header_type_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_l3_dlp_tc_slp_and_header_type_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_punt_l3_dlp_tc_slp_and_header_type_pack_table_payloads_t, value)



# API-s for table: punt_rcy_inject_header_ene_encap_table

NPL_PUNT_RCY_INJECT_HEADER_ENE_ENCAP_TABLE_ACTION_FOUND = 0x0

class npl_punt_rcy_inject_header_ene_encap_table_found_payload_t(basic_npl_struct):
    def __init__(self, ene_inject_down_payload=0):
        super().__init__(28)
        self.ene_inject_down_payload = ene_inject_down_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_rcy_inject_header_ene_encap_table_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ene_inject_down_payload(self):
        return npl_ene_inject_down_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ene_inject_down_payload.setter
    def ene_inject_down_payload(self, value):
        self._set_field_value('field ene_inject_down_payload', 0, 28, npl_ene_inject_down_payload_t, value)




class npl_punt_rcy_inject_header_ene_encap_table_key_t(basic_npl_struct):
    def __init__(self, punt_nw_encap_ptr=0):
        super().__init__(8)
        self.punt_nw_encap_ptr = punt_nw_encap_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_rcy_inject_header_ene_encap_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def punt_nw_encap_ptr(self):
        return npl_punt_nw_encap_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @punt_nw_encap_ptr.setter
    def punt_nw_encap_ptr(self, value):
        self._set_field_value('field punt_nw_encap_ptr', 0, 8, npl_punt_nw_encap_ptr_t, value)

class npl_punt_rcy_inject_header_ene_encap_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_rcy_inject_header_ene_encap_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def found(self):
        return npl_punt_rcy_inject_header_ene_encap_table_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @found.setter
    def found(self, value):
        self._set_field_value('field found', 0, 28, npl_punt_rcy_inject_header_ene_encap_table_found_payload_t, value)

class npl_punt_rcy_inject_header_ene_encap_table_value_t(basic_npl_struct):
    def __init__(self, ene_inject_down_payload=0):
        super().__init__(36)
        self.payloads.found = npl_punt_rcy_inject_header_ene_encap_table_found_payload_t(ene_inject_down_payload)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_rcy_inject_header_ene_encap_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(28, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 28, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_rcy_inject_header_ene_encap_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 28, npl_punt_rcy_inject_header_ene_encap_table_payloads_t, value)



# API-s for table: punt_select_nw_ene_static_table

NPL_PUNT_SELECT_NW_ENE_STATIC_TABLE_ACTION_TX_PUNT_SET_ENE_MACRO = 0x0

class npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t(basic_npl_struct):
    def __init__(self, first_ene_macro=0, ene_macro_0=0, ene_macro_1=0, ene_macro_2=0):
        super().__init__(32)
        self.first_ene_macro = first_ene_macro
        self.ene_macro_0 = ene_macro_0
        self.ene_macro_1 = ene_macro_1
        self.ene_macro_2 = ene_macro_2

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def first_ene_macro(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 24)
    @first_ene_macro.setter
    def first_ene_macro(self, value):
        self._set_field_value('field first_ene_macro', 24, 8, npl_ene_macro_id_t, value)
    @property
    def ene_macro_0(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @ene_macro_0.setter
    def ene_macro_0(self, value):
        self._set_field_value('field ene_macro_0', 16, 8, npl_ene_macro_id_t, value)
    @property
    def ene_macro_1(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @ene_macro_1.setter
    def ene_macro_1(self, value):
        self._set_field_value('field ene_macro_1', 8, 8, npl_ene_macro_id_t, value)
    @property
    def ene_macro_2(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ene_macro_2.setter
    def ene_macro_2(self, value):
        self._set_field_value('field ene_macro_2', 0, 8, npl_ene_macro_id_t, value)




class npl_punt_select_nw_ene_static_table_key_t(basic_npl_struct):
    def __init__(self, punt_nw_encap_type=0, is_punt_rcy=0):
        super().__init__(5)
        self.punt_nw_encap_type = punt_nw_encap_type
        self.is_punt_rcy = is_punt_rcy

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_select_nw_ene_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def punt_nw_encap_type(self):
        return self._get_field_value(0, 4)
    @punt_nw_encap_type.setter
    def punt_nw_encap_type(self, value):
        self._set_field_value('field punt_nw_encap_type', 0, 4, int, value)
    @property
    def is_punt_rcy(self):
        return self._get_field_value(4, 1)
    @is_punt_rcy.setter
    def is_punt_rcy(self, value):
        self._set_field_value('field is_punt_rcy', 4, 1, int, value)

class npl_punt_select_nw_ene_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_select_nw_ene_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_punt_set_ene_macro(self):
        return npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_punt_set_ene_macro.setter
    def tx_punt_set_ene_macro(self, value):
        self._set_field_value('field tx_punt_set_ene_macro', 0, 32, npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t, value)

class npl_punt_select_nw_ene_static_table_value_t(basic_npl_struct):
    def __init__(self, first_ene_macro=0, ene_macro_0=0, ene_macro_1=0, ene_macro_2=0):
        super().__init__(40)
        self.payloads.tx_punt_set_ene_macro = npl_punt_select_nw_ene_static_table_tx_punt_set_ene_macro_payload_t(first_ene_macro, ene_macro_0, ene_macro_1, ene_macro_2)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_select_nw_ene_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_select_nw_ene_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_punt_select_nw_ene_static_table_payloads_t, value)



# API-s for table: punt_tunnel_transport_encap_table

NPL_PUNT_TUNNEL_TRANSPORT_ENCAP_TABLE_ACTION_IP_GRE = 0x0

class npl_punt_tunnel_transport_encap_table_ip_gre_payload_t(basic_npl_struct):
    def __init__(self, tos=0, ip_encap_data=0):
        super().__init__(120)
        self.tos = tos
        self.ip_encap_data = ip_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_encap_table_ip_gre_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def tos(self):
        return self._get_field_value(112, 8)
    @tos.setter
    def tos(self, value):
        self._set_field_value('field tos', 112, 8, int, value)
    @property
    def ip_encap_data(self):
        return npl_ip_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_encap_data.setter
    def ip_encap_data(self, value):
        self._set_field_value('field ip_encap_data', 0, 112, npl_ip_encap_data_t, value)




class npl_punt_tunnel_transport_encap_table_key_t(basic_npl_struct):
    def __init__(self, punt_nw_encap_ptr=0):
        super().__init__(8)
        self.punt_nw_encap_ptr = punt_nw_encap_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_encap_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def punt_nw_encap_ptr(self):
        return npl_punt_nw_encap_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @punt_nw_encap_ptr.setter
    def punt_nw_encap_ptr(self, value):
        self._set_field_value('field punt_nw_encap_ptr', 0, 8, npl_punt_nw_encap_ptr_t, value)

class npl_punt_tunnel_transport_encap_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_encap_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_gre(self):
        return npl_punt_tunnel_transport_encap_table_ip_gre_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_gre.setter
    def ip_gre(self, value):
        self._set_field_value('field ip_gre', 0, 120, npl_punt_tunnel_transport_encap_table_ip_gre_payload_t, value)

class npl_punt_tunnel_transport_encap_table_value_t(basic_npl_struct):
    def __init__(self, tos=0, ip_encap_data=0):
        super().__init__(128)
        self.payloads.ip_gre = npl_punt_tunnel_transport_encap_table_ip_gre_payload_t(tos, ip_encap_data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_encap_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_tunnel_transport_encap_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_punt_tunnel_transport_encap_table_payloads_t, value)



# API-s for table: punt_tunnel_transport_encap_table_compound

NPL_PUNT_TUNNEL_TRANSPORT_ENCAP_TABLE_COMPOUND_ACTION_IP_GRE = 0x0

class npl_punt_tunnel_transport_encap_table_compound_ip_gre_payload_t(basic_npl_struct):
    def __init__(self, tos=0, ip_encap_data=0):
        super().__init__(120)
        self.tos = tos
        self.ip_encap_data = ip_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_encap_table_compound_ip_gre_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def tos(self):
        return self._get_field_value(112, 8)
    @tos.setter
    def tos(self, value):
        self._set_field_value('field tos', 112, 8, int, value)
    @property
    def ip_encap_data(self):
        return npl_ip_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_encap_data.setter
    def ip_encap_data(self, value):
        self._set_field_value('field ip_encap_data', 0, 112, npl_ip_encap_data_t, value)




class npl_punt_tunnel_transport_encap_table_compound_key_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_punt_nw_encap_ptr=0):
        super().__init__(14)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0x9)
        self.tx_punt_local_var_punt_nw_encap_ptr = tx_punt_local_var_punt_nw_encap_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_encap_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_TX_PUNT_GRE_TABLE_LDB_exact_0x9(self):
        return self._get_field_value(2, 4)
    @property
    def tx_punt_local_var_punt_nw_encap_ptr(self):
        return npl_punt_nw_encap_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 6)
    @tx_punt_local_var_punt_nw_encap_ptr.setter
    def tx_punt_local_var_punt_nw_encap_ptr(self, value):
        self._set_field_value('field tx_punt_local_var_punt_nw_encap_ptr', 6, 8, npl_punt_nw_encap_ptr_t, value)

class npl_punt_tunnel_transport_encap_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_encap_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_gre(self):
        return npl_punt_tunnel_transport_encap_table_compound_ip_gre_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ip_gre.setter
    def ip_gre(self, value):
        self._set_field_value('field ip_gre', 0, 120, npl_punt_tunnel_transport_encap_table_compound_ip_gre_payload_t, value)

class npl_punt_tunnel_transport_encap_table_compound_value_t(basic_npl_struct):
    def __init__(self, tos=0, ip_encap_data=0):
        super().__init__(128)
        self.payloads.ip_gre = npl_punt_tunnel_transport_encap_table_compound_ip_gre_payload_t(tos, ip_encap_data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_encap_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_tunnel_transport_encap_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_punt_tunnel_transport_encap_table_compound_payloads_t, value)



# API-s for table: punt_tunnel_transport_extended_encap_table

NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE_ACTION_WRITE = 0x0

class npl_punt_tunnel_transport_extended_encap_table_key_t(basic_npl_struct):
    def __init__(self, punt_nw_encap_ptr=0):
        super().__init__(8)
        self.punt_nw_encap_ptr = punt_nw_encap_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def punt_nw_encap_ptr(self):
        return npl_punt_nw_encap_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @punt_nw_encap_ptr.setter
    def punt_nw_encap_ptr(self, value):
        self._set_field_value('field punt_nw_encap_ptr', 0, 8, npl_punt_nw_encap_ptr_t, value)

class npl_punt_tunnel_transport_extended_encap_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def extended_encap_data(self):
        return npl_extended_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @extended_encap_data.setter
    def extended_encap_data(self, value):
        self._set_field_value('field extended_encap_data', 0, 80, npl_extended_encap_data_t, value)

class npl_punt_tunnel_transport_extended_encap_table_value_t(basic_npl_struct):
    def __init__(self, extended_encap_data=0):
        super().__init__(88)
        self.payloads.extended_encap_data = extended_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_tunnel_transport_extended_encap_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_punt_tunnel_transport_extended_encap_table_payloads_t, value)



# API-s for table: punt_tunnel_transport_extended_encap_table2

NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE2_ACTION_WRITE = 0x0

class npl_punt_tunnel_transport_extended_encap_table2_key_t(basic_npl_struct):
    def __init__(self, punt_nw_encap_ptr=0):
        super().__init__(10)
        self._set_field_value('const field', 0, 2, int, 0x0)
        self.punt_nw_encap_ptr = punt_nw_encap_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table2_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b0_exact_0x0(self):
        return self._get_field_value(0, 2)
    @property
    def punt_nw_encap_ptr(self):
        return npl_punt_nw_encap_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @punt_nw_encap_ptr.setter
    def punt_nw_encap_ptr(self, value):
        self._set_field_value('field punt_nw_encap_ptr', 2, 8, npl_punt_nw_encap_ptr_t, value)

class npl_punt_tunnel_transport_extended_encap_table2_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table2_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def extended_encap_data2(self):
        return npl_extended_encap_data2_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @extended_encap_data2.setter
    def extended_encap_data2(self, value):
        self._set_field_value('field extended_encap_data2', 0, 48, npl_extended_encap_data2_t, value)

class npl_punt_tunnel_transport_extended_encap_table2_value_t(basic_npl_struct):
    def __init__(self, extended_encap_data2=0):
        super().__init__(56)
        self.payloads.extended_encap_data2 = extended_encap_data2

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table2_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_tunnel_transport_extended_encap_table2_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_punt_tunnel_transport_extended_encap_table2_payloads_t, value)



# API-s for table: punt_tunnel_transport_extended_encap_table2_compound

NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE2_COMPOUND_ACTION_WRITE = 0x0

class npl_punt_tunnel_transport_extended_encap_table2_compound_key_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_punt_nw_encap_ptr=0):
        super().__init__(12)
        self._set_field_value('const field', 0, 1, int, 0x0)
        self._set_field_value('const field', 1, 3, int, 0x0)
        self.tx_punt_local_var_punt_nw_encap_ptr = tx_punt_local_var_punt_nw_encap_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table2_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)
    @property
    def const2_3b0_exact_0x0(self):
        return self._get_field_value(1, 3)
    @property
    def tx_punt_local_var_punt_nw_encap_ptr(self):
        return npl_punt_nw_encap_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @tx_punt_local_var_punt_nw_encap_ptr.setter
    def tx_punt_local_var_punt_nw_encap_ptr(self, value):
        self._set_field_value('field tx_punt_local_var_punt_nw_encap_ptr', 4, 8, npl_punt_nw_encap_ptr_t, value)

class npl_punt_tunnel_transport_extended_encap_table2_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table2_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def extended_encap_data2(self):
        return npl_extended_encap_data2_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @extended_encap_data2.setter
    def extended_encap_data2(self, value):
        self._set_field_value('field extended_encap_data2', 0, 48, npl_extended_encap_data2_t, value)

class npl_punt_tunnel_transport_extended_encap_table2_compound_value_t(basic_npl_struct):
    def __init__(self, extended_encap_data2=0):
        super().__init__(56)
        self.payloads.extended_encap_data2 = extended_encap_data2

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table2_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_tunnel_transport_extended_encap_table2_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_punt_tunnel_transport_extended_encap_table2_compound_payloads_t, value)



# API-s for table: punt_tunnel_transport_extended_encap_table_compound

NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_punt_tunnel_transport_extended_encap_table_compound_key_t(basic_npl_struct):
    def __init__(self, tx_punt_local_var_punt_nw_encap_ptr=0):
        super().__init__(14)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0x6)
        self.tx_punt_local_var_punt_nw_encap_ptr = tx_punt_local_var_punt_nw_encap_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_SMALL_EM_TX_PUNT_EXTENDED_ENCAP_LDB_exact_0x6(self):
        return self._get_field_value(2, 4)
    @property
    def tx_punt_local_var_punt_nw_encap_ptr(self):
        return npl_punt_nw_encap_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 6)
    @tx_punt_local_var_punt_nw_encap_ptr.setter
    def tx_punt_local_var_punt_nw_encap_ptr(self, value):
        self._set_field_value('field tx_punt_local_var_punt_nw_encap_ptr', 6, 8, npl_punt_nw_encap_ptr_t, value)

class npl_punt_tunnel_transport_extended_encap_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def extended_encap_data(self):
        return npl_extended_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @extended_encap_data.setter
    def extended_encap_data(self, value):
        self._set_field_value('field extended_encap_data', 0, 80, npl_extended_encap_data_t, value)

class npl_punt_tunnel_transport_extended_encap_table_compound_value_t(basic_npl_struct):
    def __init__(self, extended_encap_data=0):
        super().__init__(88)
        self.payloads.extended_encap_data = extended_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_punt_tunnel_transport_extended_encap_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_punt_tunnel_transport_extended_encap_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_punt_tunnel_transport_extended_encap_table_compound_payloads_t, value)



# API-s for table: pwe_label_table

NPL_PWE_LABEL_TABLE_ACTION_WRITE = 0x0

class npl_pwe_label_table_key_t(basic_npl_struct):
    def __init__(self, pwe_id=0):
        super().__init__(14)
        self.pwe_id = pwe_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_label_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pwe_id(self):
        return self._get_field_value(0, 14)
    @pwe_id.setter
    def pwe_id(self, value):
        self._set_field_value('field pwe_id', 0, 14, int, value)

class npl_pwe_label_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(76)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_label_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vpn_encap_data(self):
        return npl_vpn_label_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vpn_encap_data.setter
    def vpn_encap_data(self, value):
        self._set_field_value('field vpn_encap_data', 0, 76, npl_vpn_label_encap_data_t, value)

class npl_pwe_label_table_value_t(basic_npl_struct):
    def __init__(self, vpn_encap_data=0):
        super().__init__(84)
        self.payloads.vpn_encap_data = vpn_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_label_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(76, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 76, 8, int, value)
    @property
    def payloads(self):
        return npl_pwe_label_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 76, npl_pwe_label_table_payloads_t, value)



# API-s for table: pwe_label_table_compound

NPL_PWE_LABEL_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_pwe_label_table_compound_key_t(basic_npl_struct):
    def __init__(self, tx_npu_header_pwe_id=0):
        super().__init__(20)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0xc)
        self.tx_npu_header_pwe_id = tx_npu_header_pwe_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_label_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_L2_VPN_LDB_exact_0xc(self):
        return self._get_field_value(2, 4)
    @property
    def tx_npu_header_pwe_id(self):
        return self._get_field_value(6, 14)
    @tx_npu_header_pwe_id.setter
    def tx_npu_header_pwe_id(self, value):
        self._set_field_value('field tx_npu_header_pwe_id', 6, 14, int, value)

class npl_pwe_label_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(76)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_label_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vpn_encap_data(self):
        return npl_vpn_label_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vpn_encap_data.setter
    def vpn_encap_data(self, value):
        self._set_field_value('field vpn_encap_data', 0, 76, npl_vpn_label_encap_data_t, value)

class npl_pwe_label_table_compound_value_t(basic_npl_struct):
    def __init__(self, vpn_encap_data=0):
        super().__init__(84)
        self.payloads.vpn_encap_data = vpn_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_label_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(76, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 76, 8, int, value)
    @property
    def payloads(self):
        return npl_pwe_label_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 76, npl_pwe_label_table_compound_payloads_t, value)



# API-s for table: pwe_to_l3_dest_table

NPL_PWE_TO_L3_DEST_TABLE_ACTION_WRITE = 0x0

class npl_pwe_to_l3_dest_table_key_t(basic_npl_struct):
    def __init__(self, pwe_l2_dlp=0):
        super().__init__(20)
        self.pwe_l2_dlp = pwe_l2_dlp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_to_l3_dest_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pwe_l2_dlp(self):
        return self._get_field_value(0, 20)
    @pwe_l2_dlp.setter
    def pwe_l2_dlp(self, value):
        self._set_field_value('field pwe_l2_dlp', 0, 20, int, value)

class npl_pwe_to_l3_dest_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_to_l3_dest_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_destination(self):
        return npl_pwe_to_l3_lookup_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @l3_destination.setter
    def l3_destination(self, value):
        self._set_field_value('field l3_destination', 0, 20, npl_pwe_to_l3_lookup_result_t, value)

class npl_pwe_to_l3_dest_table_value_t(basic_npl_struct):
    def __init__(self, l3_destination=0):
        super().__init__(28)
        self.payloads.l3_destination = l3_destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_to_l3_dest_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_pwe_to_l3_dest_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_pwe_to_l3_dest_table_payloads_t, value)



# API-s for table: pwe_to_l3_dest_table_compound

NPL_PWE_TO_L3_DEST_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_pwe_to_l3_dest_table_compound_key_t(basic_npl_struct):
    def __init__(self, pd_destination=0):
        super().__init__(27)
        self._set_field_value('const field', 0, 7, int, 0x26)
        self.pd_destination = pd_destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_to_l3_dest_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_EM_LDB_PWE_TO_L3_DEST_exact_0x26(self):
        return self._get_field_value(0, 7)
    @property
    def pd_destination(self):
        return self._get_field_value(7, 20)
    @pd_destination.setter
    def pd_destination(self, value):
        self._set_field_value('field pd_destination', 7, 20, int, value)

class npl_pwe_to_l3_dest_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_to_l3_dest_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pwe_to_l3_compound_lookup_result(self):
        return npl_pwe_to_l3_compound_lookup_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pwe_to_l3_compound_lookup_result.setter
    def pwe_to_l3_compound_lookup_result(self, value):
        self._set_field_value('field pwe_to_l3_compound_lookup_result', 0, 20, npl_pwe_to_l3_compound_lookup_result_t, value)

class npl_pwe_to_l3_dest_table_compound_value_t(basic_npl_struct):
    def __init__(self, pwe_to_l3_compound_lookup_result=0):
        super().__init__(28)
        self.payloads.pwe_to_l3_compound_lookup_result = pwe_to_l3_compound_lookup_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_to_l3_dest_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_pwe_to_l3_dest_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_pwe_to_l3_dest_table_compound_payloads_t, value)



# API-s for table: pwe_tunnel_label_table_compound

NPL_PWE_TUNNEL_LABEL_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_pwe_tunnel_label_table_compound_key_t(basic_npl_struct):
    def __init__(self, device_l2_vpn_pd_te_tunnel=0, tx_npu_header_fwd_relay_id_l2_relay_id=0):
        super().__init__(40)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0xd)
        self._set_field_value('const field', 6, 4, int, 0x3)
        self.device_l2_vpn_pd_te_tunnel = device_l2_vpn_pd_te_tunnel
        self.tx_npu_header_fwd_relay_id_l2_relay_id = tx_npu_header_fwd_relay_id_l2_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_tunnel_label_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_L2_VPN_VPLS_LDB_exact_0xd(self):
        return self._get_field_value(2, 4)
    @property
    def const3_MAC_BRIDGING_TO_PWE_TUNNEL_exact_0x3(self):
        return self._get_field_value(6, 4)
    @property
    def device_l2_vpn_pd_te_tunnel(self):
        return self._get_field_value(10, 16)
    @device_l2_vpn_pd_te_tunnel.setter
    def device_l2_vpn_pd_te_tunnel(self, value):
        self._set_field_value('field device_l2_vpn_pd_te_tunnel', 10, 16, int, value)
    @property
    def tx_npu_header_fwd_relay_id_l2_relay_id(self):
        return npl_l2_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @tx_npu_header_fwd_relay_id_l2_relay_id.setter
    def tx_npu_header_fwd_relay_id_l2_relay_id(self, value):
        self._set_field_value('field tx_npu_header_fwd_relay_id_l2_relay_id', 26, 14, npl_l2_relay_id_t, value)

class npl_pwe_tunnel_label_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(76)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_tunnel_label_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vpn_encap_data(self):
        return npl_vpn_label_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vpn_encap_data.setter
    def vpn_encap_data(self, value):
        self._set_field_value('field vpn_encap_data', 0, 76, npl_vpn_label_encap_data_t, value)

class npl_pwe_tunnel_label_table_compound_value_t(basic_npl_struct):
    def __init__(self, vpn_encap_data=0):
        super().__init__(84)
        self.payloads.vpn_encap_data = vpn_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_tunnel_label_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(76, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 76, 8, int, value)
    @property
    def payloads(self):
        return npl_pwe_tunnel_label_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 76, npl_pwe_tunnel_label_table_compound_payloads_t, value)



# API-s for table: pwe_vpls_label_table

NPL_PWE_VPLS_LABEL_TABLE_ACTION_WRITE = 0x0

class npl_pwe_vpls_label_table_key_t(basic_npl_struct):
    def __init__(self, lsp_destination=0, l2_relay_id=0):
        super().__init__(34)
        self._set_field_value('const field', 0, 4, int, 0x6)
        self.lsp_destination = lsp_destination
        self.l2_relay_id = l2_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_vpls_label_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_MAC_BRIDGING_TO_PWE_exact_0x6(self):
        return self._get_field_value(0, 4)
    @property
    def lsp_destination(self):
        return self._get_field_value(4, 16)
    @lsp_destination.setter
    def lsp_destination(self, value):
        self._set_field_value('field lsp_destination', 4, 16, int, value)
    @property
    def l2_relay_id(self):
        return npl_l2_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 20)
    @l2_relay_id.setter
    def l2_relay_id(self, value):
        self._set_field_value('field l2_relay_id', 20, 14, npl_l2_relay_id_t, value)

class npl_pwe_vpls_label_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(76)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_vpls_label_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vpn_encap_data(self):
        return npl_vpn_label_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vpn_encap_data.setter
    def vpn_encap_data(self, value):
        self._set_field_value('field vpn_encap_data', 0, 76, npl_vpn_label_encap_data_t, value)

class npl_pwe_vpls_label_table_value_t(basic_npl_struct):
    def __init__(self, vpn_encap_data=0):
        super().__init__(84)
        self.payloads.vpn_encap_data = vpn_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_vpls_label_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(76, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 76, 8, int, value)
    @property
    def payloads(self):
        return npl_pwe_vpls_label_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 76, npl_pwe_vpls_label_table_payloads_t, value)



# API-s for table: pwe_vpls_label_table_compound

NPL_PWE_VPLS_LABEL_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_pwe_vpls_label_table_compound_key_t(basic_npl_struct):
    def __init__(self, device_lsp_vpn_dest_prefix_lkup=0, tx_npu_header_fwd_relay_id_l2_relay_id=0):
        super().__init__(40)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0xd)
        self._set_field_value('const field', 6, 4, int, 0x6)
        self.device_lsp_vpn_dest_prefix_lkup = device_lsp_vpn_dest_prefix_lkup
        self.tx_npu_header_fwd_relay_id_l2_relay_id = tx_npu_header_fwd_relay_id_l2_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_vpls_label_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_L2_VPN_VPLS_LDB_exact_0xd(self):
        return self._get_field_value(2, 4)
    @property
    def const3_MAC_BRIDGING_TO_PWE_exact_0x6(self):
        return self._get_field_value(6, 4)
    @property
    def device_lsp_vpn_dest_prefix_lkup(self):
        return self._get_field_value(10, 16)
    @device_lsp_vpn_dest_prefix_lkup.setter
    def device_lsp_vpn_dest_prefix_lkup(self, value):
        self._set_field_value('field device_lsp_vpn_dest_prefix_lkup', 10, 16, int, value)
    @property
    def tx_npu_header_fwd_relay_id_l2_relay_id(self):
        return npl_l2_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @tx_npu_header_fwd_relay_id_l2_relay_id.setter
    def tx_npu_header_fwd_relay_id_l2_relay_id(self, value):
        self._set_field_value('field tx_npu_header_fwd_relay_id_l2_relay_id', 26, 14, npl_l2_relay_id_t, value)

class npl_pwe_vpls_label_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(76)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_vpls_label_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vpn_encap_data(self):
        return npl_vpn_label_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vpn_encap_data.setter
    def vpn_encap_data(self, value):
        self._set_field_value('field vpn_encap_data', 0, 76, npl_vpn_label_encap_data_t, value)

class npl_pwe_vpls_label_table_compound_value_t(basic_npl_struct):
    def __init__(self, vpn_encap_data=0):
        super().__init__(84)
        self.payloads.vpn_encap_data = vpn_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_vpls_label_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(76, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 76, 8, int, value)
    @property
    def payloads(self):
        return npl_pwe_vpls_label_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 76, npl_pwe_vpls_label_table_compound_payloads_t, value)



# API-s for table: pwe_vpls_tunnel_label_table

NPL_PWE_VPLS_TUNNEL_LABEL_TABLE_ACTION_WRITE = 0x0

class npl_pwe_vpls_tunnel_label_table_key_t(basic_npl_struct):
    def __init__(self, te_tunnel=0, l2_relay_id=0):
        super().__init__(34)
        self._set_field_value('const field', 0, 4, int, 0x3)
        self.te_tunnel = te_tunnel
        self.l2_relay_id = l2_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_vpls_tunnel_label_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_MAC_BRIDGING_TO_PWE_TUNNEL_exact_0x3(self):
        return self._get_field_value(0, 4)
    @property
    def te_tunnel(self):
        return self._get_field_value(4, 16)
    @te_tunnel.setter
    def te_tunnel(self, value):
        self._set_field_value('field te_tunnel', 4, 16, int, value)
    @property
    def l2_relay_id(self):
        return npl_l2_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 20)
    @l2_relay_id.setter
    def l2_relay_id(self, value):
        self._set_field_value('field l2_relay_id', 20, 14, npl_l2_relay_id_t, value)

class npl_pwe_vpls_tunnel_label_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(76)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_vpls_tunnel_label_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vpn_encap_data(self):
        return npl_vpn_label_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vpn_encap_data.setter
    def vpn_encap_data(self, value):
        self._set_field_value('field vpn_encap_data', 0, 76, npl_vpn_label_encap_data_t, value)

class npl_pwe_vpls_tunnel_label_table_value_t(basic_npl_struct):
    def __init__(self, vpn_encap_data=0):
        super().__init__(84)
        self.payloads.vpn_encap_data = vpn_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_pwe_vpls_tunnel_label_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(76, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 76, 8, int, value)
    @property
    def payloads(self):
        return npl_pwe_vpls_tunnel_label_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 76, npl_pwe_vpls_tunnel_label_table_payloads_t, value)



# API-s for table: qos_tag_muxing_for_inner_header_over_l3_ipv4_table

NPL_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_L3_IPV4_TABLE_ACTION_WRITE = 0x0

class npl_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv4_header_dscp=0, packet_mpls_header_label0_exp=0):
        super().__init__(16)
        self._set_field_value('const field', 6, 2, int, 0x0)
        self._set_field_value('const field', 11, 5, int, 0xa)
        self.packet_protocol_layer_next__ipv4_header_dscp = packet_protocol_layer_next__ipv4_header_dscp
        self.packet_mpls_header_label0_exp = packet_mpls_header_label0_exp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__ipv4_header_dscp(self):
        return self._get_field_value(0, 6)
    @packet_protocol_layer_next__ipv4_header_dscp.setter
    def packet_protocol_layer_next__ipv4_header_dscp(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv4_header_dscp', 0, 6, int, value)
    @property
    def const1_2b00_exact_0x0(self):
        return self._get_field_value(6, 2)
    @property
    def packet_mpls_header_label0_exp(self):
        return self._get_field_value(8, 3)
    @packet_mpls_header_label0_exp.setter
    def packet_mpls_header_label0_exp(self, value):
        self._set_field_value('field packet_mpls_header_label0_exp', 8, 3, int, value)
    @property
    def const2_5b01010_exact_0xa(self):
        return self._get_field_value(11, 5)

class npl_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_qos_tag_muxing_for_inner_header_over_l3_ipv4_table_payloads_t, value)



# API-s for table: qos_tag_muxing_for_inner_header_over_l3_ipv6_table

NPL_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_L3_IPV6_TABLE_ACTION_WRITE = 0x0

class npl_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__ipv6_header_dscp=0, packet_mpls_header_label0_exp=0):
        super().__init__(16)
        self._set_field_value('const field', 6, 2, int, 0x0)
        self._set_field_value('const field', 11, 5, int, 0xa)
        self.packet_protocol_layer_next__ipv6_header_dscp = packet_protocol_layer_next__ipv6_header_dscp
        self.packet_mpls_header_label0_exp = packet_mpls_header_label0_exp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_next__ipv6_header_dscp(self):
        return self._get_field_value(0, 6)
    @packet_protocol_layer_next__ipv6_header_dscp.setter
    def packet_protocol_layer_next__ipv6_header_dscp(self, value):
        self._set_field_value('field packet_protocol_layer_next__ipv6_header_dscp', 0, 6, int, value)
    @property
    def const1_2b00_exact_0x0(self):
        return self._get_field_value(6, 2)
    @property
    def packet_mpls_header_label0_exp(self):
        return self._get_field_value(8, 3)
    @packet_mpls_header_label0_exp.setter
    def packet_mpls_header_label0_exp(self, value):
        self._set_field_value('field packet_mpls_header_label0_exp', 8, 3, int, value)
    @property
    def const2_5b01010_exact_0xa(self):
        return self._get_field_value(11, 5)

class npl_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_qos_tag_muxing_for_inner_header_over_l3_ipv6_table_payloads_t, value)



# API-s for table: qos_tag_muxing_for_inner_header_over_l3_table

NPL_QOS_TAG_MUXING_FOR_INNER_HEADER_OVER_L3_TABLE_ACTION_WRITE = 0x0

class npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__mpls_header_label0_exp=0, packet_mpls_header_label0_exp=0):
        super().__init__(16)
        self.packet_protocol_layer_next__mpls_header_label0_exp = packet_protocol_layer_next__mpls_header_label0_exp
        self.packet_mpls_header_label0_exp = packet_mpls_header_label0_exp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_protocol_layer_next__mpls_header_label0_exp(self):
        return self._get_field_value(0, 3)
    @packet_protocol_layer_next__mpls_header_label0_exp.setter
    def packet_protocol_layer_next__mpls_header_label0_exp(self, value):
        self._set_field_value('field packet_protocol_layer_next__mpls_header_label0_exp', 0, 3, int, value)
    @property
    def const1_5b01010_exact_0xa(self):
        return self._get_field_value(3, 5)
    @property
    def packet_mpls_header_label0_exp(self):
        return self._get_field_value(8, 3)
    @packet_mpls_header_label0_exp.setter
    def packet_mpls_header_label0_exp(self, value):
        self._set_field_value('field packet_mpls_header_label0_exp', 8, 3, int, value)
    @property
    def const2_5b01010_exact_0xa(self):
        return self._get_field_value(11, 5)



class npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(16)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_8b0100_0000_exact_0x40(self):
        return self._get_field_value(0, 8)
    @property
    def const2_8d0_exact_0x0(self):
        return self._get_field_value(8, 8)



class npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__header_1__vlan_tag_tci_pcp_dei=0):
        super().__init__(16)
        self.packet_protocol_layer_next__header_1__vlan_tag_tci_pcp_dei = packet_protocol_layer_next__header_1__vlan_tag_tci_pcp_dei

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_protocol_layer_next__header_1__vlan_tag_tci_pcp_dei(self):
        return npl_pcp_dei_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @packet_protocol_layer_next__header_1__vlan_tag_tci_pcp_dei.setter
    def packet_protocol_layer_next__header_1__vlan_tag_tci_pcp_dei(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_1__vlan_tag_tci_pcp_dei', 0, 4, npl_pcp_dei_t, value)
    @property
    def const1_4b0100_exact_0x4(self):
        return self._get_field_value(4, 4)
    @property
    def const2_8d0_exact_0x0(self):
        return self._get_field_value(8, 8)



class npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(8)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_8d0_exact_0x0(self):
        return self._get_field_value(0, 8)




class qos_tag_muxing_for_inner_header_over_l3_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = qos_tag_muxing_for_inner_header_over_l3_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_PROTOCOL_TYPE_MPLS(self):
        return npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_MPLS.setter
    def NPL_PROTOCOL_TYPE_MPLS(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_MPLS', 0, 16, npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_mpls_t, value)
    @property
    def NPL_PROTOCOL_TYPE_ETHERNET(self):
        return npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_ETHERNET.setter
    def NPL_PROTOCOL_TYPE_ETHERNET(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_ETHERNET', 0, 16, npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_t, value)
    @property
    def NPL_PROTOCOL_TYPE_ETHERNET_VLAN(self):
        return npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_ETHERNET_VLAN.setter
    def NPL_PROTOCOL_TYPE_ETHERNET_VLAN(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_ETHERNET_VLAN', 0, 16, npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_ethernet_vlan_t, value)
    @property
    def NPL_PROTOCOL_TYPE_UNKNOWN(self):
        return npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PROTOCOL_TYPE_UNKNOWN.setter
    def NPL_PROTOCOL_TYPE_UNKNOWN(self, value):
        self._set_field_value('field NPL_PROTOCOL_TYPE_UNKNOWN', 0, 8, npl_qos_tag_muxing_for_inner_header_over_l3_table_key_option_protocol_type_unknown_t, value)

class npl_qos_tag_muxing_for_inner_header_over_l3_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__type=0):
        super().__init__(16)
        self.packet_protocol_layer_next__type = packet_protocol_layer_next__type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _packet_protocol_layer_next__type = 0
    @property
    def packet_protocol_layer_next__type(self):
        return self._packet_protocol_layer_next__type
    @packet_protocol_layer_next__type.setter
    def packet_protocol_layer_next__type(self, value):
        self._packet_protocol_layer_next__type = value
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_MPLS:
            self._set_field_value('const field', 3, 5, int, 0xa)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_MPLS:
            self._set_field_value('const field', 11, 5, int, 0xa)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET:
            self._set_field_value('const field', 0, 8, int, 0x40)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET:
            self._set_field_value('const field', 8, 8, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET_VLAN:
            self._set_field_value('const field', 4, 4, int, 0x4)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_ETHERNET_VLAN:
            self._set_field_value('const field', 8, 8, int, 0x0)
        if packet_protocol_layer_next__type == NPL_PROTOCOL_TYPE_UNKNOWN:
            self._set_field_value('const field', 0, 8, int, 0x0)

    @property
    def options(self):
        return qos_tag_muxing_for_inner_header_over_l3_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 16 - 0, qos_tag_muxing_for_inner_header_over_l3_table_key_options_t, value)

class npl_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_tags(self):
        return npl_qos_tags_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @qos_tags.setter
    def qos_tags(self, value):
        self._set_field_value('field qos_tags', 0, 24, npl_qos_tags_t, value)

class npl_qos_tag_muxing_for_inner_header_over_l3_table_value_t(basic_npl_struct):
    def __init__(self, qos_tags=0):
        super().__init__(32)
        self.payloads.qos_tags = qos_tags

    def _get_as_sub_field(data, offset_in_data):
        result = npl_qos_tag_muxing_for_inner_header_over_l3_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_qos_tag_muxing_for_inner_header_over_l3_table_payloads_t, value)



# API-s for table: reassembly_source_port_map_table

NPL_REASSEMBLY_SOURCE_PORT_MAP_TABLE_ACTION_WRITE = 0x0

class npl_reassembly_source_port_map_table_key_t(basic_npl_struct):
    def __init__(self, source_if=0):
        super().__init__(6)
        self.source_if = source_if

    def _get_as_sub_field(data, offset_in_data):
        result = npl_reassembly_source_port_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def source_if(self):
        return npl_reassembly_source_port_map_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @source_if.setter
    def source_if(self, value):
        self._set_field_value('field source_if', 0, 6, npl_reassembly_source_port_map_key_t, value)

class npl_reassembly_source_port_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_reassembly_source_port_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def reassembly_source_port_map_result(self):
        return npl_reassembly_source_port_map_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @reassembly_source_port_map_result.setter
    def reassembly_source_port_map_result(self, value):
        self._set_field_value('field reassembly_source_port_map_result', 0, 6, npl_reassembly_source_port_map_result_t, value)

class npl_reassembly_source_port_map_table_value_t(basic_npl_struct):
    def __init__(self, reassembly_source_port_map_result=0):
        super().__init__(14)
        self.payloads.reassembly_source_port_map_result = reassembly_source_port_map_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_reassembly_source_port_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_reassembly_source_port_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_reassembly_source_port_map_table_payloads_t, value)



# API-s for table: recycle_override_table

NPL_RECYCLE_OVERRIDE_TABLE_ACTION_INIT_RX_DATA = 0x0

class npl_recycle_override_table_init_rx_data_payload_t(basic_npl_struct):
    def __init__(self, override_source_port_table=0, initial_layer_index=0, initial_rx_data=0, tag_swap_cmd=0, np_macro_id=0, fi_macro_id=0):
        super().__init__(34)
        self.override_source_port_table = override_source_port_table
        self.initial_layer_index = initial_layer_index
        self.initial_rx_data = initial_rx_data
        self.tag_swap_cmd = tag_swap_cmd
        self.np_macro_id = np_macro_id
        self.fi_macro_id = fi_macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_recycle_override_table_init_rx_data_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def override_source_port_table(self):
        return self._get_field_value(33, 1)
    @override_source_port_table.setter
    def override_source_port_table(self, value):
        self._set_field_value('field override_source_port_table', 33, 1, int, value)
    @property
    def initial_layer_index(self):
        return self._get_field_value(29, 4)
    @initial_layer_index.setter
    def initial_layer_index(self, value):
        self._set_field_value('field initial_layer_index', 29, 4, int, value)
    @property
    def initial_rx_data(self):
        return npl_pd_rx_nw_app_t_anonymous_union_init_recycle_fields_union_t._get_as_sub_field(self._data, self._offset_in_data + 13)
    @initial_rx_data.setter
    def initial_rx_data(self, value):
        self._set_field_value('field initial_rx_data', 13, 16, npl_pd_rx_nw_app_t_anonymous_union_init_recycle_fields_union_t, value)
    @property
    def tag_swap_cmd(self):
        return self._get_field_value(11, 2)
    @tag_swap_cmd.setter
    def tag_swap_cmd(self, value):
        self._set_field_value('field tag_swap_cmd', 11, 2, int, value)
    @property
    def np_macro_id(self):
        return self._get_field_value(6, 5)
    @np_macro_id.setter
    def np_macro_id(self, value):
        self._set_field_value('field np_macro_id', 6, 5, int, value)
    @property
    def fi_macro_id(self):
        return self._get_field_value(0, 6)
    @fi_macro_id.setter
    def fi_macro_id(self, value):
        self._set_field_value('field fi_macro_id', 0, 6, int, value)




class npl_recycle_override_table_key_t(basic_npl_struct):
    def __init__(self, rxpp_npu_input_tx_to_rx_rcy_data_3_0_=0, packet_is_rescheduled_recycle=0, rxpp_npu_input_rcy_code_1_=0):
        super().__init__(6)
        self.rxpp_npu_input_tx_to_rx_rcy_data_3_0_ = rxpp_npu_input_tx_to_rx_rcy_data_3_0_
        self.packet_is_rescheduled_recycle = packet_is_rescheduled_recycle
        self.rxpp_npu_input_rcy_code_1_ = rxpp_npu_input_rcy_code_1_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_recycle_override_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_npu_input_tx_to_rx_rcy_data_3_0_(self):
        return self._get_field_value(0, 4)
    @rxpp_npu_input_tx_to_rx_rcy_data_3_0_.setter
    def rxpp_npu_input_tx_to_rx_rcy_data_3_0_(self, value):
        self._set_field_value('field rxpp_npu_input_tx_to_rx_rcy_data_3_0_', 0, 4, int, value)
    @property
    def packet_is_rescheduled_recycle(self):
        return self._get_field_value(4, 1)
    @packet_is_rescheduled_recycle.setter
    def packet_is_rescheduled_recycle(self, value):
        self._set_field_value('field packet_is_rescheduled_recycle', 4, 1, int, value)
    @property
    def rxpp_npu_input_rcy_code_1_(self):
        return self._get_field_value(5, 1)
    @rxpp_npu_input_rcy_code_1_.setter
    def rxpp_npu_input_rcy_code_1_(self, value):
        self._set_field_value('field rxpp_npu_input_rcy_code_1_', 5, 1, int, value)

class npl_recycle_override_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(34)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_recycle_override_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def init_rx_data(self):
        return npl_recycle_override_table_init_rx_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @init_rx_data.setter
    def init_rx_data(self, value):
        self._set_field_value('field init_rx_data', 0, 34, npl_recycle_override_table_init_rx_data_payload_t, value)

class npl_recycle_override_table_value_t(basic_npl_struct):
    def __init__(self, override_source_port_table=0, initial_layer_index=0, initial_rx_data=0, tag_swap_cmd=0, np_macro_id=0, fi_macro_id=0):
        super().__init__(42)
        self.payloads.init_rx_data = npl_recycle_override_table_init_rx_data_payload_t(override_source_port_table, initial_layer_index, initial_rx_data, tag_swap_cmd, np_macro_id, fi_macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_recycle_override_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(34, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 34, 8, int, value)
    @property
    def payloads(self):
        return npl_recycle_override_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 34, npl_recycle_override_table_payloads_t, value)



# API-s for table: recycled_inject_up_info_table

NPL_RECYCLED_INJECT_UP_INFO_TABLE_ACTION_UPDATE_DATA = 0x0

class npl_recycled_inject_up_info_table_update_data_payload_t(basic_npl_struct):
    def __init__(self, ssp=0, phb=0, init_data_selector=0):
        super().__init__(18)
        self.ssp = ssp
        self.phb = phb
        self.init_data_selector = init_data_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_recycled_inject_up_info_table_update_data_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ssp(self):
        return self._get_field_value(6, 12)
    @ssp.setter
    def ssp(self, value):
        self._set_field_value('field ssp', 6, 12, int, value)
    @property
    def phb(self):
        return npl_phb_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @phb.setter
    def phb(self, value):
        self._set_field_value('field phb', 1, 5, npl_phb_t, value)
    @property
    def init_data_selector(self):
        return self._get_field_value(0, 1)
    @init_data_selector.setter
    def init_data_selector(self, value):
        self._set_field_value('field init_data_selector', 0, 1, int, value)




class npl_recycled_inject_up_info_table_key_t(basic_npl_struct):
    def __init__(self, tx_to_rx_rcy_data=0):
        super().__init__(6)
        self.tx_to_rx_rcy_data = tx_to_rx_rcy_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_recycled_inject_up_info_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_to_rx_rcy_data(self):
        return self._get_field_value(0, 6)
    @tx_to_rx_rcy_data.setter
    def tx_to_rx_rcy_data(self, value):
        self._set_field_value('field tx_to_rx_rcy_data', 0, 6, int, value)

class npl_recycled_inject_up_info_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(18)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_recycled_inject_up_info_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_data(self):
        return npl_recycled_inject_up_info_table_update_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_data.setter
    def update_data(self, value):
        self._set_field_value('field update_data', 0, 18, npl_recycled_inject_up_info_table_update_data_payload_t, value)

class npl_recycled_inject_up_info_table_value_t(basic_npl_struct):
    def __init__(self, ssp=0, phb=0, init_data_selector=0):
        super().__init__(26)
        self.payloads.update_data = npl_recycled_inject_up_info_table_update_data_payload_t(ssp, phb, init_data_selector)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_recycled_inject_up_info_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(18, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 18, 8, int, value)
    @property
    def payloads(self):
        return npl_recycled_inject_up_info_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 18, npl_recycled_inject_up_info_table_payloads_t, value)



# API-s for table: redirect_destination_table

NPL_REDIRECT_DESTINATION_TABLE_ACTION_WRITE = 0x0

class npl_redirect_destination_table_key_t(basic_npl_struct):
    def __init__(self, device_packet_info_ifg=0):
        super().__init__(1)
        self.device_packet_info_ifg = device_packet_info_ifg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_redirect_destination_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def device_packet_info_ifg(self):
        return self._get_field_value(0, 1)
    @device_packet_info_ifg.setter
    def device_packet_info_ifg(self, value):
        self._set_field_value('field device_packet_info_ifg', 0, 1, int, value)

class npl_redirect_destination_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_redirect_destination_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def redirect_destination_reg(self):
        return npl_redirect_destination_reg_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @redirect_destination_reg.setter
    def redirect_destination_reg(self, value):
        self._set_field_value('field redirect_destination_reg', 0, 2, npl_redirect_destination_reg_t, value)

class npl_redirect_destination_table_value_t(basic_npl_struct):
    def __init__(self, redirect_destination_reg=0):
        super().__init__(10)
        self.payloads.redirect_destination_reg = redirect_destination_reg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_redirect_destination_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_redirect_destination_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_redirect_destination_table_payloads_t, value)



# API-s for table: redirect_table

NPL_REDIRECT_TABLE_ACTION_WRITE = 0x0

class npl_redirect_table_key_t(basic_npl_struct):
    def __init__(self, trap_conditions=0, traps=0):
        super().__init__(199)
        self.trap_conditions = trap_conditions
        self.traps = traps

    def _get_as_sub_field(data, offset_in_data):
        result = npl_redirect_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def trap_conditions(self):
        return npl_trap_conditions_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @trap_conditions.setter
    def trap_conditions(self, value):
        self._set_field_value('field trap_conditions', 0, 2, npl_trap_conditions_t, value)
    @property
    def traps(self):
        return npl_traps_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @traps.setter
    def traps(self, value):
        self._set_field_value('field traps', 2, 197, npl_traps_t, value)

class npl_redirect_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_redirect_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def redirect_code(self):
        return npl_redirect_code_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @redirect_code.setter
    def redirect_code(self, value):
        self._set_field_value('field redirect_code', 0, 8, npl_redirect_code_t, value)

class npl_redirect_table_value_t(basic_npl_struct):
    def __init__(self, redirect_code=0):
        super().__init__(16)
        self.payloads.redirect_code = redirect_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_redirect_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_redirect_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_redirect_table_payloads_t, value)



# API-s for table: resolution_compound_eth_table

NPL_RESOLUTION_COMPOUND_ETH_TABLE_ACTION_RESOLUTION = 0x0

class npl_resolution_compound_eth_table_resolution_payload_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(140)
        self.enc_data = enc_data
        self.dest_data = dest_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_eth_table_resolution_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def enc_data(self):
        return npl_resolution_result_enc_data_t._get_as_sub_field(self._data, self._offset_in_data + 60)
    @enc_data.setter
    def enc_data(self, value):
        self._set_field_value('field enc_data', 60, 80, npl_resolution_result_enc_data_t, value)
    @property
    def dest_data(self):
        return npl_resolution_result_dest_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dest_data.setter
    def dest_data(self, value):
        self._set_field_value('field dest_data', 0, 60, npl_resolution_result_dest_data_t, value)




class npl_resolution_compound_eth_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__header_0__ethernet_header=0, destination_for_resolution=0, traffic_class=0, device_rx_fragment_index_2_0=0, device_rx_fragment_index_10_3=0):
        super().__init__(154)
        self._set_field_value('const field', 0, 1, int, 0x1)
        self._set_field_value('const field', 113, 6, int, 0x1)
        self._set_field_value('const field', 142, 1, int, 0x0)
        self.packet_protocol_layer_next__header_0__ethernet_header = packet_protocol_layer_next__header_0__ethernet_header
        self.destination_for_resolution = destination_for_resolution
        self.traffic_class = traffic_class
        self.device_rx_fragment_index_2_0 = device_rx_fragment_index_2_0
        self.device_rx_fragment_index_10_3 = device_rx_fragment_index_10_3

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_eth_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)
    @property
    def packet_protocol_layer_next__header_0__ethernet_header(self):
        return npl_ethernet_header_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @packet_protocol_layer_next__header_0__ethernet_header.setter
    def packet_protocol_layer_next__header_0__ethernet_header(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__ethernet_header', 1, 112, npl_ethernet_header_t, value)
    @property
    def const2_6b1_exact_0x1(self):
        return self._get_field_value(113, 6)
    @property
    def destination_for_resolution(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 119)
    @destination_for_resolution.setter
    def destination_for_resolution(self, value):
        self._set_field_value('field destination_for_resolution', 119, 20, npl_destination_t, value)
    @property
    def traffic_class(self):
        return npl_resolution_fwd_class_t._get_as_sub_field(self._data, self._offset_in_data + 139)
    @traffic_class.setter
    def traffic_class(self, value):
        self._set_field_value('field traffic_class', 139, 3, npl_resolution_fwd_class_t, value)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(142, 1)
    @property
    def device_rx_fragment_index_2_0(self):
        return self._get_field_value(143, 3)
    @device_rx_fragment_index_2_0.setter
    def device_rx_fragment_index_2_0(self, value):
        self._set_field_value('field device_rx_fragment_index_2_0', 143, 3, int, value)
    @property
    def device_rx_fragment_index_10_3(self):
        return self._get_field_value(146, 8)
    @device_rx_fragment_index_10_3.setter
    def device_rx_fragment_index_10_3(self, value):
        self._set_field_value('field device_rx_fragment_index_10_3', 146, 8, int, value)

class npl_resolution_compound_eth_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(140)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_eth_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def resolution(self):
        return npl_resolution_compound_eth_table_resolution_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @resolution.setter
    def resolution(self, value):
        self._set_field_value('field resolution', 0, 140, npl_resolution_compound_eth_table_resolution_payload_t, value)

class npl_resolution_compound_eth_table_value_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(148)
        self.payloads.resolution = npl_resolution_compound_eth_table_resolution_payload_t(enc_data, dest_data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_eth_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(140, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 140, 8, int, value)
    @property
    def payloads(self):
        return npl_resolution_compound_eth_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 140, npl_resolution_compound_eth_table_payloads_t, value)



# API-s for table: resolution_compound_eth_vlan_table

NPL_RESOLUTION_COMPOUND_ETH_VLAN_TABLE_ACTION_RESOLUTION = 0x0

class npl_resolution_compound_eth_vlan_table_resolution_payload_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(140)
        self.enc_data = enc_data
        self.dest_data = dest_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_eth_vlan_table_resolution_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def enc_data(self):
        return npl_resolution_result_enc_data_t._get_as_sub_field(self._data, self._offset_in_data + 60)
    @enc_data.setter
    def enc_data(self, value):
        self._set_field_value('field enc_data', 60, 80, npl_resolution_result_enc_data_t, value)
    @property
    def dest_data(self):
        return npl_resolution_result_dest_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dest_data.setter
    def dest_data(self, value):
        self._set_field_value('field dest_data', 0, 60, npl_resolution_result_dest_data_t, value)




class npl_resolution_compound_eth_vlan_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__header_0__eth_8021q_vtag_vid=0, packet_protocol_layer_next__header_0__eth_8021q_eth_hdr=0, destination_for_resolution=0, traffic_class=0, device_rx_fragment_index_2_0=0, device_rx_fragment_index_10_3=0):
        super().__init__(166)
        self._set_field_value('const field', 0, 1, int, 0x1)
        self._set_field_value('const field', 125, 6, int, 0x1)
        self._set_field_value('const field', 154, 1, int, 0x0)
        self.packet_protocol_layer_next__header_0__eth_8021q_vtag_vid = packet_protocol_layer_next__header_0__eth_8021q_vtag_vid
        self.packet_protocol_layer_next__header_0__eth_8021q_eth_hdr = packet_protocol_layer_next__header_0__eth_8021q_eth_hdr
        self.destination_for_resolution = destination_for_resolution
        self.traffic_class = traffic_class
        self.device_rx_fragment_index_2_0 = device_rx_fragment_index_2_0
        self.device_rx_fragment_index_10_3 = device_rx_fragment_index_10_3

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_eth_vlan_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)
    @property
    def packet_protocol_layer_next__header_0__eth_8021q_vtag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @packet_protocol_layer_next__header_0__eth_8021q_vtag_vid.setter
    def packet_protocol_layer_next__header_0__eth_8021q_vtag_vid(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__eth_8021q_vtag_vid', 1, 12, npl_vlan_id_t, value)
    @property
    def packet_protocol_layer_next__header_0__eth_8021q_eth_hdr(self):
        return npl_ethernet_header_t._get_as_sub_field(self._data, self._offset_in_data + 13)
    @packet_protocol_layer_next__header_0__eth_8021q_eth_hdr.setter
    def packet_protocol_layer_next__header_0__eth_8021q_eth_hdr(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__eth_8021q_eth_hdr', 13, 112, npl_ethernet_header_t, value)
    @property
    def const2_6b1_exact_0x1(self):
        return self._get_field_value(125, 6)
    @property
    def destination_for_resolution(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 131)
    @destination_for_resolution.setter
    def destination_for_resolution(self, value):
        self._set_field_value('field destination_for_resolution', 131, 20, npl_destination_t, value)
    @property
    def traffic_class(self):
        return npl_resolution_fwd_class_t._get_as_sub_field(self._data, self._offset_in_data + 151)
    @traffic_class.setter
    def traffic_class(self, value):
        self._set_field_value('field traffic_class', 151, 3, npl_resolution_fwd_class_t, value)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(154, 1)
    @property
    def device_rx_fragment_index_2_0(self):
        return self._get_field_value(155, 3)
    @device_rx_fragment_index_2_0.setter
    def device_rx_fragment_index_2_0(self, value):
        self._set_field_value('field device_rx_fragment_index_2_0', 155, 3, int, value)
    @property
    def device_rx_fragment_index_10_3(self):
        return self._get_field_value(158, 8)
    @device_rx_fragment_index_10_3.setter
    def device_rx_fragment_index_10_3(self, value):
        self._set_field_value('field device_rx_fragment_index_10_3', 158, 8, int, value)

class npl_resolution_compound_eth_vlan_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(140)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_eth_vlan_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def resolution(self):
        return npl_resolution_compound_eth_vlan_table_resolution_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @resolution.setter
    def resolution(self, value):
        self._set_field_value('field resolution', 0, 140, npl_resolution_compound_eth_vlan_table_resolution_payload_t, value)

class npl_resolution_compound_eth_vlan_table_value_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(148)
        self.payloads.resolution = npl_resolution_compound_eth_vlan_table_resolution_payload_t(enc_data, dest_data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_eth_vlan_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(140, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 140, 8, int, value)
    @property
    def payloads(self):
        return npl_resolution_compound_eth_vlan_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 140, npl_resolution_compound_eth_vlan_table_payloads_t, value)



# API-s for table: resolution_compound_gtp_table

NPL_RESOLUTION_COMPOUND_GTP_TABLE_ACTION_RESOLUTION = 0x0

class npl_resolution_compound_gtp_table_resolution_payload_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(140)
        self.enc_data = enc_data
        self.dest_data = dest_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_gtp_table_resolution_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def enc_data(self):
        return npl_resolution_result_enc_data_t._get_as_sub_field(self._data, self._offset_in_data + 60)
    @enc_data.setter
    def enc_data(self, value):
        self._set_field_value('field enc_data', 60, 80, npl_resolution_result_enc_data_t, value)
    @property
    def dest_data(self):
        return npl_resolution_result_dest_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dest_data.setter
    def dest_data(self, value):
        self._set_field_value('field dest_data', 0, 60, npl_resolution_result_dest_data_t, value)




class npl_resolution_compound_gtp_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__header_0__gtp_v1_header_teid_31_16_=0, destination_for_resolution=0, traffic_class=0, device_rx_fragment_index_2_0=0, device_rx_fragment_index_10_3=0, packet_protocol_layer_next__header_0__gtp_v1_header_teid_15_0_=0):
        super().__init__(74)
        self._set_field_value('const field', 0, 1, int, 0x1)
        self._set_field_value('const field', 17, 6, int, 0x1)
        self._set_field_value('const field', 46, 1, int, 0x0)
        self.packet_protocol_layer_next__header_0__gtp_v1_header_teid_31_16_ = packet_protocol_layer_next__header_0__gtp_v1_header_teid_31_16_
        self.destination_for_resolution = destination_for_resolution
        self.traffic_class = traffic_class
        self.device_rx_fragment_index_2_0 = device_rx_fragment_index_2_0
        self.device_rx_fragment_index_10_3 = device_rx_fragment_index_10_3
        self.packet_protocol_layer_next__header_0__gtp_v1_header_teid_15_0_ = packet_protocol_layer_next__header_0__gtp_v1_header_teid_15_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_gtp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)
    @property
    def packet_protocol_layer_next__header_0__gtp_v1_header_teid_31_16_(self):
        return self._get_field_value(1, 16)
    @packet_protocol_layer_next__header_0__gtp_v1_header_teid_31_16_.setter
    def packet_protocol_layer_next__header_0__gtp_v1_header_teid_31_16_(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__gtp_v1_header_teid_31_16_', 1, 16, int, value)
    @property
    def const2_6b1_exact_0x1(self):
        return self._get_field_value(17, 6)
    @property
    def destination_for_resolution(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 23)
    @destination_for_resolution.setter
    def destination_for_resolution(self, value):
        self._set_field_value('field destination_for_resolution', 23, 20, npl_destination_t, value)
    @property
    def traffic_class(self):
        return npl_resolution_fwd_class_t._get_as_sub_field(self._data, self._offset_in_data + 43)
    @traffic_class.setter
    def traffic_class(self, value):
        self._set_field_value('field traffic_class', 43, 3, npl_resolution_fwd_class_t, value)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(46, 1)
    @property
    def device_rx_fragment_index_2_0(self):
        return self._get_field_value(47, 3)
    @device_rx_fragment_index_2_0.setter
    def device_rx_fragment_index_2_0(self, value):
        self._set_field_value('field device_rx_fragment_index_2_0', 47, 3, int, value)
    @property
    def device_rx_fragment_index_10_3(self):
        return self._get_field_value(50, 8)
    @device_rx_fragment_index_10_3.setter
    def device_rx_fragment_index_10_3(self, value):
        self._set_field_value('field device_rx_fragment_index_10_3', 50, 8, int, value)
    @property
    def packet_protocol_layer_next__header_0__gtp_v1_header_teid_15_0_(self):
        return self._get_field_value(58, 16)
    @packet_protocol_layer_next__header_0__gtp_v1_header_teid_15_0_.setter
    def packet_protocol_layer_next__header_0__gtp_v1_header_teid_15_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__gtp_v1_header_teid_15_0_', 58, 16, int, value)

class npl_resolution_compound_gtp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(140)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_gtp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def resolution(self):
        return npl_resolution_compound_gtp_table_resolution_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @resolution.setter
    def resolution(self, value):
        self._set_field_value('field resolution', 0, 140, npl_resolution_compound_gtp_table_resolution_payload_t, value)

class npl_resolution_compound_gtp_table_value_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(148)
        self.payloads.resolution = npl_resolution_compound_gtp_table_resolution_payload_t(enc_data, dest_data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_gtp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(140, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 140, 8, int, value)
    @property
    def payloads(self):
        return npl_resolution_compound_gtp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 140, npl_resolution_compound_gtp_table_payloads_t, value)



# API-s for table: resolution_compound_table

NPL_RESOLUTION_COMPOUND_TABLE_ACTION_RESOLUTION = 0x0

class npl_resolution_compound_table_resolution_payload_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(140)
        self.enc_data = enc_data
        self.dest_data = dest_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_table_resolution_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def enc_data(self):
        return npl_resolution_result_enc_data_t._get_as_sub_field(self._data, self._offset_in_data + 60)
    @enc_data.setter
    def enc_data(self, value):
        self._set_field_value('field enc_data', 60, 80, npl_resolution_result_enc_data_t, value)
    @property
    def dest_data(self):
        return npl_resolution_result_dest_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dest_data.setter
    def dest_data(self, value):
        self._set_field_value('field dest_data', 0, 60, npl_resolution_result_dest_data_t, value)




class npl_resolution_compound_table_key_t(basic_npl_struct):
    def __init__(self, destination_for_resolution=0, traffic_class=0, device_rx_fragment_index_2_0=0, device_rx_fragment_index_10_3=0):
        super().__init__(41)
        self._set_field_value('const field', 0, 6, int, 0x0)
        self._set_field_value('const field', 29, 1, int, 0x0)
        self.destination_for_resolution = destination_for_resolution
        self.traffic_class = traffic_class
        self.device_rx_fragment_index_2_0 = device_rx_fragment_index_2_0
        self.device_rx_fragment_index_10_3 = device_rx_fragment_index_10_3

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_6b0_exact_0x0(self):
        return self._get_field_value(0, 6)
    @property
    def destination_for_resolution(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 6)
    @destination_for_resolution.setter
    def destination_for_resolution(self, value):
        self._set_field_value('field destination_for_resolution', 6, 20, npl_destination_t, value)
    @property
    def traffic_class(self):
        return npl_resolution_fwd_class_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @traffic_class.setter
    def traffic_class(self, value):
        self._set_field_value('field traffic_class', 26, 3, npl_resolution_fwd_class_t, value)
    @property
    def const2_1b0_exact_0x0(self):
        return self._get_field_value(29, 1)
    @property
    def device_rx_fragment_index_2_0(self):
        return self._get_field_value(30, 3)
    @device_rx_fragment_index_2_0.setter
    def device_rx_fragment_index_2_0(self, value):
        self._set_field_value('field device_rx_fragment_index_2_0', 30, 3, int, value)
    @property
    def device_rx_fragment_index_10_3(self):
        return self._get_field_value(33, 8)
    @device_rx_fragment_index_10_3.setter
    def device_rx_fragment_index_10_3(self, value):
        self._set_field_value('field device_rx_fragment_index_10_3', 33, 8, int, value)

class npl_resolution_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(140)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def resolution(self):
        return npl_resolution_compound_table_resolution_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @resolution.setter
    def resolution(self, value):
        self._set_field_value('field resolution', 0, 140, npl_resolution_compound_table_resolution_payload_t, value)

class npl_resolution_compound_table_value_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(148)
        self.payloads.resolution = npl_resolution_compound_table_resolution_payload_t(enc_data, dest_data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(140, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 140, 8, int, value)
    @property
    def payloads(self):
        return npl_resolution_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 140, npl_resolution_compound_table_payloads_t, value)



# API-s for table: resolution_compound_v4_l4_table

NPL_RESOLUTION_COMPOUND_V4_L4_TABLE_ACTION_RESOLUTION = 0x0

class npl_resolution_compound_v4_l4_table_resolution_payload_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(140)
        self.enc_data = enc_data
        self.dest_data = dest_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_v4_l4_table_resolution_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def enc_data(self):
        return npl_resolution_result_enc_data_t._get_as_sub_field(self._data, self._offset_in_data + 60)
    @enc_data.setter
    def enc_data(self, value):
        self._set_field_value('field enc_data', 60, 80, npl_resolution_result_enc_data_t, value)
    @property
    def dest_data(self):
        return npl_resolution_result_dest_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dest_data.setter
    def dest_data(self, value):
        self._set_field_value('field dest_data', 0, 60, npl_resolution_result_dest_data_t, value)




class npl_resolution_compound_v4_l4_table_key_t(basic_npl_struct):
    def __init__(self, resolution_local_vars_local_l4_ports_v4_dst_port=0, resolution_local_vars_local_l4_ports_v4_src_port=0, packet_protocol_layer_next__header_0__ipv4_header_sip_dip_63_16_=0, packet_protocol_layer_next__header_0__ipv4_header_protocol=0, destination_for_resolution=0, traffic_class=0, device_rx_fragment_index_2_0=0, device_rx_fragment_index_10_3=0, packet_protocol_layer_next__header_0__ipv4_header_sip_dip_15_0_=0):
        super().__init__(146)
        self._set_field_value('const field', 0, 1, int, 0x1)
        self._set_field_value('const field', 89, 6, int, 0x1)
        self._set_field_value('const field', 118, 1, int, 0x0)
        self.resolution_local_vars_local_l4_ports_v4_dst_port = resolution_local_vars_local_l4_ports_v4_dst_port
        self.resolution_local_vars_local_l4_ports_v4_src_port = resolution_local_vars_local_l4_ports_v4_src_port
        self.packet_protocol_layer_next__header_0__ipv4_header_sip_dip_63_16_ = packet_protocol_layer_next__header_0__ipv4_header_sip_dip_63_16_
        self.packet_protocol_layer_next__header_0__ipv4_header_protocol = packet_protocol_layer_next__header_0__ipv4_header_protocol
        self.destination_for_resolution = destination_for_resolution
        self.traffic_class = traffic_class
        self.device_rx_fragment_index_2_0 = device_rx_fragment_index_2_0
        self.device_rx_fragment_index_10_3 = device_rx_fragment_index_10_3
        self.packet_protocol_layer_next__header_0__ipv4_header_sip_dip_15_0_ = packet_protocol_layer_next__header_0__ipv4_header_sip_dip_15_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_v4_l4_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)
    @property
    def resolution_local_vars_local_l4_ports_v4_dst_port(self):
        return self._get_field_value(1, 16)
    @resolution_local_vars_local_l4_ports_v4_dst_port.setter
    def resolution_local_vars_local_l4_ports_v4_dst_port(self, value):
        self._set_field_value('field resolution_local_vars_local_l4_ports_v4_dst_port', 1, 16, int, value)
    @property
    def resolution_local_vars_local_l4_ports_v4_src_port(self):
        return self._get_field_value(17, 16)
    @resolution_local_vars_local_l4_ports_v4_src_port.setter
    def resolution_local_vars_local_l4_ports_v4_src_port(self, value):
        self._set_field_value('field resolution_local_vars_local_l4_ports_v4_src_port', 17, 16, int, value)
    @property
    def packet_protocol_layer_next__header_0__ipv4_header_sip_dip_63_16_(self):
        return self._get_field_value(33, 48)
    @packet_protocol_layer_next__header_0__ipv4_header_sip_dip_63_16_.setter
    def packet_protocol_layer_next__header_0__ipv4_header_sip_dip_63_16_(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__ipv4_header_sip_dip_63_16_', 33, 48, int, value)
    @property
    def packet_protocol_layer_next__header_0__ipv4_header_protocol(self):
        return self._get_field_value(81, 8)
    @packet_protocol_layer_next__header_0__ipv4_header_protocol.setter
    def packet_protocol_layer_next__header_0__ipv4_header_protocol(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__ipv4_header_protocol', 81, 8, int, value)
    @property
    def const2_6b1_exact_0x1(self):
        return self._get_field_value(89, 6)
    @property
    def destination_for_resolution(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 95)
    @destination_for_resolution.setter
    def destination_for_resolution(self, value):
        self._set_field_value('field destination_for_resolution', 95, 20, npl_destination_t, value)
    @property
    def traffic_class(self):
        return npl_resolution_fwd_class_t._get_as_sub_field(self._data, self._offset_in_data + 115)
    @traffic_class.setter
    def traffic_class(self, value):
        self._set_field_value('field traffic_class', 115, 3, npl_resolution_fwd_class_t, value)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(118, 1)
    @property
    def device_rx_fragment_index_2_0(self):
        return self._get_field_value(119, 3)
    @device_rx_fragment_index_2_0.setter
    def device_rx_fragment_index_2_0(self, value):
        self._set_field_value('field device_rx_fragment_index_2_0', 119, 3, int, value)
    @property
    def device_rx_fragment_index_10_3(self):
        return self._get_field_value(122, 8)
    @device_rx_fragment_index_10_3.setter
    def device_rx_fragment_index_10_3(self, value):
        self._set_field_value('field device_rx_fragment_index_10_3', 122, 8, int, value)
    @property
    def packet_protocol_layer_next__header_0__ipv4_header_sip_dip_15_0_(self):
        return self._get_field_value(130, 16)
    @packet_protocol_layer_next__header_0__ipv4_header_sip_dip_15_0_.setter
    def packet_protocol_layer_next__header_0__ipv4_header_sip_dip_15_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__ipv4_header_sip_dip_15_0_', 130, 16, int, value)

class npl_resolution_compound_v4_l4_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(140)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_v4_l4_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def resolution(self):
        return npl_resolution_compound_v4_l4_table_resolution_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @resolution.setter
    def resolution(self, value):
        self._set_field_value('field resolution', 0, 140, npl_resolution_compound_v4_l4_table_resolution_payload_t, value)

class npl_resolution_compound_v4_l4_table_value_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(148)
        self.payloads.resolution = npl_resolution_compound_v4_l4_table_resolution_payload_t(enc_data, dest_data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_v4_l4_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(140, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 140, 8, int, value)
    @property
    def payloads(self):
        return npl_resolution_compound_v4_l4_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 140, npl_resolution_compound_v4_l4_table_payloads_t, value)



# API-s for table: resolution_compound_v6_l4_table

NPL_RESOLUTION_COMPOUND_V6_L4_TABLE_ACTION_RESOLUTION = 0x0

class npl_resolution_compound_v6_l4_table_resolution_payload_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(140)
        self.enc_data = enc_data
        self.dest_data = dest_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_v6_l4_table_resolution_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def enc_data(self):
        return npl_resolution_result_enc_data_t._get_as_sub_field(self._data, self._offset_in_data + 60)
    @enc_data.setter
    def enc_data(self, value):
        self._set_field_value('field enc_data', 60, 80, npl_resolution_result_enc_data_t, value)
    @property
    def dest_data(self):
        return npl_resolution_result_dest_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dest_data.setter
    def dest_data(self, value):
        self._set_field_value('field dest_data', 0, 60, npl_resolution_result_dest_data_t, value)




class npl_resolution_compound_v6_l4_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__header_0__ipv6_header_sip_31_0_=0, packet_protocol_layer_next__header_0__ipv6_header_sip_95_48_=0, packet_protocol_layer_next__header_0__ipv6_header_next_header=0, packet_protocol_layer_next__header_0__ipv6_header_flow_label=0, resolution_local_vars_local_l4_ports_v6_dst_port=0, resolution_local_vars_local_l4_ports_v6_src_port=0, destination_for_resolution=0, traffic_class=0, device_rx_fragment_index_2_0=0, device_rx_fragment_index_10_3=0, packet_protocol_layer_next__header_0__ipv6_header_dip_102_0_=0, packet_protocol_layer_next__header_0__ipv6_header_sip_47_32_=0):
        super().__init__(301)
        self._set_field_value('const field', 0, 1, int, 0x1)
        self._set_field_value('const field', 141, 6, int, 0x1)
        self._set_field_value('const field', 170, 1, int, 0x0)
        self.packet_protocol_layer_next__header_0__ipv6_header_sip_31_0_ = packet_protocol_layer_next__header_0__ipv6_header_sip_31_0_
        self.packet_protocol_layer_next__header_0__ipv6_header_sip_95_48_ = packet_protocol_layer_next__header_0__ipv6_header_sip_95_48_
        self.packet_protocol_layer_next__header_0__ipv6_header_next_header = packet_protocol_layer_next__header_0__ipv6_header_next_header
        self.packet_protocol_layer_next__header_0__ipv6_header_flow_label = packet_protocol_layer_next__header_0__ipv6_header_flow_label
        self.resolution_local_vars_local_l4_ports_v6_dst_port = resolution_local_vars_local_l4_ports_v6_dst_port
        self.resolution_local_vars_local_l4_ports_v6_src_port = resolution_local_vars_local_l4_ports_v6_src_port
        self.destination_for_resolution = destination_for_resolution
        self.traffic_class = traffic_class
        self.device_rx_fragment_index_2_0 = device_rx_fragment_index_2_0
        self.device_rx_fragment_index_10_3 = device_rx_fragment_index_10_3
        self.packet_protocol_layer_next__header_0__ipv6_header_dip_102_0_ = packet_protocol_layer_next__header_0__ipv6_header_dip_102_0_
        self.packet_protocol_layer_next__header_0__ipv6_header_sip_47_32_ = packet_protocol_layer_next__header_0__ipv6_header_sip_47_32_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_v6_l4_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)
    @property
    def packet_protocol_layer_next__header_0__ipv6_header_sip_31_0_(self):
        return self._get_field_value(1, 32)
    @packet_protocol_layer_next__header_0__ipv6_header_sip_31_0_.setter
    def packet_protocol_layer_next__header_0__ipv6_header_sip_31_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__ipv6_header_sip_31_0_', 1, 32, int, value)
    @property
    def packet_protocol_layer_next__header_0__ipv6_header_sip_95_48_(self):
        return self._get_field_value(33, 48)
    @packet_protocol_layer_next__header_0__ipv6_header_sip_95_48_.setter
    def packet_protocol_layer_next__header_0__ipv6_header_sip_95_48_(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__ipv6_header_sip_95_48_', 33, 48, int, value)
    @property
    def packet_protocol_layer_next__header_0__ipv6_header_next_header(self):
        return self._get_field_value(81, 8)
    @packet_protocol_layer_next__header_0__ipv6_header_next_header.setter
    def packet_protocol_layer_next__header_0__ipv6_header_next_header(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__ipv6_header_next_header', 81, 8, int, value)
    @property
    def packet_protocol_layer_next__header_0__ipv6_header_flow_label(self):
        return self._get_field_value(89, 20)
    @packet_protocol_layer_next__header_0__ipv6_header_flow_label.setter
    def packet_protocol_layer_next__header_0__ipv6_header_flow_label(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__ipv6_header_flow_label', 89, 20, int, value)
    @property
    def resolution_local_vars_local_l4_ports_v6_dst_port(self):
        return self._get_field_value(109, 16)
    @resolution_local_vars_local_l4_ports_v6_dst_port.setter
    def resolution_local_vars_local_l4_ports_v6_dst_port(self, value):
        self._set_field_value('field resolution_local_vars_local_l4_ports_v6_dst_port', 109, 16, int, value)
    @property
    def resolution_local_vars_local_l4_ports_v6_src_port(self):
        return self._get_field_value(125, 16)
    @resolution_local_vars_local_l4_ports_v6_src_port.setter
    def resolution_local_vars_local_l4_ports_v6_src_port(self, value):
        self._set_field_value('field resolution_local_vars_local_l4_ports_v6_src_port', 125, 16, int, value)
    @property
    def const2_6b1_exact_0x1(self):
        return self._get_field_value(141, 6)
    @property
    def destination_for_resolution(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 147)
    @destination_for_resolution.setter
    def destination_for_resolution(self, value):
        self._set_field_value('field destination_for_resolution', 147, 20, npl_destination_t, value)
    @property
    def traffic_class(self):
        return npl_resolution_fwd_class_t._get_as_sub_field(self._data, self._offset_in_data + 167)
    @traffic_class.setter
    def traffic_class(self, value):
        self._set_field_value('field traffic_class', 167, 3, npl_resolution_fwd_class_t, value)
    @property
    def const3_1b0_exact_0x0(self):
        return self._get_field_value(170, 1)
    @property
    def device_rx_fragment_index_2_0(self):
        return self._get_field_value(171, 3)
    @device_rx_fragment_index_2_0.setter
    def device_rx_fragment_index_2_0(self, value):
        self._set_field_value('field device_rx_fragment_index_2_0', 171, 3, int, value)
    @property
    def device_rx_fragment_index_10_3(self):
        return self._get_field_value(174, 8)
    @device_rx_fragment_index_10_3.setter
    def device_rx_fragment_index_10_3(self, value):
        self._set_field_value('field device_rx_fragment_index_10_3', 174, 8, int, value)
    @property
    def packet_protocol_layer_next__header_0__ipv6_header_dip_102_0_(self):
        return self._get_field_value(182, 103)
    @packet_protocol_layer_next__header_0__ipv6_header_dip_102_0_.setter
    def packet_protocol_layer_next__header_0__ipv6_header_dip_102_0_(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__ipv6_header_dip_102_0_', 182, 103, int, value)
    @property
    def packet_protocol_layer_next__header_0__ipv6_header_sip_47_32_(self):
        return self._get_field_value(285, 16)
    @packet_protocol_layer_next__header_0__ipv6_header_sip_47_32_.setter
    def packet_protocol_layer_next__header_0__ipv6_header_sip_47_32_(self, value):
        self._set_field_value('field packet_protocol_layer_next__header_0__ipv6_header_sip_47_32_', 285, 16, int, value)

class npl_resolution_compound_v6_l4_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(140)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_v6_l4_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def resolution(self):
        return npl_resolution_compound_v6_l4_table_resolution_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @resolution.setter
    def resolution(self, value):
        self._set_field_value('field resolution', 0, 140, npl_resolution_compound_v6_l4_table_resolution_payload_t, value)

class npl_resolution_compound_v6_l4_table_value_t(basic_npl_struct):
    def __init__(self, enc_data=0, dest_data=0):
        super().__init__(148)
        self.payloads.resolution = npl_resolution_compound_v6_l4_table_resolution_payload_t(enc_data, dest_data)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_compound_v6_l4_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(140, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 140, 8, int, value)
    @property
    def payloads(self):
        return npl_resolution_compound_v6_l4_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 140, npl_resolution_compound_v6_l4_table_payloads_t, value)



# API-s for table: resolution_pfc_select_table

NPL_RESOLUTION_PFC_SELECT_TABLE_ACTION_UPDATE_PFC = 0x0

class npl_resolution_pfc_select_table_update_pfc_payload_t(basic_npl_struct):
    def __init__(self, pfc_enable=0, pfc_sample=0, pfc_direct_sample=0):
        super().__init__(3)
        self.pfc_enable = pfc_enable
        self.pfc_sample = pfc_sample
        self.pfc_direct_sample = pfc_direct_sample

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_pfc_select_table_update_pfc_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pfc_enable(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @pfc_enable.setter
    def pfc_enable(self, value):
        self._set_field_value('field pfc_enable', 2, 1, npl_bool_t, value)
    @property
    def pfc_sample(self):
        return self._get_field_value(1, 1)
    @pfc_sample.setter
    def pfc_sample(self, value):
        self._set_field_value('field pfc_sample', 1, 1, int, value)
    @property
    def pfc_direct_sample(self):
        return self._get_field_value(0, 1)
    @pfc_direct_sample.setter
    def pfc_direct_sample(self, value):
        self._set_field_value('field pfc_direct_sample', 0, 1, int, value)




class npl_resolution_pfc_select_table_key_t(basic_npl_struct):
    def __init__(self, tc=0, rx_time=0):
        super().__init__(7)
        self.tc = tc
        self.rx_time = rx_time

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_pfc_select_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tc(self):
        return self._get_field_value(0, 3)
    @tc.setter
    def tc(self, value):
        self._set_field_value('field tc', 0, 3, int, value)
    @property
    def rx_time(self):
        return self._get_field_value(3, 4)
    @rx_time.setter
    def rx_time(self, value):
        self._set_field_value('field rx_time', 3, 4, int, value)

class npl_resolution_pfc_select_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_pfc_select_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_pfc(self):
        return npl_resolution_pfc_select_table_update_pfc_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_pfc.setter
    def update_pfc(self, value):
        self._set_field_value('field update_pfc', 0, 3, npl_resolution_pfc_select_table_update_pfc_payload_t, value)

class npl_resolution_pfc_select_table_value_t(basic_npl_struct):
    def __init__(self, pfc_enable=0, pfc_sample=0, pfc_direct_sample=0):
        super().__init__(11)
        self.payloads.update_pfc = npl_resolution_pfc_select_table_update_pfc_payload_t(pfc_enable, pfc_sample, pfc_direct_sample)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_pfc_select_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_resolution_pfc_select_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_resolution_pfc_select_table_payloads_t, value)



# API-s for table: resolution_set_next_macro_table

NPL_RESOLUTION_SET_NEXT_MACRO_TABLE_ACTION_RESOLUTION_SET_NEXT_MACRO = 0x0

class npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t(basic_npl_struct):
    def __init__(self, next_is_fwd_done=0, pl_inc=0, macro_id=0):
        super().__init__(11)
        self.next_is_fwd_done = next_is_fwd_done
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def next_is_fwd_done(self):
        return self._get_field_value(10, 1)
    @next_is_fwd_done.setter
    def next_is_fwd_done(self, value):
        self._set_field_value('field next_is_fwd_done', 10, 1, int, value)
    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_resolution_set_next_macro_table_key_t(basic_npl_struct):
    def __init__(self, is_pfc_enable=0, is_inject_up=0):
        super().__init__(2)
        self.is_pfc_enable = is_pfc_enable
        self.is_inject_up = is_inject_up

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_set_next_macro_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def is_pfc_enable(self):
        return self._get_field_value(0, 1)
    @is_pfc_enable.setter
    def is_pfc_enable(self, value):
        self._set_field_value('field is_pfc_enable', 0, 1, int, value)
    @property
    def is_inject_up(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @is_inject_up.setter
    def is_inject_up(self, value):
        self._set_field_value('field is_inject_up', 1, 1, npl_bool_t, value)

class npl_resolution_set_next_macro_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(11)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_set_next_macro_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def resolution_set_next_macro(self):
        return npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @resolution_set_next_macro.setter
    def resolution_set_next_macro(self, value):
        self._set_field_value('field resolution_set_next_macro', 0, 11, npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t, value)

class npl_resolution_set_next_macro_table_value_t(basic_npl_struct):
    def __init__(self, next_is_fwd_done=0, pl_inc=0, macro_id=0):
        super().__init__(19)
        self.payloads.resolution_set_next_macro = npl_resolution_set_next_macro_table_resolution_set_next_macro_payload_t(next_is_fwd_done, pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_resolution_set_next_macro_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(11, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 11, 8, int, value)
    @property
    def payloads(self):
        return npl_resolution_set_next_macro_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 11, npl_resolution_set_next_macro_table_payloads_t, value)



# API-s for table: rewrite_sa_prefix_index_table

NPL_REWRITE_SA_PREFIX_INDEX_TABLE_ACTION_WRITE = 0x0

class npl_rewrite_sa_prefix_index_table_key_t(basic_npl_struct):
    def __init__(self, rewrite_sa_index=0):
        super().__init__(4)
        self.rewrite_sa_index = rewrite_sa_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rewrite_sa_prefix_index_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rewrite_sa_index(self):
        return self._get_field_value(0, 4)
    @rewrite_sa_index.setter
    def rewrite_sa_index(self, value):
        self._set_field_value('field rewrite_sa_index', 0, 4, int, value)

class npl_rewrite_sa_prefix_index_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rewrite_sa_prefix_index_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sa_msb(self):
        return self._get_field_value(0, 32)
    @sa_msb.setter
    def sa_msb(self, value):
        self._set_field_value('field sa_msb', 0, 32, int, value)

class npl_rewrite_sa_prefix_index_table_value_t(basic_npl_struct):
    def __init__(self, sa_msb=0):
        super().__init__(40)
        self.payloads.sa_msb = sa_msb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rewrite_sa_prefix_index_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_rewrite_sa_prefix_index_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_rewrite_sa_prefix_index_table_payloads_t, value)



# API-s for table: rmep_last_bfd_time_table

NPL_RMEP_LAST_BFD_TIME_TABLE_ACTION_NO_OP = 0x0

class npl_rmep_last_bfd_time_table_key_t(basic_npl_struct):
    def __init__(self, pd_pd_npu_host_receive_fields_bfd_rmep_id=0, device_host_current_time=0):
        super().__init__(46)
        self._set_field_value('const field', 0, 1, int, 0x1)
        self.pd_pd_npu_host_receive_fields_bfd_rmep_id = pd_pd_npu_host_receive_fields_bfd_rmep_id
        self.device_host_current_time = device_host_current_time

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_last_bfd_time_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)
    @property
    def pd_pd_npu_host_receive_fields_bfd_rmep_id(self):
        return self._get_field_value(1, 13)
    @pd_pd_npu_host_receive_fields_bfd_rmep_id.setter
    def pd_pd_npu_host_receive_fields_bfd_rmep_id(self, value):
        self._set_field_value('field pd_pd_npu_host_receive_fields_bfd_rmep_id', 1, 13, int, value)
    @property
    def device_host_current_time(self):
        return self._get_field_value(14, 32)
    @device_host_current_time.setter
    def device_host_current_time(self, value):
        self._set_field_value('field device_host_current_time', 14, 32, int, value)

class npl_rmep_last_bfd_time_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_last_bfd_time_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_rmep_last_bfd_time_table_value_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(8)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_last_bfd_time_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_rmep_last_bfd_time_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_rmep_last_bfd_time_table_payloads_t, value)



# API-s for table: rmep_last_ccm_time_table

NPL_RMEP_LAST_CCM_TIME_TABLE_ACTION_NO_OP = 0x0

class npl_rmep_last_ccm_time_table_key_t(basic_npl_struct):
    def __init__(self, pd_pd_npu_host_receive_fields_eth_oam_rmep_id=0, device_host_current_time=0):
        super().__init__(46)
        self._set_field_value('const field', 0, 1, int, 0x1)
        self.pd_pd_npu_host_receive_fields_eth_oam_rmep_id = pd_pd_npu_host_receive_fields_eth_oam_rmep_id
        self.device_host_current_time = device_host_current_time

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_last_ccm_time_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b1_exact_0x1(self):
        return self._get_field_value(0, 1)
    @property
    def pd_pd_npu_host_receive_fields_eth_oam_rmep_id(self):
        return self._get_field_value(1, 13)
    @pd_pd_npu_host_receive_fields_eth_oam_rmep_id.setter
    def pd_pd_npu_host_receive_fields_eth_oam_rmep_id(self, value):
        self._set_field_value('field pd_pd_npu_host_receive_fields_eth_oam_rmep_id', 1, 13, int, value)
    @property
    def device_host_current_time(self):
        return self._get_field_value(14, 32)
    @device_host_current_time.setter
    def device_host_current_time(self, value):
        self._set_field_value('field device_host_current_time', 14, 32, int, value)

class npl_rmep_last_ccm_time_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_last_ccm_time_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_rmep_last_ccm_time_table_value_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(8)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_last_ccm_time_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_rmep_last_ccm_time_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_rmep_last_ccm_time_table_payloads_t, value)



# API-s for table: rmep_last_time_table

NPL_RMEP_LAST_TIME_TABLE_ACTION_WRITE = 0x0

class npl_rmep_last_time_table_key_t(basic_npl_struct):
    def __init__(self, rmep_key=0):
        super().__init__(13)
        self.rmep_key = rmep_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_last_time_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rmep_key(self):
        return npl_scanner_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rmep_key.setter
    def rmep_key(self, value):
        self._set_field_value('field rmep_key', 0, 13, npl_scanner_id_t, value)

class npl_rmep_last_time_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_last_time_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rmep_result_rmep_last_time_result(self):
        return self._get_field_value(0, 32)
    @rmep_result_rmep_last_time_result.setter
    def rmep_result_rmep_last_time_result(self, value):
        self._set_field_value('field rmep_result_rmep_last_time_result', 0, 32, int, value)

class npl_rmep_last_time_table_value_t(basic_npl_struct):
    def __init__(self, rmep_result_rmep_last_time_result=0):
        super().__init__(40)
        self.payloads.rmep_result_rmep_last_time_result = rmep_result_rmep_last_time_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_last_time_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_rmep_last_time_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_rmep_last_time_table_payloads_t, value)



# API-s for table: rmep_state_table

NPL_RMEP_STATE_TABLE_ACTION_WRITE = 0x0

class npl_rmep_state_table_key_t(basic_npl_struct):
    def __init__(self, rmep_key=0):
        super().__init__(13)
        self.rmep_key = rmep_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_state_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rmep_key(self):
        return npl_scanner_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rmep_key.setter
    def rmep_key(self, value):
        self._set_field_value('field rmep_key', 0, 13, npl_scanner_id_t, value)

class npl_rmep_state_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_state_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rmep_result_rmep_state_table_result(self):
        return npl_rmep_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rmep_result_rmep_state_table_result.setter
    def rmep_result_rmep_state_table_result(self, value):
        self._set_field_value('field rmep_result_rmep_state_table_result', 0, 16, npl_rmep_data_t, value)

class npl_rmep_state_table_value_t(basic_npl_struct):
    def __init__(self, rmep_result_rmep_state_table_result=0):
        super().__init__(24)
        self.payloads.rmep_result_rmep_state_table_result = rmep_result_rmep_state_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rmep_state_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_rmep_state_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_rmep_state_table_payloads_t, value)



# API-s for table: rpf_fec_access_map_table

NPL_RPF_FEC_ACCESS_MAP_TABLE_ACTION_WRITE = 0x0

class npl_rpf_fec_access_map_table_key_t(basic_npl_struct):
    def __init__(self, prefix=0):
        super().__init__(5)
        self.prefix = prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rpf_fec_access_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def prefix(self):
        return self._get_field_value(0, 5)
    @prefix.setter
    def prefix(self, value):
        self._set_field_value('field prefix', 0, 5, int, value)

class npl_rpf_fec_access_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rpf_fec_access_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lpm_prefix_fec_access_map(self):
        return npl_lpm_prefix_fec_access_map_output_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lpm_prefix_fec_access_map.setter
    def lpm_prefix_fec_access_map(self, value):
        self._set_field_value('field lpm_prefix_fec_access_map', 0, 1, npl_lpm_prefix_fec_access_map_output_t, value)

class npl_rpf_fec_access_map_table_value_t(basic_npl_struct):
    def __init__(self, lpm_prefix_fec_access_map=0):
        super().__init__(9)
        self.payloads.lpm_prefix_fec_access_map = lpm_prefix_fec_access_map

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rpf_fec_access_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_rpf_fec_access_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_rpf_fec_access_map_table_payloads_t, value)



# API-s for table: rpf_fec_table

NPL_RPF_FEC_TABLE_ACTION_FOUND = 0x0

class npl_rpf_fec_table_found_payload_t(basic_npl_struct):
    def __init__(self, dst=0):
        super().__init__(20)
        self.dst = dst

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rpf_fec_table_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def dst(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @dst.setter
    def dst(self, value):
        self._set_field_value('field dst', 0, 20, npl_destination_t, value)




class npl_rpf_fec_table_key_t(basic_npl_struct):
    def __init__(self, fec=0):
        super().__init__(12)
        self.fec = fec

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rpf_fec_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fec(self):
        return self._get_field_value(0, 12)
    @fec.setter
    def fec(self, value):
        self._set_field_value('field fec', 0, 12, int, value)

class npl_rpf_fec_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rpf_fec_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def found(self):
        return npl_rpf_fec_table_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @found.setter
    def found(self, value):
        self._set_field_value('field found', 0, 20, npl_rpf_fec_table_found_payload_t, value)

class npl_rpf_fec_table_value_t(basic_npl_struct):
    def __init__(self, dst=0):
        super().__init__(28)
        self.payloads.found = npl_rpf_fec_table_found_payload_t(dst)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rpf_fec_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_rpf_fec_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_rpf_fec_table_payloads_t, value)



# API-s for table: rtf_conf_set_to_og_pcl_compress_bits_mapping_table

NPL_RTF_CONF_SET_TO_OG_PCL_COMPRESS_BITS_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_key_t(basic_npl_struct):
    def __init__(self, rtf_step=0, lp_rtf_conf_set=0):
        super().__init__(10)
        self.rtf_step = rtf_step
        self.lp_rtf_conf_set = lp_rtf_conf_set

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_step(self):
        return npl_rtf_step_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_step.setter
    def rtf_step(self, value):
        self._set_field_value('field rtf_step', 0, 2, npl_rtf_step_t, value)
    @property
    def lp_rtf_conf_set(self):
        return npl_lp_rtf_conf_set_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @lp_rtf_conf_set.setter
    def lp_rtf_conf_set(self, value):
        self._set_field_value('field lp_rtf_conf_set', 2, 8, npl_lp_rtf_conf_set_t, value)

class npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def per_rtf_step_og_pcl_compress_bits(self):
        return npl_per_rtf_step_og_pcl_compress_bits_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @per_rtf_step_og_pcl_compress_bits.setter
    def per_rtf_step_og_pcl_compress_bits(self, value):
        self._set_field_value('field per_rtf_step_og_pcl_compress_bits', 0, 4, npl_per_rtf_step_og_pcl_compress_bits_t, value)

class npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_value_t(basic_npl_struct):
    def __init__(self, per_rtf_step_og_pcl_compress_bits=0):
        super().__init__(12)
        self.payloads.per_rtf_step_og_pcl_compress_bits = per_rtf_step_og_pcl_compress_bits

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_payloads_t, value)



# API-s for table: rtf_conf_set_to_og_pcl_ids_mapping_table

NPL_RTF_CONF_SET_TO_OG_PCL_IDS_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_rtf_conf_set_to_og_pcl_ids_mapping_table_key_t(basic_npl_struct):
    def __init__(self, rtf_step=0, lp_rtf_conf_set=0):
        super().__init__(10)
        self.rtf_step = rtf_step
        self.lp_rtf_conf_set = lp_rtf_conf_set

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_conf_set_to_og_pcl_ids_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_step(self):
        return npl_rtf_step_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_step.setter
    def rtf_step(self, value):
        self._set_field_value('field rtf_step', 0, 2, npl_rtf_step_t, value)
    @property
    def lp_rtf_conf_set(self):
        return npl_lp_rtf_conf_set_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @lp_rtf_conf_set.setter
    def lp_rtf_conf_set(self, value):
        self._set_field_value('field lp_rtf_conf_set', 2, 8, npl_lp_rtf_conf_set_t, value)

class npl_rtf_conf_set_to_og_pcl_ids_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_conf_set_to_og_pcl_ids_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def per_rtf_step_og_pcl_ids(self):
        return npl_per_rtf_step_og_pcl_ids_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @per_rtf_step_og_pcl_ids.setter
    def per_rtf_step_og_pcl_ids(self, value):
        self._set_field_value('field per_rtf_step_og_pcl_ids', 0, 32, npl_per_rtf_step_og_pcl_ids_t, value)

class npl_rtf_conf_set_to_og_pcl_ids_mapping_table_value_t(basic_npl_struct):
    def __init__(self, per_rtf_step_og_pcl_ids=0):
        super().__init__(40)
        self.payloads.per_rtf_step_og_pcl_ids = per_rtf_step_og_pcl_ids

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_conf_set_to_og_pcl_ids_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_rtf_conf_set_to_og_pcl_ids_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_rtf_conf_set_to_og_pcl_ids_mapping_table_payloads_t, value)



# API-s for table: rtf_conf_set_to_post_fwd_stage_mapping_table

NPL_RTF_CONF_SET_TO_POST_FWD_STAGE_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_rtf_conf_set_to_post_fwd_stage_mapping_table_key_t(basic_npl_struct):
    def __init__(self, ip_version=0, lp_rtf_conf_set=0):
        super().__init__(9)
        self.ip_version = ip_version
        self.lp_rtf_conf_set = lp_rtf_conf_set

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_conf_set_to_post_fwd_stage_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ip_version(self):
        return self._get_field_value(0, 1)
    @ip_version.setter
    def ip_version(self, value):
        self._set_field_value('field ip_version', 0, 1, int, value)
    @property
    def lp_rtf_conf_set(self):
        return npl_lp_rtf_conf_set_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @lp_rtf_conf_set.setter
    def lp_rtf_conf_set(self, value):
        self._set_field_value('field lp_rtf_conf_set', 1, 8, npl_lp_rtf_conf_set_t, value)

class npl_rtf_conf_set_to_post_fwd_stage_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_conf_set_to_post_fwd_stage_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def post_fwd_params(self):
        return npl_post_fwd_params_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @post_fwd_params.setter
    def post_fwd_params(self, value):
        self._set_field_value('field post_fwd_params', 0, 6, npl_post_fwd_params_t, value)

class npl_rtf_conf_set_to_post_fwd_stage_mapping_table_value_t(basic_npl_struct):
    def __init__(self, post_fwd_params=0):
        super().__init__(14)
        self.payloads.post_fwd_params = post_fwd_params

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_conf_set_to_post_fwd_stage_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_rtf_conf_set_to_post_fwd_stage_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_rtf_conf_set_to_post_fwd_stage_mapping_table_payloads_t, value)



# API-s for table: rtf_next_macro_static_table

NPL_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO = 0x0

class npl_rtf_next_macro_static_table_set_macro_payload_t(basic_npl_struct):
    def __init__(self, jump_to_fwd=0, pl_inc=0, macro_id=0):
        super().__init__(11)
        self.jump_to_fwd = jump_to_fwd
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_next_macro_static_table_set_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def jump_to_fwd(self):
        return self._get_field_value(10, 1)
    @jump_to_fwd.setter
    def jump_to_fwd(self, value):
        self._set_field_value('field jump_to_fwd', 10, 1, int, value)
    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_rtf_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, rtf_indications=0, next_rtf_stage=0, pd_tunnel_ipv4_ipv6_init_rtf_stage=0, curr_and_next_prot_type=0):
        super().__init__(19)
        self.rtf_indications = rtf_indications
        self.next_rtf_stage = next_rtf_stage
        self.pd_tunnel_ipv4_ipv6_init_rtf_stage = pd_tunnel_ipv4_ipv6_init_rtf_stage
        self.curr_and_next_prot_type = curr_and_next_prot_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rtf_indications(self):
        return npl_rtf_compressed_fields_for_next_macro_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rtf_indications.setter
    def rtf_indications(self, value):
        self._set_field_value('field rtf_indications', 0, 4, npl_rtf_compressed_fields_for_next_macro_t, value)
    @property
    def next_rtf_stage(self):
        return self._get_field_value(4, 3)
    @next_rtf_stage.setter
    def next_rtf_stage(self, value):
        self._set_field_value('field next_rtf_stage', 4, 3, int, value)
    @property
    def pd_tunnel_ipv4_ipv6_init_rtf_stage(self):
        return npl_ipv4_ipv6_init_rtf_stage_t._get_as_sub_field(self._data, self._offset_in_data + 7)
    @pd_tunnel_ipv4_ipv6_init_rtf_stage.setter
    def pd_tunnel_ipv4_ipv6_init_rtf_stage(self, value):
        self._set_field_value('field pd_tunnel_ipv4_ipv6_init_rtf_stage', 7, 4, npl_ipv4_ipv6_init_rtf_stage_t, value)
    @property
    def curr_and_next_prot_type(self):
        return npl_curr_and_next_prot_type_t._get_as_sub_field(self._data, self._offset_in_data + 11)
    @curr_and_next_prot_type.setter
    def curr_and_next_prot_type(self, value):
        self._set_field_value('field curr_and_next_prot_type', 11, 8, npl_curr_and_next_prot_type_t, value)

class npl_rtf_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(11)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_macro(self):
        return npl_rtf_next_macro_static_table_set_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_macro.setter
    def set_macro(self, value):
        self._set_field_value('field set_macro', 0, 11, npl_rtf_next_macro_static_table_set_macro_payload_t, value)

class npl_rtf_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, jump_to_fwd=0, pl_inc=0, macro_id=0):
        super().__init__(19)
        self.payloads.set_macro = npl_rtf_next_macro_static_table_set_macro_payload_t(jump_to_fwd, pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rtf_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(11, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 11, 8, int, value)
    @property
    def payloads(self):
        return npl_rtf_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 11, npl_rtf_next_macro_static_table_payloads_t, value)



# API-s for table: rx_counters_block_config_table

NPL_RX_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_CONFIG = 0x0

class npl_rx_counters_block_config_table_config_payload_t(basic_npl_struct):
    def __init__(self, inc_bank_for_ifg_b=0, inc_addr_for_set=0, bank_set_type=0):
        super().__init__(4)
        self.inc_bank_for_ifg_b = inc_bank_for_ifg_b
        self.inc_addr_for_set = inc_addr_for_set
        self.bank_set_type = bank_set_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_counters_block_config_table_config_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def inc_bank_for_ifg_b(self):
        return self._get_field_value(3, 1)
    @inc_bank_for_ifg_b.setter
    def inc_bank_for_ifg_b(self, value):
        self._set_field_value('field inc_bank_for_ifg_b', 3, 1, int, value)
    @property
    def inc_addr_for_set(self):
        return self._get_field_value(2, 1)
    @inc_addr_for_set.setter
    def inc_addr_for_set(self, value):
        self._set_field_value('field inc_addr_for_set', 2, 1, int, value)
    @property
    def bank_set_type(self):
        return self._get_field_value(0, 2)
    @bank_set_type.setter
    def bank_set_type(self, value):
        self._set_field_value('field bank_set_type', 0, 2, int, value)




class npl_rx_counters_block_config_table_key_t(basic_npl_struct):
    def __init__(self, counter_block_id=0):
        super().__init__(7)
        self.counter_block_id = counter_block_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_counters_block_config_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def counter_block_id(self):
        return self._get_field_value(0, 7)
    @counter_block_id.setter
    def counter_block_id(self, value):
        self._set_field_value('field counter_block_id', 0, 7, int, value)

class npl_rx_counters_block_config_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_counters_block_config_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def config(self):
        return npl_rx_counters_block_config_table_config_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @config.setter
    def config(self, value):
        self._set_field_value('field config', 0, 4, npl_rx_counters_block_config_table_config_payload_t, value)

class npl_rx_counters_block_config_table_value_t(basic_npl_struct):
    def __init__(self, inc_bank_for_ifg_b=0, inc_addr_for_set=0, bank_set_type=0):
        super().__init__(12)
        self.payloads.config = npl_rx_counters_block_config_table_config_payload_t(inc_bank_for_ifg_b, inc_addr_for_set, bank_set_type)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_counters_block_config_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_counters_block_config_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_rx_counters_block_config_table_payloads_t, value)



# API-s for table: rx_fwd_error_handling_counter_table

NPL_RX_FWD_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT = 0x0

class npl_rx_fwd_error_handling_counter_table_update_result_payload_t(basic_npl_struct):
    def __init__(self, counter=0):
        super().__init__(20)
        self.counter = counter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_fwd_error_handling_counter_table_update_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter.setter
    def counter(self, value):
        self._set_field_value('field counter', 0, 20, npl_counter_ptr_t, value)




class npl_rx_fwd_error_handling_counter_table_key_t(basic_npl_struct):
    def __init__(self, pd_source_if_pif=0, ser=0):
        super().__init__(6)
        self.pd_source_if_pif = pd_source_if_pif
        self.ser = ser

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_fwd_error_handling_counter_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_source_if_pif(self):
        return self._get_field_value(0, 5)
    @pd_source_if_pif.setter
    def pd_source_if_pif(self, value):
        self._set_field_value('field pd_source_if_pif', 0, 5, int, value)
    @property
    def ser(self):
        return self._get_field_value(5, 1)
    @ser.setter
    def ser(self, value):
        self._set_field_value('field ser', 5, 1, int, value)

class npl_rx_fwd_error_handling_counter_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_fwd_error_handling_counter_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_result(self):
        return npl_rx_fwd_error_handling_counter_table_update_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_result.setter
    def update_result(self, value):
        self._set_field_value('field update_result', 0, 20, npl_rx_fwd_error_handling_counter_table_update_result_payload_t, value)

class npl_rx_fwd_error_handling_counter_table_value_t(basic_npl_struct):
    def __init__(self, counter=0):
        super().__init__(28)
        self.payloads.update_result = npl_rx_fwd_error_handling_counter_table_update_result_payload_t(counter)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_fwd_error_handling_counter_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_fwd_error_handling_counter_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_rx_fwd_error_handling_counter_table_payloads_t, value)



# API-s for table: rx_fwd_error_handling_destination_table

NPL_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT = 0x0

class npl_rx_fwd_error_handling_destination_table_update_result_payload_t(basic_npl_struct):
    def __init__(self, destination=0):
        super().__init__(20)
        self.destination = destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_fwd_error_handling_destination_table_update_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def destination(self):
        return self._get_field_value(0, 20)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 0, 20, int, value)




class npl_rx_fwd_error_handling_destination_table_key_t(basic_npl_struct):
    def __init__(self, ser=0):
        super().__init__(1)
        self.ser = ser

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_fwd_error_handling_destination_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ser(self):
        return self._get_field_value(0, 1)
    @ser.setter
    def ser(self, value):
        self._set_field_value('field ser', 0, 1, int, value)

class npl_rx_fwd_error_handling_destination_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_fwd_error_handling_destination_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_result(self):
        return npl_rx_fwd_error_handling_destination_table_update_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_result.setter
    def update_result(self, value):
        self._set_field_value('field update_result', 0, 20, npl_rx_fwd_error_handling_destination_table_update_result_payload_t, value)

class npl_rx_fwd_error_handling_destination_table_value_t(basic_npl_struct):
    def __init__(self, destination=0):
        super().__init__(28)
        self.payloads.update_result = npl_rx_fwd_error_handling_destination_table_update_result_payload_t(destination)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_fwd_error_handling_destination_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_fwd_error_handling_destination_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_rx_fwd_error_handling_destination_table_payloads_t, value)



# API-s for table: rx_ip_p_counter_offset_static_table

NPL_RX_IP_P_COUNTER_OFFSET_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_rx_ip_p_counter_offset_static_table_key_t(basic_npl_struct):
    def __init__(self, per_protocol_count=0, ip_ver_mc=0):
        super().__init__(3)
        self.per_protocol_count = per_protocol_count
        self.ip_ver_mc = ip_ver_mc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_ip_p_counter_offset_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def per_protocol_count(self):
        return self._get_field_value(0, 1)
    @per_protocol_count.setter
    def per_protocol_count(self, value):
        self._set_field_value('field per_protocol_count', 0, 1, int, value)
    @property
    def ip_ver_mc(self):
        return npl_ip_ver_mc_t._get_as_sub_field(self._data, self._offset_in_data + 1)
    @ip_ver_mc.setter
    def ip_ver_mc(self, value):
        self._set_field_value('field ip_ver_mc', 1, 2, npl_ip_ver_mc_t, value)

class npl_rx_ip_p_counter_offset_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_ip_p_counter_offset_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def macro_counters_update_counter_0_offset(self):
        return self._get_field_value(0, 3)
    @macro_counters_update_counter_0_offset.setter
    def macro_counters_update_counter_0_offset(self, value):
        self._set_field_value('field macro_counters_update_counter_0_offset', 0, 3, int, value)

class npl_rx_ip_p_counter_offset_static_table_value_t(basic_npl_struct):
    def __init__(self, macro_counters_update_counter_0_offset=0):
        super().__init__(11)
        self.payloads.macro_counters_update_counter_0_offset = macro_counters_update_counter_0_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_ip_p_counter_offset_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_ip_p_counter_offset_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_rx_ip_p_counter_offset_static_table_payloads_t, value)



# API-s for table: rx_map_npp_to_ssp_table

NPL_RX_MAP_NPP_TO_SSP_TABLE_ACTION_WRITE = 0x0

class npl_rx_map_npp_to_ssp_table_key_t(basic_npl_struct):
    def __init__(self, npp_attributes_index=0):
        super().__init__(8)
        self.npp_attributes_index = npp_attributes_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_map_npp_to_ssp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def npp_attributes_index(self):
        return self._get_field_value(0, 8)
    @npp_attributes_index.setter
    def npp_attributes_index(self, value):
        self._set_field_value('field npp_attributes_index', 0, 8, int, value)

class npl_rx_map_npp_to_ssp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(27)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_map_npp_to_ssp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_npp_to_ssp_result(self):
        return npl_punt_ssp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_npp_to_ssp_result.setter
    def local_npp_to_ssp_result(self, value):
        self._set_field_value('field local_npp_to_ssp_result', 0, 27, npl_punt_ssp_attributes_t, value)

class npl_rx_map_npp_to_ssp_table_value_t(basic_npl_struct):
    def __init__(self, local_npp_to_ssp_result=0):
        super().__init__(35)
        self.payloads.local_npp_to_ssp_result = local_npp_to_ssp_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_map_npp_to_ssp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(27, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 27, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_map_npp_to_ssp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 27, npl_rx_map_npp_to_ssp_table_payloads_t, value)



# API-s for table: rx_map_pif_ifg_or_ssp_to_init_data_table

NPL_RX_MAP_PIF_IFG_OR_SSP_TO_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_PIF_IFG = 0x0
NPL_RX_MAP_PIF_IFG_OR_SSP_TO_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_SSP = 0x1

class npl_rx_map_pif_ifg_or_ssp_to_init_data_table_write_init_data_for_pif_ifg_payload_t(basic_npl_struct):
    def __init__(self, slice_and_source_if=0, init_data=0):
        super().__init__(59)
        self.slice_and_source_if = slice_and_source_if
        self.init_data = init_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_map_pif_ifg_or_ssp_to_init_data_table_write_init_data_for_pif_ifg_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def slice_and_source_if(self):
        return npl_slice_and_source_if_t._get_as_sub_field(self._data, self._offset_in_data + 48)
    @slice_and_source_if.setter
    def slice_and_source_if(self, value):
        self._set_field_value('field slice_and_source_if', 48, 11, npl_slice_and_source_if_t, value)
    @property
    def init_data(self):
        return npl_initial_pd_nw_rx_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @init_data.setter
    def init_data(self, value):
        self._set_field_value('field init_data', 0, 48, npl_initial_pd_nw_rx_data_t, value)




class npl_rx_map_pif_ifg_or_ssp_to_init_data_table_write_init_data_for_ssp_payload_t(basic_npl_struct):
    def __init__(self, init_data=0):
        super().__init__(59)
        self.init_data = init_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_map_pif_ifg_or_ssp_to_init_data_table_write_init_data_for_ssp_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def init_data(self):
        return npl_initial_pd_nw_rx_data_t._get_as_sub_field(self._data, self._offset_in_data + 11)
    @init_data.setter
    def init_data(self, value):
        self._set_field_value('field init_data', 11, 48, npl_initial_pd_nw_rx_data_t, value)




class npl_rx_map_pif_ifg_or_ssp_to_init_data_table_key_option_init_data_from_ssp_t(basic_npl_struct):
    def __init__(self, inject_local_var_ssp=0):
        super().__init__(23)
        self.inject_local_var_ssp = inject_local_var_ssp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_map_pif_ifg_or_ssp_to_init_data_table_key_option_init_data_from_ssp_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_4b0001_exact_0x1(self):
        return self._get_field_value(0, 4)
    @property
    def const2_2b00_exact_0x0(self):
        return self._get_field_value(4, 2)
    @property
    def const3_SM_LDB_INJECT_UP_SSP_MAPPING_exact_0xb(self):
        return self._get_field_value(6, 5)
    @property
    def inject_local_var_ssp(self):
        return self._get_field_value(11, 12)
    @inject_local_var_ssp.setter
    def inject_local_var_ssp(self, value):
        self._set_field_value('field inject_local_var_ssp', 11, 12, int, value)



class npl_rx_map_pif_ifg_or_ssp_to_init_data_table_key_option_init_data_from_pif_ifg_t(basic_npl_struct):
    def __init__(self, inject_local_var_source_if=0, pd_init_fields_initial_slice_id=0):
        super().__init__(22)
        self.inject_local_var_source_if = inject_local_var_source_if
        self.pd_init_fields_initial_slice_id = pd_init_fields_initial_slice_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_map_pif_ifg_or_ssp_to_init_data_table_key_option_init_data_from_pif_ifg_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_4b0001_exact_0x1(self):
        return self._get_field_value(0, 4)
    @property
    def const2_2b00_exact_0x0(self):
        return self._get_field_value(4, 2)
    @property
    def const3_SM_LDB_INJECT_UP_PIF_IFG_MAPPING_exact_0x1b(self):
        return self._get_field_value(6, 5)
    @property
    def inject_local_var_source_if(self):
        return npl_source_if_t._get_as_sub_field(self._data, self._offset_in_data + 11)
    @inject_local_var_source_if.setter
    def inject_local_var_source_if(self, value):
        self._set_field_value('field inject_local_var_source_if', 11, 8, npl_source_if_t, value)
    @property
    def pd_init_fields_initial_slice_id(self):
        return self._get_field_value(19, 3)
    @pd_init_fields_initial_slice_id.setter
    def pd_init_fields_initial_slice_id(self, value):
        self._set_field_value('field pd_init_fields_initial_slice_id', 19, 3, int, value)




class rx_map_pif_ifg_or_ssp_to_init_data_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(23 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = rx_map_pif_ifg_or_ssp_to_init_data_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_INIT_DATA_FROM_SSP(self):
        return npl_rx_map_pif_ifg_or_ssp_to_init_data_table_key_option_init_data_from_ssp_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_INIT_DATA_FROM_SSP.setter
    def NPL_INIT_DATA_FROM_SSP(self, value):
        self._set_field_value('field NPL_INIT_DATA_FROM_SSP', 0, 23, npl_rx_map_pif_ifg_or_ssp_to_init_data_table_key_option_init_data_from_ssp_t, value)
    @property
    def NPL_INIT_DATA_FROM_PIF_IFG(self):
        return npl_rx_map_pif_ifg_or_ssp_to_init_data_table_key_option_init_data_from_pif_ifg_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_INIT_DATA_FROM_PIF_IFG.setter
    def NPL_INIT_DATA_FROM_PIF_IFG(self, value):
        self._set_field_value('field NPL_INIT_DATA_FROM_PIF_IFG', 0, 22, npl_rx_map_pif_ifg_or_ssp_to_init_data_table_key_option_init_data_from_pif_ifg_t, value)

class npl_rx_map_pif_ifg_or_ssp_to_init_data_table_key_t(basic_npl_struct):
    def __init__(self, inject_local_var_init_data_selector=0):
        super().__init__(23)
        self.inject_local_var_init_data_selector = inject_local_var_init_data_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_map_pif_ifg_or_ssp_to_init_data_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _inject_local_var_init_data_selector = 0
    @property
    def inject_local_var_init_data_selector(self):
        return self._inject_local_var_init_data_selector
    @inject_local_var_init_data_selector.setter
    def inject_local_var_init_data_selector(self, value):
        self._inject_local_var_init_data_selector = value
        if inject_local_var_init_data_selector == NPL_INIT_DATA_FROM_SSP:
            self._set_field_value('const field', 0, 4, int, 0x1)
        if inject_local_var_init_data_selector == NPL_INIT_DATA_FROM_SSP:
            self._set_field_value('const field', 4, 2, int, 0x0)
        if inject_local_var_init_data_selector == NPL_INIT_DATA_FROM_SSP:
            self._set_field_value('const field', 6, 5, int, 0xb)
        if inject_local_var_init_data_selector == NPL_INIT_DATA_FROM_PIF_IFG:
            self._set_field_value('const field', 0, 4, int, 0x1)
        if inject_local_var_init_data_selector == NPL_INIT_DATA_FROM_PIF_IFG:
            self._set_field_value('const field', 4, 2, int, 0x0)
        if inject_local_var_init_data_selector == NPL_INIT_DATA_FROM_PIF_IFG:
            self._set_field_value('const field', 6, 5, int, 0x1b)

    @property
    def options(self):
        return rx_map_pif_ifg_or_ssp_to_init_data_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 23 - 0, rx_map_pif_ifg_or_ssp_to_init_data_table_key_options_t, value)

class npl_rx_map_pif_ifg_or_ssp_to_init_data_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(59)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_map_pif_ifg_or_ssp_to_init_data_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def write_init_data_for_pif_ifg(self):
        return npl_rx_map_pif_ifg_or_ssp_to_init_data_table_write_init_data_for_pif_ifg_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @write_init_data_for_pif_ifg.setter
    def write_init_data_for_pif_ifg(self, value):
        self._set_field_value('field write_init_data_for_pif_ifg', 0, 59, npl_rx_map_pif_ifg_or_ssp_to_init_data_table_write_init_data_for_pif_ifg_payload_t, value)
    @property
    def write_init_data_for_ssp(self):
        return npl_rx_map_pif_ifg_or_ssp_to_init_data_table_write_init_data_for_ssp_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @write_init_data_for_ssp.setter
    def write_init_data_for_ssp(self, value):
        self._set_field_value('field write_init_data_for_ssp', 0, 59, npl_rx_map_pif_ifg_or_ssp_to_init_data_table_write_init_data_for_ssp_payload_t, value)

class npl_rx_map_pif_ifg_or_ssp_to_init_data_table_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(67)
        self.action = action
        if self.action == NPL_RX_MAP_PIF_IFG_OR_SSP_TO_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_PIF_IFG:
            self.payloads.write_init_data_for_pif_ifg = npl_rx_map_pif_ifg_or_ssp_to_init_data_table_write_init_data_for_pif_ifg_payload_t(*args, **kwargs)

        if self.action == NPL_RX_MAP_PIF_IFG_OR_SSP_TO_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_SSP:
            self.payloads.write_init_data_for_ssp = npl_rx_map_pif_ifg_or_ssp_to_init_data_table_write_init_data_for_ssp_payload_t(*args, **kwargs)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_map_pif_ifg_or_ssp_to_init_data_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(59, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 59, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_map_pif_ifg_or_ssp_to_init_data_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 59, npl_rx_map_pif_ifg_or_ssp_to_init_data_table_payloads_t, value)



# API-s for table: rx_meter_block_meter_attribute_table

NPL_RX_METER_BLOCK_METER_ATTRIBUTE_TABLE_ACTION_WRITE = 0x0

class npl_rx_meter_block_meter_attribute_table_key_t(basic_npl_struct):
    def __init__(self, meter_index=0, bank_index=0):
        super().__init__(15)
        self.meter_index = meter_index
        self.bank_index = bank_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_block_meter_attribute_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meter_index(self):
        return npl_exact_meter_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @meter_index.setter
    def meter_index(self, value):
        self._set_field_value('field meter_index', 0, 11, npl_exact_meter_index_len_t, value)
    @property
    def bank_index(self):
        return npl_exact_bank_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 11)
    @bank_index.setter
    def bank_index(self, value):
        self._set_field_value('field bank_index', 11, 4, npl_exact_bank_index_len_t, value)

class npl_rx_meter_block_meter_attribute_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(7)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_block_meter_attribute_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_meter_block_meter_attribute_result(self):
        return npl_rx_meter_block_meter_attribute_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_meter_block_meter_attribute_result.setter
    def rx_meter_block_meter_attribute_result(self, value):
        self._set_field_value('field rx_meter_block_meter_attribute_result', 0, 7, npl_rx_meter_block_meter_attribute_result_t, value)

class npl_rx_meter_block_meter_attribute_table_value_t(basic_npl_struct):
    def __init__(self, rx_meter_block_meter_attribute_result=0):
        super().__init__(15)
        self.payloads.rx_meter_block_meter_attribute_result = rx_meter_block_meter_attribute_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_block_meter_attribute_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(7, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 7, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_meter_block_meter_attribute_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 7, npl_rx_meter_block_meter_attribute_table_payloads_t, value)



# API-s for table: rx_meter_block_meter_profile_table

NPL_RX_METER_BLOCK_METER_PROFILE_TABLE_ACTION_WRITE = 0x0

class npl_rx_meter_block_meter_profile_table_key_t(basic_npl_struct):
    def __init__(self, meter_profile_index=0, bank_index=0):
        super().__init__(8)
        self.meter_profile_index = meter_profile_index
        self.bank_index = bank_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_block_meter_profile_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meter_profile_index(self):
        return npl_meter_profile_len_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @meter_profile_index.setter
    def meter_profile_index(self, value):
        self._set_field_value('field meter_profile_index', 0, 4, npl_meter_profile_len_t, value)
    @property
    def bank_index(self):
        return npl_exact_bank_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @bank_index.setter
    def bank_index(self, value):
        self._set_field_value('field bank_index', 4, 4, npl_exact_bank_index_len_t, value)

class npl_rx_meter_block_meter_profile_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(39)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_block_meter_profile_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_meter_block_meter_profile_result(self):
        return npl_rx_meter_block_meter_profile_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_meter_block_meter_profile_result.setter
    def rx_meter_block_meter_profile_result(self, value):
        self._set_field_value('field rx_meter_block_meter_profile_result', 0, 39, npl_rx_meter_block_meter_profile_result_t, value)

class npl_rx_meter_block_meter_profile_table_value_t(basic_npl_struct):
    def __init__(self, rx_meter_block_meter_profile_result=0):
        super().__init__(47)
        self.payloads.rx_meter_block_meter_profile_result = rx_meter_block_meter_profile_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_block_meter_profile_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(39, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 39, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_meter_block_meter_profile_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 39, npl_rx_meter_block_meter_profile_table_payloads_t, value)



# API-s for table: rx_meter_block_meter_shaper_configuration_table

NPL_RX_METER_BLOCK_METER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE = 0x0

class npl_rx_meter_block_meter_shaper_configuration_table_key_t(basic_npl_struct):
    def __init__(self, meter_index=0, bank_index=0):
        super().__init__(15)
        self.meter_index = meter_index
        self.bank_index = bank_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_block_meter_shaper_configuration_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meter_index(self):
        return npl_exact_meter_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @meter_index.setter
    def meter_index(self, value):
        self._set_field_value('field meter_index', 0, 11, npl_exact_meter_index_len_t, value)
    @property
    def bank_index(self):
        return npl_exact_bank_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 11)
    @bank_index.setter
    def bank_index(self, value):
        self._set_field_value('field bank_index', 11, 4, npl_exact_bank_index_len_t, value)

class npl_rx_meter_block_meter_shaper_configuration_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_block_meter_shaper_configuration_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_meter_block_meter_shaper_configuration_result(self):
        return npl_rx_meter_block_meter_shaper_configuration_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_meter_block_meter_shaper_configuration_result.setter
    def rx_meter_block_meter_shaper_configuration_result(self, value):
        self._set_field_value('field rx_meter_block_meter_shaper_configuration_result', 0, 20, npl_rx_meter_block_meter_shaper_configuration_result_t, value)

class npl_rx_meter_block_meter_shaper_configuration_table_value_t(basic_npl_struct):
    def __init__(self, rx_meter_block_meter_shaper_configuration_result=0):
        super().__init__(28)
        self.payloads.rx_meter_block_meter_shaper_configuration_result = rx_meter_block_meter_shaper_configuration_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_block_meter_shaper_configuration_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_meter_block_meter_shaper_configuration_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_rx_meter_block_meter_shaper_configuration_table_payloads_t, value)



# API-s for table: rx_meter_distributed_meter_profile_table

NPL_RX_METER_DISTRIBUTED_METER_PROFILE_TABLE_ACTION_WRITE = 0x0

class npl_rx_meter_distributed_meter_profile_table_key_t(basic_npl_struct):
    def __init__(self, meter_profile_index=0, bank_index=0):
        super().__init__(6)
        self.meter_profile_index = meter_profile_index
        self.bank_index = bank_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_distributed_meter_profile_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meter_profile_index(self):
        return npl_meter_profile_len_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @meter_profile_index.setter
    def meter_profile_index(self, value):
        self._set_field_value('field meter_profile_index', 0, 4, npl_meter_profile_len_t, value)
    @property
    def bank_index(self):
        return npl_stat_bank_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @bank_index.setter
    def bank_index(self, value):
        self._set_field_value('field bank_index', 4, 2, npl_stat_bank_index_len_t, value)

class npl_rx_meter_distributed_meter_profile_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(77)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_distributed_meter_profile_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_meter_distributed_meter_profile_result(self):
        return npl_rx_meter_distributed_meter_profile_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_meter_distributed_meter_profile_result.setter
    def rx_meter_distributed_meter_profile_result(self, value):
        self._set_field_value('field rx_meter_distributed_meter_profile_result', 0, 77, npl_rx_meter_distributed_meter_profile_result_t, value)

class npl_rx_meter_distributed_meter_profile_table_value_t(basic_npl_struct):
    def __init__(self, rx_meter_distributed_meter_profile_result=0):
        super().__init__(85)
        self.payloads.rx_meter_distributed_meter_profile_result = rx_meter_distributed_meter_profile_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_distributed_meter_profile_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(77, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 77, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_meter_distributed_meter_profile_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 77, npl_rx_meter_distributed_meter_profile_table_payloads_t, value)



# API-s for table: rx_meter_exact_meter_decision_mapping_table

NPL_RX_METER_EXACT_METER_DECISION_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_rx_meter_exact_meter_decision_mapping_table_key_t(basic_npl_struct):
    def __init__(self, meter_result_color=0, rate_limiter_result_color=0, meter_action_profile_index=0, ifg=0):
        super().__init__(7)
        self.meter_result_color = meter_result_color
        self.rate_limiter_result_color = rate_limiter_result_color
        self.meter_action_profile_index = meter_action_profile_index
        self.ifg = ifg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_exact_meter_decision_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meter_result_color(self):
        return npl_color_len_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @meter_result_color.setter
    def meter_result_color(self, value):
        self._set_field_value('field meter_result_color', 0, 2, npl_color_len_t, value)
    @property
    def rate_limiter_result_color(self):
        return npl_color_len_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @rate_limiter_result_color.setter
    def rate_limiter_result_color(self, value):
        self._set_field_value('field rate_limiter_result_color', 2, 2, npl_color_len_t, value)
    @property
    def meter_action_profile_index(self):
        return npl_meter_action_profile_len_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @meter_action_profile_index.setter
    def meter_action_profile_index(self, value):
        self._set_field_value('field meter_action_profile_index', 4, 2, npl_meter_action_profile_len_t, value)
    @property
    def ifg(self):
        return npl_ifg_len_t._get_as_sub_field(self._data, self._offset_in_data + 6)
    @ifg.setter
    def ifg(self, value):
        self._set_field_value('field ifg', 6, 1, npl_ifg_len_t, value)

class npl_rx_meter_exact_meter_decision_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(7)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_exact_meter_decision_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_meter_exact_meter_decision_mapping_result(self):
        return npl_rx_meter_exact_meter_decision_mapping_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_meter_exact_meter_decision_mapping_result.setter
    def rx_meter_exact_meter_decision_mapping_result(self, value):
        self._set_field_value('field rx_meter_exact_meter_decision_mapping_result', 0, 7, npl_rx_meter_exact_meter_decision_mapping_result_t, value)

class npl_rx_meter_exact_meter_decision_mapping_table_value_t(basic_npl_struct):
    def __init__(self, rx_meter_exact_meter_decision_mapping_result=0):
        super().__init__(15)
        self.payloads.rx_meter_exact_meter_decision_mapping_result = rx_meter_exact_meter_decision_mapping_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_exact_meter_decision_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(7, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 7, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_meter_exact_meter_decision_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 7, npl_rx_meter_exact_meter_decision_mapping_table_payloads_t, value)



# API-s for table: rx_meter_meter_profile_table

NPL_RX_METER_METER_PROFILE_TABLE_ACTION_WRITE = 0x0

class npl_rx_meter_meter_profile_table_key_t(basic_npl_struct):
    def __init__(self, meter_profile_index=0, bank_index=0):
        super().__init__(6)
        self.meter_profile_index = meter_profile_index
        self.bank_index = bank_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_meter_profile_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meter_profile_index(self):
        return npl_meter_profile_len_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @meter_profile_index.setter
    def meter_profile_index(self, value):
        self._set_field_value('field meter_profile_index', 0, 4, npl_meter_profile_len_t, value)
    @property
    def bank_index(self):
        return npl_stat_bank_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @bank_index.setter
    def bank_index(self, value):
        self._set_field_value('field bank_index', 4, 2, npl_stat_bank_index_len_t, value)

class npl_rx_meter_meter_profile_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(39)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_meter_profile_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_meter_meter_profile_result(self):
        return npl_rx_meter_meter_profile_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_meter_meter_profile_result.setter
    def rx_meter_meter_profile_result(self, value):
        self._set_field_value('field rx_meter_meter_profile_result', 0, 39, npl_rx_meter_meter_profile_result_t, value)

class npl_rx_meter_meter_profile_table_value_t(basic_npl_struct):
    def __init__(self, rx_meter_meter_profile_result=0):
        super().__init__(47)
        self.payloads.rx_meter_meter_profile_result = rx_meter_meter_profile_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_meter_profile_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(39, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 39, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_meter_meter_profile_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 39, npl_rx_meter_meter_profile_table_payloads_t, value)



# API-s for table: rx_meter_meter_shaper_configuration_table

NPL_RX_METER_METER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE = 0x0

class npl_rx_meter_meter_shaper_configuration_table_key_t(basic_npl_struct):
    def __init__(self, meter_index=0, bank_index=0):
        super().__init__(13)
        self.meter_index = meter_index
        self.bank_index = bank_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_meter_shaper_configuration_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meter_index(self):
        return npl_stat_meter_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @meter_index.setter
    def meter_index(self, value):
        self._set_field_value('field meter_index', 0, 11, npl_stat_meter_index_len_t, value)
    @property
    def bank_index(self):
        return npl_stat_bank_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 11)
    @bank_index.setter
    def bank_index(self, value):
        self._set_field_value('field bank_index', 11, 2, npl_stat_bank_index_len_t, value)

class npl_rx_meter_meter_shaper_configuration_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_meter_shaper_configuration_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_meter_meter_shaper_configuration_result(self):
        return npl_rx_meter_meter_shaper_configuration_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_meter_meter_shaper_configuration_result.setter
    def rx_meter_meter_shaper_configuration_result(self, value):
        self._set_field_value('field rx_meter_meter_shaper_configuration_result', 0, 20, npl_rx_meter_meter_shaper_configuration_result_t, value)

class npl_rx_meter_meter_shaper_configuration_table_value_t(basic_npl_struct):
    def __init__(self, rx_meter_meter_shaper_configuration_result=0):
        super().__init__(28)
        self.payloads.rx_meter_meter_shaper_configuration_result = rx_meter_meter_shaper_configuration_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_meter_shaper_configuration_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_meter_meter_shaper_configuration_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_rx_meter_meter_shaper_configuration_table_payloads_t, value)



# API-s for table: rx_meter_meters_attribute_table

NPL_RX_METER_METERS_ATTRIBUTE_TABLE_ACTION_WRITE = 0x0

class npl_rx_meter_meters_attribute_table_key_t(basic_npl_struct):
    def __init__(self, meter_index=0, bank_index=0):
        super().__init__(13)
        self.meter_index = meter_index
        self.bank_index = bank_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_meters_attribute_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meter_index(self):
        return npl_stat_meter_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @meter_index.setter
    def meter_index(self, value):
        self._set_field_value('field meter_index', 0, 11, npl_stat_meter_index_len_t, value)
    @property
    def bank_index(self):
        return npl_stat_bank_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 11)
    @bank_index.setter
    def bank_index(self, value):
        self._set_field_value('field bank_index', 11, 2, npl_stat_bank_index_len_t, value)

class npl_rx_meter_meters_attribute_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(7)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_meters_attribute_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_meter_meters_attribute_result(self):
        return npl_rx_meter_meters_attribute_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_meter_meters_attribute_result.setter
    def rx_meter_meters_attribute_result(self, value):
        self._set_field_value('field rx_meter_meters_attribute_result', 0, 7, npl_rx_meter_meters_attribute_result_t, value)

class npl_rx_meter_meters_attribute_table_value_t(basic_npl_struct):
    def __init__(self, rx_meter_meters_attribute_result=0):
        super().__init__(15)
        self.payloads.rx_meter_meters_attribute_result = rx_meter_meters_attribute_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_meters_attribute_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(7, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 7, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_meter_meters_attribute_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 7, npl_rx_meter_meters_attribute_table_payloads_t, value)



# API-s for table: rx_meter_rate_limiter_shaper_configuration_table

NPL_RX_METER_RATE_LIMITER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE = 0x0

class npl_rx_meter_rate_limiter_shaper_configuration_table_key_t(basic_npl_struct):
    def __init__(self, table_entry_index=0, table_index=0):
        super().__init__(11)
        self.table_entry_index = table_entry_index
        self.table_index = table_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_rate_limiter_shaper_configuration_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def table_entry_index(self):
        return npl_rate_limiters_port_packet_type_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @table_entry_index.setter
    def table_entry_index(self, value):
        self._set_field_value('field table_entry_index', 0, 7, npl_rate_limiters_port_packet_type_index_len_t, value)
    @property
    def table_index(self):
        return npl_g_ifg_len_t._get_as_sub_field(self._data, self._offset_in_data + 7)
    @table_index.setter
    def table_index(self, value):
        self._set_field_value('field table_index', 7, 4, npl_g_ifg_len_t, value)

class npl_rx_meter_rate_limiter_shaper_configuration_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_rate_limiter_shaper_configuration_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_meter_rate_limiter_shaper_configuration_result(self):
        return npl_rx_meter_rate_limiter_shaper_configuration_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_meter_rate_limiter_shaper_configuration_result.setter
    def rx_meter_rate_limiter_shaper_configuration_result(self, value):
        self._set_field_value('field rx_meter_rate_limiter_shaper_configuration_result', 0, 10, npl_rx_meter_rate_limiter_shaper_configuration_result_t, value)

class npl_rx_meter_rate_limiter_shaper_configuration_table_value_t(basic_npl_struct):
    def __init__(self, rx_meter_rate_limiter_shaper_configuration_result=0):
        super().__init__(18)
        self.payloads.rx_meter_rate_limiter_shaper_configuration_result = rx_meter_rate_limiter_shaper_configuration_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_rate_limiter_shaper_configuration_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_meter_rate_limiter_shaper_configuration_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_rx_meter_rate_limiter_shaper_configuration_table_payloads_t, value)



# API-s for table: rx_meter_stat_meter_decision_mapping_table

NPL_RX_METER_STAT_METER_DECISION_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_rx_meter_stat_meter_decision_mapping_table_key_t(basic_npl_struct):
    def __init__(self, meter_result_color=0, exact_meter_to_stat_meter_color=0, meter_action_profile_index=0, meter_bank_index=0):
        super().__init__(8)
        self.meter_result_color = meter_result_color
        self.exact_meter_to_stat_meter_color = exact_meter_to_stat_meter_color
        self.meter_action_profile_index = meter_action_profile_index
        self.meter_bank_index = meter_bank_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_stat_meter_decision_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def meter_result_color(self):
        return npl_color_len_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @meter_result_color.setter
    def meter_result_color(self, value):
        self._set_field_value('field meter_result_color', 0, 2, npl_color_len_t, value)
    @property
    def exact_meter_to_stat_meter_color(self):
        return npl_color_len_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @exact_meter_to_stat_meter_color.setter
    def exact_meter_to_stat_meter_color(self, value):
        self._set_field_value('field exact_meter_to_stat_meter_color', 2, 2, npl_color_len_t, value)
    @property
    def meter_action_profile_index(self):
        return npl_meter_action_profile_len_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @meter_action_profile_index.setter
    def meter_action_profile_index(self, value):
        self._set_field_value('field meter_action_profile_index', 4, 2, npl_meter_action_profile_len_t, value)
    @property
    def meter_bank_index(self):
        return npl_stat_bank_index_len_t._get_as_sub_field(self._data, self._offset_in_data + 6)
    @meter_bank_index.setter
    def meter_bank_index(self, value):
        self._set_field_value('field meter_bank_index', 6, 2, npl_stat_bank_index_len_t, value)

class npl_rx_meter_stat_meter_decision_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(7)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_stat_meter_decision_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_meter_stat_meter_decision_mapping_result(self):
        return npl_rx_meter_stat_meter_decision_mapping_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_meter_stat_meter_decision_mapping_result.setter
    def rx_meter_stat_meter_decision_mapping_result(self, value):
        self._set_field_value('field rx_meter_stat_meter_decision_mapping_result', 0, 7, npl_rx_meter_stat_meter_decision_mapping_result_t, value)

class npl_rx_meter_stat_meter_decision_mapping_table_value_t(basic_npl_struct):
    def __init__(self, rx_meter_stat_meter_decision_mapping_result=0):
        super().__init__(15)
        self.payloads.rx_meter_stat_meter_decision_mapping_result = rx_meter_stat_meter_decision_mapping_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_meter_stat_meter_decision_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(7, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 7, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_meter_stat_meter_decision_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 7, npl_rx_meter_stat_meter_decision_mapping_table_payloads_t, value)



# API-s for table: rx_npu_to_tm_dest_table

NPL_RX_NPU_TO_TM_DEST_TABLE_ACTION_WRITE = 0x0

class npl_rx_npu_to_tm_dest_table_key_t(basic_npl_struct):
    def __init__(self, rxpp_pd_fwd_destination_19_14_=0):
        super().__init__(6)
        self.rxpp_pd_fwd_destination_19_14_ = rxpp_pd_fwd_destination_19_14_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_npu_to_tm_dest_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_fwd_destination_19_14_(self):
        return self._get_field_value(0, 6)
    @rxpp_pd_fwd_destination_19_14_.setter
    def rxpp_pd_fwd_destination_19_14_(self, value):
        self._set_field_value('field rxpp_pd_fwd_destination_19_14_', 0, 6, int, value)

class npl_rx_npu_to_tm_dest_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_npu_to_tm_dest_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_rx_tm_destination_prefix(self):
        return self._get_field_value(0, 6)
    @pd_rx_tm_destination_prefix.setter
    def pd_rx_tm_destination_prefix(self, value):
        self._set_field_value('field pd_rx_tm_destination_prefix', 0, 6, int, value)

class npl_rx_npu_to_tm_dest_table_value_t(basic_npl_struct):
    def __init__(self, pd_rx_tm_destination_prefix=0):
        super().__init__(14)
        self.payloads.pd_rx_tm_destination_prefix = pd_rx_tm_destination_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_npu_to_tm_dest_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_npu_to_tm_dest_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_rx_npu_to_tm_dest_table_payloads_t, value)



# API-s for table: rx_obm_code_table

NPL_RX_OBM_CODE_TABLE_ACTION_RX_OBM_ACTION = 0x0

class npl_rx_obm_code_table_rx_obm_action_payload_t(basic_npl_struct):
    def __init__(self, phb=0, destination=0, punt_encap_data_lsb=0):
        super().__init__(41)
        self.phb = phb
        self.destination = destination
        self.punt_encap_data_lsb = punt_encap_data_lsb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_code_table_rx_obm_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def phb(self):
        return npl_phb_t._get_as_sub_field(self._data, self._offset_in_data + 36)
    @phb.setter
    def phb(self, value):
        self._set_field_value('field phb', 36, 5, npl_phb_t, value)
    @property
    def destination(self):
        return npl_destination_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 16, 20, npl_destination_t, value)
    @property
    def punt_encap_data_lsb(self):
        return npl_punt_encap_data_lsb_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @punt_encap_data_lsb.setter
    def punt_encap_data_lsb(self, value):
        self._set_field_value('field punt_encap_data_lsb', 0, 16, npl_punt_encap_data_lsb_t, value)




class npl_rx_obm_code_table_key_t(basic_npl_struct):
    def __init__(self, tx_to_rx_rcy_data=0):
        super().__init__(8)
        self.tx_to_rx_rcy_data = tx_to_rx_rcy_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_code_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_to_rx_rcy_data(self):
        return npl_tx_to_rx_rcy_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_to_rx_rcy_data.setter
    def tx_to_rx_rcy_data(self, value):
        self._set_field_value('field tx_to_rx_rcy_data', 0, 8, npl_tx_to_rx_rcy_data_t, value)

class npl_rx_obm_code_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(41)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_code_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_obm_action(self):
        return npl_rx_obm_code_table_rx_obm_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_obm_action.setter
    def rx_obm_action(self, value):
        self._set_field_value('field rx_obm_action', 0, 41, npl_rx_obm_code_table_rx_obm_action_payload_t, value)

class npl_rx_obm_code_table_value_t(basic_npl_struct):
    def __init__(self, phb=0, destination=0, punt_encap_data_lsb=0):
        super().__init__(49)
        self.payloads.rx_obm_action = npl_rx_obm_code_table_rx_obm_action_payload_t(phb, destination, punt_encap_data_lsb)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_code_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(41, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 41, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_obm_code_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 41, npl_rx_obm_code_table_payloads_t, value)



# API-s for table: rx_obm_encap_msb_pack_table

NPL_RX_OBM_ENCAP_MSB_PACK_TABLE_ACTION_WRITE = 0x0

class npl_rx_obm_encap_msb_pack_table_key_option_obm_redirect_t(basic_npl_struct):
    def __init__(self, device_rxpp_tx_to_rx_rcy_data_5_0_=0):
        super().__init__(28)
        self.device_rxpp_tx_to_rx_rcy_data_5_0_ = device_rxpp_tx_to_rx_rcy_data_5_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_encap_msb_pack_table_key_option_obm_redirect_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_12d0_exact_0x0(self):
        return self._get_field_value(0, 12)
    @property
    def const2_PUNT_SRC_OUTBOUND_MIRROR_exact_0xa(self):
        return self._get_field_value(12, 4)
    @property
    def device_rxpp_tx_to_rx_rcy_data_5_0_(self):
        return self._get_field_value(16, 6)
    @device_rxpp_tx_to_rx_rcy_data_5_0_.setter
    def device_rxpp_tx_to_rx_rcy_data_5_0_(self, value):
        self._set_field_value('field device_rxpp_tx_to_rx_rcy_data_5_0_', 16, 6, int, value)
    @property
    def const3_2b0_exact_0x0(self):
        return self._get_field_value(22, 2)
    @property
    def const4_NPU_ENCAP_MIRROR_OR_REDIRECT_exact_0xe(self):
        return self._get_field_value(24, 4)



class npl_rx_obm_encap_msb_pack_table_key_option_obm_inject_down_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(28)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_encap_msb_pack_table_key_option_obm_inject_down_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_20d0_exact_0x0(self):
        return self._get_field_value(0, 20)
    @property
    def const2_5d0_exact_0x0(self):
        return self._get_field_value(20, 5)
    @property
    def const3_INJECT_DOWN_ENCAP_TYPE_TO_DMA_exact_0x7(self):
        return self._get_field_value(25, 3)




class rx_obm_encap_msb_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = rx_obm_encap_msb_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_OBM_REDIRECT(self):
        return npl_rx_obm_encap_msb_pack_table_key_option_obm_redirect_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_OBM_REDIRECT.setter
    def NPL_OBM_REDIRECT(self, value):
        self._set_field_value('field NPL_OBM_REDIRECT', 0, 28, npl_rx_obm_encap_msb_pack_table_key_option_obm_redirect_t, value)
    @property
    def NPL_OBM_INJECT_DOWN(self):
        return npl_rx_obm_encap_msb_pack_table_key_option_obm_inject_down_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_OBM_INJECT_DOWN.setter
    def NPL_OBM_INJECT_DOWN(self, value):
        self._set_field_value('field NPL_OBM_INJECT_DOWN', 0, 28, npl_rx_obm_encap_msb_pack_table_key_option_obm_inject_down_t, value)

class npl_rx_obm_encap_msb_pack_table_key_t(basic_npl_struct):
    def __init__(self, obm_encap_type_enum=0):
        super().__init__(28)
        self.obm_encap_type_enum = obm_encap_type_enum

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_encap_msb_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _obm_encap_type_enum = 0
    @property
    def obm_encap_type_enum(self):
        return self._obm_encap_type_enum
    @obm_encap_type_enum.setter
    def obm_encap_type_enum(self, value):
        self._obm_encap_type_enum = value
        if obm_encap_type_enum == NPL_OBM_REDIRECT:
            self._set_field_value('const field', 0, 12, int, 0x0)
        if obm_encap_type_enum == NPL_OBM_REDIRECT:
            self._set_field_value('const field', 12, 4, int, 0xa)
        if obm_encap_type_enum == NPL_OBM_REDIRECT:
            self._set_field_value('const field', 22, 2, int, 0x0)
        if obm_encap_type_enum == NPL_OBM_REDIRECT:
            self._set_field_value('const field', 24, 4, int, 0xe)
        if obm_encap_type_enum == NPL_OBM_INJECT_DOWN:
            self._set_field_value('const field', 0, 20, int, 0x0)
        if obm_encap_type_enum == NPL_OBM_INJECT_DOWN:
            self._set_field_value('const field', 20, 5, int, 0x0)
        if obm_encap_type_enum == NPL_OBM_INJECT_DOWN:
            self._set_field_value('const field', 25, 3, int, 0x7)

    @property
    def options(self):
        return rx_obm_encap_msb_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 28 - 0, rx_obm_encap_msb_pack_table_key_options_t, value)

class npl_rx_obm_encap_msb_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_encap_msb_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_local_redirect_data_redirect_encap_msb(self):
        return npl_ingress_punt_mc_expand_encap_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_local_redirect_data_redirect_encap_msb.setter
    def ingress_local_redirect_data_redirect_encap_msb(self, value):
        self._set_field_value('field ingress_local_redirect_data_redirect_encap_msb', 0, 28, npl_ingress_punt_mc_expand_encap_t, value)

class npl_rx_obm_encap_msb_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_local_redirect_data_redirect_encap_msb=0):
        super().__init__(36)
        self.payloads.ingress_local_redirect_data_redirect_encap_msb = ingress_local_redirect_data_redirect_encap_msb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_encap_msb_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(28, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 28, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_obm_encap_msb_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 28, npl_rx_obm_encap_msb_pack_table_payloads_t, value)



# API-s for table: rx_obm_punt_src_and_code_table

NPL_RX_OBM_PUNT_SRC_AND_CODE_TABLE_ACTION_WRITE = 0x0

class npl_rx_obm_punt_src_and_code_table_key_t(basic_npl_struct):
    def __init__(self, punt_src_and_code=0, is_dma=0):
        super().__init__(16)
        self.punt_src_and_code = punt_src_and_code
        self.is_dma = is_dma

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_punt_src_and_code_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def punt_src_and_code(self):
        return self._get_field_value(0, 12)
    @punt_src_and_code.setter
    def punt_src_and_code(self, value):
        self._set_field_value('field punt_src_and_code', 0, 12, int, value)
    @property
    def is_dma(self):
        return self._get_field_value(12, 4)
    @is_dma.setter
    def is_dma(self, value):
        self._set_field_value('field is_dma', 12, 4, int, value)

class npl_rx_obm_punt_src_and_code_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(65)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_punt_src_and_code_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_obm_punt_src_and_code_data(self):
        return npl_rx_obm_punt_src_and_code_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_obm_punt_src_and_code_data.setter
    def rx_obm_punt_src_and_code_data(self, value):
        self._set_field_value('field rx_obm_punt_src_and_code_data', 0, 65, npl_rx_obm_punt_src_and_code_data_t, value)

class npl_rx_obm_punt_src_and_code_table_value_t(basic_npl_struct):
    def __init__(self, rx_obm_punt_src_and_code_data=0):
        super().__init__(73)
        self.payloads.rx_obm_punt_src_and_code_data = rx_obm_punt_src_and_code_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_punt_src_and_code_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(65, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 65, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_obm_punt_src_and_code_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 65, npl_rx_obm_punt_src_and_code_table_payloads_t, value)



# API-s for table: rx_obm_punt_src_and_code_table_compound

NPL_RX_OBM_PUNT_SRC_AND_CODE_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_rx_obm_punt_src_and_code_table_compound_key_t(basic_npl_struct):
    def __init__(self, punt_src_and_code=0, is_dma=0):
        super().__init__(18)
        self._set_field_value('const field', 0, 2, int, 0x2)
        self.punt_src_and_code = punt_src_and_code
        self.is_dma = is_dma

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_punt_src_and_code_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_MAC_TERM_EM_LDB_OBM_PUNT_exact_0x2(self):
        return self._get_field_value(0, 2)
    @property
    def punt_src_and_code(self):
        return self._get_field_value(2, 12)
    @punt_src_and_code.setter
    def punt_src_and_code(self, value):
        self._set_field_value('field punt_src_and_code', 2, 12, int, value)
    @property
    def is_dma(self):
        return self._get_field_value(14, 4)
    @is_dma.setter
    def is_dma(self, value):
        self._set_field_value('field is_dma', 14, 4, int, value)

class npl_rx_obm_punt_src_and_code_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(65)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_punt_src_and_code_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_obm_punt_src_and_code_data(self):
        return npl_rx_obm_punt_src_and_code_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_obm_punt_src_and_code_data.setter
    def rx_obm_punt_src_and_code_data(self, value):
        self._set_field_value('field rx_obm_punt_src_and_code_data', 0, 65, npl_rx_obm_punt_src_and_code_data_t, value)

class npl_rx_obm_punt_src_and_code_table_compound_value_t(basic_npl_struct):
    def __init__(self, rx_obm_punt_src_and_code_data=0):
        super().__init__(73)
        self.payloads.rx_obm_punt_src_and_code_data = rx_obm_punt_src_and_code_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_obm_punt_src_and_code_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(65, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 65, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_obm_punt_src_and_code_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 65, npl_rx_obm_punt_src_and_code_table_compound_payloads_t, value)



# API-s for table: rx_redirect_code_ext_table

NPL_RX_REDIRECT_CODE_EXT_TABLE_ACTION_RX_REDIRECT_ACTION_EXT = 0x0

class npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t(basic_npl_struct):
    def __init__(self, meter_counter=0):
        super().__init__(20)
        self.meter_counter = meter_counter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def meter_counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @meter_counter.setter
    def meter_counter(self, value):
        self._set_field_value('field meter_counter', 0, 20, npl_counter_ptr_t, value)




class npl_rx_redirect_code_ext_table_key_t(basic_npl_struct):
    def __init__(self, redirect_code=0):
        super().__init__(8)
        self.redirect_code = redirect_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_code_ext_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def redirect_code(self):
        return self._get_field_value(0, 8)
    @redirect_code.setter
    def redirect_code(self, value):
        self._set_field_value('field redirect_code', 0, 8, int, value)

class npl_rx_redirect_code_ext_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_code_ext_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_redirect_action_ext(self):
        return npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_redirect_action_ext.setter
    def rx_redirect_action_ext(self, value):
        self._set_field_value('field rx_redirect_action_ext', 0, 20, npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t, value)

class npl_rx_redirect_code_ext_table_value_t(basic_npl_struct):
    def __init__(self, meter_counter=0):
        super().__init__(28)
        self.payloads.rx_redirect_action_ext = npl_rx_redirect_code_ext_table_rx_redirect_action_ext_payload_t(meter_counter)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_code_ext_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_redirect_code_ext_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_rx_redirect_code_ext_table_payloads_t, value)



# API-s for table: rx_redirect_code_table

NPL_RX_REDIRECT_CODE_TABLE_ACTION_RX_REDIRECT_ACTION = 0x0

class npl_rx_redirect_code_table_rx_redirect_action_payload_t(basic_npl_struct):
    def __init__(self, override_phb=0, per_pif_trap_mode=0, stamp_into_packet_header=0, punt_sub_code=0, disable_snoop=0, is_l3_trap=0, phb=0, destination=0, ts_cmd=0, cntr_stamp_cmd=0, punt_encap_data_lsb=0, redirect_counter=0):
        super().__init__(94)
        self.override_phb = override_phb
        self.per_pif_trap_mode = per_pif_trap_mode
        self.stamp_into_packet_header = stamp_into_packet_header
        self.punt_sub_code = punt_sub_code
        self.disable_snoop = disable_snoop
        self.is_l3_trap = is_l3_trap
        self.phb = phb
        self.destination = destination
        self.ts_cmd = ts_cmd
        self.cntr_stamp_cmd = cntr_stamp_cmd
        self.punt_encap_data_lsb = punt_encap_data_lsb
        self.redirect_counter = redirect_counter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_code_table_rx_redirect_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def override_phb(self):
        return self._get_field_value(93, 1)
    @override_phb.setter
    def override_phb(self, value):
        self._set_field_value('field override_phb', 93, 1, int, value)
    @property
    def per_pif_trap_mode(self):
        return self._get_field_value(92, 1)
    @per_pif_trap_mode.setter
    def per_pif_trap_mode(self, value):
        self._set_field_value('field per_pif_trap_mode', 92, 1, int, value)
    @property
    def stamp_into_packet_header(self):
        return self._get_field_value(91, 1)
    @stamp_into_packet_header.setter
    def stamp_into_packet_header(self, value):
        self._set_field_value('field stamp_into_packet_header', 91, 1, int, value)
    @property
    def punt_sub_code(self):
        return self._get_field_value(87, 4)
    @punt_sub_code.setter
    def punt_sub_code(self, value):
        self._set_field_value('field punt_sub_code', 87, 4, int, value)
    @property
    def disable_snoop(self):
        return self._get_field_value(86, 1)
    @disable_snoop.setter
    def disable_snoop(self, value):
        self._set_field_value('field disable_snoop', 86, 1, int, value)
    @property
    def is_l3_trap(self):
        return self._get_field_value(85, 1)
    @is_l3_trap.setter
    def is_l3_trap(self, value):
        self._set_field_value('field is_l3_trap', 85, 1, int, value)
    @property
    def phb(self):
        return npl_phb_t._get_as_sub_field(self._data, self._offset_in_data + 80)
    @phb.setter
    def phb(self, value):
        self._set_field_value('field phb', 80, 5, npl_phb_t, value)
    @property
    def destination(self):
        return self._get_field_value(60, 20)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 60, 20, int, value)
    @property
    def ts_cmd(self):
        return npl_ts_command_t._get_as_sub_field(self._data, self._offset_in_data + 48)
    @ts_cmd.setter
    def ts_cmd(self, value):
        self._set_field_value('field ts_cmd', 48, 12, npl_ts_command_t, value)
    @property
    def cntr_stamp_cmd(self):
        return npl_lm_command_t._get_as_sub_field(self._data, self._offset_in_data + 36)
    @cntr_stamp_cmd.setter
    def cntr_stamp_cmd(self, value):
        self._set_field_value('field cntr_stamp_cmd', 36, 12, npl_lm_command_t, value)
    @property
    def punt_encap_data_lsb(self):
        return npl_punt_encap_data_lsb_t._get_as_sub_field(self._data, self._offset_in_data + 20)
    @punt_encap_data_lsb.setter
    def punt_encap_data_lsb(self, value):
        self._set_field_value('field punt_encap_data_lsb', 20, 16, npl_punt_encap_data_lsb_t, value)
    @property
    def redirect_counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @redirect_counter.setter
    def redirect_counter(self, value):
        self._set_field_value('field redirect_counter', 0, 20, npl_counter_ptr_t, value)




class npl_rx_redirect_code_table_key_t(basic_npl_struct):
    def __init__(self, redirect_code=0):
        super().__init__(8)
        self.redirect_code = redirect_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_code_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def redirect_code(self):
        return self._get_field_value(0, 8)
    @redirect_code.setter
    def redirect_code(self, value):
        self._set_field_value('field redirect_code', 0, 8, int, value)

class npl_rx_redirect_code_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(94)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_code_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_redirect_action(self):
        return npl_rx_redirect_code_table_rx_redirect_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_redirect_action.setter
    def rx_redirect_action(self, value):
        self._set_field_value('field rx_redirect_action', 0, 94, npl_rx_redirect_code_table_rx_redirect_action_payload_t, value)

class npl_rx_redirect_code_table_value_t(basic_npl_struct):
    def __init__(self, override_phb=0, per_pif_trap_mode=0, stamp_into_packet_header=0, punt_sub_code=0, disable_snoop=0, is_l3_trap=0, phb=0, destination=0, ts_cmd=0, cntr_stamp_cmd=0, punt_encap_data_lsb=0, redirect_counter=0):
        super().__init__(102)
        self.payloads.rx_redirect_action = npl_rx_redirect_code_table_rx_redirect_action_payload_t(override_phb, per_pif_trap_mode, stamp_into_packet_header, punt_sub_code, disable_snoop, is_l3_trap, phb, destination, ts_cmd, cntr_stamp_cmd, punt_encap_data_lsb, redirect_counter)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_code_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(94, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 94, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_redirect_code_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 94, npl_rx_redirect_code_table_payloads_t, value)



# API-s for table: rx_redirect_encap_msb_pack_table

NPL_RX_REDIRECT_ENCAP_MSB_PACK_TABLE_ACTION_WRITE = 0x0

class npl_rx_redirect_encap_msb_pack_table_key_t(basic_npl_struct):
    def __init__(self, local_fwd_offset_val=0, ingress_local_redirect_data_punt_sub_code=0, ingress_local_redirect_data_punt_src=0, ingress_local_redirect_data_punt_code=0):
        super().__init__(28)
        self._set_field_value('const field', 24, 4, int, 0xe)
        self.local_fwd_offset_val = local_fwd_offset_val
        self.ingress_local_redirect_data_punt_sub_code = ingress_local_redirect_data_punt_sub_code
        self.ingress_local_redirect_data_punt_src = ingress_local_redirect_data_punt_src
        self.ingress_local_redirect_data_punt_code = ingress_local_redirect_data_punt_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_encap_msb_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_fwd_offset_val(self):
        return self._get_field_value(0, 8)
    @local_fwd_offset_val.setter
    def local_fwd_offset_val(self, value):
        self._set_field_value('field local_fwd_offset_val', 0, 8, int, value)
    @property
    def ingress_local_redirect_data_punt_sub_code(self):
        return self._get_field_value(8, 4)
    @ingress_local_redirect_data_punt_sub_code.setter
    def ingress_local_redirect_data_punt_sub_code(self, value):
        self._set_field_value('field ingress_local_redirect_data_punt_sub_code', 8, 4, int, value)
    @property
    def ingress_local_redirect_data_punt_src(self):
        return self._get_field_value(12, 4)
    @ingress_local_redirect_data_punt_src.setter
    def ingress_local_redirect_data_punt_src(self, value):
        self._set_field_value('field ingress_local_redirect_data_punt_src', 12, 4, int, value)
    @property
    def ingress_local_redirect_data_punt_code(self):
        return self._get_field_value(16, 8)
    @ingress_local_redirect_data_punt_code.setter
    def ingress_local_redirect_data_punt_code(self, value):
        self._set_field_value('field ingress_local_redirect_data_punt_code', 16, 8, int, value)
    @property
    def const1_NPU_ENCAP_MIRROR_OR_REDIRECT_exact_0xe(self):
        return self._get_field_value(24, 4)

class npl_rx_redirect_encap_msb_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_encap_msb_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ingress_local_redirect_data_redirect_encap_msb(self):
        return npl_ingress_punt_mc_expand_encap_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_local_redirect_data_redirect_encap_msb.setter
    def ingress_local_redirect_data_redirect_encap_msb(self, value):
        self._set_field_value('field ingress_local_redirect_data_redirect_encap_msb', 0, 28, npl_ingress_punt_mc_expand_encap_t, value)

class npl_rx_redirect_encap_msb_pack_table_value_t(basic_npl_struct):
    def __init__(self, ingress_local_redirect_data_redirect_encap_msb=0):
        super().__init__(36)
        self.payloads.ingress_local_redirect_data_redirect_encap_msb = ingress_local_redirect_data_redirect_encap_msb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_encap_msb_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(28, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 28, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_redirect_encap_msb_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 28, npl_rx_redirect_encap_msb_pack_table_payloads_t, value)



# API-s for table: rx_redirect_macro_cntr0_pack_table

NPL_RX_REDIRECT_MACRO_CNTR0_PACK_TABLE_ACTION_WRITE = 0x0

class npl_rx_redirect_macro_cntr0_pack_table_key_option_per_pif_trap_mode_disabled_t(basic_npl_struct):
    def __init__(self, ingress_local_redirect_data_redirect_counter=0):
        super().__init__(20)
        self.ingress_local_redirect_data_redirect_counter = ingress_local_redirect_data_redirect_counter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_macro_cntr0_pack_table_key_option_per_pif_trap_mode_disabled_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ingress_local_redirect_data_redirect_counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ingress_local_redirect_data_redirect_counter.setter
    def ingress_local_redirect_data_redirect_counter(self, value):
        self._set_field_value('field ingress_local_redirect_data_redirect_counter', 0, 20, npl_counter_ptr_t, value)



class npl_rx_redirect_macro_cntr0_pack_table_key_option_per_pif_trap_mode_enabled_t(basic_npl_struct):
    def __init__(self, ingress_local_redirect_data_cntr0_base_ptr=0, ingress_local_redirect_data_redirect_counter_19_13_=0):
        super().__init__(20)
        self.ingress_local_redirect_data_cntr0_base_ptr = ingress_local_redirect_data_cntr0_base_ptr
        self.ingress_local_redirect_data_redirect_counter_19_13_ = ingress_local_redirect_data_redirect_counter_19_13_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_macro_cntr0_pack_table_key_option_per_pif_trap_mode_enabled_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ingress_local_redirect_data_cntr0_base_ptr(self):
        return self._get_field_value(0, 13)
    @ingress_local_redirect_data_cntr0_base_ptr.setter
    def ingress_local_redirect_data_cntr0_base_ptr(self, value):
        self._set_field_value('field ingress_local_redirect_data_cntr0_base_ptr', 0, 13, int, value)
    @property
    def ingress_local_redirect_data_redirect_counter_19_13_(self):
        return self._get_field_value(13, 7)
    @ingress_local_redirect_data_redirect_counter_19_13_.setter
    def ingress_local_redirect_data_redirect_counter_19_13_(self, value):
        self._set_field_value('field ingress_local_redirect_data_redirect_counter_19_13_', 13, 7, int, value)




class rx_redirect_macro_cntr0_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = rx_redirect_macro_cntr0_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_PER_PIF_TRAP_MODE_DISABLED(self):
        return npl_rx_redirect_macro_cntr0_pack_table_key_option_per_pif_trap_mode_disabled_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PER_PIF_TRAP_MODE_DISABLED.setter
    def NPL_PER_PIF_TRAP_MODE_DISABLED(self, value):
        self._set_field_value('field NPL_PER_PIF_TRAP_MODE_DISABLED', 0, 20, npl_rx_redirect_macro_cntr0_pack_table_key_option_per_pif_trap_mode_disabled_t, value)
    @property
    def NPL_PER_PIF_TRAP_MODE_ENABLED(self):
        return npl_rx_redirect_macro_cntr0_pack_table_key_option_per_pif_trap_mode_enabled_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PER_PIF_TRAP_MODE_ENABLED.setter
    def NPL_PER_PIF_TRAP_MODE_ENABLED(self, value):
        self._set_field_value('field NPL_PER_PIF_TRAP_MODE_ENABLED', 0, 20, npl_rx_redirect_macro_cntr0_pack_table_key_option_per_pif_trap_mode_enabled_t, value)

class npl_rx_redirect_macro_cntr0_pack_table_key_t(basic_npl_struct):
    def __init__(self, ingress_local_redirect_data_per_pif_trap_mode=0):
        super().__init__(20)
        self.ingress_local_redirect_data_per_pif_trap_mode = ingress_local_redirect_data_per_pif_trap_mode

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_macro_cntr0_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _ingress_local_redirect_data_per_pif_trap_mode = 0
    @property
    def ingress_local_redirect_data_per_pif_trap_mode(self):
        return self._ingress_local_redirect_data_per_pif_trap_mode
    @ingress_local_redirect_data_per_pif_trap_mode.setter
    def ingress_local_redirect_data_per_pif_trap_mode(self, value):
        self._ingress_local_redirect_data_per_pif_trap_mode = value

    @property
    def options(self):
        return rx_redirect_macro_cntr0_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 20 - 0, rx_redirect_macro_cntr0_pack_table_key_options_t, value)

class npl_rx_redirect_macro_cntr0_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_macro_cntr0_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def macro_counters_update_counter_0_ptr(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @macro_counters_update_counter_0_ptr.setter
    def macro_counters_update_counter_0_ptr(self, value):
        self._set_field_value('field macro_counters_update_counter_0_ptr', 0, 20, npl_counter_ptr_t, value)

class npl_rx_redirect_macro_cntr0_pack_table_value_t(basic_npl_struct):
    def __init__(self, macro_counters_update_counter_0_ptr=0):
        super().__init__(28)
        self.payloads.macro_counters_update_counter_0_ptr = macro_counters_update_counter_0_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_macro_cntr0_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_redirect_macro_cntr0_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_rx_redirect_macro_cntr0_pack_table_payloads_t, value)



# API-s for table: rx_redirect_next_macro_static_table

NPL_RX_REDIRECT_NEXT_MACRO_STATIC_TABLE_ACTION_UPDATE_NEXT_MACRO = 0x0

class npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t(basic_npl_struct):
    def __init__(self, is_last_rx_macro=0, pl_inc=0, macro_id=0):
        super().__init__(11)
        self.is_last_rx_macro = is_last_rx_macro
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def is_last_rx_macro(self):
        return self._get_field_value(10, 1)
    @is_last_rx_macro.setter
    def is_last_rx_macro(self, value):
        self._set_field_value('field is_last_rx_macro', 10, 1, int, value)
    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_rx_redirect_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, next_protocol_type=0, protocol_type=0, redirect_code=0, cud_type=0):
        super().__init__(22)
        self.next_protocol_type = next_protocol_type
        self.protocol_type = protocol_type
        self.redirect_code = redirect_code
        self.cud_type = cud_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def next_protocol_type(self):
        return self._get_field_value(0, 5)
    @next_protocol_type.setter
    def next_protocol_type(self, value):
        self._set_field_value('field next_protocol_type', 0, 5, int, value)
    @property
    def protocol_type(self):
        return self._get_field_value(5, 5)
    @protocol_type.setter
    def protocol_type(self, value):
        self._set_field_value('field protocol_type', 5, 5, int, value)
    @property
    def redirect_code(self):
        return self._get_field_value(10, 8)
    @redirect_code.setter
    def redirect_code(self, value):
        self._set_field_value('field redirect_code', 10, 8, int, value)
    @property
    def cud_type(self):
        return self._get_field_value(18, 4)
    @cud_type.setter
    def cud_type(self, value):
        self._set_field_value('field cud_type', 18, 4, int, value)

class npl_rx_redirect_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(11)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_next_macro(self):
        return npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_next_macro.setter
    def update_next_macro(self, value):
        self._set_field_value('field update_next_macro', 0, 11, npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t, value)

class npl_rx_redirect_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, is_last_rx_macro=0, pl_inc=0, macro_id=0):
        super().__init__(19)
        self.payloads.update_next_macro = npl_rx_redirect_next_macro_static_table_update_next_macro_payload_t(is_last_rx_macro, pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_redirect_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(11, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 11, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_redirect_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 11, npl_rx_redirect_next_macro_static_table_payloads_t, value)



# API-s for table: rx_term_error_handling_counter_table

NPL_RX_TERM_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT = 0x0

class npl_rx_term_error_handling_counter_table_update_result_payload_t(basic_npl_struct):
    def __init__(self, counter=0):
        super().__init__(20)
        self.counter = counter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_term_error_handling_counter_table_update_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter.setter
    def counter(self, value):
        self._set_field_value('field counter', 0, 20, npl_counter_ptr_t, value)




class npl_rx_term_error_handling_counter_table_key_t(basic_npl_struct):
    def __init__(self, pd_source_if_pif=0, ser=0):
        super().__init__(6)
        self.pd_source_if_pif = pd_source_if_pif
        self.ser = ser

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_term_error_handling_counter_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_source_if_pif(self):
        return self._get_field_value(0, 5)
    @pd_source_if_pif.setter
    def pd_source_if_pif(self, value):
        self._set_field_value('field pd_source_if_pif', 0, 5, int, value)
    @property
    def ser(self):
        return self._get_field_value(5, 1)
    @ser.setter
    def ser(self, value):
        self._set_field_value('field ser', 5, 1, int, value)

class npl_rx_term_error_handling_counter_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_term_error_handling_counter_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_result(self):
        return npl_rx_term_error_handling_counter_table_update_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_result.setter
    def update_result(self, value):
        self._set_field_value('field update_result', 0, 20, npl_rx_term_error_handling_counter_table_update_result_payload_t, value)

class npl_rx_term_error_handling_counter_table_value_t(basic_npl_struct):
    def __init__(self, counter=0):
        super().__init__(28)
        self.payloads.update_result = npl_rx_term_error_handling_counter_table_update_result_payload_t(counter)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_term_error_handling_counter_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_term_error_handling_counter_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_rx_term_error_handling_counter_table_payloads_t, value)



# API-s for table: rx_term_error_handling_destination_table

NPL_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT = 0x0

class npl_rx_term_error_handling_destination_table_update_result_payload_t(basic_npl_struct):
    def __init__(self, destination=0):
        super().__init__(20)
        self.destination = destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_term_error_handling_destination_table_update_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def destination(self):
        return self._get_field_value(0, 20)
    @destination.setter
    def destination(self, value):
        self._set_field_value('field destination', 0, 20, int, value)




class npl_rx_term_error_handling_destination_table_key_t(basic_npl_struct):
    def __init__(self, ser=0):
        super().__init__(1)
        self.ser = ser

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_term_error_handling_destination_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ser(self):
        return self._get_field_value(0, 1)
    @ser.setter
    def ser(self, value):
        self._set_field_value('field ser', 0, 1, int, value)

class npl_rx_term_error_handling_destination_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_term_error_handling_destination_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_result(self):
        return npl_rx_term_error_handling_destination_table_update_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_result.setter
    def update_result(self, value):
        self._set_field_value('field update_result', 0, 20, npl_rx_term_error_handling_destination_table_update_result_payload_t, value)

class npl_rx_term_error_handling_destination_table_value_t(basic_npl_struct):
    def __init__(self, destination=0):
        super().__init__(28)
        self.payloads.update_result = npl_rx_term_error_handling_destination_table_update_result_payload_t(destination)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_rx_term_error_handling_destination_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_rx_term_error_handling_destination_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_rx_term_error_handling_destination_table_payloads_t, value)



# API-s for table: rxpdr_dsp_lookup_table

NPL_RXPDR_DSP_LOOKUP_TABLE_ACTION_WRITE = 0x0

class npl_rxpdr_dsp_lookup_table_key_t(basic_npl_struct):
    def __init__(self, fwd_destination_lsb=0):
        super().__init__(13)
        self.fwd_destination_lsb = fwd_destination_lsb

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rxpdr_dsp_lookup_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fwd_destination_lsb(self):
        return self._get_field_value(0, 13)
    @fwd_destination_lsb.setter
    def fwd_destination_lsb(self, value):
        self._set_field_value('field fwd_destination_lsb', 0, 13, int, value)

class npl_rxpdr_dsp_lookup_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(28)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rxpdr_dsp_lookup_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpdr_dsp_lookup_table_result(self):
        return npl_rxpdr_dsp_lookup_table_entry_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rxpdr_dsp_lookup_table_result.setter
    def rxpdr_dsp_lookup_table_result(self, value):
        self._set_field_value('field rxpdr_dsp_lookup_table_result', 0, 28, npl_rxpdr_dsp_lookup_table_entry_t, value)

class npl_rxpdr_dsp_lookup_table_value_t(basic_npl_struct):
    def __init__(self, rxpdr_dsp_lookup_table_result=0):
        super().__init__(36)
        self.payloads.rxpdr_dsp_lookup_table_result = rxpdr_dsp_lookup_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rxpdr_dsp_lookup_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(28, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 28, 8, int, value)
    @property
    def payloads(self):
        return npl_rxpdr_dsp_lookup_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 28, npl_rxpdr_dsp_lookup_table_payloads_t, value)



# API-s for table: rxpdr_dsp_tc_map

NPL_RXPDR_DSP_TC_MAP_ACTION_WRITE = 0x0

class npl_rxpdr_dsp_tc_map_key_t(basic_npl_struct):
    def __init__(self, rxpp_pd_tc=0, rxpdr_dsp_lookup_table_result_tc_map_profile=0):
        super().__init__(6)
        self.rxpp_pd_tc = rxpp_pd_tc
        self.rxpdr_dsp_lookup_table_result_tc_map_profile = rxpdr_dsp_lookup_table_result_tc_map_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rxpdr_dsp_tc_map_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_tc(self):
        return self._get_field_value(0, 3)
    @rxpp_pd_tc.setter
    def rxpp_pd_tc(self, value):
        self._set_field_value('field rxpp_pd_tc', 0, 3, int, value)
    @property
    def rxpdr_dsp_lookup_table_result_tc_map_profile(self):
        return self._get_field_value(3, 3)
    @rxpdr_dsp_lookup_table_result_tc_map_profile.setter
    def rxpdr_dsp_lookup_table_result_tc_map_profile(self, value):
        self._set_field_value('field rxpdr_dsp_lookup_table_result_tc_map_profile', 3, 3, int, value)

class npl_rxpdr_dsp_tc_map_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rxpdr_dsp_tc_map_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpdr_dsp_tc_map_result(self):
        return npl_rxpdr_dsp_tc_map_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rxpdr_dsp_tc_map_result.setter
    def rxpdr_dsp_tc_map_result(self, value):
        self._set_field_value('field rxpdr_dsp_tc_map_result', 0, 4, npl_rxpdr_dsp_tc_map_result_t, value)

class npl_rxpdr_dsp_tc_map_value_t(basic_npl_struct):
    def __init__(self, rxpdr_dsp_tc_map_result=0):
        super().__init__(12)
        self.payloads.rxpdr_dsp_tc_map_result = rxpdr_dsp_tc_map_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_rxpdr_dsp_tc_map_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_rxpdr_dsp_tc_map_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_rxpdr_dsp_tc_map_payloads_t, value)



# API-s for table: sch_oqse_cfg

NPL_SCH_OQSE_CFG_ACTION_WRITE = 0x0

class npl_sch_oqse_cfg_key_t(basic_npl_struct):
    def __init__(self, oqse_pair_index=0, ifg=0):
        super().__init__(9)
        self.oqse_pair_index = oqse_pair_index
        self.ifg = ifg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_sch_oqse_cfg_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def oqse_pair_index(self):
        return npl_oqse_pair_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @oqse_pair_index.setter
    def oqse_pair_index(self, value):
        self._set_field_value('field oqse_pair_index', 0, 8, npl_oqse_pair_t, value)
    @property
    def ifg(self):
        return npl_ifg_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @ifg.setter
    def ifg(self, value):
        self._set_field_value('field ifg', 8, 1, npl_ifg_t, value)

class npl_sch_oqse_cfg_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(72)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_sch_oqse_cfg_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sch_oqse_cfg_result(self):
        return npl_sch_oqse_cfg_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sch_oqse_cfg_result.setter
    def sch_oqse_cfg_result(self, value):
        self._set_field_value('field sch_oqse_cfg_result', 0, 72, npl_sch_oqse_cfg_result_t, value)

class npl_sch_oqse_cfg_value_t(basic_npl_struct):
    def __init__(self, sch_oqse_cfg_result=0):
        super().__init__(80)
        self.payloads.sch_oqse_cfg_result = sch_oqse_cfg_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_sch_oqse_cfg_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(72, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 72, 8, int, value)
    @property
    def payloads(self):
        return npl_sch_oqse_cfg_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 72, npl_sch_oqse_cfg_payloads_t, value)



# API-s for table: second_ene_static_table

NPL_SECOND_ENE_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_second_ene_static_table_key_t(basic_npl_struct):
    def __init__(self, second_ene_macro_code=0):
        super().__init__(2)
        self.second_ene_macro_code = second_ene_macro_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_second_ene_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def second_ene_macro_code(self):
        return self._get_field_value(0, 2)
    @second_ene_macro_code.setter
    def second_ene_macro_code(self, value):
        self._set_field_value('field second_ene_macro_code', 0, 2, int, value)

class npl_second_ene_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_second_ene_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def second_ene_macro(self):
        return npl_ene_macro_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @second_ene_macro.setter
    def second_ene_macro(self, value):
        self._set_field_value('field second_ene_macro', 0, 8, npl_ene_macro_id_t, value)

class npl_second_ene_static_table_value_t(basic_npl_struct):
    def __init__(self, second_ene_macro=0):
        super().__init__(16)
        self.payloads.second_ene_macro = second_ene_macro

    def _get_as_sub_field(data, offset_in_data):
        result = npl_second_ene_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_second_ene_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_second_ene_static_table_payloads_t, value)



# API-s for table: select_inject_next_macro_static_table

NPL_SELECT_INJECT_NEXT_MACRO_STATIC_TABLE_ACTION_RX_INJECT_UP_NEXT_MACRO = 0x0

class npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(10)
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_select_inject_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, protocol=0, local_inject_type_7_0_=0):
        super().__init__(13)
        self.protocol = protocol
        self.local_inject_type_7_0_ = local_inject_type_7_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_select_inject_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def protocol(self):
        return self._get_field_value(0, 5)
    @protocol.setter
    def protocol(self, value):
        self._set_field_value('field protocol', 0, 5, int, value)
    @property
    def local_inject_type_7_0_(self):
        return npl_inject_header_type_t._get_as_sub_field(self._data, self._offset_in_data + 5)
    @local_inject_type_7_0_.setter
    def local_inject_type_7_0_(self, value):
        self._set_field_value('field local_inject_type_7_0_', 5, 8, npl_inject_header_type_t, value)

class npl_select_inject_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_select_inject_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rx_inject_up_next_macro(self):
        return npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rx_inject_up_next_macro.setter
    def rx_inject_up_next_macro(self, value):
        self._set_field_value('field rx_inject_up_next_macro', 0, 10, npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t, value)

class npl_select_inject_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, pl_inc=0, macro_id=0):
        super().__init__(18)
        self.payloads.rx_inject_up_next_macro = npl_select_inject_next_macro_static_table_rx_inject_up_next_macro_payload_t(pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_select_inject_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_select_inject_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_select_inject_next_macro_static_table_payloads_t, value)



# API-s for table: service_lp_attributes_table

NPL_SERVICE_LP_ATTRIBUTES_TABLE_ACTION_WRITE = 0x0

class npl_service_lp_attributes_table_write_payload_t(basic_npl_struct):
    def __init__(self, mac_lp_attributes_payload=0):
        super().__init__(144)
        self.mac_lp_attributes_payload = mac_lp_attributes_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_lp_attributes_table_write_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def mac_lp_attributes_payload(self):
        return npl_mac_lp_attributes_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_lp_attributes_payload.setter
    def mac_lp_attributes_payload(self, value):
        self._set_field_value('field mac_lp_attributes_payload', 0, 144, npl_mac_lp_attributes_table_payload_t, value)




class npl_service_lp_attributes_table_key_t(basic_npl_struct):
    def __init__(self, service_lp_attributes_table_key=0):
        super().__init__(16)
        self.service_lp_attributes_table_key = service_lp_attributes_table_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_lp_attributes_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def service_lp_attributes_table_key(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @service_lp_attributes_table_key.setter
    def service_lp_attributes_table_key(self, value):
        self._set_field_value('field service_lp_attributes_table_key', 0, 16, npl_lp_id_t, value)

class npl_service_lp_attributes_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(144)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_lp_attributes_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def write(self):
        return npl_service_lp_attributes_table_write_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @write.setter
    def write(self, value):
        self._set_field_value('field write', 0, 144, npl_service_lp_attributes_table_write_payload_t, value)

class npl_service_lp_attributes_table_value_t(basic_npl_struct):
    def __init__(self, mac_lp_attributes_payload=0):
        super().__init__(152)
        self.payloads.write = npl_service_lp_attributes_table_write_payload_t(mac_lp_attributes_payload)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_lp_attributes_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(144, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 144, 8, int, value)
    @property
    def payloads(self):
        return npl_service_lp_attributes_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 144, npl_service_lp_attributes_table_payloads_t, value)



# API-s for table: service_lp_table_compound

NPL_SERVICE_LP_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_service_lp_table_compound_key_t(basic_npl_struct):
    def __init__(self, service_lp_attributes_table_key=0):
        super().__init__(16)
        self.service_lp_attributes_table_key = service_lp_attributes_table_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_lp_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def service_lp_attributes_table_key(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @service_lp_attributes_table_key.setter
    def service_lp_attributes_table_key(self, value):
        self._set_field_value('field service_lp_attributes_table_key', 0, 16, npl_lp_id_t, value)

class npl_service_lp_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(160)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_lp_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_lp_attributes(self):
        return npl_mac_lp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_lp_attributes.setter
    def mac_lp_attributes(self, value):
        self._set_field_value('field mac_lp_attributes', 0, 160, npl_mac_lp_attributes_t, value)

class npl_service_lp_table_compound_value_t(basic_npl_struct):
    def __init__(self, mac_lp_attributes=0):
        super().__init__(168)
        self.payloads.mac_lp_attributes = mac_lp_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_lp_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(160, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 160, 8, int, value)
    @property
    def payloads(self):
        return npl_service_lp_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 160, npl_service_lp_table_compound_payloads_t, value)



# API-s for table: service_mapping_compound_table

NPL_SERVICE_MAPPING_COMPOUND_TABLE_ACTION_EM_SERVICE_MAPPING = 0x0

class npl_service_mapping_compound_table_em_service_mapping_payload_t(basic_npl_struct):
    def __init__(self, relay_and_l3_lp_attr=0, lp=0, termination=0):
        super().__init__(337)
        self.relay_and_l3_lp_attr = relay_and_l3_lp_attr
        self.lp = lp
        self.termination = termination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_compound_table_em_service_mapping_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def relay_and_l3_lp_attr(self):
        return npl_l2_relay_and_l3_lp_attributes_payload_t._get_as_sub_field(self._data, self._offset_in_data + 280)
    @relay_and_l3_lp_attr.setter
    def relay_and_l3_lp_attr(self, value):
        self._set_field_value('field relay_and_l3_lp_attr', 280, 57, npl_l2_relay_and_l3_lp_attributes_payload_t, value)
    @property
    def lp(self):
        return npl_mac_lp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 120)
    @lp.setter
    def lp(self, value):
        self._set_field_value('field lp', 120, 160, npl_mac_lp_attributes_t, value)
    @property
    def termination(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination.setter
    def termination(self, value):
        self._set_field_value('field termination', 0, 120, npl_base_l3_lp_attr_union_t, value)




class npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_compound_termination_control=0, mac_af_local_vars_service_mapping_logical_db=0, pd_layer_vars_local_slp_id=0, mac_af_local_vars_mac_termination_logical_db=0, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_32_0_=0):
        super().__init__(96)
        self.mac_relay_local_vars_mac_da_compound_termination_control = mac_relay_local_vars_mac_da_compound_termination_control
        self.mac_af_local_vars_service_mapping_logical_db = mac_af_local_vars_service_mapping_logical_db
        self.pd_layer_vars_local_slp_id = pd_layer_vars_local_slp_id
        self.mac_af_local_vars_mac_termination_logical_db = mac_af_local_vars_mac_termination_logical_db
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_32_0_ = packet_ethernet_header_da_32_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_4b1100_exact_0xc(self):
        return self._get_field_value(0, 4)
    @property
    def mac_relay_local_vars_mac_da_compound_termination_control(self):
        return npl_compound_termination_control_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @mac_relay_local_vars_mac_da_compound_termination_control.setter
    def mac_relay_local_vars_mac_da_compound_termination_control(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_compound_termination_control', 4, 2, npl_compound_termination_control_t, value)
    @property
    def mac_af_local_vars_service_mapping_logical_db(self):
        return self._get_field_value(6, 4)
    @mac_af_local_vars_service_mapping_logical_db.setter
    def mac_af_local_vars_service_mapping_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_service_mapping_logical_db', 6, 4, int, value)
    @property
    def pd_layer_vars_local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 10)
    @pd_layer_vars_local_slp_id.setter
    def pd_layer_vars_local_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id', 10, 16, npl_lp_id_t, value)
    @property
    def const2_30d0_exact_0x0(self):
        return self._get_field_value(26, 30)
    @property
    def mac_af_local_vars_mac_termination_logical_db(self):
        return self._get_field_value(56, 2)
    @mac_af_local_vars_mac_termination_logical_db.setter
    def mac_af_local_vars_mac_termination_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_mac_termination_logical_db', 56, 2, int, value)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(58, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 58, 5, int, value)
    @property
    def packet_ethernet_header_da_32_0_(self):
        return self._get_field_value(63, 33)
    @packet_ethernet_header_da_32_0_.setter
    def packet_ethernet_header_da_32_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_32_0_', 63, 33, int, value)



class npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_compound_termination_control=0, mac_af_local_vars_service_mapping_logical_db=0, pd_layer_vars_local_slp_id=0, mac_af_local_vars_outer_vlan_tag_vid=0, mac_af_local_vars_mac_termination_logical_db=0, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_32_0_=0):
        super().__init__(96)
        self.mac_relay_local_vars_mac_da_compound_termination_control = mac_relay_local_vars_mac_da_compound_termination_control
        self.mac_af_local_vars_service_mapping_logical_db = mac_af_local_vars_service_mapping_logical_db
        self.pd_layer_vars_local_slp_id = pd_layer_vars_local_slp_id
        self.mac_af_local_vars_outer_vlan_tag_vid = mac_af_local_vars_outer_vlan_tag_vid
        self.mac_af_local_vars_mac_termination_logical_db = mac_af_local_vars_mac_termination_logical_db
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_32_0_ = packet_ethernet_header_da_32_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_4b1100_exact_0xc(self):
        return self._get_field_value(0, 4)
    @property
    def mac_relay_local_vars_mac_da_compound_termination_control(self):
        return npl_compound_termination_control_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @mac_relay_local_vars_mac_da_compound_termination_control.setter
    def mac_relay_local_vars_mac_da_compound_termination_control(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_compound_termination_control', 4, 2, npl_compound_termination_control_t, value)
    @property
    def mac_af_local_vars_service_mapping_logical_db(self):
        return self._get_field_value(6, 4)
    @mac_af_local_vars_service_mapping_logical_db.setter
    def mac_af_local_vars_service_mapping_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_service_mapping_logical_db', 6, 4, int, value)
    @property
    def pd_layer_vars_local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 10)
    @pd_layer_vars_local_slp_id.setter
    def pd_layer_vars_local_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id', 10, 16, npl_lp_id_t, value)
    @property
    def mac_af_local_vars_outer_vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @mac_af_local_vars_outer_vlan_tag_vid.setter
    def mac_af_local_vars_outer_vlan_tag_vid(self, value):
        self._set_field_value('field mac_af_local_vars_outer_vlan_tag_vid', 26, 12, npl_vlan_id_t, value)
    @property
    def const2_18d0_exact_0x0(self):
        return self._get_field_value(38, 18)
    @property
    def mac_af_local_vars_mac_termination_logical_db(self):
        return self._get_field_value(56, 2)
    @mac_af_local_vars_mac_termination_logical_db.setter
    def mac_af_local_vars_mac_termination_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_mac_termination_logical_db', 56, 2, int, value)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(58, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 58, 5, int, value)
    @property
    def packet_ethernet_header_da_32_0_(self):
        return self._get_field_value(63, 33)
    @packet_ethernet_header_da_32_0_.setter
    def packet_ethernet_header_da_32_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_32_0_', 63, 33, int, value)



class npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_tag_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_compound_termination_control=0, mac_af_local_vars_service_mapping_logical_db=0, pd_layer_vars_local_slp_id=0, mac_af_local_vars_outer_vlan_tag_vid=0, mac_af_local_vars_inner_vlan_tag_vid=0, mac_af_local_vars_mac_termination_logical_db=0, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_32_0_=0):
        super().__init__(96)
        self.mac_relay_local_vars_mac_da_compound_termination_control = mac_relay_local_vars_mac_da_compound_termination_control
        self.mac_af_local_vars_service_mapping_logical_db = mac_af_local_vars_service_mapping_logical_db
        self.pd_layer_vars_local_slp_id = pd_layer_vars_local_slp_id
        self.mac_af_local_vars_outer_vlan_tag_vid = mac_af_local_vars_outer_vlan_tag_vid
        self.mac_af_local_vars_inner_vlan_tag_vid = mac_af_local_vars_inner_vlan_tag_vid
        self.mac_af_local_vars_mac_termination_logical_db = mac_af_local_vars_mac_termination_logical_db
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_32_0_ = packet_ethernet_header_da_32_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_tag_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_4b1100_exact_0xc(self):
        return self._get_field_value(0, 4)
    @property
    def mac_relay_local_vars_mac_da_compound_termination_control(self):
        return npl_compound_termination_control_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @mac_relay_local_vars_mac_da_compound_termination_control.setter
    def mac_relay_local_vars_mac_da_compound_termination_control(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_compound_termination_control', 4, 2, npl_compound_termination_control_t, value)
    @property
    def mac_af_local_vars_service_mapping_logical_db(self):
        return self._get_field_value(6, 4)
    @mac_af_local_vars_service_mapping_logical_db.setter
    def mac_af_local_vars_service_mapping_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_service_mapping_logical_db', 6, 4, int, value)
    @property
    def pd_layer_vars_local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 10)
    @pd_layer_vars_local_slp_id.setter
    def pd_layer_vars_local_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id', 10, 16, npl_lp_id_t, value)
    @property
    def mac_af_local_vars_outer_vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @mac_af_local_vars_outer_vlan_tag_vid.setter
    def mac_af_local_vars_outer_vlan_tag_vid(self, value):
        self._set_field_value('field mac_af_local_vars_outer_vlan_tag_vid', 26, 12, npl_vlan_id_t, value)
    @property
    def mac_af_local_vars_inner_vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 38)
    @mac_af_local_vars_inner_vlan_tag_vid.setter
    def mac_af_local_vars_inner_vlan_tag_vid(self, value):
        self._set_field_value('field mac_af_local_vars_inner_vlan_tag_vid', 38, 12, npl_vlan_id_t, value)
    @property
    def const2_6d0_exact_0x0(self):
        return self._get_field_value(50, 6)
    @property
    def mac_af_local_vars_mac_termination_logical_db(self):
        return self._get_field_value(56, 2)
    @mac_af_local_vars_mac_termination_logical_db.setter
    def mac_af_local_vars_mac_termination_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_mac_termination_logical_db', 56, 2, int, value)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(58, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 58, 5, int, value)
    @property
    def packet_ethernet_header_da_32_0_(self):
        return self._get_field_value(63, 33)
    @packet_ethernet_header_da_32_0_.setter
    def packet_ethernet_header_da_32_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_32_0_', 63, 33, int, value)



class npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_double_access_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_compound_termination_control=0, mac_af_local_vars_service_mapping_logical_db=0, pd_layer_vars_local_slp_id=0, mac_af_local_vars_outer_vlan_tag_vid=0, mac_af_local_vars_inner_vlan_tag_vid=0, mac_af_local_vars_mac_termination_logical_db=0, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_32_0_=0):
        super().__init__(96)
        self.mac_relay_local_vars_mac_da_compound_termination_control = mac_relay_local_vars_mac_da_compound_termination_control
        self.mac_af_local_vars_service_mapping_logical_db = mac_af_local_vars_service_mapping_logical_db
        self.pd_layer_vars_local_slp_id = pd_layer_vars_local_slp_id
        self.mac_af_local_vars_outer_vlan_tag_vid = mac_af_local_vars_outer_vlan_tag_vid
        self.mac_af_local_vars_inner_vlan_tag_vid = mac_af_local_vars_inner_vlan_tag_vid
        self.mac_af_local_vars_mac_termination_logical_db = mac_af_local_vars_mac_termination_logical_db
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_32_0_ = packet_ethernet_header_da_32_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_double_access_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_4b1110_exact_0xe(self):
        return self._get_field_value(0, 4)
    @property
    def mac_relay_local_vars_mac_da_compound_termination_control(self):
        return npl_compound_termination_control_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @mac_relay_local_vars_mac_da_compound_termination_control.setter
    def mac_relay_local_vars_mac_da_compound_termination_control(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_compound_termination_control', 4, 2, npl_compound_termination_control_t, value)
    @property
    def mac_af_local_vars_service_mapping_logical_db(self):
        return self._get_field_value(6, 4)
    @mac_af_local_vars_service_mapping_logical_db.setter
    def mac_af_local_vars_service_mapping_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_service_mapping_logical_db', 6, 4, int, value)
    @property
    def pd_layer_vars_local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 10)
    @pd_layer_vars_local_slp_id.setter
    def pd_layer_vars_local_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id', 10, 16, npl_lp_id_t, value)
    @property
    def mac_af_local_vars_outer_vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @mac_af_local_vars_outer_vlan_tag_vid.setter
    def mac_af_local_vars_outer_vlan_tag_vid(self, value):
        self._set_field_value('field mac_af_local_vars_outer_vlan_tag_vid', 26, 12, npl_vlan_id_t, value)
    @property
    def mac_af_local_vars_inner_vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 38)
    @mac_af_local_vars_inner_vlan_tag_vid.setter
    def mac_af_local_vars_inner_vlan_tag_vid(self, value):
        self._set_field_value('field mac_af_local_vars_inner_vlan_tag_vid', 38, 12, npl_vlan_id_t, value)
    @property
    def const2_6d0_exact_0x0(self):
        return self._get_field_value(50, 6)
    @property
    def mac_af_local_vars_mac_termination_logical_db(self):
        return self._get_field_value(56, 2)
    @mac_af_local_vars_mac_termination_logical_db.setter
    def mac_af_local_vars_mac_termination_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_mac_termination_logical_db', 56, 2, int, value)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(58, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 58, 5, int, value)
    @property
    def packet_ethernet_header_da_32_0_(self):
        return self._get_field_value(63, 33)
    @packet_ethernet_header_da_32_0_.setter
    def packet_ethernet_header_da_32_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_32_0_', 63, 33, int, value)



class npl_service_mapping_compound_table_key_option_service_mapping_selector_pwe_tag_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_compound_termination_control=0, mac_af_local_vars_service_mapping_logical_db=0, pd_layer_vars_local_slp_id=0, packet_header_1__vlan_tag_vid=0, mac_af_local_vars_mac_termination_logical_db=0, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_32_0_=0):
        super().__init__(96)
        self.mac_relay_local_vars_mac_da_compound_termination_control = mac_relay_local_vars_mac_da_compound_termination_control
        self.mac_af_local_vars_service_mapping_logical_db = mac_af_local_vars_service_mapping_logical_db
        self.pd_layer_vars_local_slp_id = pd_layer_vars_local_slp_id
        self.packet_header_1__vlan_tag_vid = packet_header_1__vlan_tag_vid
        self.mac_af_local_vars_mac_termination_logical_db = mac_af_local_vars_mac_termination_logical_db
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_32_0_ = packet_ethernet_header_da_32_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_compound_table_key_option_service_mapping_selector_pwe_tag_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_4b1100_exact_0xc(self):
        return self._get_field_value(0, 4)
    @property
    def mac_relay_local_vars_mac_da_compound_termination_control(self):
        return npl_compound_termination_control_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @mac_relay_local_vars_mac_da_compound_termination_control.setter
    def mac_relay_local_vars_mac_da_compound_termination_control(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_compound_termination_control', 4, 2, npl_compound_termination_control_t, value)
    @property
    def mac_af_local_vars_service_mapping_logical_db(self):
        return self._get_field_value(6, 4)
    @mac_af_local_vars_service_mapping_logical_db.setter
    def mac_af_local_vars_service_mapping_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_service_mapping_logical_db', 6, 4, int, value)
    @property
    def pd_layer_vars_local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 10)
    @pd_layer_vars_local_slp_id.setter
    def pd_layer_vars_local_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id', 10, 16, npl_lp_id_t, value)
    @property
    def packet_header_1__vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 26)
    @packet_header_1__vlan_tag_vid.setter
    def packet_header_1__vlan_tag_vid(self, value):
        self._set_field_value('field packet_header_1__vlan_tag_vid', 26, 12, npl_vlan_id_t, value)
    @property
    def const2_18d0_exact_0x0(self):
        return self._get_field_value(38, 18)
    @property
    def mac_af_local_vars_mac_termination_logical_db(self):
        return self._get_field_value(56, 2)
    @mac_af_local_vars_mac_termination_logical_db.setter
    def mac_af_local_vars_mac_termination_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_mac_termination_logical_db', 56, 2, int, value)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(58, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 58, 5, int, value)
    @property
    def packet_ethernet_header_da_32_0_(self):
        return self._get_field_value(63, 33)
    @packet_ethernet_header_da_32_0_.setter
    def packet_ethernet_header_da_32_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_32_0_', 63, 33, int, value)




class service_mapping_compound_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(96 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = service_mapping_compound_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT(self):
        return npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_SERVICE_MAPPING_SELECTOR_AC_PORT.setter
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT(self, value):
        self._set_field_value('field NPL_SERVICE_MAPPING_SELECTOR_AC_PORT', 0, 96, npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_t, value)
    @property
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG(self):
        return npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG.setter
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG(self, value):
        self._set_field_value('field NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG', 0, 96, npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_t, value)
    @property
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG(self):
        return npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_tag_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG.setter
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG(self, value):
        self._set_field_value('field NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG', 0, 96, npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_tag_t, value)
    @property
    def NPL_SERVICE_MAPPING_SELECTOR_AC_DOUBLE_ACCESS(self):
        return npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_double_access_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_SERVICE_MAPPING_SELECTOR_AC_DOUBLE_ACCESS.setter
    def NPL_SERVICE_MAPPING_SELECTOR_AC_DOUBLE_ACCESS(self, value):
        self._set_field_value('field NPL_SERVICE_MAPPING_SELECTOR_AC_DOUBLE_ACCESS', 0, 96, npl_service_mapping_compound_table_key_option_service_mapping_selector_ac_double_access_t, value)
    @property
    def NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG(self):
        return npl_service_mapping_compound_table_key_option_service_mapping_selector_pwe_tag_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG.setter
    def NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG(self, value):
        self._set_field_value('field NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG', 0, 96, npl_service_mapping_compound_table_key_option_service_mapping_selector_pwe_tag_t, value)

class npl_service_mapping_compound_table_key_t(basic_npl_struct):
    def __init__(self, mac_af_local_vars_service_mapping_selector=0):
        super().__init__(96)
        self.mac_af_local_vars_service_mapping_selector = mac_af_local_vars_service_mapping_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _mac_af_local_vars_service_mapping_selector = 0
    @property
    def mac_af_local_vars_service_mapping_selector(self):
        return self._mac_af_local_vars_service_mapping_selector
    @mac_af_local_vars_service_mapping_selector.setter
    def mac_af_local_vars_service_mapping_selector(self, value):
        self._mac_af_local_vars_service_mapping_selector = value
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT:
            self._set_field_value('const field', 0, 4, int, 0xc)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT:
            self._set_field_value('const field', 26, 30, int, 0x0)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG:
            self._set_field_value('const field', 0, 4, int, 0xc)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG:
            self._set_field_value('const field', 38, 18, int, 0x0)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG:
            self._set_field_value('const field', 0, 4, int, 0xc)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG:
            self._set_field_value('const field', 50, 6, int, 0x0)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_DOUBLE_ACCESS:
            self._set_field_value('const field', 0, 4, int, 0xe)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_DOUBLE_ACCESS:
            self._set_field_value('const field', 50, 6, int, 0x0)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG:
            self._set_field_value('const field', 0, 4, int, 0xc)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG:
            self._set_field_value('const field', 38, 18, int, 0x0)

    @property
    def options(self):
        return service_mapping_compound_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 96 - 0, service_mapping_compound_table_key_options_t, value)

class npl_service_mapping_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(337)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def em_service_mapping(self):
        return npl_service_mapping_compound_table_em_service_mapping_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @em_service_mapping.setter
    def em_service_mapping(self, value):
        self._set_field_value('field em_service_mapping', 0, 337, npl_service_mapping_compound_table_em_service_mapping_payload_t, value)

class npl_service_mapping_compound_table_value_t(basic_npl_struct):
    def __init__(self, relay_and_l3_lp_attr=0, lp=0, termination=0):
        super().__init__(345)
        self.payloads.em_service_mapping = npl_service_mapping_compound_table_em_service_mapping_payload_t(relay_and_l3_lp_attr, lp, termination)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(337, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 337, 8, int, value)
    @property
    def payloads(self):
        return npl_service_mapping_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 337, npl_service_mapping_compound_table_payloads_t, value)



# API-s for table: service_mapping_em0_ac_port_table

NPL_SERVICE_MAPPING_EM0_AC_PORT_TABLE_ACTION_SM = 0x0

class npl_service_mapping_em0_ac_port_table_sm_payload_t(basic_npl_struct):
    def __init__(self, lp_id=0, relay_id=0):
        super().__init__(30)
        self.lp_id = lp_id
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_table_sm_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @lp_id.setter
    def lp_id(self, value):
        self._set_field_value('field lp_id', 14, 16, npl_lp_id_t, value)
    @property
    def relay_id(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 0, 14, npl_relay_id_t, value)




class npl_service_mapping_em0_ac_port_table_key_t(basic_npl_struct):
    def __init__(self, local_slp_id=0):
        super().__init__(16)
        self.local_slp_id = local_slp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_slp_id.setter
    def local_slp_id(self, value):
        self._set_field_value('field local_slp_id', 0, 16, npl_lp_id_t, value)

class npl_service_mapping_em0_ac_port_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(30)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sm(self):
        return npl_service_mapping_em0_ac_port_table_sm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sm.setter
    def sm(self, value):
        self._set_field_value('field sm', 0, 30, npl_service_mapping_em0_ac_port_table_sm_payload_t, value)

class npl_service_mapping_em0_ac_port_table_value_t(basic_npl_struct):
    def __init__(self, lp_id=0, relay_id=0):
        super().__init__(38)
        self.payloads.sm = npl_service_mapping_em0_ac_port_table_sm_payload_t(lp_id, relay_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(30, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 30, 8, int, value)
    @property
    def payloads(self):
        return npl_service_mapping_em0_ac_port_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 30, npl_service_mapping_em0_ac_port_table_payloads_t, value)



# API-s for table: service_mapping_em0_ac_port_tag_table

NPL_SERVICE_MAPPING_EM0_AC_PORT_TAG_TABLE_ACTION_SM = 0x0

class npl_service_mapping_em0_ac_port_tag_table_sm_payload_t(basic_npl_struct):
    def __init__(self, lp_id=0, relay_id=0):
        super().__init__(30)
        self.lp_id = lp_id
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_tag_table_sm_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @lp_id.setter
    def lp_id(self, value):
        self._set_field_value('field lp_id', 14, 16, npl_lp_id_t, value)
    @property
    def relay_id(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 0, 14, npl_relay_id_t, value)




class npl_service_mapping_em0_ac_port_tag_table_key_t(basic_npl_struct):
    def __init__(self, local_slp_id=0, vid1=0):
        super().__init__(28)
        self.local_slp_id = local_slp_id
        self.vid1 = vid1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_tag_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_slp_id.setter
    def local_slp_id(self, value):
        self._set_field_value('field local_slp_id', 0, 16, npl_lp_id_t, value)
    @property
    def vid1(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @vid1.setter
    def vid1(self, value):
        self._set_field_value('field vid1', 16, 12, npl_vlan_id_t, value)

class npl_service_mapping_em0_ac_port_tag_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(30)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_tag_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sm(self):
        return npl_service_mapping_em0_ac_port_tag_table_sm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sm.setter
    def sm(self, value):
        self._set_field_value('field sm', 0, 30, npl_service_mapping_em0_ac_port_tag_table_sm_payload_t, value)

class npl_service_mapping_em0_ac_port_tag_table_value_t(basic_npl_struct):
    def __init__(self, lp_id=0, relay_id=0):
        super().__init__(38)
        self.payloads.sm = npl_service_mapping_em0_ac_port_tag_table_sm_payload_t(lp_id, relay_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_tag_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(30, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 30, 8, int, value)
    @property
    def payloads(self):
        return npl_service_mapping_em0_ac_port_tag_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 30, npl_service_mapping_em0_ac_port_tag_table_payloads_t, value)



# API-s for table: service_mapping_em0_ac_port_tag_tag_table

NPL_SERVICE_MAPPING_EM0_AC_PORT_TAG_TAG_TABLE_ACTION_SM = 0x0

class npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t(basic_npl_struct):
    def __init__(self, lp_id=0, relay_id=0):
        super().__init__(30)
        self.lp_id = lp_id
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @lp_id.setter
    def lp_id(self, value):
        self._set_field_value('field lp_id', 14, 16, npl_lp_id_t, value)
    @property
    def relay_id(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 0, 14, npl_relay_id_t, value)




class npl_service_mapping_em0_ac_port_tag_tag_table_key_t(basic_npl_struct):
    def __init__(self, local_slp_id=0, vid1=0, vid2=0):
        super().__init__(40)
        self.local_slp_id = local_slp_id
        self.vid1 = vid1
        self.vid2 = vid2

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_tag_tag_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_slp_id.setter
    def local_slp_id(self, value):
        self._set_field_value('field local_slp_id', 0, 16, npl_lp_id_t, value)
    @property
    def vid1(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @vid1.setter
    def vid1(self, value):
        self._set_field_value('field vid1', 16, 12, npl_vlan_id_t, value)
    @property
    def vid2(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 28)
    @vid2.setter
    def vid2(self, value):
        self._set_field_value('field vid2', 28, 12, npl_vlan_id_t, value)

class npl_service_mapping_em0_ac_port_tag_tag_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(30)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_tag_tag_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sm(self):
        return npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sm.setter
    def sm(self, value):
        self._set_field_value('field sm', 0, 30, npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t, value)

class npl_service_mapping_em0_ac_port_tag_tag_table_value_t(basic_npl_struct):
    def __init__(self, lp_id=0, relay_id=0):
        super().__init__(38)
        self.payloads.sm = npl_service_mapping_em0_ac_port_tag_tag_table_sm_payload_t(lp_id, relay_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_ac_port_tag_tag_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(30, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 30, 8, int, value)
    @property
    def payloads(self):
        return npl_service_mapping_em0_ac_port_tag_tag_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 30, npl_service_mapping_em0_ac_port_tag_tag_table_payloads_t, value)



# API-s for table: service_mapping_em0_pwe_tag_table

NPL_SERVICE_MAPPING_EM0_PWE_TAG_TABLE_ACTION_SM = 0x0

class npl_service_mapping_em0_pwe_tag_table_sm_payload_t(basic_npl_struct):
    def __init__(self, lp_id=0, relay_id=0):
        super().__init__(30)
        self.lp_id = lp_id
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_pwe_tag_table_sm_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @lp_id.setter
    def lp_id(self, value):
        self._set_field_value('field lp_id', 14, 16, npl_lp_id_t, value)
    @property
    def relay_id(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 0, 14, npl_relay_id_t, value)




class npl_service_mapping_em0_pwe_tag_table_key_t(basic_npl_struct):
    def __init__(self, local_slp_id=0, vid1=0):
        super().__init__(28)
        self.local_slp_id = local_slp_id
        self.vid1 = vid1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_pwe_tag_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_slp_id.setter
    def local_slp_id(self, value):
        self._set_field_value('field local_slp_id', 0, 16, npl_lp_id_t, value)
    @property
    def vid1(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @vid1.setter
    def vid1(self, value):
        self._set_field_value('field vid1', 16, 12, npl_vlan_id_t, value)

class npl_service_mapping_em0_pwe_tag_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(30)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_pwe_tag_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sm(self):
        return npl_service_mapping_em0_pwe_tag_table_sm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sm.setter
    def sm(self, value):
        self._set_field_value('field sm', 0, 30, npl_service_mapping_em0_pwe_tag_table_sm_payload_t, value)

class npl_service_mapping_em0_pwe_tag_table_value_t(basic_npl_struct):
    def __init__(self, lp_id=0, relay_id=0):
        super().__init__(38)
        self.payloads.sm = npl_service_mapping_em0_pwe_tag_table_sm_payload_t(lp_id, relay_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em0_pwe_tag_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(30, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 30, 8, int, value)
    @property
    def payloads(self):
        return npl_service_mapping_em0_pwe_tag_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 30, npl_service_mapping_em0_pwe_tag_table_payloads_t, value)



# API-s for table: service_mapping_em1_ac_port_tag_table

NPL_SERVICE_MAPPING_EM1_AC_PORT_TAG_TABLE_ACTION_SM = 0x0

class npl_service_mapping_em1_ac_port_tag_table_sm_payload_t(basic_npl_struct):
    def __init__(self, lp_id=0, relay_id=0):
        super().__init__(30)
        self.lp_id = lp_id
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em1_ac_port_tag_table_sm_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @lp_id.setter
    def lp_id(self, value):
        self._set_field_value('field lp_id', 14, 16, npl_lp_id_t, value)
    @property
    def relay_id(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 0, 14, npl_relay_id_t, value)




class npl_service_mapping_em1_ac_port_tag_table_key_t(basic_npl_struct):
    def __init__(self, local_slp_id=0, vid1=0):
        super().__init__(28)
        self.local_slp_id = local_slp_id
        self.vid1 = vid1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em1_ac_port_tag_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_slp_id.setter
    def local_slp_id(self, value):
        self._set_field_value('field local_slp_id', 0, 16, npl_lp_id_t, value)
    @property
    def vid1(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @vid1.setter
    def vid1(self, value):
        self._set_field_value('field vid1', 16, 12, npl_vlan_id_t, value)

class npl_service_mapping_em1_ac_port_tag_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(30)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em1_ac_port_tag_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sm(self):
        return npl_service_mapping_em1_ac_port_tag_table_sm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sm.setter
    def sm(self, value):
        self._set_field_value('field sm', 0, 30, npl_service_mapping_em1_ac_port_tag_table_sm_payload_t, value)

class npl_service_mapping_em1_ac_port_tag_table_value_t(basic_npl_struct):
    def __init__(self, lp_id=0, relay_id=0):
        super().__init__(38)
        self.payloads.sm = npl_service_mapping_em1_ac_port_tag_table_sm_payload_t(lp_id, relay_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_em1_ac_port_tag_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(30, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 30, 8, int, value)
    @property
    def payloads(self):
        return npl_service_mapping_em1_ac_port_tag_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 30, npl_service_mapping_em1_ac_port_tag_table_payloads_t, value)



# API-s for table: service_mapping_tcam_ac_port_table

NPL_SERVICE_MAPPING_TCAM_AC_PORT_TABLE_ACTION_SM = 0x0

class npl_service_mapping_tcam_ac_port_table_sm_payload_t(basic_npl_struct):
    def __init__(self, lp_attr=0, lp_id=0, relay_table_payload=0, relay_id=0):
        super().__init__(228)
        self.lp_attr = lp_attr
        self.lp_id = lp_id
        self.relay_table_payload = relay_table_payload
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_table_sm_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lp_attr(self):
        return npl_mac_lp_attributes_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 84)
    @lp_attr.setter
    def lp_attr(self, value):
        self._set_field_value('field lp_attr', 84, 144, npl_mac_lp_attributes_table_payload_t, value)
    @property
    def lp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 68)
    @lp_id.setter
    def lp_id(self, value):
        self._set_field_value('field lp_id', 68, 16, npl_lp_id_t, value)
    @property
    def relay_table_payload(self):
        return npl_relay_attr_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @relay_table_payload.setter
    def relay_table_payload(self, value):
        self._set_field_value('field relay_table_payload', 14, 54, npl_relay_attr_table_payload_t, value)
    @property
    def relay_id(self):
        return self._get_field_value(0, 14)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 0, 14, int, value)




class npl_service_mapping_tcam_ac_port_table_key_t(basic_npl_struct):
    def __init__(self, local_slp_id=0):
        super().__init__(16)
        self.local_slp_id = local_slp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_slp_id.setter
    def local_slp_id(self, value):
        self._set_field_value('field local_slp_id', 0, 16, npl_lp_id_t, value)

class npl_service_mapping_tcam_ac_port_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(228)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sm(self):
        return npl_service_mapping_tcam_ac_port_table_sm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sm.setter
    def sm(self, value):
        self._set_field_value('field sm', 0, 228, npl_service_mapping_tcam_ac_port_table_sm_payload_t, value)

class npl_service_mapping_tcam_ac_port_table_value_t(basic_npl_struct):
    def __init__(self, lp_attr=0, lp_id=0, relay_table_payload=0, relay_id=0):
        super().__init__(236)
        self.payloads.sm = npl_service_mapping_tcam_ac_port_table_sm_payload_t(lp_attr, lp_id, relay_table_payload, relay_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(228, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 228, 8, int, value)
    @property
    def payloads(self):
        return npl_service_mapping_tcam_ac_port_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 228, npl_service_mapping_tcam_ac_port_table_payloads_t, value)



# API-s for table: service_mapping_tcam_ac_port_tag_table

NPL_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TABLE_ACTION_SM = 0x0

class npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t(basic_npl_struct):
    def __init__(self, lp_attr=0, lp_id=0, relay_table_payload=0, relay_id=0):
        super().__init__(228)
        self.lp_attr = lp_attr
        self.lp_id = lp_id
        self.relay_table_payload = relay_table_payload
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lp_attr(self):
        return npl_mac_lp_attributes_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 84)
    @lp_attr.setter
    def lp_attr(self, value):
        self._set_field_value('field lp_attr', 84, 144, npl_mac_lp_attributes_table_payload_t, value)
    @property
    def lp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 68)
    @lp_id.setter
    def lp_id(self, value):
        self._set_field_value('field lp_id', 68, 16, npl_lp_id_t, value)
    @property
    def relay_table_payload(self):
        return npl_relay_attr_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @relay_table_payload.setter
    def relay_table_payload(self, value):
        self._set_field_value('field relay_table_payload', 14, 54, npl_relay_attr_table_payload_t, value)
    @property
    def relay_id(self):
        return self._get_field_value(0, 14)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 0, 14, int, value)




class npl_service_mapping_tcam_ac_port_tag_table_key_t(basic_npl_struct):
    def __init__(self, local_slp_id=0, vid1=0):
        super().__init__(28)
        self.local_slp_id = local_slp_id
        self.vid1 = vid1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_tag_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_slp_id.setter
    def local_slp_id(self, value):
        self._set_field_value('field local_slp_id', 0, 16, npl_lp_id_t, value)
    @property
    def vid1(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @vid1.setter
    def vid1(self, value):
        self._set_field_value('field vid1', 16, 12, npl_vlan_id_t, value)

class npl_service_mapping_tcam_ac_port_tag_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(228)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_tag_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sm(self):
        return npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sm.setter
    def sm(self, value):
        self._set_field_value('field sm', 0, 228, npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t, value)

class npl_service_mapping_tcam_ac_port_tag_table_value_t(basic_npl_struct):
    def __init__(self, lp_attr=0, lp_id=0, relay_table_payload=0, relay_id=0):
        super().__init__(236)
        self.payloads.sm = npl_service_mapping_tcam_ac_port_tag_table_sm_payload_t(lp_attr, lp_id, relay_table_payload, relay_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_tag_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(228, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 228, 8, int, value)
    @property
    def payloads(self):
        return npl_service_mapping_tcam_ac_port_tag_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 228, npl_service_mapping_tcam_ac_port_tag_table_payloads_t, value)



# API-s for table: service_mapping_tcam_ac_port_tag_tag_table

NPL_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TAG_TABLE_ACTION_SM = 0x0

class npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t(basic_npl_struct):
    def __init__(self, lp_attr=0, lp_id=0, relay_table_payload=0, relay_id=0):
        super().__init__(228)
        self.lp_attr = lp_attr
        self.lp_id = lp_id
        self.relay_table_payload = relay_table_payload
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lp_attr(self):
        return npl_mac_lp_attributes_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 84)
    @lp_attr.setter
    def lp_attr(self, value):
        self._set_field_value('field lp_attr', 84, 144, npl_mac_lp_attributes_table_payload_t, value)
    @property
    def lp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 68)
    @lp_id.setter
    def lp_id(self, value):
        self._set_field_value('field lp_id', 68, 16, npl_lp_id_t, value)
    @property
    def relay_table_payload(self):
        return npl_relay_attr_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @relay_table_payload.setter
    def relay_table_payload(self, value):
        self._set_field_value('field relay_table_payload', 14, 54, npl_relay_attr_table_payload_t, value)
    @property
    def relay_id(self):
        return self._get_field_value(0, 14)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 0, 14, int, value)




class npl_service_mapping_tcam_ac_port_tag_tag_table_key_t(basic_npl_struct):
    def __init__(self, local_slp_id=0, vid1=0, vid2=0):
        super().__init__(40)
        self.local_slp_id = local_slp_id
        self.vid1 = vid1
        self.vid2 = vid2

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_tag_tag_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_slp_id.setter
    def local_slp_id(self, value):
        self._set_field_value('field local_slp_id', 0, 16, npl_lp_id_t, value)
    @property
    def vid1(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @vid1.setter
    def vid1(self, value):
        self._set_field_value('field vid1', 16, 12, npl_vlan_id_t, value)
    @property
    def vid2(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 28)
    @vid2.setter
    def vid2(self, value):
        self._set_field_value('field vid2', 28, 12, npl_vlan_id_t, value)

class npl_service_mapping_tcam_ac_port_tag_tag_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(228)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_tag_tag_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sm(self):
        return npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sm.setter
    def sm(self, value):
        self._set_field_value('field sm', 0, 228, npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t, value)

class npl_service_mapping_tcam_ac_port_tag_tag_table_value_t(basic_npl_struct):
    def __init__(self, lp_attr=0, lp_id=0, relay_table_payload=0, relay_id=0):
        super().__init__(236)
        self.payloads.sm = npl_service_mapping_tcam_ac_port_tag_tag_table_sm_payload_t(lp_attr, lp_id, relay_table_payload, relay_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_ac_port_tag_tag_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(228, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 228, 8, int, value)
    @property
    def payloads(self):
        return npl_service_mapping_tcam_ac_port_tag_tag_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 228, npl_service_mapping_tcam_ac_port_tag_tag_table_payloads_t, value)



# API-s for table: service_mapping_tcam_pwe_tag_table

NPL_SERVICE_MAPPING_TCAM_PWE_TAG_TABLE_ACTION_SM = 0x0

class npl_service_mapping_tcam_pwe_tag_table_sm_payload_t(basic_npl_struct):
    def __init__(self, lp_attr=0, lp_id=0, relay_table_payload=0, relay_id=0):
        super().__init__(228)
        self.lp_attr = lp_attr
        self.lp_id = lp_id
        self.relay_table_payload = relay_table_payload
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_pwe_tag_table_sm_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lp_attr(self):
        return npl_mac_lp_attributes_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 84)
    @lp_attr.setter
    def lp_attr(self, value):
        self._set_field_value('field lp_attr', 84, 144, npl_mac_lp_attributes_table_payload_t, value)
    @property
    def lp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 68)
    @lp_id.setter
    def lp_id(self, value):
        self._set_field_value('field lp_id', 68, 16, npl_lp_id_t, value)
    @property
    def relay_table_payload(self):
        return npl_relay_attr_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @relay_table_payload.setter
    def relay_table_payload(self, value):
        self._set_field_value('field relay_table_payload', 14, 54, npl_relay_attr_table_payload_t, value)
    @property
    def relay_id(self):
        return self._get_field_value(0, 14)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 0, 14, int, value)




class npl_service_mapping_tcam_pwe_tag_table_key_t(basic_npl_struct):
    def __init__(self, local_slp_id=0, vid1=0):
        super().__init__(28)
        self.local_slp_id = local_slp_id
        self.vid1 = vid1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_pwe_tag_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @local_slp_id.setter
    def local_slp_id(self, value):
        self._set_field_value('field local_slp_id', 0, 16, npl_lp_id_t, value)
    @property
    def vid1(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 16)
    @vid1.setter
    def vid1(self, value):
        self._set_field_value('field vid1', 16, 12, npl_vlan_id_t, value)

class npl_service_mapping_tcam_pwe_tag_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(228)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_pwe_tag_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sm(self):
        return npl_service_mapping_tcam_pwe_tag_table_sm_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sm.setter
    def sm(self, value):
        self._set_field_value('field sm', 0, 228, npl_service_mapping_tcam_pwe_tag_table_sm_payload_t, value)

class npl_service_mapping_tcam_pwe_tag_table_value_t(basic_npl_struct):
    def __init__(self, lp_attr=0, lp_id=0, relay_table_payload=0, relay_id=0):
        super().__init__(236)
        self.payloads.sm = npl_service_mapping_tcam_pwe_tag_table_sm_payload_t(lp_attr, lp_id, relay_table_payload, relay_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_mapping_tcam_pwe_tag_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(228, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 228, 8, int, value)
    @property
    def payloads(self):
        return npl_service_mapping_tcam_pwe_tag_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 228, npl_service_mapping_tcam_pwe_tag_table_payloads_t, value)



# API-s for table: service_relay_attributes_table

NPL_SERVICE_RELAY_ATTRIBUTES_TABLE_ACTION_RELAY = 0x0

class npl_service_relay_attributes_table_relay_payload_t(basic_npl_struct):
    def __init__(self, relay_table_payload=0):
        super().__init__(54)
        self.relay_table_payload = relay_table_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_relay_attributes_table_relay_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def relay_table_payload(self):
        return npl_relay_attr_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @relay_table_payload.setter
    def relay_table_payload(self, value):
        self._set_field_value('field relay_table_payload', 0, 54, npl_relay_attr_table_payload_t, value)




class npl_service_relay_attributes_table_key_t(basic_npl_struct):
    def __init__(self, relay_id=0):
        super().__init__(14)
        self.relay_id = relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_relay_attributes_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def relay_id(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @relay_id.setter
    def relay_id(self, value):
        self._set_field_value('field relay_id', 0, 14, npl_relay_id_t, value)

class npl_service_relay_attributes_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(54)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_relay_attributes_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def relay(self):
        return npl_service_relay_attributes_table_relay_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @relay.setter
    def relay(self, value):
        self._set_field_value('field relay', 0, 54, npl_service_relay_attributes_table_relay_payload_t, value)

class npl_service_relay_attributes_table_value_t(basic_npl_struct):
    def __init__(self, relay_table_payload=0):
        super().__init__(62)
        self.payloads.relay = npl_service_relay_attributes_table_relay_payload_t(relay_table_payload)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_relay_attributes_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(54, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 54, 8, int, value)
    @property
    def payloads(self):
        return npl_service_relay_attributes_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 54, npl_service_relay_attributes_table_payloads_t, value)



# API-s for table: service_relay_table_compound

NPL_SERVICE_RELAY_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_service_relay_table_compound_key_t(basic_npl_struct):
    def __init__(self, service_relay_attributes_table_key=0):
        super().__init__(14)
        self.service_relay_attributes_table_key = service_relay_attributes_table_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_relay_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def service_relay_attributes_table_key(self):
        return npl_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @service_relay_attributes_table_key.setter
    def service_relay_attributes_table_key(self, value):
        self._set_field_value('field service_relay_attributes_table_key', 0, 14, npl_relay_id_t, value)

class npl_service_relay_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(57)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_relay_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_relay_and_l3_lp_attr(self):
        return npl_l2_relay_and_l3_lp_attributes_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @mac_relay_and_l3_lp_attr.setter
    def mac_relay_and_l3_lp_attr(self, value):
        self._set_field_value('field mac_relay_and_l3_lp_attr', 0, 57, npl_l2_relay_and_l3_lp_attributes_payload_t, value)

class npl_service_relay_table_compound_value_t(basic_npl_struct):
    def __init__(self, mac_relay_and_l3_lp_attr=0):
        super().__init__(65)
        self.payloads.mac_relay_and_l3_lp_attr = mac_relay_and_l3_lp_attr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_service_relay_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(57, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 57, 8, int, value)
    @property
    def payloads(self):
        return npl_service_relay_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 57, npl_service_relay_table_compound_payloads_t, value)



# API-s for table: set_ene_macro_and_bytes_to_remove_table

NPL_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE_ACTION_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE = 0x0

class npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t(basic_npl_struct):
    def __init__(self, bytes_to_remove=0, new_hdr_type=0, ene_macro_id=0):
        super().__init__(20)
        self.bytes_to_remove = bytes_to_remove
        self.new_hdr_type = new_hdr_type
        self.ene_macro_id = ene_macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def bytes_to_remove(self):
        return self._get_field_value(12, 8)
    @bytes_to_remove.setter
    def bytes_to_remove(self, value):
        self._set_field_value('field bytes_to_remove', 12, 8, int, value)
    @property
    def new_hdr_type(self):
        return self._get_field_value(8, 4)
    @new_hdr_type.setter
    def new_hdr_type(self, value):
        self._set_field_value('field new_hdr_type', 8, 4, int, value)
    @property
    def ene_macro_id(self):
        return self._get_field_value(0, 8)
    @ene_macro_id.setter
    def ene_macro_id(self, value):
        self._set_field_value('field ene_macro_id', 0, 8, int, value)




class npl_set_ene_macro_and_bytes_to_remove_table_key_t(basic_npl_struct):
    def __init__(self, plb_header_type=0, hdr_type=0):
        super().__init__(5)
        self.plb_header_type = plb_header_type
        self.hdr_type = hdr_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_set_ene_macro_and_bytes_to_remove_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def plb_header_type(self):
        return self._get_field_value(0, 1)
    @plb_header_type.setter
    def plb_header_type(self, value):
        self._set_field_value('field plb_header_type', 0, 1, int, value)
    @property
    def hdr_type(self):
        return self._get_field_value(1, 4)
    @hdr_type.setter
    def hdr_type(self, value):
        self._set_field_value('field hdr_type', 1, 4, int, value)

class npl_set_ene_macro_and_bytes_to_remove_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_set_ene_macro_and_bytes_to_remove_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def set_ene_macro_and_bytes_to_remove_table(self):
        return npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @set_ene_macro_and_bytes_to_remove_table.setter
    def set_ene_macro_and_bytes_to_remove_table(self, value):
        self._set_field_value('field set_ene_macro_and_bytes_to_remove_table', 0, 20, npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t, value)

class npl_set_ene_macro_and_bytes_to_remove_table_value_t(basic_npl_struct):
    def __init__(self, bytes_to_remove=0, new_hdr_type=0, ene_macro_id=0):
        super().__init__(28)
        self.payloads.set_ene_macro_and_bytes_to_remove_table = npl_set_ene_macro_and_bytes_to_remove_table_set_ene_macro_and_bytes_to_remove_table_payload_t(bytes_to_remove, new_hdr_type, ene_macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_set_ene_macro_and_bytes_to_remove_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_set_ene_macro_and_bytes_to_remove_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_set_ene_macro_and_bytes_to_remove_table_payloads_t, value)



# API-s for table: sgacl_table

NPL_SGACL_TABLE_ACTION_WRITE = 0x0

class npl_sgacl_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(11)
        self._set_field_value('const field', 0, 4, int, 0x0)
        self._set_field_value('const field', 4, 1, int, 0x0)
        self._set_field_value('const field', 5, 1, int, 0x0)
        self._set_field_value('const field', 6, 1, int, 0x0)
        self._set_field_value('const field', 7, 1, int, 0x0)
        self._set_field_value('const field', 8, 1, int, 0x0)
        self._set_field_value('const field', 9, 1, int, 0x0)
        self._set_field_value('const field', 10, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_sgacl_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_FWD0_INGRESS_SGACL_DB_160_ternary_0x0(self):
        return self._get_field_value(0, 4)
    @property
    def const2_0_ternary_0x0(self):
        return self._get_field_value(4, 1)
    @property
    def const3_0_ternary_0x0(self):
        return self._get_field_value(5, 1)
    @property
    def const4_0_ternary_0x0(self):
        return self._get_field_value(6, 1)
    @property
    def const5_0_ternary_0x0(self):
        return self._get_field_value(7, 1)
    @property
    def const6_0_ternary_0x0(self):
        return self._get_field_value(8, 1)
    @property
    def const7_0_ternary_0x0(self):
        return self._get_field_value(9, 1)
    @property
    def const8_0_ternary_0x0(self):
        return self._get_field_value(10, 1)

class npl_sgacl_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_sgacl_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sgacl_payload(self):
        return npl_sgacl_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @sgacl_payload.setter
    def sgacl_payload(self, value):
        self._set_field_value('field sgacl_payload', 0, 64, npl_sgacl_payload_t, value)

class npl_sgacl_table_value_t(basic_npl_struct):
    def __init__(self, sgacl_payload=0):
        super().__init__(72)
        self.payloads.sgacl_payload = sgacl_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_sgacl_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_sgacl_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_sgacl_table_payloads_t, value)



# API-s for table: sip_index_table

NPL_SIP_INDEX_TABLE_ACTION_WRITE = 0x0

class npl_sip_index_table_key_t(basic_npl_struct):
    def __init__(self, sip_index=0):
        super().__init__(4)
        self.sip_index = sip_index

    def _get_as_sub_field(data, offset_in_data):
        result = npl_sip_index_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sip_index(self):
        return self._get_field_value(0, 4)
    @sip_index.setter
    def sip_index(self, value):
        self._set_field_value('field sip_index', 0, 4, int, value)

class npl_sip_index_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(32)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_sip_index_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def sip(self):
        return self._get_field_value(0, 32)
    @sip.setter
    def sip(self, value):
        self._set_field_value('field sip', 0, 32, int, value)

class npl_sip_index_table_value_t(basic_npl_struct):
    def __init__(self, sip=0):
        super().__init__(40)
        self.payloads.sip = sip

    def _get_as_sub_field(data, offset_in_data):
        result = npl_sip_index_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(32, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 32, 8, int, value)
    @property
    def payloads(self):
        return npl_sip_index_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 32, npl_sip_index_table_payloads_t, value)



# API-s for table: slice_modes_table

NPL_SLICE_MODES_TABLE_ACTION_WRITE = 0x0

class npl_slice_modes_table_key_t(basic_npl_struct):
    def __init__(self, slice_id=0):
        super().__init__(3)
        self.slice_id = slice_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slice_modes_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def slice_id(self):
        return self._get_field_value(0, 3)
    @slice_id.setter
    def slice_id(self, value):
        self._set_field_value('field slice_id', 0, 3, int, value)

class npl_slice_modes_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slice_modes_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def slice_modes_table_in_out_vars_slice_mode(self):
        return self._get_field_value(0, 1)
    @slice_modes_table_in_out_vars_slice_mode.setter
    def slice_modes_table_in_out_vars_slice_mode(self, value):
        self._set_field_value('field slice_modes_table_in_out_vars_slice_mode', 0, 1, int, value)

class npl_slice_modes_table_value_t(basic_npl_struct):
    def __init__(self, slice_modes_table_in_out_vars_slice_mode=0):
        super().__init__(9)
        self.payloads.slice_modes_table_in_out_vars_slice_mode = slice_modes_table_in_out_vars_slice_mode

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slice_modes_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_slice_modes_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_slice_modes_table_payloads_t, value)



# API-s for table: slp_based_forwarding_compound_table

NPL_SLP_BASED_FORWARDING_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_slp_based_forwarding_compound_table_key_t(basic_npl_struct):
    def __init__(self, pd_layer_vars_l3_global_slp_id_id=0):
        super().__init__(21)
        self._set_field_value('const field', 0, 7, int, 0x46)
        self.pd_layer_vars_l3_global_slp_id_id = pd_layer_vars_l3_global_slp_id_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slp_based_forwarding_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_CENTRAL_EM_LDB_IP_SLP_FWD_exact_0x46(self):
        return self._get_field_value(0, 7)
    @property
    def pd_layer_vars_l3_global_slp_id_id(self):
        return npl_l3_slp_id_t._get_as_sub_field(self._data, self._offset_in_data + 7)
    @pd_layer_vars_l3_global_slp_id_id.setter
    def pd_layer_vars_l3_global_slp_id_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_global_slp_id_id', 7, 14, npl_l3_slp_id_t, value)

class npl_slp_based_forwarding_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slp_based_forwarding_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def slp_fwd_result(self):
        return npl_slp_fwd_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @slp_fwd_result.setter
    def slp_fwd_result(self, value):
        self._set_field_value('field slp_fwd_result', 0, 44, npl_slp_fwd_result_t, value)

class npl_slp_based_forwarding_compound_table_value_t(basic_npl_struct):
    def __init__(self, slp_fwd_result=0):
        super().__init__(52)
        self.payloads.slp_fwd_result = slp_fwd_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slp_based_forwarding_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_slp_based_forwarding_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_slp_based_forwarding_compound_table_payloads_t, value)



# API-s for table: slp_based_forwarding_table

NPL_SLP_BASED_FORWARDING_TABLE_ACTION_WRITE = 0x0

class npl_slp_based_forwarding_table_key_t(basic_npl_struct):
    def __init__(self, slp_id=0):
        super().__init__(14)
        self.slp_id = slp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slp_based_forwarding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def slp_id(self):
        return npl_l3_slp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @slp_id.setter
    def slp_id(self, value):
        self._set_field_value('field slp_id', 0, 14, npl_l3_slp_id_t, value)

class npl_slp_based_forwarding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slp_based_forwarding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def slp_fwd_result(self):
        return npl_slp_fwd_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @slp_fwd_result.setter
    def slp_fwd_result(self, value):
        self._set_field_value('field slp_fwd_result', 0, 44, npl_slp_fwd_result_t, value)

class npl_slp_based_forwarding_table_value_t(basic_npl_struct):
    def __init__(self, slp_fwd_result=0):
        super().__init__(52)
        self.payloads.slp_fwd_result = slp_fwd_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slp_based_forwarding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_slp_based_forwarding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_slp_based_forwarding_table_payloads_t, value)



# API-s for table: slp_pack_table

NPL_SLP_PACK_TABLE_ACTION_WRITE = 0x0

class npl_slp_pack_table_key_t(basic_npl_struct):
    def __init__(self, pd_layer_vars_l3_global_slp_id=0):
        super().__init__(20)
        self._set_field_value('const field', 0, 4, int, 0x0)
        self.pd_layer_vars_l3_global_slp_id = pd_layer_vars_l3_global_slp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slp_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_4b0_exact_0x0(self):
        return self._get_field_value(0, 4)
    @property
    def pd_layer_vars_l3_global_slp_id(self):
        return npl_l3_global_slp_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @pd_layer_vars_l3_global_slp_id.setter
    def pd_layer_vars_l3_global_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_l3_global_slp_id', 4, 16, npl_l3_global_slp_t, value)

class npl_slp_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slp_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_npu_header_fwd_slp_info_global_slp_id(self):
        return npl_slp_info_t_anonymous_union_global_slp_id_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pd_npu_header_fwd_slp_info_global_slp_id.setter
    def pd_npu_header_fwd_slp_info_global_slp_id(self, value):
        self._set_field_value('field pd_npu_header_fwd_slp_info_global_slp_id', 0, 20, npl_slp_info_t_anonymous_union_global_slp_id_t, value)

class npl_slp_pack_table_value_t(basic_npl_struct):
    def __init__(self, pd_npu_header_fwd_slp_info_global_slp_id=0):
        super().__init__(28)
        self.payloads.pd_npu_header_fwd_slp_info_global_slp_id = pd_npu_header_fwd_slp_info_global_slp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_slp_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_slp_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_slp_pack_table_payloads_t, value)



# API-s for table: small_encap_mpls_he_asbr_table

NPL_SMALL_ENCAP_MPLS_HE_ASBR_TABLE_ACTION_WRITE = 0x0

class npl_small_encap_mpls_he_asbr_table_key_t(basic_npl_struct):
    def __init__(self, nh_ptr=0, asbr=0):
        super().__init__(28)
        self.nh_ptr = nh_ptr
        self.asbr = asbr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_he_asbr_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def nh_ptr(self):
        return self._get_field_value(0, 12)
    @nh_ptr.setter
    def nh_ptr(self, value):
        self._set_field_value('field nh_ptr', 0, 12, int, value)
    @property
    def asbr(self):
        return self._get_field_value(12, 16)
    @asbr.setter
    def asbr(self, value):
        self._set_field_value('field asbr', 12, 16, int, value)

class npl_small_encap_mpls_he_asbr_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_he_asbr_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_encap_mapping_data_payload_asbr(self):
        return npl_lsp_encap_mapping_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lsp_encap_mapping_data_payload_asbr.setter
    def lsp_encap_mapping_data_payload_asbr(self, value):
        self._set_field_value('field lsp_encap_mapping_data_payload_asbr', 0, 80, npl_lsp_encap_mapping_data_payload_t, value)

class npl_small_encap_mpls_he_asbr_table_value_t(basic_npl_struct):
    def __init__(self, lsp_encap_mapping_data_payload_asbr=0):
        super().__init__(88)
        self.payloads.lsp_encap_mapping_data_payload_asbr = lsp_encap_mapping_data_payload_asbr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_he_asbr_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_small_encap_mpls_he_asbr_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_small_encap_mpls_he_asbr_table_payloads_t, value)



# API-s for table: small_encap_mpls_he_te_table

NPL_SMALL_ENCAP_MPLS_HE_TE_TABLE_ACTION_WRITE = 0x0

class npl_small_encap_mpls_he_te_table_key_t(basic_npl_struct):
    def __init__(self, nh_ptr=0, te_tunnel=0):
        super().__init__(28)
        self.nh_ptr = nh_ptr
        self.te_tunnel = te_tunnel

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_he_te_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def nh_ptr(self):
        return self._get_field_value(0, 12)
    @nh_ptr.setter
    def nh_ptr(self, value):
        self._set_field_value('field nh_ptr', 0, 12, int, value)
    @property
    def te_tunnel(self):
        return self._get_field_value(12, 16)
    @te_tunnel.setter
    def te_tunnel(self, value):
        self._set_field_value('field te_tunnel', 12, 16, int, value)

class npl_small_encap_mpls_he_te_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_he_te_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_encap_mapping_data_payload_asbr(self):
        return npl_lsp_encap_mapping_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lsp_encap_mapping_data_payload_asbr.setter
    def lsp_encap_mapping_data_payload_asbr(self, value):
        self._set_field_value('field lsp_encap_mapping_data_payload_asbr', 0, 80, npl_lsp_encap_mapping_data_payload_t, value)

class npl_small_encap_mpls_he_te_table_value_t(basic_npl_struct):
    def __init__(self, lsp_encap_mapping_data_payload_asbr=0):
        super().__init__(88)
        self.payloads.lsp_encap_mapping_data_payload_asbr = lsp_encap_mapping_data_payload_asbr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_he_te_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_small_encap_mpls_he_te_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_small_encap_mpls_he_te_table_payloads_t, value)



# API-s for table: small_encap_mpls_labels_inter_as_table_compound

NPL_SMALL_ENCAP_MPLS_LABELS_INTER_AS_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_small_encap_mpls_labels_inter_as_table_compound_key_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_ptr=0, tx_npu_header_encap_tunnel_headend_asbr=0):
        super().__init__(34)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0x3)
        self.l3_tx_local_vars_nh_ptr = l3_tx_local_vars_nh_ptr
        self.tx_npu_header_encap_tunnel_headend_asbr = tx_npu_header_encap_tunnel_headend_asbr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_labels_inter_as_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_SMALL_EM_PER_ASBR_NH_LDB_exact_0x3(self):
        return self._get_field_value(2, 4)
    @property
    def l3_tx_local_vars_nh_ptr(self):
        return self._get_field_value(6, 12)
    @l3_tx_local_vars_nh_ptr.setter
    def l3_tx_local_vars_nh_ptr(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_ptr', 6, 12, int, value)
    @property
    def tx_npu_header_encap_tunnel_headend_asbr(self):
        return self._get_field_value(18, 16)
    @tx_npu_header_encap_tunnel_headend_asbr.setter
    def tx_npu_header_encap_tunnel_headend_asbr(self, value):
        self._set_field_value('field tx_npu_header_encap_tunnel_headend_asbr', 18, 16, int, value)

class npl_small_encap_mpls_labels_inter_as_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_labels_inter_as_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_encap_mapping_data_payload_asbr(self):
        return npl_lsp_encap_mapping_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lsp_encap_mapping_data_payload_asbr.setter
    def lsp_encap_mapping_data_payload_asbr(self, value):
        self._set_field_value('field lsp_encap_mapping_data_payload_asbr', 0, 80, npl_lsp_encap_mapping_data_payload_t, value)

class npl_small_encap_mpls_labels_inter_as_table_compound_value_t(basic_npl_struct):
    def __init__(self, lsp_encap_mapping_data_payload_asbr=0):
        super().__init__(88)
        self.payloads.lsp_encap_mapping_data_payload_asbr = lsp_encap_mapping_data_payload_asbr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_labels_inter_as_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_small_encap_mpls_labels_inter_as_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_small_encap_mpls_labels_inter_as_table_compound_payloads_t, value)



# API-s for table: small_encap_mpls_labels_ldpote_table_compound

NPL_SMALL_ENCAP_MPLS_LABELS_LDPOTE_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_small_encap_mpls_labels_ldpote_table_compound_key_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_nh_ptr=0, tx_npu_header_encap_tunnel_headend_te_tunnel=0):
        super().__init__(34)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0x7)
        self.l3_tx_local_vars_nh_ptr = l3_tx_local_vars_nh_ptr
        self.tx_npu_header_encap_tunnel_headend_te_tunnel = tx_npu_header_encap_tunnel_headend_te_tunnel

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_labels_ldpote_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_SMALL_EM_PER_TE_NH_LDB_exact_0x7(self):
        return self._get_field_value(2, 4)
    @property
    def l3_tx_local_vars_nh_ptr(self):
        return self._get_field_value(6, 12)
    @l3_tx_local_vars_nh_ptr.setter
    def l3_tx_local_vars_nh_ptr(self, value):
        self._set_field_value('field l3_tx_local_vars_nh_ptr', 6, 12, int, value)
    @property
    def tx_npu_header_encap_tunnel_headend_te_tunnel(self):
        return self._get_field_value(18, 16)
    @tx_npu_header_encap_tunnel_headend_te_tunnel.setter
    def tx_npu_header_encap_tunnel_headend_te_tunnel(self, value):
        self._set_field_value('field tx_npu_header_encap_tunnel_headend_te_tunnel', 18, 16, int, value)

class npl_small_encap_mpls_labels_ldpote_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_labels_ldpote_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def lsp_encap_mapping_data_payload_asbr(self):
        return npl_lsp_encap_mapping_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @lsp_encap_mapping_data_payload_asbr.setter
    def lsp_encap_mapping_data_payload_asbr(self, value):
        self._set_field_value('field lsp_encap_mapping_data_payload_asbr', 0, 80, npl_lsp_encap_mapping_data_payload_t, value)

class npl_small_encap_mpls_labels_ldpote_table_compound_value_t(basic_npl_struct):
    def __init__(self, lsp_encap_mapping_data_payload_asbr=0):
        super().__init__(88)
        self.payloads.lsp_encap_mapping_data_payload_asbr = lsp_encap_mapping_data_payload_asbr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_small_encap_mpls_labels_ldpote_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_small_encap_mpls_labels_ldpote_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_small_encap_mpls_labels_ldpote_table_compound_payloads_t, value)



# API-s for table: snoop_code_hw_table

NPL_SNOOP_CODE_HW_TABLE_ACTION_WRITE = 0x0

class npl_snoop_code_hw_table_key_t(basic_npl_struct):
    def __init__(self, pd_common_leaba_fields_snoop_code=0):
        super().__init__(8)
        self.pd_common_leaba_fields_snoop_code = pd_common_leaba_fields_snoop_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_snoop_code_hw_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_common_leaba_fields_snoop_code(self):
        return self._get_field_value(0, 8)
    @pd_common_leaba_fields_snoop_code.setter
    def pd_common_leaba_fields_snoop_code(self, value):
        self._set_field_value('field pd_common_leaba_fields_snoop_code', 0, 8, int, value)

class npl_snoop_code_hw_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(5)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_snoop_code_hw_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_in_mirror_cmd0(self):
        return self._get_field_value(0, 5)
    @rxpp_pd_in_mirror_cmd0.setter
    def rxpp_pd_in_mirror_cmd0(self, value):
        self._set_field_value('field rxpp_pd_in_mirror_cmd0', 0, 5, int, value)

class npl_snoop_code_hw_table_value_t(basic_npl_struct):
    def __init__(self, rxpp_pd_in_mirror_cmd0=0):
        super().__init__(13)
        self.payloads.rxpp_pd_in_mirror_cmd0 = rxpp_pd_in_mirror_cmd0

    def _get_as_sub_field(data, offset_in_data):
        result = npl_snoop_code_hw_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(5, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 5, 8, int, value)
    @property
    def payloads(self):
        return npl_snoop_code_hw_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 5, npl_snoop_code_hw_table_payloads_t, value)



# API-s for table: snoop_table

NPL_SNOOP_TABLE_ACTION_WRITE = 0x0

class npl_snoop_table_key_t(basic_npl_struct):
    def __init__(self, trap_conditions=0, traps=0):
        super().__init__(199)
        self.trap_conditions = trap_conditions
        self.traps = traps

    def _get_as_sub_field(data, offset_in_data):
        result = npl_snoop_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def trap_conditions(self):
        return npl_trap_conditions_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @trap_conditions.setter
    def trap_conditions(self, value):
        self._set_field_value('field trap_conditions', 0, 2, npl_trap_conditions_t, value)
    @property
    def traps(self):
        return npl_traps_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @traps.setter
    def traps(self, value):
        self._set_field_value('field traps', 2, 197, npl_traps_t, value)

class npl_snoop_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_snoop_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def snoop_code(self):
        return npl_snoop_code_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @snoop_code.setter
    def snoop_code(self, value):
        self._set_field_value('field snoop_code', 0, 8, npl_snoop_code_t, value)

class npl_snoop_table_value_t(basic_npl_struct):
    def __init__(self, snoop_code=0):
        super().__init__(16)
        self.payloads.snoop_code = snoop_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_snoop_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_snoop_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_snoop_table_payloads_t, value)



# API-s for table: snoop_to_dsp_in_npu_soft_header_table

NPL_SNOOP_TO_DSP_IN_NPU_SOFT_HEADER_TABLE_ACTION_WRITE = 0x0

class npl_snoop_to_dsp_in_npu_soft_header_table_key_t(basic_npl_struct):
    def __init__(self, device_snoop_code=0):
        super().__init__(8)
        self.device_snoop_code = device_snoop_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_snoop_to_dsp_in_npu_soft_header_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def device_snoop_code(self):
        return self._get_field_value(0, 8)
    @device_snoop_code.setter
    def device_snoop_code(self, value):
        self._set_field_value('field device_snoop_code', 0, 8, int, value)

class npl_snoop_to_dsp_in_npu_soft_header_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_snoop_to_dsp_in_npu_soft_header_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_dsp_in_npu_soft_header(self):
        return self._get_field_value(0, 1)
    @update_dsp_in_npu_soft_header.setter
    def update_dsp_in_npu_soft_header(self, value):
        self._set_field_value('field update_dsp_in_npu_soft_header', 0, 1, int, value)

class npl_snoop_to_dsp_in_npu_soft_header_table_value_t(basic_npl_struct):
    def __init__(self, update_dsp_in_npu_soft_header=0):
        super().__init__(9)
        self.payloads.update_dsp_in_npu_soft_header = update_dsp_in_npu_soft_header

    def _get_as_sub_field(data, offset_in_data):
        result = npl_snoop_to_dsp_in_npu_soft_header_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_snoop_to_dsp_in_npu_soft_header_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_snoop_to_dsp_in_npu_soft_header_table_payloads_t, value)



# API-s for table: source_pif_hw_table

NPL_SOURCE_PIF_HW_TABLE_ACTION_INIT_RX_DATA = 0x0

class npl_source_pif_hw_table_init_rx_data_payload_t(basic_npl_struct):
    def __init__(self, initial_layer_index=0, initial_rx_data=0, tag_swap_cmd=0, np_macro_id=0, fi_macro_id=0):
        super().__init__(68)
        self.initial_layer_index = initial_layer_index
        self.initial_rx_data = initial_rx_data
        self.tag_swap_cmd = tag_swap_cmd
        self.np_macro_id = np_macro_id
        self.fi_macro_id = fi_macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_source_pif_hw_table_init_rx_data_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def initial_layer_index(self):
        return self._get_field_value(64, 4)
    @initial_layer_index.setter
    def initial_layer_index(self, value):
        self._set_field_value('field initial_layer_index', 64, 4, int, value)
    @property
    def initial_rx_data(self):
        return npl_pd_rx_nw_app_t_anonymous_union_init_fields_union_t._get_as_sub_field(self._data, self._offset_in_data + 14)
    @initial_rx_data.setter
    def initial_rx_data(self, value):
        self._set_field_value('field initial_rx_data', 14, 50, npl_pd_rx_nw_app_t_anonymous_union_init_fields_union_t, value)
    @property
    def tag_swap_cmd(self):
        return self._get_field_value(12, 2)
    @tag_swap_cmd.setter
    def tag_swap_cmd(self, value):
        self._set_field_value('field tag_swap_cmd', 12, 2, int, value)
    @property
    def np_macro_id(self):
        return self._get_field_value(6, 6)
    @np_macro_id.setter
    def np_macro_id(self, value):
        self._set_field_value('field np_macro_id', 6, 6, int, value)
    @property
    def fi_macro_id(self):
        return self._get_field_value(0, 6)
    @fi_macro_id.setter
    def fi_macro_id(self, value):
        self._set_field_value('field fi_macro_id', 0, 6, int, value)




class npl_source_pif_hw_table_key_t(basic_npl_struct):
    def __init__(self, rxpp_npu_input_ifg=0, rxpp_npu_input_ifg_rx_fd_source_pif=0):
        super().__init__(6)
        self.rxpp_npu_input_ifg = rxpp_npu_input_ifg
        self.rxpp_npu_input_ifg_rx_fd_source_pif = rxpp_npu_input_ifg_rx_fd_source_pif

    def _get_as_sub_field(data, offset_in_data):
        result = npl_source_pif_hw_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_npu_input_ifg(self):
        return self._get_field_value(0, 1)
    @rxpp_npu_input_ifg.setter
    def rxpp_npu_input_ifg(self, value):
        self._set_field_value('field rxpp_npu_input_ifg', 0, 1, int, value)
    @property
    def rxpp_npu_input_ifg_rx_fd_source_pif(self):
        return self._get_field_value(1, 5)
    @rxpp_npu_input_ifg_rx_fd_source_pif.setter
    def rxpp_npu_input_ifg_rx_fd_source_pif(self, value):
        self._set_field_value('field rxpp_npu_input_ifg_rx_fd_source_pif', 1, 5, int, value)

class npl_source_pif_hw_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(68)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_source_pif_hw_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def init_rx_data(self):
        return npl_source_pif_hw_table_init_rx_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @init_rx_data.setter
    def init_rx_data(self, value):
        self._set_field_value('field init_rx_data', 0, 68, npl_source_pif_hw_table_init_rx_data_payload_t, value)

class npl_source_pif_hw_table_value_t(basic_npl_struct):
    def __init__(self, initial_layer_index=0, initial_rx_data=0, tag_swap_cmd=0, np_macro_id=0, fi_macro_id=0):
        super().__init__(76)
        self.payloads.init_rx_data = npl_source_pif_hw_table_init_rx_data_payload_t(initial_layer_index, initial_rx_data, tag_swap_cmd, np_macro_id, fi_macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_source_pif_hw_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(68, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 68, 8, int, value)
    @property
    def payloads(self):
        return npl_source_pif_hw_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 68, npl_source_pif_hw_table_payloads_t, value)



# API-s for table: stage2_lb_group_size_table

NPL_STAGE2_LB_GROUP_SIZE_TABLE_ACTION_WRITE = 0x0

class npl_stage2_lb_group_size_table_key_t(basic_npl_struct):
    def __init__(self, ecmp_id=0):
        super().__init__(13)
        self.ecmp_id = ecmp_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage2_lb_group_size_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ecmp_id(self):
        return self._get_field_value(0, 13)
    @ecmp_id.setter
    def ecmp_id(self, value):
        self._set_field_value('field ecmp_id', 0, 13, int, value)

class npl_stage2_lb_group_size_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage2_lb_group_size_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def stage2_lb_group_size_table_result(self):
        return npl_lb_group_size_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @stage2_lb_group_size_table_result.setter
    def stage2_lb_group_size_table_result(self, value):
        self._set_field_value('field stage2_lb_group_size_table_result', 0, 10, npl_lb_group_size_table_result_t, value)

class npl_stage2_lb_group_size_table_value_t(basic_npl_struct):
    def __init__(self, stage2_lb_group_size_table_result=0):
        super().__init__(18)
        self.payloads.stage2_lb_group_size_table_result = stage2_lb_group_size_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage2_lb_group_size_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_stage2_lb_group_size_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_stage2_lb_group_size_table_payloads_t, value)



# API-s for table: stage2_lb_table

NPL_STAGE2_LB_TABLE_ACTION_WRITE = 0x0

class npl_stage2_lb_table_key_t(basic_npl_struct):
    def __init__(self, group_id=0, member_id=0):
        super().__init__(30)
        self.group_id = group_id
        self.member_id = member_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage2_lb_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def group_id(self):
        return self._get_field_value(0, 14)
    @group_id.setter
    def group_id(self, value):
        self._set_field_value('field group_id', 0, 14, int, value)
    @property
    def member_id(self):
        return self._get_field_value(14, 16)
    @member_id.setter
    def member_id(self, value):
        self._set_field_value('field member_id', 14, 16, int, value)

class npl_stage2_lb_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(29)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage2_lb_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def stage2_lb_result(self):
        return npl_stage2_lb_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @stage2_lb_result.setter
    def stage2_lb_result(self, value):
        self._set_field_value('field stage2_lb_result', 0, 29, npl_stage2_lb_table_result_t, value)

class npl_stage2_lb_table_value_t(basic_npl_struct):
    def __init__(self, stage2_lb_result=0):
        super().__init__(37)
        self.payloads.stage2_lb_result = stage2_lb_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage2_lb_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(29, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 29, 8, int, value)
    @property
    def payloads(self):
        return npl_stage2_lb_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 29, npl_stage2_lb_table_payloads_t, value)



# API-s for table: stage3_lb_group_size_table

NPL_STAGE3_LB_GROUP_SIZE_TABLE_ACTION_WRITE = 0x0

class npl_stage3_lb_group_size_table_key_t(basic_npl_struct):
    def __init__(self, stage3_lb_id=0):
        super().__init__(13)
        self.stage3_lb_id = stage3_lb_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage3_lb_group_size_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def stage3_lb_id(self):
        return self._get_field_value(0, 13)
    @stage3_lb_id.setter
    def stage3_lb_id(self, value):
        self._set_field_value('field stage3_lb_id', 0, 13, int, value)

class npl_stage3_lb_group_size_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(10)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage3_lb_group_size_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def stage3_lb_group_size_table_result(self):
        return npl_lb_group_size_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @stage3_lb_group_size_table_result.setter
    def stage3_lb_group_size_table_result(self, value):
        self._set_field_value('field stage3_lb_group_size_table_result', 0, 10, npl_lb_group_size_table_result_t, value)

class npl_stage3_lb_group_size_table_value_t(basic_npl_struct):
    def __init__(self, stage3_lb_group_size_table_result=0):
        super().__init__(18)
        self.payloads.stage3_lb_group_size_table_result = stage3_lb_group_size_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage3_lb_group_size_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(10, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 10, 8, int, value)
    @property
    def payloads(self):
        return npl_stage3_lb_group_size_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 10, npl_stage3_lb_group_size_table_payloads_t, value)



# API-s for table: stage3_lb_table

NPL_STAGE3_LB_TABLE_ACTION_WRITE = 0x0

class npl_stage3_lb_table_key_t(basic_npl_struct):
    def __init__(self, group_id=0, member_id=0):
        super().__init__(30)
        self.group_id = group_id
        self.member_id = member_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage3_lb_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def group_id(self):
        return self._get_field_value(0, 14)
    @group_id.setter
    def group_id(self, value):
        self._set_field_value('field group_id', 0, 14, int, value)
    @property
    def member_id(self):
        return self._get_field_value(14, 16)
    @member_id.setter
    def member_id(self, value):
        self._set_field_value('field member_id', 14, 16, int, value)

class npl_stage3_lb_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage3_lb_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def stage3_lb_result(self):
        return npl_stage3_lb_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @stage3_lb_result.setter
    def stage3_lb_result(self, value):
        self._set_field_value('field stage3_lb_result', 0, 40, npl_stage3_lb_table_result_t, value)

class npl_stage3_lb_table_value_t(basic_npl_struct):
    def __init__(self, stage3_lb_result=0):
        super().__init__(48)
        self.payloads.stage3_lb_result = stage3_lb_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage3_lb_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(40, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 40, 8, int, value)
    @property
    def payloads(self):
        return npl_stage3_lb_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 40, npl_stage3_lb_table_payloads_t, value)



# API-s for table: stage3_lb_type_decoding_table

NPL_STAGE3_LB_TYPE_DECODING_TABLE_ACTION_WRITE = 0x0

class npl_stage3_lb_type_decoding_table_key_t(basic_npl_struct):
    def __init__(self, type=0):
        super().__init__(2)
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage3_lb_type_decoding_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def type(self):
        return self._get_field_value(0, 2)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 0, 2, int, value)

class npl_stage3_lb_type_decoding_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(63)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage3_lb_type_decoding_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def stage3_lb_type_decoding_table_result(self):
        return npl_resolution_type_decoding_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @stage3_lb_type_decoding_table_result.setter
    def stage3_lb_type_decoding_table_result(self, value):
        self._set_field_value('field stage3_lb_type_decoding_table_result', 0, 63, npl_resolution_type_decoding_table_result_t, value)

class npl_stage3_lb_type_decoding_table_value_t(basic_npl_struct):
    def __init__(self, stage3_lb_type_decoding_table_result=0):
        super().__init__(71)
        self.payloads.stage3_lb_type_decoding_table_result = stage3_lb_type_decoding_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_stage3_lb_type_decoding_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(63, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 63, 8, int, value)
    @property
    def payloads(self):
        return npl_stage3_lb_type_decoding_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 63, npl_stage3_lb_type_decoding_table_payloads_t, value)



# API-s for table: svl_next_macro_static_table

NPL_SVL_NEXT_MACRO_STATIC_TABLE_ACTION_SVL_NEXT_MACRO_ACTION = 0x0

class npl_svl_next_macro_static_table_svl_next_macro_action_payload_t(basic_npl_struct):
    def __init__(self, ipc_trap=0, protocol_trap=0, pl_inc=0, macro_id=0):
        super().__init__(12)
        self.ipc_trap = ipc_trap
        self.protocol_trap = protocol_trap
        self.pl_inc = pl_inc
        self.macro_id = macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_svl_next_macro_static_table_svl_next_macro_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def ipc_trap(self):
        return self._get_field_value(11, 1)
    @ipc_trap.setter
    def ipc_trap(self, value):
        self._set_field_value('field ipc_trap', 11, 1, int, value)
    @property
    def protocol_trap(self):
        return self._get_field_value(10, 1)
    @protocol_trap.setter
    def protocol_trap(self, value):
        self._set_field_value('field protocol_trap', 10, 1, int, value)
    @property
    def pl_inc(self):
        return self._get_field_value(8, 2)
    @pl_inc.setter
    def pl_inc(self, value):
        self._set_field_value('field pl_inc', 8, 2, int, value)
    @property
    def macro_id(self):
        return self._get_field_value(0, 8)
    @macro_id.setter
    def macro_id(self, value):
        self._set_field_value('field macro_id', 0, 8, int, value)




class npl_svl_next_macro_static_table_key_t(basic_npl_struct):
    def __init__(self, mac_da_prefix=0, type=0):
        super().__init__(13)
        self.mac_da_prefix = mac_da_prefix
        self.type = type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_svl_next_macro_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def mac_da_prefix(self):
        return self._get_field_value(0, 8)
    @mac_da_prefix.setter
    def mac_da_prefix(self, value):
        self._set_field_value('field mac_da_prefix', 0, 8, int, value)
    @property
    def type(self):
        return self._get_field_value(8, 5)
    @type.setter
    def type(self, value):
        self._set_field_value('field type', 8, 5, int, value)

class npl_svl_next_macro_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(12)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_svl_next_macro_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def svl_next_macro_action(self):
        return npl_svl_next_macro_static_table_svl_next_macro_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @svl_next_macro_action.setter
    def svl_next_macro_action(self, value):
        self._set_field_value('field svl_next_macro_action', 0, 12, npl_svl_next_macro_static_table_svl_next_macro_action_payload_t, value)

class npl_svl_next_macro_static_table_value_t(basic_npl_struct):
    def __init__(self, ipc_trap=0, protocol_trap=0, pl_inc=0, macro_id=0):
        super().__init__(20)
        self.payloads.svl_next_macro_action = npl_svl_next_macro_static_table_svl_next_macro_action_payload_t(ipc_trap, protocol_trap, pl_inc, macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_svl_next_macro_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(12, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 12, 8, int, value)
    @property
    def payloads(self):
        return npl_svl_next_macro_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 12, npl_svl_next_macro_static_table_payloads_t, value)



# API-s for table: tcam_mapping_compound_table

NPL_TCAM_MAPPING_COMPOUND_TABLE_ACTION_TCAM_SERVICE_MAPPING = 0x0

class npl_tcam_mapping_compound_table_tcam_service_mapping_payload_t(basic_npl_struct):
    def __init__(self, relay_and_l3_lp_attr=0, lp=0, termination=0):
        super().__init__(337)
        self.relay_and_l3_lp_attr = relay_and_l3_lp_attr
        self.lp = lp
        self.termination = termination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tcam_mapping_compound_table_tcam_service_mapping_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def relay_and_l3_lp_attr(self):
        return npl_l2_relay_and_l3_lp_attributes_payload_t._get_as_sub_field(self._data, self._offset_in_data + 280)
    @relay_and_l3_lp_attr.setter
    def relay_and_l3_lp_attr(self, value):
        self._set_field_value('field relay_and_l3_lp_attr', 280, 57, npl_l2_relay_and_l3_lp_attributes_payload_t, value)
    @property
    def lp(self):
        return npl_mac_lp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 120)
    @lp.setter
    def lp(self, value):
        self._set_field_value('field lp', 120, 160, npl_mac_lp_attributes_t, value)
    @property
    def termination(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination.setter
    def termination(self, value):
        self._set_field_value('field termination', 0, 120, npl_base_l3_lp_attr_union_t, value)




class npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_compound_termination_control=0, mac_af_local_vars_service_mapping_logical_db=0, pd_layer_vars_local_slp_id=0, mac_af_local_vars_mac_termination_logical_db=0, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_32_0_=0):
        super().__init__(94)
        self.mac_relay_local_vars_mac_da_compound_termination_control = mac_relay_local_vars_mac_da_compound_termination_control
        self.mac_af_local_vars_service_mapping_logical_db = mac_af_local_vars_service_mapping_logical_db
        self.pd_layer_vars_local_slp_id = pd_layer_vars_local_slp_id
        self.mac_af_local_vars_mac_termination_logical_db = mac_af_local_vars_mac_termination_logical_db
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_32_0_ = packet_ethernet_header_da_32_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_SM_TCAM_CONTROLS_LSB_CONST_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def mac_relay_local_vars_mac_da_compound_termination_control(self):
        return npl_compound_termination_control_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @mac_relay_local_vars_mac_da_compound_termination_control.setter
    def mac_relay_local_vars_mac_da_compound_termination_control(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_compound_termination_control', 2, 2, npl_compound_termination_control_t, value)
    @property
    def mac_af_local_vars_service_mapping_logical_db(self):
        return self._get_field_value(4, 4)
    @mac_af_local_vars_service_mapping_logical_db.setter
    def mac_af_local_vars_service_mapping_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_service_mapping_logical_db', 4, 4, int, value)
    @property
    def pd_layer_vars_local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @pd_layer_vars_local_slp_id.setter
    def pd_layer_vars_local_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id', 8, 16, npl_lp_id_t, value)
    @property
    def const2_30d0_exact_0x0(self):
        return self._get_field_value(24, 30)
    @property
    def mac_af_local_vars_mac_termination_logical_db(self):
        return self._get_field_value(54, 2)
    @mac_af_local_vars_mac_termination_logical_db.setter
    def mac_af_local_vars_mac_termination_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_mac_termination_logical_db', 54, 2, int, value)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(56, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 56, 5, int, value)
    @property
    def packet_ethernet_header_da_32_0_(self):
        return self._get_field_value(61, 33)
    @packet_ethernet_header_da_32_0_.setter
    def packet_ethernet_header_da_32_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_32_0_', 61, 33, int, value)



class npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_compound_termination_control=0, mac_af_local_vars_service_mapping_logical_db=0, pd_layer_vars_local_slp_id=0, packet_header_1__vlan_tag_vid=0, mac_af_local_vars_mac_termination_logical_db=0, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_32_0_=0):
        super().__init__(94)
        self.mac_relay_local_vars_mac_da_compound_termination_control = mac_relay_local_vars_mac_da_compound_termination_control
        self.mac_af_local_vars_service_mapping_logical_db = mac_af_local_vars_service_mapping_logical_db
        self.pd_layer_vars_local_slp_id = pd_layer_vars_local_slp_id
        self.packet_header_1__vlan_tag_vid = packet_header_1__vlan_tag_vid
        self.mac_af_local_vars_mac_termination_logical_db = mac_af_local_vars_mac_termination_logical_db
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_32_0_ = packet_ethernet_header_da_32_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_SM_TCAM_CONTROLS_LSB_CONST_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def mac_relay_local_vars_mac_da_compound_termination_control(self):
        return npl_compound_termination_control_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @mac_relay_local_vars_mac_da_compound_termination_control.setter
    def mac_relay_local_vars_mac_da_compound_termination_control(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_compound_termination_control', 2, 2, npl_compound_termination_control_t, value)
    @property
    def mac_af_local_vars_service_mapping_logical_db(self):
        return self._get_field_value(4, 4)
    @mac_af_local_vars_service_mapping_logical_db.setter
    def mac_af_local_vars_service_mapping_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_service_mapping_logical_db', 4, 4, int, value)
    @property
    def pd_layer_vars_local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @pd_layer_vars_local_slp_id.setter
    def pd_layer_vars_local_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id', 8, 16, npl_lp_id_t, value)
    @property
    def packet_header_1__vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 24)
    @packet_header_1__vlan_tag_vid.setter
    def packet_header_1__vlan_tag_vid(self, value):
        self._set_field_value('field packet_header_1__vlan_tag_vid', 24, 12, npl_vlan_id_t, value)
    @property
    def const2_18d0_exact_0x0(self):
        return self._get_field_value(36, 18)
    @property
    def mac_af_local_vars_mac_termination_logical_db(self):
        return self._get_field_value(54, 2)
    @mac_af_local_vars_mac_termination_logical_db.setter
    def mac_af_local_vars_mac_termination_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_mac_termination_logical_db', 54, 2, int, value)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(56, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 56, 5, int, value)
    @property
    def packet_ethernet_header_da_32_0_(self):
        return self._get_field_value(61, 33)
    @packet_ethernet_header_da_32_0_.setter
    def packet_ethernet_header_da_32_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_32_0_', 61, 33, int, value)



class npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_tag_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_compound_termination_control=0, mac_af_local_vars_service_mapping_logical_db=0, pd_layer_vars_local_slp_id=0, packet_header_1__vlan_tag_vid=0, packet_header_2__vlan_tag_vid=0, mac_af_local_vars_mac_termination_logical_db=0, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_32_0_=0):
        super().__init__(94)
        self.mac_relay_local_vars_mac_da_compound_termination_control = mac_relay_local_vars_mac_da_compound_termination_control
        self.mac_af_local_vars_service_mapping_logical_db = mac_af_local_vars_service_mapping_logical_db
        self.pd_layer_vars_local_slp_id = pd_layer_vars_local_slp_id
        self.packet_header_1__vlan_tag_vid = packet_header_1__vlan_tag_vid
        self.packet_header_2__vlan_tag_vid = packet_header_2__vlan_tag_vid
        self.mac_af_local_vars_mac_termination_logical_db = mac_af_local_vars_mac_termination_logical_db
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_32_0_ = packet_ethernet_header_da_32_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_tag_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_SM_TCAM_CONTROLS_LSB_CONST_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def mac_relay_local_vars_mac_da_compound_termination_control(self):
        return npl_compound_termination_control_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @mac_relay_local_vars_mac_da_compound_termination_control.setter
    def mac_relay_local_vars_mac_da_compound_termination_control(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_compound_termination_control', 2, 2, npl_compound_termination_control_t, value)
    @property
    def mac_af_local_vars_service_mapping_logical_db(self):
        return self._get_field_value(4, 4)
    @mac_af_local_vars_service_mapping_logical_db.setter
    def mac_af_local_vars_service_mapping_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_service_mapping_logical_db', 4, 4, int, value)
    @property
    def pd_layer_vars_local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @pd_layer_vars_local_slp_id.setter
    def pd_layer_vars_local_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id', 8, 16, npl_lp_id_t, value)
    @property
    def packet_header_1__vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 24)
    @packet_header_1__vlan_tag_vid.setter
    def packet_header_1__vlan_tag_vid(self, value):
        self._set_field_value('field packet_header_1__vlan_tag_vid', 24, 12, npl_vlan_id_t, value)
    @property
    def packet_header_2__vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 36)
    @packet_header_2__vlan_tag_vid.setter
    def packet_header_2__vlan_tag_vid(self, value):
        self._set_field_value('field packet_header_2__vlan_tag_vid', 36, 12, npl_vlan_id_t, value)
    @property
    def const2_6d0_exact_0x0(self):
        return self._get_field_value(48, 6)
    @property
    def mac_af_local_vars_mac_termination_logical_db(self):
        return self._get_field_value(54, 2)
    @mac_af_local_vars_mac_termination_logical_db.setter
    def mac_af_local_vars_mac_termination_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_mac_termination_logical_db', 54, 2, int, value)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(56, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 56, 5, int, value)
    @property
    def packet_ethernet_header_da_32_0_(self):
        return self._get_field_value(61, 33)
    @packet_ethernet_header_da_32_0_.setter
    def packet_ethernet_header_da_32_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_32_0_', 61, 33, int, value)



class npl_tcam_mapping_compound_table_key_option_service_mapping_selector_pwe_tag_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_compound_termination_control=0, mac_af_local_vars_service_mapping_logical_db=0, pd_layer_vars_local_slp_id=0, packet_header_1__vlan_tag_vid=0, mac_af_local_vars_mac_termination_logical_db=0, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_32_0_=0):
        super().__init__(94)
        self.mac_relay_local_vars_mac_da_compound_termination_control = mac_relay_local_vars_mac_da_compound_termination_control
        self.mac_af_local_vars_service_mapping_logical_db = mac_af_local_vars_service_mapping_logical_db
        self.pd_layer_vars_local_slp_id = pd_layer_vars_local_slp_id
        self.packet_header_1__vlan_tag_vid = packet_header_1__vlan_tag_vid
        self.mac_af_local_vars_mac_termination_logical_db = mac_af_local_vars_mac_termination_logical_db
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_32_0_ = packet_ethernet_header_da_32_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tcam_mapping_compound_table_key_option_service_mapping_selector_pwe_tag_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_SM_TCAM_CONTROLS_LSB_CONST_exact_0x3(self):
        return self._get_field_value(0, 2)
    @property
    def mac_relay_local_vars_mac_da_compound_termination_control(self):
        return npl_compound_termination_control_t._get_as_sub_field(self._data, self._offset_in_data + 2)
    @mac_relay_local_vars_mac_da_compound_termination_control.setter
    def mac_relay_local_vars_mac_da_compound_termination_control(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_compound_termination_control', 2, 2, npl_compound_termination_control_t, value)
    @property
    def mac_af_local_vars_service_mapping_logical_db(self):
        return self._get_field_value(4, 4)
    @mac_af_local_vars_service_mapping_logical_db.setter
    def mac_af_local_vars_service_mapping_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_service_mapping_logical_db', 4, 4, int, value)
    @property
    def pd_layer_vars_local_slp_id(self):
        return npl_lp_id_t._get_as_sub_field(self._data, self._offset_in_data + 8)
    @pd_layer_vars_local_slp_id.setter
    def pd_layer_vars_local_slp_id(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id', 8, 16, npl_lp_id_t, value)
    @property
    def packet_header_1__vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 24)
    @packet_header_1__vlan_tag_vid.setter
    def packet_header_1__vlan_tag_vid(self, value):
        self._set_field_value('field packet_header_1__vlan_tag_vid', 24, 12, npl_vlan_id_t, value)
    @property
    def const2_18d0_exact_0x0(self):
        return self._get_field_value(36, 18)
    @property
    def mac_af_local_vars_mac_termination_logical_db(self):
        return self._get_field_value(54, 2)
    @mac_af_local_vars_mac_termination_logical_db.setter
    def mac_af_local_vars_mac_termination_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_mac_termination_logical_db', 54, 2, int, value)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(56, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 56, 5, int, value)
    @property
    def packet_ethernet_header_da_32_0_(self):
        return self._get_field_value(61, 33)
    @packet_ethernet_header_da_32_0_.setter
    def packet_ethernet_header_da_32_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_32_0_', 61, 33, int, value)




class tcam_mapping_compound_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(94 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = tcam_mapping_compound_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT(self):
        return npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_SERVICE_MAPPING_SELECTOR_AC_PORT.setter
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT(self, value):
        self._set_field_value('field NPL_SERVICE_MAPPING_SELECTOR_AC_PORT', 0, 94, npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_t, value)
    @property
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG(self):
        return npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG.setter
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG(self, value):
        self._set_field_value('field NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG', 0, 94, npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_t, value)
    @property
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG(self):
        return npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_tag_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG.setter
    def NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG(self, value):
        self._set_field_value('field NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG', 0, 94, npl_tcam_mapping_compound_table_key_option_service_mapping_selector_ac_port_tag_tag_t, value)
    @property
    def NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG(self):
        return npl_tcam_mapping_compound_table_key_option_service_mapping_selector_pwe_tag_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG.setter
    def NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG(self, value):
        self._set_field_value('field NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG', 0, 94, npl_tcam_mapping_compound_table_key_option_service_mapping_selector_pwe_tag_t, value)

class npl_tcam_mapping_compound_table_key_t(basic_npl_struct):
    def __init__(self, mac_af_local_vars_service_mapping_selector=0):
        super().__init__(94)
        self.mac_af_local_vars_service_mapping_selector = mac_af_local_vars_service_mapping_selector

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tcam_mapping_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _mac_af_local_vars_service_mapping_selector = 0
    @property
    def mac_af_local_vars_service_mapping_selector(self):
        return self._mac_af_local_vars_service_mapping_selector
    @mac_af_local_vars_service_mapping_selector.setter
    def mac_af_local_vars_service_mapping_selector(self, value):
        self._mac_af_local_vars_service_mapping_selector = value
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT:
            self._set_field_value('const field', 0, 2, int, 0x3)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT:
            self._set_field_value('const field', 24, 30, int, 0x0)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG:
            self._set_field_value('const field', 0, 2, int, 0x3)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG:
            self._set_field_value('const field', 36, 18, int, 0x0)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG:
            self._set_field_value('const field', 0, 2, int, 0x3)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_AC_PORT_TAG_TAG:
            self._set_field_value('const field', 48, 6, int, 0x0)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG:
            self._set_field_value('const field', 0, 2, int, 0x3)
        if mac_af_local_vars_service_mapping_selector == NPL_SERVICE_MAPPING_SELECTOR_PWE_TAG:
            self._set_field_value('const field', 36, 18, int, 0x0)

    @property
    def options(self):
        return tcam_mapping_compound_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 94 - 0, tcam_mapping_compound_table_key_options_t, value)

class npl_tcam_mapping_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(337)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tcam_mapping_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tcam_service_mapping(self):
        return npl_tcam_mapping_compound_table_tcam_service_mapping_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tcam_service_mapping.setter
    def tcam_service_mapping(self, value):
        self._set_field_value('field tcam_service_mapping', 0, 337, npl_tcam_mapping_compound_table_tcam_service_mapping_payload_t, value)

class npl_tcam_mapping_compound_table_value_t(basic_npl_struct):
    def __init__(self, relay_and_l3_lp_attr=0, lp=0, termination=0):
        super().__init__(345)
        self.payloads.tcam_service_mapping = npl_tcam_mapping_compound_table_tcam_service_mapping_payload_t(relay_and_l3_lp_attr, lp, termination)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_tcam_mapping_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(337, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 337, 8, int, value)
    @property
    def payloads(self):
        return npl_tcam_mapping_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 337, npl_tcam_mapping_compound_table_payloads_t, value)



# API-s for table: te_headend_lsp_counter_offset_table

NPL_TE_HEADEND_LSP_COUNTER_OFFSET_TABLE_ACTION_OFFSETS = 0x0

class npl_te_headend_lsp_counter_offset_table_offsets_payload_t(basic_npl_struct):
    def __init__(self, lsp_counter_offset=0, php_counter_offset=0):
        super().__init__(6)
        self.lsp_counter_offset = lsp_counter_offset
        self.php_counter_offset = php_counter_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_te_headend_lsp_counter_offset_table_offsets_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def lsp_counter_offset(self):
        return npl_common_cntr_offset_and_padding_t._get_as_sub_field(self._data, self._offset_in_data + 3)
    @lsp_counter_offset.setter
    def lsp_counter_offset(self, value):
        self._set_field_value('field lsp_counter_offset', 3, 3, npl_common_cntr_offset_and_padding_t, value)
    @property
    def php_counter_offset(self):
        return npl_common_cntr_offset_and_padding_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @php_counter_offset.setter
    def php_counter_offset(self, value):
        self._set_field_value('field php_counter_offset', 0, 3, npl_common_cntr_offset_and_padding_t, value)




class npl_te_headend_lsp_counter_offset_table_key_t(basic_npl_struct):
    def __init__(self, l3_encap_type=0, fwd_header_type=0, is_mc=0):
        super().__init__(9)
        self.l3_encap_type = l3_encap_type
        self.fwd_header_type = fwd_header_type
        self.is_mc = is_mc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_te_headend_lsp_counter_offset_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_encap_type(self):
        return self._get_field_value(0, 4)
    @l3_encap_type.setter
    def l3_encap_type(self, value):
        self._set_field_value('field l3_encap_type', 0, 4, int, value)
    @property
    def fwd_header_type(self):
        return self._get_field_value(4, 4)
    @fwd_header_type.setter
    def fwd_header_type(self, value):
        self._set_field_value('field fwd_header_type', 4, 4, int, value)
    @property
    def is_mc(self):
        return self._get_field_value(8, 1)
    @is_mc.setter
    def is_mc(self, value):
        self._set_field_value('field is_mc', 8, 1, int, value)

class npl_te_headend_lsp_counter_offset_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_te_headend_lsp_counter_offset_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def offsets(self):
        return npl_te_headend_lsp_counter_offset_table_offsets_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @offsets.setter
    def offsets(self, value):
        self._set_field_value('field offsets', 0, 6, npl_te_headend_lsp_counter_offset_table_offsets_payload_t, value)

class npl_te_headend_lsp_counter_offset_table_value_t(basic_npl_struct):
    def __init__(self, lsp_counter_offset=0, php_counter_offset=0):
        super().__init__(14)
        self.payloads.offsets = npl_te_headend_lsp_counter_offset_table_offsets_payload_t(lsp_counter_offset, php_counter_offset)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_te_headend_lsp_counter_offset_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_te_headend_lsp_counter_offset_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_te_headend_lsp_counter_offset_table_payloads_t, value)



# API-s for table: termination_to_forwarding_fi_hardwired_table

NPL_TERMINATION_TO_FORWARDING_FI_HARDWIRED_TABLE_ACTION_WRITE = 0x0

class npl_termination_to_forwarding_fi_hardwired_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_current__header_0__header_info_type=0):
        super().__init__(5)
        self.packet_protocol_layer_current__header_0__header_info_type = packet_protocol_layer_current__header_0__header_info_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_termination_to_forwarding_fi_hardwired_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_current__header_0__header_info_type(self):
        return self._get_field_value(0, 5)
    @packet_protocol_layer_current__header_0__header_info_type.setter
    def packet_protocol_layer_current__header_0__header_info_type(self, value):
        self._set_field_value('field packet_protocol_layer_current__header_0__header_info_type', 0, 5, int, value)

class npl_termination_to_forwarding_fi_hardwired_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(2)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_termination_to_forwarding_fi_hardwired_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def termination_to_forwarding_fields_fi_hardwired_type(self):
        return self._get_field_value(0, 2)
    @termination_to_forwarding_fields_fi_hardwired_type.setter
    def termination_to_forwarding_fields_fi_hardwired_type(self, value):
        self._set_field_value('field termination_to_forwarding_fields_fi_hardwired_type', 0, 2, int, value)

class npl_termination_to_forwarding_fi_hardwired_table_value_t(basic_npl_struct):
    def __init__(self, termination_to_forwarding_fields_fi_hardwired_type=0):
        super().__init__(10)
        self.payloads.termination_to_forwarding_fields_fi_hardwired_type = termination_to_forwarding_fields_fi_hardwired_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_termination_to_forwarding_fi_hardwired_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(2, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 2, 8, int, value)
    @property
    def payloads(self):
        return npl_termination_to_forwarding_fi_hardwired_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 2, npl_termination_to_forwarding_fi_hardwired_table_payloads_t, value)



# API-s for table: tm_header_destination_pack_table

NPL_TM_HEADER_DESTINATION_PACK_TABLE_ACTION_WRITE = 0x0

class npl_tm_header_destination_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_slice=0, packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_oq=0):
        super().__init__(20)
        self.packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_slice = packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_slice
        self.packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_oq = packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_oq

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_destination_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_slice(self):
        return self._get_field_value(0, 3)
    @packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_slice.setter
    def packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_slice(self, value):
        self._set_field_value('field packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_slice', 0, 3, int, value)
    @property
    def packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_oq(self):
        return self._get_field_value(3, 9)
    @packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_oq.setter
    def packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_oq(self, value):
        self._set_field_value('field packet_protocol_layer_0__header_1__unicast_plb_tm_header_destination_oq', 3, 9, int, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(12, 1)
    @property
    def const2_TM_DESTINATION_DOQ_AND_DS_PREFIX_exact_0x6c(self):
        return self._get_field_value(13, 7)



class npl_tm_header_destination_pack_table_key_option_tm_header_type_unicast_flb_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp=0):
        super().__init__(20)
        self.packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp = packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_destination_pack_table_key_option_tm_header_type_unicast_flb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp(self):
        return self._get_field_value(0, 13)
    @packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp.setter
    def packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp(self, value):
        self._set_field_value('field packet_protocol_layer_0__header_1__unicast_flb_tm_header_dsp', 0, 13, int, value)
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(13, 1)
    @property
    def const2_TM_DESTINATION_DSP_PREFIX_exact_0x34(self):
        return self._get_field_value(14, 6)



class npl_tm_header_destination_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t(basic_npl_struct):
    def __init__(self, device_tm_hdr_mmm_multicast_id=0):
        super().__init__(20)
        self.device_tm_hdr_mmm_multicast_id = device_tm_hdr_mmm_multicast_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_destination_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def device_tm_hdr_mmm_multicast_id(self):
        return self._get_field_value(0, 16)
    @device_tm_hdr_mmm_multicast_id.setter
    def device_tm_hdr_mmm_multicast_id(self, value):
        self._set_field_value('field device_tm_hdr_mmm_multicast_id', 0, 16, int, value)
    @property
    def const1_TM_DESTINATION_MCID_PREFIX_exact_0xf(self):
        return self._get_field_value(16, 4)



class npl_tm_header_destination_pack_table_key_option_tm_header_type_mum_plb_t(basic_npl_struct):
    def __init__(self, device_tm_hdr_mum_multicast_id=0):
        super().__init__(20)
        self.device_tm_hdr_mum_multicast_id = device_tm_hdr_mum_multicast_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_destination_pack_table_key_option_tm_header_type_mum_plb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def device_tm_hdr_mum_multicast_id(self):
        return self._get_field_value(0, 16)
    @device_tm_hdr_mum_multicast_id.setter
    def device_tm_hdr_mum_multicast_id(self, value):
        self._set_field_value('field device_tm_hdr_mum_multicast_id', 0, 16, int, value)
    @property
    def const1_TM_DESTINATION_MCID_PREFIX_exact_0xf(self):
        return self._get_field_value(16, 4)




class tm_header_destination_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = tm_header_destination_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB(self):
        return npl_tm_header_destination_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB.setter
    def NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB', 0, 20, npl_tm_header_destination_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t, value)
    @property
    def NPL_TM_HEADER_TYPE_UNICAST_FLB(self):
        return npl_tm_header_destination_pack_table_key_option_tm_header_type_unicast_flb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_UNICAST_FLB.setter
    def NPL_TM_HEADER_TYPE_UNICAST_FLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_UNICAST_FLB', 0, 20, npl_tm_header_destination_pack_table_key_option_tm_header_type_unicast_flb_t, value)
    @property
    def NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB(self):
        return npl_tm_header_destination_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB.setter
    def NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB', 0, 20, npl_tm_header_destination_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t, value)
    @property
    def NPL_TM_HEADER_TYPE_MUM_PLB(self):
        return npl_tm_header_destination_pack_table_key_option_tm_header_type_mum_plb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_MUM_PLB.setter
    def NPL_TM_HEADER_TYPE_MUM_PLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_MUM_PLB', 0, 20, npl_tm_header_destination_pack_table_key_option_tm_header_type_mum_plb_t, value)

class npl_tm_header_destination_pack_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_0__header_1__tm_header_base_hdr_type=0):
        super().__init__(20)
        self.packet_protocol_layer_0__header_1__tm_header_base_hdr_type = packet_protocol_layer_0__header_1__tm_header_base_hdr_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_destination_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _packet_protocol_layer_0__header_1__tm_header_base_hdr_type = 0
    @property
    def packet_protocol_layer_0__header_1__tm_header_base_hdr_type(self):
        return self._packet_protocol_layer_0__header_1__tm_header_base_hdr_type
    @packet_protocol_layer_0__header_1__tm_header_base_hdr_type.setter
    def packet_protocol_layer_0__header_1__tm_header_base_hdr_type(self, value):
        self._packet_protocol_layer_0__header_1__tm_header_base_hdr_type = value
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB:
            self._set_field_value('const field', 12, 1, int, 0x0)
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB:
            self._set_field_value('const field', 13, 7, int, 0x6c)
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_UNICAST_FLB:
            self._set_field_value('const field', 13, 1, int, 0x0)
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_UNICAST_FLB:
            self._set_field_value('const field', 14, 6, int, 0x34)
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB:
            self._set_field_value('const field', 16, 4, int, 0xf)
        if packet_protocol_layer_0__header_1__tm_header_base_hdr_type == NPL_TM_HEADER_TYPE_MUM_PLB:
            self._set_field_value('const field', 16, 4, int, 0xf)

    @property
    def options(self):
        return tm_header_destination_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 20 - 0, tm_header_destination_pack_table_key_options_t, value)

class npl_tm_header_destination_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_destination_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_destination(self):
        return self._get_field_value(0, 20)
    @pd_destination.setter
    def pd_destination(self, value):
        self._set_field_value('field pd_destination', 0, 20, int, value)

class npl_tm_header_destination_pack_table_value_t(basic_npl_struct):
    def __init__(self, pd_destination=0):
        super().__init__(28)
        self.payloads.pd_destination = pd_destination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_destination_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_tm_header_destination_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_tm_header_destination_pack_table_payloads_t, value)



# API-s for table: tm_header_pack_table

NPL_TM_HEADER_PACK_TABLE_ACTION_WRITE = 0x0

class npl_tm_header_pack_table_key_option_tm_header_type_unicast_flb_t(basic_npl_struct):
    def __init__(self, device_tx_cud_12_0_=0, fabric_tx_local_vars_dp_5_4_=0, device_tx_traffic_class=0, is_cong_on=0, fabric_tx_local_vars_tm_header_type=0):
        super().__init__(24)
        self.device_tx_cud_12_0_ = device_tx_cud_12_0_
        self.fabric_tx_local_vars_dp_5_4_ = fabric_tx_local_vars_dp_5_4_
        self.device_tx_traffic_class = device_tx_traffic_class
        self.is_cong_on = is_cong_on
        self.fabric_tx_local_vars_tm_header_type = fabric_tx_local_vars_tm_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_pack_table_key_option_tm_header_type_unicast_flb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def device_tx_cud_12_0_(self):
        return self._get_field_value(0, 13)
    @device_tx_cud_12_0_.setter
    def device_tx_cud_12_0_(self, value):
        self._set_field_value('field device_tx_cud_12_0_', 0, 13, int, value)
    @property
    def const1_3b0_exact_0x0(self):
        return self._get_field_value(13, 3)
    @property
    def fabric_tx_local_vars_dp_5_4_(self):
        return self._get_field_value(16, 2)
    @fabric_tx_local_vars_dp_5_4_.setter
    def fabric_tx_local_vars_dp_5_4_(self, value):
        self._set_field_value('field fabric_tx_local_vars_dp_5_4_', 16, 2, int, value)
    @property
    def device_tx_traffic_class(self):
        return self._get_field_value(18, 3)
    @device_tx_traffic_class.setter
    def device_tx_traffic_class(self, value):
        self._set_field_value('field device_tx_traffic_class', 18, 3, int, value)
    @property
    def is_cong_on(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 21)
    @is_cong_on.setter
    def is_cong_on(self, value):
        self._set_field_value('field is_cong_on', 21, 1, npl_bool_t, value)
    @property
    def fabric_tx_local_vars_tm_header_type(self):
        return self._get_field_value(22, 2)
    @fabric_tx_local_vars_tm_header_type.setter
    def fabric_tx_local_vars_tm_header_type(self, value):
        self._set_field_value('field fabric_tx_local_vars_tm_header_type', 22, 2, int, value)



class npl_tm_header_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t(basic_npl_struct):
    def __init__(self, device_fabric_vmd_8_0_=0, device_fabric_vmd_20_9_=0, fabric_tx_local_vars_dp_5_4_=0, device_tx_traffic_class=0, is_cong_on=0, fabric_tx_local_vars_tm_header_type=0):
        super().__init__(32)
        self.device_fabric_vmd_8_0_ = device_fabric_vmd_8_0_
        self.device_fabric_vmd_20_9_ = device_fabric_vmd_20_9_
        self.fabric_tx_local_vars_dp_5_4_ = fabric_tx_local_vars_dp_5_4_
        self.device_tx_traffic_class = device_tx_traffic_class
        self.is_cong_on = is_cong_on
        self.fabric_tx_local_vars_tm_header_type = fabric_tx_local_vars_tm_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def device_fabric_vmd_8_0_(self):
        return self._get_field_value(0, 9)
    @device_fabric_vmd_8_0_.setter
    def device_fabric_vmd_8_0_(self, value):
        self._set_field_value('field device_fabric_vmd_8_0_', 0, 9, int, value)
    @property
    def device_fabric_vmd_20_9_(self):
        return self._get_field_value(9, 12)
    @device_fabric_vmd_20_9_.setter
    def device_fabric_vmd_20_9_(self, value):
        self._set_field_value('field device_fabric_vmd_20_9_', 9, 12, int, value)
    @property
    def const1_3d0_exact_0x0(self):
        return self._get_field_value(21, 3)
    @property
    def fabric_tx_local_vars_dp_5_4_(self):
        return self._get_field_value(24, 2)
    @fabric_tx_local_vars_dp_5_4_.setter
    def fabric_tx_local_vars_dp_5_4_(self, value):
        self._set_field_value('field fabric_tx_local_vars_dp_5_4_', 24, 2, int, value)
    @property
    def device_tx_traffic_class(self):
        return self._get_field_value(26, 3)
    @device_tx_traffic_class.setter
    def device_tx_traffic_class(self, value):
        self._set_field_value('field device_tx_traffic_class', 26, 3, int, value)
    @property
    def is_cong_on(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 29)
    @is_cong_on.setter
    def is_cong_on(self, value):
        self._set_field_value('field is_cong_on', 29, 1, npl_bool_t, value)
    @property
    def fabric_tx_local_vars_tm_header_type(self):
        return self._get_field_value(30, 2)
    @fabric_tx_local_vars_tm_header_type.setter
    def fabric_tx_local_vars_tm_header_type(self, value):
        self._set_field_value('field fabric_tx_local_vars_tm_header_type', 30, 2, int, value)



class npl_tm_header_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t(basic_npl_struct):
    def __init__(self, device_tx_cud_15_0_=0, fabric_tx_local_vars_dp_5_4_=0, device_tx_traffic_class=0, is_cong_on=0, fabric_tx_local_vars_tm_header_type=0):
        super().__init__(24)
        self.device_tx_cud_15_0_ = device_tx_cud_15_0_
        self.fabric_tx_local_vars_dp_5_4_ = fabric_tx_local_vars_dp_5_4_
        self.device_tx_traffic_class = device_tx_traffic_class
        self.is_cong_on = is_cong_on
        self.fabric_tx_local_vars_tm_header_type = fabric_tx_local_vars_tm_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def device_tx_cud_15_0_(self):
        return self._get_field_value(0, 16)
    @device_tx_cud_15_0_.setter
    def device_tx_cud_15_0_(self, value):
        self._set_field_value('field device_tx_cud_15_0_', 0, 16, int, value)
    @property
    def fabric_tx_local_vars_dp_5_4_(self):
        return self._get_field_value(16, 2)
    @fabric_tx_local_vars_dp_5_4_.setter
    def fabric_tx_local_vars_dp_5_4_(self, value):
        self._set_field_value('field fabric_tx_local_vars_dp_5_4_', 16, 2, int, value)
    @property
    def device_tx_traffic_class(self):
        return self._get_field_value(18, 3)
    @device_tx_traffic_class.setter
    def device_tx_traffic_class(self, value):
        self._set_field_value('field device_tx_traffic_class', 18, 3, int, value)
    @property
    def is_cong_on(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 21)
    @is_cong_on.setter
    def is_cong_on(self, value):
        self._set_field_value('field is_cong_on', 21, 1, npl_bool_t, value)
    @property
    def fabric_tx_local_vars_tm_header_type(self):
        return self._get_field_value(22, 2)
    @fabric_tx_local_vars_tm_header_type.setter
    def fabric_tx_local_vars_tm_header_type(self, value):
        self._set_field_value('field fabric_tx_local_vars_tm_header_type', 22, 2, int, value)



class npl_tm_header_pack_table_key_option_tm_header_type_mum_plb_t(basic_npl_struct):
    def __init__(self, device_tx_cud_15_0_=0, fabric_tx_local_vars_txrq=0, device_fabric_vmd_20_9_=0, fabric_tx_local_vars_dp_5_4_=0, device_tx_traffic_class=0, is_cong_on=0, fabric_tx_local_vars_tm_header_type=0):
        super().__init__(40)
        self.device_tx_cud_15_0_ = device_tx_cud_15_0_
        self.fabric_tx_local_vars_txrq = fabric_tx_local_vars_txrq
        self.device_fabric_vmd_20_9_ = device_fabric_vmd_20_9_
        self.fabric_tx_local_vars_dp_5_4_ = fabric_tx_local_vars_dp_5_4_
        self.device_tx_traffic_class = device_tx_traffic_class
        self.is_cong_on = is_cong_on
        self.fabric_tx_local_vars_tm_header_type = fabric_tx_local_vars_tm_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_pack_table_key_option_tm_header_type_mum_plb_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def device_tx_cud_15_0_(self):
        return self._get_field_value(0, 16)
    @device_tx_cud_15_0_.setter
    def device_tx_cud_15_0_(self, value):
        self._set_field_value('field device_tx_cud_15_0_', 0, 16, int, value)
    @property
    def fabric_tx_local_vars_txrq(self):
        return self._get_field_value(16, 1)
    @fabric_tx_local_vars_txrq.setter
    def fabric_tx_local_vars_txrq(self, value):
        self._set_field_value('field fabric_tx_local_vars_txrq', 16, 1, int, value)
    @property
    def device_fabric_vmd_20_9_(self):
        return self._get_field_value(17, 12)
    @device_fabric_vmd_20_9_.setter
    def device_fabric_vmd_20_9_(self, value):
        self._set_field_value('field device_fabric_vmd_20_9_', 17, 12, int, value)
    @property
    def const1_3b0_exact_0x0(self):
        return self._get_field_value(29, 3)
    @property
    def fabric_tx_local_vars_dp_5_4_(self):
        return self._get_field_value(32, 2)
    @fabric_tx_local_vars_dp_5_4_.setter
    def fabric_tx_local_vars_dp_5_4_(self, value):
        self._set_field_value('field fabric_tx_local_vars_dp_5_4_', 32, 2, int, value)
    @property
    def device_tx_traffic_class(self):
        return self._get_field_value(34, 3)
    @device_tx_traffic_class.setter
    def device_tx_traffic_class(self, value):
        self._set_field_value('field device_tx_traffic_class', 34, 3, int, value)
    @property
    def is_cong_on(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 37)
    @is_cong_on.setter
    def is_cong_on(self, value):
        self._set_field_value('field is_cong_on', 37, 1, npl_bool_t, value)
    @property
    def fabric_tx_local_vars_tm_header_type(self):
        return self._get_field_value(38, 2)
    @fabric_tx_local_vars_tm_header_type.setter
    def fabric_tx_local_vars_tm_header_type(self, value):
        self._set_field_value('field fabric_tx_local_vars_tm_header_type', 38, 2, int, value)




class tm_header_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = tm_header_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_TM_HEADER_TYPE_UNICAST_FLB(self):
        return npl_tm_header_pack_table_key_option_tm_header_type_unicast_flb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_UNICAST_FLB.setter
    def NPL_TM_HEADER_TYPE_UNICAST_FLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_UNICAST_FLB', 0, 24, npl_tm_header_pack_table_key_option_tm_header_type_unicast_flb_t, value)
    @property
    def NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB(self):
        return npl_tm_header_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB.setter
    def NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB', 0, 32, npl_tm_header_pack_table_key_option_tm_header_type_unicast_or_muu_plb_t, value)
    @property
    def NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB(self):
        return npl_tm_header_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB.setter
    def NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_MMM_PLB_OR_FLB', 0, 24, npl_tm_header_pack_table_key_option_tm_header_type_mmm_plb_or_flb_t, value)
    @property
    def NPL_TM_HEADER_TYPE_MUM_PLB(self):
        return npl_tm_header_pack_table_key_option_tm_header_type_mum_plb_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_TM_HEADER_TYPE_MUM_PLB.setter
    def NPL_TM_HEADER_TYPE_MUM_PLB(self, value):
        self._set_field_value('field NPL_TM_HEADER_TYPE_MUM_PLB', 0, 40, npl_tm_header_pack_table_key_option_tm_header_type_mum_plb_t, value)

class npl_tm_header_pack_table_key_t(basic_npl_struct):
    def __init__(self, fabric_tx_local_vars_tm_header_type=0):
        super().__init__(40)
        self.fabric_tx_local_vars_tm_header_type = fabric_tx_local_vars_tm_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _fabric_tx_local_vars_tm_header_type = 0
    @property
    def fabric_tx_local_vars_tm_header_type(self):
        return self._fabric_tx_local_vars_tm_header_type
    @fabric_tx_local_vars_tm_header_type.setter
    def fabric_tx_local_vars_tm_header_type(self, value):
        self._fabric_tx_local_vars_tm_header_type = value
        if fabric_tx_local_vars_tm_header_type == NPL_TM_HEADER_TYPE_UNICAST_FLB:
            self._set_field_value('const field', 13, 3, int, 0x0)
        if fabric_tx_local_vars_tm_header_type == NPL_TM_HEADER_TYPE_UNICAST_OR_MUU_PLB:
            self._set_field_value('const field', 21, 3, int, 0x0)
        if fabric_tx_local_vars_tm_header_type == NPL_TM_HEADER_TYPE_MUM_PLB:
            self._set_field_value('const field', 29, 3, int, 0x0)

    @property
    def options(self):
        return tm_header_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 40 - 0, tm_header_pack_table_key_options_t, value)

class npl_tm_header_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(48)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_fabric_template_tm_header(self):
        return npl_tm_headers_template_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pd_fabric_template_tm_header.setter
    def pd_fabric_template_tm_header(self, value):
        self._set_field_value('field pd_fabric_template_tm_header', 0, 48, npl_tm_headers_template_t, value)

class npl_tm_header_pack_table_value_t(basic_npl_struct):
    def __init__(self, pd_fabric_template_tm_header=0):
        super().__init__(56)
        self.payloads.pd_fabric_template_tm_header = pd_fabric_template_tm_header

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_header_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(48, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 48, 8, int, value)
    @property
    def payloads(self):
        return npl_tm_header_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 48, npl_tm_header_pack_table_payloads_t, value)



# API-s for table: tm_ibm_cmd_to_destination

NPL_TM_IBM_CMD_TO_DESTINATION_ACTION_FOUND = 0x0

class npl_tm_ibm_cmd_to_destination_found_payload_t(basic_npl_struct):
    def __init__(self, dest_slice_id=0, dest_pif=0, dest_ifg=0):
        super().__init__(9)
        self.dest_slice_id = dest_slice_id
        self.dest_pif = dest_pif
        self.dest_ifg = dest_ifg

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_ibm_cmd_to_destination_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def dest_slice_id(self):
        return self._get_field_value(6, 3)
    @dest_slice_id.setter
    def dest_slice_id(self, value):
        self._set_field_value('field dest_slice_id', 6, 3, int, value)
    @property
    def dest_pif(self):
        return self._get_field_value(1, 5)
    @dest_pif.setter
    def dest_pif(self, value):
        self._set_field_value('field dest_pif', 1, 5, int, value)
    @property
    def dest_ifg(self):
        return self._get_field_value(0, 1)
    @dest_ifg.setter
    def dest_ifg(self, value):
        self._set_field_value('field dest_ifg', 0, 1, int, value)




class npl_tm_ibm_cmd_to_destination_key_t(basic_npl_struct):
    def __init__(self, rxpp_to_txpp_local_vars_mirror_command=0):
        super().__init__(5)
        self.rxpp_to_txpp_local_vars_mirror_command = rxpp_to_txpp_local_vars_mirror_command

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_ibm_cmd_to_destination_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_to_txpp_local_vars_mirror_command(self):
        return self._get_field_value(0, 5)
    @rxpp_to_txpp_local_vars_mirror_command.setter
    def rxpp_to_txpp_local_vars_mirror_command(self, value):
        self._set_field_value('field rxpp_to_txpp_local_vars_mirror_command', 0, 5, int, value)

class npl_tm_ibm_cmd_to_destination_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(9)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_ibm_cmd_to_destination_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def found(self):
        return npl_tm_ibm_cmd_to_destination_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @found.setter
    def found(self, value):
        self._set_field_value('field found', 0, 9, npl_tm_ibm_cmd_to_destination_found_payload_t, value)

class npl_tm_ibm_cmd_to_destination_value_t(basic_npl_struct):
    def __init__(self, dest_slice_id=0, dest_pif=0, dest_ifg=0):
        super().__init__(17)
        self.payloads.found = npl_tm_ibm_cmd_to_destination_found_payload_t(dest_slice_id, dest_pif, dest_ifg)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_tm_ibm_cmd_to_destination_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(9, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 9, 8, int, value)
    @property
    def payloads(self):
        return npl_tm_ibm_cmd_to_destination_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 9, npl_tm_ibm_cmd_to_destination_payloads_t, value)



# API-s for table: ts_cmd_hw_static_table

NPL_TS_CMD_HW_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_ts_cmd_hw_static_table_key_t(basic_npl_struct):
    def __init__(self, pd_tx_common_tx_leaba_fields_ts_command_op=0):
        super().__init__(4)
        self.pd_tx_common_tx_leaba_fields_ts_command_op = pd_tx_common_tx_leaba_fields_ts_command_op

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ts_cmd_hw_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_tx_common_tx_leaba_fields_ts_command_op(self):
        return self._get_field_value(0, 4)
    @pd_tx_common_tx_leaba_fields_ts_command_op.setter
    def pd_tx_common_tx_leaba_fields_ts_command_op(self, value):
        self._set_field_value('field pd_tx_common_tx_leaba_fields_ts_command_op', 0, 4, int, value)

class npl_ts_cmd_hw_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ts_cmd_hw_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ts_cmd_trans(self):
        return npl_ts_cmd_trans_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ts_cmd_trans.setter
    def ts_cmd_trans(self, value):
        self._set_field_value('field ts_cmd_trans', 0, 8, npl_ts_cmd_trans_t, value)

class npl_ts_cmd_hw_static_table_value_t(basic_npl_struct):
    def __init__(self, ts_cmd_trans=0):
        super().__init__(16)
        self.payloads.ts_cmd_trans = ts_cmd_trans

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ts_cmd_hw_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_ts_cmd_hw_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_ts_cmd_hw_static_table_payloads_t, value)



# API-s for table: ts_sn_plb_pack_table

NPL_TS_SN_PLB_PACK_TABLE_ACTION_WRITE = 0x0

class npl_ts_sn_plb_pack_table_key_option_plb_type_ts_t(basic_npl_struct):
    def __init__(self, fabric_tx_local_vars_source_slice=0, fabric_cfg_device=0):
        super().__init__(12)
        self.fabric_tx_local_vars_source_slice = fabric_tx_local_vars_source_slice
        self.fabric_cfg_device = fabric_cfg_device

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ts_sn_plb_pack_table_key_option_plb_type_ts_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def fabric_tx_local_vars_source_slice(self):
        return self._get_field_value(0, 3)
    @fabric_tx_local_vars_source_slice.setter
    def fabric_tx_local_vars_source_slice(self, value):
        self._set_field_value('field fabric_tx_local_vars_source_slice', 0, 3, int, value)
    @property
    def fabric_cfg_device(self):
        return self._get_field_value(3, 9)
    @fabric_cfg_device.setter
    def fabric_cfg_device(self, value):
        self._set_field_value('field fabric_cfg_device', 3, 9, int, value)



class npl_ts_sn_plb_pack_table_key_option_plb_type_sn_t(basic_npl_struct):
    def __init__(self, pd_tx_fabric_vmd_snr_demux=0, fabric_cfg_device_6_0_=0):
        super().__init__(40)
        self.pd_tx_fabric_vmd_snr_demux = pd_tx_fabric_vmd_snr_demux
        self.fabric_cfg_device_6_0_ = fabric_cfg_device_6_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ts_sn_plb_pack_table_key_option_plb_type_sn_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_9b0_exact_0x0(self):
        return self._get_field_value(0, 9)
    @property
    def const2_20b0_exact_0x0(self):
        return self._get_field_value(9, 20)
    @property
    def pd_tx_fabric_vmd_snr_demux(self):
        return self._get_field_value(29, 4)
    @pd_tx_fabric_vmd_snr_demux.setter
    def pd_tx_fabric_vmd_snr_demux(self, value):
        self._set_field_value('field pd_tx_fabric_vmd_snr_demux', 29, 4, int, value)
    @property
    def fabric_cfg_device_6_0_(self):
        return self._get_field_value(33, 7)
    @fabric_cfg_device_6_0_.setter
    def fabric_cfg_device_6_0_(self, value):
        self._set_field_value('field fabric_cfg_device_6_0_', 33, 7, int, value)




class ts_sn_plb_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = ts_sn_plb_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_PLB_TYPE_TS(self):
        return npl_ts_sn_plb_pack_table_key_option_plb_type_ts_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PLB_TYPE_TS.setter
    def NPL_PLB_TYPE_TS(self, value):
        self._set_field_value('field NPL_PLB_TYPE_TS', 0, 12, npl_ts_sn_plb_pack_table_key_option_plb_type_ts_t, value)
    @property
    def NPL_PLB_TYPE_SN(self):
        return npl_ts_sn_plb_pack_table_key_option_plb_type_sn_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_PLB_TYPE_SN.setter
    def NPL_PLB_TYPE_SN(self, value):
        self._set_field_value('field NPL_PLB_TYPE_SN', 0, 40, npl_ts_sn_plb_pack_table_key_option_plb_type_sn_t, value)

class npl_ts_sn_plb_pack_table_key_t(basic_npl_struct):
    def __init__(self, fabric_cfg_plb_type=0):
        super().__init__(40)
        self.fabric_cfg_plb_type = fabric_cfg_plb_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ts_sn_plb_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _fabric_cfg_plb_type = 0
    @property
    def fabric_cfg_plb_type(self):
        return self._fabric_cfg_plb_type
    @fabric_cfg_plb_type.setter
    def fabric_cfg_plb_type(self, value):
        self._fabric_cfg_plb_type = value
        if fabric_cfg_plb_type == NPL_PLB_TYPE_SN:
            self._set_field_value('const field', 0, 9, int, 0x0)
        if fabric_cfg_plb_type == NPL_PLB_TYPE_SN:
            self._set_field_value('const field', 9, 20, int, 0x0)

    @property
    def options(self):
        return ts_sn_plb_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 40 - 0, ts_sn_plb_pack_table_key_options_t, value)

class npl_ts_sn_plb_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ts_sn_plb_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fabric_tx_local_vars_ts_sn_plb_packed_value(self):
        return self._get_field_value(0, 44)
    @fabric_tx_local_vars_ts_sn_plb_packed_value.setter
    def fabric_tx_local_vars_ts_sn_plb_packed_value(self, value):
        self._set_field_value('field fabric_tx_local_vars_ts_sn_plb_packed_value', 0, 44, int, value)

class npl_ts_sn_plb_pack_table_value_t(basic_npl_struct):
    def __init__(self, fabric_tx_local_vars_ts_sn_plb_packed_value=0):
        super().__init__(52)
        self.payloads.fabric_tx_local_vars_ts_sn_plb_packed_value = fabric_tx_local_vars_ts_sn_plb_packed_value

    def _get_as_sub_field(data, offset_in_data):
        result = npl_ts_sn_plb_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_ts_sn_plb_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_ts_sn_plb_pack_table_payloads_t, value)



# API-s for table: tunnel_dlp_p_counter_offset_table

NPL_TUNNEL_DLP_P_COUNTER_OFFSET_TABLE_ACTION_WRITE = 0x0

class npl_tunnel_dlp_p_counter_offset_table_key_t(basic_npl_struct):
    def __init__(self, fwd_header_type=0, l3_encap_type=0, is_mpls=0, is_mc=0):
        super().__init__(10)
        self.fwd_header_type = fwd_header_type
        self.l3_encap_type = l3_encap_type
        self.is_mpls = is_mpls
        self.is_mc = is_mc

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_dlp_p_counter_offset_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def fwd_header_type(self):
        return self._get_field_value(0, 4)
    @fwd_header_type.setter
    def fwd_header_type(self, value):
        self._set_field_value('field fwd_header_type', 0, 4, int, value)
    @property
    def l3_encap_type(self):
        return self._get_field_value(4, 4)
    @l3_encap_type.setter
    def l3_encap_type(self, value):
        self._set_field_value('field l3_encap_type', 4, 4, int, value)
    @property
    def is_mpls(self):
        return self._get_field_value(8, 1)
    @is_mpls.setter
    def is_mpls(self, value):
        self._set_field_value('field is_mpls', 8, 1, int, value)
    @property
    def is_mc(self):
        return self._get_field_value(9, 1)
    @is_mc.setter
    def is_mc(self, value):
        self._set_field_value('field is_mc', 9, 1, int, value)

class npl_tunnel_dlp_p_counter_offset_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_dlp_p_counter_offset_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def cntr_offset(self):
        return npl_counter_offset_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @cntr_offset.setter
    def cntr_offset(self, value):
        self._set_field_value('field cntr_offset', 0, 3, npl_counter_offset_t, value)

class npl_tunnel_dlp_p_counter_offset_table_value_t(basic_npl_struct):
    def __init__(self, cntr_offset=0):
        super().__init__(11)
        self.payloads.cntr_offset = cntr_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_dlp_p_counter_offset_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_tunnel_dlp_p_counter_offset_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_tunnel_dlp_p_counter_offset_table_payloads_t, value)



# API-s for table: tunnel_egress_qos_key_pack_table

NPL_TUNNEL_EGRESS_QOS_KEY_PACK_TABLE_ACTION_WRITE = 0x0

class npl_tunnel_egress_qos_key_pack_table_key_option_ip_qos_tag_select_fwd_qos_tag_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_tunnel_dscp_mapping_key_0=0, l3_tx_local_vars_tunnel_dscp_mapping_key_1=0, tx_npu_header_qos_group_4_0_=0):
        super().__init__(44)
        self.l3_tx_local_vars_tunnel_dscp_mapping_key_0 = l3_tx_local_vars_tunnel_dscp_mapping_key_0
        self.l3_tx_local_vars_tunnel_dscp_mapping_key_1 = l3_tx_local_vars_tunnel_dscp_mapping_key_1
        self.tx_npu_header_qos_group_4_0_ = tx_npu_header_qos_group_4_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_egress_qos_key_pack_table_key_option_ip_qos_tag_select_fwd_qos_tag_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_20h7efff_exact_0x7efff(self):
        return self._get_field_value(0, 20)
    @property
    def l3_tx_local_vars_tunnel_dscp_mapping_key_0(self):
        return self._get_field_value(20, 6)
    @l3_tx_local_vars_tunnel_dscp_mapping_key_0.setter
    def l3_tx_local_vars_tunnel_dscp_mapping_key_0(self, value):
        self._set_field_value('field l3_tx_local_vars_tunnel_dscp_mapping_key_0', 20, 6, int, value)
    @property
    def const2_2b0_exact_0x0(self):
        return self._get_field_value(26, 2)
    @property
    def l3_tx_local_vars_tunnel_dscp_mapping_key_1(self):
        return self._get_field_value(28, 6)
    @l3_tx_local_vars_tunnel_dscp_mapping_key_1.setter
    def l3_tx_local_vars_tunnel_dscp_mapping_key_1(self, value):
        self._set_field_value('field l3_tx_local_vars_tunnel_dscp_mapping_key_1', 28, 6, int, value)
    @property
    def const3_2b0_exact_0x0(self):
        return self._get_field_value(34, 2)
    @property
    def tx_npu_header_qos_group_4_0_(self):
        return self._get_field_value(36, 5)
    @tx_npu_header_qos_group_4_0_.setter
    def tx_npu_header_qos_group_4_0_(self, value):
        self._set_field_value('field tx_npu_header_qos_group_4_0_', 36, 5, int, value)
    @property
    def const4_3b0_exact_0x0(self):
        return self._get_field_value(41, 3)



class npl_tunnel_egress_qos_key_pack_table_key_option_ip_qos_tag_select_qos_group_t(basic_npl_struct):
    def __init__(self, tx_npu_header_qos_group_4_0__0=0, l3_tx_local_vars_tunnel_dscp_mapping_key=0, tx_npu_header_qos_group_4_0__1=0):
        super().__init__(44)
        self.tx_npu_header_qos_group_4_0__0 = tx_npu_header_qos_group_4_0__0
        self.l3_tx_local_vars_tunnel_dscp_mapping_key = l3_tx_local_vars_tunnel_dscp_mapping_key
        self.tx_npu_header_qos_group_4_0__1 = tx_npu_header_qos_group_4_0__1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_egress_qos_key_pack_table_key_option_ip_qos_tag_select_qos_group_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_20h7efff_exact_0x7efff(self):
        return self._get_field_value(0, 20)
    @property
    def tx_npu_header_qos_group_4_0__0(self):
        return self._get_field_value(20, 5)
    @tx_npu_header_qos_group_4_0__0.setter
    def tx_npu_header_qos_group_4_0__0(self, value):
        self._set_field_value('field tx_npu_header_qos_group_4_0__0', 20, 5, int, value)
    @property
    def const2_3b0_exact_0x0(self):
        return self._get_field_value(25, 3)
    @property
    def l3_tx_local_vars_tunnel_dscp_mapping_key(self):
        return self._get_field_value(28, 6)
    @l3_tx_local_vars_tunnel_dscp_mapping_key.setter
    def l3_tx_local_vars_tunnel_dscp_mapping_key(self, value):
        self._set_field_value('field l3_tx_local_vars_tunnel_dscp_mapping_key', 28, 6, int, value)
    @property
    def const3_2b0_exact_0x0(self):
        return self._get_field_value(34, 2)
    @property
    def tx_npu_header_qos_group_4_0__1(self):
        return self._get_field_value(36, 5)
    @tx_npu_header_qos_group_4_0__1.setter
    def tx_npu_header_qos_group_4_0__1(self, value):
        self._set_field_value('field tx_npu_header_qos_group_4_0__1', 36, 5, int, value)
    @property
    def const4_3b0_exact_0x0(self):
        return self._get_field_value(41, 3)




class tunnel_egress_qos_key_pack_table_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = tunnel_egress_qos_key_pack_table_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG(self):
        return npl_tunnel_egress_qos_key_pack_table_key_option_ip_qos_tag_select_fwd_qos_tag_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG.setter
    def NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG(self, value):
        self._set_field_value('field NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG', 0, 44, npl_tunnel_egress_qos_key_pack_table_key_option_ip_qos_tag_select_fwd_qos_tag_t, value)
    @property
    def NPL_IP_QOS_TAG_SELECT_QOS_GROUP(self):
        return npl_tunnel_egress_qos_key_pack_table_key_option_ip_qos_tag_select_qos_group_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_IP_QOS_TAG_SELECT_QOS_GROUP.setter
    def NPL_IP_QOS_TAG_SELECT_QOS_GROUP(self, value):
        self._set_field_value('field NPL_IP_QOS_TAG_SELECT_QOS_GROUP', 0, 44, npl_tunnel_egress_qos_key_pack_table_key_option_ip_qos_tag_select_qos_group_t, value)

class npl_tunnel_egress_qos_key_pack_table_key_t(basic_npl_struct):
    def __init__(self, l3_tx_local_vars_local_is_group_qos=0):
        super().__init__(44)
        self.l3_tx_local_vars_local_is_group_qos = l3_tx_local_vars_local_is_group_qos

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_egress_qos_key_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _l3_tx_local_vars_local_is_group_qos = 0
    @property
    def l3_tx_local_vars_local_is_group_qos(self):
        return self._l3_tx_local_vars_local_is_group_qos
    @l3_tx_local_vars_local_is_group_qos.setter
    def l3_tx_local_vars_local_is_group_qos(self, value):
        self._l3_tx_local_vars_local_is_group_qos = value
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG:
            self._set_field_value('const field', 0, 20, int, 0x7efff)
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG:
            self._set_field_value('const field', 26, 2, int, 0x0)
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG:
            self._set_field_value('const field', 34, 2, int, 0x0)
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_FWD_QOS_TAG:
            self._set_field_value('const field', 41, 3, int, 0x0)
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_QOS_GROUP:
            self._set_field_value('const field', 0, 20, int, 0x7efff)
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_QOS_GROUP:
            self._set_field_value('const field', 25, 3, int, 0x0)
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_QOS_GROUP:
            self._set_field_value('const field', 34, 2, int, 0x0)
        if l3_tx_local_vars_local_is_group_qos == NPL_IP_QOS_TAG_SELECT_QOS_GROUP:
            self._set_field_value('const field', 41, 3, int, 0x0)

    @property
    def options(self):
        return tunnel_egress_qos_key_pack_table_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 44 - 0, tunnel_egress_qos_key_pack_table_key_options_t, value)

class npl_tunnel_egress_qos_key_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(44)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_egress_qos_key_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def encap_local_vars_qos_packed_payload(self):
        return npl_ip_relay_egress_qos_key_pack_table_load_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @encap_local_vars_qos_packed_payload.setter
    def encap_local_vars_qos_packed_payload(self, value):
        self._set_field_value('field encap_local_vars_qos_packed_payload', 0, 44, npl_ip_relay_egress_qos_key_pack_table_load_t, value)

class npl_tunnel_egress_qos_key_pack_table_value_t(basic_npl_struct):
    def __init__(self, encap_local_vars_qos_packed_payload=0):
        super().__init__(52)
        self.payloads.encap_local_vars_qos_packed_payload = encap_local_vars_qos_packed_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_egress_qos_key_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(44, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 44, 8, int, value)
    @property
    def payloads(self):
        return npl_tunnel_egress_qos_key_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 44, npl_tunnel_egress_qos_key_pack_table_payloads_t, value)



# API-s for table: tunnel_qos_static_table

NPL_TUNNEL_QOS_STATIC_TABLE_ACTION_UPDATE_DSCP_FROM_L3_DLP_WITH_FWD_QOS_TAG = 0x0
NPL_TUNNEL_QOS_STATIC_TABLE_ACTION_UPDATE_DSCP_FROM_L3_DLP_WITH_QOS_GROUP = 0x1
NPL_TUNNEL_QOS_STATIC_TABLE_ACTION_UPDATE_DSCP_FROM_TUNNEL = 0x2

class npl_tunnel_qos_static_table_key_t(basic_npl_struct):
    def __init__(self, l3_dlp_is_group_qos=0, lp_set=0):
        super().__init__(2)
        self.l3_dlp_is_group_qos = l3_dlp_is_group_qos
        self.lp_set = lp_set

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_qos_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l3_dlp_is_group_qos(self):
        return self._get_field_value(0, 1)
    @l3_dlp_is_group_qos.setter
    def l3_dlp_is_group_qos(self, value):
        self._set_field_value('field l3_dlp_is_group_qos', 0, 1, int, value)
    @property
    def lp_set(self):
        return self._get_field_value(1, 1)
    @lp_set.setter
    def lp_set(self, value):
        self._set_field_value('field lp_set', 1, 1, int, value)

class npl_tunnel_qos_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(0)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_qos_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result


class npl_tunnel_qos_static_table_value_t(basic_npl_struct):
    def __init__(self, action=0, *args, **kwargs):
        super().__init__(8)
        self.action = action

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tunnel_qos_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(0, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 0, 8, int, value)
    @property
    def payloads(self):
        return npl_tunnel_qos_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 0, npl_tunnel_qos_static_table_payloads_t, value)



# API-s for table: tx_counters_block_config_table

NPL_TX_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_CONFIG = 0x0

class npl_tx_counters_block_config_table_config_payload_t(basic_npl_struct):
    def __init__(self, inc_bank_for_ifg_b=0, inc_addr_for_set=0, bank_set_type=0):
        super().__init__(4)
        self.inc_bank_for_ifg_b = inc_bank_for_ifg_b
        self.inc_addr_for_set = inc_addr_for_set
        self.bank_set_type = bank_set_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_counters_block_config_table_config_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def inc_bank_for_ifg_b(self):
        return self._get_field_value(3, 1)
    @inc_bank_for_ifg_b.setter
    def inc_bank_for_ifg_b(self, value):
        self._set_field_value('field inc_bank_for_ifg_b', 3, 1, int, value)
    @property
    def inc_addr_for_set(self):
        return self._get_field_value(2, 1)
    @inc_addr_for_set.setter
    def inc_addr_for_set(self, value):
        self._set_field_value('field inc_addr_for_set', 2, 1, int, value)
    @property
    def bank_set_type(self):
        return self._get_field_value(0, 2)
    @bank_set_type.setter
    def bank_set_type(self, value):
        self._set_field_value('field bank_set_type', 0, 2, int, value)




class npl_tx_counters_block_config_table_key_t(basic_npl_struct):
    def __init__(self, counter_block_id=0):
        super().__init__(7)
        self.counter_block_id = counter_block_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_counters_block_config_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def counter_block_id(self):
        return self._get_field_value(0, 7)
    @counter_block_id.setter
    def counter_block_id(self, value):
        self._set_field_value('field counter_block_id', 0, 7, int, value)

class npl_tx_counters_block_config_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_counters_block_config_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def config(self):
        return npl_tx_counters_block_config_table_config_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @config.setter
    def config(self, value):
        self._set_field_value('field config', 0, 4, npl_tx_counters_block_config_table_config_payload_t, value)

class npl_tx_counters_block_config_table_value_t(basic_npl_struct):
    def __init__(self, inc_bank_for_ifg_b=0, inc_addr_for_set=0, bank_set_type=0):
        super().__init__(12)
        self.payloads.config = npl_tx_counters_block_config_table_config_payload_t(inc_bank_for_ifg_b, inc_addr_for_set, bank_set_type)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_counters_block_config_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_tx_counters_block_config_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_tx_counters_block_config_table_payloads_t, value)



# API-s for table: tx_error_handling_counter_table

NPL_TX_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT = 0x0

class npl_tx_error_handling_counter_table_update_result_payload_t(basic_npl_struct):
    def __init__(self, counter=0):
        super().__init__(20)
        self.counter = counter

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_error_handling_counter_table_update_result_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def counter(self):
        return npl_counter_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @counter.setter
    def counter(self, value):
        self._set_field_value('field counter', 0, 20, npl_counter_ptr_t, value)




class npl_tx_error_handling_counter_table_key_t(basic_npl_struct):
    def __init__(self, dest_pif=0, ser=0):
        super().__init__(6)
        self.dest_pif = dest_pif
        self.ser = ser

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_error_handling_counter_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def dest_pif(self):
        return self._get_field_value(0, 5)
    @dest_pif.setter
    def dest_pif(self, value):
        self._set_field_value('field dest_pif', 0, 5, int, value)
    @property
    def ser(self):
        return self._get_field_value(5, 1)
    @ser.setter
    def ser(self, value):
        self._set_field_value('field ser', 5, 1, int, value)

class npl_tx_error_handling_counter_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(20)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_error_handling_counter_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update_result(self):
        return npl_tx_error_handling_counter_table_update_result_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update_result.setter
    def update_result(self, value):
        self._set_field_value('field update_result', 0, 20, npl_tx_error_handling_counter_table_update_result_payload_t, value)

class npl_tx_error_handling_counter_table_value_t(basic_npl_struct):
    def __init__(self, counter=0):
        super().__init__(28)
        self.payloads.update_result = npl_tx_error_handling_counter_table_update_result_payload_t(counter)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_error_handling_counter_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(20, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 20, 8, int, value)
    @property
    def payloads(self):
        return npl_tx_error_handling_counter_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 20, npl_tx_error_handling_counter_table_payloads_t, value)



# API-s for table: tx_punt_eth_encap_table

NPL_TX_PUNT_ETH_ENCAP_TABLE_ACTION_FOUND = 0x0

class npl_tx_punt_eth_encap_table_found_payload_t(basic_npl_struct):
    def __init__(self, wide_bit=0, eth_pcp_dei=0, punt_eth_or_npu_host_encap=0):
        super().__init__(129)
        self.wide_bit = wide_bit
        self.eth_pcp_dei = eth_pcp_dei
        self.punt_eth_or_npu_host_encap = punt_eth_or_npu_host_encap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_punt_eth_encap_table_found_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def wide_bit(self):
        return self._get_field_value(128, 1)
    @wide_bit.setter
    def wide_bit(self, value):
        self._set_field_value('field wide_bit', 128, 1, int, value)
    @property
    def eth_pcp_dei(self):
        return npl_pcp_dei_t._get_as_sub_field(self._data, self._offset_in_data + 124)
    @eth_pcp_dei.setter
    def eth_pcp_dei(self, value):
        self._set_field_value('field eth_pcp_dei', 124, 4, npl_pcp_dei_t, value)
    @property
    def punt_eth_or_npu_host_encap(self):
        return npl_tx_punt_local_var_t_anonymous_union_ene_eth_or_npu_host_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @punt_eth_or_npu_host_encap.setter
    def punt_eth_or_npu_host_encap(self, value):
        self._set_field_value('field punt_eth_or_npu_host_encap', 0, 124, npl_tx_punt_local_var_t_anonymous_union_ene_eth_or_npu_host_data_t, value)




class npl_tx_punt_eth_encap_table_key_t(basic_npl_struct):
    def __init__(self, punt_encap=0):
        super().__init__(9)
        self.punt_encap = punt_encap

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_punt_eth_encap_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def punt_encap(self):
        return self._get_field_value(0, 9)
    @punt_encap.setter
    def punt_encap(self, value):
        self._set_field_value('field punt_encap', 0, 9, int, value)

class npl_tx_punt_eth_encap_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(129)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_punt_eth_encap_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def found(self):
        return npl_tx_punt_eth_encap_table_found_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @found.setter
    def found(self, value):
        self._set_field_value('field found', 0, 129, npl_tx_punt_eth_encap_table_found_payload_t, value)

class npl_tx_punt_eth_encap_table_value_t(basic_npl_struct):
    def __init__(self, wide_bit=0, eth_pcp_dei=0, punt_eth_or_npu_host_encap=0):
        super().__init__(137)
        self.payloads.found = npl_tx_punt_eth_encap_table_found_payload_t(wide_bit, eth_pcp_dei, punt_eth_or_npu_host_encap)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_punt_eth_encap_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(129, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 129, 8, int, value)
    @property
    def payloads(self):
        return npl_tx_punt_eth_encap_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 129, npl_tx_punt_eth_encap_table_payloads_t, value)



# API-s for table: tx_punt_rcy_redirect_code_pack_table

NPL_TX_PUNT_RCY_REDIRECT_CODE_PACK_TABLE_ACTION_WRITE = 0x0

class npl_tx_punt_rcy_redirect_code_pack_table_key_t(basic_npl_struct):
    def __init__(self, egress_local_redirect_data_egress_redirect_code=0):
        super().__init__(8)
        self.egress_local_redirect_data_egress_redirect_code = egress_local_redirect_data_egress_redirect_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_punt_rcy_redirect_code_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def egress_local_redirect_data_egress_redirect_code(self):
        return self._get_field_value(0, 8)
    @egress_local_redirect_data_egress_redirect_code.setter
    def egress_local_redirect_data_egress_redirect_code(self, value):
        self._set_field_value('field egress_local_redirect_data_egress_redirect_code', 0, 8, int, value)

class npl_tx_punt_rcy_redirect_code_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(24)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_punt_rcy_redirect_code_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def punt_rcy_pack_table_payload(self):
        return npl_punt_rcy_pack_table_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @punt_rcy_pack_table_payload.setter
    def punt_rcy_pack_table_payload(self, value):
        self._set_field_value('field punt_rcy_pack_table_payload', 0, 24, npl_punt_rcy_pack_table_payload_t, value)

class npl_tx_punt_rcy_redirect_code_pack_table_value_t(basic_npl_struct):
    def __init__(self, punt_rcy_pack_table_payload=0):
        super().__init__(32)
        self.payloads.punt_rcy_pack_table_payload = punt_rcy_pack_table_payload

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_punt_rcy_redirect_code_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(24, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 24, 8, int, value)
    @property
    def payloads(self):
        return npl_tx_punt_rcy_redirect_code_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 24, npl_tx_punt_rcy_redirect_code_pack_table_payloads_t, value)



# API-s for table: tx_redirect_code_table

NPL_TX_REDIRECT_CODE_TABLE_ACTION_TX_REDIRECT_ACTION = 0x0

class npl_tx_redirect_code_table_tx_redirect_action_payload_t(basic_npl_struct):
    def __init__(self, is_drop_action=0, stamp_into_packet_header=0, cntr_stamp_cmd=0, ts_cmd=0, tx_punt_nw_encap_ptr=0):
        super().__init__(40)
        self.is_drop_action = is_drop_action
        self.stamp_into_packet_header = stamp_into_packet_header
        self.cntr_stamp_cmd = cntr_stamp_cmd
        self.ts_cmd = ts_cmd
        self.tx_punt_nw_encap_ptr = tx_punt_nw_encap_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_redirect_code_table_tx_redirect_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def is_drop_action(self):
        return self._get_field_value(37, 3)
    @is_drop_action.setter
    def is_drop_action(self, value):
        self._set_field_value('field is_drop_action', 37, 3, int, value)
    @property
    def stamp_into_packet_header(self):
        return self._get_field_value(36, 1)
    @stamp_into_packet_header.setter
    def stamp_into_packet_header(self, value):
        self._set_field_value('field stamp_into_packet_header', 36, 1, int, value)
    @property
    def cntr_stamp_cmd(self):
        return npl_lm_command_t._get_as_sub_field(self._data, self._offset_in_data + 24)
    @cntr_stamp_cmd.setter
    def cntr_stamp_cmd(self, value):
        self._set_field_value('field cntr_stamp_cmd', 24, 12, npl_lm_command_t, value)
    @property
    def ts_cmd(self):
        return npl_ts_command_t._get_as_sub_field(self._data, self._offset_in_data + 12)
    @ts_cmd.setter
    def ts_cmd(self, value):
        self._set_field_value('field ts_cmd', 12, 12, npl_ts_command_t, value)
    @property
    def tx_punt_nw_encap_ptr(self):
        return npl_tx_punt_nw_encap_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_punt_nw_encap_ptr.setter
    def tx_punt_nw_encap_ptr(self, value):
        self._set_field_value('field tx_punt_nw_encap_ptr', 0, 12, npl_tx_punt_nw_encap_ptr_t, value)




class npl_tx_redirect_code_table_key_t(basic_npl_struct):
    def __init__(self, tx_redirect_code=0):
        super().__init__(8)
        self.tx_redirect_code = tx_redirect_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_redirect_code_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_redirect_code(self):
        return self._get_field_value(0, 8)
    @tx_redirect_code.setter
    def tx_redirect_code(self, value):
        self._set_field_value('field tx_redirect_code', 0, 8, int, value)

class npl_tx_redirect_code_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_redirect_code_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_redirect_action(self):
        return npl_tx_redirect_code_table_tx_redirect_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_redirect_action.setter
    def tx_redirect_action(self, value):
        self._set_field_value('field tx_redirect_action', 0, 40, npl_tx_redirect_code_table_tx_redirect_action_payload_t, value)

class npl_tx_redirect_code_table_value_t(basic_npl_struct):
    def __init__(self, is_drop_action=0, stamp_into_packet_header=0, cntr_stamp_cmd=0, ts_cmd=0, tx_punt_nw_encap_ptr=0):
        super().__init__(48)
        self.payloads.tx_redirect_action = npl_tx_redirect_code_table_tx_redirect_action_payload_t(is_drop_action, stamp_into_packet_header, cntr_stamp_cmd, ts_cmd, tx_punt_nw_encap_ptr)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_redirect_code_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(40, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 40, 8, int, value)
    @property
    def payloads(self):
        return npl_tx_redirect_code_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 40, npl_tx_redirect_code_table_payloads_t, value)



# API-s for table: tx_redirect_code_table_compound

NPL_TX_REDIRECT_CODE_TABLE_COMPOUND_ACTION_TX_REDIRECT_ACTION = 0x0

class npl_tx_redirect_code_table_compound_tx_redirect_action_payload_t(basic_npl_struct):
    def __init__(self, is_drop_action=0, stamp_into_packet_header=0, cntr_stamp_cmd=0, ts_cmd=0, tx_punt_nw_encap_ptr=0):
        super().__init__(40)
        self.is_drop_action = is_drop_action
        self.stamp_into_packet_header = stamp_into_packet_header
        self.cntr_stamp_cmd = cntr_stamp_cmd
        self.ts_cmd = ts_cmd
        self.tx_punt_nw_encap_ptr = tx_punt_nw_encap_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_redirect_code_table_compound_tx_redirect_action_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def is_drop_action(self):
        return self._get_field_value(37, 3)
    @is_drop_action.setter
    def is_drop_action(self, value):
        self._set_field_value('field is_drop_action', 37, 3, int, value)
    @property
    def stamp_into_packet_header(self):
        return self._get_field_value(36, 1)
    @stamp_into_packet_header.setter
    def stamp_into_packet_header(self, value):
        self._set_field_value('field stamp_into_packet_header', 36, 1, int, value)
    @property
    def cntr_stamp_cmd(self):
        return npl_lm_command_t._get_as_sub_field(self._data, self._offset_in_data + 24)
    @cntr_stamp_cmd.setter
    def cntr_stamp_cmd(self, value):
        self._set_field_value('field cntr_stamp_cmd', 24, 12, npl_lm_command_t, value)
    @property
    def ts_cmd(self):
        return npl_ts_command_t._get_as_sub_field(self._data, self._offset_in_data + 12)
    @ts_cmd.setter
    def ts_cmd(self, value):
        self._set_field_value('field ts_cmd', 12, 12, npl_ts_command_t, value)
    @property
    def tx_punt_nw_encap_ptr(self):
        return npl_tx_punt_nw_encap_ptr_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_punt_nw_encap_ptr.setter
    def tx_punt_nw_encap_ptr(self, value):
        self._set_field_value('field tx_punt_nw_encap_ptr', 0, 12, npl_tx_punt_nw_encap_ptr_t, value)




class npl_tx_redirect_code_table_compound_key_t(basic_npl_struct):
    def __init__(self, egress_local_redirect_data_egress_redirect_code=0):
        super().__init__(14)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0x8)
        self.egress_local_redirect_data_egress_redirect_code = egress_local_redirect_data_egress_redirect_code

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_redirect_code_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_TX_REDIRECT_TABLE_LDB_exact_0x8(self):
        return self._get_field_value(2, 4)
    @property
    def egress_local_redirect_data_egress_redirect_code(self):
        return self._get_field_value(6, 8)
    @egress_local_redirect_data_egress_redirect_code.setter
    def egress_local_redirect_data_egress_redirect_code(self, value):
        self._set_field_value('field egress_local_redirect_data_egress_redirect_code', 6, 8, int, value)

class npl_tx_redirect_code_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(40)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_redirect_code_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def tx_redirect_action(self):
        return npl_tx_redirect_code_table_compound_tx_redirect_action_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @tx_redirect_action.setter
    def tx_redirect_action(self, value):
        self._set_field_value('field tx_redirect_action', 0, 40, npl_tx_redirect_code_table_compound_tx_redirect_action_payload_t, value)

class npl_tx_redirect_code_table_compound_value_t(basic_npl_struct):
    def __init__(self, is_drop_action=0, stamp_into_packet_header=0, cntr_stamp_cmd=0, ts_cmd=0, tx_punt_nw_encap_ptr=0):
        super().__init__(48)
        self.payloads.tx_redirect_action = npl_tx_redirect_code_table_compound_tx_redirect_action_payload_t(is_drop_action, stamp_into_packet_header, cntr_stamp_cmd, ts_cmd, tx_punt_nw_encap_ptr)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_tx_redirect_code_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(40, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 40, 8, int, value)
    @property
    def payloads(self):
        return npl_tx_redirect_code_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 40, npl_tx_redirect_code_table_compound_payloads_t, value)



# API-s for table: txpdr_mc_list_size_table

NPL_TXPDR_MC_LIST_SIZE_TABLE_ACTION_WRITE = 0x0

class npl_txpdr_mc_list_size_table_key_t(basic_npl_struct):
    def __init__(self, rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid=0):
        super().__init__(16)
        self.rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid = rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpdr_mc_list_size_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid(self):
        return self._get_field_value(0, 16)
    @rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid.setter
    def rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid(self, value):
        self._set_field_value('field rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid', 0, 16, int, value)

class npl_txpdr_mc_list_size_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(11)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpdr_mc_list_size_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def txpdr_local_vars_mc_group_size(self):
        return self._get_field_value(0, 11)
    @txpdr_local_vars_mc_group_size.setter
    def txpdr_local_vars_mc_group_size(self, value):
        self._set_field_value('field txpdr_local_vars_mc_group_size', 0, 11, int, value)

class npl_txpdr_mc_list_size_table_value_t(basic_npl_struct):
    def __init__(self, txpdr_local_vars_mc_group_size=0):
        super().__init__(19)
        self.payloads.txpdr_local_vars_mc_group_size = txpdr_local_vars_mc_group_size

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpdr_mc_list_size_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(11, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 11, 8, int, value)
    @property
    def payloads(self):
        return npl_txpdr_mc_list_size_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 11, npl_txpdr_mc_list_size_table_payloads_t, value)



# API-s for table: txpdr_tc_map_table

NPL_TXPDR_TC_MAP_TABLE_ACTION_WRITE = 0x0

class npl_txpdr_tc_map_table_key_t(basic_npl_struct):
    def __init__(self, rxpp_pd_tc=0, txpdr_local_vars_tc_map_profile=0):
        super().__init__(6)
        self.rxpp_pd_tc = rxpp_pd_tc
        self.txpdr_local_vars_tc_map_profile = txpdr_local_vars_tc_map_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpdr_tc_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_tc(self):
        return self._get_field_value(0, 3)
    @rxpp_pd_tc.setter
    def rxpp_pd_tc(self, value):
        self._set_field_value('field rxpp_pd_tc', 0, 3, int, value)
    @property
    def txpdr_local_vars_tc_map_profile(self):
        return self._get_field_value(3, 3)
    @txpdr_local_vars_tc_map_profile.setter
    def txpdr_local_vars_tc_map_profile(self, value):
        self._set_field_value('field txpdr_local_vars_tc_map_profile', 3, 3, int, value)

class npl_txpdr_tc_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpdr_tc_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def txpdr_local_vars_tc_offset(self):
        return self._get_field_value(0, 3)
    @txpdr_local_vars_tc_offset.setter
    def txpdr_local_vars_tc_offset(self, value):
        self._set_field_value('field txpdr_local_vars_tc_offset', 0, 3, int, value)

class npl_txpdr_tc_map_table_value_t(basic_npl_struct):
    def __init__(self, txpdr_local_vars_tc_offset=0):
        super().__init__(11)
        self.payloads.txpdr_local_vars_tc_offset = txpdr_local_vars_tc_offset

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpdr_tc_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_txpdr_tc_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_txpdr_tc_map_table_payloads_t, value)



# API-s for table: txpp_dlp_profile_table

NPL_TXPP_DLP_PROFILE_TABLE_ACTION_WRITE = 0x0

class npl_txpp_dlp_profile_table_key_t(basic_npl_struct):
    def __init__(self, txpp_dlp_profile_info_dlp_msbs_11_0=0, txpp_dlp_profile_info_dlp_msbs_13_12=0):
        super().__init__(14)
        self.txpp_dlp_profile_info_dlp_msbs_11_0 = txpp_dlp_profile_info_dlp_msbs_11_0
        self.txpp_dlp_profile_info_dlp_msbs_13_12 = txpp_dlp_profile_info_dlp_msbs_13_12

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_dlp_profile_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def txpp_dlp_profile_info_dlp_msbs_11_0(self):
        return self._get_field_value(0, 12)
    @txpp_dlp_profile_info_dlp_msbs_11_0.setter
    def txpp_dlp_profile_info_dlp_msbs_11_0(self, value):
        self._set_field_value('field txpp_dlp_profile_info_dlp_msbs_11_0', 0, 12, int, value)
    @property
    def txpp_dlp_profile_info_dlp_msbs_13_12(self):
        return self._get_field_value(12, 2)
    @txpp_dlp_profile_info_dlp_msbs_13_12.setter
    def txpp_dlp_profile_info_dlp_msbs_13_12(self, value):
        self._set_field_value('field txpp_dlp_profile_info_dlp_msbs_13_12', 12, 2, int, value)

class npl_txpp_dlp_profile_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(8)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_dlp_profile_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_tx_dlp_profile(self):
        return npl_dlp_profile_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @pd_tx_dlp_profile.setter
    def pd_tx_dlp_profile(self, value):
        self._set_field_value('field pd_tx_dlp_profile', 0, 8, npl_dlp_profile_union_t, value)

class npl_txpp_dlp_profile_table_value_t(basic_npl_struct):
    def __init__(self, pd_tx_dlp_profile=0):
        super().__init__(16)
        self.payloads.pd_tx_dlp_profile = pd_tx_dlp_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_dlp_profile_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(8, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 8, 8, int, value)
    @property
    def payloads(self):
        return npl_txpp_dlp_profile_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 8, npl_txpp_dlp_profile_table_payloads_t, value)



# API-s for table: txpp_encap_qos_mapping_table

NPL_TXPP_ENCAP_QOS_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_txpp_encap_qos_mapping_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_none__tx_npu_header_encap_qos_tag=0, pd_tx_out_color=0, packet_protocol_layer_none__tx_npu_header_slp_qos_id=0):
        super().__init__(13)
        self.packet_protocol_layer_none__tx_npu_header_encap_qos_tag = packet_protocol_layer_none__tx_npu_header_encap_qos_tag
        self.pd_tx_out_color = pd_tx_out_color
        self.packet_protocol_layer_none__tx_npu_header_slp_qos_id = packet_protocol_layer_none__tx_npu_header_slp_qos_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_encap_qos_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_none__tx_npu_header_encap_qos_tag(self):
        return self._get_field_value(0, 7)
    @packet_protocol_layer_none__tx_npu_header_encap_qos_tag.setter
    def packet_protocol_layer_none__tx_npu_header_encap_qos_tag(self, value):
        self._set_field_value('field packet_protocol_layer_none__tx_npu_header_encap_qos_tag', 0, 7, int, value)
    @property
    def pd_tx_out_color(self):
        return self._get_field_value(7, 2)
    @pd_tx_out_color.setter
    def pd_tx_out_color(self, value):
        self._set_field_value('field pd_tx_out_color', 7, 2, int, value)
    @property
    def packet_protocol_layer_none__tx_npu_header_slp_qos_id(self):
        return self._get_field_value(9, 4)
    @packet_protocol_layer_none__tx_npu_header_slp_qos_id.setter
    def packet_protocol_layer_none__tx_npu_header_slp_qos_id(self, value):
        self._set_field_value('field packet_protocol_layer_none__tx_npu_header_slp_qos_id', 9, 4, int, value)

class npl_txpp_encap_qos_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(7)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_encap_qos_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def txpp_npu_header_encap_qos_tag(self):
        return self._get_field_value(0, 7)
    @txpp_npu_header_encap_qos_tag.setter
    def txpp_npu_header_encap_qos_tag(self, value):
        self._set_field_value('field txpp_npu_header_encap_qos_tag', 0, 7, int, value)

class npl_txpp_encap_qos_mapping_table_value_t(basic_npl_struct):
    def __init__(self, txpp_npu_header_encap_qos_tag=0):
        super().__init__(15)
        self.payloads.txpp_npu_header_encap_qos_tag = txpp_npu_header_encap_qos_tag

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_encap_qos_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(7, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 7, 8, int, value)
    @property
    def payloads(self):
        return npl_txpp_encap_qos_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 7, npl_txpp_encap_qos_mapping_table_payloads_t, value)



# API-s for table: txpp_first_enc_type_to_second_enc_type_offset

NPL_TXPP_FIRST_ENC_TYPE_TO_SECOND_ENC_TYPE_OFFSET_ACTION_WRITE = 0x0

class npl_txpp_first_enc_type_to_second_enc_type_offset_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_=0):
        super().__init__(4)
        self.packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_ = packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_first_enc_type_to_second_enc_type_offset_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_(self):
        return self._get_field_value(0, 4)
    @packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_.setter
    def packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_(self, value):
        self._set_field_value('field packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_', 0, 4, int, value)

class npl_txpp_first_enc_type_to_second_enc_type_offset_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_first_enc_type_to_second_enc_type_offset_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def txpp_first_encap_is_wide(self):
        return npl_bool_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @txpp_first_encap_is_wide.setter
    def txpp_first_encap_is_wide(self, value):
        self._set_field_value('field txpp_first_encap_is_wide', 0, 1, npl_bool_t, value)

class npl_txpp_first_enc_type_to_second_enc_type_offset_value_t(basic_npl_struct):
    def __init__(self, txpp_first_encap_is_wide=0):
        super().__init__(9)
        self.payloads.txpp_first_encap_is_wide = txpp_first_encap_is_wide

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_first_enc_type_to_second_enc_type_offset_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_txpp_first_enc_type_to_second_enc_type_offset_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_txpp_first_enc_type_to_second_enc_type_offset_payloads_t, value)



# API-s for table: txpp_fwd_header_type_is_l2_table

NPL_TXPP_FWD_HEADER_TYPE_IS_L2_TABLE_ACTION_WRITE = 0x0

class npl_txpp_fwd_header_type_is_l2_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_=0, packet_protocol_layer_0__tx_npu_header_fwd_header_type=0):
        super().__init__(8)
        self.packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_ = packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_
        self.packet_protocol_layer_0__tx_npu_header_fwd_header_type = packet_protocol_layer_0__tx_npu_header_fwd_header_type

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_fwd_header_type_is_l2_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_(self):
        return self._get_field_value(0, 4)
    @packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_.setter
    def packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_(self, value):
        self._set_field_value('field packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_', 0, 4, int, value)
    @property
    def packet_protocol_layer_0__tx_npu_header_fwd_header_type(self):
        return self._get_field_value(4, 4)
    @packet_protocol_layer_0__tx_npu_header_fwd_header_type.setter
    def packet_protocol_layer_0__tx_npu_header_fwd_header_type(self, value):
        self._set_field_value('field packet_protocol_layer_0__tx_npu_header_fwd_header_type', 4, 4, int, value)

class npl_txpp_fwd_header_type_is_l2_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_fwd_header_type_is_l2_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def txpp_dlp_profile_info_fwd_header_type_is_l2(self):
        return self._get_field_value(0, 1)
    @txpp_dlp_profile_info_fwd_header_type_is_l2.setter
    def txpp_dlp_profile_info_fwd_header_type_is_l2(self, value):
        self._set_field_value('field txpp_dlp_profile_info_fwd_header_type_is_l2', 0, 1, int, value)

class npl_txpp_fwd_header_type_is_l2_table_value_t(basic_npl_struct):
    def __init__(self, txpp_dlp_profile_info_fwd_header_type_is_l2=0):
        super().__init__(9)
        self.payloads.txpp_dlp_profile_info_fwd_header_type_is_l2 = txpp_dlp_profile_info_fwd_header_type_is_l2

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_fwd_header_type_is_l2_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_txpp_fwd_header_type_is_l2_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_txpp_fwd_header_type_is_l2_table_payloads_t, value)



# API-s for table: txpp_fwd_qos_mapping_table

NPL_TXPP_FWD_QOS_MAPPING_TABLE_ACTION_WRITE = 0x0

class npl_txpp_fwd_qos_mapping_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_none__tx_npu_header_fwd_qos_tag=0, pd_tx_out_color=0, packet_protocol_layer_none__tx_npu_header_slp_qos_id=0):
        super().__init__(13)
        self.packet_protocol_layer_none__tx_npu_header_fwd_qos_tag = packet_protocol_layer_none__tx_npu_header_fwd_qos_tag
        self.pd_tx_out_color = pd_tx_out_color
        self.packet_protocol_layer_none__tx_npu_header_slp_qos_id = packet_protocol_layer_none__tx_npu_header_slp_qos_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_fwd_qos_mapping_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def packet_protocol_layer_none__tx_npu_header_fwd_qos_tag(self):
        return self._get_field_value(0, 7)
    @packet_protocol_layer_none__tx_npu_header_fwd_qos_tag.setter
    def packet_protocol_layer_none__tx_npu_header_fwd_qos_tag(self, value):
        self._set_field_value('field packet_protocol_layer_none__tx_npu_header_fwd_qos_tag', 0, 7, int, value)
    @property
    def pd_tx_out_color(self):
        return self._get_field_value(7, 2)
    @pd_tx_out_color.setter
    def pd_tx_out_color(self, value):
        self._set_field_value('field pd_tx_out_color', 7, 2, int, value)
    @property
    def packet_protocol_layer_none__tx_npu_header_slp_qos_id(self):
        return self._get_field_value(9, 4)
    @packet_protocol_layer_none__tx_npu_header_slp_qos_id.setter
    def packet_protocol_layer_none__tx_npu_header_slp_qos_id(self, value):
        self._set_field_value('field packet_protocol_layer_none__tx_npu_header_slp_qos_id', 9, 4, int, value)

class npl_txpp_fwd_qos_mapping_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(7)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_fwd_qos_mapping_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def txpp_npu_header_fwd_qos_tag(self):
        return self._get_field_value(0, 7)
    @txpp_npu_header_fwd_qos_tag.setter
    def txpp_npu_header_fwd_qos_tag(self, value):
        self._set_field_value('field txpp_npu_header_fwd_qos_tag', 0, 7, int, value)

class npl_txpp_fwd_qos_mapping_table_value_t(basic_npl_struct):
    def __init__(self, txpp_npu_header_fwd_qos_tag=0):
        super().__init__(15)
        self.payloads.txpp_npu_header_fwd_qos_tag = txpp_npu_header_fwd_qos_tag

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_fwd_qos_mapping_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(7, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 7, 8, int, value)
    @property
    def payloads(self):
        return npl_txpp_fwd_qos_mapping_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 7, npl_txpp_fwd_qos_mapping_table_payloads_t, value)



# API-s for table: txpp_ibm_enables_table

NPL_TXPP_IBM_ENABLES_TABLE_ACTION_WRITE = 0x0

class npl_txpp_ibm_enables_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_ibm_enables_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_txpp_ibm_enables_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(159)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_ibm_enables_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ibm_enables_table_result(self):
        return npl_ibm_enables_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @ibm_enables_table_result.setter
    def ibm_enables_table_result(self, value):
        self._set_field_value('field ibm_enables_table_result', 0, 159, npl_ibm_enables_table_result_t, value)

class npl_txpp_ibm_enables_table_value_t(basic_npl_struct):
    def __init__(self, ibm_enables_table_result=0):
        super().__init__(167)
        self.payloads.ibm_enables_table_result = ibm_enables_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_ibm_enables_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(159, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 159, 8, int, value)
    @property
    def payloads(self):
        return npl_txpp_ibm_enables_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 159, npl_txpp_ibm_enables_table_payloads_t, value)



# API-s for table: txpp_initial_npe_macro_table

NPL_TXPP_INITIAL_NPE_MACRO_TABLE_ACTION_INIT_TX_DATA = 0x0

class npl_txpp_initial_npe_macro_table_init_tx_data_payload_t(basic_npl_struct):
    def __init__(self, np_macro_id=0):
        super().__init__(6)
        self.np_macro_id = np_macro_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_initial_npe_macro_table_init_tx_data_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def np_macro_id(self):
        return self._get_field_value(0, 6)
    @np_macro_id.setter
    def np_macro_id(self, value):
        self._set_field_value('field np_macro_id', 0, 6, int, value)




class npl_txpp_initial_npe_macro_table_key_t(basic_npl_struct):
    def __init__(self, txpp_first_macro_table_key=0):
        super().__init__(13)
        self.txpp_first_macro_table_key = txpp_first_macro_table_key

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_initial_npe_macro_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def txpp_first_macro_table_key(self):
        return npl_txpp_first_macro_table_key_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @txpp_first_macro_table_key.setter
    def txpp_first_macro_table_key(self, value):
        self._set_field_value('field txpp_first_macro_table_key', 0, 13, npl_txpp_first_macro_table_key_t, value)

class npl_txpp_initial_npe_macro_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(6)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_initial_npe_macro_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def init_tx_data(self):
        return npl_txpp_initial_npe_macro_table_init_tx_data_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @init_tx_data.setter
    def init_tx_data(self, value):
        self._set_field_value('field init_tx_data', 0, 6, npl_txpp_initial_npe_macro_table_init_tx_data_payload_t, value)

class npl_txpp_initial_npe_macro_table_value_t(basic_npl_struct):
    def __init__(self, np_macro_id=0):
        super().__init__(14)
        self.payloads.init_tx_data = npl_txpp_initial_npe_macro_table_init_tx_data_payload_t(np_macro_id)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_initial_npe_macro_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(6, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 6, 8, int, value)
    @property
    def payloads(self):
        return npl_txpp_initial_npe_macro_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 6, npl_txpp_initial_npe_macro_table_payloads_t, value)



# API-s for table: txpp_mapping_qos_tag_table

NPL_TXPP_MAPPING_QOS_TAG_TABLE_ACTION_WRITE = 0x0

class npl_txpp_mapping_qos_tag_table_key_t(basic_npl_struct):
    def __init__(self, qos_id=0, qos_tag=0):
        super().__init__(11)
        self.qos_id = qos_id
        self.qos_tag = qos_tag

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_mapping_qos_tag_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def qos_id(self):
        return self._get_field_value(0, 4)
    @qos_id.setter
    def qos_id(self, value):
        self._set_field_value('field qos_id', 0, 4, int, value)
    @property
    def qos_tag(self):
        return self._get_field_value(4, 7)
    @qos_tag.setter
    def qos_tag(self, value):
        self._set_field_value('field qos_tag', 4, 7, int, value)

class npl_txpp_mapping_qos_tag_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(30)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_mapping_qos_tag_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def egress_qos_result(self):
        return npl_egress_qos_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @egress_qos_result.setter
    def egress_qos_result(self, value):
        self._set_field_value('field egress_qos_result', 0, 30, npl_egress_qos_result_t, value)

class npl_txpp_mapping_qos_tag_table_value_t(basic_npl_struct):
    def __init__(self, egress_qos_result=0):
        super().__init__(38)
        self.payloads.egress_qos_result = egress_qos_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_txpp_mapping_qos_tag_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(30, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 30, 8, int, value)
    @property
    def payloads(self):
        return npl_txpp_mapping_qos_tag_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 30, npl_txpp_mapping_qos_tag_table_payloads_t, value)



# API-s for table: uc_ibm_tc_map_table

NPL_UC_IBM_TC_MAP_TABLE_ACTION_WRITE = 0x0

class npl_uc_ibm_tc_map_table_key_t(basic_npl_struct):
    def __init__(self, rxpp_pd_tc=0, ibm_cmd_table_result_tc_map_profile=0):
        super().__init__(6)
        self.rxpp_pd_tc = rxpp_pd_tc
        self.ibm_cmd_table_result_tc_map_profile = ibm_cmd_table_result_tc_map_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_uc_ibm_tc_map_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpp_pd_tc(self):
        return self._get_field_value(0, 3)
    @rxpp_pd_tc.setter
    def rxpp_pd_tc(self, value):
        self._set_field_value('field rxpp_pd_tc', 0, 3, int, value)
    @property
    def ibm_cmd_table_result_tc_map_profile(self):
        return self._get_field_value(3, 3)
    @ibm_cmd_table_result_tc_map_profile.setter
    def ibm_cmd_table_result_tc_map_profile(self, value):
        self._set_field_value('field ibm_cmd_table_result_tc_map_profile', 3, 3, int, value)

class npl_uc_ibm_tc_map_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(4)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_uc_ibm_tc_map_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def rxpdr_ibm_tc_map_result(self):
        return npl_rxpdr_ibm_tc_map_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @rxpdr_ibm_tc_map_result.setter
    def rxpdr_ibm_tc_map_result(self, value):
        self._set_field_value('field rxpdr_ibm_tc_map_result', 0, 4, npl_rxpdr_ibm_tc_map_result_t, value)

class npl_uc_ibm_tc_map_table_value_t(basic_npl_struct):
    def __init__(self, rxpdr_ibm_tc_map_result=0):
        super().__init__(12)
        self.payloads.rxpdr_ibm_tc_map_result = rxpdr_ibm_tc_map_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_uc_ibm_tc_map_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(4, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 4, 8, int, value)
    @property
    def payloads(self):
        return npl_uc_ibm_tc_map_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 4, npl_uc_ibm_tc_map_table_payloads_t, value)



# API-s for table: urpf_ipsa_dest_is_lpts_static_table

NPL_URPF_IPSA_DEST_IS_LPTS_STATIC_TABLE_ACTION_WRITE = 0x0

class npl_urpf_ipsa_dest_is_lpts_static_table_key_t(basic_npl_struct):
    def __init__(self, ipsa_dest_prefix=0):
        super().__init__(5)
        self.ipsa_dest_prefix = ipsa_dest_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_urpf_ipsa_dest_is_lpts_static_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def ipsa_dest_prefix(self):
        return self._get_field_value(0, 5)
    @ipsa_dest_prefix.setter
    def ipsa_dest_prefix(self, value):
        self._set_field_value('field ipsa_dest_prefix', 0, 5, int, value)

class npl_urpf_ipsa_dest_is_lpts_static_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(1)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_urpf_ipsa_dest_is_lpts_static_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def is_lpts_prefix(self):
        return self._get_field_value(0, 1)
    @is_lpts_prefix.setter
    def is_lpts_prefix(self, value):
        self._set_field_value('field is_lpts_prefix', 0, 1, int, value)

class npl_urpf_ipsa_dest_is_lpts_static_table_value_t(basic_npl_struct):
    def __init__(self, is_lpts_prefix=0):
        super().__init__(9)
        self.payloads.is_lpts_prefix = is_lpts_prefix

    def _get_as_sub_field(data, offset_in_data):
        result = npl_urpf_ipsa_dest_is_lpts_static_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(1, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 1, 8, int, value)
    @property
    def payloads(self):
        return npl_urpf_ipsa_dest_is_lpts_static_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 1, npl_urpf_ipsa_dest_is_lpts_static_table_payloads_t, value)



# API-s for table: vlan_edit_tpid1_profile_hw_table

NPL_VLAN_EDIT_TPID1_PROFILE_HW_TABLE_ACTION_WRITE = 0x0

class npl_vlan_edit_tpid1_profile_hw_table_key_t(basic_npl_struct):
    def __init__(self, vlan_edit_info_tpid_profile=0):
        super().__init__(2)
        self.vlan_edit_info_tpid_profile = vlan_edit_info_tpid_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_edit_tpid1_profile_hw_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vlan_edit_info_tpid_profile(self):
        return self._get_field_value(0, 2)
    @vlan_edit_info_tpid_profile.setter
    def vlan_edit_info_tpid_profile(self, value):
        self._set_field_value('field vlan_edit_info_tpid_profile', 0, 2, int, value)

class npl_vlan_edit_tpid1_profile_hw_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_edit_tpid1_profile_hw_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vlan_edit_info_tpid1(self):
        return self._get_field_value(0, 16)
    @vlan_edit_info_tpid1.setter
    def vlan_edit_info_tpid1(self, value):
        self._set_field_value('field vlan_edit_info_tpid1', 0, 16, int, value)

class npl_vlan_edit_tpid1_profile_hw_table_value_t(basic_npl_struct):
    def __init__(self, vlan_edit_info_tpid1=0):
        super().__init__(24)
        self.payloads.vlan_edit_info_tpid1 = vlan_edit_info_tpid1

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_edit_tpid1_profile_hw_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_vlan_edit_tpid1_profile_hw_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_vlan_edit_tpid1_profile_hw_table_payloads_t, value)



# API-s for table: vlan_edit_tpid2_profile_hw_table

NPL_VLAN_EDIT_TPID2_PROFILE_HW_TABLE_ACTION_WRITE = 0x0

class npl_vlan_edit_tpid2_profile_hw_table_key_t(basic_npl_struct):
    def __init__(self, vlan_edit_info_tpid_profile=0):
        super().__init__(2)
        self.vlan_edit_info_tpid_profile = vlan_edit_info_tpid_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_edit_tpid2_profile_hw_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vlan_edit_info_tpid_profile(self):
        return self._get_field_value(0, 2)
    @vlan_edit_info_tpid_profile.setter
    def vlan_edit_info_tpid_profile(self, value):
        self._set_field_value('field vlan_edit_info_tpid_profile', 0, 2, int, value)

class npl_vlan_edit_tpid2_profile_hw_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(16)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_edit_tpid2_profile_hw_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vlan_edit_info_tpid2(self):
        return self._get_field_value(0, 16)
    @vlan_edit_info_tpid2.setter
    def vlan_edit_info_tpid2(self, value):
        self._set_field_value('field vlan_edit_info_tpid2', 0, 16, int, value)

class npl_vlan_edit_tpid2_profile_hw_table_value_t(basic_npl_struct):
    def __init__(self, vlan_edit_info_tpid2=0):
        super().__init__(24)
        self.payloads.vlan_edit_info_tpid2 = vlan_edit_info_tpid2

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_edit_tpid2_profile_hw_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(16, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 16, 8, int, value)
    @property
    def payloads(self):
        return npl_vlan_edit_tpid2_profile_hw_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 16, npl_vlan_edit_tpid2_profile_hw_table_payloads_t, value)



# API-s for table: vlan_format_table

NPL_VLAN_FORMAT_TABLE_ACTION_UPDATE = 0x0

class npl_vlan_format_table_update_payload_t(basic_npl_struct):
    def __init__(self, vid_from_port=0, mac_termination_type=0, sm_selector=0, sm_logical_db=0, pcp_dei_from_port=0, dummy_bit=0, enable_l3_qos=0):
        super().__init__(13)
        self.vid_from_port = vid_from_port
        self.mac_termination_type = mac_termination_type
        self.sm_selector = sm_selector
        self.sm_logical_db = sm_logical_db
        self.pcp_dei_from_port = pcp_dei_from_port
        self.dummy_bit = dummy_bit
        self.enable_l3_qos = enable_l3_qos

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_format_table_update_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def vid_from_port(self):
        return self._get_field_value(12, 1)
    @vid_from_port.setter
    def vid_from_port(self, value):
        self._set_field_value('field vid_from_port', 12, 1, int, value)
    @property
    def mac_termination_type(self):
        return self._get_field_value(11, 1)
    @mac_termination_type.setter
    def mac_termination_type(self, value):
        self._set_field_value('field mac_termination_type', 11, 1, int, value)
    @property
    def sm_selector(self):
        return self._get_field_value(7, 4)
    @sm_selector.setter
    def sm_selector(self, value):
        self._set_field_value('field sm_selector', 7, 4, int, value)
    @property
    def sm_logical_db(self):
        return self._get_field_value(3, 4)
    @sm_logical_db.setter
    def sm_logical_db(self, value):
        self._set_field_value('field sm_logical_db', 3, 4, int, value)
    @property
    def pcp_dei_from_port(self):
        return self._get_field_value(2, 1)
    @pcp_dei_from_port.setter
    def pcp_dei_from_port(self, value):
        self._set_field_value('field pcp_dei_from_port', 2, 1, int, value)
    @property
    def dummy_bit(self):
        return self._get_field_value(1, 1)
    @dummy_bit.setter
    def dummy_bit(self, value):
        self._set_field_value('field dummy_bit', 1, 1, int, value)
    @property
    def enable_l3_qos(self):
        return self._get_field_value(0, 1)
    @enable_l3_qos.setter
    def enable_l3_qos(self, value):
        self._set_field_value('field enable_l3_qos', 0, 1, int, value)




class npl_vlan_format_table_key_t(basic_npl_struct):
    def __init__(self, is_priority=0, header_2_type=0, header_1_type=0, vlan_profile=0):
        super().__init__(15)
        self.is_priority = is_priority
        self.header_2_type = header_2_type
        self.header_1_type = header_1_type
        self.vlan_profile = vlan_profile

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_format_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def is_priority(self):
        return self._get_field_value(0, 1)
    @is_priority.setter
    def is_priority(self, value):
        self._set_field_value('field is_priority', 0, 1, int, value)
    @property
    def header_2_type(self):
        return self._get_field_value(1, 5)
    @header_2_type.setter
    def header_2_type(self, value):
        self._set_field_value('field header_2_type', 1, 5, int, value)
    @property
    def header_1_type(self):
        return self._get_field_value(6, 5)
    @header_1_type.setter
    def header_1_type(self, value):
        self._set_field_value('field header_1_type', 6, 5, int, value)
    @property
    def vlan_profile(self):
        return self._get_field_value(11, 4)
    @vlan_profile.setter
    def vlan_profile(self, value):
        self._set_field_value('field vlan_profile', 11, 4, int, value)

class npl_vlan_format_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(13)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_format_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def update(self):
        return npl_vlan_format_table_update_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @update.setter
    def update(self, value):
        self._set_field_value('field update', 0, 13, npl_vlan_format_table_update_payload_t, value)

class npl_vlan_format_table_value_t(basic_npl_struct):
    def __init__(self, vid_from_port=0, mac_termination_type=0, sm_selector=0, sm_logical_db=0, pcp_dei_from_port=0, dummy_bit=0, enable_l3_qos=0):
        super().__init__(21)
        self.payloads.update = npl_vlan_format_table_update_payload_t(vid_from_port, mac_termination_type, sm_selector, sm_logical_db, pcp_dei_from_port, dummy_bit, enable_l3_qos)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_format_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(13, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 13, 8, int, value)
    @property
    def payloads(self):
        return npl_vlan_format_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 13, npl_vlan_format_table_payloads_t, value)



# API-s for table: vlan_mapping_compound_table

NPL_VLAN_MAPPING_COMPOUND_TABLE_ACTION_VLAN_MAPPING = 0x0

class npl_vlan_mapping_compound_table_vlan_mapping_payload_t(basic_npl_struct):
    def __init__(self, relay_and_l3_lp_attr=0, lp=0, termination=0):
        super().__init__(337)
        self.relay_and_l3_lp_attr = relay_and_l3_lp_attr
        self.lp = lp
        self.termination = termination

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_mapping_compound_table_vlan_mapping_payload_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def relay_and_l3_lp_attr(self):
        return npl_l2_relay_and_l3_lp_attributes_payload_t._get_as_sub_field(self._data, self._offset_in_data + 280)
    @relay_and_l3_lp_attr.setter
    def relay_and_l3_lp_attr(self, value):
        self._set_field_value('field relay_and_l3_lp_attr', 280, 57, npl_l2_relay_and_l3_lp_attributes_payload_t, value)
    @property
    def lp(self):
        return npl_mac_lp_attributes_t._get_as_sub_field(self._data, self._offset_in_data + 120)
    @lp.setter
    def lp(self, value):
        self._set_field_value('field lp', 120, 160, npl_mac_lp_attributes_t, value)
    @property
    def termination(self):
        return npl_base_l3_lp_attr_union_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @termination.setter
    def termination(self, value):
        self._set_field_value('field termination', 0, 120, npl_base_l3_lp_attr_union_t, value)




class npl_vlan_mapping_compound_table_key_t(basic_npl_struct):
    def __init__(self, mac_relay_local_vars_mac_da_compound_termination_control=0, pd_layer_vars_local_slp_id_8_0_=0, mac_af_local_vars_resolved_vlan_tag_vid=0, mac_af_npp_attributes_mac_relay_id=0, mac_af_local_vars_mac_termination_logical_db=0, mac_relay_local_vars_mac_da_prefix=0, packet_ethernet_header_da_32_0_=0):
        super().__init__(86)
        self._set_field_value('const field', 0, 4, int, 0xe)
        self._set_field_value('const field', 39, 7, int, 0x0)
        self.mac_relay_local_vars_mac_da_compound_termination_control = mac_relay_local_vars_mac_da_compound_termination_control
        self.pd_layer_vars_local_slp_id_8_0_ = pd_layer_vars_local_slp_id_8_0_
        self.mac_af_local_vars_resolved_vlan_tag_vid = mac_af_local_vars_resolved_vlan_tag_vid
        self.mac_af_npp_attributes_mac_relay_id = mac_af_npp_attributes_mac_relay_id
        self.mac_af_local_vars_mac_termination_logical_db = mac_af_local_vars_mac_termination_logical_db
        self.mac_relay_local_vars_mac_da_prefix = mac_relay_local_vars_mac_da_prefix
        self.packet_ethernet_header_da_32_0_ = packet_ethernet_header_da_32_0_

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_mapping_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_4b1110_exact_0xe(self):
        return self._get_field_value(0, 4)
    @property
    def mac_relay_local_vars_mac_da_compound_termination_control(self):
        return npl_compound_termination_control_t._get_as_sub_field(self._data, self._offset_in_data + 4)
    @mac_relay_local_vars_mac_da_compound_termination_control.setter
    def mac_relay_local_vars_mac_da_compound_termination_control(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_compound_termination_control', 4, 2, npl_compound_termination_control_t, value)
    @property
    def pd_layer_vars_local_slp_id_8_0_(self):
        return self._get_field_value(6, 9)
    @pd_layer_vars_local_slp_id_8_0_.setter
    def pd_layer_vars_local_slp_id_8_0_(self, value):
        self._set_field_value('field pd_layer_vars_local_slp_id_8_0_', 6, 9, int, value)
    @property
    def mac_af_local_vars_resolved_vlan_tag_vid(self):
        return npl_vlan_id_t._get_as_sub_field(self._data, self._offset_in_data + 15)
    @mac_af_local_vars_resolved_vlan_tag_vid.setter
    def mac_af_local_vars_resolved_vlan_tag_vid(self, value):
        self._set_field_value('field mac_af_local_vars_resolved_vlan_tag_vid', 15, 12, npl_vlan_id_t, value)
    @property
    def mac_af_npp_attributes_mac_relay_id(self):
        return self._get_field_value(27, 12)
    @mac_af_npp_attributes_mac_relay_id.setter
    def mac_af_npp_attributes_mac_relay_id(self, value):
        self._set_field_value('field mac_af_npp_attributes_mac_relay_id', 27, 12, int, value)
    @property
    def const2_7h0_exact_0x0(self):
        return self._get_field_value(39, 7)
    @property
    def mac_af_local_vars_mac_termination_logical_db(self):
        return self._get_field_value(46, 2)
    @mac_af_local_vars_mac_termination_logical_db.setter
    def mac_af_local_vars_mac_termination_logical_db(self, value):
        self._set_field_value('field mac_af_local_vars_mac_termination_logical_db', 46, 2, int, value)
    @property
    def mac_relay_local_vars_mac_da_prefix(self):
        return self._get_field_value(48, 5)
    @mac_relay_local_vars_mac_da_prefix.setter
    def mac_relay_local_vars_mac_da_prefix(self, value):
        self._set_field_value('field mac_relay_local_vars_mac_da_prefix', 48, 5, int, value)
    @property
    def packet_ethernet_header_da_32_0_(self):
        return self._get_field_value(53, 33)
    @packet_ethernet_header_da_32_0_.setter
    def packet_ethernet_header_da_32_0_(self, value):
        self._set_field_value('field packet_ethernet_header_da_32_0_', 53, 33, int, value)

class npl_vlan_mapping_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(337)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_mapping_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vlan_mapping(self):
        return npl_vlan_mapping_compound_table_vlan_mapping_payload_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vlan_mapping.setter
    def vlan_mapping(self, value):
        self._set_field_value('field vlan_mapping', 0, 337, npl_vlan_mapping_compound_table_vlan_mapping_payload_t, value)

class npl_vlan_mapping_compound_table_value_t(basic_npl_struct):
    def __init__(self, relay_and_l3_lp_attr=0, lp=0, termination=0):
        super().__init__(345)
        self.payloads.vlan_mapping = npl_vlan_mapping_compound_table_vlan_mapping_payload_t(relay_and_l3_lp_attr, lp, termination)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_vlan_mapping_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(337, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 337, 8, int, value)
    @property
    def payloads(self):
        return npl_vlan_mapping_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 337, npl_vlan_mapping_compound_table_payloads_t, value)



# API-s for table: vni_compound_table

NPL_VNI_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_vni_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_current__header_2__vxlan_header_vni=0):
        super().__init__(28)
        self._set_field_value('const field', 0, 4, int, 0x8)
        self.packet_protocol_layer_current__header_2__vxlan_header_vni = packet_protocol_layer_current__header_2__vxlan_header_vni

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vni_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_TUNNEL_TERMINATION_VNI_TO_RELAY_LDB_exact_0x8(self):
        return self._get_field_value(0, 4)
    @property
    def packet_protocol_layer_current__header_2__vxlan_header_vni(self):
        return self._get_field_value(4, 24)
    @packet_protocol_layer_current__header_2__vxlan_header_vni.setter
    def packet_protocol_layer_current__header_2__vxlan_header_vni(self, value):
        self._set_field_value('field packet_protocol_layer_current__header_2__vxlan_header_vni', 4, 24, int, value)

class npl_vni_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(38)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vni_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vni_table_result(self):
        return npl_vni_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vni_table_result.setter
    def vni_table_result(self, value):
        self._set_field_value('field vni_table_result', 0, 38, npl_vni_table_result_t, value)

class npl_vni_compound_table_value_t(basic_npl_struct):
    def __init__(self, vni_table_result=0):
        super().__init__(46)
        self.payloads.vni_table_result = vni_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vni_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(38, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 38, 8, int, value)
    @property
    def payloads(self):
        return npl_vni_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 38, npl_vni_compound_table_payloads_t, value)



# API-s for table: vni_table

NPL_VNI_TABLE_ACTION_WRITE = 0x0

class npl_vni_table_key_t(basic_npl_struct):
    def __init__(self, vni=0):
        super().__init__(24)
        self.vni = vni

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vni_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vni(self):
        return self._get_field_value(0, 24)
    @vni.setter
    def vni(self, value):
        self._set_field_value('field vni', 0, 24, int, value)

class npl_vni_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(38)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vni_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vni_table_result(self):
        return npl_vni_table_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vni_table_result.setter
    def vni_table_result(self, value):
        self._set_field_value('field vni_table_result', 0, 38, npl_vni_table_result_t, value)

class npl_vni_table_value_t(basic_npl_struct):
    def __init__(self, vni_table_result=0):
        super().__init__(46)
        self.payloads.vni_table_result = vni_table_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vni_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(38, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 38, 8, int, value)
    @property
    def payloads(self):
        return npl_vni_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 38, npl_vni_table_payloads_t, value)



# API-s for table: voq_cgm_slice_buffers_consumption_lut_for_enq_table

NPL_VOQ_CGM_SLICE_BUFFERS_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE = 0x0

class npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_key_t(basic_npl_struct):
    def __init__(self, buffer_voq_size_level=0, buffer_pool_available_level=0, free_dram_cntx=0, profile_id=0):
        super().__init__(11)
        self.buffer_voq_size_level = buffer_voq_size_level
        self.buffer_pool_available_level = buffer_pool_available_level
        self.free_dram_cntx = free_dram_cntx
        self.profile_id = profile_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def buffer_voq_size_level(self):
        return self._get_field_value(0, 3)
    @buffer_voq_size_level.setter
    def buffer_voq_size_level(self, value):
        self._set_field_value('field buffer_voq_size_level', 0, 3, int, value)
    @property
    def buffer_pool_available_level(self):
        return self._get_field_value(3, 2)
    @buffer_pool_available_level.setter
    def buffer_pool_available_level(self, value):
        self._set_field_value('field buffer_pool_available_level', 3, 2, int, value)
    @property
    def free_dram_cntx(self):
        return self._get_field_value(5, 1)
    @free_dram_cntx.setter
    def free_dram_cntx(self, value):
        self._set_field_value('field free_dram_cntx', 5, 1, int, value)
    @property
    def profile_id(self):
        return npl_voq_profile_len._get_as_sub_field(self._data, self._offset_in_data + 6)
    @profile_id.setter
    def profile_id(self, value):
        self._set_field_value('field profile_id', 6, 5, npl_voq_profile_len, value)

class npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def voq_cgm_slice_buffers_consumption_lut_for_enq_result(self):
        return npl_voq_cgm_slice_buffers_consumption_lut_for_enq_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @voq_cgm_slice_buffers_consumption_lut_for_enq_result.setter
    def voq_cgm_slice_buffers_consumption_lut_for_enq_result(self, value):
        self._set_field_value('field voq_cgm_slice_buffers_consumption_lut_for_enq_result', 0, 64, npl_voq_cgm_slice_buffers_consumption_lut_for_enq_results_t, value)

class npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_value_t(basic_npl_struct):
    def __init__(self, voq_cgm_slice_buffers_consumption_lut_for_enq_result=0):
        super().__init__(72)
        self.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result = voq_cgm_slice_buffers_consumption_lut_for_enq_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_payloads_t, value)



# API-s for table: voq_cgm_slice_dram_cgm_profile_table

NPL_VOQ_CGM_SLICE_DRAM_CGM_PROFILE_TABLE_ACTION_WRITE = 0x0

class npl_voq_cgm_slice_dram_cgm_profile_table_key_t(basic_npl_struct):
    def __init__(self, profile_id=0):
        super().__init__(5)
        self.profile_id = profile_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_dram_cgm_profile_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def profile_id(self):
        return npl_voq_profile_len._get_as_sub_field(self._data, self._offset_in_data + 0)
    @profile_id.setter
    def profile_id(self, value):
        self._set_field_value('field profile_id', 0, 5, npl_voq_profile_len, value)

class npl_voq_cgm_slice_dram_cgm_profile_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(106)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_dram_cgm_profile_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def voq_cgm_slice_dram_cgm_profile_result(self):
        return npl_voq_cgm_slice_dram_cgm_profile_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @voq_cgm_slice_dram_cgm_profile_result.setter
    def voq_cgm_slice_dram_cgm_profile_result(self, value):
        self._set_field_value('field voq_cgm_slice_dram_cgm_profile_result', 0, 106, npl_voq_cgm_slice_dram_cgm_profile_results_t, value)

class npl_voq_cgm_slice_dram_cgm_profile_table_value_t(basic_npl_struct):
    def __init__(self, voq_cgm_slice_dram_cgm_profile_result=0):
        super().__init__(114)
        self.payloads.voq_cgm_slice_dram_cgm_profile_result = voq_cgm_slice_dram_cgm_profile_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_dram_cgm_profile_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(106, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 106, 8, int, value)
    @property
    def payloads(self):
        return npl_voq_cgm_slice_dram_cgm_profile_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 106, npl_voq_cgm_slice_dram_cgm_profile_table_payloads_t, value)



# API-s for table: voq_cgm_slice_pd_consumption_lut_for_enq_table

NPL_VOQ_CGM_SLICE_PD_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE = 0x0

class npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_key_t(basic_npl_struct):
    def __init__(self, pd_voq_fill_level=0, pd_pool_available_level=0, profile_id=0):
        super().__init__(10)
        self.pd_voq_fill_level = pd_voq_fill_level
        self.pd_pool_available_level = pd_pool_available_level
        self.profile_id = profile_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_voq_fill_level(self):
        return self._get_field_value(0, 3)
    @pd_voq_fill_level.setter
    def pd_voq_fill_level(self, value):
        self._set_field_value('field pd_voq_fill_level', 0, 3, int, value)
    @property
    def pd_pool_available_level(self):
        return self._get_field_value(3, 2)
    @pd_pool_available_level.setter
    def pd_pool_available_level(self, value):
        self._set_field_value('field pd_pool_available_level', 3, 2, int, value)
    @property
    def profile_id(self):
        return npl_voq_profile_len._get_as_sub_field(self._data, self._offset_in_data + 5)
    @profile_id.setter
    def profile_id(self, value):
        self._set_field_value('field profile_id', 5, 5, npl_voq_profile_len, value)

class npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(64)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def voq_cgm_slice_pd_consumption_lut_for_enq_result(self):
        return npl_voq_cgm_slice_buffers_consumption_lut_for_enq_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @voq_cgm_slice_pd_consumption_lut_for_enq_result.setter
    def voq_cgm_slice_pd_consumption_lut_for_enq_result(self, value):
        self._set_field_value('field voq_cgm_slice_pd_consumption_lut_for_enq_result', 0, 64, npl_voq_cgm_slice_buffers_consumption_lut_for_enq_results_t, value)

class npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_value_t(basic_npl_struct):
    def __init__(self, voq_cgm_slice_pd_consumption_lut_for_enq_result=0):
        super().__init__(72)
        self.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result = voq_cgm_slice_pd_consumption_lut_for_enq_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(64, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 64, 8, int, value)
    @property
    def payloads(self):
        return npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 64, npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_payloads_t, value)



# API-s for table: voq_cgm_slice_profile_buff_region_thresholds_table

NPL_VOQ_CGM_SLICE_PROFILE_BUFF_REGION_THRESHOLDS_TABLE_ACTION_WRITE = 0x0

class npl_voq_cgm_slice_profile_buff_region_thresholds_table_key_t(basic_npl_struct):
    def __init__(self, profile_id=0):
        super().__init__(5)
        self.profile_id = profile_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_profile_buff_region_thresholds_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def profile_id(self):
        return npl_voq_profile_len._get_as_sub_field(self._data, self._offset_in_data + 0)
    @profile_id.setter
    def profile_id(self, value):
        self._set_field_value('field profile_id', 0, 5, npl_voq_profile_len, value)

class npl_voq_cgm_slice_profile_buff_region_thresholds_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(98)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_profile_buff_region_thresholds_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def voq_cgm_slice_profile_buff_region_thresholds_results(self):
        return npl_voq_cgm_slice_profile_buff_region_thresholds_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @voq_cgm_slice_profile_buff_region_thresholds_results.setter
    def voq_cgm_slice_profile_buff_region_thresholds_results(self, value):
        self._set_field_value('field voq_cgm_slice_profile_buff_region_thresholds_results', 0, 98, npl_voq_cgm_slice_profile_buff_region_thresholds_results_t, value)

class npl_voq_cgm_slice_profile_buff_region_thresholds_table_value_t(basic_npl_struct):
    def __init__(self, voq_cgm_slice_profile_buff_region_thresholds_results=0):
        super().__init__(106)
        self.payloads.voq_cgm_slice_profile_buff_region_thresholds_results = voq_cgm_slice_profile_buff_region_thresholds_results

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_profile_buff_region_thresholds_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(98, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 98, 8, int, value)
    @property
    def payloads(self):
        return npl_voq_cgm_slice_profile_buff_region_thresholds_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 98, npl_voq_cgm_slice_profile_buff_region_thresholds_table_payloads_t, value)



# API-s for table: voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table

NPL_VOQ_CGM_SLICE_PROFILE_PKT_ENQ_TIME_REGION_THRESHOLDS_TABLE_ACTION_WRITE = 0x0

class npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_key_t(basic_npl_struct):
    def __init__(self, profile_id=0):
        super().__init__(5)
        self.profile_id = profile_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def profile_id(self):
        return npl_voq_profile_len._get_as_sub_field(self._data, self._offset_in_data + 0)
    @profile_id.setter
    def profile_id(self, value):
        self._set_field_value('field profile_id', 0, 5, npl_voq_profile_len, value)

class npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(120)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results(self):
        return npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.setter
    def voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results(self, value):
        self._set_field_value('field voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results', 0, 120, npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results_t, value)

class npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_value_t(basic_npl_struct):
    def __init__(self, voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results=0):
        super().__init__(128)
        self.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results = voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(120, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 120, 8, int, value)
    @property
    def payloads(self):
        return npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 120, npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_payloads_t, value)



# API-s for table: voq_cgm_slice_profile_pkt_region_thresholds_table

NPL_VOQ_CGM_SLICE_PROFILE_PKT_REGION_THRESHOLDS_TABLE_ACTION_WRITE = 0x0

class npl_voq_cgm_slice_profile_pkt_region_thresholds_table_key_t(basic_npl_struct):
    def __init__(self, profile_id=0):
        super().__init__(5)
        self.profile_id = profile_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_profile_pkt_region_thresholds_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def profile_id(self):
        return npl_voq_profile_len._get_as_sub_field(self._data, self._offset_in_data + 0)
    @profile_id.setter
    def profile_id(self, value):
        self._set_field_value('field profile_id', 0, 5, npl_voq_profile_len, value)

class npl_voq_cgm_slice_profile_pkt_region_thresholds_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(98)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_profile_pkt_region_thresholds_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def voq_cgm_slice_profile_pkt_region_thresholds_results(self):
        return npl_voq_cgm_slice_profile_pkt_region_thresholds_results_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @voq_cgm_slice_profile_pkt_region_thresholds_results.setter
    def voq_cgm_slice_profile_pkt_region_thresholds_results(self, value):
        self._set_field_value('field voq_cgm_slice_profile_pkt_region_thresholds_results', 0, 98, npl_voq_cgm_slice_profile_pkt_region_thresholds_results_t, value)

class npl_voq_cgm_slice_profile_pkt_region_thresholds_table_value_t(basic_npl_struct):
    def __init__(self, voq_cgm_slice_profile_pkt_region_thresholds_results=0):
        super().__init__(106)
        self.payloads.voq_cgm_slice_profile_pkt_region_thresholds_results = voq_cgm_slice_profile_pkt_region_thresholds_results

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_profile_pkt_region_thresholds_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(98, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 98, 8, int, value)
    @property
    def payloads(self):
        return npl_voq_cgm_slice_profile_pkt_region_thresholds_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 98, npl_voq_cgm_slice_profile_pkt_region_thresholds_table_payloads_t, value)



# API-s for table: voq_cgm_slice_slice_cgm_profile_table

NPL_VOQ_CGM_SLICE_SLICE_CGM_PROFILE_TABLE_ACTION_WRITE = 0x0

class npl_voq_cgm_slice_slice_cgm_profile_table_key_t(basic_npl_struct):
    def __init__(self, profile_id=0):
        super().__init__(5)
        self.profile_id = profile_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_slice_cgm_profile_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def profile_id(self):
        return npl_voq_profile_len._get_as_sub_field(self._data, self._offset_in_data + 0)
    @profile_id.setter
    def profile_id(self, value):
        self._set_field_value('field profile_id', 0, 5, npl_voq_profile_len, value)

class npl_voq_cgm_slice_slice_cgm_profile_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(3)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_slice_cgm_profile_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def voq_cgm_slice_slice_cgm_profile_result(self):
        return npl_voq_cgm_slice_slice_cgm_profile_result_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @voq_cgm_slice_slice_cgm_profile_result.setter
    def voq_cgm_slice_slice_cgm_profile_result(self, value):
        self._set_field_value('field voq_cgm_slice_slice_cgm_profile_result', 0, 3, npl_voq_cgm_slice_slice_cgm_profile_result_t, value)

class npl_voq_cgm_slice_slice_cgm_profile_table_value_t(basic_npl_struct):
    def __init__(self, voq_cgm_slice_slice_cgm_profile_result=0):
        super().__init__(11)
        self.payloads.voq_cgm_slice_slice_cgm_profile_result = voq_cgm_slice_slice_cgm_profile_result

    def _get_as_sub_field(data, offset_in_data):
        result = npl_voq_cgm_slice_slice_cgm_profile_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(3, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 3, 8, int, value)
    @property
    def payloads(self):
        return npl_voq_cgm_slice_slice_cgm_profile_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 3, npl_voq_cgm_slice_slice_cgm_profile_table_payloads_t, value)



# API-s for table: vpn_label_table_compound

NPL_VPN_LABEL_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_vpn_label_table_compound_key_option_vpn_mode_per_vrf_t(basic_npl_struct):
    def __init__(self, device_lsp_vpn_dest_prefix_lkup=0, tx_npu_header_fwd_relay_id_l3_relay_id=0):
        super().__init__(33)
        self.device_lsp_vpn_dest_prefix_lkup = device_lsp_vpn_dest_prefix_lkup
        self.tx_npu_header_fwd_relay_id_l3_relay_id = tx_npu_header_fwd_relay_id_l3_relay_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vpn_label_table_compound_key_option_vpn_mode_per_vrf_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_PER_PE_AND_VRF_VPN_LDB_exact_0x4(self):
        return self._get_field_value(2, 4)
    @property
    def device_lsp_vpn_dest_prefix_lkup(self):
        return self._get_field_value(6, 16)
    @device_lsp_vpn_dest_prefix_lkup.setter
    def device_lsp_vpn_dest_prefix_lkup(self, value):
        self._set_field_value('field device_lsp_vpn_dest_prefix_lkup', 6, 16, int, value)
    @property
    def tx_npu_header_fwd_relay_id_l3_relay_id(self):
        return npl_l3_relay_id_t._get_as_sub_field(self._data, self._offset_in_data + 22)
    @tx_npu_header_fwd_relay_id_l3_relay_id.setter
    def tx_npu_header_fwd_relay_id_l3_relay_id(self, value):
        self._set_field_value('field tx_npu_header_fwd_relay_id_l3_relay_id', 22, 11, npl_l3_relay_id_t, value)



class npl_vpn_label_table_compound_key_option_vpn_mode_per_prefix_t(basic_npl_struct):
    def __init__(self, device_lsp_vpn_dest_prefix_lkup=0, tx_npu_header_ip_destination_encap_ip_prefix_ptr=0):
        super().__init__(39)
        self.device_lsp_vpn_dest_prefix_lkup = device_lsp_vpn_dest_prefix_lkup
        self.tx_npu_header_ip_destination_encap_ip_prefix_ptr = tx_npu_header_ip_destination_encap_ip_prefix_ptr

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vpn_label_table_compound_key_option_vpn_mode_per_prefix_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_LARGE_EM_PER_PE_AND_PREFIX_VPN_LDB_exact_0x5(self):
        return self._get_field_value(2, 4)
    @property
    def device_lsp_vpn_dest_prefix_lkup(self):
        return self._get_field_value(6, 16)
    @device_lsp_vpn_dest_prefix_lkup.setter
    def device_lsp_vpn_dest_prefix_lkup(self, value):
        self._set_field_value('field device_lsp_vpn_dest_prefix_lkup', 6, 16, int, value)
    @property
    def tx_npu_header_ip_destination_encap_ip_prefix_ptr(self):
        return self._get_field_value(22, 17)
    @tx_npu_header_ip_destination_encap_ip_prefix_ptr.setter
    def tx_npu_header_ip_destination_encap_ip_prefix_ptr(self, value):
        self._set_field_value('field tx_npu_header_ip_destination_encap_ip_prefix_ptr', 22, 17, int, value)




class vpn_label_table_compound_key_options_t(basic_npl_struct):
    def __init__(self):
        super().__init__(39 - 0)

    def _get_as_sub_field(data, offset_in_data):
        result = vpn_label_table_compound_key_options_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def NPL_VPN_MODE_PER_VRF(self):
        return npl_vpn_label_table_compound_key_option_vpn_mode_per_vrf_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_VPN_MODE_PER_VRF.setter
    def NPL_VPN_MODE_PER_VRF(self, value):
        self._set_field_value('field NPL_VPN_MODE_PER_VRF', 0, 33, npl_vpn_label_table_compound_key_option_vpn_mode_per_vrf_t, value)
    @property
    def NPL_VPN_MODE_PER_PREFIX(self):
        return npl_vpn_label_table_compound_key_option_vpn_mode_per_prefix_t._get_as_sub_field(self._data, self._offset_in_data)
    @NPL_VPN_MODE_PER_PREFIX.setter
    def NPL_VPN_MODE_PER_PREFIX(self, value):
        self._set_field_value('field NPL_VPN_MODE_PER_PREFIX', 0, 39, npl_vpn_label_table_compound_key_option_vpn_mode_per_prefix_t, value)

class npl_vpn_label_table_compound_key_t(basic_npl_struct):
    def __init__(self, mpls_tx_control_vars_vpn_mode=0):
        super().__init__(39)
        self.mpls_tx_control_vars_vpn_mode = mpls_tx_control_vars_vpn_mode

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vpn_label_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result

    _mpls_tx_control_vars_vpn_mode = 0
    @property
    def mpls_tx_control_vars_vpn_mode(self):
        return self._mpls_tx_control_vars_vpn_mode
    @mpls_tx_control_vars_vpn_mode.setter
    def mpls_tx_control_vars_vpn_mode(self, value):
        self._mpls_tx_control_vars_vpn_mode = value
        if mpls_tx_control_vars_vpn_mode == NPL_VPN_MODE_PER_VRF:
            self._set_field_value('const field', 0, 2, int, 0x1)
        if mpls_tx_control_vars_vpn_mode == NPL_VPN_MODE_PER_VRF:
            self._set_field_value('const field', 2, 4, int, 0x4)
        if mpls_tx_control_vars_vpn_mode == NPL_VPN_MODE_PER_PREFIX:
            self._set_field_value('const field', 0, 2, int, 0x1)
        if mpls_tx_control_vars_vpn_mode == NPL_VPN_MODE_PER_PREFIX:
            self._set_field_value('const field', 2, 4, int, 0x5)

    @property
    def options(self):
        return vpn_label_table_compound_key_options_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @options.setter
    def options(self, value):
        self._set_field_value('field options', 0, 39 - 0, vpn_label_table_compound_key_options_t, value)

class npl_vpn_label_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(76)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vpn_label_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vpn_encap_data(self):
        return npl_vpn_label_encap_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vpn_encap_data.setter
    def vpn_encap_data(self, value):
        self._set_field_value('field vpn_encap_data', 0, 76, npl_vpn_label_encap_data_t, value)

class npl_vpn_label_table_compound_value_t(basic_npl_struct):
    def __init__(self, vpn_encap_data=0):
        super().__init__(84)
        self.payloads.vpn_encap_data = vpn_encap_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vpn_label_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(76, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 76, 8, int, value)
    @property
    def payloads(self):
        return npl_vpn_label_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 76, npl_vpn_label_table_compound_payloads_t, value)



# API-s for table: vsid_compound_table

NPL_VSID_COMPOUND_TABLE_ACTION_WRITE = 0x0

class npl_vsid_compound_table_key_t(basic_npl_struct):
    def __init__(self, packet_protocol_layer_next__gre_header_vsid=0):
        super().__init__(34)
        self._set_field_value('const field', 0, 4, int, 0x1)
        self._set_field_value('const field', 4, 2, int, 0x0)
        self._set_field_value('const field', 6, 4, int, 0xf)
        self.packet_protocol_layer_next__gre_header_vsid = packet_protocol_layer_next__gre_header_vsid

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vsid_compound_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_4b0001_exact_0x1(self):
        return self._get_field_value(0, 4)
    @property
    def const2_2b00_exact_0x0(self):
        return self._get_field_value(4, 2)
    @property
    def const3_SM_LDB_SVID_RELAY_MAPPING_exact_0xf(self):
        return self._get_field_value(6, 4)
    @property
    def packet_protocol_layer_next__gre_header_vsid(self):
        return self._get_field_value(10, 24)
    @packet_protocol_layer_next__gre_header_vsid.setter
    def packet_protocol_layer_next__gre_header_vsid(self, value):
        self._set_field_value('field packet_protocol_layer_next__gre_header_vsid', 10, 24, int, value)

class npl_vsid_compound_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(14)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vsid_compound_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def pd_layer_vars_l2_relay_attributes_id(self):
        return self._get_field_value(0, 14)
    @pd_layer_vars_l2_relay_attributes_id.setter
    def pd_layer_vars_l2_relay_attributes_id(self, value):
        self._set_field_value('field pd_layer_vars_l2_relay_attributes_id', 0, 14, int, value)

class npl_vsid_compound_table_value_t(basic_npl_struct):
    def __init__(self, pd_layer_vars_l2_relay_attributes_id=0):
        super().__init__(22)
        self.payloads.pd_layer_vars_l2_relay_attributes_id = pd_layer_vars_l2_relay_attributes_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vsid_compound_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(14, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 14, 8, int, value)
    @property
    def payloads(self):
        return npl_vsid_compound_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 14, npl_vsid_compound_table_payloads_t, value)



# API-s for table: vsid_table

NPL_VSID_TABLE_ACTION_WRITE = 0x0

class npl_vsid_table_key_t(basic_npl_struct):
    def __init__(self, vsid=0):
        super().__init__(24)
        self.vsid = vsid

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vsid_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vsid(self):
        return self._get_field_value(0, 24)
    @vsid.setter
    def vsid(self, value):
        self._set_field_value('field vsid', 0, 24, int, value)

class npl_vsid_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(14)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vsid_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_relay_attributes_id(self):
        return self._get_field_value(0, 14)
    @l2_relay_attributes_id.setter
    def l2_relay_attributes_id(self, value):
        self._set_field_value('field l2_relay_attributes_id', 0, 14, int, value)

class npl_vsid_table_value_t(basic_npl_struct):
    def __init__(self, l2_relay_attributes_id=0):
        super().__init__(22)
        self.payloads.l2_relay_attributes_id = l2_relay_attributes_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vsid_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(14, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 14, 8, int, value)
    @property
    def payloads(self):
        return npl_vsid_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 14, npl_vsid_table_payloads_t, value)



# API-s for table: vxlan_l2_dlp_table

NPL_VXLAN_L2_DLP_TABLE_ACTION_WRITE = 0x0

class npl_vxlan_l2_dlp_table_key_t(basic_npl_struct):
    def __init__(self, l2_dlp_id_key_id=0):
        super().__init__(18)
        self.l2_dlp_id_key_id = l2_dlp_id_key_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vxlan_l2_dlp_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def l2_dlp_id_key_id(self):
        return self._get_field_value(0, 18)
    @l2_dlp_id_key_id.setter
    def l2_dlp_id_key_id(self, value):
        self._set_field_value('field l2_dlp_id_key_id', 0, 18, int, value)

class npl_vxlan_l2_dlp_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(75)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vxlan_l2_dlp_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vxlan_tunnel_attributes(self):
        return npl_vxlan_dlp_specific_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vxlan_tunnel_attributes.setter
    def vxlan_tunnel_attributes(self, value):
        self._set_field_value('field vxlan_tunnel_attributes', 0, 75, npl_vxlan_dlp_specific_t, value)

class npl_vxlan_l2_dlp_table_value_t(basic_npl_struct):
    def __init__(self, vxlan_tunnel_attributes=0):
        super().__init__(83)
        self.payloads.vxlan_tunnel_attributes = vxlan_tunnel_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vxlan_l2_dlp_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(75, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 75, 8, int, value)
    @property
    def payloads(self):
        return npl_vxlan_l2_dlp_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 75, npl_vxlan_l2_dlp_table_payloads_t, value)



# API-s for table: vxlan_l2_dlp_table_compound

NPL_VXLAN_L2_DLP_TABLE_COMPOUND_ACTION_WRITE = 0x0

class npl_vxlan_l2_dlp_table_compound_key_t(basic_npl_struct):
    def __init__(self, l2_dlp_id_key_id=0):
        super().__init__(24)
        self._set_field_value('const field', 0, 2, int, 0x1)
        self._set_field_value('const field', 2, 4, int, 0x0)
        self.l2_dlp_id_key_id = l2_dlp_id_key_id

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vxlan_l2_dlp_table_compound_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_2b01_exact_0x1(self):
        return self._get_field_value(0, 2)
    @property
    def const2_SMALL_EM_VXLAN_L2_DLP_TABLE_LDB_exact_0x0(self):
        return self._get_field_value(2, 4)
    @property
    def l2_dlp_id_key_id(self):
        return self._get_field_value(6, 18)
    @l2_dlp_id_key_id.setter
    def l2_dlp_id_key_id(self, value):
        self._set_field_value('field l2_dlp_id_key_id', 6, 18, int, value)

class npl_vxlan_l2_dlp_table_compound_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(75)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vxlan_l2_dlp_table_compound_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def vxlan_tunnel_attributes(self):
        return npl_vxlan_dlp_specific_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @vxlan_tunnel_attributes.setter
    def vxlan_tunnel_attributes(self, value):
        self._set_field_value('field vxlan_tunnel_attributes', 0, 75, npl_vxlan_dlp_specific_t, value)

class npl_vxlan_l2_dlp_table_compound_value_t(basic_npl_struct):
    def __init__(self, vxlan_tunnel_attributes=0):
        super().__init__(83)
        self.payloads.vxlan_tunnel_attributes = vxlan_tunnel_attributes

    def _get_as_sub_field(data, offset_in_data):
        result = npl_vxlan_l2_dlp_table_compound_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(75, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 75, 8, int, value)
    @property
    def payloads(self):
        return npl_vxlan_l2_dlp_table_compound_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 75, npl_vxlan_l2_dlp_table_compound_payloads_t, value)



# API-s for table: zero_res_data_pack_table

NPL_ZERO_RES_DATA_PACK_TABLE_ACTION_WRITE = 0x0

class npl_zero_res_data_pack_table_key_t(basic_npl_struct):
    def __init__(self, ):
        super().__init__(1)
        self._set_field_value('const field', 0, 1, int, 0x0)


    def _get_as_sub_field(data, offset_in_data):
        result = npl_zero_res_data_pack_table_key_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def const1_1b0_exact_0x0(self):
        return self._get_field_value(0, 1)

class npl_zero_res_data_pack_table_payloads_t(basic_npl_struct):
    def __init__(self):
        super().__init__(80)

    def _get_as_sub_field(data, offset_in_data):
        result = npl_zero_res_data_pack_table_payloads_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def resolution_enc_data(self):
        return npl_resolution_result_enc_data_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @resolution_enc_data.setter
    def resolution_enc_data(self, value):
        self._set_field_value('field resolution_enc_data', 0, 80, npl_resolution_result_enc_data_t, value)

class npl_zero_res_data_pack_table_value_t(basic_npl_struct):
    def __init__(self, resolution_enc_data=0):
        super().__init__(88)
        self.payloads.resolution_enc_data = resolution_enc_data

    def _get_as_sub_field(data, offset_in_data):
        result = npl_zero_res_data_pack_table_value_t()
        result._set_data_pointer(data, offset_in_data)
        return result
    @property
    def action(self):
        return self._get_field_value(80, 8)
    @action.setter
    def action(self, value):
        self._set_field_value('field action', 80, 8, int, value)
    @property
    def payloads(self):
        return npl_zero_res_data_pack_table_payloads_t._get_as_sub_field(self._data, self._offset_in_data + 0)
    @payloads.setter
    def payloads(self, value):
        self._set_field_value('field payloads', 0, 80, npl_zero_res_data_pack_table_payloads_t, value)




