# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_srmcli')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_srmcli')
    _srmcli = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_srmcli', [dirname(__file__)])
        except ImportError:
            import _srmcli
            return _srmcli
        try:
            _mod = imp.load_module('_srmcli', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _srmcli = swig_import_helper()
    del swig_import_helper
else:
    import _srmcli
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _srmcli.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _srmcli.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _srmcli.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _srmcli.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _srmcli.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _srmcli.SwigPyIterator_equal(self, x)

    def copy(self):
        return _srmcli.SwigPyIterator_copy(self)

    def next(self):
        return _srmcli.SwigPyIterator_next(self)

    def __next__(self):
        return _srmcli.SwigPyIterator___next__(self)

    def previous(self):
        return _srmcli.SwigPyIterator_previous(self)

    def advance(self, n):
        return _srmcli.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _srmcli.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _srmcli.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _srmcli.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _srmcli.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _srmcli.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _srmcli.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _srmcli.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_uint32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, vector_uint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_uint32, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _srmcli.vector_uint32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _srmcli.vector_uint32___nonzero__(self)

    def __bool__(self):
        return _srmcli.vector_uint32___bool__(self)

    def __len__(self):
        return _srmcli.vector_uint32___len__(self)

    def __getslice__(self, i, j):
        return _srmcli.vector_uint32___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _srmcli.vector_uint32___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _srmcli.vector_uint32___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _srmcli.vector_uint32___delitem__(self, *args)

    def __getitem__(self, *args):
        return _srmcli.vector_uint32___getitem__(self, *args)

    def __setitem__(self, *args):
        return _srmcli.vector_uint32___setitem__(self, *args)

    def pop(self):
        return _srmcli.vector_uint32_pop(self)

    def append(self, x):
        return _srmcli.vector_uint32_append(self, x)

    def empty(self):
        return _srmcli.vector_uint32_empty(self)

    def size(self):
        return _srmcli.vector_uint32_size(self)

    def swap(self, v):
        return _srmcli.vector_uint32_swap(self, v)

    def begin(self):
        return _srmcli.vector_uint32_begin(self)

    def end(self):
        return _srmcli.vector_uint32_end(self)

    def rbegin(self):
        return _srmcli.vector_uint32_rbegin(self)

    def rend(self):
        return _srmcli.vector_uint32_rend(self)

    def clear(self):
        return _srmcli.vector_uint32_clear(self)

    def get_allocator(self):
        return _srmcli.vector_uint32_get_allocator(self)

    def pop_back(self):
        return _srmcli.vector_uint32_pop_back(self)

    def erase(self, *args):
        return _srmcli.vector_uint32_erase(self, *args)

    def __init__(self, *args):
        this = _srmcli.new_vector_uint32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _srmcli.vector_uint32_push_back(self, x)

    def front(self):
        return _srmcli.vector_uint32_front(self)

    def back(self):
        return _srmcli.vector_uint32_back(self)

    def assign(self, n, x):
        return _srmcli.vector_uint32_assign(self, n, x)

    def resize(self, *args):
        return _srmcli.vector_uint32_resize(self, *args)

    def insert(self, *args):
        return _srmcli.vector_uint32_insert(self, *args)

    def reserve(self, n):
        return _srmcli.vector_uint32_reserve(self, n)

    def capacity(self):
        return _srmcli.vector_uint32_capacity(self)
    __swig_destroy__ = _srmcli.delete_vector_uint32
    __del__ = lambda self: None
vector_uint32_swigregister = _srmcli.vector_uint32_swigregister
vector_uint32_swigregister(vector_uint32)

class vector_int16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, vector_int16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_int16, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _srmcli.vector_int16_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _srmcli.vector_int16___nonzero__(self)

    def __bool__(self):
        return _srmcli.vector_int16___bool__(self)

    def __len__(self):
        return _srmcli.vector_int16___len__(self)

    def __getslice__(self, i, j):
        return _srmcli.vector_int16___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _srmcli.vector_int16___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _srmcli.vector_int16___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _srmcli.vector_int16___delitem__(self, *args)

    def __getitem__(self, *args):
        return _srmcli.vector_int16___getitem__(self, *args)

    def __setitem__(self, *args):
        return _srmcli.vector_int16___setitem__(self, *args)

    def pop(self):
        return _srmcli.vector_int16_pop(self)

    def append(self, x):
        return _srmcli.vector_int16_append(self, x)

    def empty(self):
        return _srmcli.vector_int16_empty(self)

    def size(self):
        return _srmcli.vector_int16_size(self)

    def swap(self, v):
        return _srmcli.vector_int16_swap(self, v)

    def begin(self):
        return _srmcli.vector_int16_begin(self)

    def end(self):
        return _srmcli.vector_int16_end(self)

    def rbegin(self):
        return _srmcli.vector_int16_rbegin(self)

    def rend(self):
        return _srmcli.vector_int16_rend(self)

    def clear(self):
        return _srmcli.vector_int16_clear(self)

    def get_allocator(self):
        return _srmcli.vector_int16_get_allocator(self)

    def pop_back(self):
        return _srmcli.vector_int16_pop_back(self)

    def erase(self, *args):
        return _srmcli.vector_int16_erase(self, *args)

    def __init__(self, *args):
        this = _srmcli.new_vector_int16(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _srmcli.vector_int16_push_back(self, x)

    def front(self):
        return _srmcli.vector_int16_front(self)

    def back(self):
        return _srmcli.vector_int16_back(self)

    def assign(self, n, x):
        return _srmcli.vector_int16_assign(self, n, x)

    def resize(self, *args):
        return _srmcli.vector_int16_resize(self, *args)

    def insert(self, *args):
        return _srmcli.vector_int16_insert(self, *args)

    def reserve(self, n):
        return _srmcli.vector_int16_reserve(self, n)

    def capacity(self):
        return _srmcli.vector_int16_capacity(self)
    __swig_destroy__ = _srmcli.delete_vector_int16
    __del__ = lambda self: None
vector_int16_swigregister = _srmcli.vector_int16_swigregister
vector_int16_swigregister(vector_int16)


module_name = __name__
module_swig_name = '_%s' % module_name.split('.')[-1]

BaseException = eval(module_swig_name + '.BaseException')
AgainException  = eval(module_swig_name + '.AgainException')
OutOfMemoryException  = eval(module_swig_name + '.OutOfMemoryException')
AccesException  = eval(module_swig_name + '.AccesException')
BusyException  = eval(module_swig_name + '.BusyException')
ExistException  = eval(module_swig_name + '.ExistException')
NoDevException  = eval(module_swig_name + '.NoDevException')
InvalException  = eval(module_swig_name + '.InvalException')
DifferentDevsException  = eval(module_swig_name + '.DifferentDevsException')
ResourceException  = eval(module_swig_name + '.ResourceException')
NotFoundException  = eval(module_swig_name + '.NotFoundException')
NotImplementedException  = eval(module_swig_name + '.NotImplementedException')
UnknownException  = eval(module_swig_name + '.UnknownException')
SizeException  = eval(module_swig_name + '.SizeException')
NotInitializedException  = eval(module_swig_name + '.NotInitializedException')
DoubleFaultException  = eval(module_swig_name + '.DoubleFaultException')
OutOfRangeException  = eval(module_swig_name + '.OutOfRangeException')

error_mode_e_CODE = _srmcli.error_mode_e_CODE
error_mode_e_EXCEPTION = _srmcli.error_mode_e_EXCEPTION
SHARED_PTR_DISOWN = _srmcli.SHARED_PTR_DISOWN

def set_error_mode(mode):
    """set_error_mode(error_mode_e mode)"""
    return _srmcli.set_error_mode(mode)

def get_error_mode():
    """get_error_mode() -> error_mode_e"""
    return _srmcli.get_error_mode()
class bit_vector_dynamic_storage(_object):
    """Proxy of C++ silicon_one::bit_vector_dynamic_storage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, bit_vector_dynamic_storage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector_dynamic_storage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _srmcli.delete_bit_vector_dynamic_storage
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(silicon_one::bit_vector_dynamic_storage self) -> bit_vector_dynamic_storage
        __init__(silicon_one::bit_vector_dynamic_storage self, size_t size, uint64_t value) -> bit_vector_dynamic_storage
        __init__(silicon_one::bit_vector_dynamic_storage self, size_t size, uint64_t *& data) -> bit_vector_dynamic_storage
        __init__(silicon_one::bit_vector_dynamic_storage self, bit_vector_dynamic_storage other) -> bit_vector_dynamic_storage
        """
        this = _srmcli.new_bit_vector_dynamic_storage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        """size(bit_vector_dynamic_storage self) -> size_t"""
        return _srmcli.bit_vector_dynamic_storage_size(self)


    def resize(self, new_size):
        """resize(bit_vector_dynamic_storage self, size_t new_size)"""
        return _srmcli.bit_vector_dynamic_storage_resize(self, new_size)

bit_vector_dynamic_storage_swigregister = _srmcli.bit_vector_dynamic_storage_swigregister
bit_vector_dynamic_storage_swigregister(bit_vector_dynamic_storage)

class bit_vector(_object):
    """Proxy of C++ silicon_one::bit_vector_base<(bit_vector_dynamic_storage)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, bit_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(silicon_one::bit_vector_base<(bit_vector_dynamic_storage)> self) -> bit_vector
        __init__(silicon_one::bit_vector_base<(bit_vector_dynamic_storage)> self, uint64_t value) -> bit_vector
        __init__(silicon_one::bit_vector_base<(bit_vector_dynamic_storage)> self, uint64_t value, size_t width) -> bit_vector
        __init__(silicon_one::bit_vector_base<(bit_vector_dynamic_storage)> self, size_t val_array_sz, uint8_t const * val_array, size_t width) -> bit_vector
        __init__(silicon_one::bit_vector_base<(bit_vector_dynamic_storage)> self, std::string value) -> bit_vector
        __init__(silicon_one::bit_vector_base<(bit_vector_dynamic_storage)> self, std::string value, size_t width) -> bit_vector
        __init__(silicon_one::bit_vector_base<(bit_vector_dynamic_storage)> self, bit_vector other) -> bit_vector
        """
        this = _srmcli.new_bit_vector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ones(width_bits):
        """ones(size_t width_bits) -> bit_vector"""
        return _srmcli.bit_vector_ones(width_bits)

    ones = staticmethod(ones)

    def ones_range(msb, lsb, width_bits):
        """ones_range(size_t msb, size_t lsb, size_t width_bits) -> bit_vector"""
        return _srmcli.bit_vector_ones_range(msb, lsb, width_bits)

    ones_range = staticmethod(ones_range)
    __swig_destroy__ = _srmcli.delete_bit_vector
    __del__ = lambda self: None

    def is_null(self):
        """is_null(bit_vector self) -> bool"""
        return _srmcli.bit_vector_is_null(self)


    def is_zero(self):
        """is_zero(bit_vector self) -> bool"""
        return _srmcli.bit_vector_is_zero(self)


    def get_value(self):
        """get_value(bit_vector self) -> uint64_t"""
        return _srmcli.bit_vector_get_value(self)


    def get_width(self):
        """get_width(bit_vector self) -> size_t"""
        return _srmcli.bit_vector_get_width(self)


    def get_width_in_bytes(self):
        """get_width_in_bytes(bit_vector self) -> size_t"""
        return _srmcli.bit_vector_get_width_in_bytes(self)


    def get_minimal_width(self):
        """get_minimal_width(bit_vector self) -> size_t"""
        return _srmcli.bit_vector_get_minimal_width(self)


    def bits(self, msb, lsb):
        """bits(bit_vector self, size_t msb, size_t lsb) -> bit_vector"""
        return _srmcli.bit_vector_bits(self, msb, lsb)


    def bits_from_msb(self, offset, width):
        """bits_from_msb(bit_vector self, size_t offset, size_t width) -> bit_vector"""
        return _srmcli.bit_vector_bits_from_msb(self, offset, width)


    def bits_from_lsb(self, offset, width):
        """bits_from_lsb(bit_vector self, size_t offset, size_t width) -> bit_vector"""
        return _srmcli.bit_vector_bits_from_lsb(self, offset, width)


    def set_bits(self, msb, lsb, value):
        """set_bits(bit_vector self, size_t msb, size_t lsb, uint64_t value)"""
        return _srmcli.bit_vector_set_bits(self, msb, lsb, value)


    def set_bits_from_msb(self, offset, width, value):
        """set_bits_from_msb(bit_vector self, size_t offset, size_t width, uint64_t value) -> size_t"""
        return _srmcli.bit_vector_set_bits_from_msb(self, offset, width, value)


    def set_bits_from_lsb(self, offset, width, value):
        """set_bits_from_lsb(bit_vector self, size_t offset, size_t width, uint64_t value) -> size_t"""
        return _srmcli.bit_vector_set_bits_from_lsb(self, offset, width, value)


    def resize(self, new_width):
        """resize(bit_vector self, size_t new_width)"""
        return _srmcli.bit_vector_resize(self, new_width)


    def bit(self, pos):
        """bit(bit_vector self, size_t pos) -> bool"""
        return _srmcli.bit_vector_bit(self, pos)


    def bit_from_msb(self, offset):
        """bit_from_msb(bit_vector self, size_t offset) -> bool"""
        return _srmcli.bit_vector_bit_from_msb(self, offset)


    def set_bit(self, pos, val):
        """set_bit(bit_vector self, size_t pos, bool val)"""
        return _srmcli.bit_vector_set_bit(self, pos, val)


    def negate(self):
        """negate(bit_vector self)"""
        return _srmcli.bit_vector_negate(self)


    def __invert__(self):
        """__invert__(bit_vector self) -> bit_vector"""
        return _srmcli.bit_vector___invert__(self)


    def __lshift__(self, shift):
        """__lshift__(bit_vector self, size_t shift) -> bit_vector"""
        return _srmcli.bit_vector___lshift__(self, shift)


    def __rshift__(self, shift):
        """__rshift__(bit_vector self, size_t shift) -> bit_vector"""
        return _srmcli.bit_vector___rshift__(self, shift)


    def to_string(self):
        """to_string(bit_vector self) -> std::string"""
        return _srmcli.bit_vector_to_string(self)


    def byte_array(self):
        """byte_array(bit_vector self) -> uint8_t const *"""
        return _srmcli.bit_vector_byte_array(self)


    def count_ones(self):
        """count_ones(bit_vector self) -> size_t"""
        return _srmcli.bit_vector_count_ones(self)

    BV_ELEMENT_SIZE_IN_BITS = _srmcli.bit_vector_BV_ELEMENT_SIZE_IN_BITS
    BV_BITS_IN_BYTE = _srmcli.bit_vector_BV_BITS_IN_BYTE
    BV_ELEMENT_SIZE_IN_BYTES = _srmcli.bit_vector_BV_ELEMENT_SIZE_IN_BYTES
bit_vector_swigregister = _srmcli.bit_vector_swigregister
bit_vector_swigregister(bit_vector)

def bit_vector_ones(width_bits):
    """bit_vector_ones(size_t width_bits) -> bit_vector"""
    return _srmcli.bit_vector_ones(width_bits)

def bit_vector_ones_range(msb, lsb, width_bits):
    """bit_vector_ones_range(size_t msb, size_t lsb, size_t width_bits) -> bit_vector"""
    return _srmcli.bit_vector_ones_range(msb, lsb, width_bits)

class bit_vector_static_storage_1(_object):
    """Proxy of C++ silicon_one::bit_vector_static_storage<(1)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, bit_vector_static_storage_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector_static_storage_1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(silicon_one::bit_vector_static_storage<(1)> self) -> bit_vector_static_storage_1
        __init__(silicon_one::bit_vector_static_storage<(1)> self, size_t size, uint64_t value) -> bit_vector_static_storage_1
        """
        this = _srmcli.new_bit_vector_static_storage_1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        """size(bit_vector_static_storage_1 self) -> size_t"""
        return _srmcli.bit_vector_static_storage_1_size(self)


    def resize(self, new_size):
        """resize(bit_vector_static_storage_1 self, uint8_t new_size)"""
        return _srmcli.bit_vector_static_storage_1_resize(self, new_size)

    __swig_destroy__ = _srmcli.delete_bit_vector_static_storage_1
    __del__ = lambda self: None
bit_vector_static_storage_1_swigregister = _srmcli.bit_vector_static_storage_1_swigregister
bit_vector_static_storage_1_swigregister(bit_vector_static_storage_1)

class bit_vector_static_storage_2(_object):
    """Proxy of C++ silicon_one::bit_vector_static_storage<(2)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, bit_vector_static_storage_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector_static_storage_2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(silicon_one::bit_vector_static_storage<(2)> self) -> bit_vector_static_storage_2
        __init__(silicon_one::bit_vector_static_storage<(2)> self, size_t size, uint64_t value) -> bit_vector_static_storage_2
        """
        this = _srmcli.new_bit_vector_static_storage_2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        """size(bit_vector_static_storage_2 self) -> size_t"""
        return _srmcli.bit_vector_static_storage_2_size(self)


    def resize(self, new_size):
        """resize(bit_vector_static_storage_2 self, uint8_t new_size)"""
        return _srmcli.bit_vector_static_storage_2_resize(self, new_size)

    __swig_destroy__ = _srmcli.delete_bit_vector_static_storage_2
    __del__ = lambda self: None
bit_vector_static_storage_2_swigregister = _srmcli.bit_vector_static_storage_2_swigregister
bit_vector_static_storage_2_swigregister(bit_vector_static_storage_2)

class bit_vector_static_storage_3(_object):
    """Proxy of C++ silicon_one::bit_vector_static_storage<(3)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, bit_vector_static_storage_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector_static_storage_3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(silicon_one::bit_vector_static_storage<(3)> self) -> bit_vector_static_storage_3
        __init__(silicon_one::bit_vector_static_storage<(3)> self, size_t size, uint64_t value) -> bit_vector_static_storage_3
        """
        this = _srmcli.new_bit_vector_static_storage_3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        """size(bit_vector_static_storage_3 self) -> size_t"""
        return _srmcli.bit_vector_static_storage_3_size(self)


    def resize(self, new_size):
        """resize(bit_vector_static_storage_3 self, uint8_t new_size)"""
        return _srmcli.bit_vector_static_storage_3_resize(self, new_size)

    __swig_destroy__ = _srmcli.delete_bit_vector_static_storage_3
    __del__ = lambda self: None
bit_vector_static_storage_3_swigregister = _srmcli.bit_vector_static_storage_3_swigregister
bit_vector_static_storage_3_swigregister(bit_vector_static_storage_3)

class bit_vector_static_storage_6(_object):
    """Proxy of C++ silicon_one::bit_vector_static_storage<(6)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, bit_vector_static_storage_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector_static_storage_6, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(silicon_one::bit_vector_static_storage<(6)> self) -> bit_vector_static_storage_6
        __init__(silicon_one::bit_vector_static_storage<(6)> self, size_t size, uint64_t value) -> bit_vector_static_storage_6
        """
        this = _srmcli.new_bit_vector_static_storage_6(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        """size(bit_vector_static_storage_6 self) -> size_t"""
        return _srmcli.bit_vector_static_storage_6_size(self)


    def resize(self, new_size):
        """resize(bit_vector_static_storage_6 self, uint8_t new_size)"""
        return _srmcli.bit_vector_static_storage_6_resize(self, new_size)

    __swig_destroy__ = _srmcli.delete_bit_vector_static_storage_6
    __del__ = lambda self: None
bit_vector_static_storage_6_swigregister = _srmcli.bit_vector_static_storage_6_swigregister
bit_vector_static_storage_6_swigregister(bit_vector_static_storage_6)

class bit_vector64_t(_object):
    """Proxy of C++ silicon_one::bit_vector_base<(bit_vector_static_storage_1)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, bit_vector64_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector64_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_1)> self) -> bit_vector64_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_1)> self, uint64_t value) -> bit_vector64_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_1)> self, uint64_t value, size_t width) -> bit_vector64_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_1)> self, size_t val_array_sz, uint8_t const * val_array, size_t width) -> bit_vector64_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_1)> self, std::string value) -> bit_vector64_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_1)> self, std::string value, size_t width) -> bit_vector64_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_1)> self, bit_vector64_t other) -> bit_vector64_t
        """
        this = _srmcli.new_bit_vector64_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ones(width_bits):
        """ones(size_t width_bits) -> bit_vector64_t"""
        return _srmcli.bit_vector64_t_ones(width_bits)

    ones = staticmethod(ones)

    def ones_range(msb, lsb, width_bits):
        """ones_range(size_t msb, size_t lsb, size_t width_bits) -> bit_vector64_t"""
        return _srmcli.bit_vector64_t_ones_range(msb, lsb, width_bits)

    ones_range = staticmethod(ones_range)
    __swig_destroy__ = _srmcli.delete_bit_vector64_t
    __del__ = lambda self: None

    def is_null(self):
        """is_null(bit_vector64_t self) -> bool"""
        return _srmcli.bit_vector64_t_is_null(self)


    def is_zero(self):
        """is_zero(bit_vector64_t self) -> bool"""
        return _srmcli.bit_vector64_t_is_zero(self)


    def get_value(self):
        """get_value(bit_vector64_t self) -> uint64_t"""
        return _srmcli.bit_vector64_t_get_value(self)


    def get_width(self):
        """get_width(bit_vector64_t self) -> size_t"""
        return _srmcli.bit_vector64_t_get_width(self)


    def get_width_in_bytes(self):
        """get_width_in_bytes(bit_vector64_t self) -> size_t"""
        return _srmcli.bit_vector64_t_get_width_in_bytes(self)


    def get_minimal_width(self):
        """get_minimal_width(bit_vector64_t self) -> size_t"""
        return _srmcli.bit_vector64_t_get_minimal_width(self)


    def bits(self, msb, lsb):
        """bits(bit_vector64_t self, size_t msb, size_t lsb) -> bit_vector64_t"""
        return _srmcli.bit_vector64_t_bits(self, msb, lsb)


    def bits_from_msb(self, offset, width):
        """bits_from_msb(bit_vector64_t self, size_t offset, size_t width) -> bit_vector64_t"""
        return _srmcli.bit_vector64_t_bits_from_msb(self, offset, width)


    def bits_from_lsb(self, offset, width):
        """bits_from_lsb(bit_vector64_t self, size_t offset, size_t width) -> bit_vector64_t"""
        return _srmcli.bit_vector64_t_bits_from_lsb(self, offset, width)


    def set_bits(self, msb, lsb, value):
        """set_bits(bit_vector64_t self, size_t msb, size_t lsb, uint64_t value)"""
        return _srmcli.bit_vector64_t_set_bits(self, msb, lsb, value)


    def set_bits_from_msb(self, offset, width, value):
        """set_bits_from_msb(bit_vector64_t self, size_t offset, size_t width, uint64_t value) -> size_t"""
        return _srmcli.bit_vector64_t_set_bits_from_msb(self, offset, width, value)


    def set_bits_from_lsb(self, offset, width, value):
        """set_bits_from_lsb(bit_vector64_t self, size_t offset, size_t width, uint64_t value) -> size_t"""
        return _srmcli.bit_vector64_t_set_bits_from_lsb(self, offset, width, value)


    def resize(self, new_width):
        """resize(bit_vector64_t self, size_t new_width)"""
        return _srmcli.bit_vector64_t_resize(self, new_width)


    def bit(self, pos):
        """bit(bit_vector64_t self, size_t pos) -> bool"""
        return _srmcli.bit_vector64_t_bit(self, pos)


    def bit_from_msb(self, offset):
        """bit_from_msb(bit_vector64_t self, size_t offset) -> bool"""
        return _srmcli.bit_vector64_t_bit_from_msb(self, offset)


    def set_bit(self, pos, val):
        """set_bit(bit_vector64_t self, size_t pos, bool val)"""
        return _srmcli.bit_vector64_t_set_bit(self, pos, val)


    def negate(self):
        """negate(bit_vector64_t self)"""
        return _srmcli.bit_vector64_t_negate(self)


    def __invert__(self):
        """__invert__(bit_vector64_t self) -> bit_vector64_t"""
        return _srmcli.bit_vector64_t___invert__(self)


    def __lshift__(self, shift):
        """__lshift__(bit_vector64_t self, size_t shift) -> bit_vector64_t"""
        return _srmcli.bit_vector64_t___lshift__(self, shift)


    def __rshift__(self, shift):
        """__rshift__(bit_vector64_t self, size_t shift) -> bit_vector64_t"""
        return _srmcli.bit_vector64_t___rshift__(self, shift)


    def to_string(self):
        """to_string(bit_vector64_t self) -> std::string"""
        return _srmcli.bit_vector64_t_to_string(self)


    def byte_array(self):
        """byte_array(bit_vector64_t self) -> uint8_t const *"""
        return _srmcli.bit_vector64_t_byte_array(self)


    def count_ones(self):
        """count_ones(bit_vector64_t self) -> size_t"""
        return _srmcli.bit_vector64_t_count_ones(self)

    BV_ELEMENT_SIZE_IN_BITS = _srmcli.bit_vector64_t_BV_ELEMENT_SIZE_IN_BITS
    BV_BITS_IN_BYTE = _srmcli.bit_vector64_t_BV_BITS_IN_BYTE
    BV_ELEMENT_SIZE_IN_BYTES = _srmcli.bit_vector64_t_BV_ELEMENT_SIZE_IN_BYTES
bit_vector64_t_swigregister = _srmcli.bit_vector64_t_swigregister
bit_vector64_t_swigregister(bit_vector64_t)

def bit_vector64_t_ones(width_bits):
    """bit_vector64_t_ones(size_t width_bits) -> bit_vector64_t"""
    return _srmcli.bit_vector64_t_ones(width_bits)

def bit_vector64_t_ones_range(msb, lsb, width_bits):
    """bit_vector64_t_ones_range(size_t msb, size_t lsb, size_t width_bits) -> bit_vector64_t"""
    return _srmcli.bit_vector64_t_ones_range(msb, lsb, width_bits)

class bit_vector128_t(_object):
    """Proxy of C++ silicon_one::bit_vector_base<(bit_vector_static_storage_2)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, bit_vector128_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector128_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_2)> self) -> bit_vector128_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_2)> self, uint64_t value) -> bit_vector128_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_2)> self, uint64_t value, size_t width) -> bit_vector128_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_2)> self, size_t val_array_sz, uint8_t const * val_array, size_t width) -> bit_vector128_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_2)> self, std::string value) -> bit_vector128_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_2)> self, std::string value, size_t width) -> bit_vector128_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_2)> self, bit_vector128_t other) -> bit_vector128_t
        """
        this = _srmcli.new_bit_vector128_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ones(width_bits):
        """ones(size_t width_bits) -> bit_vector128_t"""
        return _srmcli.bit_vector128_t_ones(width_bits)

    ones = staticmethod(ones)

    def ones_range(msb, lsb, width_bits):
        """ones_range(size_t msb, size_t lsb, size_t width_bits) -> bit_vector128_t"""
        return _srmcli.bit_vector128_t_ones_range(msb, lsb, width_bits)

    ones_range = staticmethod(ones_range)
    __swig_destroy__ = _srmcli.delete_bit_vector128_t
    __del__ = lambda self: None

    def is_null(self):
        """is_null(bit_vector128_t self) -> bool"""
        return _srmcli.bit_vector128_t_is_null(self)


    def is_zero(self):
        """is_zero(bit_vector128_t self) -> bool"""
        return _srmcli.bit_vector128_t_is_zero(self)


    def get_value(self):
        """get_value(bit_vector128_t self) -> uint64_t"""
        return _srmcli.bit_vector128_t_get_value(self)


    def get_width(self):
        """get_width(bit_vector128_t self) -> size_t"""
        return _srmcli.bit_vector128_t_get_width(self)


    def get_width_in_bytes(self):
        """get_width_in_bytes(bit_vector128_t self) -> size_t"""
        return _srmcli.bit_vector128_t_get_width_in_bytes(self)


    def get_minimal_width(self):
        """get_minimal_width(bit_vector128_t self) -> size_t"""
        return _srmcli.bit_vector128_t_get_minimal_width(self)


    def bits(self, msb, lsb):
        """bits(bit_vector128_t self, size_t msb, size_t lsb) -> bit_vector128_t"""
        return _srmcli.bit_vector128_t_bits(self, msb, lsb)


    def bits_from_msb(self, offset, width):
        """bits_from_msb(bit_vector128_t self, size_t offset, size_t width) -> bit_vector128_t"""
        return _srmcli.bit_vector128_t_bits_from_msb(self, offset, width)


    def bits_from_lsb(self, offset, width):
        """bits_from_lsb(bit_vector128_t self, size_t offset, size_t width) -> bit_vector128_t"""
        return _srmcli.bit_vector128_t_bits_from_lsb(self, offset, width)


    def set_bits(self, msb, lsb, value):
        """set_bits(bit_vector128_t self, size_t msb, size_t lsb, uint64_t value)"""
        return _srmcli.bit_vector128_t_set_bits(self, msb, lsb, value)


    def set_bits_from_msb(self, offset, width, value):
        """set_bits_from_msb(bit_vector128_t self, size_t offset, size_t width, uint64_t value) -> size_t"""
        return _srmcli.bit_vector128_t_set_bits_from_msb(self, offset, width, value)


    def set_bits_from_lsb(self, offset, width, value):
        """set_bits_from_lsb(bit_vector128_t self, size_t offset, size_t width, uint64_t value) -> size_t"""
        return _srmcli.bit_vector128_t_set_bits_from_lsb(self, offset, width, value)


    def resize(self, new_width):
        """resize(bit_vector128_t self, size_t new_width)"""
        return _srmcli.bit_vector128_t_resize(self, new_width)


    def bit(self, pos):
        """bit(bit_vector128_t self, size_t pos) -> bool"""
        return _srmcli.bit_vector128_t_bit(self, pos)


    def bit_from_msb(self, offset):
        """bit_from_msb(bit_vector128_t self, size_t offset) -> bool"""
        return _srmcli.bit_vector128_t_bit_from_msb(self, offset)


    def set_bit(self, pos, val):
        """set_bit(bit_vector128_t self, size_t pos, bool val)"""
        return _srmcli.bit_vector128_t_set_bit(self, pos, val)


    def negate(self):
        """negate(bit_vector128_t self)"""
        return _srmcli.bit_vector128_t_negate(self)


    def __invert__(self):
        """__invert__(bit_vector128_t self) -> bit_vector128_t"""
        return _srmcli.bit_vector128_t___invert__(self)


    def __lshift__(self, shift):
        """__lshift__(bit_vector128_t self, size_t shift) -> bit_vector128_t"""
        return _srmcli.bit_vector128_t___lshift__(self, shift)


    def __rshift__(self, shift):
        """__rshift__(bit_vector128_t self, size_t shift) -> bit_vector128_t"""
        return _srmcli.bit_vector128_t___rshift__(self, shift)


    def to_string(self):
        """to_string(bit_vector128_t self) -> std::string"""
        return _srmcli.bit_vector128_t_to_string(self)


    def byte_array(self):
        """byte_array(bit_vector128_t self) -> uint8_t const *"""
        return _srmcli.bit_vector128_t_byte_array(self)


    def count_ones(self):
        """count_ones(bit_vector128_t self) -> size_t"""
        return _srmcli.bit_vector128_t_count_ones(self)

    BV_ELEMENT_SIZE_IN_BITS = _srmcli.bit_vector128_t_BV_ELEMENT_SIZE_IN_BITS
    BV_BITS_IN_BYTE = _srmcli.bit_vector128_t_BV_BITS_IN_BYTE
    BV_ELEMENT_SIZE_IN_BYTES = _srmcli.bit_vector128_t_BV_ELEMENT_SIZE_IN_BYTES
bit_vector128_t_swigregister = _srmcli.bit_vector128_t_swigregister
bit_vector128_t_swigregister(bit_vector128_t)

def bit_vector128_t_ones(width_bits):
    """bit_vector128_t_ones(size_t width_bits) -> bit_vector128_t"""
    return _srmcli.bit_vector128_t_ones(width_bits)

def bit_vector128_t_ones_range(msb, lsb, width_bits):
    """bit_vector128_t_ones_range(size_t msb, size_t lsb, size_t width_bits) -> bit_vector128_t"""
    return _srmcli.bit_vector128_t_ones_range(msb, lsb, width_bits)

class bit_vector192_t(_object):
    """Proxy of C++ silicon_one::bit_vector_base<(bit_vector_static_storage_3)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, bit_vector192_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector192_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_3)> self) -> bit_vector192_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_3)> self, uint64_t value) -> bit_vector192_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_3)> self, uint64_t value, size_t width) -> bit_vector192_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_3)> self, size_t val_array_sz, uint8_t const * val_array, size_t width) -> bit_vector192_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_3)> self, std::string value) -> bit_vector192_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_3)> self, std::string value, size_t width) -> bit_vector192_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_3)> self, bit_vector192_t other) -> bit_vector192_t
        """
        this = _srmcli.new_bit_vector192_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ones(width_bits):
        """ones(size_t width_bits) -> bit_vector192_t"""
        return _srmcli.bit_vector192_t_ones(width_bits)

    ones = staticmethod(ones)

    def ones_range(msb, lsb, width_bits):
        """ones_range(size_t msb, size_t lsb, size_t width_bits) -> bit_vector192_t"""
        return _srmcli.bit_vector192_t_ones_range(msb, lsb, width_bits)

    ones_range = staticmethod(ones_range)
    __swig_destroy__ = _srmcli.delete_bit_vector192_t
    __del__ = lambda self: None

    def is_null(self):
        """is_null(bit_vector192_t self) -> bool"""
        return _srmcli.bit_vector192_t_is_null(self)


    def is_zero(self):
        """is_zero(bit_vector192_t self) -> bool"""
        return _srmcli.bit_vector192_t_is_zero(self)


    def get_value(self):
        """get_value(bit_vector192_t self) -> uint64_t"""
        return _srmcli.bit_vector192_t_get_value(self)


    def get_width(self):
        """get_width(bit_vector192_t self) -> size_t"""
        return _srmcli.bit_vector192_t_get_width(self)


    def get_width_in_bytes(self):
        """get_width_in_bytes(bit_vector192_t self) -> size_t"""
        return _srmcli.bit_vector192_t_get_width_in_bytes(self)


    def get_minimal_width(self):
        """get_minimal_width(bit_vector192_t self) -> size_t"""
        return _srmcli.bit_vector192_t_get_minimal_width(self)


    def bits(self, msb, lsb):
        """bits(bit_vector192_t self, size_t msb, size_t lsb) -> bit_vector192_t"""
        return _srmcli.bit_vector192_t_bits(self, msb, lsb)


    def bits_from_msb(self, offset, width):
        """bits_from_msb(bit_vector192_t self, size_t offset, size_t width) -> bit_vector192_t"""
        return _srmcli.bit_vector192_t_bits_from_msb(self, offset, width)


    def bits_from_lsb(self, offset, width):
        """bits_from_lsb(bit_vector192_t self, size_t offset, size_t width) -> bit_vector192_t"""
        return _srmcli.bit_vector192_t_bits_from_lsb(self, offset, width)


    def set_bits(self, msb, lsb, value):
        """set_bits(bit_vector192_t self, size_t msb, size_t lsb, uint64_t value)"""
        return _srmcli.bit_vector192_t_set_bits(self, msb, lsb, value)


    def set_bits_from_msb(self, offset, width, value):
        """set_bits_from_msb(bit_vector192_t self, size_t offset, size_t width, uint64_t value) -> size_t"""
        return _srmcli.bit_vector192_t_set_bits_from_msb(self, offset, width, value)


    def set_bits_from_lsb(self, offset, width, value):
        """set_bits_from_lsb(bit_vector192_t self, size_t offset, size_t width, uint64_t value) -> size_t"""
        return _srmcli.bit_vector192_t_set_bits_from_lsb(self, offset, width, value)


    def resize(self, new_width):
        """resize(bit_vector192_t self, size_t new_width)"""
        return _srmcli.bit_vector192_t_resize(self, new_width)


    def bit(self, pos):
        """bit(bit_vector192_t self, size_t pos) -> bool"""
        return _srmcli.bit_vector192_t_bit(self, pos)


    def bit_from_msb(self, offset):
        """bit_from_msb(bit_vector192_t self, size_t offset) -> bool"""
        return _srmcli.bit_vector192_t_bit_from_msb(self, offset)


    def set_bit(self, pos, val):
        """set_bit(bit_vector192_t self, size_t pos, bool val)"""
        return _srmcli.bit_vector192_t_set_bit(self, pos, val)


    def negate(self):
        """negate(bit_vector192_t self)"""
        return _srmcli.bit_vector192_t_negate(self)


    def __invert__(self):
        """__invert__(bit_vector192_t self) -> bit_vector192_t"""
        return _srmcli.bit_vector192_t___invert__(self)


    def __lshift__(self, shift):
        """__lshift__(bit_vector192_t self, size_t shift) -> bit_vector192_t"""
        return _srmcli.bit_vector192_t___lshift__(self, shift)


    def __rshift__(self, shift):
        """__rshift__(bit_vector192_t self, size_t shift) -> bit_vector192_t"""
        return _srmcli.bit_vector192_t___rshift__(self, shift)


    def to_string(self):
        """to_string(bit_vector192_t self) -> std::string"""
        return _srmcli.bit_vector192_t_to_string(self)


    def byte_array(self):
        """byte_array(bit_vector192_t self) -> uint8_t const *"""
        return _srmcli.bit_vector192_t_byte_array(self)


    def count_ones(self):
        """count_ones(bit_vector192_t self) -> size_t"""
        return _srmcli.bit_vector192_t_count_ones(self)

    BV_ELEMENT_SIZE_IN_BITS = _srmcli.bit_vector192_t_BV_ELEMENT_SIZE_IN_BITS
    BV_BITS_IN_BYTE = _srmcli.bit_vector192_t_BV_BITS_IN_BYTE
    BV_ELEMENT_SIZE_IN_BYTES = _srmcli.bit_vector192_t_BV_ELEMENT_SIZE_IN_BYTES
bit_vector192_t_swigregister = _srmcli.bit_vector192_t_swigregister
bit_vector192_t_swigregister(bit_vector192_t)

def bit_vector192_t_ones(width_bits):
    """bit_vector192_t_ones(size_t width_bits) -> bit_vector192_t"""
    return _srmcli.bit_vector192_t_ones(width_bits)

def bit_vector192_t_ones_range(msb, lsb, width_bits):
    """bit_vector192_t_ones_range(size_t msb, size_t lsb, size_t width_bits) -> bit_vector192_t"""
    return _srmcli.bit_vector192_t_ones_range(msb, lsb, width_bits)

class bit_vector384_t(_object):
    """Proxy of C++ silicon_one::bit_vector_base<(bit_vector_static_storage_6)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, bit_vector384_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bit_vector384_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_6)> self) -> bit_vector384_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_6)> self, uint64_t value) -> bit_vector384_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_6)> self, uint64_t value, size_t width) -> bit_vector384_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_6)> self, size_t val_array_sz, uint8_t const * val_array, size_t width) -> bit_vector384_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_6)> self, std::string value) -> bit_vector384_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_6)> self, std::string value, size_t width) -> bit_vector384_t
        __init__(silicon_one::bit_vector_base<(bit_vector_static_storage_6)> self, bit_vector384_t other) -> bit_vector384_t
        """
        this = _srmcli.new_bit_vector384_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ones(width_bits):
        """ones(size_t width_bits) -> bit_vector384_t"""
        return _srmcli.bit_vector384_t_ones(width_bits)

    ones = staticmethod(ones)

    def ones_range(msb, lsb, width_bits):
        """ones_range(size_t msb, size_t lsb, size_t width_bits) -> bit_vector384_t"""
        return _srmcli.bit_vector384_t_ones_range(msb, lsb, width_bits)

    ones_range = staticmethod(ones_range)
    __swig_destroy__ = _srmcli.delete_bit_vector384_t
    __del__ = lambda self: None

    def is_null(self):
        """is_null(bit_vector384_t self) -> bool"""
        return _srmcli.bit_vector384_t_is_null(self)


    def is_zero(self):
        """is_zero(bit_vector384_t self) -> bool"""
        return _srmcli.bit_vector384_t_is_zero(self)


    def get_value(self):
        """get_value(bit_vector384_t self) -> uint64_t"""
        return _srmcli.bit_vector384_t_get_value(self)


    def get_width(self):
        """get_width(bit_vector384_t self) -> size_t"""
        return _srmcli.bit_vector384_t_get_width(self)


    def get_width_in_bytes(self):
        """get_width_in_bytes(bit_vector384_t self) -> size_t"""
        return _srmcli.bit_vector384_t_get_width_in_bytes(self)


    def get_minimal_width(self):
        """get_minimal_width(bit_vector384_t self) -> size_t"""
        return _srmcli.bit_vector384_t_get_minimal_width(self)


    def bits(self, msb, lsb):
        """bits(bit_vector384_t self, size_t msb, size_t lsb) -> bit_vector384_t"""
        return _srmcli.bit_vector384_t_bits(self, msb, lsb)


    def bits_from_msb(self, offset, width):
        """bits_from_msb(bit_vector384_t self, size_t offset, size_t width) -> bit_vector384_t"""
        return _srmcli.bit_vector384_t_bits_from_msb(self, offset, width)


    def bits_from_lsb(self, offset, width):
        """bits_from_lsb(bit_vector384_t self, size_t offset, size_t width) -> bit_vector384_t"""
        return _srmcli.bit_vector384_t_bits_from_lsb(self, offset, width)


    def set_bits(self, msb, lsb, value):
        """set_bits(bit_vector384_t self, size_t msb, size_t lsb, uint64_t value)"""
        return _srmcli.bit_vector384_t_set_bits(self, msb, lsb, value)


    def set_bits_from_msb(self, offset, width, value):
        """set_bits_from_msb(bit_vector384_t self, size_t offset, size_t width, uint64_t value) -> size_t"""
        return _srmcli.bit_vector384_t_set_bits_from_msb(self, offset, width, value)


    def set_bits_from_lsb(self, offset, width, value):
        """set_bits_from_lsb(bit_vector384_t self, size_t offset, size_t width, uint64_t value) -> size_t"""
        return _srmcli.bit_vector384_t_set_bits_from_lsb(self, offset, width, value)


    def resize(self, new_width):
        """resize(bit_vector384_t self, size_t new_width)"""
        return _srmcli.bit_vector384_t_resize(self, new_width)


    def bit(self, pos):
        """bit(bit_vector384_t self, size_t pos) -> bool"""
        return _srmcli.bit_vector384_t_bit(self, pos)


    def bit_from_msb(self, offset):
        """bit_from_msb(bit_vector384_t self, size_t offset) -> bool"""
        return _srmcli.bit_vector384_t_bit_from_msb(self, offset)


    def set_bit(self, pos, val):
        """set_bit(bit_vector384_t self, size_t pos, bool val)"""
        return _srmcli.bit_vector384_t_set_bit(self, pos, val)


    def negate(self):
        """negate(bit_vector384_t self)"""
        return _srmcli.bit_vector384_t_negate(self)


    def __invert__(self):
        """__invert__(bit_vector384_t self) -> bit_vector384_t"""
        return _srmcli.bit_vector384_t___invert__(self)


    def __lshift__(self, shift):
        """__lshift__(bit_vector384_t self, size_t shift) -> bit_vector384_t"""
        return _srmcli.bit_vector384_t___lshift__(self, shift)


    def __rshift__(self, shift):
        """__rshift__(bit_vector384_t self, size_t shift) -> bit_vector384_t"""
        return _srmcli.bit_vector384_t___rshift__(self, shift)


    def to_string(self):
        """to_string(bit_vector384_t self) -> std::string"""
        return _srmcli.bit_vector384_t_to_string(self)


    def byte_array(self):
        """byte_array(bit_vector384_t self) -> uint8_t const *"""
        return _srmcli.bit_vector384_t_byte_array(self)


    def count_ones(self):
        """count_ones(bit_vector384_t self) -> size_t"""
        return _srmcli.bit_vector384_t_count_ones(self)

    BV_ELEMENT_SIZE_IN_BITS = _srmcli.bit_vector384_t_BV_ELEMENT_SIZE_IN_BITS
    BV_BITS_IN_BYTE = _srmcli.bit_vector384_t_BV_BITS_IN_BYTE
    BV_ELEMENT_SIZE_IN_BYTES = _srmcli.bit_vector384_t_BV_ELEMENT_SIZE_IN_BYTES
bit_vector384_t_swigregister = _srmcli.bit_vector384_t_swigregister
bit_vector384_t_swigregister(bit_vector384_t)

def bit_vector384_t_ones(width_bits):
    """bit_vector384_t_ones(size_t width_bits) -> bit_vector384_t"""
    return _srmcli.bit_vector384_t_ones(width_bits)

def bit_vector384_t_ones_range(msb, lsb, width_bits):
    """bit_vector384_t_ones_range(size_t msb, size_t lsb, size_t width_bits) -> bit_vector384_t"""
    return _srmcli.bit_vector384_t_ones_range(msb, lsb, width_bits)


def get_full_value(self):
    return int(self.to_string(), 16)

bit_vector.get_value = get_full_value
bit_vector64_t.get_value = get_full_value
bit_vector128_t.get_value = get_full_value
bit_vector192_t.get_value = get_full_value
bit_vector384_t.get_value = get_full_value

SRM_MCU_IRAM_BASE_ADDR = _srmcli.SRM_MCU_IRAM_BASE_ADDR
SRM_MCU_IRAM_SIZE = _srmcli.SRM_MCU_IRAM_SIZE
SRM_MCU_DRAM_BASE_ADDR = _srmcli.SRM_MCU_DRAM_BASE_ADDR
SRM_MCU_DRAM_SIZE = _srmcli.SRM_MCU_DRAM_SIZE
SRM_BROADCAST_CHANNEL = _srmcli.SRM_BROADCAST_CHANNEL
SRM_ACK_WAIT_MAX = _srmcli.SRM_ACK_WAIT_MAX
SRM_PLL_SYNC_WAIT_MAX = _srmcli.SRM_PLL_SYNC_WAIT_MAX
SRM_HW_REVA = _srmcli.SRM_HW_REVA
SRM_HW_REVB = _srmcli.SRM_HW_REVB

def srm_hw_rev(die):
    """srm_hw_rev(uint32_t die) -> e_srm_hw_rev"""
    return _srmcli.srm_hw_rev(die)
SRM_INTF_SERIAL_RX = _srmcli.SRM_INTF_SERIAL_RX
SRM_INTF_SERIAL_TX = _srmcli.SRM_INTF_SERIAL_TX
SRM_INTF_CORE_RX = _srmcli.SRM_INTF_CORE_RX
SRM_INTF_CORE_TX = _srmcli.SRM_INTF_CORE_TX
SRM_INTF_SERIAL_ALL = _srmcli.SRM_INTF_SERIAL_ALL
SRM_INTF_CORE_ALL = _srmcli.SRM_INTF_CORE_ALL
SRM_INTF_DIR_RX = _srmcli.SRM_INTF_DIR_RX
SRM_INTF_DIR_TX = _srmcli.SRM_INTF_DIR_TX
SRM_ACK_CHP_INIT = _srmcli.SRM_ACK_CHP_INIT
SRM_ACK_PLL_INIT = _srmcli.SRM_ACK_PLL_INIT
SRM_ACK_TX_INIT = _srmcli.SRM_ACK_TX_INIT
SRM_ACK_RX_INIT = _srmcli.SRM_ACK_RX_INIT
SRM_ACK_ANLT_INIT = _srmcli.SRM_ACK_ANLT_INIT
SRM_ACK_MAX = _srmcli.SRM_ACK_MAX

def srm_reg_get(die, addr, data):
    """srm_reg_get(uint32_t die, uint32_t addr, uint32_t * data) -> ip_status_t"""
    return _srmcli.srm_reg_get(die, addr, data)

def srm_reg_set(die, addr, data):
    """srm_reg_set(uint32_t die, uint32_t addr, uint32_t data) -> ip_status_t"""
    return _srmcli.srm_reg_set(die, addr, data)

def srm_reg_write(die, addr, data):
    """srm_reg_write(uint32_t die, uint32_t addr, uint32_t data)"""
    return _srmcli.srm_reg_write(die, addr, data)

def srm_reg_read(die, addr):
    """srm_reg_read(uint32_t die, uint32_t addr) -> uint32_t"""
    return _srmcli.srm_reg_read(die, addr)

def srm_reg_rmw(die, addr, data, mask):
    """srm_reg_rmw(uint32_t die, uint32_t addr, uint32_t data, uint32_t mask) -> uint32_t"""
    return _srmcli.srm_reg_rmw(die, addr, data, mask)

def srm_reg_channel_read(die, channel, addr):
    """srm_reg_channel_read(uint32_t die, uint32_t channel, uint32_t addr) -> uint32_t"""
    return _srmcli.srm_reg_channel_read(die, channel, addr)

def srm_reg_channel_write(die, channel, addr, data):
    """srm_reg_channel_write(uint32_t die, uint32_t channel, uint32_t addr, uint32_t data)"""
    return _srmcli.srm_reg_channel_write(die, channel, addr, data)

def srm_reg_channel_rmw(die, channel, addr, data, mask):
    """srm_reg_channel_rmw(uint32_t die, uint32_t channel, uint32_t addr, uint32_t data, uint32_t mask) -> uint32_t"""
    return _srmcli.srm_reg_channel_rmw(die, channel, addr, data, mask)

def srm_reg_channel_addr(die, channel, addr):
    """srm_reg_channel_addr(uint32_t die, uint32_t channel, uint32_t addr) -> uint32_t"""
    return _srmcli.srm_reg_channel_addr(die, channel, addr)

def srm_set_callback_for_lock(callback):
    """srm_set_callback_for_lock(srm_callback_lock callback)"""
    return _srmcli.srm_set_callback_for_lock(callback)

def srm_set_callback_for_unlock(callback):
    """srm_set_callback_for_unlock(srm_callback_unlock callback)"""
    return _srmcli.srm_set_callback_for_unlock(callback)

def srm_lock(die):
    """srm_lock(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_lock(die)

def srm_unlock(die):
    """srm_unlock(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_unlock(die)
SRM_FW_MODE_UNKNOWN = _srmcli.SRM_FW_MODE_UNKNOWN
SRM_FW_MODE_APPLICATION = _srmcli.SRM_FW_MODE_APPLICATION

def srm_mcu_reset_into_application(die, wait_till_started):
    """srm_mcu_reset_into_application(uint32_t die, bool wait_till_started) -> ip_status_t"""
    return _srmcli.srm_mcu_reset_into_application(die, wait_till_started)

def srm_is_fw_running_ok(die):
    """srm_is_fw_running_ok(uint32_t die) -> bool"""
    return _srmcli.srm_is_fw_running_ok(die)

def srm_mcu_block_application_mode(die, timeout_in_ms):
    """srm_mcu_block_application_mode(uint32_t die, int timeout_in_ms) -> ip_status_t"""
    return _srmcli.srm_mcu_block_application_mode(die, timeout_in_ms)

def srm_mcu_download_firmware(die, verify):
    """srm_mcu_download_firmware(uint32_t die, bool verify) -> ip_status_t"""
    return _srmcli.srm_mcu_download_firmware(die, verify)

def srm_mcu_get_inline_firmware(ptr, length):
    """srm_mcu_get_inline_firmware(uint32_t const ** ptr, uint32_t * length) -> ip_status_t"""
    return _srmcli.srm_mcu_get_inline_firmware(ptr, length)

def srm_mcu_get_inline_firmware_version():
    """srm_mcu_get_inline_firmware_version() -> uint32_t"""
    return _srmcli.srm_mcu_get_inline_firmware_version()

def srm_mcu_direct_download_image_bcast(die, get_firmware):
    """srm_mcu_direct_download_image_bcast(uint32_t die, ip_status_t (*)(uint32_t const **,uint32_t *) get_firmware) -> ip_status_t"""
    return _srmcli.srm_mcu_direct_download_image_bcast(die, get_firmware)

def srm_mcu_direct_download_image_bcast_inline(die):
    """srm_mcu_direct_download_image_bcast_inline(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_mcu_direct_download_image_bcast_inline(die)

def srm_mcu_direct_download_image_bcast_buffer(die, image_ptr, length):
    """srm_mcu_direct_download_image_bcast_buffer(uint32_t die, uint32_t const * image_ptr, uint32_t length) -> ip_status_t"""
    return _srmcli.srm_mcu_direct_download_image_bcast_buffer(die, image_ptr, length)

def srm_mcu_verify_image_wrapper(die):
    """srm_mcu_verify_image_wrapper(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_mcu_verify_image_wrapper(die)

def srm_mcu_verify_image(die, image, image_length):
    """srm_mcu_verify_image(uint32_t die, uint32_t const * image, uint32_t image_length) -> ip_status_t"""
    return _srmcli.srm_mcu_verify_image(die, image, image_length)

def srm_mcu_download_firmware_from_file(die, path, verify):
    """srm_mcu_download_firmware_from_file(uint32_t die, char const * path, bool verify) -> ip_status_t"""
    return _srmcli.srm_mcu_download_firmware_from_file(die, path, verify)

def srm_mcu_ram_init(die):
    """srm_mcu_ram_init(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_mcu_ram_init(die)
class srm_mcu_status_t(_object):
    """Proxy of C++ srm_mcu_status_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_mcu_status_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_mcu_status_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fw_mode"] = _srmcli.srm_mcu_status_t_fw_mode_set
    __swig_getmethods__["fw_mode"] = _srmcli.srm_mcu_status_t_fw_mode_get
    if _newclass:
        fw_mode = _swig_property(_srmcli.srm_mcu_status_t_fw_mode_get, _srmcli.srm_mcu_status_t_fw_mode_set)
    __swig_setmethods__["fw_mode_str"] = _srmcli.srm_mcu_status_t_fw_mode_str_set
    __swig_getmethods__["fw_mode_str"] = _srmcli.srm_mcu_status_t_fw_mode_str_get
    if _newclass:
        fw_mode_str = _swig_property(_srmcli.srm_mcu_status_t_fw_mode_str_get, _srmcli.srm_mcu_status_t_fw_mode_str_set)
    __swig_setmethods__["runstall"] = _srmcli.srm_mcu_status_t_runstall_set
    __swig_getmethods__["runstall"] = _srmcli.srm_mcu_status_t_runstall_get
    if _newclass:
        runstall = _swig_property(_srmcli.srm_mcu_status_t_runstall_get, _srmcli.srm_mcu_status_t_runstall_set)
    __swig_setmethods__["pc_trace"] = _srmcli.srm_mcu_status_t_pc_trace_set
    __swig_getmethods__["pc_trace"] = _srmcli.srm_mcu_status_t_pc_trace_get
    if _newclass:
        pc_trace = _swig_property(_srmcli.srm_mcu_status_t_pc_trace_get, _srmcli.srm_mcu_status_t_pc_trace_set)
    __swig_setmethods__["loop_count"] = _srmcli.srm_mcu_status_t_loop_count_set
    __swig_getmethods__["loop_count"] = _srmcli.srm_mcu_status_t_loop_count_get
    if _newclass:
        loop_count = _swig_property(_srmcli.srm_mcu_status_t_loop_count_get, _srmcli.srm_mcu_status_t_loop_count_set)
    __swig_setmethods__["loop_delta"] = _srmcli.srm_mcu_status_t_loop_delta_set
    __swig_getmethods__["loop_delta"] = _srmcli.srm_mcu_status_t_loop_delta_get
    if _newclass:
        loop_delta = _swig_property(_srmcli.srm_mcu_status_t_loop_delta_get, _srmcli.srm_mcu_status_t_loop_delta_set)
    __swig_setmethods__["loop_duration"] = _srmcli.srm_mcu_status_t_loop_duration_set
    __swig_getmethods__["loop_duration"] = _srmcli.srm_mcu_status_t_loop_duration_get
    if _newclass:
        loop_duration = _swig_property(_srmcli.srm_mcu_status_t_loop_duration_get, _srmcli.srm_mcu_status_t_loop_duration_set)
    __swig_setmethods__["mdio_addr_err"] = _srmcli.srm_mcu_status_t_mdio_addr_err_set
    __swig_getmethods__["mdio_addr_err"] = _srmcli.srm_mcu_status_t_mdio_addr_err_get
    if _newclass:
        mdio_addr_err = _swig_property(_srmcli.srm_mcu_status_t_mdio_addr_err_get, _srmcli.srm_mcu_status_t_mdio_addr_err_set)
    __swig_setmethods__["app_version"] = _srmcli.srm_mcu_status_t_app_version_set
    __swig_getmethods__["app_version"] = _srmcli.srm_mcu_status_t_app_version_get
    if _newclass:
        app_version = _swig_property(_srmcli.srm_mcu_status_t_app_version_get, _srmcli.srm_mcu_status_t_app_version_set)
    __swig_setmethods__["app_version_major"] = _srmcli.srm_mcu_status_t_app_version_major_set
    __swig_getmethods__["app_version_major"] = _srmcli.srm_mcu_status_t_app_version_major_get
    if _newclass:
        app_version_major = _swig_property(_srmcli.srm_mcu_status_t_app_version_major_get, _srmcli.srm_mcu_status_t_app_version_major_set)
    __swig_setmethods__["app_version_minor"] = _srmcli.srm_mcu_status_t_app_version_minor_set
    __swig_getmethods__["app_version_minor"] = _srmcli.srm_mcu_status_t_app_version_minor_get
    if _newclass:
        app_version_minor = _swig_property(_srmcli.srm_mcu_status_t_app_version_minor_get, _srmcli.srm_mcu_status_t_app_version_minor_set)
    __swig_setmethods__["app_version_revision"] = _srmcli.srm_mcu_status_t_app_version_revision_set
    __swig_getmethods__["app_version_revision"] = _srmcli.srm_mcu_status_t_app_version_revision_get
    if _newclass:
        app_version_revision = _swig_property(_srmcli.srm_mcu_status_t_app_version_revision_get, _srmcli.srm_mcu_status_t_app_version_revision_set)
    __swig_setmethods__["app_version_build"] = _srmcli.srm_mcu_status_t_app_version_build_set
    __swig_getmethods__["app_version_build"] = _srmcli.srm_mcu_status_t_app_version_build_get
    if _newclass:
        app_version_build = _swig_property(_srmcli.srm_mcu_status_t_app_version_build_get, _srmcli.srm_mcu_status_t_app_version_build_set)
    __swig_setmethods__["api_version"] = _srmcli.srm_mcu_status_t_api_version_set
    __swig_getmethods__["api_version"] = _srmcli.srm_mcu_status_t_api_version_get
    if _newclass:
        api_version = _swig_property(_srmcli.srm_mcu_status_t_api_version_get, _srmcli.srm_mcu_status_t_api_version_set)
    __swig_setmethods__["api_version_major"] = _srmcli.srm_mcu_status_t_api_version_major_set
    __swig_getmethods__["api_version_major"] = _srmcli.srm_mcu_status_t_api_version_major_get
    if _newclass:
        api_version_major = _swig_property(_srmcli.srm_mcu_status_t_api_version_major_get, _srmcli.srm_mcu_status_t_api_version_major_set)
    __swig_setmethods__["api_version_minor"] = _srmcli.srm_mcu_status_t_api_version_minor_set
    __swig_getmethods__["api_version_minor"] = _srmcli.srm_mcu_status_t_api_version_minor_get
    if _newclass:
        api_version_minor = _swig_property(_srmcli.srm_mcu_status_t_api_version_minor_get, _srmcli.srm_mcu_status_t_api_version_minor_set)
    __swig_setmethods__["api_version_revision"] = _srmcli.srm_mcu_status_t_api_version_revision_set
    __swig_getmethods__["api_version_revision"] = _srmcli.srm_mcu_status_t_api_version_revision_get
    if _newclass:
        api_version_revision = _swig_property(_srmcli.srm_mcu_status_t_api_version_revision_get, _srmcli.srm_mcu_status_t_api_version_revision_set)
    __swig_setmethods__["api_version_build"] = _srmcli.srm_mcu_status_t_api_version_build_set
    __swig_getmethods__["api_version_build"] = _srmcli.srm_mcu_status_t_api_version_build_get
    if _newclass:
        api_version_build = _swig_property(_srmcli.srm_mcu_status_t_api_version_build_get, _srmcli.srm_mcu_status_t_api_version_build_set)

    def __init__(self):
        """__init__(srm_mcu_status_t self) -> srm_mcu_status_t"""
        this = _srmcli.new_srm_mcu_status_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_mcu_status_t
    __del__ = lambda self: None
srm_mcu_status_t_swigregister = _srmcli.srm_mcu_status_t_swigregister
srm_mcu_status_t_swigregister(srm_mcu_status_t)


def srm_mcu_status_query(die, mcu_status, loop_delay):
    """srm_mcu_status_query(uint32_t die, srm_mcu_status_t mcu_status, uint32_t loop_delay) -> ip_status_t"""
    return _srmcli.srm_mcu_status_query(die, mcu_status, loop_delay)

def srm_mcu_status_query_dump(die):
    """srm_mcu_status_query_dump(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_mcu_status_query_dump(die)

def srm_mcu_pc_log_query(die, entries, num_entries):
    """srm_mcu_pc_log_query(uint32_t die, uint32_t * entries, int num_entries) -> ip_status_t"""
    return _srmcli.srm_mcu_pc_log_query(die, entries, num_entries)

def srm_mcu_pc_log_query_dump(die, num_entries):
    """srm_mcu_pc_log_query_dump(uint32_t die, int num_entries) -> ip_status_t"""
    return _srmcli.srm_mcu_pc_log_query_dump(die, num_entries)
LOG_DEBUG = _srmcli.LOG_DEBUG
LOG_ERROR = _srmcli.LOG_ERROR
LOG_WARN = _srmcli.LOG_WARN
LOG_RX_LOCK = _srmcli.LOG_RX_LOCK
LOG_INT = _srmcli.LOG_INT
LOG_RX_DBG = _srmcli.LOG_RX_DBG

def srm_mcu_debug_log_dump(die, buff):
    """srm_mcu_debug_log_dump(uint32_t die, char * buff) -> ip_status_t"""
    return _srmcli.srm_mcu_debug_log_dump(die, buff)

def srm_mcu_debug_log_query_dump(die):
    """srm_mcu_debug_log_query_dump(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_mcu_debug_log_query_dump(die)

def srm_mcu_debug_log_filter_get(die):
    """srm_mcu_debug_log_filter_get(uint32_t die) -> uint32_t"""
    return _srmcli.srm_mcu_debug_log_filter_get(die)

def srm_mcu_debug_log_filter_set(die, filter):
    """srm_mcu_debug_log_filter_set(uint32_t die, uint32_t filter) -> ip_status_t"""
    return _srmcli.srm_mcu_debug_log_filter_set(die, filter)

def srm_tx_rules_set_default(tx_rules):
    """srm_tx_rules_set_default(srm_tx_rules_t tx_rules) -> ip_status_t"""
    return _srmcli.srm_tx_rules_set_default(tx_rules)

def srm_rx_rules_set_default(rx_rules):
    """srm_rx_rules_set_default(srm_rx_rules_t rx_rules) -> ip_status_t"""
    return _srmcli.srm_rx_rules_set_default(rx_rules)

def srm_pll_rules_set_default(pll_rules):
    """srm_pll_rules_set_default(srm_pll_rules_t pll_rules) -> ip_status_t"""
    return _srmcli.srm_pll_rules_set_default(pll_rules)

def srm_rules_set_default(pll_rules, tx_rules, rx_rules):
    """srm_rules_set_default(srm_pll_rules_t pll_rules, srm_tx_rules_t tx_rules, srm_rx_rules_t rx_rules) -> ip_status_t"""
    return _srmcli.srm_rules_set_default(pll_rules, tx_rules, rx_rules)

def srm_pll_cp_rules_to_overlays(die, pll_rules):
    """srm_pll_cp_rules_to_overlays(uint32_t die, srm_pll_rules_t pll_rules) -> ip_status_t"""
    return _srmcli.srm_pll_cp_rules_to_overlays(die, pll_rules)

def srm_rx_cp_rules_to_overlays(die, channel, rx_rules):
    """srm_rx_cp_rules_to_overlays(uint32_t die, uint32_t channel, srm_rx_rules_t rx_rules) -> ip_status_t"""
    return _srmcli.srm_rx_cp_rules_to_overlays(die, channel, rx_rules)

def srm_tx_cp_rules_to_overlays(die, channel, tx_rules):
    """srm_tx_cp_rules_to_overlays(uint32_t die, uint32_t channel, srm_tx_rules_t tx_rules) -> ip_status_t"""
    return _srmcli.srm_tx_cp_rules_to_overlays(die, channel, tx_rules)

def srm_init_uid(die, uid):
    """srm_init_uid(uint32_t die, uint16_t uid) -> ip_status_t"""
    return _srmcli.srm_init_uid(die, uid)

def srm_init(die):
    """srm_init(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_init(die)

def srm_init_pll(die, pll_rules):
    """srm_init_pll(uint32_t die, srm_pll_rules_t pll_rules) -> ip_status_t"""
    return _srmcli.srm_init_pll(die, pll_rules)

def srm_init_tx(die, channel, tx_rules):
    """srm_init_tx(uint32_t die, uint32_t channel, srm_tx_rules_t tx_rules) -> ip_status_t"""
    return _srmcli.srm_init_tx(die, channel, tx_rules)

def srm_init_rx(die, channel, rx_rules):
    """srm_init_rx(uint32_t die, uint32_t channel, srm_rx_rules_t rx_rules) -> ip_status_t"""
    return _srmcli.srm_init_rx(die, channel, rx_rules)
SRM_RX_PARAM_SDT_CODE_FALL = _srmcli.SRM_RX_PARAM_SDT_CODE_FALL
SRM_RX_PARAM_SDT_CODE_RISE = _srmcli.SRM_RX_PARAM_SDT_CODE_RISE
SRM_RX_PARAM_SDT_CODE_TH = _srmcli.SRM_RX_PARAM_SDT_CODE_TH
SRM_RX_PARAM_SDT_BLOCK_CNT = _srmcli.SRM_RX_PARAM_SDT_BLOCK_CNT

def srm_rx_param_set(die, channel, param, value):
    """srm_rx_param_set(uint32_t die, uint32_t channel, e_srm_rx_param param, uint32_t value) -> ip_status_t"""
    return _srmcli.srm_rx_param_set(die, channel, param, value)

def srm_is_ack_asserted(die, channel, ack_type):
    """srm_is_ack_asserted(uint32_t die, uint32_t channel, e_srm_ack_type ack_type) -> bool"""
    return _srmcli.srm_is_ack_asserted(die, channel, ack_type)

def srm_wait_for_ack(die, channel, ack_type, max_wait_us):
    """srm_wait_for_ack(uint32_t die, uint32_t channel, uint16_t ack_type, uint32_t max_wait_us) -> ip_status_t"""
    return _srmcli.srm_wait_for_ack(die, channel, ack_type, max_wait_us)

def srm_pll_rules_query(die, pll_rules):
    """srm_pll_rules_query(uint32_t die, srm_pll_rules_t pll_rules) -> ip_status_t"""
    return _srmcli.srm_pll_rules_query(die, pll_rules)

def srm_tx_rules_query(die, channel, tx_rules):
    """srm_tx_rules_query(uint32_t die, uint32_t channel, srm_tx_rules_t tx_rules) -> ip_status_t"""
    return _srmcli.srm_tx_rules_query(die, channel, tx_rules)

def srm_rx_rules_query(die, channel, rx_rules):
    """srm_rx_rules_query(uint32_t die, uint32_t channel, srm_rx_rules_t rx_rules) -> ip_status_t"""
    return _srmcli.srm_rx_rules_query(die, channel, rx_rules)

def srm_soft_reset(die):
    """srm_soft_reset(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_soft_reset(die)

def srm_pll_rules_dump(die, pll_rules):
    """srm_pll_rules_dump(uint32_t die, srm_pll_rules_t pll_rules)"""
    return _srmcli.srm_pll_rules_dump(die, pll_rules)

def srm_pll_rules_query_dump(die):
    """srm_pll_rules_query_dump(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_pll_rules_query_dump(die)

def srm_tx_rules_dump(die, channel, tx_rules):
    """srm_tx_rules_dump(uint32_t die, uint32_t channel, srm_tx_rules_t tx_rules)"""
    return _srmcli.srm_tx_rules_dump(die, channel, tx_rules)

def srm_tx_rules_query_dump(die, channel):
    """srm_tx_rules_query_dump(uint32_t die, uint32_t channel) -> ip_status_t"""
    return _srmcli.srm_tx_rules_query_dump(die, channel)

def srm_rx_rules_dump(die, channel, rx_rules):
    """srm_rx_rules_dump(uint32_t die, uint32_t channel, srm_rx_rules_t rx_rules)"""
    return _srmcli.srm_rx_rules_dump(die, channel, rx_rules)

def srm_rx_rules_query_dump(die, channel):
    """srm_rx_rules_query_dump(uint32_t die, uint32_t channel) -> ip_status_t"""
    return _srmcli.srm_rx_rules_query_dump(die, channel)

def srm_pwrup_rules_set_default(pwrup_rules):
    """srm_pwrup_rules_set_default(srm_pwrup_rules_t pwrup_rules) -> ip_status_t"""
    return _srmcli.srm_pwrup_rules_set_default(pwrup_rules)

def srm_pwrup_start(pwrup_rules):
    """srm_pwrup_start(srm_pwrup_rules_t pwrup_rules) -> ip_status_t"""
    return _srmcli.srm_pwrup_start(pwrup_rules)

def srm_pwrup_is_bias_ready(die):
    """srm_pwrup_is_bias_ready(uint32_t die) -> bool"""
    return _srmcli.srm_pwrup_is_bias_ready(die)

def srm_pwrup_is_eru_ready(die):
    """srm_pwrup_is_eru_ready(uint32_t die) -> bool"""
    return _srmcli.srm_pwrup_is_eru_ready(die)

def srm_pwrup_is_ready(rules):
    """srm_pwrup_is_ready(srm_pwrup_rules_t rules) -> bool"""
    return _srmcli.srm_pwrup_is_ready(rules)

def srm_pwrup_rules_dump(p_pwrup_rules):
    """srm_pwrup_rules_dump(srm_pwrup_rules_t p_pwrup_rules)"""
    return _srmcli.srm_pwrup_rules_dump(p_pwrup_rules)

def srm_pwrup_bias_qpmp_ldo_pwrup(die, mode, show):
    """srm_pwrup_bias_qpmp_ldo_pwrup(uint32_t die, e_srm_pwrup_mode mode, bool show) -> ip_status_t"""
    return _srmcli.srm_pwrup_bias_qpmp_ldo_pwrup(die, mode, show)

def srm_cal_rcal_status_query(pwrup_rules, rcal_status):
    """srm_cal_rcal_status_query(srm_pwrup_rules_t pwrup_rules, srm_rcal_status_t rcal_status) -> ip_status_t"""
    return _srmcli.srm_cal_rcal_status_query(pwrup_rules, rcal_status)

def srm_cal_rules_set_default(cal_rules):
    """srm_cal_rules_set_default(srm_pwrup_rules_t cal_rules) -> ip_status_t"""
    return _srmcli.srm_cal_rules_set_default(cal_rules)

def srm_cal_start(cal_rules):
    """srm_cal_start(srm_pwrup_rules_t cal_rules) -> ip_status_t"""
    return _srmcli.srm_cal_start(cal_rules)

def srm_cal_is_bias_ready(die):
    """srm_cal_is_bias_ready(uint32_t die) -> bool"""
    return _srmcli.srm_cal_is_bias_ready(die)

def srm_cal_is_eru_ready(die):
    """srm_cal_is_eru_ready(uint32_t die) -> bool"""
    return _srmcli.srm_cal_is_eru_ready(die)

def srm_cal_is_ready(rules):
    """srm_cal_is_ready(srm_pwrup_rules_t rules) -> bool"""
    return _srmcli.srm_cal_is_ready(rules)
SRM_LOOPBACK_CORE_NEAR = _srmcli.SRM_LOOPBACK_CORE_NEAR
SRM_LOOPBACK_SERIAL_FAR = _srmcli.SRM_LOOPBACK_SERIAL_FAR

def srm_loopback_set(die, channel, type, enable):
    """srm_loopback_set(uint32_t die, uint32_t channel, e_srm_loopback_mode type, bool enable) -> ip_status_t"""
    return _srmcli.srm_loopback_set(die, channel, type, enable)

def srm_wait_for_link_ready(die, channel, timeout_in_usecs):
    """srm_wait_for_link_ready(uint32_t die, uint32_t channel, int timeout_in_usecs) -> ip_status_t"""
    return _srmcli.srm_wait_for_link_ready(die, channel, timeout_in_usecs)

def srm_is_link_ready(die, channel, intf):
    """srm_is_link_ready(uint32_t die, uint32_t channel, e_srm_intf intf) -> bool"""
    return _srmcli.srm_is_link_ready(die, channel, intf)

def srm_is_pll_locked(die):
    """srm_is_pll_locked(uint32_t die) -> bool"""
    return _srmcli.srm_is_pll_locked(die)

def srm_wait_for_pll_locked(die, timeout_in_usecs):
    """srm_wait_for_pll_locked(uint32_t die, int timeout_in_usecs) -> ip_status_t"""
    return _srmcli.srm_wait_for_pll_locked(die, timeout_in_usecs)

def srm_is_tx_ready(die, channel):
    """srm_is_tx_ready(uint32_t die, uint32_t channel) -> bool"""
    return _srmcli.srm_is_tx_ready(die, channel)

def srm_tx_ready_get(die, channel):
    """srm_tx_ready_get(uint32_t die, uint32_t channel) -> bool"""
    return _srmcli.srm_tx_ready_get(die, channel)

def srm_is_rx_ready(die, channel):
    """srm_is_rx_ready(uint32_t die, uint32_t channel) -> bool"""
    return _srmcli.srm_is_rx_ready(die, channel)

def srm_rx_ready_get(die, channel):
    """srm_rx_ready_get(uint32_t die, uint32_t channel) -> bool"""
    return _srmcli.srm_rx_ready_get(die, channel)
class srm_link_status_t(_object):
    """Proxy of C++ srm_link_status_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_link_status_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_link_status_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tx_fw_lock"] = _srmcli.srm_link_status_t_tx_fw_lock_set
    __swig_getmethods__["tx_fw_lock"] = _srmcli.srm_link_status_t_tx_fw_lock_get
    if _newclass:
        tx_fw_lock = _swig_property(_srmcli.srm_link_status_t_tx_fw_lock_get, _srmcli.srm_link_status_t_tx_fw_lock_set)
    __swig_setmethods__["tx_pll_lock"] = _srmcli.srm_link_status_t_tx_pll_lock_set
    __swig_getmethods__["tx_pll_lock"] = _srmcli.srm_link_status_t_tx_pll_lock_get
    if _newclass:
        tx_pll_lock = _swig_property(_srmcli.srm_link_status_t_tx_pll_lock_get, _srmcli.srm_link_status_t_tx_pll_lock_set)
    __swig_setmethods__["rx_sdt"] = _srmcli.srm_link_status_t_rx_sdt_set
    __swig_getmethods__["rx_sdt"] = _srmcli.srm_link_status_t_rx_sdt_get
    if _newclass:
        rx_sdt = _swig_property(_srmcli.srm_link_status_t_rx_sdt_get, _srmcli.srm_link_status_t_rx_sdt_set)
    __swig_setmethods__["rx_dsp_ready"] = _srmcli.srm_link_status_t_rx_dsp_ready_set
    __swig_getmethods__["rx_dsp_ready"] = _srmcli.srm_link_status_t_rx_dsp_ready_get
    if _newclass:
        rx_dsp_ready = _swig_property(_srmcli.srm_link_status_t_rx_dsp_ready_get, _srmcli.srm_link_status_t_rx_dsp_ready_set)
    __swig_setmethods__["rx_fw_lock"] = _srmcli.srm_link_status_t_rx_fw_lock_set
    __swig_getmethods__["rx_fw_lock"] = _srmcli.srm_link_status_t_rx_fw_lock_get
    if _newclass:
        rx_fw_lock = _swig_property(_srmcli.srm_link_status_t_rx_fw_lock_get, _srmcli.srm_link_status_t_rx_fw_lock_set)
    __swig_setmethods__["rx_pll_lock"] = _srmcli.srm_link_status_t_rx_pll_lock_set
    __swig_getmethods__["rx_pll_lock"] = _srmcli.srm_link_status_t_rx_pll_lock_get
    if _newclass:
        rx_pll_lock = _swig_property(_srmcli.srm_link_status_t_rx_pll_lock_get, _srmcli.srm_link_status_t_rx_pll_lock_set)
    __swig_setmethods__["rx_pll_lockdet_int"] = _srmcli.srm_link_status_t_rx_pll_lockdet_int_set
    __swig_getmethods__["rx_pll_lockdet_int"] = _srmcli.srm_link_status_t_rx_pll_lockdet_int_get
    if _newclass:
        rx_pll_lockdet_int = _swig_property(_srmcli.srm_link_status_t_rx_pll_lockdet_int_get, _srmcli.srm_link_status_t_rx_pll_lockdet_int_set)
    __swig_setmethods__["tx_pll_lockdet_int"] = _srmcli.srm_link_status_t_tx_pll_lockdet_int_set
    __swig_getmethods__["tx_pll_lockdet_int"] = _srmcli.srm_link_status_t_tx_pll_lockdet_int_get
    if _newclass:
        tx_pll_lockdet_int = _swig_property(_srmcli.srm_link_status_t_tx_pll_lockdet_int_get, _srmcli.srm_link_status_t_tx_pll_lockdet_int_set)
    __swig_setmethods__["tx_fifoa_empty_int"] = _srmcli.srm_link_status_t_tx_fifoa_empty_int_set
    __swig_getmethods__["tx_fifoa_empty_int"] = _srmcli.srm_link_status_t_tx_fifoa_empty_int_get
    if _newclass:
        tx_fifoa_empty_int = _swig_property(_srmcli.srm_link_status_t_tx_fifoa_empty_int_get, _srmcli.srm_link_status_t_tx_fifoa_empty_int_set)
    __swig_setmethods__["tx_fifoa_full_int"] = _srmcli.srm_link_status_t_tx_fifoa_full_int_set
    __swig_getmethods__["tx_fifoa_full_int"] = _srmcli.srm_link_status_t_tx_fifoa_full_int_get
    if _newclass:
        tx_fifoa_full_int = _swig_property(_srmcli.srm_link_status_t_tx_fifoa_full_int_get, _srmcli.srm_link_status_t_tx_fifoa_full_int_set)
    __swig_setmethods__["tx_fifob_empty_int"] = _srmcli.srm_link_status_t_tx_fifob_empty_int_set
    __swig_getmethods__["tx_fifob_empty_int"] = _srmcli.srm_link_status_t_tx_fifob_empty_int_get
    if _newclass:
        tx_fifob_empty_int = _swig_property(_srmcli.srm_link_status_t_tx_fifob_empty_int_get, _srmcli.srm_link_status_t_tx_fifob_empty_int_set)
    __swig_setmethods__["tx_fifob_full_int"] = _srmcli.srm_link_status_t_tx_fifob_full_int_set
    __swig_getmethods__["tx_fifob_full_int"] = _srmcli.srm_link_status_t_tx_fifob_full_int_get
    if _newclass:
        tx_fifob_full_int = _swig_property(_srmcli.srm_link_status_t_tx_fifob_full_int_get, _srmcli.srm_link_status_t_tx_fifob_full_int_set)

    def __init__(self):
        """__init__(srm_link_status_t self) -> srm_link_status_t"""
        this = _srmcli.new_srm_link_status_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_link_status_t
    __del__ = lambda self: None
srm_link_status_t_swigregister = _srmcli.srm_link_status_t_swigregister
srm_link_status_t_swigregister(srm_link_status_t)


def srm_link_status_query(die, channel, intf, link_status):
    """srm_link_status_query(uint32_t die, uint32_t channel, e_srm_intf intf, srm_link_status_t link_status) -> ip_status_t"""
    return _srmcli.srm_link_status_query(die, channel, intf, link_status)

def srm_link_status_print(die, channel, intf, link_status):
    """srm_link_status_print(uint32_t die, uint32_t channel, e_srm_intf intf, srm_link_status_t link_status) -> ip_status_t"""
    return _srmcli.srm_link_status_print(die, channel, intf, link_status)

def srm_link_status_query_dump(die, channel, intf):
    """srm_link_status_query_dump(uint32_t die, uint32_t channel, e_srm_intf intf) -> ip_status_t"""
    return _srmcli.srm_link_status_query_dump(die, channel, intf)

def srm_rx_encoding_set(die, channel, signalling):
    """srm_rx_encoding_set(uint32_t die, uint32_t channel, e_srm_signal_mode signalling) -> ip_status_t"""
    return _srmcli.srm_rx_encoding_set(die, channel, signalling)

def srm_rx_polarity_set(die, channel, inv_pol):
    """srm_rx_polarity_set(uint32_t die, uint32_t channel, bool inv_pol) -> ip_status_t"""
    return _srmcli.srm_rx_polarity_set(die, channel, inv_pol)

def srm_rx_power_down_set(die, channel):
    """srm_rx_power_down_set(uint32_t die, uint32_t channel) -> ip_status_t"""
    return _srmcli.srm_rx_power_down_set(die, channel)

def srm_rx_equalization_set(die, channel, dsp_mode):
    """srm_rx_equalization_set(uint32_t die, uint32_t channel, e_srm_dsp_mode dsp_mode) -> ip_status_t"""
    return _srmcli.srm_rx_equalization_set(die, channel, dsp_mode)

def srm_rx_invert_toggle(die, channel):
    """srm_rx_invert_toggle(uint32_t die, uint32_t channel) -> ip_status_t"""
    return _srmcli.srm_rx_invert_toggle(die, channel)

def srm_dbg_force_dsp_relock(die, channel):
    """srm_dbg_force_dsp_relock(uint32_t die, uint32_t channel) -> ip_status_t"""
    return _srmcli.srm_dbg_force_dsp_relock(die, channel)

def srm_tx_fir_set_default(tx_fir):
    """srm_tx_fir_set_default(srm_tx_fir_t tx_fir) -> ip_status_t"""
    return _srmcli.srm_tx_fir_set_default(tx_fir)

def srm_tx_set(die, channel, rules):
    """srm_tx_set(uint32_t die, uint32_t channel, srm_tx_rules_t rules) -> ip_status_t"""
    return _srmcli.srm_tx_set(die, channel, rules)

def srm_tx_encoding_set(die, channel, signalling):
    """srm_tx_encoding_set(uint32_t die, uint32_t channel, e_srm_signal_mode signalling) -> ip_status_t"""
    return _srmcli.srm_tx_encoding_set(die, channel, signalling)

def srm_tx_polarity_set(die, channel, inv_pol):
    """srm_tx_polarity_set(uint32_t die, uint32_t channel, bool inv_pol) -> ip_status_t"""
    return _srmcli.srm_tx_polarity_set(die, channel, inv_pol)

def srm_tx_power_down_set(die, channel):
    """srm_tx_power_down_set(uint32_t die, uint32_t channel) -> ip_status_t"""
    return _srmcli.srm_tx_power_down_set(die, channel)

def srm_tx_fir_query(die, channel, fir):
    """srm_tx_fir_query(uint32_t die, uint32_t channel, srm_tx_fir_t fir) -> ip_status_t"""
    return _srmcli.srm_tx_fir_query(die, channel, fir)

def srm_tx_fir_set(die, channel, fir):
    """srm_tx_fir_set(uint32_t die, uint32_t channel, srm_tx_fir_t fir) -> ip_status_t"""
    return _srmcli.srm_tx_fir_set(die, channel, fir)

def srm_tx_fir_tap_dump(tx_fir):
    """srm_tx_fir_tap_dump(srm_tx_fir_t tx_fir)"""
    return _srmcli.srm_tx_fir_tap_dump(tx_fir)

def srm_tx_fir_7tap_lin_query_dump(die):
    """srm_tx_fir_7tap_lin_query_dump(uint32_t die)"""
    return _srmcli.srm_tx_fir_7tap_lin_query_dump(die)

def srm_tx_fir_3tap_lut_query_dump(die, channel):
    """srm_tx_fir_3tap_lut_query_dump(uint32_t die, uint32_t channel)"""
    return _srmcli.srm_tx_fir_3tap_lut_query_dump(die, channel)

def srm_tx_is_squelched(die, channel):
    """srm_tx_is_squelched(uint32_t die, uint32_t channel) -> bool"""
    return _srmcli.srm_tx_is_squelched(die, channel)

def srm_tx_squelch(die, channel, squelch):
    """srm_tx_squelch(uint32_t die, uint32_t channel, bool squelch) -> ip_status_t"""
    return _srmcli.srm_tx_squelch(die, channel, squelch)

def srm_tx_squelch_set(die, channel, enable):
    """srm_tx_squelch_set(uint32_t die, uint32_t channel, bool enable) -> ip_status_t"""
    return _srmcli.srm_tx_squelch_set(die, channel, enable)

def srm_tx_invert_toggle(die, channel):
    """srm_tx_invert_toggle(uint32_t die, uint32_t channel) -> ip_status_t"""
    return _srmcli.srm_tx_invert_toggle(die, channel)
SRM_PAT_PRBS7 = _srmcli.SRM_PAT_PRBS7
SRM_PAT_PRBS9_4 = _srmcli.SRM_PAT_PRBS9_4
SRM_PAT_PRBS9_5 = _srmcli.SRM_PAT_PRBS9_5
SRM_PAT_PRBS11 = _srmcli.SRM_PAT_PRBS11
SRM_PAT_PRBS13 = _srmcli.SRM_PAT_PRBS13
SRM_PAT_PRBS15 = _srmcli.SRM_PAT_PRBS15
SRM_PAT_PRBS16 = _srmcli.SRM_PAT_PRBS16
SRM_PAT_PRBS23 = _srmcli.SRM_PAT_PRBS23
SRM_PAT_PRBS31 = _srmcli.SRM_PAT_PRBS31
SRM_PAT_PRBS58 = _srmcli.SRM_PAT_PRBS58
SRM_PAT_NONE = _srmcli.SRM_PAT_NONE
SRM_PRBS_PATTERN_PRBS = _srmcli.SRM_PRBS_PATTERN_PRBS
SRM_PRBS_PATTERN_FIXED = _srmcli.SRM_PRBS_PATTERN_FIXED
SRM_PRBS_PATTERN_JP083B = _srmcli.SRM_PRBS_PATTERN_JP083B
SRM_PRBS_PATTERN_LIN = _srmcli.SRM_PRBS_PATTERN_LIN
SRM_PRBS_PATTERN_CJT = _srmcli.SRM_PRBS_PATTERN_CJT
SRM_PRBS_PATTERN_SSPRQ = _srmcli.SRM_PRBS_PATTERN_SSPRQ
SRM_PRBS_MODE_MSB_LSB = _srmcli.SRM_PRBS_MODE_MSB_LSB
SRM_PRBS_MODE_COMBINED = _srmcli.SRM_PRBS_MODE_COMBINED
SRM_ERRINJ_PAT_BIT0 = _srmcli.SRM_ERRINJ_PAT_BIT0
SRM_ERRINJ_PAT_BIT1 = _srmcli.SRM_ERRINJ_PAT_BIT1
SRM_ERRINJ_PAT_BIT01 = _srmcli.SRM_ERRINJ_PAT_BIT01
SRM_ERRINJ_PAT_MSBS = _srmcli.SRM_ERRINJ_PAT_MSBS
SRM_ERRINJ_PAT_LSBS = _srmcli.SRM_ERRINJ_PAT_LSBS
SRM_ERRINJ_PAT_ALL = _srmcli.SRM_ERRINJ_PAT_ALL
SRM_ERRINJ_PAT_WALK = _srmcli.SRM_ERRINJ_PAT_WALK
SRM_ERRINJ_PAT_WALK3 = _srmcli.SRM_ERRINJ_PAT_WALK3
class srm_prbs_gen_rules_t(_object):
    """Proxy of C++ srm_prbs_gen_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_prbs_gen_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_prbs_gen_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["en"] = _srmcli.srm_prbs_gen_rules_t_en_set
    __swig_getmethods__["en"] = _srmcli.srm_prbs_gen_rules_t_en_get
    if _newclass:
        en = _swig_property(_srmcli.srm_prbs_gen_rules_t_en_get, _srmcli.srm_prbs_gen_rules_t_en_set)
    __swig_setmethods__["gen_en_lsb"] = _srmcli.srm_prbs_gen_rules_t_gen_en_lsb_set
    __swig_getmethods__["gen_en_lsb"] = _srmcli.srm_prbs_gen_rules_t_gen_en_lsb_get
    if _newclass:
        gen_en_lsb = _swig_property(_srmcli.srm_prbs_gen_rules_t_gen_en_lsb_get, _srmcli.srm_prbs_gen_rules_t_gen_en_lsb_set)
    __swig_setmethods__["prbs_mode"] = _srmcli.srm_prbs_gen_rules_t_prbs_mode_set
    __swig_getmethods__["prbs_mode"] = _srmcli.srm_prbs_gen_rules_t_prbs_mode_get
    if _newclass:
        prbs_mode = _swig_property(_srmcli.srm_prbs_gen_rules_t_prbs_mode_get, _srmcli.srm_prbs_gen_rules_t_prbs_mode_set)
    __swig_setmethods__["prbs_pattern_lsb"] = _srmcli.srm_prbs_gen_rules_t_prbs_pattern_lsb_set
    __swig_getmethods__["prbs_pattern_lsb"] = _srmcli.srm_prbs_gen_rules_t_prbs_pattern_lsb_get
    if _newclass:
        prbs_pattern_lsb = _swig_property(_srmcli.srm_prbs_gen_rules_t_prbs_pattern_lsb_get, _srmcli.srm_prbs_gen_rules_t_prbs_pattern_lsb_set)
    __swig_setmethods__["prbs_pattern"] = _srmcli.srm_prbs_gen_rules_t_prbs_pattern_set
    __swig_getmethods__["prbs_pattern"] = _srmcli.srm_prbs_gen_rules_t_prbs_pattern_get
    if _newclass:
        prbs_pattern = _swig_property(_srmcli.srm_prbs_gen_rules_t_prbs_pattern_get, _srmcli.srm_prbs_gen_rules_t_prbs_pattern_set)
    __swig_setmethods__["pattern_mode"] = _srmcli.srm_prbs_gen_rules_t_pattern_mode_set
    __swig_getmethods__["pattern_mode"] = _srmcli.srm_prbs_gen_rules_t_pattern_mode_get
    if _newclass:
        pattern_mode = _swig_property(_srmcli.srm_prbs_gen_rules_t_pattern_mode_get, _srmcli.srm_prbs_gen_rules_t_pattern_mode_set)
    __swig_setmethods__["seed_evn_0"] = _srmcli.srm_prbs_gen_rules_t_seed_evn_0_set
    __swig_getmethods__["seed_evn_0"] = _srmcli.srm_prbs_gen_rules_t_seed_evn_0_get
    if _newclass:
        seed_evn_0 = _swig_property(_srmcli.srm_prbs_gen_rules_t_seed_evn_0_get, _srmcli.srm_prbs_gen_rules_t_seed_evn_0_set)
    __swig_setmethods__["seed_evn_1"] = _srmcli.srm_prbs_gen_rules_t_seed_evn_1_set
    __swig_getmethods__["seed_evn_1"] = _srmcli.srm_prbs_gen_rules_t_seed_evn_1_get
    if _newclass:
        seed_evn_1 = _swig_property(_srmcli.srm_prbs_gen_rules_t_seed_evn_1_get, _srmcli.srm_prbs_gen_rules_t_seed_evn_1_set)
    __swig_setmethods__["seed_evn_2"] = _srmcli.srm_prbs_gen_rules_t_seed_evn_2_set
    __swig_getmethods__["seed_evn_2"] = _srmcli.srm_prbs_gen_rules_t_seed_evn_2_get
    if _newclass:
        seed_evn_2 = _swig_property(_srmcli.srm_prbs_gen_rules_t_seed_evn_2_get, _srmcli.srm_prbs_gen_rules_t_seed_evn_2_set)
    __swig_setmethods__["seed_evn_3"] = _srmcli.srm_prbs_gen_rules_t_seed_evn_3_set
    __swig_getmethods__["seed_evn_3"] = _srmcli.srm_prbs_gen_rules_t_seed_evn_3_get
    if _newclass:
        seed_evn_3 = _swig_property(_srmcli.srm_prbs_gen_rules_t_seed_evn_3_get, _srmcli.srm_prbs_gen_rules_t_seed_evn_3_set)
    __swig_setmethods__["seed_odd_0"] = _srmcli.srm_prbs_gen_rules_t_seed_odd_0_set
    __swig_getmethods__["seed_odd_0"] = _srmcli.srm_prbs_gen_rules_t_seed_odd_0_get
    if _newclass:
        seed_odd_0 = _swig_property(_srmcli.srm_prbs_gen_rules_t_seed_odd_0_get, _srmcli.srm_prbs_gen_rules_t_seed_odd_0_set)
    __swig_setmethods__["seed_odd_1"] = _srmcli.srm_prbs_gen_rules_t_seed_odd_1_set
    __swig_getmethods__["seed_odd_1"] = _srmcli.srm_prbs_gen_rules_t_seed_odd_1_get
    if _newclass:
        seed_odd_1 = _swig_property(_srmcli.srm_prbs_gen_rules_t_seed_odd_1_get, _srmcli.srm_prbs_gen_rules_t_seed_odd_1_set)
    __swig_setmethods__["seed_odd_2"] = _srmcli.srm_prbs_gen_rules_t_seed_odd_2_set
    __swig_getmethods__["seed_odd_2"] = _srmcli.srm_prbs_gen_rules_t_seed_odd_2_get
    if _newclass:
        seed_odd_2 = _swig_property(_srmcli.srm_prbs_gen_rules_t_seed_odd_2_get, _srmcli.srm_prbs_gen_rules_t_seed_odd_2_set)
    __swig_setmethods__["seed_odd_3"] = _srmcli.srm_prbs_gen_rules_t_seed_odd_3_set
    __swig_getmethods__["seed_odd_3"] = _srmcli.srm_prbs_gen_rules_t_seed_odd_3_get
    if _newclass:
        seed_odd_3 = _swig_property(_srmcli.srm_prbs_gen_rules_t_seed_odd_3_get, _srmcli.srm_prbs_gen_rules_t_seed_odd_3_set)

    def __init__(self):
        """__init__(srm_prbs_gen_rules_t self) -> srm_prbs_gen_rules_t"""
        this = _srmcli.new_srm_prbs_gen_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_prbs_gen_rules_t
    __del__ = lambda self: None
srm_prbs_gen_rules_t_swigregister = _srmcli.srm_prbs_gen_rules_t_swigregister
srm_prbs_gen_rules_t_swigregister(srm_prbs_gen_rules_t)

SRM_PRBS_AUTO_POLARITY_9 = _srmcli.SRM_PRBS_AUTO_POLARITY_9
SRM_PRBS_AUTO_POLARITY_17 = _srmcli.SRM_PRBS_AUTO_POLARITY_17
SRM_PRBS_AUTO_POLARITY_33 = _srmcli.SRM_PRBS_AUTO_POLARITY_33
SRM_PRBS_AUTO_POLARITY_65 = _srmcli.SRM_PRBS_AUTO_POLARITY_65
class srm_prbs_chk_core_rules_t(_object):
    """Proxy of C++ srm_prbs_chk_core_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_prbs_chk_core_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_prbs_chk_core_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["auto_polarity_en"] = _srmcli.srm_prbs_chk_core_rules_t_auto_polarity_en_set
    __swig_getmethods__["auto_polarity_en"] = _srmcli.srm_prbs_chk_core_rules_t_auto_polarity_en_get
    if _newclass:
        auto_polarity_en = _swig_property(_srmcli.srm_prbs_chk_core_rules_t_auto_polarity_en_get, _srmcli.srm_prbs_chk_core_rules_t_auto_polarity_en_set)
    __swig_setmethods__["auto_polarity_thresh"] = _srmcli.srm_prbs_chk_core_rules_t_auto_polarity_thresh_set
    __swig_getmethods__["auto_polarity_thresh"] = _srmcli.srm_prbs_chk_core_rules_t_auto_polarity_thresh_get
    if _newclass:
        auto_polarity_thresh = _swig_property(_srmcli.srm_prbs_chk_core_rules_t_auto_polarity_thresh_get, _srmcli.srm_prbs_chk_core_rules_t_auto_polarity_thresh_set)
    __swig_setmethods__["pattern_mode"] = _srmcli.srm_prbs_chk_core_rules_t_pattern_mode_set
    __swig_getmethods__["pattern_mode"] = _srmcli.srm_prbs_chk_core_rules_t_pattern_mode_get
    if _newclass:
        pattern_mode = _swig_property(_srmcli.srm_prbs_chk_core_rules_t_pattern_mode_get, _srmcli.srm_prbs_chk_core_rules_t_pattern_mode_set)
    __swig_setmethods__["fixed_pat0"] = _srmcli.srm_prbs_chk_core_rules_t_fixed_pat0_set
    __swig_getmethods__["fixed_pat0"] = _srmcli.srm_prbs_chk_core_rules_t_fixed_pat0_get
    if _newclass:
        fixed_pat0 = _swig_property(_srmcli.srm_prbs_chk_core_rules_t_fixed_pat0_get, _srmcli.srm_prbs_chk_core_rules_t_fixed_pat0_set)
    __swig_setmethods__["fixed_pat1"] = _srmcli.srm_prbs_chk_core_rules_t_fixed_pat1_set
    __swig_getmethods__["fixed_pat1"] = _srmcli.srm_prbs_chk_core_rules_t_fixed_pat1_get
    if _newclass:
        fixed_pat1 = _swig_property(_srmcli.srm_prbs_chk_core_rules_t_fixed_pat1_get, _srmcli.srm_prbs_chk_core_rules_t_fixed_pat1_set)
    __swig_setmethods__["fixed_pat2"] = _srmcli.srm_prbs_chk_core_rules_t_fixed_pat2_set
    __swig_getmethods__["fixed_pat2"] = _srmcli.srm_prbs_chk_core_rules_t_fixed_pat2_get
    if _newclass:
        fixed_pat2 = _swig_property(_srmcli.srm_prbs_chk_core_rules_t_fixed_pat2_get, _srmcli.srm_prbs_chk_core_rules_t_fixed_pat2_set)
    __swig_setmethods__["fixed_pat3"] = _srmcli.srm_prbs_chk_core_rules_t_fixed_pat3_set
    __swig_getmethods__["fixed_pat3"] = _srmcli.srm_prbs_chk_core_rules_t_fixed_pat3_get
    if _newclass:
        fixed_pat3 = _swig_property(_srmcli.srm_prbs_chk_core_rules_t_fixed_pat3_get, _srmcli.srm_prbs_chk_core_rules_t_fixed_pat3_set)
    __swig_setmethods__["oos_thresh"] = _srmcli.srm_prbs_chk_core_rules_t_oos_thresh_set
    __swig_getmethods__["oos_thresh"] = _srmcli.srm_prbs_chk_core_rules_t_oos_thresh_get
    if _newclass:
        oos_thresh = _swig_property(_srmcli.srm_prbs_chk_core_rules_t_oos_thresh_get, _srmcli.srm_prbs_chk_core_rules_t_oos_thresh_set)

    def __init__(self):
        """__init__(srm_prbs_chk_core_rules_t self) -> srm_prbs_chk_core_rules_t"""
        this = _srmcli.new_srm_prbs_chk_core_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_prbs_chk_core_rules_t
    __del__ = lambda self: None
srm_prbs_chk_core_rules_t_swigregister = _srmcli.srm_prbs_chk_core_rules_t_swigregister
srm_prbs_chk_core_rules_t_swigregister(srm_prbs_chk_core_rules_t)

class srm_prbs_chk_serial_rules_t(_object):
    """Proxy of C++ srm_prbs_chk_serial_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_prbs_chk_serial_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_prbs_chk_serial_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prbs_err_th_irq"] = _srmcli.srm_prbs_chk_serial_rules_t_prbs_err_th_irq_set
    __swig_getmethods__["prbs_err_th_irq"] = _srmcli.srm_prbs_chk_serial_rules_t_prbs_err_th_irq_get
    if _newclass:
        prbs_err_th_irq = _swig_property(_srmcli.srm_prbs_chk_serial_rules_t_prbs_err_th_irq_get, _srmcli.srm_prbs_chk_serial_rules_t_prbs_err_th_irq_set)
    __swig_setmethods__["prbs_auto_lock"] = _srmcli.srm_prbs_chk_serial_rules_t_prbs_auto_lock_set
    __swig_getmethods__["prbs_auto_lock"] = _srmcli.srm_prbs_chk_serial_rules_t_prbs_auto_lock_get
    if _newclass:
        prbs_auto_lock = _swig_property(_srmcli.srm_prbs_chk_serial_rules_t_prbs_auto_lock_get, _srmcli.srm_prbs_chk_serial_rules_t_prbs_auto_lock_set)
    __swig_setmethods__["prbs_err_th_lock"] = _srmcli.srm_prbs_chk_serial_rules_t_prbs_err_th_lock_set
    __swig_getmethods__["prbs_err_th_lock"] = _srmcli.srm_prbs_chk_serial_rules_t_prbs_err_th_lock_get
    if _newclass:
        prbs_err_th_lock = _swig_property(_srmcli.srm_prbs_chk_serial_rules_t_prbs_err_th_lock_get, _srmcli.srm_prbs_chk_serial_rules_t_prbs_err_th_lock_set)
    __swig_setmethods__["prbs_cyc_th_lock"] = _srmcli.srm_prbs_chk_serial_rules_t_prbs_cyc_th_lock_set
    __swig_getmethods__["prbs_cyc_th_lock"] = _srmcli.srm_prbs_chk_serial_rules_t_prbs_cyc_th_lock_get
    if _newclass:
        prbs_cyc_th_lock = _swig_property(_srmcli.srm_prbs_chk_serial_rules_t_prbs_cyc_th_lock_get, _srmcli.srm_prbs_chk_serial_rules_t_prbs_cyc_th_lock_set)

    def __init__(self):
        """__init__(srm_prbs_chk_serial_rules_t self) -> srm_prbs_chk_serial_rules_t"""
        this = _srmcli.new_srm_prbs_chk_serial_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_prbs_chk_serial_rules_t
    __del__ = lambda self: None
srm_prbs_chk_serial_rules_t_swigregister = _srmcli.srm_prbs_chk_serial_rules_t_swigregister
srm_prbs_chk_serial_rules_t_swigregister(srm_prbs_chk_serial_rules_t)

class srm_prbs_chk_rules_t(_object):
    """Proxy of C++ srm_prbs_chk_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_prbs_chk_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_prbs_chk_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["en"] = _srmcli.srm_prbs_chk_rules_t_en_set
    __swig_getmethods__["en"] = _srmcli.srm_prbs_chk_rules_t_en_get
    if _newclass:
        en = _swig_property(_srmcli.srm_prbs_chk_rules_t_en_get, _srmcli.srm_prbs_chk_rules_t_en_set)
    __swig_setmethods__["prbs_mode"] = _srmcli.srm_prbs_chk_rules_t_prbs_mode_set
    __swig_getmethods__["prbs_mode"] = _srmcli.srm_prbs_chk_rules_t_prbs_mode_get
    if _newclass:
        prbs_mode = _swig_property(_srmcli.srm_prbs_chk_rules_t_prbs_mode_get, _srmcli.srm_prbs_chk_rules_t_prbs_mode_set)
    __swig_setmethods__["prbs_inv"] = _srmcli.srm_prbs_chk_rules_t_prbs_inv_set
    __swig_getmethods__["prbs_inv"] = _srmcli.srm_prbs_chk_rules_t_prbs_inv_get
    if _newclass:
        prbs_inv = _swig_property(_srmcli.srm_prbs_chk_rules_t_prbs_inv_get, _srmcli.srm_prbs_chk_rules_t_prbs_inv_set)
    __swig_setmethods__["prbs_pattern_lsb"] = _srmcli.srm_prbs_chk_rules_t_prbs_pattern_lsb_set
    __swig_getmethods__["prbs_pattern_lsb"] = _srmcli.srm_prbs_chk_rules_t_prbs_pattern_lsb_get
    if _newclass:
        prbs_pattern_lsb = _swig_property(_srmcli.srm_prbs_chk_rules_t_prbs_pattern_lsb_get, _srmcli.srm_prbs_chk_rules_t_prbs_pattern_lsb_set)
    __swig_setmethods__["prbs_pattern"] = _srmcli.srm_prbs_chk_rules_t_prbs_pattern_set
    __swig_getmethods__["prbs_pattern"] = _srmcli.srm_prbs_chk_rules_t_prbs_pattern_get
    if _newclass:
        prbs_pattern = _swig_property(_srmcli.srm_prbs_chk_rules_t_prbs_pattern_get, _srmcli.srm_prbs_chk_rules_t_prbs_pattern_set)
    __swig_setmethods__["serial"] = _srmcli.srm_prbs_chk_rules_t_serial_set
    __swig_getmethods__["serial"] = _srmcli.srm_prbs_chk_rules_t_serial_get
    if _newclass:
        serial = _swig_property(_srmcli.srm_prbs_chk_rules_t_serial_get, _srmcli.srm_prbs_chk_rules_t_serial_set)
    __swig_setmethods__["core"] = _srmcli.srm_prbs_chk_rules_t_core_set
    __swig_getmethods__["core"] = _srmcli.srm_prbs_chk_rules_t_core_get
    if _newclass:
        core = _swig_property(_srmcli.srm_prbs_chk_rules_t_core_get, _srmcli.srm_prbs_chk_rules_t_core_set)

    def __init__(self):
        """__init__(srm_prbs_chk_rules_t self) -> srm_prbs_chk_rules_t"""
        this = _srmcli.new_srm_prbs_chk_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_prbs_chk_rules_t
    __del__ = lambda self: None
srm_prbs_chk_rules_t_swigregister = _srmcli.srm_prbs_chk_rules_t_swigregister
srm_prbs_chk_rules_t_swigregister(srm_prbs_chk_rules_t)

class srm_prbs_chk_status_t(_object):
    """Proxy of C++ srm_prbs_chk_status_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_prbs_chk_status_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_prbs_chk_status_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prbs_mode"] = _srmcli.srm_prbs_chk_status_t_prbs_mode_set
    __swig_getmethods__["prbs_mode"] = _srmcli.srm_prbs_chk_status_t_prbs_mode_get
    if _newclass:
        prbs_mode = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_mode_get, _srmcli.srm_prbs_chk_status_t_prbs_mode_set)
    __swig_setmethods__["prbs_lock"] = _srmcli.srm_prbs_chk_status_t_prbs_lock_set
    __swig_getmethods__["prbs_lock"] = _srmcli.srm_prbs_chk_status_t_prbs_lock_get
    if _newclass:
        prbs_lock = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_lock_get, _srmcli.srm_prbs_chk_status_t_prbs_lock_set)
    __swig_setmethods__["prbs_lock_lsb"] = _srmcli.srm_prbs_chk_status_t_prbs_lock_lsb_set
    __swig_getmethods__["prbs_lock_lsb"] = _srmcli.srm_prbs_chk_status_t_prbs_lock_lsb_get
    if _newclass:
        prbs_lock_lsb = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_lock_lsb_get, _srmcli.srm_prbs_chk_status_t_prbs_lock_lsb_set)
    __swig_setmethods__["prbs_fixed_pat_sync"] = _srmcli.srm_prbs_chk_status_t_prbs_fixed_pat_sync_set
    __swig_getmethods__["prbs_fixed_pat_sync"] = _srmcli.srm_prbs_chk_status_t_prbs_fixed_pat_sync_get
    if _newclass:
        prbs_fixed_pat_sync = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_fixed_pat_sync_get, _srmcli.srm_prbs_chk_status_t_prbs_fixed_pat_sync_set)
    __swig_setmethods__["prbs_pattern"] = _srmcli.srm_prbs_chk_status_t_prbs_pattern_set
    __swig_getmethods__["prbs_pattern"] = _srmcli.srm_prbs_chk_status_t_prbs_pattern_get
    if _newclass:
        prbs_pattern = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_pattern_get, _srmcli.srm_prbs_chk_status_t_prbs_pattern_set)
    __swig_setmethods__["prbs_pattern_lsb"] = _srmcli.srm_prbs_chk_status_t_prbs_pattern_lsb_set
    __swig_getmethods__["prbs_pattern_lsb"] = _srmcli.srm_prbs_chk_status_t_prbs_pattern_lsb_get
    if _newclass:
        prbs_pattern_lsb = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_pattern_lsb_get, _srmcli.srm_prbs_chk_status_t_prbs_pattern_lsb_set)
    __swig_setmethods__["prbs_total_bit_count_saturated"] = _srmcli.srm_prbs_chk_status_t_prbs_total_bit_count_saturated_set
    __swig_getmethods__["prbs_total_bit_count_saturated"] = _srmcli.srm_prbs_chk_status_t_prbs_total_bit_count_saturated_get
    if _newclass:
        prbs_total_bit_count_saturated = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_total_bit_count_saturated_get, _srmcli.srm_prbs_chk_status_t_prbs_total_bit_count_saturated_set)
    __swig_setmethods__["prbs_error_bit_count"] = _srmcli.srm_prbs_chk_status_t_prbs_error_bit_count_set
    __swig_getmethods__["prbs_error_bit_count"] = _srmcli.srm_prbs_chk_status_t_prbs_error_bit_count_get
    if _newclass:
        prbs_error_bit_count = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_error_bit_count_get, _srmcli.srm_prbs_chk_status_t_prbs_error_bit_count_set)
    __swig_setmethods__["prbs_error_bit_count_lsb"] = _srmcli.srm_prbs_chk_status_t_prbs_error_bit_count_lsb_set
    __swig_getmethods__["prbs_error_bit_count_lsb"] = _srmcli.srm_prbs_chk_status_t_prbs_error_bit_count_lsb_get
    if _newclass:
        prbs_error_bit_count_lsb = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_error_bit_count_lsb_get, _srmcli.srm_prbs_chk_status_t_prbs_error_bit_count_lsb_set)
    __swig_setmethods__["prbs_total_bit_count"] = _srmcli.srm_prbs_chk_status_t_prbs_total_bit_count_set
    __swig_getmethods__["prbs_total_bit_count"] = _srmcli.srm_prbs_chk_status_t_prbs_total_bit_count_get
    if _newclass:
        prbs_total_bit_count = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_total_bit_count_get, _srmcli.srm_prbs_chk_status_t_prbs_total_bit_count_set)
    __swig_setmethods__["prbs_inv"] = _srmcli.srm_prbs_chk_status_t_prbs_inv_set
    __swig_getmethods__["prbs_inv"] = _srmcli.srm_prbs_chk_status_t_prbs_inv_get
    if _newclass:
        prbs_inv = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_inv_get, _srmcli.srm_prbs_chk_status_t_prbs_inv_set)
    __swig_setmethods__["prbs_inv_lsb"] = _srmcli.srm_prbs_chk_status_t_prbs_inv_lsb_set
    __swig_getmethods__["prbs_inv_lsb"] = _srmcli.srm_prbs_chk_status_t_prbs_inv_lsb_get
    if _newclass:
        prbs_inv_lsb = _swig_property(_srmcli.srm_prbs_chk_status_t_prbs_inv_lsb_get, _srmcli.srm_prbs_chk_status_t_prbs_inv_lsb_set)

    def __init__(self):
        """__init__(srm_prbs_chk_status_t self) -> srm_prbs_chk_status_t"""
        this = _srmcli.new_srm_prbs_chk_status_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_prbs_chk_status_t
    __del__ = lambda self: None
srm_prbs_chk_status_t_swigregister = _srmcli.srm_prbs_chk_status_t_swigregister
srm_prbs_chk_status_t_swigregister(srm_prbs_chk_status_t)


def srm_prbs_gen_rules_set_default(gen_rules):
    """srm_prbs_gen_rules_set_default(srm_prbs_gen_rules_t gen_rules) -> ip_status_t"""
    return _srmcli.srm_prbs_gen_rules_set_default(gen_rules)

def srm_prbs_chk_rules_set_default(chk_rules):
    """srm_prbs_chk_rules_set_default(srm_prbs_chk_rules_t chk_rules) -> ip_status_t"""
    return _srmcli.srm_prbs_chk_rules_set_default(chk_rules)

def srm_prbs_gen_config(die, channel, intf, gen_rules):
    """srm_prbs_gen_config(uint32_t die, uint32_t channel, e_srm_intf intf, srm_prbs_gen_rules_t gen_rules) -> ip_status_t"""
    return _srmcli.srm_prbs_gen_config(die, channel, intf, gen_rules)

def srm_prbs_chk_config(die, channel, intf, chk_rules):
    """srm_prbs_chk_config(uint32_t die, uint32_t channel, e_srm_intf intf, srm_prbs_chk_rules_t chk_rules) -> ip_status_t"""
    return _srmcli.srm_prbs_chk_config(die, channel, intf, chk_rules)

def srm_prbs_chk_is_enabled(die, channel, intf):
    """srm_prbs_chk_is_enabled(uint32_t die, uint32_t channel, e_srm_intf intf) -> bool"""
    return _srmcli.srm_prbs_chk_is_enabled(die, channel, intf)

def srm_prbs_chk_status(die, channel, intf, chk_status):
    """srm_prbs_chk_status(uint32_t die, uint32_t channel, e_srm_intf intf, srm_prbs_chk_status_t chk_status) -> ip_status_t"""
    return _srmcli.srm_prbs_chk_status(die, channel, intf, chk_status)

def srm_prbs_chk_status_print(die, channel, intf, chk_status):
    """srm_prbs_chk_status_print(uint32_t die, uint32_t channel, e_srm_intf intf, srm_prbs_chk_status_t chk_status) -> ip_status_t"""
    return _srmcli.srm_prbs_chk_status_print(die, channel, intf, chk_status)

def srm_prbs_chk_status_query_print(die, channel, intf):
    """srm_prbs_chk_status_query_print(uint32_t die, uint32_t channel, e_srm_intf intf) -> ip_status_t"""
    return _srmcli.srm_prbs_chk_status_query_print(die, channel, intf)

def srm_prbs_gen_error_inject(die, channel, enable, pattern, gap, duration):
    """srm_prbs_gen_error_inject(uint32_t die, uint32_t channel, bool enable, e_srm_prbs_err_inj_pat pattern, uint8_t gap, uint8_t duration) -> ip_status_t"""
    return _srmcli.srm_prbs_gen_error_inject(die, channel, enable, pattern, gap, duration)
SRM_RX_SNR_SYMBOL_COUNT_2EXP10 = _srmcli.SRM_RX_SNR_SYMBOL_COUNT_2EXP10
SRM_RX_SNR_SYMBOL_COUNT_2EXP13 = _srmcli.SRM_RX_SNR_SYMBOL_COUNT_2EXP13
SRM_RX_SNR_SYMBOL_COUNT_2EXP16 = _srmcli.SRM_RX_SNR_SYMBOL_COUNT_2EXP16
SRM_RX_SNR_SYMBOL_COUNT_2EXP19 = _srmcli.SRM_RX_SNR_SYMBOL_COUNT_2EXP19
SRM_RX_SNR_SYMBOL_COUNT_USE_DEFAULT = _srmcli.SRM_RX_SNR_SYMBOL_COUNT_USE_DEFAULT
SRM_RX_DSP_ERR_GEN1_NO_RC = _srmcli.SRM_RX_DSP_ERR_GEN1_NO_RC
SRM_RX_DSP_ERR_GEN2_POST_RC = _srmcli.SRM_RX_DSP_ERR_GEN2_POST_RC
SRM_RX_DSP_ERR_GEN_USE_DEFAULT = _srmcli.SRM_RX_DSP_ERR_GEN_USE_DEFAULT
class srm_rx_dsp_dfe_coefficients_t(_object):
    """Proxy of C++ srm_rx_dsp_dfe_coefficients_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_rx_dsp_dfe_coefficients_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_rx_dsp_dfe_coefficients_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dfe_f1"] = _srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_f1_set
    __swig_getmethods__["dfe_f1"] = _srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_f1_get
    if _newclass:
        dfe_f1 = _swig_property(_srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_f1_get, _srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_f1_set)
    __swig_setmethods__["dfe_nlfb0"] = _srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_nlfb0_set
    __swig_getmethods__["dfe_nlfb0"] = _srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_nlfb0_get
    if _newclass:
        dfe_nlfb0 = _swig_property(_srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_nlfb0_get, _srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_nlfb0_set)
    __swig_setmethods__["dfe_nlfb1"] = _srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_nlfb1_set
    __swig_getmethods__["dfe_nlfb1"] = _srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_nlfb1_get
    if _newclass:
        dfe_nlfb1 = _swig_property(_srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_nlfb1_get, _srmcli.srm_rx_dsp_dfe_coefficients_t_dfe_nlfb1_set)

    def __init__(self):
        """__init__(srm_rx_dsp_dfe_coefficients_t self) -> srm_rx_dsp_dfe_coefficients_t"""
        this = _srmcli.new_srm_rx_dsp_dfe_coefficients_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_rx_dsp_dfe_coefficients_t
    __del__ = lambda self: None
srm_rx_dsp_dfe_coefficients_t_swigregister = _srmcli.srm_rx_dsp_dfe_coefficients_t_swigregister
srm_rx_dsp_dfe_coefficients_t_swigregister(srm_rx_dsp_dfe_coefficients_t)


def srm_rx_dsp_dfe_get_coefficients(die, channel, sub_channel, dfe_coeffs):
    """srm_rx_dsp_dfe_get_coefficients(uint32_t die, uint32_t channel, uint32_t sub_channel, srm_rx_dsp_dfe_coefficients_t dfe_coeffs) -> ip_status_t"""
    return _srmcli.srm_rx_dsp_dfe_get_coefficients(die, channel, sub_channel, dfe_coeffs)

def srm_rx_dsp_dfe_coefficients_print(die, channel):
    """srm_rx_dsp_dfe_coefficients_print(uint32_t die, uint32_t channel) -> ip_status_t"""
    return _srmcli.srm_rx_dsp_dfe_coefficients_print(die, channel)

def srm_rx_dsp_snr_mon_en(die, channel, enable):
    """srm_rx_dsp_snr_mon_en(uint32_t die, uint32_t channel, bool enable)"""
    return _srmcli.srm_rx_dsp_snr_mon_en(die, channel, enable)

def srm_rx_dsp_snr_mon_enabled(die, channel):
    """srm_rx_dsp_snr_mon_enabled(uint32_t die, uint32_t channel) -> bool"""
    return _srmcli.srm_rx_dsp_snr_mon_enabled(die, channel)

def srm_rx_dsp_snr_mon_cfg(die, channel, errgen, block_cnt):
    """srm_rx_dsp_snr_mon_cfg(uint32_t die, uint32_t channel, e_srm_rx_error_gen errgen, e_srm_rx_snr_symbol_count block_cnt)"""
    return _srmcli.srm_rx_dsp_snr_mon_cfg(die, channel, errgen, block_cnt)

def srm_rx_dsp_snr_read_value(die, channel):
    """srm_rx_dsp_snr_read_value(uint32_t die, uint32_t channel) -> uint16_t"""
    return _srmcli.srm_rx_dsp_snr_read_value(die, channel)

def srm_rx_dsp_snr_read_db_fixp(die, channel):
    """srm_rx_dsp_snr_read_db_fixp(uint32_t die, uint32_t channel) -> uint32_t"""
    return _srmcli.srm_rx_dsp_snr_read_db_fixp(die, channel)

def srm_rx_dsp_snr_format(snr_val, pam_mode):
    """srm_rx_dsp_snr_format(uint16_t snr_val, e_srm_signal_mode pam_mode) -> double"""
    return _srmcli.srm_rx_dsp_snr_format(snr_val, pam_mode)

def srm_rx_dsp_snr_read_db(die, channel):
    """srm_rx_dsp_snr_read_db(uint32_t die, uint32_t channel) -> double"""
    return _srmcli.srm_rx_dsp_snr_read_db(die, channel)

def srm_snr_fixp_to_mse(snr_mdb, pam_mode):
    """srm_snr_fixp_to_mse(uint32_t snr_mdb, e_srm_signal_mode pam_mode) -> uint16_t"""
    return _srmcli.srm_snr_fixp_to_mse(snr_mdb, pam_mode)
SRM_FFE_TAP_PRE_CURSOR_4 = _srmcli.SRM_FFE_TAP_PRE_CURSOR_4
SRM_FFE_TAP_PRE_CURSOR_3 = _srmcli.SRM_FFE_TAP_PRE_CURSOR_3
SRM_FFE_TAP_PRE_CURSOR_2 = _srmcli.SRM_FFE_TAP_PRE_CURSOR_2
SRM_FFE_TAP_PRE_CURSOR_1 = _srmcli.SRM_FFE_TAP_PRE_CURSOR_1
SRM_FFE_TAP_MAIN_CURSOR = _srmcli.SRM_FFE_TAP_MAIN_CURSOR
SRM_FFE_TAP_POST_CURSOR_1 = _srmcli.SRM_FFE_TAP_POST_CURSOR_1
SRM_FFE_TAP_POST_CURSOR_2 = _srmcli.SRM_FFE_TAP_POST_CURSOR_2
SRM_FFE_TAP_POST_CURSOR_3 = _srmcli.SRM_FFE_TAP_POST_CURSOR_3
SRM_FFE_TAP_POST_CURSOR_4 = _srmcli.SRM_FFE_TAP_POST_CURSOR_4
SRM_FFE_TAP_POST_CURSOR_5 = _srmcli.SRM_FFE_TAP_POST_CURSOR_5
SRM_FFE_TAP_COUNT = _srmcli.SRM_FFE_TAP_COUNT

def srm_rx_dsp_dbg_translate_ffe_tap_index(tap_index):
    """srm_rx_dsp_dbg_translate_ffe_tap_index(e_srm_rx_ffe_taps tap_index) -> char const *"""
    return _srmcli.srm_rx_dsp_dbg_translate_ffe_tap_index(tap_index)

def srm_rx_dsp_ffe_taps_query_dump(die, channel, ffe_sub_channel):
    """srm_rx_dsp_ffe_taps_query_dump(uint32_t die, uint32_t channel, uint16_t ffe_sub_channel) -> ip_status_t"""
    return _srmcli.srm_rx_dsp_ffe_taps_query_dump(die, channel, ffe_sub_channel)

def srm_rx_dsp_hist_query_dump(die, channel, errgen):
    """srm_rx_dsp_hist_query_dump(uint32_t die, uint32_t channel, e_srm_rx_error_gen errgen) -> ip_status_t"""
    return _srmcli.srm_rx_dsp_hist_query_dump(die, channel, errgen)

def srm_rx_dsp_hist_query_dump_to_file(die, channel, errgen, path):
    """srm_rx_dsp_hist_query_dump_to_file(uint32_t die, uint32_t channel, e_srm_rx_error_gen errgen, char const * path) -> ip_status_t"""
    return _srmcli.srm_rx_dsp_hist_query_dump_to_file(die, channel, errgen, path)
class srm_rx_qc_stats_t(_object):
    """Proxy of C++ srm_rx_qc_stats_s class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_rx_qc_stats_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_rx_qc_stats_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rx_qc_status"] = _srmcli.srm_rx_qc_stats_t_rx_qc_status_set
    __swig_getmethods__["rx_qc_status"] = _srmcli.srm_rx_qc_stats_t_rx_qc_status_get
    if _newclass:
        rx_qc_status = _swig_property(_srmcli.srm_rx_qc_stats_t_rx_qc_status_get, _srmcli.srm_rx_qc_stats_t_rx_qc_status_set)
    __swig_setmethods__["up_retry_fail_cnt"] = _srmcli.srm_rx_qc_stats_t_up_retry_fail_cnt_set
    __swig_getmethods__["up_retry_fail_cnt"] = _srmcli.srm_rx_qc_stats_t_up_retry_fail_cnt_get
    if _newclass:
        up_retry_fail_cnt = _swig_property(_srmcli.srm_rx_qc_stats_t_up_retry_fail_cnt_get, _srmcli.srm_rx_qc_stats_t_up_retry_fail_cnt_set)
    __swig_setmethods__["up_retry_pass_cnt"] = _srmcli.srm_rx_qc_stats_t_up_retry_pass_cnt_set
    __swig_getmethods__["up_retry_pass_cnt"] = _srmcli.srm_rx_qc_stats_t_up_retry_pass_cnt_get
    if _newclass:
        up_retry_pass_cnt = _swig_property(_srmcli.srm_rx_qc_stats_t_up_retry_pass_cnt_get, _srmcli.srm_rx_qc_stats_t_up_retry_pass_cnt_set)
    __swig_setmethods__["dn_retry_fail_cnt"] = _srmcli.srm_rx_qc_stats_t_dn_retry_fail_cnt_set
    __swig_getmethods__["dn_retry_fail_cnt"] = _srmcli.srm_rx_qc_stats_t_dn_retry_fail_cnt_get
    if _newclass:
        dn_retry_fail_cnt = _swig_property(_srmcli.srm_rx_qc_stats_t_dn_retry_fail_cnt_get, _srmcli.srm_rx_qc_stats_t_dn_retry_fail_cnt_set)
    __swig_setmethods__["up_mse_pass"] = _srmcli.srm_rx_qc_stats_t_up_mse_pass_set
    __swig_getmethods__["up_mse_pass"] = _srmcli.srm_rx_qc_stats_t_up_mse_pass_get
    if _newclass:
        up_mse_pass = _swig_property(_srmcli.srm_rx_qc_stats_t_up_mse_pass_get, _srmcli.srm_rx_qc_stats_t_up_mse_pass_set)
    __swig_setmethods__["up_mse_fail"] = _srmcli.srm_rx_qc_stats_t_up_mse_fail_set
    __swig_getmethods__["up_mse_fail"] = _srmcli.srm_rx_qc_stats_t_up_mse_fail_get
    if _newclass:
        up_mse_fail = _swig_property(_srmcli.srm_rx_qc_stats_t_up_mse_fail_get, _srmcli.srm_rx_qc_stats_t_up_mse_fail_set)
    __swig_setmethods__["dn_mse_pass"] = _srmcli.srm_rx_qc_stats_t_dn_mse_pass_set
    __swig_getmethods__["dn_mse_pass"] = _srmcli.srm_rx_qc_stats_t_dn_mse_pass_get
    if _newclass:
        dn_mse_pass = _swig_property(_srmcli.srm_rx_qc_stats_t_dn_mse_pass_get, _srmcli.srm_rx_qc_stats_t_dn_mse_pass_set)
    __swig_setmethods__["dn_mse_fail"] = _srmcli.srm_rx_qc_stats_t_dn_mse_fail_set
    __swig_getmethods__["dn_mse_fail"] = _srmcli.srm_rx_qc_stats_t_dn_mse_fail_get
    if _newclass:
        dn_mse_fail = _swig_property(_srmcli.srm_rx_qc_stats_t_dn_mse_fail_get, _srmcli.srm_rx_qc_stats_t_dn_mse_fail_set)
    __swig_setmethods__["up_retry_pass_cnt_accum"] = _srmcli.srm_rx_qc_stats_t_up_retry_pass_cnt_accum_set
    __swig_getmethods__["up_retry_pass_cnt_accum"] = _srmcli.srm_rx_qc_stats_t_up_retry_pass_cnt_accum_get
    if _newclass:
        up_retry_pass_cnt_accum = _swig_property(_srmcli.srm_rx_qc_stats_t_up_retry_pass_cnt_accum_get, _srmcli.srm_rx_qc_stats_t_up_retry_pass_cnt_accum_set)
    __swig_setmethods__["dn_retry_fail_cnt_accum"] = _srmcli.srm_rx_qc_stats_t_dn_retry_fail_cnt_accum_set
    __swig_getmethods__["dn_retry_fail_cnt_accum"] = _srmcli.srm_rx_qc_stats_t_dn_retry_fail_cnt_accum_get
    if _newclass:
        dn_retry_fail_cnt_accum = _swig_property(_srmcli.srm_rx_qc_stats_t_dn_retry_fail_cnt_accum_get, _srmcli.srm_rx_qc_stats_t_dn_retry_fail_cnt_accum_set)
    __swig_setmethods__["up_mse_fail_max"] = _srmcli.srm_rx_qc_stats_t_up_mse_fail_max_set
    __swig_getmethods__["up_mse_fail_max"] = _srmcli.srm_rx_qc_stats_t_up_mse_fail_max_get
    if _newclass:
        up_mse_fail_max = _swig_property(_srmcli.srm_rx_qc_stats_t_up_mse_fail_max_get, _srmcli.srm_rx_qc_stats_t_up_mse_fail_max_set)
    __swig_setmethods__["dn_mse_fail_max"] = _srmcli.srm_rx_qc_stats_t_dn_mse_fail_max_set
    __swig_getmethods__["dn_mse_fail_max"] = _srmcli.srm_rx_qc_stats_t_dn_mse_fail_max_get
    if _newclass:
        dn_mse_fail_max = _swig_property(_srmcli.srm_rx_qc_stats_t_dn_mse_fail_max_get, _srmcli.srm_rx_qc_stats_t_dn_mse_fail_max_set)

    def __init__(self):
        """__init__(srm_rx_qc_stats_s self) -> srm_rx_qc_stats_t"""
        this = _srmcli.new_srm_rx_qc_stats_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_rx_qc_stats_t
    __del__ = lambda self: None
srm_rx_qc_stats_t_swigregister = _srmcli.srm_rx_qc_stats_t_swigregister
srm_rx_qc_stats_t_swigregister(srm_rx_qc_stats_t)


def srm_channel_mask_rx_qc_update(die, ch_mask, rx_qc):
    """srm_channel_mask_rx_qc_update(uint32_t die, uint32_t ch_mask, srm_rx_qc_rules_t rx_qc) -> ip_status_t"""
    return _srmcli.srm_channel_mask_rx_qc_update(die, ch_mask, rx_qc)

def srm_channel_rx_qc_query(die, channel, rx_qc):
    """srm_channel_rx_qc_query(uint32_t die, uint32_t channel, srm_rx_qc_rules_t rx_qc) -> ip_status_t"""
    return _srmcli.srm_channel_rx_qc_query(die, channel, rx_qc)

def srm_channel_rx_qc_print(die, channel, rx_qc):
    """srm_channel_rx_qc_print(uint32_t die, uint32_t channel, srm_rx_qc_rules_t rx_qc) -> ip_status_t"""
    return _srmcli.srm_channel_rx_qc_print(die, channel, rx_qc)

def srm_rx_qc_stats_query(die, channel, stats):
    """srm_rx_qc_stats_query(uint32_t die, uint32_t channel, srm_rx_qc_stats_t stats) -> ip_status_t"""
    return _srmcli.srm_rx_qc_stats_query(die, channel, stats)

def srm_rx_qc_stats_print(die, channel, stats):
    """srm_rx_qc_stats_print(uint32_t die, uint32_t channel, srm_rx_qc_stats_t stats) -> ip_status_t"""
    return _srmcli.srm_rx_qc_stats_print(die, channel, stats)

def srm_diags_register_dump(die):
    """srm_diags_register_dump(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_diags_register_dump(die)

def srm_diags_internal_data_write(die, index, long_offset, long_max, long_buf, byte_count):
    """srm_diags_internal_data_write(uint32_t die, int index, uint32_t long_offset, uint32_t long_max, uint32_t * long_buf, uint32_t * byte_count) -> ip_status_t"""
    return _srmcli.srm_diags_internal_data_write(die, index, long_offset, long_max, long_buf, byte_count)

def srm_diags_internal_data_query(die, index, long_offset, long_max, long_buf, byte_count):
    """srm_diags_internal_data_query(uint32_t die, int index, uint32_t long_offset, uint32_t long_max, uint32_t * long_buf, uint32_t * byte_count) -> ip_status_t"""
    return _srmcli.srm_diags_internal_data_query(die, index, long_offset, long_max, long_buf, byte_count)
STATE_TX_PMD_ERROR = _srmcli.STATE_TX_PMD_ERROR
STATE_TX_PMD_RESET_PD = _srmcli.STATE_TX_PMD_RESET_PD
STATE_TX_PMD_IDLE = _srmcli.STATE_TX_PMD_IDLE
STATE_TX_PMD_BASE_PU = _srmcli.STATE_TX_PMD_BASE_PU
STATE_TX_PMD_PLL_SETUP = _srmcli.STATE_TX_PMD_PLL_SETUP
STATE_TX_PMD_PLL_FCAL = _srmcli.STATE_TX_PMD_PLL_FCAL
STATE_TX_PMD_LANE_PU = _srmcli.STATE_TX_PMD_LANE_PU
STATE_TX_PMD_SOFT_RESET = _srmcli.STATE_TX_PMD_SOFT_RESET
STATE_TX_PMD_CONFIGURE = _srmcli.STATE_TX_PMD_CONFIGURE
STATE_TX_PMD_READY = _srmcli.STATE_TX_PMD_READY
STATE_TX_PMD_RUN = _srmcli.STATE_TX_PMD_RUN
STATE_TX_PMD_DATA_MODE = _srmcli.STATE_TX_PMD_DATA_MODE
STATE_TX_PMD_DME_MODE = _srmcli.STATE_TX_PMD_DME_MODE
STATE_TX_PMD_TRAIN_MODE = _srmcli.STATE_TX_PMD_TRAIN_MODE
STATE_TX_PMD_READY_TO_TRAIN = _srmcli.STATE_TX_PMD_READY_TO_TRAIN
STATE_RX_PMD_ERROR = _srmcli.STATE_RX_PMD_ERROR
STATE_RX_PMD_RESET_PD = _srmcli.STATE_RX_PMD_RESET_PD
STATE_RX_PMD_IDLE = _srmcli.STATE_RX_PMD_IDLE
STATE_RX_PMD_BASE_PU = _srmcli.STATE_RX_PMD_BASE_PU
STATE_RX_PMD_PLL_SETUP = _srmcli.STATE_RX_PMD_PLL_SETUP
STATE_RX_PMD_PLL_FCAL = _srmcli.STATE_RX_PMD_PLL_FCAL
STATE_RX_PMD_LANE_PU = _srmcli.STATE_RX_PMD_LANE_PU
STATE_RX_PMD_SOFT_RESET = _srmcli.STATE_RX_PMD_SOFT_RESET
STATE_RX_PMD_CONFIGURE = _srmcli.STATE_RX_PMD_CONFIGURE
STATE_RX_PMD_WAIT_DSP_READY = _srmcli.STATE_RX_PMD_WAIT_DSP_READY
STATE_RX_PMD_DATA_MODE = _srmcli.STATE_RX_PMD_DATA_MODE
STATE_RX_PMD_DME_MODE = _srmcli.STATE_RX_PMD_DME_MODE
STATE_RX_PMD_TRAIN_MODE = _srmcli.STATE_RX_PMD_TRAIN_MODE
class srm_fsm_state_t(_object):
    """Proxy of C++ srm_fsm_state_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_fsm_state_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_fsm_state_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chip_init"] = _srmcli.srm_fsm_state_t_chip_init_set
    __swig_getmethods__["chip_init"] = _srmcli.srm_fsm_state_t_chip_init_get
    if _newclass:
        chip_init = _swig_property(_srmcli.srm_fsm_state_t_chip_init_get, _srmcli.srm_fsm_state_t_chip_init_set)
    __swig_setmethods__["pll_init"] = _srmcli.srm_fsm_state_t_pll_init_set
    __swig_getmethods__["pll_init"] = _srmcli.srm_fsm_state_t_pll_init_get
    if _newclass:
        pll_init = _swig_property(_srmcli.srm_fsm_state_t_pll_init_get, _srmcli.srm_fsm_state_t_pll_init_set)
    __swig_setmethods__["tx_init"] = _srmcli.srm_fsm_state_t_tx_init_set
    __swig_getmethods__["tx_init"] = _srmcli.srm_fsm_state_t_tx_init_get
    if _newclass:
        tx_init = _swig_property(_srmcli.srm_fsm_state_t_tx_init_get, _srmcli.srm_fsm_state_t_tx_init_set)
    __swig_setmethods__["tx_pmd_state"] = _srmcli.srm_fsm_state_t_tx_pmd_state_set
    __swig_getmethods__["tx_pmd_state"] = _srmcli.srm_fsm_state_t_tx_pmd_state_get
    if _newclass:
        tx_pmd_state = _swig_property(_srmcli.srm_fsm_state_t_tx_pmd_state_get, _srmcli.srm_fsm_state_t_tx_pmd_state_set)
    __swig_setmethods__["rx_init"] = _srmcli.srm_fsm_state_t_rx_init_set
    __swig_getmethods__["rx_init"] = _srmcli.srm_fsm_state_t_rx_init_get
    if _newclass:
        rx_init = _swig_property(_srmcli.srm_fsm_state_t_rx_init_get, _srmcli.srm_fsm_state_t_rx_init_set)
    __swig_setmethods__["rx_pmd_state"] = _srmcli.srm_fsm_state_t_rx_pmd_state_set
    __swig_getmethods__["rx_pmd_state"] = _srmcli.srm_fsm_state_t_rx_pmd_state_get
    if _newclass:
        rx_pmd_state = _swig_property(_srmcli.srm_fsm_state_t_rx_pmd_state_get, _srmcli.srm_fsm_state_t_rx_pmd_state_set)

    def __init__(self):
        """__init__(srm_fsm_state_t self) -> srm_fsm_state_t"""
        this = _srmcli.new_srm_fsm_state_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_fsm_state_t
    __del__ = lambda self: None
srm_fsm_state_t_swigregister = _srmcli.srm_fsm_state_t_swigregister
srm_fsm_state_t_swigregister(srm_fsm_state_t)


def srm_dbg_fsm_query(die, fsm_state):
    """srm_dbg_fsm_query(uint32_t die, srm_fsm_state_t fsm_state) -> ip_status_t"""
    return _srmcli.srm_dbg_fsm_query(die, fsm_state)

def srm_dbg_fsm_dump(die, fsm_state):
    """srm_dbg_fsm_dump(uint32_t die, srm_fsm_state_t fsm_state) -> ip_status_t"""
    return _srmcli.srm_dbg_fsm_dump(die, fsm_state)

def srm_dbg_fsm_query_dump(die):
    """srm_dbg_fsm_query_dump(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_dbg_fsm_query_dump(die)

def srm_pll_status_query_dump(die):
    """srm_pll_status_query_dump(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_pll_status_query_dump(die)

def srm_dbg_status_dump(die):
    """srm_dbg_status_dump(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_dbg_status_dump(die)
class srm_fw_info_t(_object):
    """Proxy of C++ srm_fw_info_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_fw_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_fw_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["debug_buffer_address"] = _srmcli.srm_fw_info_t_debug_buffer_address_set
    __swig_getmethods__["debug_buffer_address"] = _srmcli.srm_fw_info_t_debug_buffer_address_get
    if _newclass:
        debug_buffer_address = _swig_property(_srmcli.srm_fw_info_t_debug_buffer_address_get, _srmcli.srm_fw_info_t_debug_buffer_address_set)
    __swig_setmethods__["info_buf_address"] = _srmcli.srm_fw_info_t_info_buf_address_set
    __swig_getmethods__["info_buf_address"] = _srmcli.srm_fw_info_t_info_buf_address_get
    if _newclass:
        info_buf_address = _swig_property(_srmcli.srm_fw_info_t_info_buf_address_get, _srmcli.srm_fw_info_t_info_buf_address_set)

    def __init__(self):
        """__init__(srm_fw_info_t self) -> srm_fw_info_t"""
        this = _srmcli.new_srm_fw_info_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_fw_info_t
    __del__ = lambda self: None
srm_fw_info_t_swigregister = _srmcli.srm_fw_info_t_swigregister
srm_fw_info_t_swigregister(srm_fw_info_t)


def srm_mcu_fw_info_query(die, fw_info):
    """srm_mcu_fw_info_query(uint32_t die, srm_fw_info_t fw_info) -> ip_status_t"""
    return _srmcli.srm_mcu_fw_info_query(die, fw_info)
SRM_MCU_DRAM_ADDR_MSW = _srmcli.SRM_MCU_DRAM_ADDR_MSW

def srm_dbg_translate_fw_mode(mode):
    """srm_dbg_translate_fw_mode(e_srm_fw_mode mode) -> char const *"""
    return _srmcli.srm_dbg_translate_fw_mode(mode)

def srm_dbg_translate_tx_pmd_state(tx_pmd_state):
    """srm_dbg_translate_tx_pmd_state(e_srm_tx_pmd_states tx_pmd_state) -> char const *"""
    return _srmcli.srm_dbg_translate_tx_pmd_state(tx_pmd_state)

def srm_dbg_translate_rx_pmd_state(rx_pmd_state):
    """srm_dbg_translate_rx_pmd_state(e_srm_rx_pmd_states rx_pmd_state) -> char const *"""
    return _srmcli.srm_dbg_translate_rx_pmd_state(rx_pmd_state)

def srm_dbg_translate_dsp_mode(dsp_mode):
    """srm_dbg_translate_dsp_mode(e_srm_dsp_mode dsp_mode) -> char const *"""
    return _srmcli.srm_dbg_translate_dsp_mode(dsp_mode)

def srm_dbg_translate_intf(intf):
    """srm_dbg_translate_intf(e_srm_intf intf) -> char const *"""
    return _srmcli.srm_dbg_translate_intf(intf)

def srm_dbg_translate_signalling(signalling):
    """srm_dbg_translate_signalling(e_srm_signal_mode signalling) -> char const *"""
    return _srmcli.srm_dbg_translate_signalling(signalling)

def srm_dbg_translate_lut_mode(lut_mode):
    """srm_dbg_translate_lut_mode(e_srm_lut_mode lut_mode) -> char const *"""
    return _srmcli.srm_dbg_translate_lut_mode(lut_mode)

def srm_dbg_translate_tx_swing(tx_swing):
    """srm_dbg_translate_tx_swing(e_srm_tx_swing tx_swing) -> char const *"""
    return _srmcli.srm_dbg_translate_tx_swing(tx_swing)

def srm_dbg_translate_an_mode(an_mode):
    """srm_dbg_translate_an_mode(e_srm_anlt_mode an_mode) -> char const *"""
    return _srmcli.srm_dbg_translate_an_mode(an_mode)

def srm_dbg_translate_lt_clk_src(lt_clk_src):
    """srm_dbg_translate_lt_clk_src(e_srm_anlt_lt_clk_src lt_clk_src) -> char const *"""
    return _srmcli.srm_dbg_translate_lt_clk_src(lt_clk_src)

def srm_anlt_dbg_an_status_translate(an_status):
    """srm_anlt_dbg_an_status_translate(e_srm_anlt_an_status an_status) -> char const *"""
    return _srmcli.srm_anlt_dbg_an_status_translate(an_status)

def srm_anlt_dbg_an_hcd_translate(an_hcd_rate):
    """srm_anlt_dbg_an_hcd_translate(uint32_t an_hcd_rate) -> char const *"""
    return _srmcli.srm_anlt_dbg_an_hcd_translate(an_hcd_rate)

def srm_anlt_timestamp_write(die, channel, tstamp_val, p_byte_count):
    """srm_anlt_timestamp_write(uint32_t die, uint32_t channel, uint16_t * tstamp_val, uint32_t * p_byte_count) -> ip_status_t"""
    return _srmcli.srm_anlt_timestamp_write(die, channel, tstamp_val, p_byte_count)

def srm_anlt_timestamp_query(die, channel, tstamp_val, p_byte_count):
    """srm_anlt_timestamp_query(uint32_t die, uint32_t channel, uint16_t * tstamp_val, uint32_t * p_byte_count) -> ip_status_t"""
    return _srmcli.srm_anlt_timestamp_query(die, channel, tstamp_val, p_byte_count)

def srm_anlt_timestamp_print(tstamp_val):
    """srm_anlt_timestamp_print(uint16_t * tstamp_val) -> ip_status_t"""
    return _srmcli.srm_anlt_timestamp_print(tstamp_val)

def srm_show_progress_enable(enable):
    """srm_show_progress_enable(bool enable)"""
    return _srmcli.srm_show_progress_enable(enable)

def srm_show_progress():
    """srm_show_progress() -> bool"""
    return _srmcli.srm_show_progress()

def srm_dwld_fw(die, fw_dwld_timeout, fw_warn_if_mismatched):
    """srm_dwld_fw(uint32_t die, uint32_t fw_dwld_timeout, bool fw_warn_if_mismatched) -> ip_status_t"""
    return _srmcli.srm_dwld_fw(die, fw_dwld_timeout, fw_warn_if_mismatched)

def srm_wait_for_pll_lock(die, max_wait):
    """srm_wait_for_pll_lock(uint32_t die, uint32_t max_wait) -> ip_status_t"""
    return _srmcli.srm_wait_for_pll_lock(die, max_wait)

def srm_anlt_rules_set_default(rules):
    """srm_anlt_rules_set_default(srm_anlt_rules_t rules) -> ip_status_t"""
    return _srmcli.srm_anlt_rules_set_default(rules)

def srm_anlt_wait_for_ack_clear(die):
    """srm_anlt_wait_for_ack_clear(uint32_t die) -> ip_status_t"""
    return _srmcli.srm_anlt_wait_for_ack_clear(die)

def srm_anlt_cp_an_to_overlays(die, p_anlt_rules):
    """srm_anlt_cp_an_to_overlays(uint32_t die, srm_anlt_rules_t p_anlt_rules) -> ip_status_t"""
    return _srmcli.srm_anlt_cp_an_to_overlays(die, p_anlt_rules)

def srm_anlt_cp_lt_to_overlays(die, p_anlt_rules):
    """srm_anlt_cp_lt_to_overlays(uint32_t die, srm_anlt_rules_t p_anlt_rules) -> ip_status_t"""
    return _srmcli.srm_anlt_cp_lt_to_overlays(die, p_anlt_rules)

def srm_anlt_req_cmd(die, cmd):
    """srm_anlt_req_cmd(uint32_t die, uint16_t cmd) -> ip_status_t"""
    return _srmcli.srm_anlt_req_cmd(die, cmd)

def srm_cp_rx_rules_bundle_to_channel(bundle, channel, index):
    """srm_cp_rx_rules_bundle_to_channel(srm_rx_bundle_rules_t bundle, srm_rx_rules_t channel, int index) -> ip_status_t"""
    return _srmcli.srm_cp_rx_rules_bundle_to_channel(bundle, channel, index)

def srm_cp_tx_rules_bundle_to_channel(p_bundle, p_channel, index):
    """srm_cp_tx_rules_bundle_to_channel(srm_tx_bundle_rules_t p_bundle, srm_tx_rules_t p_channel, int index) -> ip_status_t"""
    return _srmcli.srm_cp_tx_rules_bundle_to_channel(p_bundle, p_channel, index)

def srm_anlt_init(bundle, rules):
    """srm_anlt_init(srm_anlt_bundle_t bundle, srm_anlt_rules_t rules) -> ip_status_t"""
    return _srmcli.srm_anlt_init(bundle, rules)

def srm_anlt_go(bundle, rules):
    """srm_anlt_go(srm_anlt_bundle_t bundle, srm_anlt_rules_t rules) -> ip_status_t"""
    return _srmcli.srm_anlt_go(bundle, rules)

def srm_anlt_get_an_status(bundle):
    """srm_anlt_get_an_status(srm_anlt_bundle_t bundle) -> e_srm_anlt_an_status"""
    return _srmcli.srm_anlt_get_an_status(bundle)

def srm_anlt_get_an_results(bundle, result):
    """srm_anlt_get_an_results(srm_anlt_bundle_t bundle, srm_anlt_results_t result) -> ip_status_t"""
    return _srmcli.srm_anlt_get_an_results(bundle, result)

def srm_anlt_recenter_tx_fifo(bundle):
    """srm_anlt_recenter_tx_fifo(srm_anlt_bundle_t bundle) -> ip_status_t"""
    return _srmcli.srm_anlt_recenter_tx_fifo(bundle)

def srm_anlt_open_tx(bundle):
    """srm_anlt_open_tx(srm_anlt_bundle_t bundle) -> ip_status_t"""
    return _srmcli.srm_anlt_open_tx(bundle)

def srm_an_query_rx_lp_num_pages(die, channel, num_pages):
    """srm_an_query_rx_lp_num_pages(uint32_t die, uint32_t channel, uint32_t * num_pages) -> ip_status_t"""
    return _srmcli.srm_an_query_rx_lp_num_pages(die, channel, num_pages)

def srm_an_query_rx_lp_page(die, channel, index, upper_page, lower_page):
    """srm_an_query_rx_lp_page(uint32_t die, uint32_t channel, uint32_t index, uint32_t * upper_page, uint32_t * lower_page) -> ip_status_t"""
    return _srmcli.srm_an_query_rx_lp_page(die, channel, index, upper_page, lower_page)

def srm_bcst_emu_stat_query(die, xmt_occp, xmt_vccy, rcv_occp, rcv_vccy):
    """srm_bcst_emu_stat_query(uint32_t die, uint8_t * xmt_occp, uint8_t * xmt_vccy, uint8_t * rcv_occp, uint8_t * rcv_vccy) -> ip_status_t"""
    return _srmcli.srm_bcst_emu_stat_query(die, xmt_occp, xmt_vccy, rcv_occp, rcv_vccy)

def srm_bcst_emu_deq_request(die, master, ch_mask, long_buf, cnt_requested, cnt_actual):
    """srm_bcst_emu_deq_request(uint32_t die, bool master, uint32_t ch_mask, uint32_t * long_buf, uint16_t cnt_requested, uint16_t * cnt_actual) -> ip_status_t"""
    return _srmcli.srm_bcst_emu_deq_request(die, master, ch_mask, long_buf, cnt_requested, cnt_actual)

def srm_bcst_emu_enq_request(die, master, ch_mask, long_buf, cnt_requested, cnt_actual):
    """srm_bcst_emu_enq_request(uint32_t die, bool master, uint32_t ch_mask, uint32_t * long_buf, uint16_t cnt_requested, uint16_t * cnt_actual) -> ip_status_t"""
    return _srmcli.srm_bcst_emu_enq_request(die, master, ch_mask, long_buf, cnt_requested, cnt_actual)

def srm_bcst_emu_stat_rd_bypass(die, master, stat_long_buf):
    """srm_bcst_emu_stat_rd_bypass(uint32_t die, bool master, uint32_t * stat_long_buf) -> ip_status_t"""
    return _srmcli.srm_bcst_emu_stat_rd_bypass(die, master, stat_long_buf)

def srm_bcst_emu_stat_wr_bypass(die, master, stat_long_buf):
    """srm_bcst_emu_stat_wr_bypass(uint32_t die, bool master, uint32_t * stat_long_buf) -> ip_status_t"""
    return _srmcli.srm_bcst_emu_stat_wr_bypass(die, master, stat_long_buf)

def srm_bcst_emu_rd_bypass(die, stat_long_buf, fifo_long_buf):
    """srm_bcst_emu_rd_bypass(uint32_t die, uint32_t * stat_long_buf, uint32_t * fifo_long_buf) -> ip_status_t"""
    return _srmcli.srm_bcst_emu_rd_bypass(die, stat_long_buf, fifo_long_buf)

def srm_bcst_emu_wr_bypass(die, stat_long_buf, fifo_long_buf):
    """srm_bcst_emu_wr_bypass(uint32_t die, uint32_t * stat_long_buf, uint32_t * fifo_long_buf) -> ip_status_t"""
    return _srmcli.srm_bcst_emu_wr_bypass(die, stat_long_buf, fifo_long_buf)

def srm_bcst_emu_print(ch, stat_long_buf, fifo_long_buf):
    """srm_bcst_emu_print(uint32_t ch, uint32_t * stat_long_buf, uint32_t * fifo_long_buf)"""
    return _srmcli.srm_bcst_emu_print(ch, stat_long_buf, fifo_long_buf)

def srm_bcst_emu_stat_query_bypass(stat_long_buf, occp, vccy):
    """srm_bcst_emu_stat_query_bypass(uint32_t * stat_long_buf, uint8_t * occp, uint8_t * vccy)"""
    return _srmcli.srm_bcst_emu_stat_query_bypass(stat_long_buf, occp, vccy)

def srm_bcst_emu_enq_bypass(ch_mask, stat_long_buf, fifo_long_buf, long_buf, cnt_requested, cnt_actual):
    """srm_bcst_emu_enq_bypass(uint32_t ch_mask, uint32_t * stat_long_buf, uint32_t * fifo_long_buf, uint32_t * long_buf, uint16_t cnt_requested, uint16_t * cnt_actual)"""
    return _srmcli.srm_bcst_emu_enq_bypass(ch_mask, stat_long_buf, fifo_long_buf, long_buf, cnt_requested, cnt_actual)

def srm_bcst_emu_deq_bypass(ch_mask, stat_long_buf, fifo_long_buf, long_buf, cnt_requested, cnt_actual):
    """srm_bcst_emu_deq_bypass(uint32_t ch_mask, uint32_t * stat_long_buf, uint32_t * fifo_long_buf, uint32_t * long_buf, uint16_t cnt_requested, uint16_t * cnt_actual)"""
    return _srmcli.srm_bcst_emu_deq_bypass(ch_mask, stat_long_buf, fifo_long_buf, long_buf, cnt_requested, cnt_actual)

def srm_lt_custom_preset_tap_set(die, channel, preset, c1, c0, cm1, cm2):
    """srm_lt_custom_preset_tap_set(uint32_t die, uint32_t channel, uint16_t preset, int16_t c1, int16_t c0, int16_t cm1, int16_t cm2) -> ip_status_t"""
    return _srmcli.srm_lt_custom_preset_tap_set(die, channel, preset, c1, c0, cm1, cm2)

def srm_anlt_rules_dump(p_anlt_rules):
    """srm_anlt_rules_dump(srm_anlt_rules_t p_anlt_rules)"""
    return _srmcli.srm_anlt_rules_dump(p_anlt_rules)

def srm_rx_bundle_rules_print(rx_rules):
    """srm_rx_bundle_rules_print(srm_rx_bundle_rules_t rx_rules)"""
    return _srmcli.srm_rx_bundle_rules_print(rx_rules)

def srm_tx_bundle_rules_print(tx_rules):
    """srm_tx_bundle_rules_print(srm_tx_bundle_rules_t tx_rules)"""
    return _srmcli.srm_tx_bundle_rules_print(tx_rules)

def srm_anlt_bundle_dump(bundle, rules):
    """srm_anlt_bundle_dump(srm_anlt_bundle_t bundle, srm_anlt_rules_t rules)"""
    return _srmcli.srm_anlt_bundle_dump(bundle, rules)

def srm_anlt_rules_query_dump(die, channel):
    """srm_anlt_rules_query_dump(uint32_t die, uint32_t channel) -> ip_status_t"""
    return _srmcli.srm_anlt_rules_query_dump(die, channel)

def srm_anlt_status_summary_query_dump(bundle):
    """srm_anlt_status_summary_query_dump(srm_anlt_bundle_t bundle) -> ip_status_t"""
    return _srmcli.srm_anlt_status_summary_query_dump(bundle)

def srm_anlt_query(die, channel, intf, p_bundle, p_anlt_rules):
    """srm_anlt_query(uint32_t die, uint32_t channel, e_srm_intf intf, srm_anlt_bundle_t p_bundle, srm_anlt_rules_t p_anlt_rules) -> ip_status_t"""
    return _srmcli.srm_anlt_query(die, channel, intf, p_bundle, p_anlt_rules)

def srm_channel_anlt_query(die, channel, intf, p_bundle, p_anlt_rules):
    """srm_channel_anlt_query(uint32_t die, uint32_t channel, e_srm_intf intf, srm_anlt_bundle_t p_bundle, srm_anlt_rules_t p_anlt_rules) -> ip_status_t"""
    return _srmcli.srm_channel_anlt_query(die, channel, intf, p_bundle, p_anlt_rules)

def srm_channel_req_cmd(die, channel, intf, cmd):
    """srm_channel_req_cmd(uint32_t die, uint32_t channel, e_srm_intf intf, uint16_t cmd) -> ip_status_t"""
    return _srmcli.srm_channel_req_cmd(die, channel, intf, cmd)
__LINE__ = _srmcli.__LINE__
__FILE__ = _srmcli.__FILE__
IP_OK = _srmcli.IP_OK
IP_ERROR = _srmcli.IP_ERROR
NULL = _srmcli.NULL
SRM_NUM_OF_RX_CHANNELS = _srmcli.SRM_NUM_OF_RX_CHANNELS
SRM_NUM_OF_TX_CHANNELS = _srmcli.SRM_NUM_OF_TX_CHANNELS
SRM_NUM_CHANNELS = _srmcli.SRM_NUM_CHANNELS
SRM_MAX_RX_CHANNELS = _srmcli.SRM_MAX_RX_CHANNELS
SRM_MAX_TX_CHANNELS = _srmcli.SRM_MAX_TX_CHANNELS
SRM_MAX_CHANNELS = _srmcli.SRM_MAX_CHANNELS
SRM_MAX_SRM_PER_ERU = _srmcli.SRM_MAX_SRM_PER_ERU
SRM_MAX_SRM_PER_ERU_BIT_MASK = _srmcli.SRM_MAX_SRM_PER_ERU_BIT_MASK
SRM_CAL_MAX_SRM_PER_ERU = _srmcli.SRM_CAL_MAX_SRM_PER_ERU
SRM_MAX_DIE_PER_BUNDLE = _srmcli.SRM_MAX_DIE_PER_BUNDLE
SRM_MAX_DIE_BIT_MASK = _srmcli.SRM_MAX_DIE_BIT_MASK
SRM_SIGNAL_MODE_PAM = _srmcli.SRM_SIGNAL_MODE_PAM
SRM_SIGNAL_MODE_NRZ = _srmcli.SRM_SIGNAL_MODE_NRZ
SRM_TX_SRC_CORE = _srmcli.SRM_TX_SRC_CORE
SRM_TX_SRC_RX_LOOPBACK = _srmcli.SRM_TX_SRC_RX_LOOPBACK
SRM_TX_SRC_PAT_GEN = _srmcli.SRM_TX_SRC_PAT_GEN
SRM_TX_SRC_PAT_GEN_SERIAL = _srmcli.SRM_TX_SRC_PAT_GEN_SERIAL
SRM_TX_SRC_RX_DEEP_LOOPBACK = _srmcli.SRM_TX_SRC_RX_DEEP_LOOPBACK
SRM_RX_SRC_SERIAL = _srmcli.SRM_RX_SRC_SERIAL
SRM_RX_SRC_TX_LOOPBACK = _srmcli.SRM_RX_SRC_TX_LOOPBACK
SRM_RX_SRC_PAT_GEN = _srmcli.SRM_RX_SRC_PAT_GEN
SRM_DSP_MODE_SLC1 = _srmcli.SRM_DSP_MODE_SLC1
SRM_DSP_MODE_SLC1_RC_SLC2 = _srmcli.SRM_DSP_MODE_SLC1_RC_SLC2
SRM_DSP_MODE_DFE1 = _srmcli.SRM_DSP_MODE_DFE1
SRM_DSP_MODE_DFE1_RC_DFE2 = _srmcli.SRM_DSP_MODE_DFE1_RC_DFE2
SRM_BAUD_RATE_19p90656G = _srmcli.SRM_BAUD_RATE_19p90656G
SRM_BAUD_RATE_20p0G = _srmcli.SRM_BAUD_RATE_20p0G
SRM_BAUD_RATE_20p625G = _srmcli.SRM_BAUD_RATE_20p625G
SRM_BAUD_RATE_21p0562G = _srmcli.SRM_BAUD_RATE_21p0562G
SRM_BAUD_RATE_21p418G = _srmcli.SRM_BAUD_RATE_21p418G
SRM_BAUD_RATE_21p51G = _srmcli.SRM_BAUD_RATE_21p51G
SRM_BAUD_RATE_21p875G = _srmcli.SRM_BAUD_RATE_21p875G
SRM_BAUD_RATE_22p098G = _srmcli.SRM_BAUD_RATE_22p098G
SRM_BAUD_RATE_22p1914G = _srmcli.SRM_BAUD_RATE_22p1914G
SRM_BAUD_RATE_22p362G = _srmcli.SRM_BAUD_RATE_22p362G
SRM_BAUD_RATE_22p5G = _srmcli.SRM_BAUD_RATE_22p5G
SRM_BAUD_RATE_23p125G = _srmcli.SRM_BAUD_RATE_23p125G
SRM_BAUD_RATE_23p75G = _srmcli.SRM_BAUD_RATE_23p75G
SRM_BAUD_RATE_25p0G = _srmcli.SRM_BAUD_RATE_25p0G
SRM_BAUD_RATE_25p234375G = _srmcli.SRM_BAUD_RATE_25p234375G
SRM_BAUD_RATE_25p5G = _srmcli.SRM_BAUD_RATE_25p5G
SRM_BAUD_RATE_25p78125G = _srmcli.SRM_BAUD_RATE_25p78125G
SRM_BAUD_RATE_26p5625G = _srmcli.SRM_BAUD_RATE_26p5625G
SRM_BAUD_RATE_27p34375G = _srmcli.SRM_BAUD_RATE_27p34375G
SRM_BAUD_RATE_27p78125G = _srmcli.SRM_BAUD_RATE_27p78125G
SRM_BAUD_RATE_27p95G = _srmcli.SRM_BAUD_RATE_27p95G
SRM_BAUD_RATE_28p05G = _srmcli.SRM_BAUD_RATE_28p05G
SRM_BAUD_RATE_28p125G = _srmcli.SRM_BAUD_RATE_28p125G
SRM_SUBRATE_BYPASS = _srmcli.SRM_SUBRATE_BYPASS
SRM_SUBRATE_DIV_2 = _srmcli.SRM_SUBRATE_DIV_2
SRM_SUBRATE_DIV_4 = _srmcli.SRM_SUBRATE_DIV_4
SRM_SUBRATE_DIV_5 = _srmcli.SRM_SUBRATE_DIV_5
SRM_SUBRATE_DIV_8 = _srmcli.SRM_SUBRATE_DIV_8
SRM_SUBRATE_DIV_16 = _srmcli.SRM_SUBRATE_DIV_16
SRM_TX_LUT_3TAP = _srmcli.SRM_TX_LUT_3TAP
SRM_TX_LUT_BYPASS = _srmcli.SRM_TX_LUT_BYPASS
SRM_TX_LUT_7TAP_LIN = _srmcli.SRM_TX_LUT_7TAP_LIN
SRM_TX_LUT_7TAP_LUT = _srmcli.SRM_TX_LUT_7TAP_LUT
SRM_VDDR_TX_1p125 = _srmcli.SRM_VDDR_TX_1p125
SRM_VDDR_TX_1p6 = _srmcli.SRM_VDDR_TX_1p6
SRM_VDDR_TX_1p95 = _srmcli.SRM_VDDR_TX_1p95
SRM_AFE_TRIM_ISSE = _srmcli.SRM_AFE_TRIM_ISSE
SRM_AFE_TRIM_0dB = _srmcli.SRM_AFE_TRIM_0dB
SRM_AFE_TRIM_NEG_4dB = _srmcli.SRM_AFE_TRIM_NEG_4dB
SRM_AFE_TRIM_NEG_10dB = _srmcli.SRM_AFE_TRIM_NEG_10dB
SRM_TX_SWING_60p = _srmcli.SRM_TX_SWING_60p
SRM_TX_SWING_70p = _srmcli.SRM_TX_SWING_70p
SRM_TX_SWING_80p = _srmcli.SRM_TX_SWING_80p
SRM_TX_SWING_90p = _srmcli.SRM_TX_SWING_90p
SRM_TX_SWING_100p = _srmcli.SRM_TX_SWING_100p
SRM_TX_SWING_110p = _srmcli.SRM_TX_SWING_110p
SRM_TX_SWING_120p = _srmcli.SRM_TX_SWING_120p
SRM_PWRUP_BYPASS_NONE = _srmcli.SRM_PWRUP_BYPASS_NONE
SRM_PWRUP_BYPASS_ALL = _srmcli.SRM_PWRUP_BYPASS_ALL
SRM_PWRUP_BYPASS_TXRX = _srmcli.SRM_PWRUP_BYPASS_TXRX
SRM_CAL_BYPASS_NONE = _srmcli.SRM_CAL_BYPASS_NONE
SRM_CAL_BYPASS_ALL = _srmcli.SRM_CAL_BYPASS_ALL
SRM_CAL_BYPASS_TXRX = _srmcli.SRM_CAL_BYPASS_TXRX
SRM_PWRUP_USE_MODE_RULE = _srmcli.SRM_PWRUP_USE_MODE_RULE
class srm_pwrup_rules_t(_object):
    """Proxy of C++ srm_pwrup_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_pwrup_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_pwrup_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eru_die"] = _srmcli.srm_pwrup_rules_t_eru_die_set
    __swig_getmethods__["eru_die"] = _srmcli.srm_pwrup_rules_t_eru_die_get
    if _newclass:
        eru_die = _swig_property(_srmcli.srm_pwrup_rules_t_eru_die_get, _srmcli.srm_pwrup_rules_t_eru_die_set)
    __swig_setmethods__["srm_dies"] = _srmcli.srm_pwrup_rules_t_srm_dies_set
    __swig_getmethods__["srm_dies"] = _srmcli.srm_pwrup_rules_t_srm_dies_get
    if _newclass:
        srm_dies = _swig_property(_srmcli.srm_pwrup_rules_t_srm_dies_get, _srmcli.srm_pwrup_rules_t_srm_dies_set)
    __swig_setmethods__["num_srm_in_chain"] = _srmcli.srm_pwrup_rules_t_num_srm_in_chain_set
    __swig_getmethods__["num_srm_in_chain"] = _srmcli.srm_pwrup_rules_t_num_srm_in_chain_get
    if _newclass:
        num_srm_in_chain = _swig_property(_srmcli.srm_pwrup_rules_t_num_srm_in_chain_get, _srmcli.srm_pwrup_rules_t_num_srm_in_chain_set)
    __swig_setmethods__["mode"] = _srmcli.srm_pwrup_rules_t_mode_set
    __swig_getmethods__["mode"] = _srmcli.srm_pwrup_rules_t_mode_get
    if _newclass:
        mode = _swig_property(_srmcli.srm_pwrup_rules_t_mode_get, _srmcli.srm_pwrup_rules_t_mode_set)
    __swig_setmethods__["cal_mode"] = _srmcli.srm_pwrup_rules_t_cal_mode_set
    __swig_getmethods__["cal_mode"] = _srmcli.srm_pwrup_rules_t_cal_mode_get
    if _newclass:
        cal_mode = _swig_property(_srmcli.srm_pwrup_rules_t_cal_mode_get, _srmcli.srm_pwrup_rules_t_cal_mode_set)
    __swig_setmethods__["max_ldo_count"] = _srmcli.srm_pwrup_rules_t_max_ldo_count_set
    __swig_getmethods__["max_ldo_count"] = _srmcli.srm_pwrup_rules_t_max_ldo_count_get
    if _newclass:
        max_ldo_count = _swig_property(_srmcli.srm_pwrup_rules_t_max_ldo_count_get, _srmcli.srm_pwrup_rules_t_max_ldo_count_set)
    __swig_setmethods__["show_debug_info"] = _srmcli.srm_pwrup_rules_t_show_debug_info_set
    __swig_getmethods__["show_debug_info"] = _srmcli.srm_pwrup_rules_t_show_debug_info_get
    if _newclass:
        show_debug_info = _swig_property(_srmcli.srm_pwrup_rules_t_show_debug_info_get, _srmcli.srm_pwrup_rules_t_show_debug_info_set)
    __swig_setmethods__["enable_calibration"] = _srmcli.srm_pwrup_rules_t_enable_calibration_set
    __swig_getmethods__["enable_calibration"] = _srmcli.srm_pwrup_rules_t_enable_calibration_get
    if _newclass:
        enable_calibration = _swig_property(_srmcli.srm_pwrup_rules_t_enable_calibration_get, _srmcli.srm_pwrup_rules_t_enable_calibration_set)
    __swig_setmethods__["enable_rcal"] = _srmcli.srm_pwrup_rules_t_enable_rcal_set
    __swig_getmethods__["enable_rcal"] = _srmcli.srm_pwrup_rules_t_enable_rcal_get
    if _newclass:
        enable_rcal = _swig_property(_srmcli.srm_pwrup_rules_t_enable_rcal_get, _srmcli.srm_pwrup_rules_t_enable_rcal_set)
    __swig_setmethods__["retry_attempts"] = _srmcli.srm_pwrup_rules_t_retry_attempts_set
    __swig_getmethods__["retry_attempts"] = _srmcli.srm_pwrup_rules_t_retry_attempts_get
    if _newclass:
        retry_attempts = _swig_property(_srmcli.srm_pwrup_rules_t_retry_attempts_get, _srmcli.srm_pwrup_rules_t_retry_attempts_set)
    __swig_setmethods__["has_eru"] = _srmcli.srm_pwrup_rules_t_has_eru_set
    __swig_getmethods__["has_eru"] = _srmcli.srm_pwrup_rules_t_has_eru_get
    if _newclass:
        has_eru = _swig_property(_srmcli.srm_pwrup_rules_t_has_eru_get, _srmcli.srm_pwrup_rules_t_has_eru_set)

    def __init__(self):
        """__init__(srm_pwrup_rules_t self) -> srm_pwrup_rules_t"""
        this = _srmcli.new_srm_pwrup_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_pwrup_rules_t
    __del__ = lambda self: None
srm_pwrup_rules_t_swigregister = _srmcli.srm_pwrup_rules_t_swigregister
srm_pwrup_rules_t_swigregister(srm_pwrup_rules_t)

class srm_rcal_bias_status_t(_object):
    """Proxy of C++ srm_rcal_bias_status_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_rcal_bias_status_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_rcal_bias_status_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["done"] = _srmcli.srm_rcal_bias_status_t_done_set
    __swig_getmethods__["done"] = _srmcli.srm_rcal_bias_status_t_done_get
    if _newclass:
        done = _swig_property(_srmcli.srm_rcal_bias_status_t_done_get, _srmcli.srm_rcal_bias_status_t_done_set)
    __swig_setmethods__["code"] = _srmcli.srm_rcal_bias_status_t_code_set
    __swig_getmethods__["code"] = _srmcli.srm_rcal_bias_status_t_code_get
    if _newclass:
        code = _swig_property(_srmcli.srm_rcal_bias_status_t_code_get, _srmcli.srm_rcal_bias_status_t_code_set)
    __swig_setmethods__["success"] = _srmcli.srm_rcal_bias_status_t_success_set
    __swig_getmethods__["success"] = _srmcli.srm_rcal_bias_status_t_success_get
    if _newclass:
        success = _swig_property(_srmcli.srm_rcal_bias_status_t_success_get, _srmcli.srm_rcal_bias_status_t_success_set)

    def __init__(self):
        """__init__(srm_rcal_bias_status_t self) -> srm_rcal_bias_status_t"""
        this = _srmcli.new_srm_rcal_bias_status_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_rcal_bias_status_t
    __del__ = lambda self: None
srm_rcal_bias_status_t_swigregister = _srmcli.srm_rcal_bias_status_t_swigregister
srm_rcal_bias_status_t_swigregister(srm_rcal_bias_status_t)

class srm_rcal_status_t(_object):
    """Proxy of C++ srm_rcal_status_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_rcal_status_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_rcal_status_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["success"] = _srmcli.srm_rcal_status_t_success_set
    __swig_getmethods__["success"] = _srmcli.srm_rcal_status_t_success_get
    if _newclass:
        success = _swig_property(_srmcli.srm_rcal_status_t_success_get, _srmcli.srm_rcal_status_t_success_set)
    __swig_setmethods__["eru_status"] = _srmcli.srm_rcal_status_t_eru_status_set
    __swig_getmethods__["eru_status"] = _srmcli.srm_rcal_status_t_eru_status_get
    if _newclass:
        eru_status = _swig_property(_srmcli.srm_rcal_status_t_eru_status_get, _srmcli.srm_rcal_status_t_eru_status_set)
    __swig_setmethods__["bias_status"] = _srmcli.srm_rcal_status_t_bias_status_set
    __swig_getmethods__["bias_status"] = _srmcli.srm_rcal_status_t_bias_status_get
    if _newclass:
        bias_status = _swig_property(_srmcli.srm_rcal_status_t_bias_status_get, _srmcli.srm_rcal_status_t_bias_status_set)

    def __init__(self):
        """__init__(srm_rcal_status_t self) -> srm_rcal_status_t"""
        this = _srmcli.new_srm_rcal_status_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_rcal_status_t
    __del__ = lambda self: None
srm_rcal_status_t_swigregister = _srmcli.srm_rcal_status_t_swigregister
srm_rcal_status_t_swigregister(srm_rcal_status_t)

class srm_pll_rules_t(_object):
    """Proxy of C++ srm_pll_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_pll_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_pll_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["baud_rate"] = _srmcli.srm_pll_rules_t_baud_rate_set
    __swig_getmethods__["baud_rate"] = _srmcli.srm_pll_rules_t_baud_rate_get
    if _newclass:
        baud_rate = _swig_property(_srmcli.srm_pll_rules_t_baud_rate_get, _srmcli.srm_pll_rules_t_baud_rate_set)
    __swig_setmethods__["tmon_cal_disable"] = _srmcli.srm_pll_rules_t_tmon_cal_disable_set
    __swig_getmethods__["tmon_cal_disable"] = _srmcli.srm_pll_rules_t_tmon_cal_disable_get
    if _newclass:
        tmon_cal_disable = _swig_property(_srmcli.srm_pll_rules_t_tmon_cal_disable_get, _srmcli.srm_pll_rules_t_tmon_cal_disable_set)
    __swig_setmethods__["tmon_cal_force"] = _srmcli.srm_pll_rules_t_tmon_cal_force_set
    __swig_getmethods__["tmon_cal_force"] = _srmcli.srm_pll_rules_t_tmon_cal_force_get
    if _newclass:
        tmon_cal_force = _swig_property(_srmcli.srm_pll_rules_t_tmon_cal_force_get, _srmcli.srm_pll_rules_t_tmon_cal_force_set)
    __swig_setmethods__["pll_settings_disable"] = _srmcli.srm_pll_rules_t_pll_settings_disable_set
    __swig_getmethods__["pll_settings_disable"] = _srmcli.srm_pll_rules_t_pll_settings_disable_get
    if _newclass:
        pll_settings_disable = _swig_property(_srmcli.srm_pll_rules_t_pll_settings_disable_get, _srmcli.srm_pll_rules_t_pll_settings_disable_set)
    __swig_setmethods__["pll_ignore_lol"] = _srmcli.srm_pll_rules_t_pll_ignore_lol_set
    __swig_getmethods__["pll_ignore_lol"] = _srmcli.srm_pll_rules_t_pll_ignore_lol_get
    if _newclass:
        pll_ignore_lol = _swig_property(_srmcli.srm_pll_rules_t_pll_ignore_lol_get, _srmcli.srm_pll_rules_t_pll_ignore_lol_set)

    def __init__(self):
        """__init__(srm_pll_rules_t self) -> srm_pll_rules_t"""
        this = _srmcli.new_srm_pll_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_pll_rules_t
    __del__ = lambda self: None
srm_pll_rules_t_swigregister = _srmcli.srm_pll_rules_t_swigregister
srm_pll_rules_t_swigregister(srm_pll_rules_t)

class srm_rx_qc_rules_t(_object):
    """Proxy of C++ srm_rx_qc_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_rx_qc_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_rx_qc_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dis"] = _srmcli.srm_rx_qc_rules_t_dis_set
    __swig_getmethods__["dis"] = _srmcli.srm_rx_qc_rules_t_dis_get
    if _newclass:
        dis = _swig_property(_srmcli.srm_rx_qc_rules_t_dis_get, _srmcli.srm_rx_qc_rules_t_dis_set)
    __swig_setmethods__["hist_dis"] = _srmcli.srm_rx_qc_rules_t_hist_dis_set
    __swig_getmethods__["hist_dis"] = _srmcli.srm_rx_qc_rules_t_hist_dis_get
    if _newclass:
        hist_dis = _swig_property(_srmcli.srm_rx_qc_rules_t_hist_dis_get, _srmcli.srm_rx_qc_rules_t_hist_dis_set)
    __swig_setmethods__["mse_min_threshold"] = _srmcli.srm_rx_qc_rules_t_mse_min_threshold_set
    __swig_getmethods__["mse_min_threshold"] = _srmcli.srm_rx_qc_rules_t_mse_min_threshold_get
    if _newclass:
        mse_min_threshold = _swig_property(_srmcli.srm_rx_qc_rules_t_mse_min_threshold_get, _srmcli.srm_rx_qc_rules_t_mse_min_threshold_set)
    __swig_setmethods__["retry_pass_max"] = _srmcli.srm_rx_qc_rules_t_retry_pass_max_set
    __swig_getmethods__["retry_pass_max"] = _srmcli.srm_rx_qc_rules_t_retry_pass_max_get
    if _newclass:
        retry_pass_max = _swig_property(_srmcli.srm_rx_qc_rules_t_retry_pass_max_get, _srmcli.srm_rx_qc_rules_t_retry_pass_max_set)
    __swig_setmethods__["data_mode_dis"] = _srmcli.srm_rx_qc_rules_t_data_mode_dis_set
    __swig_getmethods__["data_mode_dis"] = _srmcli.srm_rx_qc_rules_t_data_mode_dis_get
    if _newclass:
        data_mode_dis = _swig_property(_srmcli.srm_rx_qc_rules_t_data_mode_dis_get, _srmcli.srm_rx_qc_rules_t_data_mode_dis_set)
    __swig_setmethods__["data_mode_hist_dis"] = _srmcli.srm_rx_qc_rules_t_data_mode_hist_dis_set
    __swig_getmethods__["data_mode_hist_dis"] = _srmcli.srm_rx_qc_rules_t_data_mode_hist_dis_get
    if _newclass:
        data_mode_hist_dis = _swig_property(_srmcli.srm_rx_qc_rules_t_data_mode_hist_dis_get, _srmcli.srm_rx_qc_rules_t_data_mode_hist_dis_set)
    __swig_setmethods__["data_mode_mse_min_threshold"] = _srmcli.srm_rx_qc_rules_t_data_mode_mse_min_threshold_set
    __swig_getmethods__["data_mode_mse_min_threshold"] = _srmcli.srm_rx_qc_rules_t_data_mode_mse_min_threshold_get
    if _newclass:
        data_mode_mse_min_threshold = _swig_property(_srmcli.srm_rx_qc_rules_t_data_mode_mse_min_threshold_get, _srmcli.srm_rx_qc_rules_t_data_mode_mse_min_threshold_set)
    __swig_setmethods__["data_mode_retry_fail_max"] = _srmcli.srm_rx_qc_rules_t_data_mode_retry_fail_max_set
    __swig_getmethods__["data_mode_retry_fail_max"] = _srmcli.srm_rx_qc_rules_t_data_mode_retry_fail_max_get
    if _newclass:
        data_mode_retry_fail_max = _swig_property(_srmcli.srm_rx_qc_rules_t_data_mode_retry_fail_max_get, _srmcli.srm_rx_qc_rules_t_data_mode_retry_fail_max_set)

    def __init__(self):
        """__init__(srm_rx_qc_rules_t self) -> srm_rx_qc_rules_t"""
        this = _srmcli.new_srm_rx_qc_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_rx_qc_rules_t
    __del__ = lambda self: None
srm_rx_qc_rules_t_swigregister = _srmcli.srm_rx_qc_rules_t_swigregister
srm_rx_qc_rules_t_swigregister(srm_rx_qc_rules_t)

SRM_RXA_PWRUP_ON_DEMAND = _srmcli.SRM_RXA_PWRUP_ON_DEMAND
SRM_RXA_PWRUP_RIPPLE = _srmcli.SRM_RXA_PWRUP_RIPPLE
SRM_RXA_PWRUP_ALWAYS_ON = _srmcli.SRM_RXA_PWRUP_ALWAYS_ON
SRM_RXA_PWRUP_DUAL = _srmcli.SRM_RXA_PWRUP_DUAL
class srm_rx_rules_t(_object):
    """Proxy of C++ srm_rx_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_rx_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_rx_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _srmcli.srm_rx_rules_t_enable_set
    __swig_getmethods__["enable"] = _srmcli.srm_rx_rules_t_enable_get
    if _newclass:
        enable = _swig_property(_srmcli.srm_rx_rules_t_enable_get, _srmcli.srm_rx_rules_t_enable_set)
    __swig_setmethods__["src"] = _srmcli.srm_rx_rules_t_src_set
    __swig_getmethods__["src"] = _srmcli.srm_rx_rules_t_src_get
    if _newclass:
        src = _swig_property(_srmcli.srm_rx_rules_t_src_get, _srmcli.srm_rx_rules_t_src_set)
    __swig_setmethods__["subrate_ratio"] = _srmcli.srm_rx_rules_t_subrate_ratio_set
    __swig_getmethods__["subrate_ratio"] = _srmcli.srm_rx_rules_t_subrate_ratio_get
    if _newclass:
        subrate_ratio = _swig_property(_srmcli.srm_rx_rules_t_subrate_ratio_get, _srmcli.srm_rx_rules_t_subrate_ratio_set)
    __swig_setmethods__["signalling"] = _srmcli.srm_rx_rules_t_signalling_set
    __swig_getmethods__["signalling"] = _srmcli.srm_rx_rules_t_signalling_get
    if _newclass:
        signalling = _swig_property(_srmcli.srm_rx_rules_t_signalling_get, _srmcli.srm_rx_rules_t_signalling_set)
    __swig_setmethods__["dsp_mode"] = _srmcli.srm_rx_rules_t_dsp_mode_set
    __swig_getmethods__["dsp_mode"] = _srmcli.srm_rx_rules_t_dsp_mode_get
    if _newclass:
        dsp_mode = _swig_property(_srmcli.srm_rx_rules_t_dsp_mode_get, _srmcli.srm_rx_rules_t_dsp_mode_set)
    __swig_setmethods__["gray_mapping"] = _srmcli.srm_rx_rules_t_gray_mapping_set
    __swig_getmethods__["gray_mapping"] = _srmcli.srm_rx_rules_t_gray_mapping_get
    if _newclass:
        gray_mapping = _swig_property(_srmcli.srm_rx_rules_t_gray_mapping_get, _srmcli.srm_rx_rules_t_gray_mapping_set)
    __swig_setmethods__["ieee_demap"] = _srmcli.srm_rx_rules_t_ieee_demap_set
    __swig_getmethods__["ieee_demap"] = _srmcli.srm_rx_rules_t_ieee_demap_get
    if _newclass:
        ieee_demap = _swig_property(_srmcli.srm_rx_rules_t_ieee_demap_get, _srmcli.srm_rx_rules_t_ieee_demap_set)
    __swig_setmethods__["dfe_precoder_en"] = _srmcli.srm_rx_rules_t_dfe_precoder_en_set
    __swig_getmethods__["dfe_precoder_en"] = _srmcli.srm_rx_rules_t_dfe_precoder_en_get
    if _newclass:
        dfe_precoder_en = _swig_property(_srmcli.srm_rx_rules_t_dfe_precoder_en_get, _srmcli.srm_rx_rules_t_dfe_precoder_en_set)
    __swig_setmethods__["ctle_code"] = _srmcli.srm_rx_rules_t_ctle_code_set
    __swig_getmethods__["ctle_code"] = _srmcli.srm_rx_rules_t_ctle_code_get
    if _newclass:
        ctle_code = _swig_property(_srmcli.srm_rx_rules_t_ctle_code_get, _srmcli.srm_rx_rules_t_ctle_code_set)
    __swig_setmethods__["invert_chan"] = _srmcli.srm_rx_rules_t_invert_chan_set
    __swig_getmethods__["invert_chan"] = _srmcli.srm_rx_rules_t_invert_chan_get
    if _newclass:
        invert_chan = _swig_property(_srmcli.srm_rx_rules_t_invert_chan_get, _srmcli.srm_rx_rules_t_invert_chan_set)
    __swig_setmethods__["afe_trim"] = _srmcli.srm_rx_rules_t_afe_trim_set
    __swig_getmethods__["afe_trim"] = _srmcli.srm_rx_rules_t_afe_trim_get
    if _newclass:
        afe_trim = _swig_property(_srmcli.srm_rx_rules_t_afe_trim_get, _srmcli.srm_rx_rules_t_afe_trim_set)
    __swig_setmethods__["vga_tracking"] = _srmcli.srm_rx_rules_t_vga_tracking_set
    __swig_getmethods__["vga_tracking"] = _srmcli.srm_rx_rules_t_vga_tracking_get
    if _newclass:
        vga_tracking = _swig_property(_srmcli.srm_rx_rules_t_vga_tracking_get, _srmcli.srm_rx_rules_t_vga_tracking_set)
    __swig_setmethods__["ipp_en"] = _srmcli.srm_rx_rules_t_ipp_en_set
    __swig_getmethods__["ipp_en"] = _srmcli.srm_rx_rules_t_ipp_en_get
    if _newclass:
        ipp_en = _swig_property(_srmcli.srm_rx_rules_t_ipp_en_get, _srmcli.srm_rx_rules_t_ipp_en_set)
    __swig_setmethods__["ac_coupling_bypass"] = _srmcli.srm_rx_rules_t_ac_coupling_bypass_set
    __swig_getmethods__["ac_coupling_bypass"] = _srmcli.srm_rx_rules_t_ac_coupling_bypass_get
    if _newclass:
        ac_coupling_bypass = _swig_property(_srmcli.srm_rx_rules_t_ac_coupling_bypass_get, _srmcli.srm_rx_rules_t_ac_coupling_bypass_set)
    __swig_setmethods__["rx_qc"] = _srmcli.srm_rx_rules_t_rx_qc_set
    __swig_getmethods__["rx_qc"] = _srmcli.srm_rx_rules_t_rx_qc_get
    if _newclass:
        rx_qc = _swig_property(_srmcli.srm_rx_rules_t_rx_qc_get, _srmcli.srm_rx_rules_t_rx_qc_set)
    __swig_setmethods__["bypass_reftrim_fw"] = _srmcli.srm_rx_rules_t_bypass_reftrim_fw_set
    __swig_getmethods__["bypass_reftrim_fw"] = _srmcli.srm_rx_rules_t_bypass_reftrim_fw_get
    if _newclass:
        bypass_reftrim_fw = _swig_property(_srmcli.srm_rx_rules_t_bypass_reftrim_fw_get, _srmcli.srm_rx_rules_t_bypass_reftrim_fw_set)
    __swig_setmethods__["bypass_reftrim_finetune"] = _srmcli.srm_rx_rules_t_bypass_reftrim_finetune_set
    __swig_getmethods__["bypass_reftrim_finetune"] = _srmcli.srm_rx_rules_t_bypass_reftrim_finetune_get
    if _newclass:
        bypass_reftrim_finetune = _swig_property(_srmcli.srm_rx_rules_t_bypass_reftrim_finetune_get, _srmcli.srm_rx_rules_t_bypass_reftrim_finetune_set)
    __swig_setmethods__["preamp_bias_ctrl"] = _srmcli.srm_rx_rules_t_preamp_bias_ctrl_set
    __swig_getmethods__["preamp_bias_ctrl"] = _srmcli.srm_rx_rules_t_preamp_bias_ctrl_get
    if _newclass:
        preamp_bias_ctrl = _swig_property(_srmcli.srm_rx_rules_t_preamp_bias_ctrl_get, _srmcli.srm_rx_rules_t_preamp_bias_ctrl_set)
    __swig_setmethods__["prbs_chk_en"] = _srmcli.srm_rx_rules_t_prbs_chk_en_set
    __swig_getmethods__["prbs_chk_en"] = _srmcli.srm_rx_rules_t_prbs_chk_en_get
    if _newclass:
        prbs_chk_en = _swig_property(_srmcli.srm_rx_rules_t_prbs_chk_en_get, _srmcli.srm_rx_rules_t_prbs_chk_en_set)
    __swig_setmethods__["pga_att_en"] = _srmcli.srm_rx_rules_t_pga_att_en_set
    __swig_getmethods__["pga_att_en"] = _srmcli.srm_rx_rules_t_pga_att_en_get
    if _newclass:
        pga_att_en = _swig_property(_srmcli.srm_rx_rules_t_pga_att_en_get, _srmcli.srm_rx_rules_t_pga_att_en_set)
    __swig_setmethods__["rxa_sequence"] = _srmcli.srm_rx_rules_t_rxa_sequence_set
    __swig_getmethods__["rxa_sequence"] = _srmcli.srm_rx_rules_t_rxa_sequence_get
    if _newclass:
        rxa_sequence = _swig_property(_srmcli.srm_rx_rules_t_rxa_sequence_get, _srmcli.srm_rx_rules_t_rxa_sequence_set)

    def __init__(self):
        """__init__(srm_rx_rules_t self) -> srm_rx_rules_t"""
        this = _srmcli.new_srm_rx_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_rx_rules_t
    __del__ = lambda self: None
srm_rx_rules_t_swigregister = _srmcli.srm_rx_rules_t_swigregister
srm_rx_rules_t_swigregister(srm_rx_rules_t)

class srm_tx_fir_t(_object):
    """Proxy of C++ srm_tx_fir_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_tx_fir_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_tx_fir_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lut_mode"] = _srmcli.srm_tx_fir_t_lut_mode_set
    __swig_getmethods__["lut_mode"] = _srmcli.srm_tx_fir_t_lut_mode_get
    if _newclass:
        lut_mode = _swig_property(_srmcli.srm_tx_fir_t_lut_mode_get, _srmcli.srm_tx_fir_t_lut_mode_set)
    __swig_setmethods__["swing"] = _srmcli.srm_tx_fir_t_swing_set
    __swig_getmethods__["swing"] = _srmcli.srm_tx_fir_t_swing_get
    if _newclass:
        swing = _swig_property(_srmcli.srm_tx_fir_t_swing_get, _srmcli.srm_tx_fir_t_swing_set)
    __swig_setmethods__["fir_tap"] = _srmcli.srm_tx_fir_t_fir_tap_set
    __swig_getmethods__["fir_tap"] = _srmcli.srm_tx_fir_t_fir_tap_get
    if _newclass:
        fir_tap = _swig_property(_srmcli.srm_tx_fir_t_fir_tap_get, _srmcli.srm_tx_fir_t_fir_tap_set)
    __swig_setmethods__["inner_eye1"] = _srmcli.srm_tx_fir_t_inner_eye1_set
    __swig_getmethods__["inner_eye1"] = _srmcli.srm_tx_fir_t_inner_eye1_get
    if _newclass:
        inner_eye1 = _swig_property(_srmcli.srm_tx_fir_t_inner_eye1_get, _srmcli.srm_tx_fir_t_inner_eye1_set)
    __swig_setmethods__["inner_eye2"] = _srmcli.srm_tx_fir_t_inner_eye2_set
    __swig_getmethods__["inner_eye2"] = _srmcli.srm_tx_fir_t_inner_eye2_get
    if _newclass:
        inner_eye2 = _swig_property(_srmcli.srm_tx_fir_t_inner_eye2_get, _srmcli.srm_tx_fir_t_inner_eye2_set)

    def set_fir_tap(self, val):
        """set_fir_tap(srm_tx_fir_t self, vector_int16 val) -> ip_status_t"""
        return _srmcli.srm_tx_fir_t_set_fir_tap(self, val)


    def __init__(self):
        """__init__(srm_tx_fir_t self) -> srm_tx_fir_t"""
        this = _srmcli.new_srm_tx_fir_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_tx_fir_t
    __del__ = lambda self: None
srm_tx_fir_t_swigregister = _srmcli.srm_tx_fir_t_swigregister
srm_tx_fir_t_swigregister(srm_tx_fir_t)

class srm_tx_rules_t(_object):
    """Proxy of C++ srm_tx_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_tx_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_tx_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _srmcli.srm_tx_rules_t_enable_set
    __swig_getmethods__["enable"] = _srmcli.srm_tx_rules_t_enable_get
    if _newclass:
        enable = _swig_property(_srmcli.srm_tx_rules_t_enable_get, _srmcli.srm_tx_rules_t_enable_set)
    __swig_setmethods__["squelch_lock"] = _srmcli.srm_tx_rules_t_squelch_lock_set
    __swig_getmethods__["squelch_lock"] = _srmcli.srm_tx_rules_t_squelch_lock_get
    if _newclass:
        squelch_lock = _swig_property(_srmcli.srm_tx_rules_t_squelch_lock_get, _srmcli.srm_tx_rules_t_squelch_lock_set)
    __swig_setmethods__["src"] = _srmcli.srm_tx_rules_t_src_set
    __swig_getmethods__["src"] = _srmcli.srm_tx_rules_t_src_get
    if _newclass:
        src = _swig_property(_srmcli.srm_tx_rules_t_src_get, _srmcli.srm_tx_rules_t_src_set)
    __swig_setmethods__["subrate_ratio"] = _srmcli.srm_tx_rules_t_subrate_ratio_set
    __swig_getmethods__["subrate_ratio"] = _srmcli.srm_tx_rules_t_subrate_ratio_get
    if _newclass:
        subrate_ratio = _swig_property(_srmcli.srm_tx_rules_t_subrate_ratio_get, _srmcli.srm_tx_rules_t_subrate_ratio_set)
    __swig_setmethods__["signalling"] = _srmcli.srm_tx_rules_t_signalling_set
    __swig_getmethods__["signalling"] = _srmcli.srm_tx_rules_t_signalling_get
    if _newclass:
        signalling = _swig_property(_srmcli.srm_tx_rules_t_signalling_get, _srmcli.srm_tx_rules_t_signalling_set)
    __swig_setmethods__["lut_mode"] = _srmcli.srm_tx_rules_t_lut_mode_set
    __swig_getmethods__["lut_mode"] = _srmcli.srm_tx_rules_t_lut_mode_get
    if _newclass:
        lut_mode = _swig_property(_srmcli.srm_tx_rules_t_lut_mode_get, _srmcli.srm_tx_rules_t_lut_mode_set)
    __swig_setmethods__["gray_mapping"] = _srmcli.srm_tx_rules_t_gray_mapping_set
    __swig_getmethods__["gray_mapping"] = _srmcli.srm_tx_rules_t_gray_mapping_get
    if _newclass:
        gray_mapping = _swig_property(_srmcli.srm_tx_rules_t_gray_mapping_get, _srmcli.srm_tx_rules_t_gray_mapping_set)
    __swig_setmethods__["ieee_demap"] = _srmcli.srm_tx_rules_t_ieee_demap_set
    __swig_getmethods__["ieee_demap"] = _srmcli.srm_tx_rules_t_ieee_demap_get
    if _newclass:
        ieee_demap = _swig_property(_srmcli.srm_tx_rules_t_ieee_demap_get, _srmcli.srm_tx_rules_t_ieee_demap_set)
    __swig_setmethods__["precoder_en"] = _srmcli.srm_tx_rules_t_precoder_en_set
    __swig_getmethods__["precoder_en"] = _srmcli.srm_tx_rules_t_precoder_en_get
    if _newclass:
        precoder_en = _swig_property(_srmcli.srm_tx_rules_t_precoder_en_get, _srmcli.srm_tx_rules_t_precoder_en_set)
    __swig_setmethods__["invert_chan"] = _srmcli.srm_tx_rules_t_invert_chan_set
    __swig_getmethods__["invert_chan"] = _srmcli.srm_tx_rules_t_invert_chan_get
    if _newclass:
        invert_chan = _swig_property(_srmcli.srm_tx_rules_t_invert_chan_get, _srmcli.srm_tx_rules_t_invert_chan_set)
    __swig_setmethods__["swing"] = _srmcli.srm_tx_rules_t_swing_set
    __swig_getmethods__["swing"] = _srmcli.srm_tx_rules_t_swing_get
    if _newclass:
        swing = _swig_property(_srmcli.srm_tx_rules_t_swing_get, _srmcli.srm_tx_rules_t_swing_set)
    __swig_setmethods__["fir_tap"] = _srmcli.srm_tx_rules_t_fir_tap_set
    __swig_getmethods__["fir_tap"] = _srmcli.srm_tx_rules_t_fir_tap_get
    if _newclass:
        fir_tap = _swig_property(_srmcli.srm_tx_rules_t_fir_tap_get, _srmcli.srm_tx_rules_t_fir_tap_set)
    __swig_setmethods__["inner_eye1"] = _srmcli.srm_tx_rules_t_inner_eye1_set
    __swig_getmethods__["inner_eye1"] = _srmcli.srm_tx_rules_t_inner_eye1_get
    if _newclass:
        inner_eye1 = _swig_property(_srmcli.srm_tx_rules_t_inner_eye1_get, _srmcli.srm_tx_rules_t_inner_eye1_set)
    __swig_setmethods__["inner_eye2"] = _srmcli.srm_tx_rules_t_inner_eye2_set
    __swig_getmethods__["inner_eye2"] = _srmcli.srm_tx_rules_t_inner_eye2_get
    if _newclass:
        inner_eye2 = _swig_property(_srmcli.srm_tx_rules_t_inner_eye2_get, _srmcli.srm_tx_rules_t_inner_eye2_set)

    def __init__(self):
        """__init__(srm_tx_rules_t self) -> srm_tx_rules_t"""
        this = _srmcli.new_srm_tx_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_tx_rules_t
    __del__ = lambda self: None
srm_tx_rules_t_swigregister = _srmcli.srm_tx_rules_t_swigregister
srm_tx_rules_t_swigregister(srm_tx_rules_t)

class srm_rx_bundle_rules_t(_object):
    """Proxy of C++ srm_rx_bundle_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_rx_bundle_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_rx_bundle_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _srmcli.srm_rx_bundle_rules_t_enable_set
    __swig_getmethods__["enable"] = _srmcli.srm_rx_bundle_rules_t_enable_get
    if _newclass:
        enable = _swig_property(_srmcli.srm_rx_bundle_rules_t_enable_get, _srmcli.srm_rx_bundle_rules_t_enable_set)
    __swig_setmethods__["src"] = _srmcli.srm_rx_bundle_rules_t_src_set
    __swig_getmethods__["src"] = _srmcli.srm_rx_bundle_rules_t_src_get
    if _newclass:
        src = _swig_property(_srmcli.srm_rx_bundle_rules_t_src_get, _srmcli.srm_rx_bundle_rules_t_src_set)
    __swig_setmethods__["subrate_ratio"] = _srmcli.srm_rx_bundle_rules_t_subrate_ratio_set
    __swig_getmethods__["subrate_ratio"] = _srmcli.srm_rx_bundle_rules_t_subrate_ratio_get
    if _newclass:
        subrate_ratio = _swig_property(_srmcli.srm_rx_bundle_rules_t_subrate_ratio_get, _srmcli.srm_rx_bundle_rules_t_subrate_ratio_set)
    __swig_setmethods__["signalling"] = _srmcli.srm_rx_bundle_rules_t_signalling_set
    __swig_getmethods__["signalling"] = _srmcli.srm_rx_bundle_rules_t_signalling_get
    if _newclass:
        signalling = _swig_property(_srmcli.srm_rx_bundle_rules_t_signalling_get, _srmcli.srm_rx_bundle_rules_t_signalling_set)
    __swig_setmethods__["dsp_mode"] = _srmcli.srm_rx_bundle_rules_t_dsp_mode_set
    __swig_getmethods__["dsp_mode"] = _srmcli.srm_rx_bundle_rules_t_dsp_mode_get
    if _newclass:
        dsp_mode = _swig_property(_srmcli.srm_rx_bundle_rules_t_dsp_mode_get, _srmcli.srm_rx_bundle_rules_t_dsp_mode_set)
    __swig_setmethods__["gray_mapping"] = _srmcli.srm_rx_bundle_rules_t_gray_mapping_set
    __swig_getmethods__["gray_mapping"] = _srmcli.srm_rx_bundle_rules_t_gray_mapping_get
    if _newclass:
        gray_mapping = _swig_property(_srmcli.srm_rx_bundle_rules_t_gray_mapping_get, _srmcli.srm_rx_bundle_rules_t_gray_mapping_set)
    __swig_setmethods__["ieee_demap"] = _srmcli.srm_rx_bundle_rules_t_ieee_demap_set
    __swig_getmethods__["ieee_demap"] = _srmcli.srm_rx_bundle_rules_t_ieee_demap_get
    if _newclass:
        ieee_demap = _swig_property(_srmcli.srm_rx_bundle_rules_t_ieee_demap_get, _srmcli.srm_rx_bundle_rules_t_ieee_demap_set)
    __swig_setmethods__["dfe_precoder_en"] = _srmcli.srm_rx_bundle_rules_t_dfe_precoder_en_set
    __swig_getmethods__["dfe_precoder_en"] = _srmcli.srm_rx_bundle_rules_t_dfe_precoder_en_get
    if _newclass:
        dfe_precoder_en = _swig_property(_srmcli.srm_rx_bundle_rules_t_dfe_precoder_en_get, _srmcli.srm_rx_bundle_rules_t_dfe_precoder_en_set)
    __swig_setmethods__["ctle_code"] = _srmcli.srm_rx_bundle_rules_t_ctle_code_set
    __swig_getmethods__["ctle_code"] = _srmcli.srm_rx_bundle_rules_t_ctle_code_get
    if _newclass:
        ctle_code = _swig_property(_srmcli.srm_rx_bundle_rules_t_ctle_code_get, _srmcli.srm_rx_bundle_rules_t_ctle_code_set)
    __swig_setmethods__["invert_chan"] = _srmcli.srm_rx_bundle_rules_t_invert_chan_set
    __swig_getmethods__["invert_chan"] = _srmcli.srm_rx_bundle_rules_t_invert_chan_get
    if _newclass:
        invert_chan = _swig_property(_srmcli.srm_rx_bundle_rules_t_invert_chan_get, _srmcli.srm_rx_bundle_rules_t_invert_chan_set)
    __swig_setmethods__["afe_trim"] = _srmcli.srm_rx_bundle_rules_t_afe_trim_set
    __swig_getmethods__["afe_trim"] = _srmcli.srm_rx_bundle_rules_t_afe_trim_get
    if _newclass:
        afe_trim = _swig_property(_srmcli.srm_rx_bundle_rules_t_afe_trim_get, _srmcli.srm_rx_bundle_rules_t_afe_trim_set)
    __swig_setmethods__["vga_tracking"] = _srmcli.srm_rx_bundle_rules_t_vga_tracking_set
    __swig_getmethods__["vga_tracking"] = _srmcli.srm_rx_bundle_rules_t_vga_tracking_get
    if _newclass:
        vga_tracking = _swig_property(_srmcli.srm_rx_bundle_rules_t_vga_tracking_get, _srmcli.srm_rx_bundle_rules_t_vga_tracking_set)
    __swig_setmethods__["ipp_en"] = _srmcli.srm_rx_bundle_rules_t_ipp_en_set
    __swig_getmethods__["ipp_en"] = _srmcli.srm_rx_bundle_rules_t_ipp_en_get
    if _newclass:
        ipp_en = _swig_property(_srmcli.srm_rx_bundle_rules_t_ipp_en_get, _srmcli.srm_rx_bundle_rules_t_ipp_en_set)
    __swig_setmethods__["ac_coupling_bypass"] = _srmcli.srm_rx_bundle_rules_t_ac_coupling_bypass_set
    __swig_getmethods__["ac_coupling_bypass"] = _srmcli.srm_rx_bundle_rules_t_ac_coupling_bypass_get
    if _newclass:
        ac_coupling_bypass = _swig_property(_srmcli.srm_rx_bundle_rules_t_ac_coupling_bypass_get, _srmcli.srm_rx_bundle_rules_t_ac_coupling_bypass_set)
    __swig_setmethods__["rx_qc"] = _srmcli.srm_rx_bundle_rules_t_rx_qc_set
    __swig_getmethods__["rx_qc"] = _srmcli.srm_rx_bundle_rules_t_rx_qc_get
    if _newclass:
        rx_qc = _swig_property(_srmcli.srm_rx_bundle_rules_t_rx_qc_get, _srmcli.srm_rx_bundle_rules_t_rx_qc_set)
    __swig_setmethods__["bypass_reftrim_fw"] = _srmcli.srm_rx_bundle_rules_t_bypass_reftrim_fw_set
    __swig_getmethods__["bypass_reftrim_fw"] = _srmcli.srm_rx_bundle_rules_t_bypass_reftrim_fw_get
    if _newclass:
        bypass_reftrim_fw = _swig_property(_srmcli.srm_rx_bundle_rules_t_bypass_reftrim_fw_get, _srmcli.srm_rx_bundle_rules_t_bypass_reftrim_fw_set)
    __swig_setmethods__["bypass_reftrim_finetune"] = _srmcli.srm_rx_bundle_rules_t_bypass_reftrim_finetune_set
    __swig_getmethods__["bypass_reftrim_finetune"] = _srmcli.srm_rx_bundle_rules_t_bypass_reftrim_finetune_get
    if _newclass:
        bypass_reftrim_finetune = _swig_property(_srmcli.srm_rx_bundle_rules_t_bypass_reftrim_finetune_get, _srmcli.srm_rx_bundle_rules_t_bypass_reftrim_finetune_set)
    __swig_setmethods__["preamp_bias_ctrl"] = _srmcli.srm_rx_bundle_rules_t_preamp_bias_ctrl_set
    __swig_getmethods__["preamp_bias_ctrl"] = _srmcli.srm_rx_bundle_rules_t_preamp_bias_ctrl_get
    if _newclass:
        preamp_bias_ctrl = _swig_property(_srmcli.srm_rx_bundle_rules_t_preamp_bias_ctrl_get, _srmcli.srm_rx_bundle_rules_t_preamp_bias_ctrl_set)
    __swig_setmethods__["prbs_chk_en"] = _srmcli.srm_rx_bundle_rules_t_prbs_chk_en_set
    __swig_getmethods__["prbs_chk_en"] = _srmcli.srm_rx_bundle_rules_t_prbs_chk_en_get
    if _newclass:
        prbs_chk_en = _swig_property(_srmcli.srm_rx_bundle_rules_t_prbs_chk_en_get, _srmcli.srm_rx_bundle_rules_t_prbs_chk_en_set)
    __swig_setmethods__["pga_att_en"] = _srmcli.srm_rx_bundle_rules_t_pga_att_en_set
    __swig_getmethods__["pga_att_en"] = _srmcli.srm_rx_bundle_rules_t_pga_att_en_get
    if _newclass:
        pga_att_en = _swig_property(_srmcli.srm_rx_bundle_rules_t_pga_att_en_get, _srmcli.srm_rx_bundle_rules_t_pga_att_en_set)
    __swig_setmethods__["rxa_sequence"] = _srmcli.srm_rx_bundle_rules_t_rxa_sequence_set
    __swig_getmethods__["rxa_sequence"] = _srmcli.srm_rx_bundle_rules_t_rxa_sequence_get
    if _newclass:
        rxa_sequence = _swig_property(_srmcli.srm_rx_bundle_rules_t_rxa_sequence_get, _srmcli.srm_rx_bundle_rules_t_rxa_sequence_set)

    def __init__(self):
        """__init__(srm_rx_bundle_rules_t self) -> srm_rx_bundle_rules_t"""
        this = _srmcli.new_srm_rx_bundle_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_rx_bundle_rules_t
    __del__ = lambda self: None
srm_rx_bundle_rules_t_swigregister = _srmcli.srm_rx_bundle_rules_t_swigregister
srm_rx_bundle_rules_t_swigregister(srm_rx_bundle_rules_t)

class srm_tx_bundle_rules_t(_object):
    """Proxy of C++ srm_tx_bundle_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_tx_bundle_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_tx_bundle_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _srmcli.srm_tx_bundle_rules_t_enable_set
    __swig_getmethods__["enable"] = _srmcli.srm_tx_bundle_rules_t_enable_get
    if _newclass:
        enable = _swig_property(_srmcli.srm_tx_bundle_rules_t_enable_get, _srmcli.srm_tx_bundle_rules_t_enable_set)
    __swig_setmethods__["squelch_lock"] = _srmcli.srm_tx_bundle_rules_t_squelch_lock_set
    __swig_getmethods__["squelch_lock"] = _srmcli.srm_tx_bundle_rules_t_squelch_lock_get
    if _newclass:
        squelch_lock = _swig_property(_srmcli.srm_tx_bundle_rules_t_squelch_lock_get, _srmcli.srm_tx_bundle_rules_t_squelch_lock_set)
    __swig_setmethods__["src"] = _srmcli.srm_tx_bundle_rules_t_src_set
    __swig_getmethods__["src"] = _srmcli.srm_tx_bundle_rules_t_src_get
    if _newclass:
        src = _swig_property(_srmcli.srm_tx_bundle_rules_t_src_get, _srmcli.srm_tx_bundle_rules_t_src_set)
    __swig_setmethods__["subrate_ratio"] = _srmcli.srm_tx_bundle_rules_t_subrate_ratio_set
    __swig_getmethods__["subrate_ratio"] = _srmcli.srm_tx_bundle_rules_t_subrate_ratio_get
    if _newclass:
        subrate_ratio = _swig_property(_srmcli.srm_tx_bundle_rules_t_subrate_ratio_get, _srmcli.srm_tx_bundle_rules_t_subrate_ratio_set)
    __swig_setmethods__["signalling"] = _srmcli.srm_tx_bundle_rules_t_signalling_set
    __swig_getmethods__["signalling"] = _srmcli.srm_tx_bundle_rules_t_signalling_get
    if _newclass:
        signalling = _swig_property(_srmcli.srm_tx_bundle_rules_t_signalling_get, _srmcli.srm_tx_bundle_rules_t_signalling_set)
    __swig_setmethods__["lut_mode"] = _srmcli.srm_tx_bundle_rules_t_lut_mode_set
    __swig_getmethods__["lut_mode"] = _srmcli.srm_tx_bundle_rules_t_lut_mode_get
    if _newclass:
        lut_mode = _swig_property(_srmcli.srm_tx_bundle_rules_t_lut_mode_get, _srmcli.srm_tx_bundle_rules_t_lut_mode_set)
    __swig_setmethods__["gray_mapping"] = _srmcli.srm_tx_bundle_rules_t_gray_mapping_set
    __swig_getmethods__["gray_mapping"] = _srmcli.srm_tx_bundle_rules_t_gray_mapping_get
    if _newclass:
        gray_mapping = _swig_property(_srmcli.srm_tx_bundle_rules_t_gray_mapping_get, _srmcli.srm_tx_bundle_rules_t_gray_mapping_set)
    __swig_setmethods__["ieee_demap"] = _srmcli.srm_tx_bundle_rules_t_ieee_demap_set
    __swig_getmethods__["ieee_demap"] = _srmcli.srm_tx_bundle_rules_t_ieee_demap_get
    if _newclass:
        ieee_demap = _swig_property(_srmcli.srm_tx_bundle_rules_t_ieee_demap_get, _srmcli.srm_tx_bundle_rules_t_ieee_demap_set)
    __swig_setmethods__["precoder_en"] = _srmcli.srm_tx_bundle_rules_t_precoder_en_set
    __swig_getmethods__["precoder_en"] = _srmcli.srm_tx_bundle_rules_t_precoder_en_get
    if _newclass:
        precoder_en = _swig_property(_srmcli.srm_tx_bundle_rules_t_precoder_en_get, _srmcli.srm_tx_bundle_rules_t_precoder_en_set)
    __swig_setmethods__["invert_chan"] = _srmcli.srm_tx_bundle_rules_t_invert_chan_set
    __swig_getmethods__["invert_chan"] = _srmcli.srm_tx_bundle_rules_t_invert_chan_get
    if _newclass:
        invert_chan = _swig_property(_srmcli.srm_tx_bundle_rules_t_invert_chan_get, _srmcli.srm_tx_bundle_rules_t_invert_chan_set)
    __swig_setmethods__["swing"] = _srmcli.srm_tx_bundle_rules_t_swing_set
    __swig_getmethods__["swing"] = _srmcli.srm_tx_bundle_rules_t_swing_get
    if _newclass:
        swing = _swig_property(_srmcli.srm_tx_bundle_rules_t_swing_get, _srmcli.srm_tx_bundle_rules_t_swing_set)
    __swig_setmethods__["fir_tap"] = _srmcli.srm_tx_bundle_rules_t_fir_tap_set
    __swig_getmethods__["fir_tap"] = _srmcli.srm_tx_bundle_rules_t_fir_tap_get
    if _newclass:
        fir_tap = _swig_property(_srmcli.srm_tx_bundle_rules_t_fir_tap_get, _srmcli.srm_tx_bundle_rules_t_fir_tap_set)
    __swig_setmethods__["inner_eye1"] = _srmcli.srm_tx_bundle_rules_t_inner_eye1_set
    __swig_getmethods__["inner_eye1"] = _srmcli.srm_tx_bundle_rules_t_inner_eye1_get
    if _newclass:
        inner_eye1 = _swig_property(_srmcli.srm_tx_bundle_rules_t_inner_eye1_get, _srmcli.srm_tx_bundle_rules_t_inner_eye1_set)
    __swig_setmethods__["inner_eye2"] = _srmcli.srm_tx_bundle_rules_t_inner_eye2_set
    __swig_getmethods__["inner_eye2"] = _srmcli.srm_tx_bundle_rules_t_inner_eye2_get
    if _newclass:
        inner_eye2 = _swig_property(_srmcli.srm_tx_bundle_rules_t_inner_eye2_get, _srmcli.srm_tx_bundle_rules_t_inner_eye2_set)

    def __init__(self):
        """__init__(srm_tx_bundle_rules_t self) -> srm_tx_bundle_rules_t"""
        this = _srmcli.new_srm_tx_bundle_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_tx_bundle_rules_t
    __del__ = lambda self: None
srm_tx_bundle_rules_t_swigregister = _srmcli.srm_tx_bundle_rules_t_swigregister
srm_tx_bundle_rules_t_swigregister(srm_tx_bundle_rules_t)

SRM_AN_CAPABILITY_COUNT = _srmcli.SRM_AN_CAPABILITY_COUNT
SRM_AN_CAPABILITY_COUNT_EVEN = _srmcli.SRM_AN_CAPABILITY_COUNT_EVEN
SRM_AN_STATUS_BUSY = _srmcli.SRM_AN_STATUS_BUSY
SRM_AN_STATUS_RESOLVED = _srmcli.SRM_AN_STATUS_RESOLVED
SRM_AN_STATUS_LT_COMPLETE = _srmcli.SRM_AN_STATUS_LT_COMPLETE
SRM_AN_STATUS_COMPLETE = _srmcli.SRM_AN_STATUS_COMPLETE
SRM_AN_STATUS_FAIL = _srmcli.SRM_AN_STATUS_FAIL
SRM_AN_MODE_IEEE = _srmcli.SRM_AN_MODE_IEEE
SRM_AN_MODE_50G_CONSORTIUM_NP = _srmcli.SRM_AN_MODE_50G_CONSORTIUM_NP
SRM_AN_MODE_BROADCOM_NP = _srmcli.SRM_AN_MODE_BROADCOM_NP
SRM_AN_MODE_PAN_NP = _srmcli.SRM_AN_MODE_PAN_NP
SRM_ANLT_LT_LOCAL_REFERENCE = _srmcli.SRM_ANLT_LT_LOCAL_REFERENCE
SRM_ANLT_LT_RECOVERED_CLOCK = _srmcli.SRM_ANLT_LT_RECOVERED_CLOCK
SRM_ANLT_LT_CL136_PRESET1 = _srmcli.SRM_ANLT_LT_CL136_PRESET1
SRM_ANLT_LT_CL136_PRESET2 = _srmcli.SRM_ANLT_LT_CL136_PRESET2
SRM_ANLT_LT_CL136_PRESET3 = _srmcli.SRM_ANLT_LT_CL136_PRESET3
SRM_ALGO_TYPE_INIT_MASK = _srmcli.SRM_ALGO_TYPE_INIT_MASK
SRM_ALGO_TYPE_TUNE_STEP_MASK = _srmcli.SRM_ALGO_TYPE_TUNE_STEP_MASK
SRM_ALGO_SKIP_PRESET_MASK = _srmcli.SRM_ALGO_SKIP_PRESET_MASK
SRM_ALGO_FIR_STEP_SIZE_MASK = _srmcli.SRM_ALGO_FIR_STEP_SIZE_MASK
SRM_AN_NOT_SUPPORTED = _srmcli.SRM_AN_NOT_SUPPORTED
SRM_AN_10GBASE_KR = _srmcli.SRM_AN_10GBASE_KR
SRM_AN_25GBASE_KR = _srmcli.SRM_AN_25GBASE_KR
SRM_AN_25GBASE_KR_S = _srmcli.SRM_AN_25GBASE_KR_S
SRM_AN_40GBASE_CR4 = _srmcli.SRM_AN_40GBASE_CR4
SRM_AN_40GBASE_KR4 = _srmcli.SRM_AN_40GBASE_KR4
SRM_AN_50GBASE_KR = _srmcli.SRM_AN_50GBASE_KR
SRM_AN_100GBASE_KR2 = _srmcli.SRM_AN_100GBASE_KR2
SRM_AN_100GBASE_KR4 = _srmcli.SRM_AN_100GBASE_KR4
SRM_AN_100GBASE_CR4 = _srmcli.SRM_AN_100GBASE_CR4
SRM_AN_200GBASE_KR4 = _srmcli.SRM_AN_200GBASE_KR4
SRM_AN_25GBASE_KR1_CONS = _srmcli.SRM_AN_25GBASE_KR1_CONS
SRM_AN_25GBASE_CR1_CONS = _srmcli.SRM_AN_25GBASE_CR1_CONS
SRM_AN_50GBASE_KR2_CONS = _srmcli.SRM_AN_50GBASE_KR2_CONS
SRM_AN_50GBASE_CR2_CONS = _srmcli.SRM_AN_50GBASE_CR2_CONS
SRM_AN_400GBASE_KR8_CONS = _srmcli.SRM_AN_400GBASE_KR8_CONS
SRM_AN_400GBASE_KR8_BRCM = _srmcli.SRM_AN_400GBASE_KR8_BRCM
SRM_AN_1_25GBASE_KX = _srmcli.SRM_AN_1_25GBASE_KX
SRM_AN_2_5GBASE_KX = _srmcli.SRM_AN_2_5GBASE_KX
SRM_AN_5GBASE_KR = _srmcli.SRM_AN_5GBASE_KR
SRM_FEC_TYPE_NONE = _srmcli.SRM_FEC_TYPE_NONE
SRM_FEC_TYPE_FIRECODE = _srmcli.SRM_FEC_TYPE_FIRECODE
SRM_FEC_TYPE_RS528 = _srmcli.SRM_FEC_TYPE_RS528
SRM_FEC_TYPE_RS544 = _srmcli.SRM_FEC_TYPE_RS544
SRM_FEC_TYPE_RS272 = _srmcli.SRM_FEC_TYPE_RS272
class srm_anlt_lt_t(_object):
    """Proxy of C++ srm_anlt_lt_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_anlt_lt_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_anlt_lt_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _srmcli.srm_anlt_lt_t_enable_set
    __swig_getmethods__["enable"] = _srmcli.srm_anlt_lt_t_enable_get
    if _newclass:
        enable = _swig_property(_srmcli.srm_anlt_lt_t_enable_get, _srmcli.srm_anlt_lt_t_enable_set)
    __swig_setmethods__["tune_term"] = _srmcli.srm_anlt_lt_t_tune_term_set
    __swig_getmethods__["tune_term"] = _srmcli.srm_anlt_lt_t_tune_term_get
    if _newclass:
        tune_term = _swig_property(_srmcli.srm_anlt_lt_t_tune_term_get, _srmcli.srm_anlt_lt_t_tune_term_set)
    __swig_setmethods__["clk_src"] = _srmcli.srm_anlt_lt_t_clk_src_set
    __swig_getmethods__["clk_src"] = _srmcli.srm_anlt_lt_t_clk_src_get
    if _newclass:
        clk_src = _swig_property(_srmcli.srm_anlt_lt_t_clk_src_get, _srmcli.srm_anlt_lt_t_clk_src_set)
    __swig_setmethods__["retry_threshold"] = _srmcli.srm_anlt_lt_t_retry_threshold_set
    __swig_getmethods__["retry_threshold"] = _srmcli.srm_anlt_lt_t_retry_threshold_get
    if _newclass:
        retry_threshold = _swig_property(_srmcli.srm_anlt_lt_t_retry_threshold_get, _srmcli.srm_anlt_lt_t_retry_threshold_set)
    __swig_setmethods__["target_snr"] = _srmcli.srm_anlt_lt_t_target_snr_set
    __swig_getmethods__["target_snr"] = _srmcli.srm_anlt_lt_t_target_snr_get
    if _newclass:
        target_snr = _swig_property(_srmcli.srm_anlt_lt_t_target_snr_get, _srmcli.srm_anlt_lt_t_target_snr_set)
    __swig_setmethods__["ctle_tune"] = _srmcli.srm_anlt_lt_t_ctle_tune_set
    __swig_getmethods__["ctle_tune"] = _srmcli.srm_anlt_lt_t_ctle_tune_get
    if _newclass:
        ctle_tune = _swig_property(_srmcli.srm_anlt_lt_t_ctle_tune_get, _srmcli.srm_anlt_lt_t_ctle_tune_set)
    __swig_setmethods__["extend_link_time"] = _srmcli.srm_anlt_lt_t_extend_link_time_set
    __swig_getmethods__["extend_link_time"] = _srmcli.srm_anlt_lt_t_extend_link_time_get
    if _newclass:
        extend_link_time = _swig_property(_srmcli.srm_anlt_lt_t_extend_link_time_get, _srmcli.srm_anlt_lt_t_extend_link_time_set)
    __swig_setmethods__["extended_link_time"] = _srmcli.srm_anlt_lt_t_extended_link_time_set
    __swig_getmethods__["extended_link_time"] = _srmcli.srm_anlt_lt_t_extended_link_time_get
    if _newclass:
        extended_link_time = _swig_property(_srmcli.srm_anlt_lt_t_extended_link_time_get, _srmcli.srm_anlt_lt_t_extended_link_time_set)
    __swig_setmethods__["algorithm"] = _srmcli.srm_anlt_lt_t_algorithm_set
    __swig_getmethods__["algorithm"] = _srmcli.srm_anlt_lt_t_algorithm_get
    if _newclass:
        algorithm = _swig_property(_srmcli.srm_anlt_lt_t_algorithm_get, _srmcli.srm_anlt_lt_t_algorithm_set)
    __swig_setmethods__["algo_cycle"] = _srmcli.srm_anlt_lt_t_algo_cycle_set
    __swig_getmethods__["algo_cycle"] = _srmcli.srm_anlt_lt_t_algo_cycle_get
    if _newclass:
        algo_cycle = _swig_property(_srmcli.srm_anlt_lt_t_algo_cycle_get, _srmcli.srm_anlt_lt_t_algo_cycle_set)
    __swig_setmethods__["ctle_cache"] = _srmcli.srm_anlt_lt_t_ctle_cache_set
    __swig_getmethods__["ctle_cache"] = _srmcli.srm_anlt_lt_t_ctle_cache_get
    if _newclass:
        ctle_cache = _swig_property(_srmcli.srm_anlt_lt_t_ctle_cache_get, _srmcli.srm_anlt_lt_t_ctle_cache_set)
    __swig_setmethods__["honor_ieee_link_time"] = _srmcli.srm_anlt_lt_t_honor_ieee_link_time_set
    __swig_getmethods__["honor_ieee_link_time"] = _srmcli.srm_anlt_lt_t_honor_ieee_link_time_get
    if _newclass:
        honor_ieee_link_time = _swig_property(_srmcli.srm_anlt_lt_t_honor_ieee_link_time_get, _srmcli.srm_anlt_lt_t_honor_ieee_link_time_set)
    __swig_setmethods__["auto_rx_precode_threshold"] = _srmcli.srm_anlt_lt_t_auto_rx_precode_threshold_set
    __swig_getmethods__["auto_rx_precode_threshold"] = _srmcli.srm_anlt_lt_t_auto_rx_precode_threshold_get
    if _newclass:
        auto_rx_precode_threshold = _swig_property(_srmcli.srm_anlt_lt_t_auto_rx_precode_threshold_get, _srmcli.srm_anlt_lt_t_auto_rx_precode_threshold_set)
    __swig_setmethods__["auto_invert"] = _srmcli.srm_anlt_lt_t_auto_invert_set
    __swig_getmethods__["auto_invert"] = _srmcli.srm_anlt_lt_t_auto_invert_get
    if _newclass:
        auto_invert = _swig_property(_srmcli.srm_anlt_lt_t_auto_invert_get, _srmcli.srm_anlt_lt_t_auto_invert_set)
    __swig_setmethods__["bypass_fir_walk"] = _srmcli.srm_anlt_lt_t_bypass_fir_walk_set
    __swig_getmethods__["bypass_fir_walk"] = _srmcli.srm_anlt_lt_t_bypass_fir_walk_get
    if _newclass:
        bypass_fir_walk = _swig_property(_srmcli.srm_anlt_lt_t_bypass_fir_walk_get, _srmcli.srm_anlt_lt_t_bypass_fir_walk_set)
    __swig_setmethods__["cl136_preset"] = _srmcli.srm_anlt_lt_t_cl136_preset_set
    __swig_getmethods__["cl136_preset"] = _srmcli.srm_anlt_lt_t_cl136_preset_get
    if _newclass:
        cl136_preset = _swig_property(_srmcli.srm_anlt_lt_t_cl136_preset_get, _srmcli.srm_anlt_lt_t_cl136_preset_set)

    def __init__(self):
        """__init__(srm_anlt_lt_t self) -> srm_anlt_lt_t"""
        this = _srmcli.new_srm_anlt_lt_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_anlt_lt_t
    __del__ = lambda self: None
srm_anlt_lt_t_swigregister = _srmcli.srm_anlt_lt_t_swigregister
srm_anlt_lt_t_swigregister(srm_anlt_lt_t)

class srm_anlt_fec_capability_t(_object):
    """Proxy of C++ srm_anlt_fec_capability_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_anlt_fec_capability_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_anlt_fec_capability_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["capable"] = _srmcli.srm_anlt_fec_capability_t_capable_set
    __swig_getmethods__["capable"] = _srmcli.srm_anlt_fec_capability_t_capable_get
    if _newclass:
        capable = _swig_property(_srmcli.srm_anlt_fec_capability_t_capable_get, _srmcli.srm_anlt_fec_capability_t_capable_set)
    __swig_setmethods__["request"] = _srmcli.srm_anlt_fec_capability_t_request_set
    __swig_getmethods__["request"] = _srmcli.srm_anlt_fec_capability_t_request_get
    if _newclass:
        request = _swig_property(_srmcli.srm_anlt_fec_capability_t_request_get, _srmcli.srm_anlt_fec_capability_t_request_set)

    def __init__(self):
        """__init__(srm_anlt_fec_capability_t self) -> srm_anlt_fec_capability_t"""
        this = _srmcli.new_srm_anlt_fec_capability_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_anlt_fec_capability_t
    __del__ = lambda self: None
srm_anlt_fec_capability_t_swigregister = _srmcli.srm_anlt_fec_capability_t_swigregister
srm_anlt_fec_capability_t_swigregister(srm_anlt_fec_capability_t)

class srm_an_capability_t(_object):
    """Proxy of C++ srm_an_capability_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_an_capability_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_an_capability_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["advertise"] = _srmcli.srm_an_capability_t_advertise_set
    __swig_getmethods__["advertise"] = _srmcli.srm_an_capability_t_advertise_get
    if _newclass:
        advertise = _swig_property(_srmcli.srm_an_capability_t_advertise_get, _srmcli.srm_an_capability_t_advertise_set)
    __swig_setmethods__["predict"] = _srmcli.srm_an_capability_t_predict_set
    __swig_getmethods__["predict"] = _srmcli.srm_an_capability_t_predict_get
    if _newclass:
        predict = _swig_property(_srmcli.srm_an_capability_t_predict_get, _srmcli.srm_an_capability_t_predict_set)
    __swig_setmethods__["fec"] = _srmcli.srm_an_capability_t_fec_set
    __swig_getmethods__["fec"] = _srmcli.srm_an_capability_t_fec_get
    if _newclass:
        fec = _swig_property(_srmcli.srm_an_capability_t_fec_get, _srmcli.srm_an_capability_t_fec_set)

    def __init__(self):
        """__init__(srm_an_capability_t self) -> srm_an_capability_t"""
        this = _srmcli.new_srm_an_capability_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_an_capability_t
    __del__ = lambda self: None
srm_an_capability_t_swigregister = _srmcli.srm_an_capability_t_swigregister
srm_an_capability_t_swigregister(srm_an_capability_t)

class srm_kran_llfec_cap_t(_object):
    """Proxy of C++ srm_kran_llfec_cap_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_kran_llfec_cap_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_kran_llfec_cap_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lf1_capable"] = _srmcli.srm_kran_llfec_cap_t_lf1_capable_set
    __swig_getmethods__["lf1_capable"] = _srmcli.srm_kran_llfec_cap_t_lf1_capable_get
    if _newclass:
        lf1_capable = _swig_property(_srmcli.srm_kran_llfec_cap_t_lf1_capable_get, _srmcli.srm_kran_llfec_cap_t_lf1_capable_set)
    __swig_setmethods__["lf2_capable"] = _srmcli.srm_kran_llfec_cap_t_lf2_capable_set
    __swig_getmethods__["lf2_capable"] = _srmcli.srm_kran_llfec_cap_t_lf2_capable_get
    if _newclass:
        lf2_capable = _swig_property(_srmcli.srm_kran_llfec_cap_t_lf2_capable_get, _srmcli.srm_kran_llfec_cap_t_lf2_capable_set)
    __swig_setmethods__["lf3_capable"] = _srmcli.srm_kran_llfec_cap_t_lf3_capable_set
    __swig_getmethods__["lf3_capable"] = _srmcli.srm_kran_llfec_cap_t_lf3_capable_get
    if _newclass:
        lf3_capable = _swig_property(_srmcli.srm_kran_llfec_cap_t_lf3_capable_get, _srmcli.srm_kran_llfec_cap_t_lf3_capable_set)
    __swig_setmethods__["ll_rs272_request"] = _srmcli.srm_kran_llfec_cap_t_ll_rs272_request_set
    __swig_getmethods__["ll_rs272_request"] = _srmcli.srm_kran_llfec_cap_t_ll_rs272_request_get
    if _newclass:
        ll_rs272_request = _swig_property(_srmcli.srm_kran_llfec_cap_t_ll_rs272_request_get, _srmcli.srm_kran_llfec_cap_t_ll_rs272_request_set)

    def __init__(self):
        """__init__(srm_kran_llfec_cap_t self) -> srm_kran_llfec_cap_t"""
        this = _srmcli.new_srm_kran_llfec_cap_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_kran_llfec_cap_t
    __del__ = lambda self: None
srm_kran_llfec_cap_t_swigregister = _srmcli.srm_kran_llfec_cap_t_swigregister
srm_kran_llfec_cap_t_swigregister(srm_kran_llfec_cap_t)

class srm_anlt_pan_aware_t(_object):
    """Proxy of C++ srm_anlt_pan_aware_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_anlt_pan_aware_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_anlt_pan_aware_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["oui_page"] = _srmcli.srm_anlt_pan_aware_t_oui_page_set
    __swig_getmethods__["oui_page"] = _srmcli.srm_anlt_pan_aware_t_oui_page_get
    if _newclass:
        oui_page = _swig_property(_srmcli.srm_anlt_pan_aware_t_oui_page_get, _srmcli.srm_anlt_pan_aware_t_oui_page_set)
    __swig_setmethods__["oui_mask"] = _srmcli.srm_anlt_pan_aware_t_oui_mask_set
    __swig_getmethods__["oui_mask"] = _srmcli.srm_anlt_pan_aware_t_oui_mask_get
    if _newclass:
        oui_mask = _swig_property(_srmcli.srm_anlt_pan_aware_t_oui_mask_get, _srmcli.srm_anlt_pan_aware_t_oui_mask_set)
    __swig_setmethods__["ext_page"] = _srmcli.srm_anlt_pan_aware_t_ext_page_set
    __swig_getmethods__["ext_page"] = _srmcli.srm_anlt_pan_aware_t_ext_page_get
    if _newclass:
        ext_page = _swig_property(_srmcli.srm_anlt_pan_aware_t_ext_page_get, _srmcli.srm_anlt_pan_aware_t_ext_page_set)
    __swig_setmethods__["ext_mask"] = _srmcli.srm_anlt_pan_aware_t_ext_mask_set
    __swig_getmethods__["ext_mask"] = _srmcli.srm_anlt_pan_aware_t_ext_mask_get
    if _newclass:
        ext_mask = _swig_property(_srmcli.srm_anlt_pan_aware_t_ext_mask_get, _srmcli.srm_anlt_pan_aware_t_ext_mask_set)
    __swig_setmethods__["exp_page"] = _srmcli.srm_anlt_pan_aware_t_exp_page_set
    __swig_getmethods__["exp_page"] = _srmcli.srm_anlt_pan_aware_t_exp_page_get
    if _newclass:
        exp_page = _swig_property(_srmcli.srm_anlt_pan_aware_t_exp_page_get, _srmcli.srm_anlt_pan_aware_t_exp_page_set)
    __swig_setmethods__["baud_rate"] = _srmcli.srm_anlt_pan_aware_t_baud_rate_set
    __swig_getmethods__["baud_rate"] = _srmcli.srm_anlt_pan_aware_t_baud_rate_get
    if _newclass:
        baud_rate = _swig_property(_srmcli.srm_anlt_pan_aware_t_baud_rate_get, _srmcli.srm_anlt_pan_aware_t_baud_rate_set)
    __swig_setmethods__["bundling"] = _srmcli.srm_anlt_pan_aware_t_bundling_set
    __swig_getmethods__["bundling"] = _srmcli.srm_anlt_pan_aware_t_bundling_get
    if _newclass:
        bundling = _swig_property(_srmcli.srm_anlt_pan_aware_t_bundling_get, _srmcli.srm_anlt_pan_aware_t_bundling_set)
    __swig_setmethods__["modulation_mode"] = _srmcli.srm_anlt_pan_aware_t_modulation_mode_set
    __swig_getmethods__["modulation_mode"] = _srmcli.srm_anlt_pan_aware_t_modulation_mode_get
    if _newclass:
        modulation_mode = _swig_property(_srmcli.srm_anlt_pan_aware_t_modulation_mode_get, _srmcli.srm_anlt_pan_aware_t_modulation_mode_set)

    def __init__(self):
        """__init__(srm_anlt_pan_aware_t self) -> srm_anlt_pan_aware_t"""
        this = _srmcli.new_srm_anlt_pan_aware_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_anlt_pan_aware_t
    __del__ = lambda self: None
srm_anlt_pan_aware_t_swigregister = _srmcli.srm_anlt_pan_aware_t_swigregister
srm_anlt_pan_aware_t_swigregister(srm_anlt_pan_aware_t)

class srm_anlt_an_t(_object):
    """Proxy of C++ srm_anlt_an_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_anlt_an_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_anlt_an_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enable"] = _srmcli.srm_anlt_an_t_enable_set
    __swig_getmethods__["enable"] = _srmcli.srm_anlt_an_t_enable_get
    if _newclass:
        enable = _swig_property(_srmcli.srm_anlt_an_t_enable_get, _srmcli.srm_anlt_an_t_enable_set)
    __swig_setmethods__["probe"] = _srmcli.srm_anlt_an_t_probe_set
    __swig_getmethods__["probe"] = _srmcli.srm_anlt_an_t_probe_get
    if _newclass:
        probe = _swig_property(_srmcli.srm_anlt_an_t_probe_get, _srmcli.srm_anlt_an_t_probe_set)
    __swig_setmethods__["mode"] = _srmcli.srm_anlt_an_t_mode_set
    __swig_getmethods__["mode"] = _srmcli.srm_anlt_an_t_mode_get
    if _newclass:
        mode = _swig_property(_srmcli.srm_anlt_an_t_mode_get, _srmcli.srm_anlt_an_t_mode_set)
    __swig_setmethods__["retry_threshold"] = _srmcli.srm_anlt_an_t_retry_threshold_set
    __swig_getmethods__["retry_threshold"] = _srmcli.srm_anlt_an_t_retry_threshold_get
    if _newclass:
        retry_threshold = _swig_property(_srmcli.srm_anlt_an_t_retry_threshold_get, _srmcli.srm_anlt_an_t_retry_threshold_set)
    __swig_setmethods__["an_1_25gbase_kx"] = _srmcli.srm_anlt_an_t_an_1_25gbase_kx_set
    __swig_getmethods__["an_1_25gbase_kx"] = _srmcli.srm_anlt_an_t_an_1_25gbase_kx_get
    if _newclass:
        an_1_25gbase_kx = _swig_property(_srmcli.srm_anlt_an_t_an_1_25gbase_kx_get, _srmcli.srm_anlt_an_t_an_1_25gbase_kx_set)
    __swig_setmethods__["an_2_5gbase_kx"] = _srmcli.srm_anlt_an_t_an_2_5gbase_kx_set
    __swig_getmethods__["an_2_5gbase_kx"] = _srmcli.srm_anlt_an_t_an_2_5gbase_kx_get
    if _newclass:
        an_2_5gbase_kx = _swig_property(_srmcli.srm_anlt_an_t_an_2_5gbase_kx_get, _srmcli.srm_anlt_an_t_an_2_5gbase_kx_set)
    __swig_setmethods__["an_5gbase_kr"] = _srmcli.srm_anlt_an_t_an_5gbase_kr_set
    __swig_getmethods__["an_5gbase_kr"] = _srmcli.srm_anlt_an_t_an_5gbase_kr_get
    if _newclass:
        an_5gbase_kr = _swig_property(_srmcli.srm_anlt_an_t_an_5gbase_kr_get, _srmcli.srm_anlt_an_t_an_5gbase_kr_set)
    __swig_setmethods__["an_10gbase_kr"] = _srmcli.srm_anlt_an_t_an_10gbase_kr_set
    __swig_getmethods__["an_10gbase_kr"] = _srmcli.srm_anlt_an_t_an_10gbase_kr_get
    if _newclass:
        an_10gbase_kr = _swig_property(_srmcli.srm_anlt_an_t_an_10gbase_kr_get, _srmcli.srm_anlt_an_t_an_10gbase_kr_set)
    __swig_setmethods__["an_25gbase_kr"] = _srmcli.srm_anlt_an_t_an_25gbase_kr_set
    __swig_getmethods__["an_25gbase_kr"] = _srmcli.srm_anlt_an_t_an_25gbase_kr_get
    if _newclass:
        an_25gbase_kr = _swig_property(_srmcli.srm_anlt_an_t_an_25gbase_kr_get, _srmcli.srm_anlt_an_t_an_25gbase_kr_set)
    __swig_setmethods__["an_25gbase_kr_s"] = _srmcli.srm_anlt_an_t_an_25gbase_kr_s_set
    __swig_getmethods__["an_25gbase_kr_s"] = _srmcli.srm_anlt_an_t_an_25gbase_kr_s_get
    if _newclass:
        an_25gbase_kr_s = _swig_property(_srmcli.srm_anlt_an_t_an_25gbase_kr_s_get, _srmcli.srm_anlt_an_t_an_25gbase_kr_s_set)
    __swig_setmethods__["an_25gbase_kr_con"] = _srmcli.srm_anlt_an_t_an_25gbase_kr_con_set
    __swig_getmethods__["an_25gbase_kr_con"] = _srmcli.srm_anlt_an_t_an_25gbase_kr_con_get
    if _newclass:
        an_25gbase_kr_con = _swig_property(_srmcli.srm_anlt_an_t_an_25gbase_kr_con_get, _srmcli.srm_anlt_an_t_an_25gbase_kr_con_set)
    __swig_setmethods__["an_25gbase_cr_con"] = _srmcli.srm_anlt_an_t_an_25gbase_cr_con_set
    __swig_getmethods__["an_25gbase_cr_con"] = _srmcli.srm_anlt_an_t_an_25gbase_cr_con_get
    if _newclass:
        an_25gbase_cr_con = _swig_property(_srmcli.srm_anlt_an_t_an_25gbase_cr_con_get, _srmcli.srm_anlt_an_t_an_25gbase_cr_con_set)
    __swig_setmethods__["an_40gbase_kr4"] = _srmcli.srm_anlt_an_t_an_40gbase_kr4_set
    __swig_getmethods__["an_40gbase_kr4"] = _srmcli.srm_anlt_an_t_an_40gbase_kr4_get
    if _newclass:
        an_40gbase_kr4 = _swig_property(_srmcli.srm_anlt_an_t_an_40gbase_kr4_get, _srmcli.srm_anlt_an_t_an_40gbase_kr4_set)
    __swig_setmethods__["an_40gbase_cr4"] = _srmcli.srm_anlt_an_t_an_40gbase_cr4_set
    __swig_getmethods__["an_40gbase_cr4"] = _srmcli.srm_anlt_an_t_an_40gbase_cr4_get
    if _newclass:
        an_40gbase_cr4 = _swig_property(_srmcli.srm_anlt_an_t_an_40gbase_cr4_get, _srmcli.srm_anlt_an_t_an_40gbase_cr4_set)
    __swig_setmethods__["an_50gbase_kr"] = _srmcli.srm_anlt_an_t_an_50gbase_kr_set
    __swig_getmethods__["an_50gbase_kr"] = _srmcli.srm_anlt_an_t_an_50gbase_kr_get
    if _newclass:
        an_50gbase_kr = _swig_property(_srmcli.srm_anlt_an_t_an_50gbase_kr_get, _srmcli.srm_anlt_an_t_an_50gbase_kr_set)
    __swig_setmethods__["an_50gbase_kr2"] = _srmcli.srm_anlt_an_t_an_50gbase_kr2_set
    __swig_getmethods__["an_50gbase_kr2"] = _srmcli.srm_anlt_an_t_an_50gbase_kr2_get
    if _newclass:
        an_50gbase_kr2 = _swig_property(_srmcli.srm_anlt_an_t_an_50gbase_kr2_get, _srmcli.srm_anlt_an_t_an_50gbase_kr2_set)
    __swig_setmethods__["an_50gbase_cr2"] = _srmcli.srm_anlt_an_t_an_50gbase_cr2_set
    __swig_getmethods__["an_50gbase_cr2"] = _srmcli.srm_anlt_an_t_an_50gbase_cr2_get
    if _newclass:
        an_50gbase_cr2 = _swig_property(_srmcli.srm_anlt_an_t_an_50gbase_cr2_get, _srmcli.srm_anlt_an_t_an_50gbase_cr2_set)
    __swig_setmethods__["an_100gbase_kr2"] = _srmcli.srm_anlt_an_t_an_100gbase_kr2_set
    __swig_getmethods__["an_100gbase_kr2"] = _srmcli.srm_anlt_an_t_an_100gbase_kr2_get
    if _newclass:
        an_100gbase_kr2 = _swig_property(_srmcli.srm_anlt_an_t_an_100gbase_kr2_get, _srmcli.srm_anlt_an_t_an_100gbase_kr2_set)
    __swig_setmethods__["an_100gbase_kr4"] = _srmcli.srm_anlt_an_t_an_100gbase_kr4_set
    __swig_getmethods__["an_100gbase_kr4"] = _srmcli.srm_anlt_an_t_an_100gbase_kr4_get
    if _newclass:
        an_100gbase_kr4 = _swig_property(_srmcli.srm_anlt_an_t_an_100gbase_kr4_get, _srmcli.srm_anlt_an_t_an_100gbase_kr4_set)
    __swig_setmethods__["an_100gbase_cr4"] = _srmcli.srm_anlt_an_t_an_100gbase_cr4_set
    __swig_getmethods__["an_100gbase_cr4"] = _srmcli.srm_anlt_an_t_an_100gbase_cr4_get
    if _newclass:
        an_100gbase_cr4 = _swig_property(_srmcli.srm_anlt_an_t_an_100gbase_cr4_get, _srmcli.srm_anlt_an_t_an_100gbase_cr4_set)
    __swig_setmethods__["an_200gbase_kr4"] = _srmcli.srm_anlt_an_t_an_200gbase_kr4_set
    __swig_getmethods__["an_200gbase_kr4"] = _srmcli.srm_anlt_an_t_an_200gbase_kr4_get
    if _newclass:
        an_200gbase_kr4 = _swig_property(_srmcli.srm_anlt_an_t_an_200gbase_kr4_get, _srmcli.srm_anlt_an_t_an_200gbase_kr4_set)
    __swig_setmethods__["an_400gbase_kr8"] = _srmcli.srm_anlt_an_t_an_400gbase_kr8_set
    __swig_getmethods__["an_400gbase_kr8"] = _srmcli.srm_anlt_an_t_an_400gbase_kr8_get
    if _newclass:
        an_400gbase_kr8 = _swig_property(_srmcli.srm_anlt_an_t_an_400gbase_kr8_get, _srmcli.srm_anlt_an_t_an_400gbase_kr8_set)
    __swig_setmethods__["an_fec"] = _srmcli.srm_anlt_an_t_an_fec_set
    __swig_getmethods__["an_fec"] = _srmcli.srm_anlt_an_t_an_fec_get
    if _newclass:
        an_fec = _swig_property(_srmcli.srm_anlt_an_t_an_fec_get, _srmcli.srm_anlt_an_t_an_fec_set)
    __swig_setmethods__["link_time_budget"] = _srmcli.srm_anlt_an_t_link_time_budget_set
    __swig_getmethods__["link_time_budget"] = _srmcli.srm_anlt_an_t_link_time_budget_get
    if _newclass:
        link_time_budget = _swig_property(_srmcli.srm_anlt_an_t_link_time_budget_get, _srmcli.srm_anlt_an_t_link_time_budget_set)
    __swig_setmethods__["an_pause_ability"] = _srmcli.srm_anlt_an_t_an_pause_ability_set
    __swig_getmethods__["an_pause_ability"] = _srmcli.srm_anlt_an_t_an_pause_ability_get
    if _newclass:
        an_pause_ability = _swig_property(_srmcli.srm_anlt_an_t_an_pause_ability_get, _srmcli.srm_anlt_an_t_an_pause_ability_set)
    __swig_setmethods__["an_remote_fault"] = _srmcli.srm_anlt_an_t_an_remote_fault_set
    __swig_getmethods__["an_remote_fault"] = _srmcli.srm_anlt_an_t_an_remote_fault_get
    if _newclass:
        an_remote_fault = _swig_property(_srmcli.srm_anlt_an_t_an_remote_fault_get, _srmcli.srm_anlt_an_t_an_remote_fault_set)
    __swig_setmethods__["port_shut"] = _srmcli.srm_anlt_an_t_port_shut_set
    __swig_getmethods__["port_shut"] = _srmcli.srm_anlt_an_t_port_shut_get
    if _newclass:
        port_shut = _swig_property(_srmcli.srm_anlt_an_t_port_shut_get, _srmcli.srm_anlt_an_t_port_shut_set)
    __swig_setmethods__["advanced"] = _srmcli.srm_anlt_an_t_advanced_set
    __swig_getmethods__["advanced"] = _srmcli.srm_anlt_an_t_advanced_get
    if _newclass:
        advanced = _swig_property(_srmcli.srm_anlt_an_t_advanced_get, _srmcli.srm_anlt_an_t_advanced_set)
    __swig_setmethods__["pan"] = _srmcli.srm_anlt_an_t_pan_set
    __swig_getmethods__["pan"] = _srmcli.srm_anlt_an_t_pan_get
    if _newclass:
        pan = _swig_property(_srmcli.srm_anlt_an_t_pan_get, _srmcli.srm_anlt_an_t_pan_set)
    __swig_setmethods__["nonce_chk_disable"] = _srmcli.srm_anlt_an_t_nonce_chk_disable_set
    __swig_getmethods__["nonce_chk_disable"] = _srmcli.srm_anlt_an_t_nonce_chk_disable_get
    if _newclass:
        nonce_chk_disable = _swig_property(_srmcli.srm_anlt_an_t_nonce_chk_disable_get, _srmcli.srm_anlt_an_t_nonce_chk_disable_set)
    __swig_setmethods__["lt_timer_disable"] = _srmcli.srm_anlt_an_t_lt_timer_disable_set
    __swig_getmethods__["lt_timer_disable"] = _srmcli.srm_anlt_an_t_lt_timer_disable_get
    if _newclass:
        lt_timer_disable = _swig_property(_srmcli.srm_anlt_an_t_lt_timer_disable_get, _srmcli.srm_anlt_an_t_lt_timer_disable_set)
    __swig_setmethods__["llfec_con"] = _srmcli.srm_anlt_an_t_llfec_con_set
    __swig_getmethods__["llfec_con"] = _srmcli.srm_anlt_an_t_llfec_con_get
    if _newclass:
        llfec_con = _swig_property(_srmcli.srm_anlt_an_t_llfec_con_get, _srmcli.srm_anlt_an_t_llfec_con_set)

    def __init__(self):
        """__init__(srm_anlt_an_t self) -> srm_anlt_an_t"""
        this = _srmcli.new_srm_anlt_an_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_anlt_an_t
    __del__ = lambda self: None
srm_anlt_an_t_swigregister = _srmcli.srm_anlt_an_t_swigregister
srm_anlt_an_t_swigregister(srm_anlt_an_t)

class srm_anlt_results_t(_object):
    """Proxy of C++ srm_anlt_results_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_anlt_results_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_anlt_results_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hcd_rate"] = _srmcli.srm_anlt_results_t_hcd_rate_set
    __swig_getmethods__["hcd_rate"] = _srmcli.srm_anlt_results_t_hcd_rate_get
    if _newclass:
        hcd_rate = _swig_property(_srmcli.srm_anlt_results_t_hcd_rate_get, _srmcli.srm_anlt_results_t_hcd_rate_set)
    __swig_setmethods__["fec_type"] = _srmcli.srm_anlt_results_t_fec_type_set
    __swig_getmethods__["fec_type"] = _srmcli.srm_anlt_results_t_fec_type_get
    if _newclass:
        fec_type = _swig_property(_srmcli.srm_anlt_results_t_fec_type_get, _srmcli.srm_anlt_results_t_fec_type_set)

    def __init__(self):
        """__init__(srm_anlt_results_t self) -> srm_anlt_results_t"""
        this = _srmcli.new_srm_anlt_results_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_anlt_results_t
    __del__ = lambda self: None
srm_anlt_results_t_swigregister = _srmcli.srm_anlt_results_t_swigregister
srm_anlt_results_t_swigregister(srm_anlt_results_t)

class srm_channel_t(_object):
    """Proxy of C++ srm_channel_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_channel_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_channel_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rx_die"] = _srmcli.srm_channel_t_rx_die_set
    __swig_getmethods__["rx_die"] = _srmcli.srm_channel_t_rx_die_get
    if _newclass:
        rx_die = _swig_property(_srmcli.srm_channel_t_rx_die_get, _srmcli.srm_channel_t_rx_die_set)
    __swig_setmethods__["rx_channel"] = _srmcli.srm_channel_t_rx_channel_set
    __swig_getmethods__["rx_channel"] = _srmcli.srm_channel_t_rx_channel_get
    if _newclass:
        rx_channel = _swig_property(_srmcli.srm_channel_t_rx_channel_get, _srmcli.srm_channel_t_rx_channel_set)
    __swig_setmethods__["tx_die"] = _srmcli.srm_channel_t_tx_die_set
    __swig_getmethods__["tx_die"] = _srmcli.srm_channel_t_tx_die_get
    if _newclass:
        tx_die = _swig_property(_srmcli.srm_channel_t_tx_die_get, _srmcli.srm_channel_t_tx_die_set)
    __swig_setmethods__["tx_channel"] = _srmcli.srm_channel_t_tx_channel_set
    __swig_getmethods__["tx_channel"] = _srmcli.srm_channel_t_tx_channel_get
    if _newclass:
        tx_channel = _swig_property(_srmcli.srm_channel_t_tx_channel_get, _srmcli.srm_channel_t_tx_channel_set)

    def __init__(self):
        """__init__(srm_channel_t self) -> srm_channel_t"""
        this = _srmcli.new_srm_channel_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_channel_t
    __del__ = lambda self: None
srm_channel_t_swigregister = _srmcli.srm_channel_t_swigregister
srm_channel_t_swigregister(srm_channel_t)

class srm_anlt_bundle_t(_object):
    """Proxy of C++ srm_anlt_bundle_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_anlt_bundle_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_anlt_bundle_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["an_leader"] = _srmcli.srm_anlt_bundle_t_an_leader_set
    __swig_getmethods__["an_leader"] = _srmcli.srm_anlt_bundle_t_an_leader_get
    if _newclass:
        an_leader = _swig_property(_srmcli.srm_anlt_bundle_t_an_leader_get, _srmcli.srm_anlt_bundle_t_an_leader_set)
    __swig_setmethods__["num_followers"] = _srmcli.srm_anlt_bundle_t_num_followers_set
    __swig_getmethods__["num_followers"] = _srmcli.srm_anlt_bundle_t_num_followers_get
    if _newclass:
        num_followers = _swig_property(_srmcli.srm_anlt_bundle_t_num_followers_get, _srmcli.srm_anlt_bundle_t_num_followers_set)
    __swig_setmethods__["lt_followers"] = _srmcli.srm_anlt_bundle_t_lt_followers_set
    __swig_getmethods__["lt_followers"] = _srmcli.srm_anlt_bundle_t_lt_followers_get
    if _newclass:
        lt_followers = _swig_property(_srmcli.srm_anlt_bundle_t_lt_followers_get, _srmcli.srm_anlt_bundle_t_lt_followers_set)

    def lt_followers_item(self, i):
        """lt_followers_item(srm_anlt_bundle_t self, size_t i) -> srm_channel_t"""
        return _srmcli.srm_anlt_bundle_t_lt_followers_item(self, i)


    def lt_followers_items_n(self):
        """lt_followers_items_n(srm_anlt_bundle_t self) -> size_t"""
        return _srmcli.srm_anlt_bundle_t_lt_followers_items_n(self)


    def __init__(self):
        """__init__(srm_anlt_bundle_t self) -> srm_anlt_bundle_t"""
        this = _srmcli.new_srm_anlt_bundle_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_anlt_bundle_t
    __del__ = lambda self: None
srm_anlt_bundle_t_swigregister = _srmcli.srm_anlt_bundle_t_swigregister
srm_anlt_bundle_t_swigregister(srm_anlt_bundle_t)

class srm_anlt_rules_t(_object):
    """Proxy of C++ srm_anlt_rules_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_anlt_rules_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_anlt_rules_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["an"] = _srmcli.srm_anlt_rules_t_an_set
    __swig_getmethods__["an"] = _srmcli.srm_anlt_rules_t_an_get
    if _newclass:
        an = _swig_property(_srmcli.srm_anlt_rules_t_an_get, _srmcli.srm_anlt_rules_t_an_set)
    __swig_setmethods__["lt"] = _srmcli.srm_anlt_rules_t_lt_set
    __swig_getmethods__["lt"] = _srmcli.srm_anlt_rules_t_lt_get
    if _newclass:
        lt = _swig_property(_srmcli.srm_anlt_rules_t_lt_get, _srmcli.srm_anlt_rules_t_lt_set)
    __swig_setmethods__["rx"] = _srmcli.srm_anlt_rules_t_rx_set
    __swig_getmethods__["rx"] = _srmcli.srm_anlt_rules_t_rx_get
    if _newclass:
        rx = _swig_property(_srmcli.srm_anlt_rules_t_rx_get, _srmcli.srm_anlt_rules_t_rx_set)
    __swig_setmethods__["tx"] = _srmcli.srm_anlt_rules_t_tx_set
    __swig_getmethods__["tx"] = _srmcli.srm_anlt_rules_t_tx_get
    if _newclass:
        tx = _swig_property(_srmcli.srm_anlt_rules_t_tx_get, _srmcli.srm_anlt_rules_t_tx_set)
    __swig_setmethods__["pll"] = _srmcli.srm_anlt_rules_t_pll_set
    __swig_getmethods__["pll"] = _srmcli.srm_anlt_rules_t_pll_get
    if _newclass:
        pll = _swig_property(_srmcli.srm_anlt_rules_t_pll_get, _srmcli.srm_anlt_rules_t_pll_set)

    def __init__(self):
        """__init__(srm_anlt_rules_t self) -> srm_anlt_rules_t"""
        this = _srmcli.new_srm_anlt_rules_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_anlt_rules_t
    __del__ = lambda self: None
srm_anlt_rules_t_swigregister = _srmcli.srm_anlt_rules_t_swigregister
srm_anlt_rules_t_swigregister(srm_anlt_rules_t)

apb_interface_type_e_PCIE = _srmcli.apb_interface_type_e_PCIE
apb_interface_type_e_FIRST = _srmcli.apb_interface_type_e_FIRST
apb_interface_type_e_SERDES = _srmcli.apb_interface_type_e_SERDES
apb_interface_type_e_HBM = _srmcli.apb_interface_type_e_HBM
apb_interface_type_e_LAST = _srmcli.apb_interface_type_e_LAST
class apb(_object):
    """Proxy of C++ silicon_one::apb class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, apb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apb, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _srmcli.delete_apb
    __del__ = lambda self: None
    pcie_apb_select_e_CORE = _srmcli.apb_pcie_apb_select_e_CORE
    pcie_apb_select_e_PHY = _srmcli.apb_pcie_apb_select_e_PHY
    pcie_apb_select_e_ALL = _srmcli.apb_pcie_apb_select_e_ALL

    def get_device_id(self):
        """get_device_id(apb self) -> la_device_id_t"""
        return _srmcli.apb_get_device_id(self)


    def get_interface_type(self):
        """get_interface_type(apb self) -> silicon_one::apb_interface_type_e"""
        return _srmcli.apb_get_interface_type(self)


    def configure(self, clk_div):
        """configure(apb self, uint32_t clk_div) -> la_status"""
        return _srmcli.apb_configure(self, clk_div)


    def write(self, apb_select, addr, in_bv):
        """write(apb self, uint32_t apb_select, uint32_t addr, bit_vector in_bv) -> la_status"""
        return _srmcli.apb_write(self, apb_select, addr, in_bv)


    def read(self, apb_select, addr):
        """read(apb self, uint32_t apb_select, uint32_t addr) -> la_status"""
        return _srmcli.apb_read(self, apb_select, addr)


    def get_lock(self):
        """get_lock(apb self) -> std::recursive_mutex &"""
        return _srmcli.apb_get_lock(self)

apb_swigregister = _srmcli.apb_swigregister
apb_swigregister(apb)

class srm_serdes_address(_object):
    """Proxy of C++ silicon_one::srm_serdes_address class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_serdes_address, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_serdes_address, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fields"] = _srmcli.srm_serdes_address_fields_set
    __swig_getmethods__["fields"] = _srmcli.srm_serdes_address_fields_get
    if _newclass:
        fields = _swig_property(_srmcli.srm_serdes_address_fields_get, _srmcli.srm_serdes_address_fields_set)
    __swig_setmethods__["u32"] = _srmcli.srm_serdes_address_u32_set
    __swig_getmethods__["u32"] = _srmcli.srm_serdes_address_u32_get
    if _newclass:
        u32 = _swig_property(_srmcli.srm_serdes_address_u32_get, _srmcli.srm_serdes_address_u32_set)

    def __init__(self):
        """__init__(silicon_one::srm_serdes_address self) -> srm_serdes_address"""
        this = _srmcli.new_srm_serdes_address()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_serdes_address
    __del__ = lambda self: None
srm_serdes_address_swigregister = _srmcli.srm_serdes_address_swigregister
srm_serdes_address_swigregister(srm_serdes_address)

srm_serdes_addressing_mode_e_SERDES = _srmcli.srm_serdes_addressing_mode_e_SERDES
srm_serdes_addressing_mode_e_IFG = _srmcli.srm_serdes_addressing_mode_e_IFG
srm_serdes_addressing_mode_e_DEVICE = _srmcli.srm_serdes_addressing_mode_e_DEVICE
class srm(_object):
    """Proxy of C++ silicon_one::srm class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm, name)
    __repr__ = _swig_repr

    def set_apb(apb):
        """set_apb(apb apb) -> la_status"""
        return _srmcli.srm_set_apb(apb)

    set_apb = staticmethod(set_apb)

    def get_apb(device_id):
        """get_apb(la_device_id_t device_id) -> apb"""
        return _srmcli.srm_get_apb(device_id)

    get_apb = staticmethod(get_apb)

    def clear_apb(apb):
        """clear_apb(apb apb)"""
        return _srmcli.srm_clear_apb(apb)

    clear_apb = staticmethod(clear_apb)

    def __init__(self):
        """__init__(silicon_one::srm self) -> srm"""
        this = _srmcli.new_srm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm
    __del__ = lambda self: None
srm_swigregister = _srmcli.srm_swigregister
srm_swigregister(srm)

def srm_set_apb(apb):
    """srm_set_apb(apb apb) -> la_status"""
    return _srmcli.srm_set_apb(apb)

def srm_get_apb(device_id):
    """srm_get_apb(la_device_id_t device_id) -> apb"""
    return _srmcli.srm_get_apb(device_id)

def srm_clear_apb(apb):
    """srm_clear_apb(apb apb)"""
    return _srmcli.srm_clear_apb(apb)

class la_slice_ifg(_object):
    """Proxy of C++ la_slice_ifg class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, la_slice_ifg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, la_slice_ifg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["slice"] = _srmcli.la_slice_ifg_slice_set
    __swig_getmethods__["slice"] = _srmcli.la_slice_ifg_slice_get
    if _newclass:
        slice = _swig_property(_srmcli.la_slice_ifg_slice_get, _srmcli.la_slice_ifg_slice_set)
    __swig_setmethods__["ifg"] = _srmcli.la_slice_ifg_ifg_set
    __swig_getmethods__["ifg"] = _srmcli.la_slice_ifg_ifg_get
    if _newclass:
        ifg = _swig_property(_srmcli.la_slice_ifg_ifg_get, _srmcli.la_slice_ifg_ifg_set)

    def __init__(self):
        """__init__(la_slice_ifg self) -> la_slice_ifg"""
        this = _srmcli.new_la_slice_ifg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_la_slice_ifg
    __del__ = lambda self: None
la_slice_ifg_swigregister = _srmcli.la_slice_ifg_swigregister
la_slice_ifg_swigregister(la_slice_ifg)
cvar = _srmcli.cvar
LA_MAX_UINT64 = cvar.LA_MAX_UINT64
LA_DEVICE_INVALID = cvar.LA_DEVICE_INVALID
LA_DEVICE_ID_INVALID = cvar.LA_DEVICE_ID_INVALID
LA_OBJECT_ID_INVALID = cvar.LA_OBJECT_ID_INVALID
LA_SLICE_ID_INVALID = cvar.LA_SLICE_ID_INVALID
LA_SLICE_PAIR_ID_INVALID = cvar.LA_SLICE_PAIR_ID_INVALID
LA_IFG_ID_INVALID = cvar.LA_IFG_ID_INVALID
LA_SERDES_INVALID = cvar.LA_SERDES_INVALID
LA_PIF_INVALID = cvar.LA_PIF_INVALID

class la_slice_serdices(_object):
    """Proxy of C++ la_slice_serdices class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, la_slice_serdices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, la_slice_serdices, name)
    __repr__ = _swig_repr
    __swig_setmethods__["is_logical"] = _srmcli.la_slice_serdices_is_logical_set
    __swig_getmethods__["is_logical"] = _srmcli.la_slice_serdices_is_logical_get
    if _newclass:
        is_logical = _swig_property(_srmcli.la_slice_serdices_is_logical_get, _srmcli.la_slice_serdices_is_logical_set)
    __swig_setmethods__["slice"] = _srmcli.la_slice_serdices_slice_set
    __swig_getmethods__["slice"] = _srmcli.la_slice_serdices_slice_get
    if _newclass:
        slice = _swig_property(_srmcli.la_slice_serdices_slice_get, _srmcli.la_slice_serdices_slice_set)
    __swig_setmethods__["ifg"] = _srmcli.la_slice_serdices_ifg_set
    __swig_getmethods__["ifg"] = _srmcli.la_slice_serdices_ifg_get
    if _newclass:
        ifg = _swig_property(_srmcli.la_slice_serdices_ifg_get, _srmcli.la_slice_serdices_ifg_set)
    __swig_setmethods__["first_serdes"] = _srmcli.la_slice_serdices_first_serdes_set
    __swig_getmethods__["first_serdes"] = _srmcli.la_slice_serdices_first_serdes_get
    if _newclass:
        first_serdes = _swig_property(_srmcli.la_slice_serdices_first_serdes_get, _srmcli.la_slice_serdices_first_serdes_set)
    __swig_setmethods__["last_serdes"] = _srmcli.la_slice_serdices_last_serdes_set
    __swig_getmethods__["last_serdes"] = _srmcli.la_slice_serdices_last_serdes_get
    if _newclass:
        last_serdes = _swig_property(_srmcli.la_slice_serdices_last_serdes_get, _srmcli.la_slice_serdices_last_serdes_set)

    def __init__(self):
        """__init__(la_slice_serdices self) -> la_slice_serdices"""
        this = _srmcli.new_la_slice_serdices()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_la_slice_serdices
    __del__ = lambda self: None
la_slice_serdices_swigregister = _srmcli.la_slice_serdices_swigregister
la_slice_serdices_swigregister(la_slice_serdices)

class la_slice_pif(_object):
    """Proxy of C++ la_slice_pif class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, la_slice_pif, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, la_slice_pif, name)
    __repr__ = _swig_repr
    __swig_setmethods__["is_logical"] = _srmcli.la_slice_pif_is_logical_set
    __swig_getmethods__["is_logical"] = _srmcli.la_slice_pif_is_logical_get
    if _newclass:
        is_logical = _swig_property(_srmcli.la_slice_pif_is_logical_get, _srmcli.la_slice_pif_is_logical_set)
    __swig_setmethods__["slice"] = _srmcli.la_slice_pif_slice_set
    __swig_getmethods__["slice"] = _srmcli.la_slice_pif_slice_get
    if _newclass:
        slice = _swig_property(_srmcli.la_slice_pif_slice_get, _srmcli.la_slice_pif_slice_set)
    __swig_setmethods__["ifg"] = _srmcli.la_slice_pif_ifg_set
    __swig_getmethods__["ifg"] = _srmcli.la_slice_pif_ifg_get
    if _newclass:
        ifg = _swig_property(_srmcli.la_slice_pif_ifg_get, _srmcli.la_slice_pif_ifg_set)
    __swig_setmethods__["first_pif"] = _srmcli.la_slice_pif_first_pif_set
    __swig_getmethods__["first_pif"] = _srmcli.la_slice_pif_first_pif_get
    if _newclass:
        first_pif = _swig_property(_srmcli.la_slice_pif_first_pif_get, _srmcli.la_slice_pif_first_pif_set)
    __swig_setmethods__["last_pif"] = _srmcli.la_slice_pif_last_pif_set
    __swig_getmethods__["last_pif"] = _srmcli.la_slice_pif_last_pif_get
    if _newclass:
        last_pif = _swig_property(_srmcli.la_slice_pif_last_pif_get, _srmcli.la_slice_pif_last_pif_set)

    def __init__(self):
        """__init__(la_slice_pif self) -> la_slice_pif"""
        this = _srmcli.new_la_slice_pif()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_la_slice_pif
    __del__ = lambda self: None
la_slice_pif_swigregister = _srmcli.la_slice_pif_swigregister
la_slice_pif_swigregister(la_slice_pif)

la_serdes_direction_e_RX = _srmcli.la_serdes_direction_e_RX
la_serdes_direction_e_TX = _srmcli.la_serdes_direction_e_TX
la_layer_e_L2 = _srmcli.la_layer_e_L2
la_layer_e_L3 = _srmcli.la_layer_e_L3
la_l3_protocol_e_IPV4_UC = _srmcli.la_l3_protocol_e_IPV4_UC
la_l3_protocol_e_IPV6_UC = _srmcli.la_l3_protocol_e_IPV6_UC
la_l3_protocol_e_MPLS = _srmcli.la_l3_protocol_e_MPLS
la_l3_protocol_e_MC_TUNNEL_DECAP = _srmcli.la_l3_protocol_e_MC_TUNNEL_DECAP
la_l3_protocol_e_IPV4_MC = _srmcli.la_l3_protocol_e_IPV4_MC
la_l3_protocol_e_IPV6_MC = _srmcli.la_l3_protocol_e_IPV6_MC
la_l3_protocol_e_LAST = _srmcli.la_l3_protocol_e_LAST
la_l3_protocol_counter_e_IPV4_UC = _srmcli.la_l3_protocol_counter_e_IPV4_UC
la_l3_protocol_counter_e_IPV6_UC = _srmcli.la_l3_protocol_counter_e_IPV6_UC
la_l3_protocol_counter_e_MPLS = _srmcli.la_l3_protocol_counter_e_MPLS
la_l3_protocol_counter_e_IPV4_MC = _srmcli.la_l3_protocol_counter_e_IPV4_MC
la_l3_protocol_counter_e_IPV6_MC = _srmcli.la_l3_protocol_counter_e_IPV6_MC
la_l3_protocol_counter_e_MPLS_SR = _srmcli.la_l3_protocol_counter_e_MPLS_SR
la_l3_protocol_counter_e_LAST = _srmcli.la_l3_protocol_counter_e_LAST
la_mpls_sr_protocol_counter_e_IP_UC = _srmcli.la_mpls_sr_protocol_counter_e_IP_UC
la_mpls_sr_protocol_counter_e_MPLS = _srmcli.la_mpls_sr_protocol_counter_e_MPLS
la_mpls_sr_protocol_counter_e_LAST = _srmcli.la_mpls_sr_protocol_counter_e_LAST
la_ip_version_e_IPV4 = _srmcli.la_ip_version_e_IPV4
la_ip_version_e_IPV6 = _srmcli.la_ip_version_e_IPV6
la_rate_limiters_packet_type_e_BC = _srmcli.la_rate_limiters_packet_type_e_BC
la_rate_limiters_packet_type_e_UNKNOWN_MC = _srmcli.la_rate_limiters_packet_type_e_UNKNOWN_MC
la_rate_limiters_packet_type_e_UNKNOWN_UC = _srmcli.la_rate_limiters_packet_type_e_UNKNOWN_UC
la_rate_limiters_packet_type_e_MC = _srmcli.la_rate_limiters_packet_type_e_MC
la_rate_limiters_packet_type_e_UC = _srmcli.la_rate_limiters_packet_type_e_UC
la_rate_limiters_packet_type_e_LAST = _srmcli.la_rate_limiters_packet_type_e_LAST
la_l4_protocol_e_HOP_BY_HOP = _srmcli.la_l4_protocol_e_HOP_BY_HOP
la_l4_protocol_e_ICMP = _srmcli.la_l4_protocol_e_ICMP
la_l4_protocol_e_IGMP = _srmcli.la_l4_protocol_e_IGMP
la_l4_protocol_e_TCP = _srmcli.la_l4_protocol_e_TCP
la_l4_protocol_e_UDP = _srmcli.la_l4_protocol_e_UDP
la_l4_protocol_e_RSVP = _srmcli.la_l4_protocol_e_RSVP
la_l4_protocol_e_GRE = _srmcli.la_l4_protocol_e_GRE
la_l4_protocol_e_IPV6_ICMP = _srmcli.la_l4_protocol_e_IPV6_ICMP
la_l4_protocol_e_EIGRP = _srmcli.la_l4_protocol_e_EIGRP
la_l4_protocol_e_OSPF = _srmcli.la_l4_protocol_e_OSPF
la_l4_protocol_e_PIM = _srmcli.la_l4_protocol_e_PIM
la_l4_protocol_e_VRRP = _srmcli.la_l4_protocol_e_VRRP
la_l4_protocol_e_L2TP = _srmcli.la_l4_protocol_e_L2TP
la_l4_protocol_e_IPV6_FRAGMENT = _srmcli.la_l4_protocol_e_IPV6_FRAGMENT
la_l4_protocol_e_RESERVED = _srmcli.la_l4_protocol_e_RESERVED
la_lb_mode_e_CONSISTENT = _srmcli.la_lb_mode_e_CONSISTENT
la_lb_mode_e_DYNAMIC = _srmcli.la_lb_mode_e_DYNAMIC
la_lb_hash_e_A = _srmcli.la_lb_hash_e_A
la_lb_hash_e_B = _srmcli.la_lb_hash_e_B
la_lb_hash_e_C = _srmcli.la_lb_hash_e_C
la_lb_hash_e_D = _srmcli.la_lb_hash_e_D
la_device_family_e_NONE = _srmcli.la_device_family_e_NONE
la_device_family_e_PACIFIC = _srmcli.la_device_family_e_PACIFIC
la_device_family_e_GIBRALTAR = _srmcli.la_device_family_e_GIBRALTAR
la_device_family_e_ASIC4 = _srmcli.la_device_family_e_ASIC4
la_device_family_e_ASIC3 = _srmcli.la_device_family_e_ASIC3
la_device_family_e_ASIC7 = _srmcli.la_device_family_e_ASIC7
la_device_family_e_ASIC5 = _srmcli.la_device_family_e_ASIC5
la_device_family_e_LAST = _srmcli.la_device_family_e_LAST
la_device_revision_e_NONE = _srmcli.la_device_revision_e_NONE
la_device_revision_e_PACIFIC_A0 = _srmcli.la_device_revision_e_PACIFIC_A0
la_device_revision_e_PACIFIC_B0 = _srmcli.la_device_revision_e_PACIFIC_B0
la_device_revision_e_PACIFIC_B1 = _srmcli.la_device_revision_e_PACIFIC_B1
la_device_revision_e_GIBRALTAR_A0 = _srmcli.la_device_revision_e_GIBRALTAR_A0
la_device_revision_e_GIBRALTAR_A1 = _srmcli.la_device_revision_e_GIBRALTAR_A1
la_device_revision_e_GIBRALTAR_A2 = _srmcli.la_device_revision_e_GIBRALTAR_A2
la_device_revision_e_ASIC4_A0 = _srmcli.la_device_revision_e_ASIC4_A0
la_device_revision_e_ASIC3_A0 = _srmcli.la_device_revision_e_ASIC3_A0
la_device_revision_e_ASIC7_A0 = _srmcli.la_device_revision_e_ASIC7_A0
la_device_revision_e_ASIC5_A0 = _srmcli.la_device_revision_e_ASIC5_A0
la_device_revision_e_LAST = _srmcli.la_device_revision_e_LAST
la_component_type_e_SERDES = _srmcli.la_component_type_e_SERDES
class la_component_health_t(_object):
    """Proxy of C++ la_component_health_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, la_component_health_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, la_component_health_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _srmcli.la_component_health_t_type_set
    __swig_getmethods__["type"] = _srmcli.la_component_health_t_type_get
    if _newclass:
        type = _swig_property(_srmcli.la_component_health_t_type_get, _srmcli.la_component_health_t_type_set)
    __swig_setmethods__["addr"] = _srmcli.la_component_health_t_addr_set
    __swig_getmethods__["addr"] = _srmcli.la_component_health_t_addr_get
    if _newclass:
        addr = _swig_property(_srmcli.la_component_health_t_addr_get, _srmcli.la_component_health_t_addr_set)
    __swig_setmethods__["status"] = _srmcli.la_component_health_t_status_set
    __swig_getmethods__["status"] = _srmcli.la_component_health_t_status_get
    if _newclass:
        status = _swig_property(_srmcli.la_component_health_t_status_get, _srmcli.la_component_health_t_status_set)

    def __init__(self):
        """__init__(la_component_health_t self) -> la_component_health_t"""
        this = _srmcli.new_la_component_health_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_la_component_health_t
    __del__ = lambda self: None
la_component_health_t_swigregister = _srmcli.la_component_health_t_swigregister
la_component_health_t_swigregister(la_component_health_t)
LA_BLOCK_ID_INVALID = cvar.LA_BLOCK_ID_INVALID
LA_VRF_GID_INVALID = cvar.LA_VRF_GID_INVALID
LA_CLASS_ID_DEFAULT = cvar.LA_CLASS_ID_DEFAULT


def is_pacific(rev):
    """is_pacific(la_device_revision_e rev) -> bool"""
    return _srmcli.is_pacific(rev)

def is_gibraltar(rev):
    """is_gibraltar(la_device_revision_e rev) -> bool"""
    return _srmcli.is_gibraltar(rev)

def is_asic4(rev):
    """is_asic4(la_device_revision_e rev) -> bool"""
    return _srmcli.is_asic4(rev)

def is_asic3(rev):
    """is_asic3(la_device_revision_e rev) -> bool"""
    return _srmcli.is_asic3(rev)

def is_asic7(rev):
    """is_asic7(la_device_revision_e rev) -> bool"""
    return _srmcli.is_asic7(rev)

def is_asic5(rev):
    """is_asic5(la_device_revision_e rev) -> bool"""
    return _srmcli.is_asic5(rev)

def srm_mcu_fw_mode_query(*args):
    """
    srm_mcu_fw_mode_query(uint32_t die, e_srm_fw_mode * fw_mode) -> ip_status_t
    srm_mcu_fw_mode_query(uint32_t die) -> e_srm_fw_mode
    """
    return _srmcli.srm_mcu_fw_mode_query(*args)

def srm_version(*args):
    """
    srm_version(char * buffer, uint32_t buffer_len) -> ip_status_t
    srm_version() -> std::string
    """
    return _srmcli.srm_version(*args)

def srm_version_firmware(*args):
    """
    srm_version_firmware(uint32_t die, char * buffer, uint32_t buffer_len) -> ip_status_t
    srm_version_firmware(uint32_t die) -> std::string
    """
    return _srmcli.srm_version_firmware(*args)
class ffe_taps_t(_object):
    """Proxy of C++ ffe_taps_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ffe_taps_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ffe_taps_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _srmcli.ffe_taps_t_data_set
    __swig_getmethods__["data"] = _srmcli.ffe_taps_t_data_get
    if _newclass:
        data = _swig_property(_srmcli.ffe_taps_t_data_get, _srmcli.ffe_taps_t_data_set)

    def __init__(self):
        """__init__(ffe_taps_t self) -> ffe_taps_t"""
        this = _srmcli.new_ffe_taps_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_ffe_taps_t
    __del__ = lambda self: None
ffe_taps_t_swigregister = _srmcli.ffe_taps_t_swigregister
ffe_taps_t_swigregister(ffe_taps_t)


def srm_rx_dsp_ffe_taps_query(*args):
    """
    srm_rx_dsp_ffe_taps_query(uint32_t die, uint32_t channel, uint16_t ffe_sub_channel, int16_t [10] ffe_tap) -> ip_status_t
    srm_rx_dsp_ffe_taps_query(uint32_t die, uint32_t channel, uint16_t ffe_sub_channel, ffe_taps_t out_ffe_taps) -> ip_status_t
    """
    return _srmcli.srm_rx_dsp_ffe_taps_query(*args)

def srm_rx_dsp_ffe_taps_print(*args):
    """
    srm_rx_dsp_ffe_taps_print(uint32_t die, uint32_t channel, uint16_t ffe_sub_channel, int16_t [10] ffe_taps) -> ip_status_t
    srm_rx_dsp_ffe_taps_print(uint32_t die, uint32_t channel, uint16_t ffe_sub_channel, ffe_taps_t ffe_taps) -> ip_status_t
    """
    return _srmcli.srm_rx_dsp_ffe_taps_print(*args)
class hist_data_t(_object):
    """Proxy of C++ hist_data_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, hist_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hist_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _srmcli.hist_data_t_data_set
    __swig_getmethods__["data"] = _srmcli.hist_data_t_data_get
    if _newclass:
        data = _swig_property(_srmcli.hist_data_t_data_get, _srmcli.hist_data_t_data_set)

    def __init__(self):
        """__init__(hist_data_t self) -> hist_data_t"""
        this = _srmcli.new_hist_data_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_hist_data_t
    __del__ = lambda self: None
hist_data_t_swigregister = _srmcli.hist_data_t_swigregister
hist_data_t_swigregister(hist_data_t)


def srm_rx_dsp_get_histogram(*args):
    """
    srm_rx_dsp_get_histogram(uint32_t die, uint32_t channel, e_srm_rx_error_gen errgen_id, uint32_t * hist_data) -> ip_status_t
    srm_rx_dsp_get_histogram(uint32_t die, uint32_t channel, e_srm_rx_error_gen errgen_id, hist_data_t out_hist) -> ip_status_t
    """
    return _srmcli.srm_rx_dsp_get_histogram(*args)

def srm_rx_dsp_get_histogram_bypass(*args):
    """
    srm_rx_dsp_get_histogram_bypass(uint32_t die, uint32_t channel, e_srm_rx_error_gen errgen_id, uint32_t * hist_data) -> ip_status_t
    srm_rx_dsp_get_histogram_bypass(uint32_t die, uint32_t channel, e_srm_rx_error_gen errgen_id, hist_data_t out_hist) -> ip_status_t
    """
    return _srmcli.srm_rx_dsp_get_histogram_bypass(*args)

def srm_mcu_msg_rx_hist_request(*args):
    """
    srm_mcu_msg_rx_hist_request(uint32_t die, uint32_t channel, e_srm_rx_error_gen errgen_id, uint32_t [160] hist_data) -> ip_status_t
    srm_mcu_msg_rx_hist_request(uint32_t die, uint32_t channel, e_srm_rx_error_gen errgen_id, hist_data_t out_hist) -> ip_status_t
    """
    return _srmcli.srm_mcu_msg_rx_hist_request(*args)

def srm_rx_dsp_hist_ascii_plot(*args):
    """
    srm_rx_dsp_hist_ascii_plot(uint32_t die, uint32_t channel, uint32_t * hist_data) -> ip_status_t
    srm_rx_dsp_hist_ascii_plot(uint32_t die, uint32_t channel, hist_data_t in_hist) -> ip_status_t
    """
    return _srmcli.srm_rx_dsp_hist_ascii_plot(*args)
class srm_mcu_buffer_address_t(_object):
    """Proxy of C++ srm_mcu_buffer_address_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_mcu_buffer_address_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_mcu_buffer_address_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer_address"] = _srmcli.srm_mcu_buffer_address_t_buffer_address_set
    __swig_getmethods__["buffer_address"] = _srmcli.srm_mcu_buffer_address_t_buffer_address_get
    if _newclass:
        buffer_address = _swig_property(_srmcli.srm_mcu_buffer_address_t_buffer_address_get, _srmcli.srm_mcu_buffer_address_t_buffer_address_set)
    __swig_setmethods__["buff_32b_size"] = _srmcli.srm_mcu_buffer_address_t_buff_32b_size_set
    __swig_getmethods__["buff_32b_size"] = _srmcli.srm_mcu_buffer_address_t_buff_32b_size_get
    if _newclass:
        buff_32b_size = _swig_property(_srmcli.srm_mcu_buffer_address_t_buff_32b_size_get, _srmcli.srm_mcu_buffer_address_t_buff_32b_size_set)

    def __init__(self):
        """__init__(srm_mcu_buffer_address_t self) -> srm_mcu_buffer_address_t"""
        this = _srmcli.new_srm_mcu_buffer_address_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_mcu_buffer_address_t
    __del__ = lambda self: None
srm_mcu_buffer_address_t_swigregister = _srmcli.srm_mcu_buffer_address_t_swigregister
srm_mcu_buffer_address_t_swigregister(srm_mcu_buffer_address_t)


def srm_diags_temperature_query(*args):
    """
    srm_diags_temperature_query(uint32_t die, int32_t * temperature) -> ip_status_t
    srm_diags_temperature_query(uint32_t die) -> int32_t
    """
    return _srmcli.srm_diags_temperature_query(*args)

def srm_mcu_get_buffer_address(*args):
    """
    srm_mcu_get_buffer_address(uint32_t die, uint32_t buffer_type, uint32_t * buffer_address, uint16_t * buff_32b_size) -> ip_status_t
    srm_mcu_get_buffer_address(uint32_t die, uint32_t buffer_type, srm_mcu_buffer_address_t out) -> ip_status_t
    """
    return _srmcli.srm_mcu_get_buffer_address(*args)
class srm_prbs_ber_t(_object):
    """Proxy of C++ srm_prbs_ber_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, srm_prbs_ber_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, srm_prbs_ber_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ber"] = _srmcli.srm_prbs_ber_t_ber_set
    __swig_getmethods__["ber"] = _srmcli.srm_prbs_ber_t_ber_get
    if _newclass:
        ber = _swig_property(_srmcli.srm_prbs_ber_t_ber_get, _srmcli.srm_prbs_ber_t_ber_set)
    __swig_setmethods__["ber_lsb"] = _srmcli.srm_prbs_ber_t_ber_lsb_set
    __swig_getmethods__["ber_lsb"] = _srmcli.srm_prbs_ber_t_ber_lsb_get
    if _newclass:
        ber_lsb = _swig_property(_srmcli.srm_prbs_ber_t_ber_lsb_get, _srmcli.srm_prbs_ber_t_ber_lsb_set)

    def __init__(self):
        """__init__(srm_prbs_ber_t self) -> srm_prbs_ber_t"""
        this = _srmcli.new_srm_prbs_ber_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _srmcli.delete_srm_prbs_ber_t
    __del__ = lambda self: None
srm_prbs_ber_t_swigregister = _srmcli.srm_prbs_ber_t_swigregister
srm_prbs_ber_t_swigregister(srm_prbs_ber_t)


def srm_prbs_chk_ber(chk_status, out):
    """srm_prbs_chk_ber(srm_prbs_chk_status_t chk_status, srm_prbs_ber_t out) -> ip_status_t"""
    return _srmcli.srm_prbs_chk_ber(chk_status, out)

def srm_tx_equalization_set(*args):
    """
    srm_tx_equalization_set(uint32_t die, uint32_t channel, int16_t [7] fir_tap) -> ip_status_t
    srm_tx_equalization_set(uint32_t die, uint32_t channel, vector_int16 fir_tap_in) -> ip_status_t
    """
    return _srmcli.srm_tx_equalization_set(*args)

def srm_mcu_pif_write(*args):
    """
    srm_mcu_pif_write(uint32_t die, uint32_t addr, uint32_t const * buffer, uint32_t num_words) -> ip_status_t
    srm_mcu_pif_write(uint32_t die, uint32_t addr, vector_uint32 pif_data) -> ip_status_t
    """
    return _srmcli.srm_mcu_pif_write(*args)

def srm_mcu_pif_read(*args):
    """
    srm_mcu_pif_read(uint32_t die, uint32_t addr, uint32_t * buffer, uint32_t num_words) -> ip_status_t
    srm_mcu_pif_read(uint32_t die, uint32_t addr, uint32_t num_words) -> vector_uint32
    """
    return _srmcli.srm_mcu_pif_read(*args)

def get_serdes_addr(addressing_mode, dev_id, slice, ifg, serdes_package, serdes_index):
    """get_serdes_addr(silicon_one::srm_serdes_addressing_mode_e addressing_mode, uint32_t dev_id, uint32_t slice, uint32_t ifg, uint32_t serdes_package, uint32_t serdes_index) -> uint32_t"""
    return _srmcli.get_serdes_addr(addressing_mode, dev_id, slice, ifg, serdes_package, serdes_index)
# This file is compatible with both classic and new-style classes.


